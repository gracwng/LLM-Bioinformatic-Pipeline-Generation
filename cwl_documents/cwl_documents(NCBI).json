[
  {
    "path": "tools/AlignWise/alignwise.cwl",
    "sha": "15574d77e936428f671cd4145fe8789839066396",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/AlignWise/alignwise.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: AlignWise\ndoc: AlignWise is designed to identify biologically relevant protein-coding regions whilst correcting for frame-shifts\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.fasta)\n\ninputs:\n  method:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --method\n    doc: |\n      method, 'alignfs' or 'genewise'. Default: 'both'\n  ortho:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: --ortho\n    doc: |\n      input file contains EST and orthologs\n  prot_db:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --prot_db\n    doc: |\n      name of protein BLAST database. Default: ens_min_prot\n  nucl_db:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --nucl_db\n    doc: |\n      name of CDS BLAST database. Default: ens_min_cds\n  verbose:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --verbose\n    doc: |\n      running full details\n  v:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -v\n    doc: |\n      running limited details\n  replace_stops:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --replace_stops\n    doc: |\n      replace STOP codons with 'X' (aa) and 'NNN' (nucl)\n  force:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --force\n    doc: |\n      forces use of alignment to process EST\n  extend:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --extend\n    doc: |\n      extend the corrected ORF to nearest ATG and STOP\n  save_blastx:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --save_blastx\n    doc: |\n      BLASTx results are printed into an XML file\n  continue:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --continue\n    doc: |\n      continue analysing previously opened file\n  fast:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --fast\n    doc: |\n      run faster, less sensitive BLASTx\n  O:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -O\n    doc: |\n      minimum number of orthologs to align. Default: 4\n  G:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -G\n    doc: |\n      maximum gap percentage. Default: 25\n  I:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -I\n    doc: |\n      minimum %identity parameter. Default: 20\n  L:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -L\n    doc: |\n      maximum length of gap. Default: 20\n  threads:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -T\n    doc: |\n      number of threads on which to run. Default: 1\n  fasta:\n    type: File\n    inputBinding:\n      position: 2\n\noutputs:\n  log:\n    type: File?\n    outputBinding:\n      glob: $(inputs.fasta.nameroot)_Awise_log.txt\n  orf:\n    type: File?\n    outputBinding:\n      glob: $(inputs.fasta.nameroot)_Awise_orf.fas\n  prot:\n    type: File?\n    outputBinding:\n      glob: $(inputs.fasta.nameroot)_Awise_prot.fas\n\nbaseCommand: [\"AlignWise.pl\"]\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'method': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--method'}, 'doc': \"method, 'alignfs' or 'genewise'. Default: 'both'\\n\"}, 'ortho': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '--ortho'}, 'doc': 'input file contains EST and orthologs\\n'}, 'prot_db': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--prot_db'}, 'doc': 'name of protein BLAST database. Default: ens_min_prot\\n'}, 'nucl_db': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--nucl_db'}, 'doc': 'name of CDS BLAST database. Default: ens_min_cds\\n'}, 'verbose': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--verbose'}, 'doc': 'running full details\\n'}, 'v': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-v'}, 'doc': 'running limited details\\n'}, 'replace_stops': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--replace_stops'}, 'doc': \"replace STOP codons with 'X' (aa) and 'NNN' (nucl)\\n\"}, 'force': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--force'}, 'doc': 'forces use of alignment to process EST\\n'}, 'extend': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--extend'}, 'doc': 'extend the corrected ORF to nearest ATG and STOP\\n'}, 'save_blastx': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--save_blastx'}, 'doc': 'BLASTx results are printed into an XML file\\n'}, 'continue': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--continue'}, 'doc': 'continue analysing previously opened file\\n'}, 'fast': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--fast'}, 'doc': 'run faster, less sensitive BLASTx\\n'}, 'O': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-O'}, 'doc': 'minimum number of orthologs to align. Default: 4\\n'}, 'G': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-G'}, 'doc': 'maximum gap percentage. Default: 25\\n'}, 'I': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-I'}, 'doc': 'minimum %identity parameter. Default: 20\\n'}, 'L': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-L'}, 'doc': 'maximum length of gap. Default: 20\\n'}, 'threads': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-T'}, 'doc': 'number of threads on which to run. Default: 1\\n'}, 'fasta': {'type': 'File', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'log': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.fasta.nameroot)_Awise_log.txt'}}, 'orf': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.fasta.nameroot)_Awise_orf.fas'}}, 'prot': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.fasta.nameroot)_Awise_prot.fas'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['AlignWise.pl']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.fasta)']}}",
    "cwl_doc": "AlignWise is designed to identify biologically relevant protein-coding regions whilst correcting for frame-shifts",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "AlignWise",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/R/chipqc.cwl",
    "sha": "60131c070b939b96b7f60c419f3692024d473f75",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/R/chipqc.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: ChIPQC\ndoc: Quality metrics for ChIPseq data.\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bioconductor-chipqc:1.24.0--r40_0\n  SoftwareRequirement:\n    packages:\n      - package: 'bioconductor-chipqc'\n        version:\n          - '1.24.0'\n        specs:\n          - https://anaconda.org/bioconda/bioconductor-chipqc\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: ChIPQC.R\n        entry: |\n          args = commandArgs(trailingOnly=TRUE)\n          library(\"ggplot2\")\n          library(dplyr)\n          library(\"ChIPQC\")\n          bamfile=args[1]\n          if(!file.exists(bamfile)) {\n            stop(\"ERROR: BAM file not found\")\n          }\n          sample_name = sub('\\\\..*$', '', basename(bamfile))\n          ChipQC_folder = paste0(sample_name, \"_ChIPQC\")\n          print(ChipQC_folder)\n          if(!dir.exists(ChipQC_folder)) {\n          \tdir.create(ChipQC_folder)\n          }\n          sample = ChIPQCsample(bamfile)\n          ChIPQCreport(sample, reportFolder=ChipQC_folder, reportName=\"ChIPQCreport\")\n\ninputs:\n  input:\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n      position: 1\n\noutputs:\n  report:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.input.nameroot + '_ChIPQC')\n\nbaseCommand: [\"Rscript\", \"--vanilla\", \"ChIPQC.R\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'input': {'type': 'File', 'secondaryFiles': '.bai', 'inputBinding': {'position': 1}}}",
    "cwl_outputs": "{'report': {'type': 'Directory', 'outputBinding': {'glob': \"$(inputs.input.nameroot + '_ChIPQC')\"}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bioconductor-chipqc:1.24.0--r40_0'}, 'SoftwareRequirement': {'packages': [{'package': 'bioconductor-chipqc', 'version': ['1.24.0'], 'specs': ['https://anaconda.org/bioconda/bioconductor-chipqc']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', '--vanilla', 'ChIPQC.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'ChIPQC.R', 'entry': 'args = commandArgs(trailingOnly=TRUE)\\nlibrary(\"ggplot2\")\\nlibrary(dplyr)\\nlibrary(\"ChIPQC\")\\nbamfile=args[1]\\nif(!file.exists(bamfile)) {\\n  stop(\"ERROR: BAM file not found\")\\n}\\nsample_name = sub(\\'\\\\\\\\..*$\\', \\'\\', basename(bamfile))\\nChipQC_folder = paste0(sample_name, \"_ChIPQC\")\\nprint(ChipQC_folder)\\nif(!dir.exists(ChipQC_folder)) {\\n\\tdir.create(ChipQC_folder)\\n}\\nsample = ChIPQCsample(bamfile)\\nChIPQCreport(sample, reportFolder=ChipQC_folder, reportName=\"ChIPQCreport\")\\n'}]}}",
    "cwl_doc": "Quality metrics for ChIPseq data.",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ChIPQC",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/R/deseq2-2conditions.cwl",
    "sha": "d4ff926ef7ff2ab117437e7a8f60cb8bd3d913af",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/R/deseq2-2conditions.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Deseq2\ndoc: Deseq2 comparison for two conditions\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0\n  SoftwareRequirement:\n    packages:\n      - package: 'bioconductor-diffbind'\n        version:\n          - '3.8.0'\n        specs:\n          - https://anaconda.org/bioconda/bioconductor-diffbind\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: deseq2.R\n        entry: |\n          args = commandArgs(trailingOnly=TRUE)\n          gene_column = args[4]\n          sample_column = args[5]\n          condition1 = args[6]\n          condition2 = args[7]\n          fc = as.numeric(args[8])\n          fdr = as.numeric(args[9])\n          min_TPM = as.integer(args[10])\n          pairwise = NULL\n          if (length(args) == 11){\n            pairwise = args[11]\n          }\n\n          library(DESeq2)\n          library(ggplot2)\n          library(gplots)\n\n          # Loading data\n          factors = read.table(args[1], header = TRUE, sep = \",\")\n          rownames(factors) <- factors[, sample_column]\n          print(paste(\"Factors loaded:\", nrow(factors)))\n\n          data = read.table(args[2], header = TRUE, sep = \"\\t\", comment.char = '')\n          print(paste(\"Columns in the matrix:\", ncol(data)))\n          print(paste(\"Genes in the matrix:\", nrow(data)))\n\n          tpm_data = read.table(args[3], header = TRUE, sep = \"\\t\", comment.char = '')\n          print(paste(\"Columns in the TPM matrix:\", ncol(tpm_data)))\n          print(paste(\"Genes in the TPM matrix:\", nrow(tpm_data)))\n\n          # Creating factors variable\n          conditions <- c(condition2,condition1)\n          print(paste(\"Conditions:\", length(conditions)))\n\n          factors.set <- factors[factors$condition %in% conditions,]\n          factors.set[] <- lapply( factors.set, factor)\n          factors.set$condition <- factor(factors.set$condition, levels=conditions)\n          if (!is.null(pairwise)){\n             factors.set[,pairwise] <- factor(factors.set[,pairwise])\n             print(paste(\"Using pairwise condition: \", pairwise))\n             print(factors.set[,pairwise])\n          }\n\n          min_number_samples <- min(table(factors.set$condition))\n          print(paste(\"Minimum number of samples in a condition:\", min_number_samples))\n\n          # Filtering low count genes\n          data.set <- data[c(gene_column, rownames(factors.set))]\n          data.counts <- data.set[,!(names(data.set) %in% c(gene_column))]\n          rownames(data.counts) <- data.set[, gene_column]\n          data.counts[is.na(data.counts)] <- 0\n\n          tpm_data.set <- tpm_data[c(gene_column, rownames(factors.set))]\n          tpm_data.counts <- tpm_data.set[,!(names(tpm_data.set) %in% c(gene_column))]\n          rownames(tpm_data.counts) <- tpm_data.set[, gene_column]\n          tpm_data.counts[is.na(tpm_data.counts)] <- 0\n\n          keep <- (rowSums(tpm_data.counts >= min_TPM) >= min_number_samples)\n\n          genes_filtered <- rownames(data.counts[keep, ])\n          data.counts <- data.counts[genes_filtered,]\n          data.set <- subset(data.set, unlist(data[gene_column]) %in% genes_filtered)\n\n          print(paste(\"Genes with reads:\", nrow(data.set)))\n          print(paste(\"Samples to analyze:\", ncol(data.counts)))\n\n          # Running Deseq2\n          if (is.null(pairwise)){\n              dds <- DESeqDataSetFromMatrix(countData = data.counts,\n                                            colData = factors.set,\n                                            design = ~ condition)\n          }else{\n              dds <- DESeqDataSetFromMatrix(countData = data.counts,\n                                            colData = factors.set,\n                                            design = as.formula(paste(\"~\",pairwise,\"+condition\")))\n          }\n\n          dds <- DESeq(dds)\n\n          resultsNames(dds)\n          condition <- tail(resultsNames(dds), n=1)\n          print(paste('Processing Deseq2 condition:', condition))\n          # We should use apeglm instead of normal but apeglm is not available in the\n          # Biconda Deseq2 package.\n          res <- lfcShrink(dds, coef=condition, type=\"apeglm\")\n\n          res <- results(dds, alpha=fdr)\n          resOrdered <- res[order(res$padj),]\n\n          resOrdered_data <- as.data.frame(resOrdered)\n          resOrdered_data <- data.frame(\"Gene_Id\"=rownames(resOrdered_data),resOrdered_data)\n          resOrdered_data <- resOrdered_data[!is.na(resOrdered_data$padj), ]\n\n          count_upregulated <- nrow(resOrdered_data[(resOrdered_data$padj <= fdr & resOrdered_data$log2FoldChange >= fc),])\n          print(paste('Genes with FDR >= ', fdr, \" and logFC >= \", fc, \": \", count_upregulated, sep=''))\n          count_downregulated <- nrow(resOrdered_data[(resOrdered_data$padj <= fdr & resOrdered_data$log2FoldChange <= -1.0 * fc),])\n          print(paste('Genes with FDR >= ', fdr, \" and logFC <= \", fc, \": \", count_downregulated, sep=''))\n\n          file_name = paste(condition,'_deseq2.csv',sep='')\n          write.table(resOrdered_data, file_name, row.names=F, na=\"NA\", append = F, quote= FALSE, sep = \",\", col.names = T)\n\n          rld <- vst(dds)\n          data.pca <- plotPCA(rld, intgroup=c(sample_column,\"condition\"), returnData=TRUE)\n          file_name <- paste(condition, \"_deseq2_pca.csv\", sep=\"\")\n          write.table(data.pca, file_name, row.names=F, na=\"NA\", append = F, quote= FALSE, sep = \",\", col.names = T)\n\n          percentVar <- round(100 * attr(data.pca, \"percentVar\"))\n          ggplot(data.pca, aes(PC1, PC2, color=condition)) +\n                  geom_point(size=1) +\n                  ggtitle(\"PCA\") +\n                  xlab(paste0(\"PC1: \",percentVar[1],\"% variance\")) +\n                  ylab(paste0(\"PC2: \",percentVar[2],\"% variance\"))\n          ggsave(paste(condition,'_deseq2_pca.pdf',sep=''))\n\n          if (count_upregulated > 0 && count_downregulated > 0){\n            pdf(paste(condition,'_deseq2_volcano.pdf',sep=''))\n            with(resOrdered_data, plot(log2FoldChange, -log10(padj), pch=20, main=paste(\"Volcano plot\\n\",condition, sep='')))\n            with(subset(resOrdered_data, (padj <= fdr & abs(log2FoldChange) >= fc)), points(log2FoldChange, -log10(padj), pch=20, col=\"red\"))\n            dev.off()\n\n            resOrdered_data <- resOrdered_data[(resOrdered_data$padj <= fdr & abs(resOrdered_data$log2FoldChange) >= fc),]\n            topVarGenes <- rownames(resOrdered_data)\n            if (length(topVarGenes) > 0){\n                pal <- colorRampPalette(c(\"white\",\"blue\"))\n                pdf(paste(condition,'_deseq2_expression_heatmap.pdf',sep=''))\n                heatmap.2(assay(rld)[ topVarGenes, ], col=pal, Rowv=T, Colv=T,\n                          dendrogram = c(\"both\"),\n                          trace=\"none\",\n                          density.info=c(\"density\"),\n                          key.xlab=\"Expression value\",\n                          key.ylab=\"Density\",\n                          main=paste(\"Expression\\n\",condition, sep=''),\n                          cexCol=.5,\n                          offsetCol=.0,\n                          cexRow=.5,\n                          margins=c(6,12),\n                          breaks=20,\n                          key=T,)\n                dev.off()\n\n                pdf(paste(condition,'_deseq2_correlation_heatmap.pdf',sep=''))\n                heatmap.2(cor(assay(rld)[ topVarGenes, ]), col=pal, Rowv=T, Colv=T,\n                          dendrogram = c(\"column\"),\n                          trace=\"none\",\n                          density.info=c(\"density\"),\n                          key.xlab=\"Expression value\",\n                          key.ylab=\"Density\",\n                          main=paste(\"Correlation\\n\",condition, sep=''),\n                          cexCol=.5,\n                          offsetCol=.0,\n                          cexRow=.5,\n                          margins=c(6,12),\n                          breaks=20,\n                          key=T,)\n                dev.off()\n            }\n          }\n\ninputs:\n  factor:\n    type: File\n    inputBinding:\n      position: 1\n  matrix:\n    type: File\n    inputBinding:\n      position: 2\n  tpm_matrix:\n    type: File\n    inputBinding:\n      position: 3\n  gene_column:\n    type: string\n    inputBinding:\n      position: 4\n  sample_column:\n    type: string\n    inputBinding:\n      position: 5\n  condition1:\n    type: string\n    inputBinding:\n      position: 6\n  condition2:\n    type: string\n    inputBinding:\n      position: 7\n  fc:\n    type: float\n    inputBinding:\n      position: 8\n  fdr:\n    type: float\n    inputBinding:\n      position: 9\n  min_tpm:\n    type: int\n    inputBinding:\n      position: 10\n  pairwise:\n    type: string?\n    inputBinding:\n      position: 11\n\noutputs:\n   dga:\n    type: File\n    outputBinding:\n      glob: condition_*_deseq2.csv\n   pca:\n     type: File\n     outputBinding:\n       glob: condition_*_deseq2_pca.csv\n   pca_plot:\n     type: File\n     outputBinding:\n       glob: condition_*_deseq2_pca.pdf\n   volcano_plot:\n     type: File?\n     outputBinding:\n       glob: condition_*_deseq2_volcano.pdf\n   correlation_heatmap:\n     type: File?\n     outputBinding:\n       glob: condition_*_deseq2_correlation_heatmap.pdf\n   expression_heatmap:\n     type: File?\n     outputBinding:\n       glob: condition_*_deseq2_expression_heatmap.pdf\n\n\nbaseCommand: [\"Rscript\", \"--vanilla\",\"deseq2.R\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'factor': {'type': 'File', 'inputBinding': {'position': 1}}, 'matrix': {'type': 'File', 'inputBinding': {'position': 2}}, 'tpm_matrix': {'type': 'File', 'inputBinding': {'position': 3}}, 'gene_column': {'type': 'string', 'inputBinding': {'position': 4}}, 'sample_column': {'type': 'string', 'inputBinding': {'position': 5}}, 'condition1': {'type': 'string', 'inputBinding': {'position': 6}}, 'condition2': {'type': 'string', 'inputBinding': {'position': 7}}, 'fc': {'type': 'float', 'inputBinding': {'position': 8}}, 'fdr': {'type': 'float', 'inputBinding': {'position': 9}}, 'min_tpm': {'type': 'int', 'inputBinding': {'position': 10}}, 'pairwise': {'type': 'string?', 'inputBinding': {'position': 11}}}",
    "cwl_outputs": "{'dga': {'type': 'File', 'outputBinding': {'glob': 'condition_*_deseq2.csv'}}, 'pca': {'type': 'File', 'outputBinding': {'glob': 'condition_*_deseq2_pca.csv'}}, 'pca_plot': {'type': 'File', 'outputBinding': {'glob': 'condition_*_deseq2_pca.pdf'}}, 'volcano_plot': {'type': 'File?', 'outputBinding': {'glob': 'condition_*_deseq2_volcano.pdf'}}, 'correlation_heatmap': {'type': 'File?', 'outputBinding': {'glob': 'condition_*_deseq2_correlation_heatmap.pdf'}}, 'expression_heatmap': {'type': 'File?', 'outputBinding': {'glob': 'condition_*_deseq2_expression_heatmap.pdf'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0'}, 'SoftwareRequirement': {'packages': [{'package': 'bioconductor-diffbind', 'version': ['3.8.0'], 'specs': ['https://anaconda.org/bioconda/bioconductor-diffbind']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', '--vanilla', 'deseq2.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'deseq2.R', 'entry': 'args = commandArgs(trailingOnly=TRUE)\\ngene_column = args[4]\\nsample_column = args[5]\\ncondition1 = args[6]\\ncondition2 = args[7]\\nfc = as.numeric(args[8])\\nfdr = as.numeric(args[9])\\nmin_TPM = as.integer(args[10])\\npairwise = NULL\\nif (length(args) == 11){\\n  pairwise = args[11]\\n}\\n\\nlibrary(DESeq2)\\nlibrary(ggplot2)\\nlibrary(gplots)\\n\\n# Loading data\\nfactors = read.table(args[1], header = TRUE, sep = \",\")\\nrownames(factors) <- factors[, sample_column]\\nprint(paste(\"Factors loaded:\", nrow(factors)))\\n\\ndata = read.table(args[2], header = TRUE, sep = \"\\\\t\", comment.char = \\'\\')\\nprint(paste(\"Columns in the matrix:\", ncol(data)))\\nprint(paste(\"Genes in the matrix:\", nrow(data)))\\n\\ntpm_data = read.table(args[3], header = TRUE, sep = \"\\\\t\", comment.char = \\'\\')\\nprint(paste(\"Columns in the TPM matrix:\", ncol(tpm_data)))\\nprint(paste(\"Genes in the TPM matrix:\", nrow(tpm_data)))\\n\\n# Creating factors variable\\nconditions <- c(condition2,condition1)\\nprint(paste(\"Conditions:\", length(conditions)))\\n\\nfactors.set <- factors[factors$condition %in% conditions,]\\nfactors.set[] <- lapply( factors.set, factor)\\nfactors.set$condition <- factor(factors.set$condition, levels=conditions)\\nif (!is.null(pairwise)){\\n   factors.set[,pairwise] <- factor(factors.set[,pairwise])\\n   print(paste(\"Using pairwise condition: \", pairwise))\\n   print(factors.set[,pairwise])\\n}\\n\\nmin_number_samples <- min(table(factors.set$condition))\\nprint(paste(\"Minimum number of samples in a condition:\", min_number_samples))\\n\\n# Filtering low count genes\\ndata.set <- data[c(gene_column, rownames(factors.set))]\\ndata.counts <- data.set[,!(names(data.set) %in% c(gene_column))]\\nrownames(data.counts) <- data.set[, gene_column]\\ndata.counts[is.na(data.counts)] <- 0\\n\\ntpm_data.set <- tpm_data[c(gene_column, rownames(factors.set))]\\ntpm_data.counts <- tpm_data.set[,!(names(tpm_data.set) %in% c(gene_column))]\\nrownames(tpm_data.counts) <- tpm_data.set[, gene_column]\\ntpm_data.counts[is.na(tpm_data.counts)] <- 0\\n\\nkeep <- (rowSums(tpm_data.counts >= min_TPM) >= min_number_samples)\\n\\ngenes_filtered <- rownames(data.counts[keep, ])\\ndata.counts <- data.counts[genes_filtered,]\\ndata.set <- subset(data.set, unlist(data[gene_column]) %in% genes_filtered)\\n\\nprint(paste(\"Genes with reads:\", nrow(data.set)))\\nprint(paste(\"Samples to analyze:\", ncol(data.counts)))\\n\\n# Running Deseq2\\nif (is.null(pairwise)){\\n    dds <- DESeqDataSetFromMatrix(countData = data.counts,\\n                                  colData = factors.set,\\n                                  design = ~ condition)\\n}else{\\n    dds <- DESeqDataSetFromMatrix(countData = data.counts,\\n                                  colData = factors.set,\\n                                  design = as.formula(paste(\"~\",pairwise,\"+condition\")))\\n}\\n\\ndds <- DESeq(dds)\\n\\nresultsNames(dds)\\ncondition <- tail(resultsNames(dds), n=1)\\nprint(paste(\\'Processing Deseq2 condition:\\', condition))\\n# We should use apeglm instead of normal but apeglm is not available in the\\n# Biconda Deseq2 package.\\nres <- lfcShrink(dds, coef=condition, type=\"apeglm\")\\n\\nres <- results(dds, alpha=fdr)\\nresOrdered <- res[order(res$padj),]\\n\\nresOrdered_data <- as.data.frame(resOrdered)\\nresOrdered_data <- data.frame(\"Gene_Id\"=rownames(resOrdered_data),resOrdered_data)\\nresOrdered_data <- resOrdered_data[!is.na(resOrdered_data$padj), ]\\n\\ncount_upregulated <- nrow(resOrdered_data[(resOrdered_data$padj <= fdr & resOrdered_data$log2FoldChange >= fc),])\\nprint(paste(\\'Genes with FDR >= \\', fdr, \" and logFC >= \", fc, \": \", count_upregulated, sep=\\'\\'))\\ncount_downregulated <- nrow(resOrdered_data[(resOrdered_data$padj <= fdr & resOrdered_data$log2FoldChange <= -1.0 * fc),])\\nprint(paste(\\'Genes with FDR >= \\', fdr, \" and logFC <= \", fc, \": \", count_downregulated, sep=\\'\\'))\\n\\nfile_name = paste(condition,\\'_deseq2.csv\\',sep=\\'\\')\\nwrite.table(resOrdered_data, file_name, row.names=F, na=\"NA\", append = F, quote= FALSE, sep = \",\", col.names = T)\\n\\nrld <- vst(dds)\\ndata.pca <- plotPCA(rld, intgroup=c(sample_column,\"condition\"), returnData=TRUE)\\nfile_name <- paste(condition, \"_deseq2_pca.csv\", sep=\"\")\\nwrite.table(data.pca, file_name, row.names=F, na=\"NA\", append = F, quote= FALSE, sep = \",\", col.names = T)\\n\\npercentVar <- round(100 * attr(data.pca, \"percentVar\"))\\nggplot(data.pca, aes(PC1, PC2, color=condition)) +\\n        geom_point(size=1) +\\n        ggtitle(\"PCA\") +\\n        xlab(paste0(\"PC1: \",percentVar[1],\"% variance\")) +\\n        ylab(paste0(\"PC2: \",percentVar[2],\"% variance\"))\\nggsave(paste(condition,\\'_deseq2_pca.pdf\\',sep=\\'\\'))\\n\\nif (count_upregulated > 0 && count_downregulated > 0){\\n  pdf(paste(condition,\\'_deseq2_volcano.pdf\\',sep=\\'\\'))\\n  with(resOrdered_data, plot(log2FoldChange, -log10(padj), pch=20, main=paste(\"Volcano plot\\\\n\",condition, sep=\\'\\')))\\n  with(subset(resOrdered_data, (padj <= fdr & abs(log2FoldChange) >= fc)), points(log2FoldChange, -log10(padj), pch=20, col=\"red\"))\\n  dev.off()\\n\\n  resOrdered_data <- resOrdered_data[(resOrdered_data$padj <= fdr & abs(resOrdered_data$log2FoldChange) >= fc),]\\n  topVarGenes <- rownames(resOrdered_data)\\n  if (length(topVarGenes) > 0){\\n      pal <- colorRampPalette(c(\"white\",\"blue\"))\\n      pdf(paste(condition,\\'_deseq2_expression_heatmap.pdf\\',sep=\\'\\'))\\n      heatmap.2(assay(rld)[ topVarGenes, ], col=pal, Rowv=T, Colv=T,\\n                dendrogram = c(\"both\"),\\n                trace=\"none\",\\n                density.info=c(\"density\"),\\n                key.xlab=\"Expression value\",\\n                key.ylab=\"Density\",\\n                main=paste(\"Expression\\\\n\",condition, sep=\\'\\'),\\n                cexCol=.5,\\n                offsetCol=.0,\\n                cexRow=.5,\\n                margins=c(6,12),\\n                breaks=20,\\n                key=T,)\\n      dev.off()\\n\\n      pdf(paste(condition,\\'_deseq2_correlation_heatmap.pdf\\',sep=\\'\\'))\\n      heatmap.2(cor(assay(rld)[ topVarGenes, ]), col=pal, Rowv=T, Colv=T,\\n                dendrogram = c(\"column\"),\\n                trace=\"none\",\\n                density.info=c(\"density\"),\\n                key.xlab=\"Expression value\",\\n                key.ylab=\"Density\",\\n                main=paste(\"Correlation\\\\n\",condition, sep=\\'\\'),\\n                cexCol=.5,\\n                offsetCol=.0,\\n                cexRow=.5,\\n                margins=c(6,12),\\n                breaks=20,\\n                key=T,)\\n      dev.off()\\n  }\\n}\\n'}]}}",
    "cwl_doc": "Deseq2 comparison for two conditions",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Deseq2",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/R/deseq2-pca.cwl",
    "sha": "41f5b420677b20c5122ab12b32d3ab50404c78b4",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/R/deseq2-pca.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: PCA_Json\ndoc: Creates a JSON with the PCA data\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0\n  SoftwareRequirement:\n    packages:\n      - package: 'bioconductor-diffbind'\n        version:\n          - '3.8.0'\n        specs:\n          - https://anaconda.org/bioconda/bioconductor-diffbind\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: correlation.R\n        entry: |\n          args = commandArgs(trailingOnly=TRUE)\n          gene_column = args[3]\n          sample_column = args[4]\n          condition1 = args[5]\n          condition2 = args[6]\n          min_reads = as.integer(args[7])\n          out = args[8]\n\n          library(DESeq2)\n\n          # Loading data\n          factors = read.table(args[1], header = TRUE, sep = \"\\t\")\n          rownames(factors) <- factors[, sample_column]\n          print(paste(\"Factors loaded:\", nrow(factors)))\n\n          data = read.table(args[2], header = TRUE, sep = \"\\t\", comment.char = '')\n          print(paste(\"Columns in the matrix:\", ncol(data)))\n          print(paste(\"Genes in the matrix:\", nrow(data)))\n\n          # Creating factors variable\n          conditions <- c(condition2,condition1)\n          print(paste(\"Conditions:\", length(conditions)))\n\n          factors.set <- factors[factors$condition %in% conditions,]\n          factors.set[] <- lapply( factors.set, factor)\n          factors.set$condition <- factor(factors.set$condition, levels=conditions)\n\n          min_number_samples <- min(table(factors.set$condition))\n          print(paste(\"Minimum number of samples in a condition:\", min_number_samples))\n\n          # Filtering low count genes\n          data.set <- data[c(gene_column, rownames(factors.set))]\n          data.counts <- data.set[,!(names(data.set) %in% c(gene_column))]\n          rownames(data.counts) <- data.set[, gene_column]\n          data.counts[is.na(data.counts)] <- 0\n\n          keep <- (rowSums(data.counts > min_reads) >= min_number_samples)\n          genes_filtered <- rownames(data.counts[keep, ])\n          data.counts <- data.counts[genes_filtered,]\n          data.counts[] <- as.integer(round(as.matrix(data.counts)))\n          data.set <- subset(data.set, unlist(data[gene_column]) %in% genes_filtered)\n\n          print(paste(\"Genes with reads:\", nrow(data.set)))\n          print(paste(\"Samples to analyze:\", ncol(data.counts)))\n\n          print(\"Calculating PCA\")\n          # Running Deseq2\n          dds <- DESeqDataSetFromMatrix(countData = data.counts,\n                                        colData = factors.set,\n                                        design = ~ condition)\n\n          dds <- DESeq(dds)\n          rld <- vst(dds)\n          data.pca <- plotPCA(rld, intgroup=c(sample_column,\"condition\"), returnData=TRUE)\n          write.table(data.pca, out, row.names=F, na=\"NA\", append = F, quote= FALSE, sep = \",\", col.names = T)\n\n\ninputs:\n  factor:\n    type: File\n    inputBinding:\n      position: 1\n  matrix:\n    type: File\n    inputBinding:\n      position: 2\n  gene_column:\n    type: string\n    inputBinding:\n      position: 3\n  sample_column:\n    type: string\n    inputBinding:\n      position: 4\n  condition1:\n    type: string\n    inputBinding:\n      position: 5\n  condition2:\n    type: string\n    inputBinding:\n      position: 6\n  min_reads:\n    type: int\n    inputBinding:\n      position: 7\n  out:\n    type: string\n    inputBinding:\n      position: 8\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n\n\nbaseCommand: [\"Rscript\", \"--vanilla\",\"correlation.R\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'factor': {'type': 'File', 'inputBinding': {'position': 1}}, 'matrix': {'type': 'File', 'inputBinding': {'position': 2}}, 'gene_column': {'type': 'string', 'inputBinding': {'position': 3}}, 'sample_column': {'type': 'string', 'inputBinding': {'position': 4}}, 'condition1': {'type': 'string', 'inputBinding': {'position': 5}}, 'condition2': {'type': 'string', 'inputBinding': {'position': 6}}, 'min_reads': {'type': 'int', 'inputBinding': {'position': 7}}, 'out': {'type': 'string', 'inputBinding': {'position': 8}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0'}, 'SoftwareRequirement': {'packages': [{'package': 'bioconductor-diffbind', 'version': ['3.8.0'], 'specs': ['https://anaconda.org/bioconda/bioconductor-diffbind']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', '--vanilla', 'correlation.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'correlation.R', 'entry': 'args = commandArgs(trailingOnly=TRUE)\\ngene_column = args[3]\\nsample_column = args[4]\\ncondition1 = args[5]\\ncondition2 = args[6]\\nmin_reads = as.integer(args[7])\\nout = args[8]\\n\\nlibrary(DESeq2)\\n\\n# Loading data\\nfactors = read.table(args[1], header = TRUE, sep = \"\\\\t\")\\nrownames(factors) <- factors[, sample_column]\\nprint(paste(\"Factors loaded:\", nrow(factors)))\\n\\ndata = read.table(args[2], header = TRUE, sep = \"\\\\t\", comment.char = \\'\\')\\nprint(paste(\"Columns in the matrix:\", ncol(data)))\\nprint(paste(\"Genes in the matrix:\", nrow(data)))\\n\\n# Creating factors variable\\nconditions <- c(condition2,condition1)\\nprint(paste(\"Conditions:\", length(conditions)))\\n\\nfactors.set <- factors[factors$condition %in% conditions,]\\nfactors.set[] <- lapply( factors.set, factor)\\nfactors.set$condition <- factor(factors.set$condition, levels=conditions)\\n\\nmin_number_samples <- min(table(factors.set$condition))\\nprint(paste(\"Minimum number of samples in a condition:\", min_number_samples))\\n\\n# Filtering low count genes\\ndata.set <- data[c(gene_column, rownames(factors.set))]\\ndata.counts <- data.set[,!(names(data.set) %in% c(gene_column))]\\nrownames(data.counts) <- data.set[, gene_column]\\ndata.counts[is.na(data.counts)] <- 0\\n\\nkeep <- (rowSums(data.counts > min_reads) >= min_number_samples)\\ngenes_filtered <- rownames(data.counts[keep, ])\\ndata.counts <- data.counts[genes_filtered,]\\ndata.counts[] <- as.integer(round(as.matrix(data.counts)))\\ndata.set <- subset(data.set, unlist(data[gene_column]) %in% genes_filtered)\\n\\nprint(paste(\"Genes with reads:\", nrow(data.set)))\\nprint(paste(\"Samples to analyze:\", ncol(data.counts)))\\n\\nprint(\"Calculating PCA\")\\n# Running Deseq2\\ndds <- DESeqDataSetFromMatrix(countData = data.counts,\\n                              colData = factors.set,\\n                              design = ~ condition)\\n\\ndds <- DESeq(dds)\\nrld <- vst(dds)\\ndata.pca <- plotPCA(rld, intgroup=c(sample_column,\"condition\"), returnData=TRUE)\\nwrite.table(data.pca, out, row.names=F, na=\"NA\", append = F, quote= FALSE, sep = \",\", col.names = T)\\n'}]}}",
    "cwl_doc": "Creates a JSON with the PCA data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "PCA_Json",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/R/dga_heatmaps.cwl",
    "sha": "cd0e9bd61b45fa00aafb844ed9e30e46b8a3fd15",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/R/dga_heatmaps.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: R_Heatmaps\ndoc: Quality metrics for ChIPseq data.\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0\n  SoftwareRequirement:\n    packages:\n      - package: 'bioconductor-diffbind'\n        version:\n          - '3.8.0'\n        specs:\n          - https://anaconda.org/bioconda/bioconductor-diffbind\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: script.R\n        entry: |\n          args = commandArgs(trailingOnly=TRUE)\n          gene_column = args[4]\n          sample_column = args[5]\n          fc = as.numeric(args[6])\n          fdr = as.numeric(args[7])\n          out_expression = args[8]\n          out_correlation = args[9]\n          out_pca = args[10]\n\n          require(ggplot2)\n          library(gplots)\n          library(edgeR)\n\n          highlight_color = \"red\"\n\n          # Loading data\n          factors = read.table(args[1], header = TRUE, sep = \",\")\n          rownames(factors) <- factors[, sample_column]\n          print(paste(\"Factors loaded:\", nrow(factors)))\n\n          matrix <- read.table(args[2], header = TRUE, sep = \"\\t\", comment.char = '')\n          print(paste(\"Columns in the matrix:\", ncol(matrix)))\n          print(paste(\"Genes in the matrix:\", nrow(matrix)))\n\n          data = read.csv(args[3])\n          data <- subset(data, FDR <= fdr & abs(logFC) >= fc)\n          print(paste(\"DGA genes loaded:\", nrow(data)))\n\n          # Filtering low count genes\n          data.set <- matrix[c(gene_column, rownames(factors))]\n          data.counts <- data.set[,!(names(data.set) %in% c(gene_column))]\n          rownames(data.counts) <- data.set[, gene_column]\n          data.counts[is.na(data.counts)] <- 0\n          data.counts <- data.counts[data$Gene_Id,]\n          data.counts.log <- cpm(data.counts, log=TRUE, prior.count = 1)\n\n          print(paste(\"Genes with reads:\", nrow(data.counts)))\n          print(paste(\"Samples to analyze:\", ncol(data.counts)))\n\n          pal <- colorRampPalette(c(\"white\",\"blue\"))\n          pdf(out_expression)\n          heatmap.2(data.counts.log, col=pal, Rowv=T, Colv=T,\n                    dendrogram = c(\"both\"),\n                    trace=\"none\",\n                    density.info=c(\"density\"),\n                    key.xlab=\"Expression value\",\n                    key.ylab=\"Density\",\n                    main=\"Gene Expression\",\n                    cexCol=.5,\n                    offsetCol=.0,\n                    cexRow=.5,\n                    margins=c(6,12),\n                    breaks=20,\n                    key=T,)\n          dev.off()\n\n          pdf(out_correlation)\n          heatmap.2(cor(data.counts.log), col=pal, Rowv=T, Colv=T,\n                    dendrogram = c(\"column\"),\n                    trace=\"none\",\n                    density.info=c(\"density\"),\n                    key.xlab=\"Expression value\",\n                    key.ylab=\"Density\",\n                    main=\"Correlation\",\n                    cexCol=.5,\n                    offsetCol=.0,\n                    cexRow=.5,\n                    margins=c(6,12),\n                    breaks=20,\n                    key=T,)\n          dev.off()\n\n          pca <- prcomp(t(data.counts.log), scale. = TRUE)\n          data.pca <- as.data.frame(pca$x[,c('PC1', 'PC2')])\n          data.pca$condition <- factors$condition\n          ggplot(data.pca, aes(PC1, PC2, color=condition)) +\n              geom_point(size=1) +\n              ggtitle(\"PCA\") +\n              xlab(\"PC1\") +\n              ylab(\"PC2\")\n          ggsave(out_pca)\n\ninputs:\n  factor:\n    type: File\n    inputBinding:\n      position: 1\n  matrix:\n    type: File\n    inputBinding:\n      position: 2\n  dga_data:\n    type: File\n    inputBinding:\n      position: 3\n  gene_column:\n    type: string\n    inputBinding:\n      position: 4\n  sample_column:\n    type: string\n    inputBinding:\n      position: 5\n  fc:\n    type: float\n    inputBinding:\n      position: 6\n  fdr:\n    type: float\n    inputBinding:\n      position: 7\n  out_expression:\n    type: string\n    inputBinding:\n      position: 8\n  out_correlation:\n    type: string\n    inputBinding:\n      position: 9\n  out_pca:\n    type: string\n    inputBinding:\n      position: 10\n\noutputs:\n  output_expression:\n    type: File\n    outputBinding:\n      glob: $(inputs.out_expression)\n  output_correlation:\n    type: File\n    outputBinding:\n      glob: $(inputs.out_correlation)\n  output_pca:\n    type: File\n    outputBinding:\n      glob: $(inputs.out_pca)\n\nbaseCommand: [\"Rscript\", \"--vanilla\",\"script.R\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'factor': {'type': 'File', 'inputBinding': {'position': 1}}, 'matrix': {'type': 'File', 'inputBinding': {'position': 2}}, 'dga_data': {'type': 'File', 'inputBinding': {'position': 3}}, 'gene_column': {'type': 'string', 'inputBinding': {'position': 4}}, 'sample_column': {'type': 'string', 'inputBinding': {'position': 5}}, 'fc': {'type': 'float', 'inputBinding': {'position': 6}}, 'fdr': {'type': 'float', 'inputBinding': {'position': 7}}, 'out_expression': {'type': 'string', 'inputBinding': {'position': 8}}, 'out_correlation': {'type': 'string', 'inputBinding': {'position': 9}}, 'out_pca': {'type': 'string', 'inputBinding': {'position': 10}}}",
    "cwl_outputs": "{'output_expression': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out_expression)'}}, 'output_correlation': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out_correlation)'}}, 'output_pca': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out_pca)'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0'}, 'SoftwareRequirement': {'packages': [{'package': 'bioconductor-diffbind', 'version': ['3.8.0'], 'specs': ['https://anaconda.org/bioconda/bioconductor-diffbind']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', '--vanilla', 'script.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'script.R', 'entry': 'args = commandArgs(trailingOnly=TRUE)\\ngene_column = args[4]\\nsample_column = args[5]\\nfc = as.numeric(args[6])\\nfdr = as.numeric(args[7])\\nout_expression = args[8]\\nout_correlation = args[9]\\nout_pca = args[10]\\n\\nrequire(ggplot2)\\nlibrary(gplots)\\nlibrary(edgeR)\\n\\nhighlight_color = \"red\"\\n\\n# Loading data\\nfactors = read.table(args[1], header = TRUE, sep = \",\")\\nrownames(factors) <- factors[, sample_column]\\nprint(paste(\"Factors loaded:\", nrow(factors)))\\n\\nmatrix <- read.table(args[2], header = TRUE, sep = \"\\\\t\", comment.char = \\'\\')\\nprint(paste(\"Columns in the matrix:\", ncol(matrix)))\\nprint(paste(\"Genes in the matrix:\", nrow(matrix)))\\n\\ndata = read.csv(args[3])\\ndata <- subset(data, FDR <= fdr & abs(logFC) >= fc)\\nprint(paste(\"DGA genes loaded:\", nrow(data)))\\n\\n# Filtering low count genes\\ndata.set <- matrix[c(gene_column, rownames(factors))]\\ndata.counts <- data.set[,!(names(data.set) %in% c(gene_column))]\\nrownames(data.counts) <- data.set[, gene_column]\\ndata.counts[is.na(data.counts)] <- 0\\ndata.counts <- data.counts[data$Gene_Id,]\\ndata.counts.log <- cpm(data.counts, log=TRUE, prior.count = 1)\\n\\nprint(paste(\"Genes with reads:\", nrow(data.counts)))\\nprint(paste(\"Samples to analyze:\", ncol(data.counts)))\\n\\npal <- colorRampPalette(c(\"white\",\"blue\"))\\npdf(out_expression)\\nheatmap.2(data.counts.log, col=pal, Rowv=T, Colv=T,\\n          dendrogram = c(\"both\"),\\n          trace=\"none\",\\n          density.info=c(\"density\"),\\n          key.xlab=\"Expression value\",\\n          key.ylab=\"Density\",\\n          main=\"Gene Expression\",\\n          cexCol=.5,\\n          offsetCol=.0,\\n          cexRow=.5,\\n          margins=c(6,12),\\n          breaks=20,\\n          key=T,)\\ndev.off()\\n\\npdf(out_correlation)\\nheatmap.2(cor(data.counts.log), col=pal, Rowv=T, Colv=T,\\n          dendrogram = c(\"column\"),\\n          trace=\"none\",\\n          density.info=c(\"density\"),\\n          key.xlab=\"Expression value\",\\n          key.ylab=\"Density\",\\n          main=\"Correlation\",\\n          cexCol=.5,\\n          offsetCol=.0,\\n          cexRow=.5,\\n          margins=c(6,12),\\n          breaks=20,\\n          key=T,)\\ndev.off()\\n\\npca <- prcomp(t(data.counts.log), scale. = TRUE)\\ndata.pca <- as.data.frame(pca$x[,c(\\'PC1\\', \\'PC2\\')])\\ndata.pca$condition <- factors$condition\\nggplot(data.pca, aes(PC1, PC2, color=condition)) +\\n    geom_point(size=1) +\\n    ggtitle(\"PCA\") +\\n    xlab(\"PC1\") +\\n    ylab(\"PC2\")\\nggsave(out_pca)\\n'}]}}",
    "cwl_doc": "Quality metrics for ChIPseq data.",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "R_Heatmaps",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/R/diffbind.cwl",
    "sha": "4e86b745126b886665a27a154df6ba814fee6241",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/R/diffbind.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: DiffBind\ndoc: Compute differentially bound sites from multiple ChIP-seq experiments using affinity (quantitative) data\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0\n  SoftwareRequirement:\n    packages:\n      - package: 'bioconductor-diffbind'\n        version:\n          - '3.8.0'\n        specs:\n          - https://anaconda.org/bioconda/bioconductor-diffbind\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: diffbind.R\n        entry: |\n          args = commandArgs(trailingOnly=TRUE)\n          bedDir = args[2]\n          bamDir = args[3]\n          minMembers = as.numeric(args[4])\n          peakcaller = args[5]\n          paired = FALSE\n          if (length(args) == 6){\n            paired = TRUE\n          }\n\n          library(\"DiffBind\")\n          samples <- read.csv(args[1],sep = \"\\t\")\n          prefix <- paste('condition_', paste(unique(samples$Condition), collapse = '_vs_'), sep='')\n          bed <- c()\n          bam <- c()\n          callers <- c()\n          for(i in samples$id){\n              f <- paste(bedDir,\"/\", i,\"_sorted_peaks.narrowPeak\", sep=\"\")\n              bed <- c(bed,f)\n              f <- paste(bamDir,\"/\", i,\"_sorted.bam\", sep=\"\")\n              bam <- c(bam,f)\n              callers <- c(callers, peakcaller)\n          }\n          samples$Peaks <- bed\n          samples$bamReads <- bam\n          samples$PeakCaller <- callers\n          samples\n          DBdata <- dba(sampleSheet=samples)\n          DBdata <- dba.count(DBdata)\n          if (paired){\n              print(\"Doing paired analysis\")\n              DBdata <- dba.contrast(DBdata, categories=DBA_CONDITION, block=DBA_REPLICATE, minMembers = minMembers)\n          }else{\n            print(\"Doing unpaired analysis\")\n              DBdata <- dba.contrast(DBdata, categories=DBA_CONDITION, minMembers = minMembers)\n          }\n          DBdata <- dba.analyze(DBdata, method=DBA_DESEQ2)\n          DBdata <- dba.analyze(DBdata, method=DBA_EDGER)\n          DBdata\n          png(paste(prefix, \"diffbind_deseq2_plot.png\", sep='_'))\n          plot(DBdata, method=DBA_DESEQ2)\n          dev.off()\n          png(paste(prefix, \"diffbind_deseq2_plotHeatmap.png\", sep='_'))\n          dba.plotHeatmap(DBdata, contrast=1, correlations=FALSE, method=DBA_DESEQ2)\n          dev.off()\n          png(paste(prefix, \"diffbind_deseq2_plotMA.png\", sep='_'))\n          dba.plotMA(DBdata, method=DBA_DESEQ2)\n          dev.off()\n          png(paste(prefix, \"diffbind_deseq2_plotVolcano.png\", sep='_'))\n          dba.plotVolcano(DBdata, method=DBA_DESEQ2)\n          dev.off()\n          png(paste(prefix, \"diffbind_deseq2_plotPCA.png\", sep='_'))\n          dba.plotPCA(DBdata, method=DBA_DESEQ2)\n          dev.off()\n          png(paste(prefix, \"diffbind_deseq2_plotPCA_contrast.png\", sep='_'))\n          dba.plotPCA(DBdata, contrast = 1, method=DBA_DESEQ2)\n          dev.off()\n          png(paste(prefix, \"diffbind_deseq2_plotBox.png\", sep='_'))\n          dba.plotBox(DBdata, method=DBA_DESEQ2)\n          dev.off()\n          png(paste(prefix, \"diffbind_edgeR_plot.png\", sep='_'))\n          plot(DBdata, method=DBA_EDGER)\n          dev.off()\n          png(paste(prefix, \"diffbind_edgeR_plotHeatmap.png\", sep='_'))\n          dba.plotHeatmap(DBdata, contrast=1, correlations=FALSE, method=DBA_EDGER)\n          dev.off()\n          png(paste(prefix, \"diffbind_edgeR_plotMA.png\", sep='_'))\n          dba.plotMA(DBdata, method=DBA_EDGER)\n          dev.off()\n          png(paste(prefix, \"diffbind_edgeR_plotVolcano.png\", sep='_'))\n          dba.plotVolcano(DBdata, method=DBA_EDGER)\n          dev.off()\n          png(paste(prefix, \"diffbind_edgeR_plotPCA.png\", sep='_'))\n          dba.plotPCA(DBdata, method=DBA_EDGER)\n          dev.off()\n          png(paste(prefix, \"diffbind_edgeR_plotPCA_contrast.png\", sep='_'))\n          dba.plotPCA(DBdata, contrast = 1, method=DBA_EDGER)\n          dev.off()\n          png(paste(prefix, \"diffbind_edgeR_plotBox.png\", sep='_'))\n          dba.plotBox(DBdata, method=DBA_EDGER)\n          dev.off()\n\n          report <- dba.report(DBdata, method=DBA_EDGER, th=1, bCounts=TRUE, DataType=DBA_DATA_FRAME)\n          score <- -10*(log10(report$FDR))\n          write.table(cbind(report,rownames(report),score),\n                      paste(prefix, \"diffbind_edgeR_report.xls\", sep='_'), quote=FALSE, sep=\"\\t\",\n                      row.names=FALSE)\n          write.table(cbind(report[,1:3],rownames(report),score),\n                      paste(prefix, \"diffbind_edgeR_report.bed\", sep='_'), quote=FALSE, sep=\"\\t\",\n                      row.names=FALSE, col.names=FALSE)\n\n          report <- dba.report(DBdata, method=DBA_DESEQ2, th=1, bCounts=TRUE, DataType=DBA_DATA_FRAME)\n          score <- -10*(log10(report$FDR))\n          write.table(cbind(report,rownames(report),score),\n                     paste(prefix, \"diffbind_deseq2_report.xls\", sep='_'), quote=FALSE, sep=\"\\t\",\n                      row.names=FALSE)\n          write.table(cbind(report[,1:3],rownames(report),score),\n                      paste(prefix, \"diffbind_deseq2_report.bed\", sep='_'), quote=FALSE, sep=\"\\t\",\n                      row.names=FALSE, col.names=FALSE)\n\ninputs:\n  factor:\n    type: File\n    inputBinding:\n      position: 1\n  bedDir:\n    type: Directory\n    inputBinding:\n      position: 2\n  bamDir:\n    type: Directory\n    inputBinding:\n      position: 3\n  minMembers:\n    type: int?\n    inputBinding:\n      position: 4\n  peakcaller:\n    type: string\n    inputBinding:\n      position: 5\n  paired:\n    type: boolean?\n    inputBinding:\n      position: 6\n\noutputs:\n  outpng:\n    type: File[]\n    outputBinding:\n      glob: \"*.png\"\n  outxls:\n    type: File[]\n    outputBinding:\n      glob: \"*.xls\"\n  outbed:\n    type: File[]\n    outputBinding:\n      glob: \"*.bed\"\n\nbaseCommand: [\"Rscript\", \"--vanilla\", \"diffbind.R\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'factor': {'type': 'File', 'inputBinding': {'position': 1}}, 'bedDir': {'type': 'Directory', 'inputBinding': {'position': 2}}, 'bamDir': {'type': 'Directory', 'inputBinding': {'position': 3}}, 'minMembers': {'type': 'int?', 'inputBinding': {'position': 4}}, 'peakcaller': {'type': 'string', 'inputBinding': {'position': 5}}, 'paired': {'type': 'boolean?', 'inputBinding': {'position': 6}}}",
    "cwl_outputs": "{'outpng': {'type': 'File[]', 'outputBinding': {'glob': '*.png'}}, 'outxls': {'type': 'File[]', 'outputBinding': {'glob': '*.xls'}}, 'outbed': {'type': 'File[]', 'outputBinding': {'glob': '*.bed'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0'}, 'SoftwareRequirement': {'packages': [{'package': 'bioconductor-diffbind', 'version': ['3.8.0'], 'specs': ['https://anaconda.org/bioconda/bioconductor-diffbind']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', '--vanilla', 'diffbind.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'diffbind.R', 'entry': 'args = commandArgs(trailingOnly=TRUE)\\nbedDir = args[2]\\nbamDir = args[3]\\nminMembers = as.numeric(args[4])\\npeakcaller = args[5]\\npaired = FALSE\\nif (length(args) == 6){\\n  paired = TRUE\\n}\\n\\nlibrary(\"DiffBind\")\\nsamples <- read.csv(args[1],sep = \"\\\\t\")\\nprefix <- paste(\\'condition_\\', paste(unique(samples$Condition), collapse = \\'_vs_\\'), sep=\\'\\')\\nbed <- c()\\nbam <- c()\\ncallers <- c()\\nfor(i in samples$id){\\n    f <- paste(bedDir,\"/\", i,\"_sorted_peaks.narrowPeak\", sep=\"\")\\n    bed <- c(bed,f)\\n    f <- paste(bamDir,\"/\", i,\"_sorted.bam\", sep=\"\")\\n    bam <- c(bam,f)\\n    callers <- c(callers, peakcaller)\\n}\\nsamples$Peaks <- bed\\nsamples$bamReads <- bam\\nsamples$PeakCaller <- callers\\nsamples\\nDBdata <- dba(sampleSheet=samples)\\nDBdata <- dba.count(DBdata)\\nif (paired){\\n    print(\"Doing paired analysis\")\\n    DBdata <- dba.contrast(DBdata, categories=DBA_CONDITION, block=DBA_REPLICATE, minMembers = minMembers)\\n}else{\\n  print(\"Doing unpaired analysis\")\\n    DBdata <- dba.contrast(DBdata, categories=DBA_CONDITION, minMembers = minMembers)\\n}\\nDBdata <- dba.analyze(DBdata, method=DBA_DESEQ2)\\nDBdata <- dba.analyze(DBdata, method=DBA_EDGER)\\nDBdata\\npng(paste(prefix, \"diffbind_deseq2_plot.png\", sep=\\'_\\'))\\nplot(DBdata, method=DBA_DESEQ2)\\ndev.off()\\npng(paste(prefix, \"diffbind_deseq2_plotHeatmap.png\", sep=\\'_\\'))\\ndba.plotHeatmap(DBdata, contrast=1, correlations=FALSE, method=DBA_DESEQ2)\\ndev.off()\\npng(paste(prefix, \"diffbind_deseq2_plotMA.png\", sep=\\'_\\'))\\ndba.plotMA(DBdata, method=DBA_DESEQ2)\\ndev.off()\\npng(paste(prefix, \"diffbind_deseq2_plotVolcano.png\", sep=\\'_\\'))\\ndba.plotVolcano(DBdata, method=DBA_DESEQ2)\\ndev.off()\\npng(paste(prefix, \"diffbind_deseq2_plotPCA.png\", sep=\\'_\\'))\\ndba.plotPCA(DBdata, method=DBA_DESEQ2)\\ndev.off()\\npng(paste(prefix, \"diffbind_deseq2_plotPCA_contrast.png\", sep=\\'_\\'))\\ndba.plotPCA(DBdata, contrast = 1, method=DBA_DESEQ2)\\ndev.off()\\npng(paste(prefix, \"diffbind_deseq2_plotBox.png\", sep=\\'_\\'))\\ndba.plotBox(DBdata, method=DBA_DESEQ2)\\ndev.off()\\npng(paste(prefix, \"diffbind_edgeR_plot.png\", sep=\\'_\\'))\\nplot(DBdata, method=DBA_EDGER)\\ndev.off()\\npng(paste(prefix, \"diffbind_edgeR_plotHeatmap.png\", sep=\\'_\\'))\\ndba.plotHeatmap(DBdata, contrast=1, correlations=FALSE, method=DBA_EDGER)\\ndev.off()\\npng(paste(prefix, \"diffbind_edgeR_plotMA.png\", sep=\\'_\\'))\\ndba.plotMA(DBdata, method=DBA_EDGER)\\ndev.off()\\npng(paste(prefix, \"diffbind_edgeR_plotVolcano.png\", sep=\\'_\\'))\\ndba.plotVolcano(DBdata, method=DBA_EDGER)\\ndev.off()\\npng(paste(prefix, \"diffbind_edgeR_plotPCA.png\", sep=\\'_\\'))\\ndba.plotPCA(DBdata, method=DBA_EDGER)\\ndev.off()\\npng(paste(prefix, \"diffbind_edgeR_plotPCA_contrast.png\", sep=\\'_\\'))\\ndba.plotPCA(DBdata, contrast = 1, method=DBA_EDGER)\\ndev.off()\\npng(paste(prefix, \"diffbind_edgeR_plotBox.png\", sep=\\'_\\'))\\ndba.plotBox(DBdata, method=DBA_EDGER)\\ndev.off()\\n\\nreport <- dba.report(DBdata, method=DBA_EDGER, th=1, bCounts=TRUE, DataType=DBA_DATA_FRAME)\\nscore <- -10*(log10(report$FDR))\\nwrite.table(cbind(report,rownames(report),score),\\n            paste(prefix, \"diffbind_edgeR_report.xls\", sep=\\'_\\'), quote=FALSE, sep=\"\\\\t\",\\n            row.names=FALSE)\\nwrite.table(cbind(report[,1:3],rownames(report),score),\\n            paste(prefix, \"diffbind_edgeR_report.bed\", sep=\\'_\\'), quote=FALSE, sep=\"\\\\t\",\\n            row.names=FALSE, col.names=FALSE)\\n\\nreport <- dba.report(DBdata, method=DBA_DESEQ2, th=1, bCounts=TRUE, DataType=DBA_DATA_FRAME)\\nscore <- -10*(log10(report$FDR))\\nwrite.table(cbind(report,rownames(report),score),\\n           paste(prefix, \"diffbind_deseq2_report.xls\", sep=\\'_\\'), quote=FALSE, sep=\"\\\\t\",\\n            row.names=FALSE)\\nwrite.table(cbind(report[,1:3],rownames(report),score),\\n            paste(prefix, \"diffbind_deseq2_report.bed\", sep=\\'_\\'), quote=FALSE, sep=\"\\\\t\",\\n            row.names=FALSE, col.names=FALSE)\\n'}]}}",
    "cwl_doc": "Compute differentially bound sites from multiple ChIP-seq experiments using affinity (quantitative) data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "DiffBind",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/R/edgeR-2conditions.cwl",
    "sha": "9ea436c2f0a12a041a3214b2308898f6315043de",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/R/edgeR-2conditions.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: EdgeR\ndoc: Differential expression analysis of RNA-seq expression profiles with biological replication\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0\n  SoftwareRequirement:\n    packages:\n      - package: 'bioconductor-diffbind'\n        version:\n          - '3.8.0'\n        specs:\n          - https://anaconda.org/bioconda/bioconductor-diffbind\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: edgeR.R\n        entry: |\n          args = commandArgs(trailingOnly=TRUE)\n          gene_column = args[4]\n          gene_length_column = args[5]\n          sample_column = args[6]\n          condition1 = args[7]\n          condition2 = args[8]\n          fc = as.numeric(args[9])\n          fdr = as.numeric(args[10])\n          min_TPM = as.integer(args[11])\n          pairwise = NULL\n          if (length(args) == 12){\n            pairwise = args[12]\n          }\n\n          library(edgeR)\n          library(ggplot2)\n          library(gplots)\n\n          # Loading data\n          factors = read.table(args[1], header = TRUE, sep = \",\")\n          rownames(factors) <- factors[, sample_column]\n          print(paste(\"Factors loaded:\", nrow(factors)))\n\n          data = read.table(args[2], header = TRUE, sep = \"\\t\", comment.char = '')\n          print(paste(\"Columns in the matrix:\", ncol(data)))\n          print(paste(\"Genes in the matrix:\", nrow(data)))\n\n          tpm_data = read.table(args[3], header = TRUE, sep = \"\\t\", comment.char = '')\n          print(paste(\"Columns in the TPM matrix:\", ncol(tpm_data)))\n          print(paste(\"Genes in the TPM matrix:\", nrow(tpm_data)))\n\n          highlight_color = \"red\"\n\n          # Creating factors variable\n          conditions <- c(condition2,condition1)\n          print(paste(\"Conditions:\", length(conditions)))\n\n          factors.set <- factors[factors$condition %in% conditions,]\n          factors.set[] <- lapply( factors.set, factor)\n          factors.set$condition <- factor(factors.set$condition, levels=conditions)\n          if (!is.null(pairwise)){\n             factors.set[,pairwise] <- factor(factors.set[,pairwise])\n             print(paste(\"Using pairwise condition: \", pairwise))\n             print(factors.set[,pairwise])\n          }\n\n          min_number_samples <- min(table(factors.set$condition))\n          print(paste(\"Minimum number of samples in a condition:\", min_number_samples))\n\n          # Filtering low count genes\n          data.set <- data[c(gene_column, gene_length_column, rownames(factors.set))]\n          data.counts <- data.set[,!(names(data.set) %in% c(gene_column, gene_length_column))]\n          rownames(data.counts) <- data.set[, gene_column]\n          data.counts[is.na(data.counts)] <- 0\n\n          tpm_data.set <- tpm_data[c(gene_column, rownames(factors.set))]\n          tpm_data.counts <- tpm_data.set[,!(names(tpm_data.set) %in% c(gene_column))]\n          rownames(tpm_data.counts) <- tpm_data.set[, gene_column]\n          tpm_data.counts[is.na(tpm_data.counts)] <- 0\n\n          keep <- (rowSums(tpm_data.counts >= min_TPM) >= min_number_samples)\n\n          genes_filtered <- rownames(data.counts[keep, ])\n          data.counts <- data.counts[genes_filtered,]\n          data.set <- subset(data.set, unlist(data[gene_column]) %in% genes_filtered)\n\n          print(paste(\"Genes with reads:\", nrow(data.set)))\n          print(paste(\"Samples to analyze:\", ncol(data.counts)))\n\n          if (is.null(pairwise)){\n             design <- model.matrix(~ factors.set$condition)\n          }else{\n             design <- model.matrix(~ factors.set[,pairwise] + factors.set$condition)\n          }\n\n          y <- DGEList(counts=data.counts, group=factors.set$condition, genes=data.set[,c(gene_column, gene_length_column)])\n          y <- calcNormFactors(y, method=\"TMM\")\n          y <- estimateDisp(y,design)\n          fit <- glmQLFit(y, design)\n          qlf <- glmQLFTest(fit)\n          res<-as.data.frame(topTags(qlf, n=nrow(data.counts)))\n          res <- na.omit(res)\n          file_name = paste('condition_',condition1, '_vs_',condition2,'_edgeR.csv',sep='')\n          write.table(res, file_name, row.names=F, na=\"NA\", append = F, quote= FALSE, sep = \",\", col.names = T)\n\n          count_upregulated <- nrow(res[(res$FDR <= fdr & res$logFC >= fc),])\n          print(paste('Genes with FDR >= ', fdr, \" and logFC >= \", fc, \": \", count_upregulated, sep=''))\n          count_downregulated <- nrow(res[(res$FDR <= fdr & res$logFC <= -1.0 * fc),])\n          print(paste('Genes with FDR >= ', fdr, \" and logFC <= \", fc, \": \", count_downregulated, sep=''))\n\n          yy <- cpm(y, log=TRUE, prior.count = 1)\n          pca <- prcomp(t(yy), scale. = TRUE)\n          data.pca <- as.data.frame(pca$x[,c('PC1', 'PC2')])\n          data.pca$condition <- factors.set$condition\n          file_name <- paste('condition_',condition1, '_vs_',condition2, \"_edgeR_pca.csv\", sep=\"\")\n          write.table(data.pca, file_name, row.names=F, na=\"NA\", append = F, quote= FALSE, sep = \",\", col.names = T)\n\n          ggplot(data.pca, aes(PC1, PC2, color=condition)) +\n              geom_point(size=1) +\n              ggtitle(\"PCA\") +\n              xlab(\"PC1\") +\n              ylab(\"PC2\")\n          ggsave(paste('condition_',condition1, '_vs_',condition2,'_edgeR_pca.pdf',sep=''))\n\n          if (count_upregulated > 0 && count_downregulated > 0){\n            pdf(paste('condition_',condition1, '_vs_',condition2,'_edgeR_volcano.pdf',sep=''))\n            with(res, plot(logFC, -log10(FDR), pch=20, main=paste(\"Volcano plot\\n\",'condition_',condition1, '_vs_',condition2, sep='')))\n            with(subset(res, (FDR <= fdr & abs(logFC) >= fc)), points(logFC, -log10(FDR), pch=20, col=highlight_color))\n            dev.off()\n\n            resOrdered_data <- res[(res$FDR <= fdr & abs(res$logFC) >= fc),]\n            topVarGenes <- rownames(resOrdered_data)\n            selY <- yy[topVarGenes,]\n\n            pal <- colorRampPalette(c(\"white\",\"blue\"))\n            pdf(paste('condition_',condition1, '_vs_',condition2,'_edgeR_expression_heatmap.pdf',sep=''))\n            heatmap.2(selY, col=pal, Rowv=T, Colv=T,\n                      dendrogram = c(\"both\"),\n                      trace=\"none\",\n                      density.info=c(\"density\"),\n                      key.xlab=\"Expression value\",\n                      key.ylab=\"Density\",\n                      main=paste(\"Expression\\n\",'condition_',condition1, '_vs_',condition2, sep=''),\n                      cexCol=.5,\n                      offsetCol=.0,\n                      cexRow=.5,\n                      margins=c(6,12),\n                      breaks=20,\n                      key=T,)\n            dev.off()\n\n            pdf(paste('condition_',condition1, '_vs_',condition2,'_edgeR_correlation_heatmap.pdf',sep=''))\n            heatmap.2(cor(selY), col=pal, Rowv=T, Colv=T,\n                      dendrogram = c(\"column\"),\n                      trace=\"none\",\n                      density.info=c(\"density\"),\n                      key.xlab=\"Expression value\",\n                      key.ylab=\"Density\",\n                      main=paste(\"Correlation\\n\",'condition_',condition1, '_vs_',condition2, sep=''),\n                      cexCol=.5,\n                      offsetCol=.0,\n                      cexRow=.5,\n                      margins=c(6,12),\n                      breaks=20,\n                      key=T,)\n            dev.off()\n          }\n\ninputs:\n  factor:\n    type: File\n    inputBinding:\n      position: 1\n  matrix:\n    type: File\n    inputBinding:\n      position: 2\n  tpm_matrix:\n    type: File\n    inputBinding:\n      position: 3\n  gene_column:\n    type: string\n    inputBinding:\n      position: 4\n  gene_length_column:\n    type: string\n    inputBinding:\n      position: 5\n  sample_column:\n    type: string\n    inputBinding:\n      position: 6\n  condition1:\n    type: string\n    inputBinding:\n      position: 7\n  condition2:\n    type: string\n    inputBinding:\n      position: 8\n  fc:\n    type: float\n    inputBinding:\n      position: 9\n  fdr:\n    type: float\n    inputBinding:\n      position: 10\n  min_tpm:\n    type: int\n    inputBinding:\n      position: 11\n  pairwise:\n    type: string?\n    inputBinding:\n      position: 12\n\noutputs:\n   dga:\n    type: File\n    outputBinding:\n      glob: condition_*_edgeR.csv\n   pca:\n     type: File\n     outputBinding:\n       glob: condition_*_edgeR_pca.csv\n   pca_plot:\n     type: File\n     outputBinding:\n       glob: condition_*_edgeR_pca.pdf\n   volcano_plot:\n     type: File?\n     outputBinding:\n       glob: condition_*_edgeR_volcano.pdf\n   correlation_heatmap:\n     type: File?\n     outputBinding:\n       glob: condition_*_edgeR_correlation_heatmap.pdf\n   expression_heatmap:\n     type: File?\n     outputBinding:\n       glob: condition_*_edgeR_expression_heatmap.pdf\n\nbaseCommand: [\"Rscript\", \"--vanilla\", \"edgeR.R\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'factor': {'type': 'File', 'inputBinding': {'position': 1}}, 'matrix': {'type': 'File', 'inputBinding': {'position': 2}}, 'tpm_matrix': {'type': 'File', 'inputBinding': {'position': 3}}, 'gene_column': {'type': 'string', 'inputBinding': {'position': 4}}, 'gene_length_column': {'type': 'string', 'inputBinding': {'position': 5}}, 'sample_column': {'type': 'string', 'inputBinding': {'position': 6}}, 'condition1': {'type': 'string', 'inputBinding': {'position': 7}}, 'condition2': {'type': 'string', 'inputBinding': {'position': 8}}, 'fc': {'type': 'float', 'inputBinding': {'position': 9}}, 'fdr': {'type': 'float', 'inputBinding': {'position': 10}}, 'min_tpm': {'type': 'int', 'inputBinding': {'position': 11}}, 'pairwise': {'type': 'string?', 'inputBinding': {'position': 12}}}",
    "cwl_outputs": "{'dga': {'type': 'File', 'outputBinding': {'glob': 'condition_*_edgeR.csv'}}, 'pca': {'type': 'File', 'outputBinding': {'glob': 'condition_*_edgeR_pca.csv'}}, 'pca_plot': {'type': 'File', 'outputBinding': {'glob': 'condition_*_edgeR_pca.pdf'}}, 'volcano_plot': {'type': 'File?', 'outputBinding': {'glob': 'condition_*_edgeR_volcano.pdf'}}, 'correlation_heatmap': {'type': 'File?', 'outputBinding': {'glob': 'condition_*_edgeR_correlation_heatmap.pdf'}}, 'expression_heatmap': {'type': 'File?', 'outputBinding': {'glob': 'condition_*_edgeR_expression_heatmap.pdf'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0'}, 'SoftwareRequirement': {'packages': [{'package': 'bioconductor-diffbind', 'version': ['3.8.0'], 'specs': ['https://anaconda.org/bioconda/bioconductor-diffbind']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', '--vanilla', 'edgeR.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'edgeR.R', 'entry': 'args = commandArgs(trailingOnly=TRUE)\\ngene_column = args[4]\\ngene_length_column = args[5]\\nsample_column = args[6]\\ncondition1 = args[7]\\ncondition2 = args[8]\\nfc = as.numeric(args[9])\\nfdr = as.numeric(args[10])\\nmin_TPM = as.integer(args[11])\\npairwise = NULL\\nif (length(args) == 12){\\n  pairwise = args[12]\\n}\\n\\nlibrary(edgeR)\\nlibrary(ggplot2)\\nlibrary(gplots)\\n\\n# Loading data\\nfactors = read.table(args[1], header = TRUE, sep = \",\")\\nrownames(factors) <- factors[, sample_column]\\nprint(paste(\"Factors loaded:\", nrow(factors)))\\n\\ndata = read.table(args[2], header = TRUE, sep = \"\\\\t\", comment.char = \\'\\')\\nprint(paste(\"Columns in the matrix:\", ncol(data)))\\nprint(paste(\"Genes in the matrix:\", nrow(data)))\\n\\ntpm_data = read.table(args[3], header = TRUE, sep = \"\\\\t\", comment.char = \\'\\')\\nprint(paste(\"Columns in the TPM matrix:\", ncol(tpm_data)))\\nprint(paste(\"Genes in the TPM matrix:\", nrow(tpm_data)))\\n\\nhighlight_color = \"red\"\\n\\n# Creating factors variable\\nconditions <- c(condition2,condition1)\\nprint(paste(\"Conditions:\", length(conditions)))\\n\\nfactors.set <- factors[factors$condition %in% conditions,]\\nfactors.set[] <- lapply( factors.set, factor)\\nfactors.set$condition <- factor(factors.set$condition, levels=conditions)\\nif (!is.null(pairwise)){\\n   factors.set[,pairwise] <- factor(factors.set[,pairwise])\\n   print(paste(\"Using pairwise condition: \", pairwise))\\n   print(factors.set[,pairwise])\\n}\\n\\nmin_number_samples <- min(table(factors.set$condition))\\nprint(paste(\"Minimum number of samples in a condition:\", min_number_samples))\\n\\n# Filtering low count genes\\ndata.set <- data[c(gene_column, gene_length_column, rownames(factors.set))]\\ndata.counts <- data.set[,!(names(data.set) %in% c(gene_column, gene_length_column))]\\nrownames(data.counts) <- data.set[, gene_column]\\ndata.counts[is.na(data.counts)] <- 0\\n\\ntpm_data.set <- tpm_data[c(gene_column, rownames(factors.set))]\\ntpm_data.counts <- tpm_data.set[,!(names(tpm_data.set) %in% c(gene_column))]\\nrownames(tpm_data.counts) <- tpm_data.set[, gene_column]\\ntpm_data.counts[is.na(tpm_data.counts)] <- 0\\n\\nkeep <- (rowSums(tpm_data.counts >= min_TPM) >= min_number_samples)\\n\\ngenes_filtered <- rownames(data.counts[keep, ])\\ndata.counts <- data.counts[genes_filtered,]\\ndata.set <- subset(data.set, unlist(data[gene_column]) %in% genes_filtered)\\n\\nprint(paste(\"Genes with reads:\", nrow(data.set)))\\nprint(paste(\"Samples to analyze:\", ncol(data.counts)))\\n\\nif (is.null(pairwise)){\\n   design <- model.matrix(~ factors.set$condition)\\n}else{\\n   design <- model.matrix(~ factors.set[,pairwise] + factors.set$condition)\\n}\\n\\ny <- DGEList(counts=data.counts, group=factors.set$condition, genes=data.set[,c(gene_column, gene_length_column)])\\ny <- calcNormFactors(y, method=\"TMM\")\\ny <- estimateDisp(y,design)\\nfit <- glmQLFit(y, design)\\nqlf <- glmQLFTest(fit)\\nres<-as.data.frame(topTags(qlf, n=nrow(data.counts)))\\nres <- na.omit(res)\\nfile_name = paste(\\'condition_\\',condition1, \\'_vs_\\',condition2,\\'_edgeR.csv\\',sep=\\'\\')\\nwrite.table(res, file_name, row.names=F, na=\"NA\", append = F, quote= FALSE, sep = \",\", col.names = T)\\n\\ncount_upregulated <- nrow(res[(res$FDR <= fdr & res$logFC >= fc),])\\nprint(paste(\\'Genes with FDR >= \\', fdr, \" and logFC >= \", fc, \": \", count_upregulated, sep=\\'\\'))\\ncount_downregulated <- nrow(res[(res$FDR <= fdr & res$logFC <= -1.0 * fc),])\\nprint(paste(\\'Genes with FDR >= \\', fdr, \" and logFC <= \", fc, \": \", count_downregulated, sep=\\'\\'))\\n\\nyy <- cpm(y, log=TRUE, prior.count = 1)\\npca <- prcomp(t(yy), scale. = TRUE)\\ndata.pca <- as.data.frame(pca$x[,c(\\'PC1\\', \\'PC2\\')])\\ndata.pca$condition <- factors.set$condition\\nfile_name <- paste(\\'condition_\\',condition1, \\'_vs_\\',condition2, \"_edgeR_pca.csv\", sep=\"\")\\nwrite.table(data.pca, file_name, row.names=F, na=\"NA\", append = F, quote= FALSE, sep = \",\", col.names = T)\\n\\nggplot(data.pca, aes(PC1, PC2, color=condition)) +\\n    geom_point(size=1) +\\n    ggtitle(\"PCA\") +\\n    xlab(\"PC1\") +\\n    ylab(\"PC2\")\\nggsave(paste(\\'condition_\\',condition1, \\'_vs_\\',condition2,\\'_edgeR_pca.pdf\\',sep=\\'\\'))\\n\\nif (count_upregulated > 0 && count_downregulated > 0){\\n  pdf(paste(\\'condition_\\',condition1, \\'_vs_\\',condition2,\\'_edgeR_volcano.pdf\\',sep=\\'\\'))\\n  with(res, plot(logFC, -log10(FDR), pch=20, main=paste(\"Volcano plot\\\\n\",\\'condition_\\',condition1, \\'_vs_\\',condition2, sep=\\'\\')))\\n  with(subset(res, (FDR <= fdr & abs(logFC) >= fc)), points(logFC, -log10(FDR), pch=20, col=highlight_color))\\n  dev.off()\\n\\n  resOrdered_data <- res[(res$FDR <= fdr & abs(res$logFC) >= fc),]\\n  topVarGenes <- rownames(resOrdered_data)\\n  selY <- yy[topVarGenes,]\\n\\n  pal <- colorRampPalette(c(\"white\",\"blue\"))\\n  pdf(paste(\\'condition_\\',condition1, \\'_vs_\\',condition2,\\'_edgeR_expression_heatmap.pdf\\',sep=\\'\\'))\\n  heatmap.2(selY, col=pal, Rowv=T, Colv=T,\\n            dendrogram = c(\"both\"),\\n            trace=\"none\",\\n            density.info=c(\"density\"),\\n            key.xlab=\"Expression value\",\\n            key.ylab=\"Density\",\\n            main=paste(\"Expression\\\\n\",\\'condition_\\',condition1, \\'_vs_\\',condition2, sep=\\'\\'),\\n            cexCol=.5,\\n            offsetCol=.0,\\n            cexRow=.5,\\n            margins=c(6,12),\\n            breaks=20,\\n            key=T,)\\n  dev.off()\\n\\n  pdf(paste(\\'condition_\\',condition1, \\'_vs_\\',condition2,\\'_edgeR_correlation_heatmap.pdf\\',sep=\\'\\'))\\n  heatmap.2(cor(selY), col=pal, Rowv=T, Colv=T,\\n            dendrogram = c(\"column\"),\\n            trace=\"none\",\\n            density.info=c(\"density\"),\\n            key.xlab=\"Expression value\",\\n            key.ylab=\"Density\",\\n            main=paste(\"Correlation\\\\n\",\\'condition_\\',condition1, \\'_vs_\\',condition2, sep=\\'\\'),\\n            cexCol=.5,\\n            offsetCol=.0,\\n            cexRow=.5,\\n            margins=c(6,12),\\n            breaks=20,\\n            key=T,)\\n  dev.off()\\n}\\n'}]}}",
    "cwl_doc": "Differential expression analysis of RNA-seq expression profiles with biological replication",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "EdgeR",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/R/macs-cutoff.cwl",
    "sha": "cff2ba6efd5ae4b42ce74eb43562aeda147ccea7",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/R/macs-cutoff.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: MACS2_cutoff\ndoc: Inflection point calculated from MACS2 peaks file\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0\n  SoftwareRequirement:\n    packages:\n      - package: 'bioconductor-diffbind'\n        version:\n          - '3.8.0'\n        specs:\n          - https://anaconda.org/bioconda/bioconductor-diffbind\n\nrequirements:\n  ResourceRequirement:\n    ramMin: 1024\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: MACScutoff.R\n        entry: |\n          args = commandArgs(trailingOnly=TRUE)\n          library(ggplot2)\n          peak_cutoff_file = args[1]\n          out_pdf = args[2]\n          out_inflection = args[3]\n          cutoff = read.table(peak_cutoff_file, header = T, sep = \"\\t\", stringsAsFactors = F, check.names = F)\n          cutoff$lognpeak = log10(cutoff$npeaks)\n          cutoff$index= 1:nrow(cutoff)\n          cutoff$infl = predict(loess(cutoff$lognpeak ~ cutoff$index))\n          cutoff$diff = c(0, diff(cutoff$infl))\n          cutoff$diff2 = c(0, diff(cutoff$diff))\n          cutoff$diff2[2] = 0\n          inflpoint = cutoff[cutoff$diff2 == max(cutoff$diff2),][[1]]\n          p1 = ggplot(data=cutoff, aes(x=pscore, y=npeaks, group=1)) +\n              geom_line()+\n              geom_point() +\n              scale_y_continuous(trans='log2') +\n              geom_vline(xintercept = inflpoint, color = \"red\", linetype = \"dotted\") +\n              geom_smooth(method = 'loess') +\n              geom_line() +\n              ylab(\"log10(number of peaks)\") +\n              xlab(\"log10(p-value)\") +\n              theme_bw()\n          pdf(out_pdf)\n          plot(p1)\n          dev.off()\n          write.table(10^-inflpoint, out_inflection, quote = F, row.names = F, col.names = F)\n\ninputs:\n  peak_cutoff_file:\n    type: File\n    inputBinding:\n      position: 1\n  out_pdf_name:\n    type: string\n    inputBinding:\n      position: 2\n  out_inflection_name:\n    type: string\n    inputBinding:\n      position: 3\n\noutputs:\n  out_pdf:\n    type: File\n    outputBinding:\n      glob: $(inputs.out_pdf_name)\n  out_inflection:\n    type: File\n    outputBinding:\n      glob: $(inputs.out_inflection_name)\n\nbaseCommand: [\"Rscript\", \"MACScutoff.R\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'peak_cutoff_file': {'type': 'File', 'inputBinding': {'position': 1}}, 'out_pdf_name': {'type': 'string', 'inputBinding': {'position': 2}}, 'out_inflection_name': {'type': 'string', 'inputBinding': {'position': 3}}}",
    "cwl_outputs": "{'out_pdf': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out_pdf_name)'}}, 'out_inflection': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out_inflection_name)'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0'}, 'SoftwareRequirement': {'packages': [{'package': 'bioconductor-diffbind', 'version': ['3.8.0'], 'specs': ['https://anaconda.org/bioconda/bioconductor-diffbind']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', 'MACScutoff.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {'ramMin': 1024}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'MACScutoff.R', 'entry': 'args = commandArgs(trailingOnly=TRUE)\\nlibrary(ggplot2)\\npeak_cutoff_file = args[1]\\nout_pdf = args[2]\\nout_inflection = args[3]\\ncutoff = read.table(peak_cutoff_file, header = T, sep = \"\\\\t\", stringsAsFactors = F, check.names = F)\\ncutoff$lognpeak = log10(cutoff$npeaks)\\ncutoff$index= 1:nrow(cutoff)\\ncutoff$infl = predict(loess(cutoff$lognpeak ~ cutoff$index))\\ncutoff$diff = c(0, diff(cutoff$infl))\\ncutoff$diff2 = c(0, diff(cutoff$diff))\\ncutoff$diff2[2] = 0\\ninflpoint = cutoff[cutoff$diff2 == max(cutoff$diff2),][[1]]\\np1 = ggplot(data=cutoff, aes(x=pscore, y=npeaks, group=1)) +\\n    geom_line()+\\n    geom_point() +\\n    scale_y_continuous(trans=\\'log2\\') +\\n    geom_vline(xintercept = inflpoint, color = \"red\", linetype = \"dotted\") +\\n    geom_smooth(method = \\'loess\\') +\\n    geom_line() +\\n    ylab(\"log10(number of peaks)\") +\\n    xlab(\"log10(p-value)\") +\\n    theme_bw()\\npdf(out_pdf)\\nplot(p1)\\ndev.off()\\nwrite.table(10^-inflpoint, out_inflection, quote = F, row.names = F, col.names = F)\\n'}]}}",
    "cwl_doc": "Inflection point calculated from MACS2 peaks file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "MACS2_cutoff",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/R/r_correlation_json.cwl",
    "sha": "d52dc4d0f9299370fd8b9e946a58f81efb4eef05",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/R/r_correlation_json.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Correlation_Json\ndoc: Creates a JSON with the correlation data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: correlation.R\n        entry: |\n            library(optparse)\n\n            option_list = list(\n                make_option(\"--factor\", type = \"character\", default = NULL, help = \"Factor file\"),\n                make_option(\"--out\", type = \"character\", default = NULL, help = \"Output JSOn file\"),\n                make_option(\"--matrix\", type = \"character\", default = NULL, help = \"Matrix file\"),\n                make_option(\"--gene_column\", type = \"character\", default = NULL, help = \"Gene id column header in matrix file\"),\n                make_option(\"--sample_column\", type = \"character\", default = NULL, help = \"Sample id column header in factor file\"),\n                make_option(\"--condition1\", type = \"character\", default = NULL, help = \"Condition to extract from factor. It uses column condition\"),\n                make_option(\"--condition2\", type = \"character\", default = NULL, help = \"Condition to extract from factor. It uses column condition\"),\n                make_option(\"--min_reads\", type = \"integer\", default = 10, help = \"Minimum number of reads in half of the samples\")\n            )\n\n            opt_parser = OptionParser(option_list = option_list)\n            opt = parse_args(opt_parser)\n\n            if (is.null(opt$factor)) {\n                print_help(opt_parser)\n                stop(\"Factor file is not available. Option --factor\", call. = FALSE)\n            }\n            if (is.null(opt$matrix)) {\n                print_help(opt_parser)\n                stop(\"Factor file is not available. Option --matrix\", call. = FALSE)\n            }\n            if (is.null(opt$out)) {\n                print_help(opt_parser)\n                stop(\"Out file name is not available. Option --out\", call. = FALSE)\n            }\n            if (is.null(opt$gene_column)) {\n                print_help(opt_parser)\n                stop(\"Gene id column is not set. Option --gene_column\", call. = FALSE)\n            }\n            if (is.null(opt$sample_column)) {\n                print_help(opt_parser)\n                stop(\"Sample column is not set. Option --sample_column\", call. = FALSE)\n            }\n\n            require(data.table)\n            library(dendextend)\n            library(rjson)\n\n            # Loading data\n            factors <- as.data.frame(fread(opt$factor))\n            rownames(factors) <- factors[, opt$sample_column]\n            print(paste(\"Factors loaded:\", nrow(factors)))\n\n            data <- as.data.frame(fread(opt$matrix))\n            print(paste(\"Columns in the matrix:\", ncol(data)))\n            print(paste(\"Genes in the matrix:\", nrow(data)))\n\n            if (!is.null(opt$condition1) || !is.null(opt$condition2)) {\n                # Creating factors variable\n                conditions <- c(opt$condition2,opt$condition1)\n                print(paste(\"Conditions:\", length(conditions)))\n\n                factors.set <- factors[factors$condition %in% conditions,]\n                factors.set[] <- lapply( factors.set, factor)\n                factors.set$condition <- factor(factors.set$condition, levels=conditions)\n\n                min_number_samples <- min(table(factors.set$condition))\n            }else{\n                factors.set <- factors\n                factors.set[] <- lapply( factors.set, factor)\n                min_number_samples <- nrow(factors)/2\n            }\n            print(paste(\"Minimum number of samples in a condition:\", min_number_samples))\n\n            # Filtering low count genes\n            data.set <- data[c(opt$gene_column, rownames(factors.set))]\n            data.counts <- data.set[,!(names(data.set) %in% c(opt$gene_column))]\n            rownames(data.counts) <- data.set[, opt$gene_column]\n            data.counts[is.na(data.counts)] <- 0\n\n            keep <- (rowSums(data.counts > opt$min_reads) >= min_number_samples)\n            genes_filtered <- rownames(data.counts[keep, ])\n            data.counts <- data.counts[genes_filtered,]\n            data.set <- subset(data.set, unlist(data[opt$gene_column]) %in% genes_filtered)\n\n            print(paste(\"Genes with reads:\", nrow(data.set)))\n            print(paste(\"Samples to analyze:\", ncol(data.counts)))\n\n            print(\"Creating function\")\n            HCtoJSON<-function(hc){\n\n              labels<-hc$labels\n              merge<-data.frame(hc$merge)\n              height <- hc$height\n              dend <- as.dendrogram(hc)\n              totalLength <- sum(heights_per_k.dendrogram(dend))\n\n              for (i in (1: nrow(merge))) {\n                if (merge[i,1] < 0 & merge[i,2] <0 ) {\n                    eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(list(length=\", height[[i]], \", key=labels[-merge[i,1]]),list(length=\", height[[i]], \",key=labels[-merge[i,2]])))\")))\n                } else if (merge[i,1]>0 & merge[i,2]<0) {\n                    eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(node\", merge[i,1], \", list(length=\", height[[i]], \",key=labels[-merge[i,2]])))\")))\n                } else if (merge[i,1]<0 & merge[i,2]>0) {\n                    eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(list(length=\", height[[i]], \",key=labels[-merge[i,1]]), node\", merge[i,2],\"))\")))\n                } else if (merge[i,1]>0 & merge[i,2]>0) {\n                    eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(node\",merge[i,1] , \", node\" , merge[i,2],\" ))\")))\n                }\n              }\n\n              eval(parse(text=paste0(\"JSON<-toJSON(node\", nrow(merge) + 1, \"<-list(totalLength=\", totalLength, \", children=list(node\",nrow(merge), \")))\")))\n\n              return(JSON)\n            }\n\n            print(\"Calculating correlation\")\n            data.cor <- cor(data.counts)\n            print(\"Doing first cluster\")\n            hc <- hclust(dist(data.cor, method = \"euclidean\"))\n            print(\"Printing cluster in JSON\")\n            hc_rows_cluster_json <- HCtoJSON(hc)\n            rows_cluster_order <- hc$order\n\n            print(\"Sorting matrix\")\n            data.cor <- data.cor[rows_cluster_order, rows_cluster_order]\n            name_cond <- factors[colnames(data.cor),]\n            rownames(name_cond) <- NULL\n            print(\"Creating JSON from matrix\")\n            data_json <- jsonlite::toJSON(list(name_cond, as.data.frame(data.cor)))\n\n            print(paste(\"Writing to file\", opt$out))\n            write(data_json, opt$out)\n            write(hc_rows_cluster_json, opt$out, append=TRUE)\n            write(hc_rows_cluster_json, opt$out, append=TRUE)\n\n\nhints:\n  - $import: R_ubuntu-18.04.yml\n\ninputs:\n  matrix:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: --matrix\n  factor:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: --factor\n  gene_column:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: --gene_column\n  sample_column:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: --sample_column\n  condition1:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: --condition1\n  condition2:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: --condition2\n  min_reads:\n    type: int\n    inputBinding:\n      position: 3\n      prefix: --min_reads\n  out:\n    type: string\n    inputBinding:\n      position: 4\n      prefix: --out\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n\n\nbaseCommand: [\"Rscript\",\"correlation.R\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://bioconductor.org/packages/release/bioc/html/DESeq2.html\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'matrix': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '--matrix'}}, 'factor': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': '--factor'}}, 'gene_column': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '--gene_column'}}, 'sample_column': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '--sample_column'}}, 'condition1': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '--condition1'}}, 'condition2': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '--condition2'}}, 'min_reads': {'type': 'int', 'inputBinding': {'position': 3, 'prefix': '--min_reads'}}, 'out': {'type': 'string', 'inputBinding': {'position': 4, 'prefix': '--out'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}}",
    "cwl_hints": "[{'$import': 'R_ubuntu-18.04.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', 'correlation.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'correlation.R', 'entry': 'library(optparse)\\n\\noption_list = list(\\n    make_option(\"--factor\", type = \"character\", default = NULL, help = \"Factor file\"),\\n    make_option(\"--out\", type = \"character\", default = NULL, help = \"Output JSOn file\"),\\n    make_option(\"--matrix\", type = \"character\", default = NULL, help = \"Matrix file\"),\\n    make_option(\"--gene_column\", type = \"character\", default = NULL, help = \"Gene id column header in matrix file\"),\\n    make_option(\"--sample_column\", type = \"character\", default = NULL, help = \"Sample id column header in factor file\"),\\n    make_option(\"--condition1\", type = \"character\", default = NULL, help = \"Condition to extract from factor. It uses column condition\"),\\n    make_option(\"--condition2\", type = \"character\", default = NULL, help = \"Condition to extract from factor. It uses column condition\"),\\n    make_option(\"--min_reads\", type = \"integer\", default = 10, help = \"Minimum number of reads in half of the samples\")\\n)\\n\\nopt_parser = OptionParser(option_list = option_list)\\nopt = parse_args(opt_parser)\\n\\nif (is.null(opt$factor)) {\\n    print_help(opt_parser)\\n    stop(\"Factor file is not available. Option --factor\", call. = FALSE)\\n}\\nif (is.null(opt$matrix)) {\\n    print_help(opt_parser)\\n    stop(\"Factor file is not available. Option --matrix\", call. = FALSE)\\n}\\nif (is.null(opt$out)) {\\n    print_help(opt_parser)\\n    stop(\"Out file name is not available. Option --out\", call. = FALSE)\\n}\\nif (is.null(opt$gene_column)) {\\n    print_help(opt_parser)\\n    stop(\"Gene id column is not set. Option --gene_column\", call. = FALSE)\\n}\\nif (is.null(opt$sample_column)) {\\n    print_help(opt_parser)\\n    stop(\"Sample column is not set. Option --sample_column\", call. = FALSE)\\n}\\n\\nrequire(data.table)\\nlibrary(dendextend)\\nlibrary(rjson)\\n\\n# Loading data\\nfactors <- as.data.frame(fread(opt$factor))\\nrownames(factors) <- factors[, opt$sample_column]\\nprint(paste(\"Factors loaded:\", nrow(factors)))\\n\\ndata <- as.data.frame(fread(opt$matrix))\\nprint(paste(\"Columns in the matrix:\", ncol(data)))\\nprint(paste(\"Genes in the matrix:\", nrow(data)))\\n\\nif (!is.null(opt$condition1) || !is.null(opt$condition2)) {\\n    # Creating factors variable\\n    conditions <- c(opt$condition2,opt$condition1)\\n    print(paste(\"Conditions:\", length(conditions)))\\n\\n    factors.set <- factors[factors$condition %in% conditions,]\\n    factors.set[] <- lapply( factors.set, factor)\\n    factors.set$condition <- factor(factors.set$condition, levels=conditions)\\n\\n    min_number_samples <- min(table(factors.set$condition))\\n}else{\\n    factors.set <- factors\\n    factors.set[] <- lapply( factors.set, factor)\\n    min_number_samples <- nrow(factors)/2\\n}\\nprint(paste(\"Minimum number of samples in a condition:\", min_number_samples))\\n\\n# Filtering low count genes\\ndata.set <- data[c(opt$gene_column, rownames(factors.set))]\\ndata.counts <- data.set[,!(names(data.set) %in% c(opt$gene_column))]\\nrownames(data.counts) <- data.set[, opt$gene_column]\\ndata.counts[is.na(data.counts)] <- 0\\n\\nkeep <- (rowSums(data.counts > opt$min_reads) >= min_number_samples)\\ngenes_filtered <- rownames(data.counts[keep, ])\\ndata.counts <- data.counts[genes_filtered,]\\ndata.set <- subset(data.set, unlist(data[opt$gene_column]) %in% genes_filtered)\\n\\nprint(paste(\"Genes with reads:\", nrow(data.set)))\\nprint(paste(\"Samples to analyze:\", ncol(data.counts)))\\n\\nprint(\"Creating function\")\\nHCtoJSON<-function(hc){\\n\\n  labels<-hc$labels\\n  merge<-data.frame(hc$merge)\\n  height <- hc$height\\n  dend <- as.dendrogram(hc)\\n  totalLength <- sum(heights_per_k.dendrogram(dend))\\n\\n  for (i in (1: nrow(merge))) {\\n    if (merge[i,1] < 0 & merge[i,2] <0 ) {\\n        eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(list(length=\", height[[i]], \", key=labels[-merge[i,1]]),list(length=\", height[[i]], \",key=labels[-merge[i,2]])))\")))\\n    } else if (merge[i,1]>0 & merge[i,2]<0) {\\n        eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(node\", merge[i,1], \", list(length=\", height[[i]], \",key=labels[-merge[i,2]])))\")))\\n    } else if (merge[i,1]<0 & merge[i,2]>0) {\\n        eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(list(length=\", height[[i]], \",key=labels[-merge[i,1]]), node\", merge[i,2],\"))\")))\\n    } else if (merge[i,1]>0 & merge[i,2]>0) {\\n        eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(node\",merge[i,1] , \", node\" , merge[i,2],\" ))\")))\\n    }\\n  }\\n\\n  eval(parse(text=paste0(\"JSON<-toJSON(node\", nrow(merge) + 1, \"<-list(totalLength=\", totalLength, \", children=list(node\",nrow(merge), \")))\")))\\n\\n  return(JSON)\\n}\\n\\nprint(\"Calculating correlation\")\\ndata.cor <- cor(data.counts)\\nprint(\"Doing first cluster\")\\nhc <- hclust(dist(data.cor, method = \"euclidean\"))\\nprint(\"Printing cluster in JSON\")\\nhc_rows_cluster_json <- HCtoJSON(hc)\\nrows_cluster_order <- hc$order\\n\\nprint(\"Sorting matrix\")\\ndata.cor <- data.cor[rows_cluster_order, rows_cluster_order]\\nname_cond <- factors[colnames(data.cor),]\\nrownames(name_cond) <- NULL\\nprint(\"Creating JSON from matrix\")\\ndata_json <- jsonlite::toJSON(list(name_cond, as.data.frame(data.cor)))\\n\\nprint(paste(\"Writing to file\", opt$out))\\nwrite(data_json, opt$out)\\nwrite(hc_rows_cluster_json, opt$out, append=TRUE)\\nwrite(hc_rows_cluster_json, opt$out, append=TRUE)\\n'}]}}",
    "cwl_doc": "Creates a JSON with the correlation data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Correlation_Json",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://bioconductor.org/packages/release/bioc/html/DESeq2.html",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/R/r_pca_corr.cwl",
    "sha": "9c47b1ca28b7dcf5ce943fda2622400b9d620085",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/R/r_pca_corr.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: PCA_Correlation_Json\ndoc: Creates a JSON with the correlation data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: correlation.R\n        entry: |\n            library(optparse)\n\n            option_list = list(\n                make_option(\"--factor\", type = \"character\", default = NULL, help = \"Factor file\"),\n                make_option(\"--out\", type = \"character\", default = NULL, help = \"Output JSOn file\"),\n                make_option(\"--matrix\", type = \"character\", default = NULL, help = \"Matrix file\"),\n                make_option(\"--gene_column\", type = \"character\", default = NULL, help = \"Gene id column header in matrix file\"),\n                make_option(\"--sample_column\", type = \"character\", default = NULL, help = \"Sample id column header in factor file\"),\n                make_option(\"--condition1\", type = \"character\", default = NULL, help = \"Condition to extract from factor. It uses column condition\"),\n                make_option(\"--condition2\", type = \"character\", default = NULL, help = \"Condition to extract from factor. It uses column condition\"),\n                make_option(\"--min_reads\", type = \"integer\", default = 10, help = \"Minimum number of reads in half of the samples\")\n            )\n\n            opt_parser = OptionParser(option_list = option_list)\n            opt = parse_args(opt_parser)\n\n            if (is.null(opt$factor)) {\n                print_help(opt_parser)\n                stop(\"Factor file is not available. Option --factor\", call. = FALSE)\n            }\n            if (is.null(opt$matrix)) {\n                print_help(opt_parser)\n                stop(\"Factor file is not available. Option --matrix\", call. = FALSE)\n            }\n            if (is.null(opt$out)) {\n                print_help(opt_parser)\n                stop(\"Out file name is not available. Option --out\", call. = FALSE)\n            }\n            if (is.null(opt$gene_column)) {\n                print_help(opt_parser)\n                stop(\"Gene id column is not set. Option --gene_column\", call. = FALSE)\n            }\n            if (is.null(opt$sample_column)) {\n                print_help(opt_parser)\n                stop(\"Sample column is not set. Option --sample_column\", call. = FALSE)\n            }\n\n            require(data.table)\n            library(dendextend)\n            library(rjson)\n\n            # Loading data\n            factors <- as.data.frame(fread(opt$factor))\n            rownames(factors) <- factors[, opt$sample_column]\n            print(paste(\"Factors loaded:\", nrow(factors)))\n\n            data <- as.data.frame(fread(opt$matrix))\n            print(paste(\"Columns in the matrix:\", ncol(data)))\n            print(paste(\"Genes in the matrix:\", nrow(data)))\n\n            if (!is.null(opt$condition1) || !is.null(opt$condition2)) {\n                # Creating factors variable\n                conditions <- c(opt$condition2,opt$condition1)\n                print(paste(\"Conditions:\", length(conditions)))\n\n                factors.set <- factors[factors$condition %in% conditions,]\n                factors.set[] <- lapply( factors.set, factor)\n                factors.set$condition <- factor(factors.set$condition, levels=conditions)\n\n                min_number_samples <- min(table(factors.set$condition))\n            }else{\n                factors.set <- factors\n                factors.set[] <- lapply( factors.set, factor)\n                min_number_samples <- nrow(factors)/2\n            }\n            print(paste(\"Minimum number of samples in a condition:\", min_number_samples))\n\n            # Filtering low count genes\n            data.set <- data[c(opt$gene_column, rownames(factors.set))]\n            data.counts <- data.set[,!(names(data.set) %in% c(opt$gene_column))]\n            rownames(data.counts) <- data.set[, opt$gene_column]\n            data.counts[is.na(data.counts)] <- 0\n\n            keep <- (rowSums(data.counts > opt$min_reads) >= min_number_samples)\n            genes_filtered <- rownames(data.counts[keep, ])\n            data.counts <- data.counts[genes_filtered,]\n            data.set <- subset(data.set, unlist(data[opt$gene_column]) %in% genes_filtered)\n\n            print(paste(\"Genes with reads:\", nrow(data.set)))\n            print(paste(\"Samples to analyze:\", ncol(data.counts)))\n\n            pca <- prcomp(t(data.counts), cor = FALSE, scores = TRUE)\n            data.pca <- as.data.frame(pca$x[,c('PC1', 'PC2')])\n            data.pca$condition <- factors.set$condition\n            data.pca['name'] <- factors[, opt$sample_column]\n            file_name <- paste(opt$out, \"_pca.csv\", sep=\"\")\n            write.table(data.pca, file_name, row.names=F, na=\"NA\", append = F, quote= FALSE, sep = \",\", col.names = T)\n\n            print(\"Creating function\")\n            HCtoJSON<-function(hc){\n\n              labels<-hc$labels\n              merge<-data.frame(hc$merge)\n              height <- hc$height\n              dend <- as.dendrogram(hc)\n              totalLength <- sum(heights_per_k.dendrogram(dend))\n\n              for (i in (1: nrow(merge))) {\n                if (merge[i,1] < 0 & merge[i,2] <0 ) {\n                    eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(list(length=\", height[[i]], \", key=labels[-merge[i,1]]),list(length=\", height[[i]], \",key=labels[-merge[i,2]])))\")))\n                } else if (merge[i,1]>0 & merge[i,2]<0) {\n                    eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(node\", merge[i,1], \", list(length=\", height[[i]], \",key=labels[-merge[i,2]])))\")))\n                } else if (merge[i,1]<0 & merge[i,2]>0) {\n                    eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(list(length=\", height[[i]], \",key=labels[-merge[i,1]]), node\", merge[i,2],\"))\")))\n                } else if (merge[i,1]>0 & merge[i,2]>0) {\n                    eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(node\",merge[i,1] , \", node\" , merge[i,2],\" ))\")))\n                }\n              }\n\n              eval(parse(text=paste0(\"JSON<-toJSON(node\", nrow(merge) + 1, \"<-list(totalLength=\", totalLength, \", children=list(node\",nrow(merge), \")))\")))\n\n              return(JSON)\n            }\n\n            print(\"Calculating correlation\")\n            data.cor <- cor(data.counts)\n            print(\"Doing first cluster\")\n            hc <- hclust(dist(data.cor, method = \"euclidean\"))\n            print(\"Printing cluster in JSON\")\n            hc_rows_cluster_json <- HCtoJSON(hc)\n            rows_cluster_order <- hc$order\n\n            print(\"Sorting matrix\")\n            data.cor <- data.cor[rows_cluster_order, rows_cluster_order]\n            name_cond <- factors[colnames(data.cor),]\n            rownames(name_cond) <- NULL\n            print(\"Creating JSON from matrix\")\n            data_json <- jsonlite::toJSON(list(name_cond, as.data.frame(data.cor)))\n\n            file_name <- paste(opt$out, \"_corr.json\", sep=\"\")\n            print(paste(\"Writing to file\", file_name))\n            write(data_json, file_name)\n            write(hc_rows_cluster_json, file_name, append=TRUE)\n            write(hc_rows_cluster_json, file_name, append=TRUE)\n\n\nhints:\n  - $import: R_ubuntu-18.04.yml\n\ninputs:\n  matrix:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: --matrix\n  factor:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: --factor\n  gene_column:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: --gene_column\n  sample_column:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: --sample_column\n  condition1:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: --condition1\n  condition2:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: --condition2\n  min_reads:\n    type: int\n    inputBinding:\n      position: 3\n      prefix: --min_reads\n  out:\n    type: string\n    inputBinding:\n      position: 4\n      prefix: --out\n\noutputs:\n  output:\n    type: File[]\n    outputBinding:\n      glob: $(inputs.out)*\n\n\nbaseCommand: [\"Rscript\",\"correlation.R\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://bioconductor.org/packages/release/bioc/html/DESeq2.html\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'matrix': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '--matrix'}}, 'factor': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': '--factor'}}, 'gene_column': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '--gene_column'}}, 'sample_column': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '--sample_column'}}, 'condition1': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '--condition1'}}, 'condition2': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '--condition2'}}, 'min_reads': {'type': 'int', 'inputBinding': {'position': 3, 'prefix': '--min_reads'}}, 'out': {'type': 'string', 'inputBinding': {'position': 4, 'prefix': '--out'}}}",
    "cwl_outputs": "{'output': {'type': 'File[]', 'outputBinding': {'glob': '$(inputs.out)*'}}}",
    "cwl_hints": "[{'$import': 'R_ubuntu-18.04.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', 'correlation.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'correlation.R', 'entry': 'library(optparse)\\n\\noption_list = list(\\n    make_option(\"--factor\", type = \"character\", default = NULL, help = \"Factor file\"),\\n    make_option(\"--out\", type = \"character\", default = NULL, help = \"Output JSOn file\"),\\n    make_option(\"--matrix\", type = \"character\", default = NULL, help = \"Matrix file\"),\\n    make_option(\"--gene_column\", type = \"character\", default = NULL, help = \"Gene id column header in matrix file\"),\\n    make_option(\"--sample_column\", type = \"character\", default = NULL, help = \"Sample id column header in factor file\"),\\n    make_option(\"--condition1\", type = \"character\", default = NULL, help = \"Condition to extract from factor. It uses column condition\"),\\n    make_option(\"--condition2\", type = \"character\", default = NULL, help = \"Condition to extract from factor. It uses column condition\"),\\n    make_option(\"--min_reads\", type = \"integer\", default = 10, help = \"Minimum number of reads in half of the samples\")\\n)\\n\\nopt_parser = OptionParser(option_list = option_list)\\nopt = parse_args(opt_parser)\\n\\nif (is.null(opt$factor)) {\\n    print_help(opt_parser)\\n    stop(\"Factor file is not available. Option --factor\", call. = FALSE)\\n}\\nif (is.null(opt$matrix)) {\\n    print_help(opt_parser)\\n    stop(\"Factor file is not available. Option --matrix\", call. = FALSE)\\n}\\nif (is.null(opt$out)) {\\n    print_help(opt_parser)\\n    stop(\"Out file name is not available. Option --out\", call. = FALSE)\\n}\\nif (is.null(opt$gene_column)) {\\n    print_help(opt_parser)\\n    stop(\"Gene id column is not set. Option --gene_column\", call. = FALSE)\\n}\\nif (is.null(opt$sample_column)) {\\n    print_help(opt_parser)\\n    stop(\"Sample column is not set. Option --sample_column\", call. = FALSE)\\n}\\n\\nrequire(data.table)\\nlibrary(dendextend)\\nlibrary(rjson)\\n\\n# Loading data\\nfactors <- as.data.frame(fread(opt$factor))\\nrownames(factors) <- factors[, opt$sample_column]\\nprint(paste(\"Factors loaded:\", nrow(factors)))\\n\\ndata <- as.data.frame(fread(opt$matrix))\\nprint(paste(\"Columns in the matrix:\", ncol(data)))\\nprint(paste(\"Genes in the matrix:\", nrow(data)))\\n\\nif (!is.null(opt$condition1) || !is.null(opt$condition2)) {\\n    # Creating factors variable\\n    conditions <- c(opt$condition2,opt$condition1)\\n    print(paste(\"Conditions:\", length(conditions)))\\n\\n    factors.set <- factors[factors$condition %in% conditions,]\\n    factors.set[] <- lapply( factors.set, factor)\\n    factors.set$condition <- factor(factors.set$condition, levels=conditions)\\n\\n    min_number_samples <- min(table(factors.set$condition))\\n}else{\\n    factors.set <- factors\\n    factors.set[] <- lapply( factors.set, factor)\\n    min_number_samples <- nrow(factors)/2\\n}\\nprint(paste(\"Minimum number of samples in a condition:\", min_number_samples))\\n\\n# Filtering low count genes\\ndata.set <- data[c(opt$gene_column, rownames(factors.set))]\\ndata.counts <- data.set[,!(names(data.set) %in% c(opt$gene_column))]\\nrownames(data.counts) <- data.set[, opt$gene_column]\\ndata.counts[is.na(data.counts)] <- 0\\n\\nkeep <- (rowSums(data.counts > opt$min_reads) >= min_number_samples)\\ngenes_filtered <- rownames(data.counts[keep, ])\\ndata.counts <- data.counts[genes_filtered,]\\ndata.set <- subset(data.set, unlist(data[opt$gene_column]) %in% genes_filtered)\\n\\nprint(paste(\"Genes with reads:\", nrow(data.set)))\\nprint(paste(\"Samples to analyze:\", ncol(data.counts)))\\n\\npca <- prcomp(t(data.counts), cor = FALSE, scores = TRUE)\\ndata.pca <- as.data.frame(pca$x[,c(\\'PC1\\', \\'PC2\\')])\\ndata.pca$condition <- factors.set$condition\\ndata.pca[\\'name\\'] <- factors[, opt$sample_column]\\nfile_name <- paste(opt$out, \"_pca.csv\", sep=\"\")\\nwrite.table(data.pca, file_name, row.names=F, na=\"NA\", append = F, quote= FALSE, sep = \",\", col.names = T)\\n\\nprint(\"Creating function\")\\nHCtoJSON<-function(hc){\\n\\n  labels<-hc$labels\\n  merge<-data.frame(hc$merge)\\n  height <- hc$height\\n  dend <- as.dendrogram(hc)\\n  totalLength <- sum(heights_per_k.dendrogram(dend))\\n\\n  for (i in (1: nrow(merge))) {\\n    if (merge[i,1] < 0 & merge[i,2] <0 ) {\\n        eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(list(length=\", height[[i]], \", key=labels[-merge[i,1]]),list(length=\", height[[i]], \",key=labels[-merge[i,2]])))\")))\\n    } else if (merge[i,1]>0 & merge[i,2]<0) {\\n        eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(node\", merge[i,1], \", list(length=\", height[[i]], \",key=labels[-merge[i,2]])))\")))\\n    } else if (merge[i,1]<0 & merge[i,2]>0) {\\n        eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(list(length=\", height[[i]], \",key=labels[-merge[i,1]]), node\", merge[i,2],\"))\")))\\n    } else if (merge[i,1]>0 & merge[i,2]>0) {\\n        eval(parse(text=paste0(\"node\", i, \"<-list(length=\", height[[i]], \", children=list(node\",merge[i,1] , \", node\" , merge[i,2],\" ))\")))\\n    }\\n  }\\n\\n  eval(parse(text=paste0(\"JSON<-toJSON(node\", nrow(merge) + 1, \"<-list(totalLength=\", totalLength, \", children=list(node\",nrow(merge), \")))\")))\\n\\n  return(JSON)\\n}\\n\\nprint(\"Calculating correlation\")\\ndata.cor <- cor(data.counts)\\nprint(\"Doing first cluster\")\\nhc <- hclust(dist(data.cor, method = \"euclidean\"))\\nprint(\"Printing cluster in JSON\")\\nhc_rows_cluster_json <- HCtoJSON(hc)\\nrows_cluster_order <- hc$order\\n\\nprint(\"Sorting matrix\")\\ndata.cor <- data.cor[rows_cluster_order, rows_cluster_order]\\nname_cond <- factors[colnames(data.cor),]\\nrownames(name_cond) <- NULL\\nprint(\"Creating JSON from matrix\")\\ndata_json <- jsonlite::toJSON(list(name_cond, as.data.frame(data.cor)))\\n\\nfile_name <- paste(opt$out, \"_corr.json\", sep=\"\")\\nprint(paste(\"Writing to file\", file_name))\\nwrite(data_json, file_name)\\nwrite(hc_rows_cluster_json, file_name, append=TRUE)\\nwrite(hc_rows_cluster_json, file_name, append=TRUE)\\n'}]}}",
    "cwl_doc": "Creates a JSON with the correlation data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "PCA_Correlation_Json",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://bioconductor.org/packages/release/bioc/html/DESeq2.html",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/R/readQC.cwl",
    "sha": "b9144f3a7103957703001ce40c6f20422d41c198",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/R/readQC.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: readQC\ndoc: NGS read Quality Control analysis\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0\n  SoftwareRequirement:\n    packages:\n      - package: 'bioconductor-diffbind'\n        version:\n          - '3.8.0'\n        specs:\n          - https://anaconda.org/bioconda/bioconductor-diffbind\n\nrequirements:\n  ResourceRequirement:\n    ramMin: 512\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: readQC.R\n        entry: |\n          args = commandArgs(trailingOnly=TRUE)\n          library(\"ggplot2\")\n          library(dplyr)\n          tags=args[1]\n          if(!dir.exists(tags)) {\n            stop(\"ERROR: Tag folder not found\")\n          }\n          sample_name = basename(tags)\n          ## Tag count uniqueness ##ss\n          tcount = read.table(paste0(tags,\"/tagCountDistribution.txt\"), header = T, sep = \"\\t\")\n          colnames(tcount) = c(\"Alignments\", \"Fraction\")\n          tcount = tcount[tcount[,1] <= 10,]\n          tcount = tcount[tcount[,1] > 0,]\n          pdf(paste0(sample_name, \"_Uniqueness.pdf\"))\n          ggplot(data = tcount, aes(x=Alignments, y=Fraction)) +\n            geom_line(stat=\"identity\", linetype = \"dashed\") +\n            scale_y_continuous(limits = c(0,1)) +\n            scale_x_continuous(breaks = c(1:10)) +\n            xlab(\"No. secondary alignments\") +\n            theme_classic() +\n            geom_point()\n          dev.off()\n          ## Peak size and FPKM stats END ##\n          ## Autocorrelation analysis ##\n          acorr = read.table(paste0(tags,\"/tagAutocorrelation.txt\"), header = T, sep = \"\\t\")\n          colnames(acorr) = c(\"Distance\", \"Same_strand\", \"Opposite_strand\")\n          df = acorr\n          df[,3] = NULL\n          colnames(df) = c(\"Distance\", \"Total\")\n          df$type=\"Same strand\"\n          acorr[,2] = NULL\n          colnames(acorr) = c(\"Distance\", \"Total\")\n          acorr$type=\"Opposite strand\"\n          df = rbind(df, acorr)\n          distances = c(\"2000\", \"1000\", \"500\", \"250\", \"200\")\n          for(i in 1:length(distances)) {\n            df = df[df[,1] >= -as.numeric(distances[i]) & df[,1] <= as.numeric(distances[i]),]\n            pdf(paste0(sample_name,\"_Autocorrelation_\", distances[i], \"dist.pdf\"))\n            p1 = ggplot(data = df, aes(x=Distance, y=Total, group=type)) +\n              geom_line(aes(color=type)) +\n              theme_classic()\n            plot(p1)\n            dev.off()\n          }\n          ## Autocorrelation analysis END ##\n          ## Tag length distro analysis ##\n          tlen = read.table(paste0(tags,\"/tagLengthDistribution.txt\"), header = T, sep = \"\\t\")\n          colnames(tlen) = c(\"Length\", \"Fraction\")\n          tlen$type=\"standard\"\n          df = tlen\n          df$Fraction = cumsum(df$Fraction)\n          df$type=\"cumulative\"\n          df = rbind(df, tlen)\n          pdf(paste0(sample_name, \"_Length_distribution.pdf\"))\n          ggplot(data = df, aes(x=Length, y=Fraction, group=type)) +\n            geom_line(aes(color=type)) +\n            geom_point(aes(color=type)) +\n            theme_classic()\n          dev.off()\n          ## Tag length distro analysis END ##\n          ## GC content analysis ##\n          genomeGC = read.table(paste0(tags,\"/genomeGCcontent.txt\"), header = T, sep = \"\\t\")\n          sampleGC = read.table(paste0(tags,\"/tagGCcontent.txt\"), header = T, sep = \"\\t\")\n          colnames(genomeGC) = c(\"GC\", \"Total\", \"Normalized\")\n          colnames(sampleGC) = c(\"GC\", \"Total\", \"Normalized\")\n          genomeGC$type=\"Genome\"\n          sampleGC$type=\"Sample\"\n          df = rbind(genomeGC, sampleGC)\n          pdf(paste0(sample_name, \"_GC_content.pdf\"))\n          ggplot(data=df, aes(x=GC, y=Normalized, group=type)) +\n            geom_line(aes(color=type)) +\n            geom_point(aes(color=type)) +\n            theme_classic()\n          dev.off()\n          ## GC content analysis end ##\n\ninputs:\n  tags_directory:\n    type: Directory\n    inputBinding:\n      position: 1\n\noutputs:\n  plots:\n    type: File[]\n    outputBinding:\n      glob: \"*.pdf\"\n\nbaseCommand: [\"Rscript\", \"--vanilla\", \"readQC.R\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'tags_directory': {'type': 'Directory', 'inputBinding': {'position': 1}}}",
    "cwl_outputs": "{'plots': {'type': 'File[]', 'outputBinding': {'glob': '*.pdf'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0'}, 'SoftwareRequirement': {'packages': [{'package': 'bioconductor-diffbind', 'version': ['3.8.0'], 'specs': ['https://anaconda.org/bioconda/bioconductor-diffbind']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', '--vanilla', 'readQC.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {'ramMin': 512}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'readQC.R', 'entry': 'args = commandArgs(trailingOnly=TRUE)\\nlibrary(\"ggplot2\")\\nlibrary(dplyr)\\ntags=args[1]\\nif(!dir.exists(tags)) {\\n  stop(\"ERROR: Tag folder not found\")\\n}\\nsample_name = basename(tags)\\n## Tag count uniqueness ##ss\\ntcount = read.table(paste0(tags,\"/tagCountDistribution.txt\"), header = T, sep = \"\\\\t\")\\ncolnames(tcount) = c(\"Alignments\", \"Fraction\")\\ntcount = tcount[tcount[,1] <= 10,]\\ntcount = tcount[tcount[,1] > 0,]\\npdf(paste0(sample_name, \"_Uniqueness.pdf\"))\\nggplot(data = tcount, aes(x=Alignments, y=Fraction)) +\\n  geom_line(stat=\"identity\", linetype = \"dashed\") +\\n  scale_y_continuous(limits = c(0,1)) +\\n  scale_x_continuous(breaks = c(1:10)) +\\n  xlab(\"No. secondary alignments\") +\\n  theme_classic() +\\n  geom_point()\\ndev.off()\\n## Peak size and FPKM stats END ##\\n## Autocorrelation analysis ##\\nacorr = read.table(paste0(tags,\"/tagAutocorrelation.txt\"), header = T, sep = \"\\\\t\")\\ncolnames(acorr) = c(\"Distance\", \"Same_strand\", \"Opposite_strand\")\\ndf = acorr\\ndf[,3] = NULL\\ncolnames(df) = c(\"Distance\", \"Total\")\\ndf$type=\"Same strand\"\\nacorr[,2] = NULL\\ncolnames(acorr) = c(\"Distance\", \"Total\")\\nacorr$type=\"Opposite strand\"\\ndf = rbind(df, acorr)\\ndistances = c(\"2000\", \"1000\", \"500\", \"250\", \"200\")\\nfor(i in 1:length(distances)) {\\n  df = df[df[,1] >= -as.numeric(distances[i]) & df[,1] <= as.numeric(distances[i]),]\\n  pdf(paste0(sample_name,\"_Autocorrelation_\", distances[i], \"dist.pdf\"))\\n  p1 = ggplot(data = df, aes(x=Distance, y=Total, group=type)) +\\n    geom_line(aes(color=type)) +\\n    theme_classic()\\n  plot(p1)\\n  dev.off()\\n}\\n## Autocorrelation analysis END ##\\n## Tag length distro analysis ##\\ntlen = read.table(paste0(tags,\"/tagLengthDistribution.txt\"), header = T, sep = \"\\\\t\")\\ncolnames(tlen) = c(\"Length\", \"Fraction\")\\ntlen$type=\"standard\"\\ndf = tlen\\ndf$Fraction = cumsum(df$Fraction)\\ndf$type=\"cumulative\"\\ndf = rbind(df, tlen)\\npdf(paste0(sample_name, \"_Length_distribution.pdf\"))\\nggplot(data = df, aes(x=Length, y=Fraction, group=type)) +\\n  geom_line(aes(color=type)) +\\n  geom_point(aes(color=type)) +\\n  theme_classic()\\ndev.off()\\n## Tag length distro analysis END ##\\n## GC content analysis ##\\ngenomeGC = read.table(paste0(tags,\"/genomeGCcontent.txt\"), header = T, sep = \"\\\\t\")\\nsampleGC = read.table(paste0(tags,\"/tagGCcontent.txt\"), header = T, sep = \"\\\\t\")\\ncolnames(genomeGC) = c(\"GC\", \"Total\", \"Normalized\")\\ncolnames(sampleGC) = c(\"GC\", \"Total\", \"Normalized\")\\ngenomeGC$type=\"Genome\"\\nsampleGC$type=\"Sample\"\\ndf = rbind(genomeGC, sampleGC)\\npdf(paste0(sample_name, \"_GC_content.pdf\"))\\nggplot(data=df, aes(x=GC, y=Normalized, group=type)) +\\n  geom_line(aes(color=type)) +\\n  geom_point(aes(color=type)) +\\n  theme_classic()\\ndev.off()\\n## GC content analysis end ##\\n'}]}}",
    "cwl_doc": "NGS read Quality Control analysis",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "readQC",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/R/tsv2rds.cwl",
    "sha": "d3c029c634114470b2f2ded0aef93dd3d464e065",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/R/tsv2rds.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: tsv2rds\ndoc: Convert TSV to R table\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/r-genomictools:0.2.9.7--r40h0357c0b_0\n  SoftwareRequirement:\n    packages:\n      - package: 'r-genomictools'\n        version:\n          - '0.2.9.7'\n        specs:\n          - https://anaconda.org/bioconda/r-genomictools\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: tsv2rds.R\n        entry: |\n          require(data.table)\n          args = commandArgs(trailingOnly=TRUE)\n          tsv = args[1]\n          rds = args[2]\n\n          if (is.null(tsv)) {\n              print_help(opt_parser)\n              stop(\"TSV file is not available. Option --tsv\", call. = FALSE)\n          }\n          if (is.null(rds)) {\n              print_help(opt_parser)\n              stop(\"RDS output file is not available. Option --rds\", call. = FALSE)\n          }\n\n          tsv_data <- as.data.frame(fread(tsv))\n          saveRDS(tsv_data, file = rds)\n\ninputs:\n  tsv:\n    type: File\n    inputBinding:\n      position: 1\n  rds:\n    type: string\n    inputBinding:\n      position: 2\n      valueFrom: ${ return inputs.tsv.nameroot + \".rds\" ;}\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.rds)\n\nbaseCommand: [\"Rscript\",\"tsv2rds.R\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'tsv': {'type': 'File', 'inputBinding': {'position': 1}}, 'rds': {'type': 'string', 'inputBinding': {'position': 2, 'valueFrom': '${ return inputs.tsv.nameroot + \".rds\" ;}'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.rds)'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/r-genomictools:0.2.9.7--r40h0357c0b_0'}, 'SoftwareRequirement': {'packages': [{'package': 'r-genomictools', 'version': ['0.2.9.7'], 'specs': ['https://anaconda.org/bioconda/r-genomictools']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', 'tsv2rds.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'tsv2rds.R', 'entry': 'require(data.table)\\nargs = commandArgs(trailingOnly=TRUE)\\ntsv = args[1]\\nrds = args[2]\\n\\nif (is.null(tsv)) {\\n    print_help(opt_parser)\\n    stop(\"TSV file is not available. Option --tsv\", call. = FALSE)\\n}\\nif (is.null(rds)) {\\n    print_help(opt_parser)\\n    stop(\"RDS output file is not available. Option --rds\", call. = FALSE)\\n}\\n\\ntsv_data <- as.data.frame(fread(tsv))\\nsaveRDS(tsv_data, file = rds)\\n'}]}}",
    "cwl_doc": "Convert TSV to R table",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "tsv2rds",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/R/volcano_plot.cwl",
    "sha": "59c0a59ea57be42bfc7cc0d81858c0cdb5c834f9",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/R/volcano_plot.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: R_Volcano\ndoc: Quality metrics for ChIPseq data.\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0\n  SoftwareRequirement:\n    packages:\n      - package: 'bioconductor-diffbind'\n        version:\n          - '3.8.0'\n        specs:\n          - https://anaconda.org/bioconda/bioconductor-diffbind\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: script.R\n        entry: |\n          args = commandArgs(trailingOnly=TRUE)\n          fc = as.numeric(args[2])\n          fdr = as.numeric(args[3])\n          out = args[4]\n          highlight_color = \"red\"\n          data <- read.csv(args[1])\n          print(paste(\"Genes: \", nrow(data)))\n\n          pdf(out)\n          with(data, plot(logFC, -log10(FDR), pch=20, main=\"Volcano plot\", xlim=c(-8,8)))\n          with(subset(data, FDR <= fdr & abs(logFC) >= fc), points(logFC, -log10(FDR), pch=20, col=highlight_color))\n          dev.off()\n\ninputs:\n  data:\n    type: File\n    inputBinding:\n      position: 1\n  fc:\n    type: float\n    inputBinding:\n      position: 2\n  fdr:\n    type: float\n    inputBinding:\n      position: 3\n  out:\n    type: string\n    inputBinding:\n      position: 4\n\noutputs:\n   output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n\nbaseCommand: [\"Rscript\", \"--vanilla\",\"script.R\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'data': {'type': 'File', 'inputBinding': {'position': 1}}, 'fc': {'type': 'float', 'inputBinding': {'position': 2}}, 'fdr': {'type': 'float', 'inputBinding': {'position': 3}}, 'out': {'type': 'string', 'inputBinding': {'position': 4}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bioconductor-diffbind:3.8.0--r42hc247a5b_0'}, 'SoftwareRequirement': {'packages': [{'package': 'bioconductor-diffbind', 'version': ['3.8.0'], 'specs': ['https://anaconda.org/bioconda/bioconductor-diffbind']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', '--vanilla', 'script.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'script.R', 'entry': 'args = commandArgs(trailingOnly=TRUE)\\nfc = as.numeric(args[2])\\nfdr = as.numeric(args[3])\\nout = args[4]\\nhighlight_color = \"red\"\\ndata <- read.csv(args[1])\\nprint(paste(\"Genes: \", nrow(data)))\\n\\npdf(out)\\nwith(data, plot(logFC, -log10(FDR), pch=20, main=\"Volcano plot\", xlim=c(-8,8)))\\nwith(subset(data, FDR <= fdr & abs(logFC) >= fc), points(logFC, -log10(FDR), pch=20, col=highlight_color))\\ndev.off()\\n'}]}}",
    "cwl_doc": "Quality metrics for ChIPseq data.",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "R_Volcano",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/augustus/augustus.cwl",
    "sha": "86fdc80ffb6deb2b06e043e5af9fea9de1d05b3b",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/augustus/augustus.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: augustus\ndoc: AUGUSTUS is a gene prediction program for eukaryotes\n\nrequirements:\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: augustus-docker.yml\n  - $import: augustus-bioconda.yml\n\ninputs:\n  threads:\n    type: int\n  out:\n    type: string\n    doc: Output file\n  species:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: --species=\n      separate: false\n  strand:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --strand=\n      separate: false\n  genemodel:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --genemodel=\n      separate: false\n  singlestrand:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --singlestrand=\n      separate: false\n  hintsfile:\n    type: File?\n    inputBinding:\n      position: 2\n      prefix: --hintsfile=\n      separate: false\n  AUGUSTUS_CONFIG_PATH:\n    type: Directory?\n    inputBinding:\n      position: 2\n      prefix: --AUGUSTUS_CONFIG_PATH=\n      separate: false\n  alternatives_from_evidence:\n    type: string?\n    inputBinding:\n      position:\n      prefix: --alternatives-from-evidence=\n      separate: false\n  alternatives_from_sampling:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --alternatives-from-sampling=\n      separate: false\n  sample:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: --sample=\n      separate: false\n  minexonintronprob:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: --minexonintronprob=\n      separate: false\n  minmeanexonintronprob:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: --minmeanexonintronprob=\n      separate: false\n  maxtracks:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: --maxtracks=\n      separate: false\n  proteinprofile:\n    type: File?\n    inputBinding:\n      position: 2\n      prefix: --proteinprofile=\n      separate: false\n  progress:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --progress=\n      separate: false\n  gff3:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --gff3=\n      separate: false\n  predictionStart:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: --predictionStart=\n      separate: false\n  predictionEnd:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: --predictionEnd=\n      separate: false\n  UTR:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --UTR=\n      separate: false\n  noInFrameStop:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --noInFrameStop=\n      separate: false\n  noprediction:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --noprediction=\n      separate: false\n  uniqueGeneId:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --uniqueGeneId=\n      separate: false\n  input:\n    type: File\n    inputBinding:\n      position: 3\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n\nstdout: $(inputs.out)\n\nbaseCommand: [augustus]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://bioinf.uni-greifswald.de/augustus/\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'threads': {'type': 'int'}, 'out': {'type': 'string', 'doc': 'Output file'}, 'species': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '--species=', 'separate': False}}, 'strand': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--strand=', 'separate': False}}, 'genemodel': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--genemodel=', 'separate': False}}, 'singlestrand': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--singlestrand=', 'separate': False}}, 'hintsfile': {'type': 'File?', 'inputBinding': {'position': 2, 'prefix': '--hintsfile=', 'separate': False}}, 'AUGUSTUS_CONFIG_PATH': {'type': 'Directory?', 'inputBinding': {'position': 2, 'prefix': '--AUGUSTUS_CONFIG_PATH=', 'separate': False}}, 'alternatives_from_evidence': {'type': 'string?', 'inputBinding': {'position': None, 'prefix': '--alternatives-from-evidence=', 'separate': False}}, 'alternatives_from_sampling': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--alternatives-from-sampling=', 'separate': False}}, 'sample': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '--sample=', 'separate': False}}, 'minexonintronprob': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '--minexonintronprob=', 'separate': False}}, 'minmeanexonintronprob': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '--minmeanexonintronprob=', 'separate': False}}, 'maxtracks': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '--maxtracks=', 'separate': False}}, 'proteinprofile': {'type': 'File?', 'inputBinding': {'position': 2, 'prefix': '--proteinprofile=', 'separate': False}}, 'progress': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--progress=', 'separate': False}}, 'gff3': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--gff3=', 'separate': False}}, 'predictionStart': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '--predictionStart=', 'separate': False}}, 'predictionEnd': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '--predictionEnd=', 'separate': False}}, 'UTR': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--UTR=', 'separate': False}}, 'noInFrameStop': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--noInFrameStop=', 'separate': False}}, 'noprediction': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--noprediction=', 'separate': False}}, 'uniqueGeneId': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--uniqueGeneId=', 'separate': False}}, 'input': {'type': 'File', 'inputBinding': {'position': 3}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}}",
    "cwl_hints": "[{'$import': 'augustus-docker.yml'}, {'$import': 'augustus-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['augustus']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {'coresMin': '$(inputs.threads)'}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": "AUGUSTUS is a gene prediction program for eukaryotes",
    "cwl_stdout": "$(inputs.out)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "augustus",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://bioinf.uni-greifswald.de/augustus/",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/augustus/extract_augustus_proteins.cwl",
    "sha": "867c3a3c367bbce87d5e04da53904c063cb56458",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/augustus/extract_augustus_proteins.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: extract_augustus_proteins\ndoc: Extracts proteins generated by Augustus\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/biopython:1.78\n  SoftwareRequirement:\n    packages:\n      - package: 'python'\n        version:\n          - '3.9.1'\n        specs:\n          - https://anaconda.org/conda-forge/python\n      - package: 'biopython'\n        version:\n          - '1.78'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n\nrequirements:\n  ResourceRequirement: {}\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: extract_augustus_proteins.py\n        entry: |\n          import os\n          import sys\n\n          from collections import namedtuple\n          from Bio.SeqRecord import SeqRecord\n          from Bio.Seq import Seq\n\n          augustus_gtf = sys.argv[1]\n          output = sys.argv[2]\n\n          Location = namedtuple(\"Location\", [\"start\", \"end\"])\n\n          class Feature:\n              def __init__(self, feats):\n                  self.type = feats[2]\n                  self.features = {}\n                  self.location = Location(start=int(feats[3]), end=int(feats[4]))\n                  self.strand = feats[6]\n\n          with open(augustus_gtf) as file_obj, open(output, \"w\") as file_out:\n              line = file_obj.readline()\n              while line:\n                  line = line.strip()\n                  if not line.startswith('#'):\n                      feats = line.split('\\t')\n                      if feats[2] == 'gene':\n                          g = Feature(feats)\n                          g.features['ID'] = feats[8].strip()\n                          g.features['Parent'] = feats[0]\n                          g.features['Protein'] = False\n                          line = file_obj.readline()\n                          while line:\n                              if '# protein sequence = [' in line:\n                                  if ']' in line:\n                                      g.features['Protein'] = line.strip()\n                                      g.features['Protein'] = g.features['Protein'][g.features['Protein'].index('[') + 1:g.features['Protein'].index(']')]\n                                  else:\n                                      g.features['Protein'] = line.strip()\n                                      g.features['Protein'] = g.features['Protein'][g.features['Protein'].index('[') + 1:]\n                                      line = file_obj.readline()\n                                      while line:\n                                          g.features['Protein'] += line.strip()[2:]\n                                          if ']' in line:\n                                              g.features['Protein'] = g.features['Protein'][:-1]\n                                              break\n                                          line = file_obj.readline()\n                              if g.features['Protein']:\n                                  break\n                              line = file_obj.readline()\n                          record = SeqRecord(Seq(g.features['Protein']),\n                                       id='{}_{}-{} ({})'.format(g.features['Parent'],\n                                                                 g.location.start, g.location.end,\n                                                                g.strand), name=\"\",description=\"\")\n                          file_out.write(record.format(\"fasta\"))\n                  line = file_obj.readline()\n\ninputs:\n  gtf:\n    type: File\n    inputBinding:\n      position: 1\n  fasta:\n    type: string\n    inputBinding:\n      position: 2\n\noutputs:\n  fsa:\n    type: File\n    outputBinding:\n      glob: $(inputs.fasta)\n\nbaseCommand: [\"python\",\"extract_augustus_proteins.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n\n\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'gtf': {'type': 'File', 'inputBinding': {'position': 1}}, 'fasta': {'type': 'string', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'fsa': {'type': 'File', 'outputBinding': {'glob': '$(inputs.fasta)'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/biopython:1.78'}, 'SoftwareRequirement': {'packages': [{'package': 'python', 'version': ['3.9.1'], 'specs': ['https://anaconda.org/conda-forge/python']}, {'package': 'biopython', 'version': ['1.78'], 'specs': ['https://anaconda.org/conda-forge/biopython']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'extract_augustus_proteins.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'extract_augustus_proteins.py', 'entry': 'import os\\nimport sys\\n\\nfrom collections import namedtuple\\nfrom Bio.SeqRecord import SeqRecord\\nfrom Bio.Seq import Seq\\n\\naugustus_gtf = sys.argv[1]\\noutput = sys.argv[2]\\n\\nLocation = namedtuple(\"Location\", [\"start\", \"end\"])\\n\\nclass Feature:\\n    def __init__(self, feats):\\n        self.type = feats[2]\\n        self.features = {}\\n        self.location = Location(start=int(feats[3]), end=int(feats[4]))\\n        self.strand = feats[6]\\n\\nwith open(augustus_gtf) as file_obj, open(output, \"w\") as file_out:\\n    line = file_obj.readline()\\n    while line:\\n        line = line.strip()\\n        if not line.startswith(\\'#\\'):\\n            feats = line.split(\\'\\\\t\\')\\n            if feats[2] == \\'gene\\':\\n                g = Feature(feats)\\n                g.features[\\'ID\\'] = feats[8].strip()\\n                g.features[\\'Parent\\'] = feats[0]\\n                g.features[\\'Protein\\'] = False\\n                line = file_obj.readline()\\n                while line:\\n                    if \\'# protein sequence = [\\' in line:\\n                        if \\']\\' in line:\\n                            g.features[\\'Protein\\'] = line.strip()\\n                            g.features[\\'Protein\\'] = g.features[\\'Protein\\'][g.features[\\'Protein\\'].index(\\'[\\') + 1:g.features[\\'Protein\\'].index(\\']\\')]\\n                        else:\\n                            g.features[\\'Protein\\'] = line.strip()\\n                            g.features[\\'Protein\\'] = g.features[\\'Protein\\'][g.features[\\'Protein\\'].index(\\'[\\') + 1:]\\n                            line = file_obj.readline()\\n                            while line:\\n                                g.features[\\'Protein\\'] += line.strip()[2:]\\n                                if \\']\\' in line:\\n                                    g.features[\\'Protein\\'] = g.features[\\'Protein\\'][:-1]\\n                                    break\\n                                line = file_obj.readline()\\n                    if g.features[\\'Protein\\']:\\n                        break\\n                    line = file_obj.readline()\\n                record = SeqRecord(Seq(g.features[\\'Protein\\']),\\n                             id=\\'{}_{}-{} ({})\\'.format(g.features[\\'Parent\\'],\\n                                                       g.location.start, g.location.end,\\n                                                      g.strand), name=\"\",description=\"\")\\n                file_out.write(record.format(\"fasta\"))\\n        line = file_obj.readline()\\n'}]}}",
    "cwl_doc": "Extracts proteins generated by Augustus",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "extract_augustus_proteins",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/augustus/msa2prfl.cwl",
    "sha": "ff1125f98cf61a2057bfd80c31c944f6ac3be810",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/augustus/msa2prfl.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: msa2prfl\ndoc: AUGUSTUS msa2prfl to conbert MSA\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: augustus-docker.yml\n  - $import: augustus-bioconda.yml\n\ninputs:\n  out:\n    type: string\n    doc: Output file\n  keep_empty:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: --keep_empty\n  setname:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: --setname\n  msa:\n    type: File?\n    inputBinding:\n      position: 3\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n\nstdout: $(inputs.out)\n\nbaseCommand: [msa2prfl.pl]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://bioinf.uni-greifswald.de/augustus/\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'out': {'type': 'string', 'doc': 'Output file'}, 'keep_empty': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '--keep_empty'}}, 'setname': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '--setname'}}, 'msa': {'type': 'File?', 'inputBinding': {'position': 3}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}}",
    "cwl_hints": "[{'$import': 'augustus-docker.yml'}, {'$import': 'augustus-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['msa2prfl.pl']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "AUGUSTUS msa2prfl to conbert MSA",
    "cwl_stdout": "$(inputs.out)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "msa2prfl",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://bioinf.uni-greifswald.de/augustus/",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/bamscale/bamscale-cov.cwl",
    "sha": "159ac3c7a864779cd357a00ce812a29775592a33",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/bamscale/bamscale-cov.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  s: 'http://schema.org/'\n  sbg: 'https://www.sevenbridges.com/'\nbaseCommand:\n  - BAMscale\n  - cov\ninputs:\n  - id: bam\n    type:\n      type: array\n      items: File\n      inputBinding:\n        prefix: '--bam'\n        separate: true\n    inputBinding:\n      position: 6\n    doc: >\n      Input BAM file. This can be specified multiple times in case of multiple\n      BAM files\n    secondaryFiles:\n      - .bai\n  - id: bed\n    type: File\n    inputBinding:\n      position: 5\n      prefix: '--bed'\n    doc: |\n      Input BED file\n  - id: c\n    type: File?\n    inputBinding:\n      position: 2\n      prefix: '-c'\n    doc: >\n      Input file with list of chromosomes to blacklist when computing coverage\n      for normalization\n  - id: d\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: '-d'\n    doc: |\n      Keep duplicated reads (default: no)\n  - id: e\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: '-e'\n    doc: >\n      Compute sequencing coverage from BAM file quickly using the index (option\n      '0'),\n\n      or count number of reads by parsing entire BAM file (slower, but more\n      accurate; set to '1' [default])\n  - id: f\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: '-f'\n    doc: |\n      Compute coverage using fragments instead of reads (default: no)\n  - id: g\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: '-g'\n    doc: |\n      Minimum fragment size for read pairs (default: 0)\n  - id: l\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: '-l'\n    doc: >\n      Sequencing type to be used. Can be: single, paired, and auto (default:\n      autodetect)\n  - id: m\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: '-m'\n    doc: |\n      Do not remove reads with unmapped pairs\n  - id: 'n'\n    type: string\n    inputBinding:\n      position: 4\n      prefix: '-n'\n    doc: |\n      Output prefix for file names (default: none)\n  - id: p\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: '-p'\n    doc: |\n      Do not filter un-proper alignments (default: filter)\n  - id: q\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: '-q'\n    doc: |\n      Minimum (at least) mapping quality (default: 0)\n  - id: r\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: '-r'\n    doc: |\n      Reads need to have reverse orientation of peaks (default: unstranded)\n  - id: s\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: '-s'\n    doc: |\n      Reads need to have same orientation of peaks (default: unstranded)\n  - id: t\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: '-t'\n    doc: |\n      No. of threads to use (default: 1)\n  - id: u\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: '-u'\n    doc: >\n      BED file with regions to subtract when computing coverage for\n      normalization\n\n      These coordinates should not overlap so reads are not counted multiple\n      times\n  - id: w\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: '-w'\n    doc: |\n      Filter reads based on fragment size (default: no)\n  - id: x\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: '-x'\n    doc: |\n      Maximum fragment size for read pairs (default: 2000)\noutputs:\n  - id: fpkm_out\n    type: File\n    outputBinding:\n      glob: $(inputs.n).FPKM_normalized_coverages.tsv\n  - id: library_out\n    type: File\n    outputBinding:\n      glob: $(inputs.n).Library_normalized_coverages.tsv\n  - id: raw_out\n    type: File\n    outputBinding:\n      glob: $(inputs.n).raw_coverages.tsv\n  - id: tpm_out\n    type: File\n    outputBinding:\n      glob: $(inputs.n).TPM_normalized_coverages.tsv\ndoc: Calculate coverage of BED coordinates in BAM file(s)\nlabel: BAMscale-cov\nrequirements:\n  - class: ResourceRequirement\n    coresMin: 1\n  - class: InlineJavascriptRequirement\nhints:\n  - $import: bamscale-docker.yml\n  - $import: bamscale-bioconda.yml\n$schemas:\n  - 'https://schema.org/version/latest/schemaorg-current-http.rdf'\n's:author':\n  - class: 's:Person'\n    's:email': 'mailto:r78v10a07@gmail.com'\n    's:identifier': 'https://orcid.org/0000-0002-4108-5982'\n    's:name': Roberto Vera Alvarez\n's:codeRepository': 'https://github.com/ncbi/BAMscale'\n's:license': 'https://spdx.org/licenses/OPL-1.0'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'bam', 'type': {'type': 'array', 'items': 'File', 'inputBinding': {'prefix': '--bam', 'separate': True}}, 'inputBinding': {'position': 6}, 'doc': 'Input BAM file. This can be specified multiple times in case of multiple BAM files\\n', 'secondaryFiles': ['.bai']}, {'id': 'bed', 'type': 'File', 'inputBinding': {'position': 5, 'prefix': '--bed'}, 'doc': 'Input BED file\\n'}, {'id': 'c', 'type': 'File?', 'inputBinding': {'position': 2, 'prefix': '-c'}, 'doc': 'Input file with list of chromosomes to blacklist when computing coverage for normalization\\n'}, {'id': 'd', 'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '-d'}, 'doc': 'Keep duplicated reads (default: no)\\n'}, {'id': 'e', 'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '-e'}, 'doc': \"Compute sequencing coverage from BAM file quickly using the index (option '0'),\\nor count number of reads by parsing entire BAM file (slower, but more accurate; set to '1' [default])\\n\"}, {'id': 'f', 'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-f'}, 'doc': 'Compute coverage using fragments instead of reads (default: no)\\n'}, {'id': 'g', 'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-g'}, 'doc': 'Minimum fragment size for read pairs (default: 0)\\n'}, {'id': 'l', 'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-l'}, 'doc': 'Sequencing type to be used. Can be: single, paired, and auto (default: autodetect)\\n'}, {'id': 'm', 'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '-m'}, 'doc': 'Do not remove reads with unmapped pairs\\n'}, {'id': 'n', 'type': 'string', 'inputBinding': {'position': 4, 'prefix': '-n'}, 'doc': 'Output prefix for file names (default: none)\\n'}, {'id': 'p', 'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '-p'}, 'doc': 'Do not filter un-proper alignments (default: filter)\\n'}, {'id': 'q', 'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-q'}, 'doc': 'Minimum (at least) mapping quality (default: 0)\\n'}, {'id': 'r', 'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-r'}, 'doc': 'Reads need to have reverse orientation of peaks (default: unstranded)\\n'}, {'id': 's', 'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-s'}, 'doc': 'Reads need to have same orientation of peaks (default: unstranded)\\n'}, {'id': 't', 'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-t'}, 'doc': 'No. of threads to use (default: 1)\\n'}, {'id': 'u', 'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '-u'}, 'doc': 'BED file with regions to subtract when computing coverage for normalization\\nThese coordinates should not overlap so reads are not counted multiple times\\n'}, {'id': 'w', 'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-w'}, 'doc': 'Filter reads based on fragment size (default: no)\\n'}, {'id': 'x', 'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-x'}, 'doc': 'Maximum fragment size for read pairs (default: 2000)\\n'}]",
    "cwl_outputs": "[{'id': 'fpkm_out', 'type': 'File', 'outputBinding': {'glob': '$(inputs.n).FPKM_normalized_coverages.tsv'}}, {'id': 'library_out', 'type': 'File', 'outputBinding': {'glob': '$(inputs.n).Library_normalized_coverages.tsv'}}, {'id': 'raw_out', 'type': 'File', 'outputBinding': {'glob': '$(inputs.n).raw_coverages.tsv'}}, {'id': 'tpm_out', 'type': 'File', 'outputBinding': {'glob': '$(inputs.n).TPM_normalized_coverages.tsv'}}]",
    "cwl_hints": "[{'$import': 'bamscale-docker.yml'}, {'$import': 'bamscale-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['BAMscale', 'cov']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Calculate coverage of BED coordinates in BAM file(s)",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "https://spdx.org/licenses/OPL-1.0",
    "cwl_s:creator": null,
    "cwl_label": "BAMscale-cov",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/ncbi/BAMscale",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:email': 'mailto:r78v10a07@gmail.com', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "tools/bamscale/bamscale-scale.cwl",
    "sha": "e196c51d8c3db74be38295b2a3f5f74372c3ef24",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/bamscale/bamscale-scale.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: BAMscale-scale\ndoc: Scale one or multiple BAM files\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: bamscale-docker.yml\n  - $import: bamscale-bioconda.yml\n\ninputs:\n  l:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -l\n    doc: |\n      Sequencing type to be used. Can be: single, paired, and auto (default: autodetect)\n  f:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -f\n    doc: |\n      Compute coverage using fragments instead of reads (default: no)\n  a:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -a\n    doc: |\n      Fragment size to be used to extend single-end library reads\n  y:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: -y\n    doc: |\n      Type of normalization. (default: base)\n      If no normalization is needed, set '--scale no' argument, the program will disregard this option.\n      Options:\n        1) reads: No. of mapped reads/fragments\n        2) base: Sum of per-base coverage of reads/fragments\n  k:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: -k\n    doc: |\n      Method to scale samples together. (default: genome)\n      Options are:\n        1) no: no scaling, just calculate coverage\n        2) smallest: scale reads to smallest library (multiple-samples only)\n        3) genome: scale samples to 1x genome coverage (only possible with 'base' normalization type)\n  r:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -r\n    doc: |\n      Operation to perform when scaling samples. Default: scaled\n      Options are:\n        1) scaled: output scaled tracks.\n        2) unscaled: do not scale files in any way.\n        2) log2: log2 transform against first BAM file.\n        3) ratio: coverage ratio against first BAM file.\n        4) subtract: subtract coverage against first BAM file.\n        5) rfd: OK-seq RFD calculation\n  z:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: -z\n    doc: |\n      Size of bins for output bigWig/bedgraph generation (default: 5)\n  e:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -e\n    doc: |\n      Compute sequencing coverage from BAM file. (default: '1', count reads while parsing BAM)\n      Options are:\n        1) 0: use reads in index (only if normalization is set to 'reads')\n        2) 1: count reads while parsing BAM(s)\n      WARNING: this option is only useful when 'reads' are used for normalization\n  c:\n    type: File?\n    inputBinding:\n      position: 3\n      prefix: -c\n    doc: |\n      Input file with list of chromosomes to blacklist when computing coverage for normalization\n  u:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -u\n    doc: |\n      BED file with regions to subtract when computing coverage for normalization\n      These coordinates should not overlap so reads are not counted multiple times\n  j:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -j\n    doc: |\n      Smoothen signal by calculating mean of N bins flanking both sides of each bin (default: 0)\n      If set to '0', the signal is not smoothened. To turn on specify a value greater than '0'.\n      For replication timing, a good value is to smoothen to 100k bases. If binSize is 100bp, this would be '1000'\n  b:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -b\n    doc: |\n      Which tracks should be smoothened when performing smoothening (default: '1' meaning only binned track).\n      Options are:\n        1) 0: Smoothen scaled and transformed tracks (log2, ratio or subtracted)\n        2) 1: Smoothen only the scaled sequencing track\n        3) 2: Smoothen only the transformed (log2, ratio or subtract) track\n  q:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -q\n    doc: |\n      Minimum (at least) mapping quality (default: 0)\n  d:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: -d\n    doc: |\n      Keep duplicated reads (default: no)\n  p:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: -p\n    doc: |\n      Do not filter un-proper alignments (default: filter)\n  m:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: -m\n    doc: |\n      Do not remove reads with unmapped pairs\n  g:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -g\n    doc: |\n      Minimum fragment size for read pairs (default: 0)\n  x:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -x\n    doc: |\n      Maximum fragment size for read pairs (default: 2000)\n  w:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -w\n    doc: |\n      Filter reads based on fragment size (default: no)\n  t:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: -t\n    doc: |\n      No. of threads to use (default: 1)\n  bam:\n    type:\n      type: array\n      items: File\n      inputBinding:\n        prefix: --bam\n        separate: true\n    secondaryFiles: .bai\n    inputBinding:\n      position: 6\n    doc: |\n      Input BAM file. This can be specified multiple times in case of multiple BAM files\n\noutputs:\n  output:\n    type: File[]\n    outputBinding:\n       glob: \"*.bw\"\n\nbaseCommand: [\"BAMscale\", \"scale\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/ncbi/BAMscale\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'l': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-l'}, 'doc': 'Sequencing type to be used. Can be: single, paired, and auto (default: autodetect)\\n'}, 'f': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-f'}, 'doc': 'Compute coverage using fragments instead of reads (default: no)\\n'}, 'a': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-a'}, 'doc': 'Fragment size to be used to extend single-end library reads\\n'}, 'y': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '-y'}, 'doc': \"Type of normalization. (default: base)\\nIf no normalization is needed, set '--scale no' argument, the program will disregard this option.\\nOptions:\\n  1) reads: No. of mapped reads/fragments\\n  2) base: Sum of per-base coverage of reads/fragments\\n\"}, 'k': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '-k'}, 'doc': \"Method to scale samples together. (default: genome)\\nOptions are:\\n  1) no: no scaling, just calculate coverage\\n  2) smallest: scale reads to smallest library (multiple-samples only)\\n  3) genome: scale samples to 1x genome coverage (only possible with 'base' normalization type)\\n\"}, 'r': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-r'}, 'doc': 'Operation to perform when scaling samples. Default: scaled\\nOptions are:\\n  1) scaled: output scaled tracks.\\n  2) unscaled: do not scale files in any way.\\n  2) log2: log2 transform against first BAM file.\\n  3) ratio: coverage ratio against first BAM file.\\n  4) subtract: subtract coverage against first BAM file.\\n  5) rfd: OK-seq RFD calculation\\n'}, 'z': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '-z'}, 'doc': 'Size of bins for output bigWig/bedgraph generation (default: 5)\\n'}, 'e': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-e'}, 'doc': \"Compute sequencing coverage from BAM file. (default: '1', count reads while parsing BAM)\\nOptions are:\\n  1) 0: use reads in index (only if normalization is set to 'reads')\\n  2) 1: count reads while parsing BAM(s)\\nWARNING: this option is only useful when 'reads' are used for normalization\\n\"}, 'c': {'type': 'File?', 'inputBinding': {'position': 3, 'prefix': '-c'}, 'doc': 'Input file with list of chromosomes to blacklist when computing coverage for normalization\\n'}, 'u': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-u'}, 'doc': 'BED file with regions to subtract when computing coverage for normalization\\nThese coordinates should not overlap so reads are not counted multiple times\\n'}, 'j': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-j'}, 'doc': \"Smoothen signal by calculating mean of N bins flanking both sides of each bin (default: 0)\\nIf set to '0', the signal is not smoothened. To turn on specify a value greater than '0'.\\nFor replication timing, a good value is to smoothen to 100k bases. If binSize is 100bp, this would be '1000'\\n\"}, 'b': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-b'}, 'doc': \"Which tracks should be smoothened when performing smoothening (default: '1' meaning only binned track).\\nOptions are:\\n  1) 0: Smoothen scaled and transformed tracks (log2, ratio or subtracted)\\n  2) 1: Smoothen only the scaled sequencing track\\n  3) 2: Smoothen only the transformed (log2, ratio or subtract) track\\n\"}, 'q': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-q'}, 'doc': 'Minimum (at least) mapping quality (default: 0)\\n'}, 'd': {'type': 'string?', 'inputBinding': {'position': 4, 'prefix': '-d'}, 'doc': 'Keep duplicated reads (default: no)\\n'}, 'p': {'type': 'string?', 'inputBinding': {'position': 4, 'prefix': '-p'}, 'doc': 'Do not filter un-proper alignments (default: filter)\\n'}, 'm': {'type': 'string?', 'inputBinding': {'position': 4, 'prefix': '-m'}, 'doc': 'Do not remove reads with unmapped pairs\\n'}, 'g': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-g'}, 'doc': 'Minimum fragment size for read pairs (default: 0)\\n'}, 'x': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-x'}, 'doc': 'Maximum fragment size for read pairs (default: 2000)\\n'}, 'w': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-w'}, 'doc': 'Filter reads based on fragment size (default: no)\\n'}, 't': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '-t'}, 'doc': 'No. of threads to use (default: 1)\\n'}, 'bam': {'type': {'type': 'array', 'items': 'File', 'inputBinding': {'prefix': '--bam', 'separate': True}}, 'secondaryFiles': '.bai', 'inputBinding': {'position': 6}, 'doc': 'Input BAM file. This can be specified multiple times in case of multiple BAM files\\n'}}",
    "cwl_outputs": "{'output': {'type': 'File[]', 'outputBinding': {'glob': '*.bw'}}}",
    "cwl_hints": "[{'$import': 'bamscale-docker.yml'}, {'$import': 'bamscale-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['BAMscale', 'scale']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Scale one or multiple BAM files",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "BAMscale-scale",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/ncbi/BAMscale",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/awk.cwl",
    "sha": "71b4d8f56a17346581976aef09356d0edd9a6e38",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/awk.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: awk\ndoc: AWK command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  F:\n    type: string?\n    doc: Awk separator\n    inputBinding:\n      position: 1\n      prefix: -F\n\n  text:\n    type: string\n    doc: Awk text\n    inputBinding:\n      position: 2\n  file:\n    type: File\n    doc: Input file\n    inputBinding:\n      position: 3\n  outFileName:\n    type: string\n    doc: Out put file name\n\noutputs:\n  output:\n    type: stdout\n\nstdout: $(inputs.outFileName)\n\nbaseCommand: [\"awk\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'F': {'type': 'string?', 'doc': 'Awk separator', 'inputBinding': {'position': 1, 'prefix': '-F'}}, 'text': {'type': 'string', 'doc': 'Awk text', 'inputBinding': {'position': 2}}, 'file': {'type': 'File', 'doc': 'Input file', 'inputBinding': {'position': 3}}, 'outFileName': {'type': 'string', 'doc': 'Out put file name'}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['awk']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "AWK command",
    "cwl_stdout": "$(inputs.outFileName)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "awk",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/bc.cwl",
    "sha": "24bc882deaeae9be670c12b1313c00d465722621",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/bc.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: bc\ndoc: BC command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  file:\n    type: File\n    inputBinding:\n      position: 2\n  outFileName:\n    type: string\n\noutputs:\n  output:\n    type: stdout\n\nstdout: $(inputs.outFileName)\n\nbaseCommand: [\"sort\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'file': {'type': 'File', 'inputBinding': {'position': 2}}, 'outFileName': {'type': 'string'}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['sort']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "BC command",
    "cwl_stdout": "$(inputs.outFileName)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "bc",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/cat.cwl",
    "sha": "9be727aae2f553e160869d3fc9f5609f28ab61ff",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/cat.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: cat\ndoc: CAT command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  files:\n    type: File[]\n    inputBinding:\n      position: 1\n  outFileName:\n    type: string\n    doc: Out put file name\n\noutputs:\n  output:\n    type: stdout\n\nstdout: $(inputs.outFileName)\n\nbaseCommand: [\"cat\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'files': {'type': 'File[]', 'inputBinding': {'position': 1}}, 'outFileName': {'type': 'string', 'doc': 'Out put file name'}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cat']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "CAT command",
    "cwl_stdout": "$(inputs.outFileName)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "cat",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/csvcolumn2list.cwl",
    "sha": "bf8b32e5e324868608b7eeaa7f0a1ef786cd3fcc",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/csvcolumn2list.cwl",
    "content": "cwlVersion: v1.0\nclass: ExpressionTool\n\nlabel: csvcolumn2list\ndoc: Read a CSV table in a file and one column in a list\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  table:\n    type: File\n    inputBinding:\n      loadContents: true\n  column_name:\n    type: string\n\noutputs:\n  rows:\n    type: string[]\n\nexpression:\n  \"${\n     var lines = inputs.table.contents.split('\\\\n');\n     var header = lines[0].split(',');\n     var colIndex = -1;\n     var rows = [];\n     for (var i = 0; i < header.length; i++) {\n        if (header[i] == inputs.column_name){\n           colIndex = i;\n           break;\n        }\n     }\n     if (colIndex !== -1){\n        for (var i = 1; i < lines.length; i++) {\n           var col = lines[i].split(',')[colIndex];\n           if (col != undefined && col.length != 0){\n              rows.push(col)\n           }\n        }\n     }\n     return { 'rows': rows } ;\n  }\"\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "ExpressionTool",
    "cwl_id": null,
    "cwl_inputs": "{'table': {'type': 'File', 'inputBinding': {'loadContents': True}}, 'column_name': {'type': 'string'}}",
    "cwl_outputs": "{'rows': {'type': 'string[]'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Read a CSV table in a file and one column in a list",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "csvcolumn2list",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": "${ var lines = inputs.table.contents.split('\\n'); var header = lines[0].split(','); var colIndex = -1; var rows = []; for (var i = 0; i < header.length; i++) { if (header[i] == inputs.column_name){ colIndex = i; break; } } if (colIndex !== -1){ for (var i = 1; i < lines.length; i++) { var col = lines[i].split(',')[colIndex]; if (col != undefined && col.length != 0){ rows.push(col) } } } return { 'rows': rows } ; }",
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/echo.cwl",
    "sha": "75c5d29b05669e882faac4586d277f984ddf3f15",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/echo.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: echo\ndoc: BASH echo command\n\ninputs:\n  stdout:\n    type: string\n  msg:\n    type: string\n    inputBinding:\n      position: 1\n\noutputs:\n  out_stdout:\n    type: stdout\n\nstdout: $(inputs.stdout)\n\nbaseCommand: [\"echo\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'stdout': {'type': 'string'}, 'msg': {'type': 'string', 'inputBinding': {'position': 1}}}",
    "cwl_outputs": "{'out_stdout': {'type': 'stdout'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['echo']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "BASH echo command",
    "cwl_stdout": "$(inputs.stdout)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "echo",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/extract-file-from-dir.cwl",
    "sha": "ff74b9636beee8e79e1553e6cd82fa4bcaab859d",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/extract-file-from-dir.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: extract_file_from_directory\ndoc: Extract file from directory\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  cwltool:LoadListingRequirement:\n    loadListing: no_listing\n\ninputs:\n  d:\n    type: Directory\n    inputBinding:\n      position: 1\n      valueFrom: ${ return self.path + '/' + inputs.filename;}\n  filename:\n    type: string\n  o:\n    type: string\n    inputBinding:\n      position: 2\n    doc: |\n      Out file name\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n\nbaseCommand: [\"cp\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/ncbi/TPMCalculator\n\n\n$namespaces:\n  s: http://schema.org/\n  cwltool: \"http://commonwl.org/cwltool#\"\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'d': {'type': 'Directory', 'inputBinding': {'position': 1, 'valueFrom': \"${ return self.path + '/' + inputs.filename;}\"}}, 'filename': {'type': 'string'}, 'o': {'type': 'string', 'inputBinding': {'position': 2}, 'doc': 'Out file name\\n'}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}}",
    "cwl_hints": "{'cwltool:LoadListingRequirement': {'loadListing': 'no_listing'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cp']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'cwltool': 'http://commonwl.org/cwltool#'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Extract file from directory",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "extract_file_from_directory",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/ncbi/TPMCalculator",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/fastq2fasta.cwl",
    "sha": "563c570115820353953fd8255d20d15e5ce80540",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/fastq2fasta.cwl",
    "content": "#!/usr/bin/env cwl-runner\nclass: CommandLineTool\ncwlVersion: v1.0\nlabel: Create FASTA from FASTQ\n\nrequirements:\n  InlineJavascriptRequirement: { }\n  ShellCommandRequirement: {}\n\nhints:\n  - $import: ../../tools/basic/ubuntu-docker.yml\n\ninputs:\n  fastq1:\n    type: File\n    streamable: true\n    inputBinding:\n      position: 1\n  fastq2:\n    type: File?\n    streamable: true\n    inputBinding:\n      position: 2\n  pipe:\n    type: string\n    default: \"|\"\n    inputBinding:\n      position: 3\n      shellQuote: False\n  sed:\n    type: string\n    default: \" -n '1~4s/^@/>/p;2~4p'\"\n    inputBinding:\n      position: 4\n      prefix: sed\n      shellQuote: False\n\noutputs:\n  output:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: $(inputs.fastq1.nameroot + \".fsa\")\n\nstdout: $(inputs.fastq1.nameroot + \".fsa\")\n\nbaseCommand: [ \"zcat\" ]\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fastq1': {'type': 'File', 'streamable': True, 'inputBinding': {'position': 1}}, 'fastq2': {'type': 'File?', 'streamable': True, 'inputBinding': {'position': 2}}, 'pipe': {'type': 'string', 'default': '|', 'inputBinding': {'position': 3, 'shellQuote': False}}, 'sed': {'type': 'string', 'default': \" -n '1~4s/^@/>/p;2~4p'\", 'inputBinding': {'position': 4, 'prefix': 'sed', 'shellQuote': False}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'streamable': True, 'outputBinding': {'glob': '$(inputs.fastq1.nameroot + \".fsa\")'}}}",
    "cwl_hints": "[{'$import': '../../tools/basic/ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['zcat']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ShellCommandRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.fastq1.nameroot + \".fsa\")",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Create FASTA from FASTQ",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/files2dir.cwl",
    "sha": "dd72ac704f2ffda3cc2a3905427143956a7d4e8f",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/files2dir.cwl",
    "content": "cwlVersion: v1.0\nclass: ExpressionTool\n\nlabel: files2dir\ndoc: Group all input files in a directory\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  files:\n    type: File[]\n  dir:\n    type: string\n\noutputs:\n  output:\n    type: Directory\n\nexpression: |\n  ${\n     var listing = [];\n     for (var i = 0; i < inputs.files.length; i++) {\n        listing.push(inputs.files[i]);\n     }\n     return {\n        \"output\": {\n          \"class\": \"Directory\",\n          \"basename\": inputs.dir,\n          \"listing\": listing\n        }\n     };\n  }\n",
    "cwl_class": "ExpressionTool",
    "cwl_id": null,
    "cwl_inputs": "{'files': {'type': 'File[]'}, 'dir': {'type': 'string'}}",
    "cwl_outputs": "{'output': {'type': 'Directory'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Group all input files in a directory",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "files2dir",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": "${\n   var listing = [];\n   for (var i = 0; i < inputs.files.length; i++) {\n      listing.push(inputs.files[i]);\n   }\n   return {\n      \"output\": {\n        \"class\": \"Directory\",\n        \"basename\": inputs.dir,\n        \"listing\": listing\n      }\n   };\n}\n",
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/grep.cwl",
    "sha": "ea34bda614196d59307d4c6787634e1f4c0a288a",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/grep.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: grep\ndoc: GREP command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  v:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -v\n  pattern:\n    type: string\n    inputBinding:\n      position: 2\n  file:\n    type: File\n    inputBinding:\n      position: 3\n  outFileName:\n    type: string\n\noutputs:\n  output:\n    type: stdout\n\nstdout: $(inputs.outFileName)\n\nbaseCommand: [\"grep\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'v': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-v'}}, 'pattern': {'type': 'string', 'inputBinding': {'position': 2}}, 'file': {'type': 'File', 'inputBinding': {'position': 3}}, 'outFileName': {'type': 'string'}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['grep']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "GREP command",
    "cwl_stdout": "$(inputs.outFileName)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "grep",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/gzip.cwl",
    "sha": "5422e2e680986a17c3b153b730c8969faa156b37",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/gzip.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: gzip\ndoc: Compress files\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  d:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -d\n  file:\n    type: File\n    inputBinding:\n      position: 2\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n          if (inputs.d){\n            return inputs.file.nameroot;\n          }else{\n            return inputs.file.basename + '.gz';\n          }\n        }\n      \nstdout: |\n    ${\n        if (inputs.d){\n            return inputs.file.nameroot;\n        }else{\n            return inputs.file.basename + '.gz';\n        }\n    }\n\nbaseCommand: [\"gzip\", \"-c\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'d': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-d'}}, 'file': {'type': 'File', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': \"${\\n  if (inputs.d){\\n    return inputs.file.nameroot;\\n  }else{\\n    return inputs.file.basename + '.gz';\\n  }\\n}\\n\"}}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gzip', '-c']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Compress files",
    "cwl_stdout": "${\n    if (inputs.d){\n        return inputs.file.nameroot;\n    }else{\n        return inputs.file.basename + '.gz';\n    }\n}\n",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gzip",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/lines2arraystring.cwl",
    "sha": "5996bb13fc43bec4d5a7140b213ae64e7916ee50",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/lines2arraystring.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: ExpressionTool\n\nlabel: csvcolumn2list\ndoc: Read a CSV table in a file and one column in a list\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  file:\n    type: File\n    inputBinding:\n      loadContents: true\n\noutputs:\n  output:\n    type: string[]\n\nexpression:\n  \"${\n      var lines = inputs.file.contents.split('\\\\n');\n      var strings = [];\n      for (var i = 0; i < lines.length; i++) {\n        if (lines[i] != ''){\n          strings.push(lines[i]);\n        }\n      }\n      return { 'output': strings } ;\n  }\"\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "ExpressionTool",
    "cwl_id": null,
    "cwl_inputs": "{'file': {'type': 'File', 'inputBinding': {'loadContents': True}}}",
    "cwl_outputs": "{'output': {'type': 'string[]'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Read a CSV table in a file and one column in a list",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "csvcolumn2list",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": "${ var lines = inputs.file.contents.split('\\n'); var strings = []; for (var i = 0; i < lines.length; i++) { if (lines[i] != ''){ strings.push(lines[i]); } } return { 'output': strings } ; }",
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/shuf.cwl",
    "sha": "961a99bc0e64ec40ef7a7865f0e7dd39141132e1",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/shuf.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: shuf\ndoc: SHUF command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  n:\n    type: int\n    inputBinding:\n      position: 1\n      prefix: -n\n  random-source:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: --random-source=\n      separate: false\n  file:\n    type: File\n    inputBinding:\n      position: 2\n  outFileName:\n    type: string\n\noutputs:\n  output:\n    type: stdout\n\nstdout: $(inputs.outFileName)\n\nbaseCommand: [\"shuf\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'n': {'type': 'int', 'inputBinding': {'position': 1, 'prefix': '-n'}}, 'random-source': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '--random-source=', 'separate': False}}, 'file': {'type': 'File', 'inputBinding': {'position': 2}}, 'outFileName': {'type': 'string'}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['shuf']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "SHUF command",
    "cwl_stdout": "$(inputs.outFileName)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "shuf",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/sort.cwl",
    "sha": "3f8911c3c5ca562d3baac476177e4b6df8ba5a47",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/sort.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\ndoc: SORT command\nlabel: sort\nhints:\n  - class: DockerRequirement\n    dockerPull: 'ubuntu:18.04'\n\nrequirements:\n  - class: InlineJavascriptRequirement\n\ninputs:\n  - id: file\n    type: File\n    inputBinding:\n      position: 3\n  - id: k\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: '-k'\n  - id: outFileName\n    type: string\n  - id: u\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: '-u'\n  - id: 'n'\n    type: boolean?\n    inputBinding:\n      position: 0\n      prefix: '-n'\noutputs:\n  - id: output\n    type: File\n    outputBinding:\n      glob: $(inputs.outFileName)\n\nstdout: $(inputs.outFileName)\n\nbaseCommand: [sort]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'file', 'type': 'File', 'inputBinding': {'position': 3}}, {'id': 'k', 'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-k'}}, {'id': 'outFileName', 'type': 'string'}, {'id': 'u', 'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '-u'}}, {'id': 'n', 'type': 'boolean?', 'inputBinding': {'position': 0, 'prefix': '-n'}}]",
    "cwl_outputs": "[{'id': 'output', 'type': 'File', 'outputBinding': {'glob': '$(inputs.outFileName)'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'ubuntu:18.04'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['sort']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "SORT command",
    "cwl_stdout": "$(inputs.outFileName)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "sort",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "tools/basic/split.cwl",
    "sha": "77b519fe5bdd981d4dbea2759a6fdd37c9aa6ee4",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/split.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: split\ndoc: SPLIT command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  a:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -a\n  b:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -b\n  C:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -C\n  d:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: -d\n  numeric-suffixes:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: --numeric-suffixes\n  l:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -l\n  t:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -t\n  file:\n    type: File\n    inputBinding:\n      position: 2\n  outFileName:\n    type: string\n    inputBinding:\n      position: 3\n\noutputs:\n  output:\n    type: File[]\n    outputBinding:\n      glob: $(inputs.outFileName)*\n\nbaseCommand: [\"split\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'a': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-a'}}, 'b': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-b'}}, 'C': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-C'}}, 'd': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '-d'}}, 'numeric-suffixes': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--numeric-suffixes'}}, 'l': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-l'}}, 't': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-t'}}, 'file': {'type': 'File', 'inputBinding': {'position': 2}}, 'outFileName': {'type': 'string', 'inputBinding': {'position': 3}}}",
    "cwl_outputs": "{'output': {'type': 'File[]', 'outputBinding': {'glob': '$(inputs.outFileName)*'}}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['split']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "SPLIT command",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "split",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/split_half.cwl",
    "sha": "5de6bcfda650af9dc05cd5e4967558b205a955eb",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/split_half.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: split\ndoc: SPLIT command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  d:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: -d\n  l:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -l\n  valuefile:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -l\n      loadContents: True\n      valueFrom: |\n        ${\n            var value = (parseInt(inputs.valuefile.contents.split('\\n')[0]) + 1)/2;\n            return value.toString().split('.')[0];\n         }\n  file:\n    type: File\n    inputBinding:\n      position: 2\n  outFileName:\n    type: string\n    inputBinding:\n      position: 3\n\noutputs:\n  output:\n    type: File[]\n    outputBinding:\n      glob: $(inputs.outFileName)*\n\nbaseCommand: [\"split\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'d': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '-d'}}, 'l': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-l'}}, 'valuefile': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-l', 'loadContents': True, 'valueFrom': \"${\\n    var value = (parseInt(inputs.valuefile.contents.split('\\\\n')[0]) + 1)/2;\\n    return value.toString().split('.')[0];\\n }\\n\"}}, 'file': {'type': 'File', 'inputBinding': {'position': 2}}, 'outFileName': {'type': 'string', 'inputBinding': {'position': 3}}}",
    "cwl_outputs": "{'output': {'type': 'File[]', 'outputBinding': {'glob': '$(inputs.outFileName)*'}}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['split']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "SPLIT command",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "split",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/stringlist2fastqlist.cwl",
    "sha": "6be315b73956232d58d4e316351215c36f38d159",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/stringlist2fastqlist.cwl",
    "content": "cwlVersion: v1.0\nclass: ExpressionTool\n\nlabel: stringlist2filelist\ndoc: From a list of file names prefix return a list of files using the extension\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  SchemaDefRequirement:\n    types:\n      - $import: ../../types/fastq.yaml\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  stringlist:\n    type: string[]\n  extension:\n    type: string\n  file_dir:\n    type: Directory\n\noutputs:\n  files:\n    type: ../../types/fastq.yaml#fastq[]\n\nexpression:\n  \"${\n      var files = [];\n      var l = inputs.file_dir.listing;\n      var n = l.length;\n      var k = inputs.stringlist.length;\n      for (var j = 0; j < k; j++) {\n        var reads = [];\n        for (var i = 0; i < n; i++){\n          if (l[i].basename.startsWith(inputs.stringlist[j]) && l[i].basename.endsWith(inputs.extension)) {\n            reads.push(l[i]);\n          }\n        }\n        if (reads.length != 0){\n          var fastq = {};\n          if (reads.length == 1){\n            fastq['read_1'] = reads[0];\n          }else if (reads.length == 2){\n            fastq['read_1'] = reads[0];\n            fastq['read_2'] = reads[1];\n          }\n          files.push(reads);\n        }\n      }\n      return { 'files': files};\n  }\"\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "ExpressionTool",
    "cwl_id": null,
    "cwl_inputs": "{'stringlist': {'type': 'string[]'}, 'extension': {'type': 'string'}, 'file_dir': {'type': 'Directory'}}",
    "cwl_outputs": "{'files': {'type': '../../types/fastq.yaml#fastq[]'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'SchemaDefRequirement': {'types': [{'$import': '../../types/fastq.yaml'}]}}",
    "cwl_doc": "From a list of file names prefix return a list of files using the extension",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "stringlist2filelist",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": "${ var files = []; var l = inputs.file_dir.listing; var n = l.length; var k = inputs.stringlist.length; for (var j = 0; j < k; j++) { var reads = []; for (var i = 0; i < n; i++){ if (l[i].basename.startsWith(inputs.stringlist[j]) && l[i].basename.endsWith(inputs.extension)) { reads.push(l[i]); } } if (reads.length != 0){ var fastq = {}; if (reads.length == 1){ fastq['read_1'] = reads[0]; }else if (reads.length == 2){ fastq['read_1'] = reads[0]; fastq['read_2'] = reads[1]; } files.push(reads); } } return { 'files': files}; }",
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/stringlist2filelist.cwl",
    "sha": "b1a0be4f332a8f1d957fc3db40fae3a12ef22132",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/stringlist2filelist.cwl",
    "content": "cwlVersion: v1.0\nclass: ExpressionTool\n\nlabel: stringlist2filelist\ndoc: From a list of file names prefix return a list of files using the extension\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: SchemaDefRequirement\n    types:\n      - fields:\n          - doc: Fastq file for read 1\n            name: read_1\n            type: File\n          - doc: Fastq file for read 2\n            name: read_2\n            type: File\n        name: fastq\n        type: record\n\n\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  stringlist:\n    type: string[]\n  extension:\n    type: string\n  file_dir:\n    type: Directory\n\noutputs:\n  files:\n    type: File[]\n\nexpression:\n  \"${\n      var files = [];\n      var l = inputs.file_dir.listing;\n      var n = l.length;\n      var k = inputs.stringlist.length;\n      for (var i = 0; i < n; i++) {\n        for (var j = 0; j < k; j++){\n          if (l[i].basename.startsWith(inputs.stringlist[j]) && l[i].basename.endsWith(inputs.extension)) {\n            files.push(l[i]);\n          }\n        }\n      }\n      return { 'files': files};\n\n  }\"\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "ExpressionTool",
    "cwl_id": null,
    "cwl_inputs": "{'stringlist': {'type': 'string[]'}, 'extension': {'type': 'string'}, 'file_dir': {'type': 'Directory'}}",
    "cwl_outputs": "{'files': {'type': 'File[]'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "From a list of file names prefix return a list of files using the extension",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "stringlist2filelist",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": "${ var files = []; var l = inputs.file_dir.listing; var n = l.length; var k = inputs.stringlist.length; for (var i = 0; i < n; i++) { for (var j = 0; j < k; j++){ if (l[i].basename.startsWith(inputs.stringlist[j]) && l[i].basename.endsWith(inputs.extension)) { files.push(l[i]); } } } return { 'files': files};\n}",
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "tools/basic/tsvcolumn2list.cwl",
    "sha": "8033f1ff89e563f2e0f09bd37bf4861675372de8",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/tsvcolumn2list.cwl",
    "content": "cwlVersion: v1.0\nclass: ExpressionTool\n\nlabel: tsvcolumn2list\ndoc: Read a TSV table in a file and one column in a list\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  table:\n    type: File\n    inputBinding:\n      loadContents: true\n  column_name:\n    type: string\n\noutputs:\n  rows:\n    type: string[]\n\nexpression:\n  \"${\n     var lines = inputs.table.contents.split('\\\\n');\n     var header = lines[0].split('\\\\t');\n     var colIndex = -1;\n     var rows = [];\n     for (var i = 0; i < header.length; i++) {\n        if (header[i] == inputs.column_name){\n           colIndex = i;\n           break;\n        }\n     }\n     if (colIndex !== -1){\n        for (var i = 1; i < lines.length; i++) {\n           var col = lines[i].split('\\\\t')[colIndex];\n           if (col != undefined && col.length != 0){\n              rows.push(col)\n           }\n        }\n     }\n     return { 'rows': rows } ;\n  }\"\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "ExpressionTool",
    "cwl_id": null,
    "cwl_inputs": "{'table': {'type': 'File', 'inputBinding': {'loadContents': True}}, 'column_name': {'type': 'string'}}",
    "cwl_outputs": "{'rows': {'type': 'string[]'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Read a TSV table in a file and one column in a list",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "tsvcolumn2list",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": "${ var lines = inputs.table.contents.split('\\n'); var header = lines[0].split('\\t'); var colIndex = -1; var rows = []; for (var i = 0; i < header.length; i++) { if (header[i] == inputs.column_name){ colIndex = i; break; } } if (colIndex !== -1){ for (var i = 1; i < lines.length; i++) { var col = lines[i].split('\\t')[colIndex]; if (col != undefined && col.length != 0){ rows.push(col) } } } return { 'rows': rows } ; }",
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/uniq.cwl",
    "sha": "5b2500852260f3836fb5b47c5bf0984398eb5fa1",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/uniq.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: uniq\ndoc: UNIQ command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  c:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -c\n  file:\n    type: File\n    inputBinding:\n      position: 2\n  outFileName:\n    type: string\n\noutputs:\n  output:\n    type: stdout\n\nstdout: $(inputs.outFileName)\n\nbaseCommand: [\"uniq\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'c': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-c'}}, 'file': {'type': 'File', 'inputBinding': {'position': 2}}, 'outFileName': {'type': 'string'}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['uniq']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "UNIQ command",
    "cwl_stdout": "$(inputs.outFileName)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "uniq",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/wc.cwl",
    "sha": "2c1fb991f470cb74d9fa564319d229fdfe9c931a",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/wc.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: wc\ndoc: WC command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: ubuntu-docker.yml\n\ninputs:\n  l:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -l\n  c:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -c\n  m:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -m\n  L:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -L\n  w:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -w\n  file:\n    type: File\n    inputBinding:\n      position: 2\n  outFileName:\n    type: string\n\noutputs:\n  output:\n    type: stdout\n\nstdout: $(inputs.outFileName)\n\nbaseCommand: [\"wc\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'l': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-l'}}, 'c': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-c'}}, 'm': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-m'}}, 'L': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-L'}}, 'w': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-w'}}, 'file': {'type': 'File', 'inputBinding': {'position': 2}}, 'outFileName': {'type': 'string'}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'ubuntu-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['wc']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "WC command",
    "cwl_stdout": "$(inputs.outFileName)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "wc",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/basic/wget.cwl",
    "sha": "76bb9a40b0c2b40d499bd0b73cc36a17345eb153",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/basic/wget.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: wget\ndoc: wget command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gnu-wget:1.18--h5bf99c6_5\n\n  SoftwareRequirement:\n    packages:\n      - package: 'gnu-wget'\n        version:\n          - '1.18'\n        specs:\n          - https://anaconda.org/bioconda/gnu-wget\n\ninputs:\n  O:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -O\n  i:\n    type: string\n    inputBinding:\n      position: 2\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.O)\n  log:\n    type: stdout\n\nstdout: wget-$(inputs.O).log\nstderr: wget-$(inputs.O).log\n\nbaseCommand: [\"wget\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'O': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-O'}}, 'i': {'type': 'string', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.O)'}}, 'log': {'type': 'stdout'}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/gnu-wget:1.18--h5bf99c6_5'}, 'SoftwareRequirement': {'packages': [{'package': 'gnu-wget', 'version': ['1.18'], 'specs': ['https://anaconda.org/bioconda/gnu-wget']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['wget']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "wget command",
    "cwl_stdout": "wget-$(inputs.O).log",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "wget",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "wget-$(inputs.O).log",
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/bbmap/filterbyname.cwl",
    "sha": "5ebaf9fba3b3dd99d486685e0e71dea065526442",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/bbmap/filterbyname.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: filterbyname\ndoc: Filterbyname\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: bbmap-docker.yml\n  - $import: bbmap-bioconda.yml\n\ninputs:\n  in:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: in=\n      separate: false\n  in2:\n    type: File?\n    inputBinding:\n      position: 2\n      prefix: in2=\n      separate: false\n  names:\n    type: File\n    inputBinding:\n      position: 3\n      prefix: names=\n      separate: false\n  out:\n    type: string\n    inputBinding:\n      position: 4\n      prefix: out=\n      separate: false\n  out2:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: out2=\n      separate: false\n  include:\n    type: string?\n    inputBinding:\n      position: 6\n      prefix: include=\n      separate: false\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n  output2:\n    type: File?\n    outputBinding:\n      glob: $(inputs.out2)\n\nbaseCommand: [\"filterbyname.sh\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://bowtie-bio.sourceforge.net/index.shtml\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'in': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': 'in=', 'separate': False}}, 'in2': {'type': 'File?', 'inputBinding': {'position': 2, 'prefix': 'in2=', 'separate': False}}, 'names': {'type': 'File', 'inputBinding': {'position': 3, 'prefix': 'names=', 'separate': False}}, 'out': {'type': 'string', 'inputBinding': {'position': 4, 'prefix': 'out=', 'separate': False}}, 'out2': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': 'out2=', 'separate': False}}, 'include': {'type': 'string?', 'inputBinding': {'position': 6, 'prefix': 'include=', 'separate': False}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}, 'output2': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.out2)'}}}",
    "cwl_hints": "[{'$import': 'bbmap-docker.yml'}, {'$import': 'bbmap-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['filterbyname.sh']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ShellCommandRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Filterbyname",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "filterbyname",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://bowtie-bio.sourceforge.net/index.shtml",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/bedtools/bedtools-bamtobed.cwl",
    "sha": "6fad1699f6d0e264fe3759e974863b2866aafe52",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/bedtools/bedtools-bamtobed.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: bedtools-bamtobed\ndoc: The bedtools utilities are a swiss-army knife of tools for a wide-range of genomics analysis tasks\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: bedtools-docker.yml\n  - $import: bedtools-bioconda.yml\n\ninputs:\n  stdout:\n    type: string\n    doc: Stdout from program\n  bedpe:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -bedpe\n    doc: |\n      Write BAM alignments in BEDPE format. Only one alignment from paired-end reads will be reported.\n      Specifically, it each mate is aligned to the same chromosome, the BAM alignment reported will\n      be the one where the BAM insert size is greater than zero. When the mate alignments are\n      interchromosomal, the lexicographically lower chromosome will be reported first. Lastly,\n      when an end is unmapped, the chromosome and strand will be set to \u201c.\u201d and the start and\n      end coordinates will be set to -1. By default, this is disabled and the output will be\n      reported in BED format.\n  mate1:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: -mate1\n    doc: |\n      When writing BEDPE (-bedpe) format, always report mate one as the first BEDPE \u201cblock\u201d.\n  bed12:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: -bed12\n    doc: |\n      Write \u201cblocked\u201d BED (a.k.a. BED12) format. This will convert \u201cspliced\u201d BAM alignments\n      (denoted by the \u201cN\u201d CIGAR operation) to BED12. Forces -split.\n  split:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: -split\n    doc: |\n      Report each portion of a \u201csplit\u201d BAM (i.e., having an \u201cN\u201d CIGAR operation) alignment as\n      a distinct BED intervals.\n  i:\n    type: File\n    inputBinding:\n      position: 5\n      prefix: -i\n    doc: Input BAM format\n\n\noutputs:\n  out_stdout:\n    type: File\n    outputBinding:\n      glob: $(inputs.stdout)\n\nstdout: $(inputs.stdout)\n\nbaseCommand: [bedtools, bamtobed]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'stdout': {'type': 'string', 'doc': 'Stdout from program'}, 'bedpe': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-bedpe'}, 'doc': 'Write BAM alignments in BEDPE format. Only one alignment from paired-end reads will be reported.\\nSpecifically, it each mate is aligned to the same chromosome, the BAM alignment reported will\\nbe the one where the BAM insert size is greater than zero. When the mate alignments are\\ninterchromosomal, the lexicographically lower chromosome will be reported first. Lastly,\\nwhen an end is unmapped, the chromosome and strand will be set to \u201c.\u201d and the start and\\nend coordinates will be set to -1. By default, this is disabled and the output will be\\nreported in BED format.\\n'}, 'mate1': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '-mate1'}, 'doc': 'When writing BEDPE (-bedpe) format, always report mate one as the first BEDPE \u201cblock\u201d.\\n'}, 'bed12': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '-bed12'}, 'doc': 'Write \u201cblocked\u201d BED (a.k.a. BED12) format. This will convert \u201cspliced\u201d BAM alignments\\n(denoted by the \u201cN\u201d CIGAR operation) to BED12. Forces -split.\\n'}, 'split': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '-split'}, 'doc': 'Report each portion of a \u201csplit\u201d BAM (i.e., having an \u201cN\u201d CIGAR operation) alignment as\\na distinct BED intervals.\\n'}, 'i': {'type': 'File', 'inputBinding': {'position': 5, 'prefix': '-i'}, 'doc': 'Input BAM format'}}",
    "cwl_outputs": "{'out_stdout': {'type': 'File', 'outputBinding': {'glob': '$(inputs.stdout)'}}}",
    "cwl_hints": "[{'$import': 'bedtools-docker.yml'}, {'$import': 'bedtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bedtools', 'bamtobed']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "The bedtools utilities are a swiss-army knife of tools for a wide-range of genomics analysis tasks",
    "cwl_stdout": "$(inputs.stdout)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "bedtools-bamtobed",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/bedtools/bedtools-merge.cwl",
    "sha": "6173fdcb80f19422cb4ee14a7b0216498cebce15",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/bedtools/bedtools-merge.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: bedtools-merge\ndoc: The bedtools utilities are a swiss-army knife of tools for a wide-range of genomics analysis tasks\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: bedtools-docker.yml\n  - $import: bedtools-bioconda.yml\n\ninputs:\n  stdout_name:\n    type: string\n    doc: Stdout from program\n  i:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -i\n    doc: Input BED format\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.stdout_name)\n\nstdout: $(inputs.stdout_name)\n\nbaseCommand: [bedtools, merge]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://bedtools.readthedocs.io/en/latest/\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'stdout_name': {'type': 'string', 'doc': 'Stdout from program'}, 'i': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-i'}, 'doc': 'Input BED format'}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.stdout_name)'}}}",
    "cwl_hints": "[{'$import': 'bedtools-docker.yml'}, {'$import': 'bedtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bedtools', 'merge']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "The bedtools utilities are a swiss-army knife of tools for a wide-range of genomics analysis tasks",
    "cwl_stdout": "$(inputs.stdout_name)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "bedtools-merge",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://bedtools.readthedocs.io/en/latest/",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/blast/blastn.cwl",
    "sha": "cef2ac94f34444cf4244f01f87ce2ef9f3c32ca6",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/blast/blastn.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: BlastN\ndoc: NCBI BlastN Nucleotide-Nucleotide BLAST\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: |\n      ${\n                return inputs.num_threads ? inputs.num_threads : 1\n        }\n\nhints:\n  - $import: blast-docker.yml\n  - $import: blast-bioconda.yml\n\ninputs:\n  task:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -task\n  dbdir:\n    type: Directory\n  db:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -db\n      valueFrom: ${ return inputs.dbdir.path + \"/\" + self;}\n  query:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -query\n  query_loc:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -query_loc\n  strand:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -strand\n  out:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -out\n  evalue:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -evalue\n  word_size:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -word_size\n  gapopen:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -gapopen\n  gapextend:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -gapextend\n  penalty:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -penalty\n  reward:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -reward\n  use_index:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -use_index\n  index_name:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -index_name\n  subject:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -subject\n  subject_loc:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -subject_loc\n  outfmt:\n    type: string?\n    default: \"6 qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid\"\n    inputBinding:\n      position: 1\n      prefix: -outfmt\n  show_gis:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -show_gis\n  num_descriptions:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_descriptions\n  num_alignments:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_alignments\n  line_length:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -line_length\n  html:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -html\n  sorthits:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -sorthits\n  sorthsps:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -sorthsps\n  dust:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -dust\n  filtering_db:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -filtering_db\n  window_masker_taxid:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -window_masker_taxid\n  window_masker_db:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -window_masker_db\n  soft_masking:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -soft_masking\n  lcase_masking:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -lcase_masking\n  gilist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -gilist\n  seqidlist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -seqidlist\n  negative_gilist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_gilist\n  negative_seqidlist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_seqidlist\n  taxids:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -taxids\n  negative_taxids:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_taxids\n  taxidlist:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -taxidlist\n  negative_taxidlist:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -negative_taxidlist\n  entrez_query:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -entrez_query\n  db_soft_mask:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -db_soft_mask\n  db_hard_mask:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -db_hard_mask\n  perc_identity:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -perc_identity\n  qcov_hsp_perc:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -qcov_hsp_perc\n  max_hsps:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_hsps\n  culling_limit:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -culling_limit\n  best_hit_overhang:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -best_hit_overhang\n  best_hit_score_edge:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -best_hit_score_edge\n  subject_besthit:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -subject_besthit\n  max_target_seqs:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_target_seqs\n  template_type:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -template_type\n  template_length:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -template_length\n  dbsize:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -dbsize\n  searchsp:\n    type: long?\n    inputBinding:\n      position: 1\n      prefix: -searchsp\n  import_search_strategy:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -import_search_strategy\n  export_search_strategy:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -export_search_strategy\n  xdrop_ungap:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_ungap\n  xdrop_gap:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_gap\n  xdrop_gap_final:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_gap_final\n  no_greedy:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -no_greedy\n  min_raw_gapped_score:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -min_raw_gapped_score\n  ungapped:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -ungapped\n  window_size:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -window_size\n  off_diagonal_range:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -off_diagonal_range\n  parse_deflines:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -parse_deflines\n  num_threads:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_threads\n  mt_mode:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -mt_mode\n  remote:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -remote\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n  export_search_strategy_output:\n    type: File?\n    outputBinding:\n      glob: $(inputs.export_search_strategy)\n\nbaseCommand: [\"blastn\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'task': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-task'}}, 'dbdir': {'type': 'Directory'}, 'db': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-db', 'valueFrom': '${ return inputs.dbdir.path + \"/\" + self;}'}}, 'query': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-query'}}, 'query_loc': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-query_loc'}}, 'strand': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-strand'}}, 'out': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-out'}}, 'evalue': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-evalue'}}, 'word_size': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-word_size'}}, 'gapopen': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-gapopen'}}, 'gapextend': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-gapextend'}}, 'penalty': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-penalty'}}, 'reward': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-reward'}}, 'use_index': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-use_index'}}, 'index_name': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-index_name'}}, 'subject': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-subject'}}, 'subject_loc': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-subject_loc'}}, 'outfmt': {'type': 'string?', 'default': '6 qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid', 'inputBinding': {'position': 1, 'prefix': '-outfmt'}}, 'show_gis': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-show_gis'}}, 'num_descriptions': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_descriptions'}}, 'num_alignments': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_alignments'}}, 'line_length': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-line_length'}}, 'html': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-html'}}, 'sorthits': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-sorthits'}}, 'sorthsps': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-sorthsps'}}, 'dust': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-dust'}}, 'filtering_db': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-filtering_db'}}, 'window_masker_taxid': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-window_masker_taxid'}}, 'window_masker_db': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-window_masker_db'}}, 'soft_masking': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-soft_masking'}}, 'lcase_masking': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-lcase_masking'}}, 'gilist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-gilist'}}, 'seqidlist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-seqidlist'}}, 'negative_gilist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_gilist'}}, 'negative_seqidlist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_seqidlist'}}, 'taxids': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-taxids'}}, 'negative_taxids': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_taxids'}}, 'taxidlist': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-taxidlist'}}, 'negative_taxidlist': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-negative_taxidlist'}}, 'entrez_query': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-entrez_query'}}, 'db_soft_mask': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-db_soft_mask'}}, 'db_hard_mask': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-db_hard_mask'}}, 'perc_identity': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-perc_identity'}}, 'qcov_hsp_perc': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-qcov_hsp_perc'}}, 'max_hsps': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_hsps'}}, 'culling_limit': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-culling_limit'}}, 'best_hit_overhang': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-best_hit_overhang'}}, 'best_hit_score_edge': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-best_hit_score_edge'}}, 'subject_besthit': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-subject_besthit'}}, 'max_target_seqs': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_target_seqs'}}, 'template_type': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-template_type'}}, 'template_length': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-template_length'}}, 'dbsize': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-dbsize'}}, 'searchsp': {'type': 'long?', 'inputBinding': {'position': 1, 'prefix': '-searchsp'}}, 'import_search_strategy': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-import_search_strategy'}}, 'export_search_strategy': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-export_search_strategy'}}, 'xdrop_ungap': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_ungap'}}, 'xdrop_gap': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_gap'}}, 'xdrop_gap_final': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_gap_final'}}, 'no_greedy': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-no_greedy'}}, 'min_raw_gapped_score': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-min_raw_gapped_score'}}, 'ungapped': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-ungapped'}}, 'window_size': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-window_size'}}, 'off_diagonal_range': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-off_diagonal_range'}}, 'parse_deflines': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-parse_deflines'}}, 'num_threads': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_threads'}}, 'mt_mode': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-mt_mode'}}, 'remote': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-remote'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}, 'export_search_strategy_output': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.export_search_strategy)'}}}",
    "cwl_hints": "[{'$import': 'blast-docker.yml'}, {'$import': 'blast-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['blastn']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '${\\n          return inputs.num_threads ? inputs.num_threads : 1\\n  }\\n'}}",
    "cwl_doc": "NCBI BlastN Nucleotide-Nucleotide BLAST",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "BlastN",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/blast/blastp.cwl",
    "sha": "501f6d4be49d85d24695d6c0aeeab1cf2b779683",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/blast/blastp.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: BlastP\ndoc: NCBI BlastP Protein-Protein BLAST\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: |\n      ${\n                return inputs.num_threads ? inputs.num_threads : 1\n        }\n\nhints:\n  - $import: blast-docker.yml\n  - $import: blast-bioconda.yml\n\ninputs:\n  task:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -task\n  dbdir:\n    type: Directory\n  db:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -db\n      valueFrom: ${ return inputs.dbdir.path + \"/\" + self;}\n  query:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -query\n  query_loc:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -query_loc\n  out:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -out\n  evalue:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -evalue\n  word_size:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -word_size\n  gapopen:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -gapopen\n  matrix:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -matrix\n  threshold:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -threshold\n  comp_based_stats:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -comp_based_stats\n  subject:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -subject\n  subject_loc:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -subject_loc\n  outfmt:\n    type: string?\n    default: \"6 qseqid sgi saccver evalue bitscore score staxid\"\n    inputBinding:\n      position: 1\n      prefix: -outfmt\n  show_gis:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -show_gis\n  num_descriptions:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_descriptions\n  num_alignments:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_alignments\n  line_length:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -line_length\n  html:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -html\n  sorthits:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -sorthits\n  sorthsps:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -sorthsps\n  seg:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -seg\n  soft_masking:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -soft_masking\n  lcase_masking:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -lcase_masking\n  gilist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -gilist\n  seqidlist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -seqidlist\n  negative_gilist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_gilist\n  negative_seqidlist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_seqidlist\n  taxids:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -taxids\n  negative_taxids:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_taxids\n  taxidlist:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -taxidlist\n  negative_taxidlist:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -negative_taxidlist\n  ipglist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -ipglist\n  negative_ipglist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_ipglist\n  entrez_query:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -entrez_query\n  db_soft_mask:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -db_soft_mask\n  db_hard_mask:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -db_hard_mask\n  qcov_hsp_perc:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -qcov_hsp_perc\n  max_hsps:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_hsps\n  culling_limit:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -culling_limit\n  best_hit_overhang:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -best_hit_overhang\n  best_hit_score_edge:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -best_hit_score_edge\n  subject_besthit:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -subject_besthit\n  max_target_seqs:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_target_seqs\n  dbsize:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -dbsize\n  searchsp:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -searchsp\n  import_search_strategy:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -import_search_strategy\n  export_search_strategy:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -export_search_strategy\n  xdrop_ungap:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_ungap\n  xdrop_gap:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_gap\n  xdrop_gap_final:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_gap_final\n  ungapped:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -ungapped\n  parse_deflines:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -parse_deflines\n  num_threads:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_threads\n  mt_mode:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -mt_mode\n  remote:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -remote\n  use_sw_tback:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -use_sw_tback\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n  export_search_strategy_output:\n    type: File?\n    outputBinding:\n      glob: $(inputs.export_search_strategy)\n\nbaseCommand: [\"blastp\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'task': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-task'}}, 'dbdir': {'type': 'Directory'}, 'db': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-db', 'valueFrom': '${ return inputs.dbdir.path + \"/\" + self;}'}}, 'query': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-query'}}, 'query_loc': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-query_loc'}}, 'out': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-out'}}, 'evalue': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-evalue'}}, 'word_size': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-word_size'}}, 'gapopen': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-gapopen'}}, 'matrix': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-matrix'}}, 'threshold': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-threshold'}}, 'comp_based_stats': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-comp_based_stats'}}, 'subject': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-subject'}}, 'subject_loc': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-subject_loc'}}, 'outfmt': {'type': 'string?', 'default': '6 qseqid sgi saccver evalue bitscore score staxid', 'inputBinding': {'position': 1, 'prefix': '-outfmt'}}, 'show_gis': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-show_gis'}}, 'num_descriptions': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_descriptions'}}, 'num_alignments': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_alignments'}}, 'line_length': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-line_length'}}, 'html': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-html'}}, 'sorthits': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-sorthits'}}, 'sorthsps': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-sorthsps'}}, 'seg': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-seg'}}, 'soft_masking': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-soft_masking'}}, 'lcase_masking': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-lcase_masking'}}, 'gilist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-gilist'}}, 'seqidlist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-seqidlist'}}, 'negative_gilist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_gilist'}}, 'negative_seqidlist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_seqidlist'}}, 'taxids': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-taxids'}}, 'negative_taxids': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_taxids'}}, 'taxidlist': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-taxidlist'}}, 'negative_taxidlist': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-negative_taxidlist'}}, 'ipglist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-ipglist'}}, 'negative_ipglist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_ipglist'}}, 'entrez_query': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-entrez_query'}}, 'db_soft_mask': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-db_soft_mask'}}, 'db_hard_mask': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-db_hard_mask'}}, 'qcov_hsp_perc': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-qcov_hsp_perc'}}, 'max_hsps': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_hsps'}}, 'culling_limit': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-culling_limit'}}, 'best_hit_overhang': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-best_hit_overhang'}}, 'best_hit_score_edge': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-best_hit_score_edge'}}, 'subject_besthit': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-subject_besthit'}}, 'max_target_seqs': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_target_seqs'}}, 'dbsize': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-dbsize'}}, 'searchsp': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-searchsp'}}, 'import_search_strategy': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-import_search_strategy'}}, 'export_search_strategy': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-export_search_strategy'}}, 'xdrop_ungap': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_ungap'}}, 'xdrop_gap': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_gap'}}, 'xdrop_gap_final': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_gap_final'}}, 'ungapped': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-ungapped'}}, 'parse_deflines': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-parse_deflines'}}, 'num_threads': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_threads'}}, 'mt_mode': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-mt_mode'}}, 'remote': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-remote'}}, 'use_sw_tback': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-use_sw_tback'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}, 'export_search_strategy_output': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.export_search_strategy)'}}}",
    "cwl_hints": "[{'$import': 'blast-docker.yml'}, {'$import': 'blast-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['blastp']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '${\\n          return inputs.num_threads ? inputs.num_threads : 1\\n  }\\n'}}",
    "cwl_doc": "NCBI BlastP Protein-Protein BLAST",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "BlastP",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/blast/blastx.cwl",
    "sha": "2d68f9bc093a452cb53160832f69259b9fa32f19",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/blast/blastx.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: BlastX\ndoc: NCBI BlastX Translated Query-Protein Subject BLAST\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: |\n      ${\n                return inputs.num_threads ? inputs.num_threads : 1\n        }\n\nhints:\n  - $import: blast-docker.yml\n  - $import: blast-bioconda.yml\n\ninputs:\n  task:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -task\n  dbdir:\n    type: Directory\n  db:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -db\n      valueFrom: ${ return inputs.dbdir.path + \"/\" + self;}\n  query:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -query\n  query_loc:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -query_loc\n  strand:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -strand\n  query_gencode:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -query_gencode\n  out:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -out\n  evalue:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -evalue\n  word_size:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -word_size\n  gapopen:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -gapopen\n  max_intron_length:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_intron_length\n  matrix:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -matrix\n  threshold:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -threshold\n  comp_based_stats:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -comp_based_stats\n  subject:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -subject\n  subject_loc:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -subject_loc\n  outfmt:\n    type: string?\n    default: \"6 qseqid sgi saccver evalue bitscore score staxid\"\n    inputBinding:\n      position: 1\n      prefix: -outfmt\n  show_gis:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -show_gis\n  num_descriptions:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_descriptions\n  num_alignments:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_alignments\n  line_length:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -line_length\n  html:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -html\n  sorthits:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -sorthits\n  sorthsps:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -sorthsps\n  seg:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -seg\n  soft_masking:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -soft_masking\n  lcase_masking:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -lcase_masking\n  gilist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -gilist\n  seqidlist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -seqidlist\n  negative_gilist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_gilist\n  negative_seqidlist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_seqidlist\n  taxids:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -taxids\n  negative_taxids:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_taxids\n  taxidlist:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -taxidlist\n  negative_taxidlist:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -negative_taxidlist\n  ipglist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -ipglist\n  negative_ipglist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_ipglist\n  entrez_query:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -entrez_query\n  db_soft_mask:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -db_soft_mask\n  db_hard_mask:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -db_hard_mask\n  qcov_hsp_perc:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -qcov_hsp_perc\n  max_hsps:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_hsps\n  culling_limit:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -culling_limit\n  best_hit_overhang:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -best_hit_overhang\n  best_hit_score_edge:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -best_hit_score_edge\n  subject_besthit:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -subject_besthit\n  max_target_seqs:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_target_seqs\n  dbsize:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -dbsize\n  searchsp:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -searchsp\n  sum_stats:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -sum_stats\n  import_search_strategy:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -import_search_strategy\n  export_search_strategy:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -export_search_strategy\n  xdrop_ungap:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_ungap\n  xdrop_gap:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_gap\n  xdrop_gap_final:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_gap_final\n  ungapped:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -ungapped\n  window_size:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -window_size\n  parse_deflines:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -parse_deflines\n  num_threads:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_threads\n  mt_mode:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -mt_mode\n  remote:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -remote\n  use_sw_tback:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -use_sw_tback\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n  export_search_strategy_output:\n    type: File?\n    outputBinding:\n      glob: $(inputs.export_search_strategy)\n\nbaseCommand: [\"blastx\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'task': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-task'}}, 'dbdir': {'type': 'Directory'}, 'db': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-db', 'valueFrom': '${ return inputs.dbdir.path + \"/\" + self;}'}}, 'query': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-query'}}, 'query_loc': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-query_loc'}}, 'strand': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-strand'}}, 'query_gencode': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-query_gencode'}}, 'out': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-out'}}, 'evalue': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-evalue'}}, 'word_size': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-word_size'}}, 'gapopen': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-gapopen'}}, 'max_intron_length': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_intron_length'}}, 'matrix': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-matrix'}}, 'threshold': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-threshold'}}, 'comp_based_stats': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-comp_based_stats'}}, 'subject': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-subject'}}, 'subject_loc': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-subject_loc'}}, 'outfmt': {'type': 'string?', 'default': '6 qseqid sgi saccver evalue bitscore score staxid', 'inputBinding': {'position': 1, 'prefix': '-outfmt'}}, 'show_gis': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-show_gis'}}, 'num_descriptions': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_descriptions'}}, 'num_alignments': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_alignments'}}, 'line_length': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-line_length'}}, 'html': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-html'}}, 'sorthits': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-sorthits'}}, 'sorthsps': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-sorthsps'}}, 'seg': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-seg'}}, 'soft_masking': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-soft_masking'}}, 'lcase_masking': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-lcase_masking'}}, 'gilist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-gilist'}}, 'seqidlist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-seqidlist'}}, 'negative_gilist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_gilist'}}, 'negative_seqidlist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_seqidlist'}}, 'taxids': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-taxids'}}, 'negative_taxids': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_taxids'}}, 'taxidlist': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-taxidlist'}}, 'negative_taxidlist': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-negative_taxidlist'}}, 'ipglist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-ipglist'}}, 'negative_ipglist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_ipglist'}}, 'entrez_query': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-entrez_query'}}, 'db_soft_mask': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-db_soft_mask'}}, 'db_hard_mask': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-db_hard_mask'}}, 'qcov_hsp_perc': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-qcov_hsp_perc'}}, 'max_hsps': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_hsps'}}, 'culling_limit': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-culling_limit'}}, 'best_hit_overhang': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-best_hit_overhang'}}, 'best_hit_score_edge': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-best_hit_score_edge'}}, 'subject_besthit': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-subject_besthit'}}, 'max_target_seqs': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_target_seqs'}}, 'dbsize': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-dbsize'}}, 'searchsp': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-searchsp'}}, 'sum_stats': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-sum_stats'}}, 'import_search_strategy': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-import_search_strategy'}}, 'export_search_strategy': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-export_search_strategy'}}, 'xdrop_ungap': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_ungap'}}, 'xdrop_gap': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_gap'}}, 'xdrop_gap_final': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_gap_final'}}, 'ungapped': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-ungapped'}}, 'window_size': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-window_size'}}, 'parse_deflines': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-parse_deflines'}}, 'num_threads': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_threads'}}, 'mt_mode': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-mt_mode'}}, 'remote': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-remote'}}, 'use_sw_tback': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-use_sw_tback'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}, 'export_search_strategy_output': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.export_search_strategy)'}}}",
    "cwl_hints": "[{'$import': 'blast-docker.yml'}, {'$import': 'blast-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['blastx']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '${\\n          return inputs.num_threads ? inputs.num_threads : 1\\n  }\\n'}}",
    "cwl_doc": "NCBI BlastX Translated Query-Protein Subject BLAST",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "BlastX",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/blast/makeblastdb.cwl",
    "sha": "463c832f8597b0f38668afaa81e545333a6da95a",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/blast/makeblastdb.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: makeblastdb\ndoc: NCBI makeblastdb\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: blast-docker.yml\n  - $import: blast-bioconda.yml\n\ninputs:\n  in:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -in\n  out:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -out\n  dbtype:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: -dbtype\n  hash_index:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: -hash_index\n  title:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: -title\n  parse_seqids:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: -parse_seqids\n  mask_data:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: -mask_data\n  mask_id:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: -mask_id\n  gi_mask:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: -gi_mask\n  gi_mask_name:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: -gi_mask_name\n  blastdb_version:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: -blastdb_version\n  max_file_sz:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: -max_file_sz\n  logfile:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: -logfile\n  taxid:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: -taxid\n  taxid_map:\n    type: File?\n    inputBinding:\n      position: 5\n      prefix: -taxid_map\n\noutputs:\n  out_db:\n    type: File[]\n    outputBinding:\n      glob: $(inputs.out).*\n  out_log:\n    type: File?\n    outputBinding:\n      glob: $(inputs.logfile)\n\nbaseCommand: [\"makeblastdb\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'in': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-in'}}, 'out': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-out'}}, 'dbtype': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-dbtype'}}, 'hash_index': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '-hash_index'}}, 'title': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '-title'}}, 'parse_seqids': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '-parse_seqids'}}, 'mask_data': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '-mask_data'}}, 'mask_id': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '-mask_id'}}, 'gi_mask': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '-gi_mask'}}, 'gi_mask_name': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '-gi_mask_name'}}, 'blastdb_version': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '-blastdb_version'}}, 'max_file_sz': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '-max_file_sz'}}, 'logfile': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '-logfile'}}, 'taxid': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '-taxid'}}, 'taxid_map': {'type': 'File?', 'inputBinding': {'position': 5, 'prefix': '-taxid_map'}}}",
    "cwl_outputs": "{'out_db': {'type': 'File[]', 'outputBinding': {'glob': '$(inputs.out).*'}}, 'out_log': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.logfile)'}}}",
    "cwl_hints": "[{'$import': 'blast-docker.yml'}, {'$import': 'blast-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['makeblastdb']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "NCBI makeblastdb",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "makeblastdb",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/blast/rpsblast.cwl",
    "sha": "da3744efb4644de556cda795ba143e172b5673c2",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/blast/rpsblast.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: RPS-Blast\ndoc: NCBI RPS-Blast Translated Query-Protein Subject BLAST\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: |\n      ${\n                return inputs.num_threads ? inputs.num_threads : 1\n        }\n\nhints:\n  - $import: blast-docker.yml\n  - $import: blast-bioconda.yml\n\ninputs:\n  dbdir:\n    type: Directory\n  db:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -db\n      valueFrom: ${ return inputs.dbdir.path + \"/\" + self;}\n  query:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -query\n  query_loc:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -query_loc\n  out:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -out\n  evalue:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -evalue\n  comp_based_stats:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -comp_based_stats\n  outfmt:\n    type: string?\n    default: \"6 qseqid sgi saccver evalue bitscore score\"\n    inputBinding:\n      position: 1\n      prefix: -outfmt\n  show_gis:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -show_gis\n  num_descriptions:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_descriptions\n  num_alignments:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_alignments\n  line_length:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -line_length\n  html:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -html\n  sorthits:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -sorthits\n  seg:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -seg\n  soft_masking:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -soft_masking\n  lcase_masking:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -lcase_masking\n  entrez_query:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -entrez_query\n  qcov_hsp_perc:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -qcov_hsp_perc\n  max_hsps:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_hsps\n  culling_limit:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -culling_limit\n  best_hit_overhang:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -best_hit_overhang\n  best_hit_score_edge:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -best_hit_score_edge\n  subject_besthit:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -subject_besthit\n  max_target_seqs:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_target_seqs\n  dbsize:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -dbsize\n  searchsp:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -searchsp\n  sum_stats:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -sum_stats\n  import_search_strategy:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -import_search_strategy\n  export_search_strategy:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -export_search_strategy\n  xdrop_ungap:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_ungap\n  xdrop_gap:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_gap\n  xdrop_gap_final:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_gap_final\n  window_size:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -window_size\n  parse_deflines:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -parse_deflines\n  num_threads:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_threads\n  mt_mode:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -mt_mode\n  remote:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -remote\n  use_sw_tback:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -use_sw_tback\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n  export_search_strategy_output:\n    type: File?\n    outputBinding:\n      glob: $(inputs.export_search_strategy)\n\nbaseCommand: [\"rpsblast\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'dbdir': {'type': 'Directory'}, 'db': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-db', 'valueFrom': '${ return inputs.dbdir.path + \"/\" + self;}'}}, 'query': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-query'}}, 'query_loc': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-query_loc'}}, 'out': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-out'}}, 'evalue': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-evalue'}}, 'comp_based_stats': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-comp_based_stats'}}, 'outfmt': {'type': 'string?', 'default': '6 qseqid sgi saccver evalue bitscore score', 'inputBinding': {'position': 1, 'prefix': '-outfmt'}}, 'show_gis': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-show_gis'}}, 'num_descriptions': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_descriptions'}}, 'num_alignments': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_alignments'}}, 'line_length': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-line_length'}}, 'html': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-html'}}, 'sorthits': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-sorthits'}}, 'seg': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-seg'}}, 'soft_masking': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-soft_masking'}}, 'lcase_masking': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-lcase_masking'}}, 'entrez_query': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-entrez_query'}}, 'qcov_hsp_perc': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-qcov_hsp_perc'}}, 'max_hsps': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_hsps'}}, 'culling_limit': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-culling_limit'}}, 'best_hit_overhang': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-best_hit_overhang'}}, 'best_hit_score_edge': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-best_hit_score_edge'}}, 'subject_besthit': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-subject_besthit'}}, 'max_target_seqs': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_target_seqs'}}, 'dbsize': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-dbsize'}}, 'searchsp': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-searchsp'}}, 'sum_stats': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-sum_stats'}}, 'import_search_strategy': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-import_search_strategy'}}, 'export_search_strategy': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-export_search_strategy'}}, 'xdrop_ungap': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_ungap'}}, 'xdrop_gap': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_gap'}}, 'xdrop_gap_final': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_gap_final'}}, 'window_size': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-window_size'}}, 'parse_deflines': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-parse_deflines'}}, 'num_threads': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_threads'}}, 'mt_mode': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-mt_mode'}}, 'remote': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-remote'}}, 'use_sw_tback': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-use_sw_tback'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}, 'export_search_strategy_output': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.export_search_strategy)'}}}",
    "cwl_hints": "[{'$import': 'blast-docker.yml'}, {'$import': 'blast-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['rpsblast']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '${\\n          return inputs.num_threads ? inputs.num_threads : 1\\n  }\\n'}}",
    "cwl_doc": "NCBI RPS-Blast Translated Query-Protein Subject BLAST",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RPS-Blast",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/blast/rpstblastn.cwl",
    "sha": "ef3b52407e468eb3fc2652a7f7c1c4c54b5ca42e",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/blast/rpstblastn.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: RPST-BlastN\ndoc: NCBI RPST-BlastN Translated Query-Protein Subject BLAST\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: |\n      ${\n                return inputs.num_threads ? inputs.num_threads : 1\n        }\n\nhints:\n  - $import: blast-docker.yml\n  - $import: blast-bioconda.yml\n\ninputs:\n  dbdir:\n    type: Directory\n  db:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -db\n      valueFrom: ${ return inputs.dbdir.path + \"/\" + self;}\n  query:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -query\n  query_loc:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -query_loc\n  out:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -out\n  evalue:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -evalue\n  comp_based_stats:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -comp_based_stats\n  outfmt:\n    type: string?\n    default: \"6 qseqid sgi saccver evalue bitscore score\"\n    inputBinding:\n      position: 1\n      prefix: -outfmt\n  show_gis:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -show_gis\n  num_descriptions:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_descriptions\n  num_alignments:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_alignments\n  line_length:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -line_length\n  html:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -html\n  sorthits:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -sorthits\n  seg:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -seg\n  soft_masking:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -soft_masking\n  lcase_masking:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -lcase_masking\n  entrez_query:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -entrez_query\n  qcov_hsp_perc:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -qcov_hsp_perc\n  max_hsps:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_hsps\n  culling_limit:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -culling_limit\n  best_hit_overhang:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -best_hit_overhang\n  best_hit_score_edge:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -best_hit_score_edge\n  subject_besthit:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -subject_besthit\n  max_target_seqs:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_target_seqs\n  dbsize:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -dbsize\n  searchsp:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -searchsp\n  sum_stats:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -sum_stats\n  import_search_strategy:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -import_search_strategy\n  export_search_strategy:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -export_search_strategy\n  xdrop_ungap:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_ungap\n  xdrop_gap:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_gap\n  xdrop_gap_final:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_gap_final\n  window_size:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -window_size\n  parse_deflines:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -parse_deflines\n  num_threads:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_threads\n  mt_mode:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -mt_mode\n  remote:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -remote\n  use_sw_tback:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -use_sw_tback\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n  export_search_strategy_output:\n    type: File?\n    outputBinding:\n      glob: $(inputs.export_search_strategy)\n\nbaseCommand: [\"rpstblastn\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'dbdir': {'type': 'Directory'}, 'db': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-db', 'valueFrom': '${ return inputs.dbdir.path + \"/\" + self;}'}}, 'query': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-query'}}, 'query_loc': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-query_loc'}}, 'out': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-out'}}, 'evalue': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-evalue'}}, 'comp_based_stats': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-comp_based_stats'}}, 'outfmt': {'type': 'string?', 'default': '6 qseqid sgi saccver evalue bitscore score', 'inputBinding': {'position': 1, 'prefix': '-outfmt'}}, 'show_gis': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-show_gis'}}, 'num_descriptions': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_descriptions'}}, 'num_alignments': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_alignments'}}, 'line_length': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-line_length'}}, 'html': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-html'}}, 'sorthits': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-sorthits'}}, 'seg': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-seg'}}, 'soft_masking': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-soft_masking'}}, 'lcase_masking': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-lcase_masking'}}, 'entrez_query': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-entrez_query'}}, 'qcov_hsp_perc': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-qcov_hsp_perc'}}, 'max_hsps': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_hsps'}}, 'culling_limit': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-culling_limit'}}, 'best_hit_overhang': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-best_hit_overhang'}}, 'best_hit_score_edge': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-best_hit_score_edge'}}, 'subject_besthit': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-subject_besthit'}}, 'max_target_seqs': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_target_seqs'}}, 'dbsize': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-dbsize'}}, 'searchsp': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-searchsp'}}, 'sum_stats': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-sum_stats'}}, 'import_search_strategy': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-import_search_strategy'}}, 'export_search_strategy': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-export_search_strategy'}}, 'xdrop_ungap': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_ungap'}}, 'xdrop_gap': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_gap'}}, 'xdrop_gap_final': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_gap_final'}}, 'window_size': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-window_size'}}, 'parse_deflines': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-parse_deflines'}}, 'num_threads': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_threads'}}, 'mt_mode': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-mt_mode'}}, 'remote': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-remote'}}, 'use_sw_tback': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-use_sw_tback'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}, 'export_search_strategy_output': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.export_search_strategy)'}}}",
    "cwl_hints": "[{'$import': 'blast-docker.yml'}, {'$import': 'blast-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['rpstblastn']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '${\\n          return inputs.num_threads ? inputs.num_threads : 1\\n  }\\n'}}",
    "cwl_doc": "NCBI RPST-BlastN Translated Query-Protein Subject BLAST",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RPST-BlastN",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/blast/tblastn.cwl",
    "sha": "06bf1ee198e3bc84bad6f2192cd400d935c4ba3b",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/blast/tblastn.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: TBlastN\ndoc: NCBI TBlastN Nucleotide-Nucleotide BLAST\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: |\n      ${\n                return inputs.num_threads ? inputs.num_threads : 1\n        }\n\nhints:\n  - $import: blast-docker.yml\n  - $import: blast-bioconda.yml\n\ninputs:\n  task:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -task\n  dbdir:\n    type: Directory\n  db:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -db\n      valueFrom: ${ return inputs.dbdir.path + \"/\" + self;}\n  query:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -query\n  query_loc:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -query_loc\n  out:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -out\n  evalue:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -evalue\n  word_size:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -word_size\n  gapopen:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -gapopen\n  gapextend:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -gapextend\n  db_gencode:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -db_gencode\n  max_intron_length:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_intron_length\n  matrix:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -matrix\n  threshold:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -threshold\n  comp_based_stats:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -comp_based_stats\n  subject:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -subject\n  subject_loc:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -subject_loc\n  outfmt:\n    type: string?\n    default: \"6 qseqid sgi saccver evalue bitscore score staxid\"\n    inputBinding:\n      position: 1\n      prefix: -outfmt\n  show_gis:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -show_gis\n  num_descriptions:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_descriptions\n  num_alignments:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_alignments\n  line_length:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -line_length\n  html:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -html\n  sorthits:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -sorthits\n  sorthsps:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -sorthsps\n  seg:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -seg\n  soft_masking:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -soft_masking\n  lcase_masking:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -lcase_masking\n  gilist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -gilist\n  seqidlist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -seqidlist\n  negative_gilist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_gilist\n  negative_seqidlist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_seqidlist\n  taxids:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -taxids\n  negative_taxids:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_taxids\n  taxidlist:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -taxidlist\n  negative_taxidlist:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -negative_taxidlist\n  entrez_query:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -entrez_query\n  db_soft_mask:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -db_soft_mask\n  db_hard_mask:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -db_hard_mask\n  qcov_hsp_perc:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -qcov_hsp_perc\n  max_hsps:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_hsps\n  culling_limit:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -culling_limit\n  best_hit_overhang:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -best_hit_overhang\n  best_hit_score_edge:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -best_hit_score_edge\n  subject_besthit:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -subject_besthit\n  max_target_seqs:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_target_seqs\n  dbsize:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -dbsize\n  searchsp:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -searchsp\n  sum_stats:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -sum_stats\n  import_search_strategy:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -import_search_strategy\n  export_search_strategy:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -export_search_strategy\n  xdrop_ungap:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_ungap\n  xdrop_gap:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_gap\n  xdrop_gap_final:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -xdrop_gap_final\n  ungapped:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -ungapped\n  window_size:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -window_size\n  num_threads:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_threads\n  mt_mode:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -mt_mode\n  remote:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -remote\n  use_sw_tback:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -use_sw_tback\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n\nbaseCommand: [\"tblastn\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'task': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-task'}}, 'dbdir': {'type': 'Directory'}, 'db': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-db', 'valueFrom': '${ return inputs.dbdir.path + \"/\" + self;}'}}, 'query': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-query'}}, 'query_loc': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-query_loc'}}, 'out': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-out'}}, 'evalue': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-evalue'}}, 'word_size': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-word_size'}}, 'gapopen': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-gapopen'}}, 'gapextend': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-gapextend'}}, 'db_gencode': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-db_gencode'}}, 'max_intron_length': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_intron_length'}}, 'matrix': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-matrix'}}, 'threshold': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-threshold'}}, 'comp_based_stats': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-comp_based_stats'}}, 'subject': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-subject'}}, 'subject_loc': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-subject_loc'}}, 'outfmt': {'type': 'string?', 'default': '6 qseqid sgi saccver evalue bitscore score staxid', 'inputBinding': {'position': 1, 'prefix': '-outfmt'}}, 'show_gis': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-show_gis'}}, 'num_descriptions': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_descriptions'}}, 'num_alignments': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_alignments'}}, 'line_length': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-line_length'}}, 'html': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-html'}}, 'sorthits': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-sorthits'}}, 'sorthsps': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-sorthsps'}}, 'seg': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-seg'}}, 'soft_masking': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-soft_masking'}}, 'lcase_masking': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-lcase_masking'}}, 'gilist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-gilist'}}, 'seqidlist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-seqidlist'}}, 'negative_gilist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_gilist'}}, 'negative_seqidlist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_seqidlist'}}, 'taxids': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-taxids'}}, 'negative_taxids': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_taxids'}}, 'taxidlist': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-taxidlist'}}, 'negative_taxidlist': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-negative_taxidlist'}}, 'entrez_query': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-entrez_query'}}, 'db_soft_mask': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-db_soft_mask'}}, 'db_hard_mask': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-db_hard_mask'}}, 'qcov_hsp_perc': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-qcov_hsp_perc'}}, 'max_hsps': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_hsps'}}, 'culling_limit': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-culling_limit'}}, 'best_hit_overhang': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-best_hit_overhang'}}, 'best_hit_score_edge': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-best_hit_score_edge'}}, 'subject_besthit': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-subject_besthit'}}, 'max_target_seqs': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_target_seqs'}}, 'dbsize': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-dbsize'}}, 'searchsp': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-searchsp'}}, 'sum_stats': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-sum_stats'}}, 'import_search_strategy': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-import_search_strategy'}}, 'export_search_strategy': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-export_search_strategy'}}, 'xdrop_ungap': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_ungap'}}, 'xdrop_gap': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_gap'}}, 'xdrop_gap_final': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-xdrop_gap_final'}}, 'ungapped': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-ungapped'}}, 'window_size': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-window_size'}}, 'num_threads': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_threads'}}, 'mt_mode': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-mt_mode'}}, 'remote': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-remote'}}, 'use_sw_tback': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-use_sw_tback'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}}",
    "cwl_hints": "[{'$import': 'blast-docker.yml'}, {'$import': 'blast-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['tblastn']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '${\\n          return inputs.num_threads ? inputs.num_threads : 1\\n  }\\n'}}",
    "cwl_doc": "NCBI TBlastN Nucleotide-Nucleotide BLAST",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "TBlastN",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/blast/update_blastdb.cwl",
    "sha": "f3f447c81dbe22634f5517757fb4843b3db4b006",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/blast/update_blastdb.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: BlastN\ndoc: NCBI BlastN Nucleotide-Nucleotide BLAST\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: blast-docker.yml\n  - $import: blast-bioconda.yml\n\ninputs:\n  decompress:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --decompress\n  showall:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --showall\n  blastdb_version:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: --blastdb_version\n  passive:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --passive\n  timeout:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: --timeout\n  force:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --force\n  verbose:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --verbose\n  quiet:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --quiet\n  version:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --version\n  source:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --source\n  blastdb:\n    type: string\n    inputBinding:\n      position: 3\n\noutputs:\n  output:\n    type: File[]\n    outputBinding:\n      glob: $(inputs.blastdb)*\n\nbaseCommand: [\"update_blastdb.pl\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'decompress': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--decompress'}}, 'showall': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--showall'}}, 'blastdb_version': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--blastdb_version'}}, 'passive': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--passive'}}, 'timeout': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--timeout'}}, 'force': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--force'}}, 'verbose': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--verbose'}}, 'quiet': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--quiet'}}, 'version': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--version'}}, 'source': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--source'}}, 'blastdb': {'type': 'string', 'inputBinding': {'position': 3}}}",
    "cwl_outputs": "{'output': {'type': 'File[]', 'outputBinding': {'glob': '$(inputs.blastdb)*'}}}",
    "cwl_hints": "[{'$import': 'blast-docker.yml'}, {'$import': 'blast-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['update_blastdb.pl']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "NCBI BlastN Nucleotide-Nucleotide BLAST",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "BlastN",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/bowtie/bowtie2-build.cwl",
    "sha": "e1860b6dc21fcf2a86811c2757e07109f0a96116",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/bowtie/bowtie2-build.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: bowtie2-build\ndoc: Bowtie2 build\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference)\n\nhints:\n  - $import: bowtie2-docker.yml\n  - $import: bowtie2-bioconda.yml\n\ninputs:\n  reference:\n    type: File\n    inputBinding:\n      position: 2\n    doc: |\n      Reference file\n  base:\n    type: string\n    inputBinding:\n      position: 3\n    doc: |\n      Base name\n  large_index:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --large-index\n  threads:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: --threads\n\noutputs:\n  output:\n    type: File\n    secondaryFiles:\n      - .1.bt2\n      - .2.bt2\n      - .3.bt2\n      - .4.bt2\n      - .rev.1.bt2\n      - .rev.2.bt2\n    outputBinding:\n      glob: $(inputs.base)\n\nbaseCommand: [\"bowtie2-build\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://bowtie-bio.sourceforge.net/index.shtml\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference': {'type': 'File', 'inputBinding': {'position': 2}, 'doc': 'Reference file\\n'}, 'base': {'type': 'string', 'inputBinding': {'position': 3}, 'doc': 'Base name\\n'}, 'large_index': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--large-index'}}, 'threads': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--threads'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'secondaryFiles': ['.1.bt2', '.2.bt2', '.3.bt2', '.4.bt2', '.rev.1.bt2', '.rev.2.bt2'], 'outputBinding': {'glob': '$(inputs.base)'}}}",
    "cwl_hints": "[{'$import': 'bowtie2-docker.yml'}, {'$import': 'bowtie2-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2-build']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.reference)']}}",
    "cwl_doc": "Bowtie2 build",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "bowtie2-build",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://bowtie-bio.sourceforge.net/index.shtml",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/bowtie/bowtie2.cwl",
    "sha": "c181131df1ae5731ba7d77d0488845711cb3b7ad",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/bowtie/bowtie2.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: bowtie2\ndoc: Bowtie2 alignment\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.p)\n\nhints:\n  - $import: bowtie2-docker.yml\n  - $import: bowtie2-bioconda.yml\n\ninputs:\n  all:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --all\n  best:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --best\n  m:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -m\n  p:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -p\n  q:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -q\n  no_unal:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --no-unal\n  k:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -k\n  very_sensitive:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --very-sensitive\n  very_fast:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --very-fast\n  fast:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --fast\n  sensitive:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --sensitive\n  very_fast_local:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --very-fast-local\n  fast_local:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --fast-local\n  sensitive_local:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --sensitive-local\n  very_sensitive_local:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --very-sensitive-local\n  x:\n    type: File\n    secondaryFiles:\n      - .1.bt2\n      - .2.bt2\n      - .3.bt2\n      - .4.bt2\n      - .rev.1.bt2\n      - .rev.2.bt2\n    inputBinding:\n      position: 2\n      prefix: -x\n  fastq1:\n    type: File\n    inputBinding:\n      position: 3\n      shellQuote: false\n      valueFrom: |\n        ${\n          if (!inputs.fastq2){\n            return \"-U \" + self.path;\n          }\n          return \"-1 \" + self.path;\n        }\n  fastq2:\n    type: File?\n    inputBinding:\n      position: 4\n      prefix: \"-2\"\n\n\noutputs:\n  output:\n    type: stdout\n\nstdout: |\n  ${\n    var nameroot = inputs.fastq1.nameroot;\n    if (nameroot.endsWith(\".fastq\")){\n      nameroot = nameroot.replace(\".fastq\", \"\");\n    }else if (nameroot.endsWith(\".fq\")){\n      nameroot = nameroot.replace(\".fq\", \"\");\n    }\n    if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n      nameroot = nameroot.slice(0, -2);\n    }else if (nameroot.includes(\"_R1_\")){\n      nameroot = nameroot.substring(1, nameroot.indexOf(\"_R1_\"))\n    }else if (nameroot.includes(\"_R2_\")){\n      nameroot = nameroot.substring(1, nameroot.indexOf(\"_R2_\"))\n    }\n    return nameroot + '.sam';\n  }\n\nbaseCommand: [\"bowtie2\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://bowtie-bio.sourceforge.net/index.shtml\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'all': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--all'}}, 'best': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--best'}}, 'm': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-m'}}, 'p': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-p'}}, 'q': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-q'}}, 'no_unal': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--no-unal'}}, 'k': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-k'}}, 'very_sensitive': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--very-sensitive'}}, 'very_fast': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--very-fast'}}, 'fast': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--fast'}}, 'sensitive': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--sensitive'}}, 'very_fast_local': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--very-fast-local'}}, 'fast_local': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--fast-local'}}, 'sensitive_local': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--sensitive-local'}}, 'very_sensitive_local': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--very-sensitive-local'}}, 'x': {'type': 'File', 'secondaryFiles': ['.1.bt2', '.2.bt2', '.3.bt2', '.4.bt2', '.rev.1.bt2', '.rev.2.bt2'], 'inputBinding': {'position': 2, 'prefix': '-x'}}, 'fastq1': {'type': 'File', 'inputBinding': {'position': 3, 'shellQuote': False, 'valueFrom': '${\\n  if (!inputs.fastq2){\\n    return \"-U \" + self.path;\\n  }\\n  return \"-1 \" + self.path;\\n}\\n'}}, 'fastq2': {'type': 'File?', 'inputBinding': {'position': 4, 'prefix': '-2'}}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'bowtie2-docker.yml'}, {'$import': 'bowtie2-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ShellCommandRequirement': {}, 'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.p)'}}",
    "cwl_doc": "Bowtie2 alignment",
    "cwl_stdout": "${\n  var nameroot = inputs.fastq1.nameroot;\n  if (nameroot.endsWith(\".fastq\")){\n    nameroot = nameroot.replace(\".fastq\", \"\");\n  }else if (nameroot.endsWith(\".fq\")){\n    nameroot = nameroot.replace(\".fq\", \"\");\n  }\n  if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n    nameroot = nameroot.slice(0, -2);\n  }else if (nameroot.includes(\"_R1_\")){\n    nameroot = nameroot.substring(1, nameroot.indexOf(\"_R1_\"))\n  }else if (nameroot.includes(\"_R2_\")){\n    nameroot = nameroot.substring(1, nameroot.indexOf(\"_R2_\"))\n  }\n  return nameroot + '.sam';\n}\n",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "bowtie2",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://bowtie-bio.sourceforge.net/index.shtml",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/busco/busco.cwl",
    "sha": "1acd3797f1b3ac534cfb2b405559f9a6758c7f68",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/busco/busco.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: BUSCO\ndoc: BUSCO provides measures for quantitative assessment of genome assembly\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: |\n      ${\n                return inputs.cpu ? inputs.cpu : 1\n        }\n\nhints:\n  - $import: busco-docker.yml\n  - $import: busco-bioconda.yml\n\ninputs:\n  i:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -i\n  o:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -o\n  m:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: -m\n  l:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: -l\n  auto_lineage:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: --auto-lineage\n  cpu:\n    type: int?\n    default: 1\n    inputBinding:\n      position: 4\n      prefix: --cpu\n\noutputs:\n  output:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.o)\n\nbaseCommand: [\"busco\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'i': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-i'}}, 'o': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-o'}}, 'm': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-m'}}, 'l': {'type': 'string?', 'inputBinding': {'position': 4, 'prefix': '-l'}}, 'auto_lineage': {'type': 'string?', 'inputBinding': {'position': 4, 'prefix': '--auto-lineage'}}, 'cpu': {'type': 'int?', 'default': 1, 'inputBinding': {'position': 4, 'prefix': '--cpu'}}}",
    "cwl_outputs": "{'output': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.o)'}}}",
    "cwl_hints": "[{'$import': 'busco-docker.yml'}, {'$import': 'busco-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['busco']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '${\\n          return inputs.cpu ? inputs.cpu : 1\\n  }\\n'}}",
    "cwl_doc": "BUSCO provides measures for quantitative assessment of genome assembly",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "BUSCO",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/bwa/bwa-aln.cwl",
    "sha": "876a59dcf83395a43fd7cb85e0cfcb643d9ca2c0",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/bwa/bwa-aln.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: bwa-Aln\ndoc: bwa is a software package for mapping DNA sequences against a large reference genome\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: bwa-docker.yml\n  - $import: bwa-bioconda.yml\n\ninputs:\n  e:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -e\n    doc: |\n      maximum number of gap extensions, -1 for disabling long gaps [-1]\n  d:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -d\n    doc: |\n      maximum occurrences for extending a long deletion [10]\n  i:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -i\n    doc: |\n      do not put an indel within INT bp towards the ends [5]\n  k:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -k\n    doc: |\n      maximum differences in the seed [2]\n  m:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -m\n    doc: |\n      maximum entries in the queue [2000000]\n  l:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -l\n    doc: |\n      seed length [32]\n  o:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -o\n    doc: |\n      maximum number or fraction of gap opens [1]\n  n:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -n\n    doc: |\n      max #diff (int) or missing prob under 0.02 err rate (float) [0.04]\n  I:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -I\n    doc: |\n      the input is in the Illumina 1.3+ FASTQ-like format\n  prefix:\n    type: string\n    inputBinding:\n      position: 4\n      valueFrom: |\n        ${\n          return inputs.index.path + \"/\" + self;\n        }\n  index:\n    type: Directory\n  t:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -t\n  f:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -f\n  input:\n    type: File\n    inputBinding:\n      position: 5\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.f)\n\nbaseCommand: [\"bwa\", \"aln\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/lh3/bwa\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'e': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-e'}, 'doc': 'maximum number of gap extensions, -1 for disabling long gaps [-1]\\n'}, 'd': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-d'}, 'doc': 'maximum occurrences for extending a long deletion [10]\\n'}, 'i': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-i'}, 'doc': 'do not put an indel within INT bp towards the ends [5]\\n'}, 'k': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-k'}, 'doc': 'maximum differences in the seed [2]\\n'}, 'm': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-m'}, 'doc': 'maximum entries in the queue [2000000]\\n'}, 'l': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-l'}, 'doc': 'seed length [32]\\n'}, 'o': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-o'}, 'doc': 'maximum number or fraction of gap opens [1]\\n'}, 'n': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-n'}, 'doc': 'max #diff (int) or missing prob under 0.02 err rate (float) [0.04]\\n'}, 'I': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-I'}, 'doc': 'the input is in the Illumina 1.3+ FASTQ-like format\\n'}, 'prefix': {'type': 'string', 'inputBinding': {'position': 4, 'valueFrom': '${\\n  return inputs.index.path + \"/\" + self;\\n}\\n'}}, 'index': {'type': 'Directory'}, 't': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-t'}}, 'f': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-f'}}, 'input': {'type': 'File', 'inputBinding': {'position': 5}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.f)'}}}",
    "cwl_hints": "[{'$import': 'bwa-docker.yml'}, {'$import': 'bwa-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'aln']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "bwa is a software package for mapping DNA sequences against a large reference genome",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "bwa-Aln",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/lh3/bwa",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/bwa/bwa-index.cwl",
    "sha": "2f76056fb18755285df0ea3f5c334ae55f95604d",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/bwa/bwa-index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: bwa-index\ndoc: bwa is a software package for mapping DNA sequences against a large reference genome\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing: [ $(inputs.sequences) ]\n\nhints:\n  - $import: bwa-docker.yml\n  - $import: bwa-bioconda.yml\n\ninputs:\n  a:\n    type: string?\n    inputBinding:\n      prefix: -a\n    doc: |\n      BWT construction algorithm: bwtsw or is (Default: auto)\n  sequences:\n    type: File\n    inputBinding:\n      valueFrom: $(self.basename)\n      position: 4\n  b:\n    type: int?\n    inputBinding:\n\n      prefix: -b\n    doc: |\n      Block size for the bwtsw algorithm (effective with -a bwtsw) (Default: 10000000)\n\noutputs:\n  output:\n    type: File\n    secondaryFiles:\n      - .amb\n      - .ann\n      - .bwt\n      - .pac\n      - .sa\n    outputBinding:\n      glob: $(inputs.sequences.basename)\n\nbaseCommand: [\"bwa\", \"index\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/lh3/bwa\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'a': {'type': 'string?', 'inputBinding': {'prefix': '-a'}, 'doc': 'BWT construction algorithm: bwtsw or is (Default: auto)\\n'}, 'sequences': {'type': 'File', 'inputBinding': {'valueFrom': '$(self.basename)', 'position': 4}}, 'b': {'type': 'int?', 'inputBinding': {'prefix': '-b'}, 'doc': 'Block size for the bwtsw algorithm (effective with -a bwtsw) (Default: 10000000)\\n'}}",
    "cwl_outputs": "{'output': {'type': 'File', 'secondaryFiles': ['.amb', '.ann', '.bwt', '.pac', '.sa'], 'outputBinding': {'glob': '$(inputs.sequences.basename)'}}}",
    "cwl_hints": "[{'$import': 'bwa-docker.yml'}, {'$import': 'bwa-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'index']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.sequences)']}}",
    "cwl_doc": "bwa is a software package for mapping DNA sequences against a large reference genome",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "bwa-index",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/lh3/bwa",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/bwa/bwa-mem.cwl",
    "sha": "c26d17d65370cf5e538ab5ba46d16a8bd1153725",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/bwa/bwa-mem.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: bwa-mem\ndoc: >-\n  BWA is a software package for mapping DNA sequences against a large reference\n  genome\n\nhints:\n  - $import: bwa-docker.yml\n  - $import: bwa-bioconda.yml\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.t)\n    ramMin: 10240\n\ninputs:\n  M:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: '-M'\n  A:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '-A'\n      separate: false\n  B:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '-B'\n      separate: false\n  E:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '-E'\n      separate: false\n  L:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '-L'\n      separate: false\n  T:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '-T'\n  K:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '-K'\n  Y:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: '-Y'\n  R:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: '-R'\n  a:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: '-a'\n  S:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: '-S'\n  P:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: '-P'\n  five:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: '-5'\n  index:\n    type: Directory\n  reads:\n    type: File[]\n    inputBinding:\n      position: 5\n  prefix:\n    type: string\n    inputBinding:\n      position: 4\n      valueFrom: |\n        ${\n          return inputs.index.path + \"/\" + self;\n        }\n  t:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '-t'\n\noutputs:\n  out_stdout:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n          var nameroot = inputs.reads[0].nameroot;\n          if (nameroot.endsWith(\".fastq\")){\n            nameroot = nameroot.replace(\".fastq\", \"\");\n          }else if (nameroot.endsWith(\".fq\")){\n            nameroot = nameroot.replace(\".fq\", \"\");\n          }\n          if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n            nameroot = nameroot.slice(0, -2);\n          }else if (nameroot.includes(\"_R1_\")){\n            nameroot = nameroot.substring(0, nameroot.indexOf(\"_R1_\"))\n          }else if (nameroot.includes(\"_R2_\")){\n            nameroot = nameroot.substring(0, nameroot.indexOf(\"_R2_\"))\n          }\n          return nameroot + '.sam';\n        }\n\nstdout: |\n  ${\n    var nameroot = inputs.reads[0].nameroot;\n    if (nameroot.endsWith(\".fastq\")){\n      nameroot = nameroot.replace(\".fastq\", \"\");\n    }else if (nameroot.endsWith(\".fq\")){\n      nameroot = nameroot.replace(\".fq\", \"\");\n    }\n    if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n      nameroot = nameroot.slice(0, -2);\n    }else if (nameroot.includes(\"_R1_\")){\n      nameroot = nameroot.substring(0, nameroot.indexOf(\"_R1_\"))\n    }else if (nameroot.includes(\"_R2_\")){\n      nameroot = nameroot.substring(0, nameroot.indexOf(\"_R2_\"))\n    }\n    return nameroot + '.sam';\n  }\n\nbaseCommand: [bwa, mem]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'M': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-M'}}, 'A': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-A', 'separate': False}}, 'B': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-B', 'separate': False}}, 'E': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-E', 'separate': False}}, 'L': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-L', 'separate': False}}, 'T': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-T'}}, 'K': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-K'}}, 'Y': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-Y'}}, 'R': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-R'}}, 'a': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-a'}}, 'S': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-S'}}, 'P': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-P'}}, 'five': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-5'}}, 'index': {'type': 'Directory'}, 'reads': {'type': 'File[]', 'inputBinding': {'position': 5}}, 'prefix': {'type': 'string', 'inputBinding': {'position': 4, 'valueFrom': '${\\n  return inputs.index.path + \"/\" + self;\\n}\\n'}}, 't': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-t'}}}",
    "cwl_outputs": "{'out_stdout': {'type': 'File', 'outputBinding': {'glob': '${\\n  var nameroot = inputs.reads[0].nameroot;\\n  if (nameroot.endsWith(\".fastq\")){\\n    nameroot = nameroot.replace(\".fastq\", \"\");\\n  }else if (nameroot.endsWith(\".fq\")){\\n    nameroot = nameroot.replace(\".fq\", \"\");\\n  }\\n  if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\\n    nameroot = nameroot.slice(0, -2);\\n  }else if (nameroot.includes(\"_R1_\")){\\n    nameroot = nameroot.substring(0, nameroot.indexOf(\"_R1_\"))\\n  }else if (nameroot.includes(\"_R2_\")){\\n    nameroot = nameroot.substring(0, nameroot.indexOf(\"_R2_\"))\\n  }\\n  return nameroot + \\'.sam\\';\\n}\\n'}}}",
    "cwl_hints": "[{'$import': 'bwa-docker.yml'}, {'$import': 'bwa-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'mem']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.t)', 'ramMin': 10240}}",
    "cwl_doc": "BWA is a software package for mapping DNA sequences against a large reference genome",
    "cwl_stdout": "${\n  var nameroot = inputs.reads[0].nameroot;\n  if (nameroot.endsWith(\".fastq\")){\n    nameroot = nameroot.replace(\".fastq\", \"\");\n  }else if (nameroot.endsWith(\".fq\")){\n    nameroot = nameroot.replace(\".fq\", \"\");\n  }\n  if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n    nameroot = nameroot.slice(0, -2);\n  }else if (nameroot.includes(\"_R1_\")){\n    nameroot = nameroot.substring(0, nameroot.indexOf(\"_R1_\"))\n  }else if (nameroot.includes(\"_R2_\")){\n    nameroot = nameroot.substring(0, nameroot.indexOf(\"_R2_\"))\n  }\n  return nameroot + '.sam';\n}\n",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "bwa-mem",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/bwa/bwa-samse.cwl",
    "sha": "0a9f4f2c55cfa3cd5c43d31d0d953b2261af7608",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/bwa/bwa-samse.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: bwa-samse\ndoc: bwa is a software package for mapping DNA sequences against a large reference genome\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: bwa-docker.yml\n  - $import: bwa-bioconda.yml\n\ninputs:\n  f:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -f\n  prefix:\n    type: string\n    inputBinding:\n      position: 2\n      valueFrom: |\n        ${\n          return inputs.index.path + \"/\" + self;\n        }\n  index:\n    type: Directory\n  sai:\n    type: File\n    inputBinding:\n      position: 3\n  fastq:\n    type: File\n    inputBinding:\n      position: 4\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.output_filename)\n\nbaseCommand: [\"bwa\", \"samse\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/lh3/bwa\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'f': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-f'}}, 'prefix': {'type': 'string', 'inputBinding': {'position': 2, 'valueFrom': '${\\n  return inputs.index.path + \"/\" + self;\\n}\\n'}}, 'index': {'type': 'Directory'}, 'sai': {'type': 'File', 'inputBinding': {'position': 3}}, 'fastq': {'type': 'File', 'inputBinding': {'position': 4}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.output_filename)'}}}",
    "cwl_hints": "[{'$import': 'bwa-docker.yml'}, {'$import': 'bwa-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'samse']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "bwa is a software package for mapping DNA sequences against a large reference genome",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "bwa-samse",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/lh3/bwa",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/cLoops/cloops.cwl",
    "sha": "8a8bef49ddec3328962f44ef537463559af8ea11",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/cLoops/cloops.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: cLoops\ndoc: Loop-calling for ChIA-PET, Hi-C, HiChIP and Trac-looping\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: cloops.yml\n\ninputs:\n  f:\n    type: File[]\n    inputBinding:\n      position: 1\n      prefix: -f\n      itemSeparator: ','\n  o:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -o\n  m:\n    type: int\n    inputBinding:\n      position: 3\n      prefix: -m\n  eps:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: -eps\n  minPts:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: -minPts\n  p:\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: -p\n  c:\n    type: string?\n    inputBinding:\n      position: 7\n      prefix: -c\n  w:\n    type: boolean?\n    inputBinding:\n      position: 8\n      prefix: -w\n  j:\n    type: boolean?\n    inputBinding:\n      position: 9\n      prefix: -j\n  s:\n    type: boolean?\n    inputBinding:\n      position: 10\n      prefix: -s\n  hic:\n    type: boolean?\n    inputBinding:\n      position: 11\n      prefix: -hic\n  cut:\n    type: int?\n    inputBinding:\n      position: 12\n      prefix: -cut\n  max_cut:\n    type: int?\n    inputBinding:\n      position: 12\n      prefix: -max_cut\n  plot:\n    type: boolean?\n    inputBinding:\n      position: 11\n      prefix: -plot\n\noutputs:\n  out:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.o)\n  dis_cutoff:\n    typp: File[]?\n    outputBinding:\n      glob: $(inputs.o)*.pdf\n  loop:\n    type: File?\n    outputBinding:\n      glob: $(inputs.o).loop\n  juicer:\n    type: File?\n    outputBinding:\n      glob: $(inputs.o)_loops_juicebox.txt\n  washU:\n    type: File?\n    outputBinding:\n      glob: $(inputs.o)_loops_washU.txt\n\nbaseCommand: [\"cLoops\"]\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'f': {'type': 'File[]', 'inputBinding': {'position': 1, 'prefix': '-f', 'itemSeparator': ','}}, 'o': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-o'}}, 'm': {'type': 'int', 'inputBinding': {'position': 3, 'prefix': '-m'}}, 'eps': {'type': 'string?', 'inputBinding': {'position': 4, 'prefix': '-eps'}}, 'minPts': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '-minPts'}}, 'p': {'type': 'int?', 'inputBinding': {'position': 6, 'prefix': '-p'}}, 'c': {'type': 'string?', 'inputBinding': {'position': 7, 'prefix': '-c'}}, 'w': {'type': 'boolean?', 'inputBinding': {'position': 8, 'prefix': '-w'}}, 'j': {'type': 'boolean?', 'inputBinding': {'position': 9, 'prefix': '-j'}}, 's': {'type': 'boolean?', 'inputBinding': {'position': 10, 'prefix': '-s'}}, 'hic': {'type': 'boolean?', 'inputBinding': {'position': 11, 'prefix': '-hic'}}, 'cut': {'type': 'int?', 'inputBinding': {'position': 12, 'prefix': '-cut'}}, 'max_cut': {'type': 'int?', 'inputBinding': {'position': 12, 'prefix': '-max_cut'}}, 'plot': {'type': 'boolean?', 'inputBinding': {'position': 11, 'prefix': '-plot'}}}",
    "cwl_outputs": "{'out': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.o)'}}, 'dis_cutoff': {'typp': 'File[]?', 'outputBinding': {'glob': '$(inputs.o)*.pdf'}}, 'loop': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.o).loop'}}, 'juicer': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.o)_loops_juicebox.txt'}}, 'washU': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.o)_loops_washU.txt'}}}",
    "cwl_hints": "[{'$import': 'cloops.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cLoops']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Loop-calling for ChIA-PET, Hi-C, HiChIP and Trac-looping",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "cLoops",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/cd-hit/cd-hit.cwl",
    "sha": "02837b92cdb8e129e65fb7cf0e1c4cc40215392e",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/cd-hit/cd-hit.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: cd-hit\ndoc: cd-hit for clustering sequences\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.T)\nhints:\n  - $import: cd-hit-docker.yml\n  - $import: cd-hit-bioconda.yml\n\ninputs:\n  T:\n    type: int\n    inputBinding:\n      position: 1\n      prefix: '-T'\n  i:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: '-i'\n  o:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: '-o'\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n  clstr:\n    type: File\n    outputBinding:\n      glob: $(inputs.o).clstr\n\nbaseCommand: [cd-hit]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'T': {'type': 'int', 'inputBinding': {'position': 1, 'prefix': '-T'}}, 'i': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-i'}}, 'o': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-o'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}, 'clstr': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o).clstr'}}}",
    "cwl_hints": "[{'$import': 'cd-hit-docker.yml'}, {'$import': 'cd-hit-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cd-hit']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.T)'}}",
    "cwl_doc": "cd-hit for clustering sequences",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "cd-hit",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/chromhmm/chromhmm-binarizebed.cwl",
    "sha": "327007c811466611e96fc5c6cb293c946ffe0b80",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/chromhmm/chromhmm-binarizebed.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: ChromHMM-BinarizeBed\ndoc: Chromatin state discovery and characterization\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: chromhmm-docker.yml\n  - $import: chromhmm-bioconda.yml\n\ninputs:\n  paired:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -paired\n    doc: |\n      If this option is present then reads in the BAM file are treated as pairs\n  chromsize:\n    type: File\n    inputBinding:\n      position: 2\n    doc: |\n      ChromHMM genome size\n  input:\n    type: Directory\n    inputBinding:\n      position: 3\n    doc: |\n      Input directory\n  cellmarkfiletable:\n    type: File\n    inputBinding:\n      position: 4\n    doc: |\n      cellmarkfiletable file\n  output_dir:\n    type: string\n    inputBinding:\n      position: 5\n\noutputs:\n  output:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.output_dir)\n\nbaseCommand: [ChromHMM.sh, BinarizeBed]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://compbio.mit.edu/ChromHMM/\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'paired': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-paired'}, 'doc': 'If this option is present then reads in the BAM file are treated as pairs\\n'}, 'chromsize': {'type': 'File', 'inputBinding': {'position': 2}, 'doc': 'ChromHMM genome size\\n'}, 'input': {'type': 'Directory', 'inputBinding': {'position': 3}, 'doc': 'Input directory\\n'}, 'cellmarkfiletable': {'type': 'File', 'inputBinding': {'position': 4}, 'doc': 'cellmarkfiletable file\\n'}, 'output_dir': {'type': 'string', 'inputBinding': {'position': 5}}}",
    "cwl_outputs": "{'output': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.output_dir)'}}}",
    "cwl_hints": "[{'$import': 'chromhmm-docker.yml'}, {'$import': 'chromhmm-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ChromHMM.sh', 'BinarizeBed']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Chromatin state discovery and characterization",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ChromHMM-BinarizeBed",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://compbio.mit.edu/ChromHMM/",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/chromhmm/chromhmm-learnmodel.cwl",
    "sha": "2d9a6a9f845d81a1c5fc433e6b3f93e56a5dcbe0",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/chromhmm/chromhmm-learnmodel.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: ChromHMM-LearnModel\ndoc: Chromatin state discovery and characterization\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: chromhmm-docker.yml\n  - $import: chromhmm-bioconda.yml\n\ninputs:\n  input:\n    type: Directory\n    inputBinding:\n      position: 1\n    doc: |\n      Input directory\n  output_dir:\n    type: string\n    inputBinding:\n      position: 2\n  numstates:\n    type: int\n    inputBinding:\n      position: 3\n  assembly:\n    type: string\n\noutputs:\n  output:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.output_dir)\n\nbaseCommand: [\"java\", \"-mx16000M\", \"/usr/local/share/chromhmm-1.15-0/ChromHMM.jar\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://compbio.mit.edu/ChromHMM/\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'input': {'type': 'Directory', 'inputBinding': {'position': 1}, 'doc': 'Input directory\\n'}, 'output_dir': {'type': 'string', 'inputBinding': {'position': 2}}, 'numstates': {'type': 'int', 'inputBinding': {'position': 3}}, 'assembly': {'type': 'string'}}",
    "cwl_outputs": "{'output': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.output_dir)'}}}",
    "cwl_hints": "[{'$import': 'chromhmm-docker.yml'}, {'$import': 'chromhmm-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['java', '-mx16000M', '/usr/local/share/chromhmm-1.15-0/ChromHMM.jar']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Chromatin state discovery and characterization",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ChromHMM-LearnModel",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://compbio.mit.edu/ChromHMM/",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/circexplorer/circexplorer2-annotate.cwl",
    "sha": "31edbb85f9117854fabaa474d6ede33b6f2d13e5",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/circexplorer/circexplorer2-annotate.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: circexplorer2-annotate\ndoc: circexplorer2 is a software package Circular RNA analysis\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: circexplorer2-docker.yml\n  - $import: circexplorer2-bioconda.yml\n\ninputs:\n  r:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -r\n    doc: |\n      Genome reference file\n  g:\n    type: File\n    secondaryFiles: .fai\n    inputBinding:\n      position: 2\n      prefix: -g\n    doc: |\n      Genome fasta file\n  b:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -b\n    doc: |\n      circexplorer2 annotated bed output back_spliced_junction.bed\n  o:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -o\n    doc: |\n      Output file \n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n\nbaseCommand: [\"CIRCexplorer2\", \"annotate\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/YangLab/CIRCexplorer2\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'r': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-r'}, 'doc': 'Genome reference file\\n'}, 'g': {'type': 'File', 'secondaryFiles': '.fai', 'inputBinding': {'position': 2, 'prefix': '-g'}, 'doc': 'Genome fasta file\\n'}, 'b': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-b'}, 'doc': 'circexplorer2 annotated bed output back_spliced_junction.bed\\n'}, 'o': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-o'}, 'doc': 'Output file \\n'}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}}",
    "cwl_hints": "[{'$import': 'circexplorer2-docker.yml'}, {'$import': 'circexplorer2-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['CIRCexplorer2', 'annotate']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "circexplorer2 is a software package Circular RNA analysis",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "circexplorer2-annotate",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/YangLab/CIRCexplorer2",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/circexplorer/circexplorer2-parse.cwl",
    "sha": "61559d28eff096d048f93edc35c02e1ead77a4d2",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/circexplorer/circexplorer2-parse.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: circexplorer2-parse\ndoc: circexplorer2 is a software package Circular RNA analysis\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: circexplorer2-docker.yml\n  - $import: circexplorer2-bioconda.yml\n\ninputs:\n  t:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -t\n    doc: |\n      Aligner (TopHat-Fusion, STAR, MapSplice, BWA, segemehl)\n  b:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -b\n    doc: |\n      Output file\n  i:\n    type: File\n    inputBinding:\n      position: 3\n    doc: |\n      STAR Chimeric.out.junction\n\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.b)\n\nbaseCommand: [\"CIRCexplorer2\", \"parse\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/YangLab/CIRCexplorer2\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'t': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-t'}, 'doc': 'Aligner (TopHat-Fusion, STAR, MapSplice, BWA, segemehl)\\n'}, 'b': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-b'}, 'doc': 'Output file\\n'}, 'i': {'type': 'File', 'inputBinding': {'position': 3}, 'doc': 'STAR Chimeric.out.junction\\n'}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.b)'}}}",
    "cwl_hints": "[{'$import': 'circexplorer2-docker.yml'}, {'$import': 'circexplorer2-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['CIRCexplorer2', 'parse']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "circexplorer2 is a software package Circular RNA analysis",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "circexplorer2-parse",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/YangLab/CIRCexplorer2",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/circexplorer/circexplorer2-quantification.cwl",
    "sha": "7a43606ff071d5e3544afa55f71c8fea4ca1bd3f",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/circexplorer/circexplorer2-quantification.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: circexplorer2-quantification\ndoc: This workflow quantify circRNA from BAM files and circexplorer2 annotate output\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-pysam:0.19.1\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/pysam:0.19.1--py36hea1697a_0\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/pysam:0.19.1--py36hea1697a_0\"\n      LABEL version=\"1\"\n      LABEL software=\"Pysam\"\n      LABEL software.version=\"0.19.1\"\n      LABEL description=\"Pysam image with Pandas\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install pandas multiprocess\n  SoftwareRequirement:\n    packages:\n      - package: 'pandas'\n        version:\n          - '1.4.3'\n        specs:\n          - https://anaconda.org/conda-forge/pandas\n      - package: 'multiprocess'\n        version:\n          - '0.70.13'\n        specs:\n          - https://anaconda.org/conda-forge/multiprocess\n      - package: 'pysam'\n        version:\n          - '0.19.1'\n        specs:\n          - https://anaconda.org/bioconda/pysam\n\nrequirements:\n  ResourceRequirement:\n    coresMin: $(inputs.t)\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: circexplorer2-quantification.py\n        entry: |\n          import os\n          import sys\n          import pandas\n          import pysam\n          from collections import namedtuple\n          import multiprocess as mp\n          from functools import partial\n          \n          Location = namedtuple(\"Location\", [\"start\", \"end\"])\n          \n          def is_overlapping(read, loc2):\n              if read.reference_start <= loc2.start < read.reference_end:\n                  return True\n              elif read.reference_start < loc2.end <= read.reference_end:\n                  return True\n              elif loc2.start < read.reference_start and loc2.end > read.reference_end:\n                  return True\n              return False\n          \n          def is_inlocation(pos, loc):\n              if loc.start <= pos <= loc.end:\n                  return True\n              return False\n          \n          def read_percent_overlap_region(read, region):\n              reference_positions = set(read.get_reference_positions())\n              count = len(region.intersection(reference_positions))\n              return count * 100/len(read.get_reference_positions())\n          \n          def count_reads(idx, df, bam_file):\n              row = df.loc[idx]\n              min_cov = 90\n              chr = row['chrom']\n              start = row['start']\n              end = row['end']\n              exon_sizes = [int(b) for b in row['exonSizes'].split(',')]\n              offsets = [int(b) for b in row['exonOffsets'].split(',')]\n              exons = set()\n              for i in range(0,len(offsets)):\n                  exons.update(range(start + offsets[i], start + offsets[i] + exon_sizes[i] + 1))\n              count = 0\n              reads = {}    \n              with pysam.AlignmentFile(bam_file, \"rb\") as bam:\n                  for read in bam.fetch(chr, start, end):\n                      if read.is_proper_pair and read.mapq == 255:\n                          v = reads.setdefault(read.qname, {})\n                          if read.is_forward:\n                              v['forward'] = read\n                          else:\n                              v['reverse'] = read\n              for r in reads:\n                  if 'forward' in reads[r] and 'reverse' in reads[r]:\n                      forward = reads[r]['forward']\n                      reverse = reads[r]['reverse']    \n                      if forward.reference_start >= start and reverse.reference_end < end:\n                          forward_overlap_exon = read_percent_overlap_region(forward, exons)\n                          reverse_overlap_exon = read_percent_overlap_region(reverse, exons)\n                          if forward_overlap_exon >= min_cov and reverse_overlap_exon >= min_cov:\n                              count += 2                \n              print('{} {} {} {}'.format(chr, start, end, count + row['readNumber']))\n              return idx, sum(exon_sizes), count + row['readNumber']\n\n          \n          if __name__ == \"__main__\":\n              bam_file = sys.argv[1]\n              circ_file = sys.argv[2]\n              min_reads = int(sys.argv[3])\n              threads = int(sys.argv[4])\n              output_file = sys.argv[5]\n          \n              circexplorer_cols = [\"chrom\",\"start\",\"end\",\"name\",\"score\",\"strand\",\"thickStart\",\"thickEnd\",\n                                   \"itemRgb\",\"exonCount\",\"exonSizes\",\"exonOffsets\",\"readNumber\",\"circType\",\n                                   \"geneName\",\"isoformName\",\"index\",\"flankIntron\"]\n          \n              df1 = pandas.read_csv(circ_file, sep='\\t', header=None, names=circexplorer_cols)\n              df1 = df1.sort_values(by=['chrom', 'start', 'end'])\n              df1 = df1[df1['readNumber'] >= min_reads]\n              print('{} circRNA to quantify'.format(len(df1)))\n          \n              with mp.Pool(processes=threads) as pool:\n                  results = pool.map(partial(count_reads, df=df1, bam_file=bam_file), list(df1.index))\n                  for r in results:\n                      df1.loc[r[0], 'length'] = int(r[1])\n                      df1.loc[r[0], 'read_counts'] = int(r[2]) \n                  df1['read_counts'] = df1['read_counts'].astype(int)  \n                  df1['length'] = df1['length'].astype(int)\n              df1.to_csv(output_file, index=None, sep='\\t')\n\ninputs:\n  b:\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n      position: 1\n    doc: |\n      STAR BAM file\n  c:\n    type: File\n    inputBinding:\n      position: 2\n    doc: |\n      circEplorer2 annotate output circularRNA_known.txt\n  m:\n    type: int\n    inputBinding:\n      position: 3\n    doc: |\n      Min number of junctions reads to process\n  t:\n    type: int\n    inputBinding:\n      position: 4\n    doc: |\n      Threads to use\n  o:\n    type: string\n    inputBinding:\n      position: 5\n    doc: |\n      Output file\n        \n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n\nbaseCommand: [\"python\",\"circexplorer2-quantification.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/YangLab/CIRCexplorer2\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'b': {'type': 'File', 'secondaryFiles': '.bai', 'inputBinding': {'position': 1}, 'doc': 'STAR BAM file\\n'}, 'c': {'type': 'File', 'inputBinding': {'position': 2}, 'doc': 'circEplorer2 annotate output circularRNA_known.txt\\n'}, 'm': {'type': 'int', 'inputBinding': {'position': 3}, 'doc': 'Min number of junctions reads to process\\n'}, 't': {'type': 'int', 'inputBinding': {'position': 4}, 'doc': 'Threads to use\\n'}, 'o': {'type': 'string', 'inputBinding': {'position': 5}, 'doc': 'Output file\\n  \\n'}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-pysam:0.19.1', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/pysam:0.19.1--py36hea1697a_0\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/pysam:0.19.1--py36hea1697a_0\"\\nLABEL version=\"1\"\\nLABEL software=\"Pysam\"\\nLABEL software.version=\"0.19.1\"\\nLABEL description=\"Pysam image with Pandas\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install pandas multiprocess\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'pandas', 'version': ['1.4.3'], 'specs': ['https://anaconda.org/conda-forge/pandas']}, {'package': 'multiprocess', 'version': ['0.70.13'], 'specs': ['https://anaconda.org/conda-forge/multiprocess']}, {'package': 'pysam', 'version': ['0.19.1'], 'specs': ['https://anaconda.org/bioconda/pysam']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'circexplorer2-quantification.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {'coresMin': '$(inputs.t)'}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'circexplorer2-quantification.py', 'entry': 'import os\\nimport sys\\nimport pandas\\nimport pysam\\nfrom collections import namedtuple\\nimport multiprocess as mp\\nfrom functools import partial\\n\\nLocation = namedtuple(\"Location\", [\"start\", \"end\"])\\n\\ndef is_overlapping(read, loc2):\\n    if read.reference_start <= loc2.start < read.reference_end:\\n        return True\\n    elif read.reference_start < loc2.end <= read.reference_end:\\n        return True\\n    elif loc2.start < read.reference_start and loc2.end > read.reference_end:\\n        return True\\n    return False\\n\\ndef is_inlocation(pos, loc):\\n    if loc.start <= pos <= loc.end:\\n        return True\\n    return False\\n\\ndef read_percent_overlap_region(read, region):\\n    reference_positions = set(read.get_reference_positions())\\n    count = len(region.intersection(reference_positions))\\n    return count * 100/len(read.get_reference_positions())\\n\\ndef count_reads(idx, df, bam_file):\\n    row = df.loc[idx]\\n    min_cov = 90\\n    chr = row[\\'chrom\\']\\n    start = row[\\'start\\']\\n    end = row[\\'end\\']\\n    exon_sizes = [int(b) for b in row[\\'exonSizes\\'].split(\\',\\')]\\n    offsets = [int(b) for b in row[\\'exonOffsets\\'].split(\\',\\')]\\n    exons = set()\\n    for i in range(0,len(offsets)):\\n        exons.update(range(start + offsets[i], start + offsets[i] + exon_sizes[i] + 1))\\n    count = 0\\n    reads = {}    \\n    with pysam.AlignmentFile(bam_file, \"rb\") as bam:\\n        for read in bam.fetch(chr, start, end):\\n            if read.is_proper_pair and read.mapq == 255:\\n                v = reads.setdefault(read.qname, {})\\n                if read.is_forward:\\n                    v[\\'forward\\'] = read\\n                else:\\n                    v[\\'reverse\\'] = read\\n    for r in reads:\\n        if \\'forward\\' in reads[r] and \\'reverse\\' in reads[r]:\\n            forward = reads[r][\\'forward\\']\\n            reverse = reads[r][\\'reverse\\']    \\n            if forward.reference_start >= start and reverse.reference_end < end:\\n                forward_overlap_exon = read_percent_overlap_region(forward, exons)\\n                reverse_overlap_exon = read_percent_overlap_region(reverse, exons)\\n                if forward_overlap_exon >= min_cov and reverse_overlap_exon >= min_cov:\\n                    count += 2                \\n    print(\\'{} {} {} {}\\'.format(chr, start, end, count + row[\\'readNumber\\']))\\n    return idx, sum(exon_sizes), count + row[\\'readNumber\\']\\n\\n\\nif __name__ == \"__main__\":\\n    bam_file = sys.argv[1]\\n    circ_file = sys.argv[2]\\n    min_reads = int(sys.argv[3])\\n    threads = int(sys.argv[4])\\n    output_file = sys.argv[5]\\n\\n    circexplorer_cols = [\"chrom\",\"start\",\"end\",\"name\",\"score\",\"strand\",\"thickStart\",\"thickEnd\",\\n                         \"itemRgb\",\"exonCount\",\"exonSizes\",\"exonOffsets\",\"readNumber\",\"circType\",\\n                         \"geneName\",\"isoformName\",\"index\",\"flankIntron\"]\\n\\n    df1 = pandas.read_csv(circ_file, sep=\\'\\\\t\\', header=None, names=circexplorer_cols)\\n    df1 = df1.sort_values(by=[\\'chrom\\', \\'start\\', \\'end\\'])\\n    df1 = df1[df1[\\'readNumber\\'] >= min_reads]\\n    print(\\'{} circRNA to quantify\\'.format(len(df1)))\\n\\n    with mp.Pool(processes=threads) as pool:\\n        results = pool.map(partial(count_reads, df=df1, bam_file=bam_file), list(df1.index))\\n        for r in results:\\n            df1.loc[r[0], \\'length\\'] = int(r[1])\\n            df1.loc[r[0], \\'read_counts\\'] = int(r[2]) \\n        df1[\\'read_counts\\'] = df1[\\'read_counts\\'].astype(int)  \\n        df1[\\'length\\'] = df1[\\'length\\'].astype(int)\\n    df1.to_csv(output_file, index=None, sep=\\'\\\\t\\')\\n'}]}}",
    "cwl_doc": "This workflow quantify circRNA from BAM files and circexplorer2 annotate output",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "circexplorer2-quantification",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/YangLab/CIRCexplorer2",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/clustal/clustalo.cwl",
    "sha": "d4161c9ea552fb7309faa020d4280bcfd04916e6",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/clustal/clustalo.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: ClustalO\ndoc: CLUSTAL-OMEGA is a general purpose multiple sequence alignment program for protein and DNA/RNA.\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: clustalo-docker.yml\n\ninputs:\n  in:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: --in\n    doc: |\n      Multiple sequence input file\n  hmm_in:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: --hmm-in\n    doc: |\n      HMM input files\n  dealign:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --dealign\n    doc: |\n      Dealign input sequences\n  profile1:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: --profile1\n    doc: |\n      Pre-aligned multiple sequence file (aligned columns will be kept fixed)\n  profile2:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: --profile2\n    doc: |\n      Pre-aligned multiple sequence file (aligned columns will be kept fixed)\n  is_profile:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --is-profile\n    doc: |\n      disable check if profile, force profile (default no)\n  seqtype:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --seqtype\n    doc: |\n      Force a sequence type (default: auto)\n  infmt:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --infmt\n    doc: |\n      Forced sequence input file format (default: auto)\n  distmat_in:\n    type: File?\n    inputBinding:\n      position: 2\n      prefix: --distmat-in\n    doc: |\n      Pairwise distance matrix input file (skips distance computation)\n  distmat_out:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --distmat-out\n    doc: |\n      Pairwise distance matrix output file\n  guidetree_in:\n    type: File?\n    inputBinding:\n      position: 2\n      prefix: --guidetree-in\n    doc: |\n      Guide tree input file (skips distance computation and guide tree clustering step)\n  guidetree_out:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --guidetree-out\n    doc: |\n      Guide tree output file\n  full:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: --full\n    doc: |\n      Use full distance matrix for guide-tree calculation (slow; mBed is default)\n  full_iter:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: --full-iter\n    doc: |\n      Use full distance matrix for guide-tree calculation during iteration (mBed is default)\n  cluster_size:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: --cluster-size\n    doc: |\n      soft maximum of sequences in sub-clusters\n  clustering_out:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --clustering-out\n    doc: |\n      Clustering output file\n  use_kimura:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: --use-kimura\n    doc: |\n      use Kimura distance correction for aligned sequences (default no)\n  percent_id:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: --percent-id\n    doc: |\n      convert distances into percent identities (default no)\n  out:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: --out\n    doc: |\n      Multiple sequence alignment output file (default: stdout)\n  outfmt:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: --outfmt\n    doc: |\n      MSA output file format (default: fasta)\n  residuenumber:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: --residuenumber\n    doc: |\n      in Clustal format print residue numbers (default no)\n  wrap:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --wrap\n    doc: |\n      number of residues before line-wrap in output\n  output_order:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: --output-order\n    doc: |\n      MSA output order like in input/guide-tree\n  iterations:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: --iterations\n    doc: |\n      Number of (combined guide tree/HMM) iterations\n  max_guidetree_iterations:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: --max-guidetree-iterations\n    doc: |\n      Maximum guide tree iterations\n  max_hmm_iterations:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: --max-hmm-iterations\n    doc: |\n  maxnumseq:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: --maxnumseq\n    doc: |\n      Maximum allowed number of sequences\n  maxseqlen:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: --maxseqlen\n    doc: |\n      Maximum allowed sequence length\n  auto:\n    type: boolean?\n    inputBinding:\n      position: 6\n      prefix: --auto\n    doc: |\n      Set options automatically (might overwrite some of your options)\n  threads:\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: --threads\n    doc: |\n      Number of processors to use\n  force:\n    type: boolean?\n    inputBinding:\n      position: 6\n      prefix: --force\n    doc: |\n      Force file overwriting\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n  distmat:\n    type: File?\n    outputBinding:\n      glob: $(inputs.distmat_out)\n  guidetree:\n    type: File?\n    outputBinding:\n      glob: $(inputs.guidetree_out)\n  clustering:\n    type: File?\n    outputBinding:\n      glob: $(inputs.clustering_out)\n\n\nbaseCommand: [\"clustalo\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://www.clustal.org/omega/\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'in': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '--in'}, 'doc': 'Multiple sequence input file\\n'}, 'hmm_in': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '--hmm-in'}, 'doc': 'HMM input files\\n'}, 'dealign': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--dealign'}, 'doc': 'Dealign input sequences\\n'}, 'profile1': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '--profile1'}, 'doc': 'Pre-aligned multiple sequence file (aligned columns will be kept fixed)\\n'}, 'profile2': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '--profile2'}, 'doc': 'Pre-aligned multiple sequence file (aligned columns will be kept fixed)\\n'}, 'is_profile': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--is-profile'}, 'doc': 'disable check if profile, force profile (default no)\\n'}, 'seqtype': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--seqtype'}, 'doc': 'Force a sequence type (default: auto)\\n'}, 'infmt': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--infmt'}, 'doc': 'Forced sequence input file format (default: auto)\\n'}, 'distmat_in': {'type': 'File?', 'inputBinding': {'position': 2, 'prefix': '--distmat-in'}, 'doc': 'Pairwise distance matrix input file (skips distance computation)\\n'}, 'distmat_out': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--distmat-out'}, 'doc': 'Pairwise distance matrix output file\\n'}, 'guidetree_in': {'type': 'File?', 'inputBinding': {'position': 2, 'prefix': '--guidetree-in'}, 'doc': 'Guide tree input file (skips distance computation and guide tree clustering step)\\n'}, 'guidetree_out': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--guidetree-out'}, 'doc': 'Guide tree output file\\n'}, 'full': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '--full'}, 'doc': 'Use full distance matrix for guide-tree calculation (slow; mBed is default)\\n'}, 'full_iter': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '--full-iter'}, 'doc': 'Use full distance matrix for guide-tree calculation during iteration (mBed is default)\\n'}, 'cluster_size': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '--cluster-size'}, 'doc': 'soft maximum of sequences in sub-clusters\\n'}, 'clustering_out': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--clustering-out'}, 'doc': 'Clustering output file\\n'}, 'use_kimura': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '--use-kimura'}, 'doc': 'use Kimura distance correction for aligned sequences (default no)\\n'}, 'percent_id': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '--percent-id'}, 'doc': 'convert distances into percent identities (default no)\\n'}, 'out': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '--out'}, 'doc': 'Multiple sequence alignment output file (default: stdout)\\n'}, 'outfmt': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '--outfmt'}, 'doc': 'MSA output file format (default: fasta)\\n'}, 'residuenumber': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '--residuenumber'}, 'doc': 'in Clustal format print residue numbers (default no)\\n'}, 'wrap': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--wrap'}, 'doc': 'number of residues before line-wrap in output\\n'}, 'output_order': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '--output-order'}, 'doc': 'MSA output order like in input/guide-tree\\n'}, 'iterations': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '--iterations'}, 'doc': 'Number of (combined guide tree/HMM) iterations\\n'}, 'max_guidetree_iterations': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '--max-guidetree-iterations'}, 'doc': 'Maximum guide tree iterations\\n'}, 'max_hmm_iterations': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '--max-hmm-iterations'}, 'doc': ''}, 'maxnumseq': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '--maxnumseq'}, 'doc': 'Maximum allowed number of sequences\\n'}, 'maxseqlen': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '--maxseqlen'}, 'doc': 'Maximum allowed sequence length\\n'}, 'auto': {'type': 'boolean?', 'inputBinding': {'position': 6, 'prefix': '--auto'}, 'doc': 'Set options automatically (might overwrite some of your options)\\n'}, 'threads': {'type': 'int?', 'inputBinding': {'position': 6, 'prefix': '--threads'}, 'doc': 'Number of processors to use\\n'}, 'force': {'type': 'boolean?', 'inputBinding': {'position': 6, 'prefix': '--force'}, 'doc': 'Force file overwriting\\n'}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}, 'distmat': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.distmat_out)'}}, 'guidetree': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.guidetree_out)'}}, 'clustering': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.clustering_out)'}}}",
    "cwl_hints": "[{'$import': 'clustalo-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['clustalo']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "CLUSTAL-OMEGA is a general purpose multiple sequence alignment program for protein and DNA/RNA.",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ClustalO",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://www.clustal.org/omega/",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/deeptools/multiBamSummary.cwl",
    "sha": "92c199ed0c84c26673fdb64289fd0a0aada5aa54",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/deeptools/multiBamSummary.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: multiBamSummary\ndoc: computes the read coverages for genomic regions for typically two or more BAM files\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: deeptools-docker.yml\n  - $import: deeptools-bioconda.yml\n\ninputs:\n  in_stdout:\n    type: string\n  t:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -t\n  prefix:\n    type: string\n    inputBinding:\n      position: 4\n      valueFrom: |\n        ${\n          return inputs.index.path + \"/\" + self;\n        }\n  index:\n    type: Directory\n  input:\n    type: File\n    inputBinding:\n      position: 5\n\noutputs:\n  out_stdout:\n    type: stdout\n\nstdout: $(inputs.in_stdout)\n\nbaseCommand: [\"bwa\", \"mem\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/lh3/bwa\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'in_stdout': {'type': 'string'}, 't': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-t'}}, 'prefix': {'type': 'string', 'inputBinding': {'position': 4, 'valueFrom': '${\\n  return inputs.index.path + \"/\" + self;\\n}\\n'}}, 'index': {'type': 'Directory'}, 'input': {'type': 'File', 'inputBinding': {'position': 5}}}",
    "cwl_outputs": "{'out_stdout': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'deeptools-docker.yml'}, {'$import': 'deeptools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'mem']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "computes the read coverages for genomic regions for typically two or more BAM files",
    "cwl_stdout": "$(inputs.in_stdout)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "multiBamSummary",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/lh3/bwa",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/ensembl-vep/vep.cwl",
    "sha": "6c2366499d17027f1292b495137de163d78b8810",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/ensembl-vep/vep.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: vep\ndoc: Variant Effect Predictor\n\nhints:\n  - $import: vep-docker.yml\n  - $import: vep-bioconda.yml\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n\n\ninputs:\n  cache:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --cache\n  merged:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: --merged\n  refseq :\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: --refseq\n  offline:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --offline\n  everything:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: --everything\n  species:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: --species\n  i:\n    type: File\n    inputBinding:\n      position: 4\n      prefix: -i\n  format:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: --format\n  o:\n    type: string\n    inputBinding:\n      position: 5\n      prefix: -o\n  force_overwrite:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --force_overwrite\n  stats_file:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: --stats_file\n  no_stats:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --no_stats\n  stats_text:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --stats_text\n  threads:\n    type: int\n    inputBinding:\n      position: 5\n      prefix: --fork\n  dir:\n    type: Directory?\n    inputBinding:\n      position: 5\n      prefix: --dir\n  vcf:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --vcf\n  tab:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --tab\n  json:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --json\n  compress_output:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --compress_output\n  variant_class:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --variant_class\n  nearest:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: --nearest\n  overlaps:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --overlaps\n  gene_phenotype:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --gene_phenotype\n  regulatory:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --regulatory\n  allele_number:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --allele_number\n  show_ref_allele:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --show_ref_allele\n  total_length:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --total_length\n  hgvs:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --hgvs\n  hgvsg:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --hgvsg\n  shift_hgvs:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: --shift_hgvs\n  transcript_version:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --transcript_version\n  protein:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --protein\n  symbol:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --symbol\n  ccds:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --ccds\n  uniprot:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --uniprot\n  tsl:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --tsl\n  appris:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --appris\n  canonical:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --canonical\n  mane:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --mane\n  biotype:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --biotype\n  domains:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --domains\n  xref_refseq:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --xref_refseq\n  synonyms:\n    type: File?\n    inputBinding:\n      position: 5\n      prefix: --synonyms\n  check_existing:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --check_existing\n  check_svs:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --check_svs\n  clin_sig_allele:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: --clin_sig_allele\n  exclude_null_alleles:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --exclude_null_alleles\n  no_check_alleles:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --no_check_alleles\n  af:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --af\n  max_af:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --max_af\n  af_1kg:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --af_1kg\n  af_esp:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --af_esp\n  af_gnomad:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --af_gnomad\n  af_exac:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --af_exac\n  pubmed:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --pubmed\n  var_synonyms:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --var_synonyms\n  failed:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: --failed\n  gencode_basic:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --gencode_basic\n  exclude_predicted:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --exclude_predicted\n  transcript_filter:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: --transcript_filter\n  check_ref:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --check_ref\n  lookup_ref:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --lookup_ref\n  dont_skip:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --dont_skip\n  allow_non_variant:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --allow_non_variant\n  chr:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: --chr\n  coding_only:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --coding_only\n  no_intergenic:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --no_intergenic\n  pick:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --pick\n  pick_allele:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --pick_allele\n  per_gene:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --per_gene\n  pick_allele_gene:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --pick_allele_gene\n  flag_pick:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --flag_pick\n  flag_pick_allele:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --flag_pick_allele\n  flag_pick_allele_gene:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --flag_pick_allele_gene\n  most_severe:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --most_severe\n  summary:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --summary\n  filter_common:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --filter_common\n  check_frequency:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --check_frequency\n  freq_pop:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: --freq_pop\n  freq_freq:\n    type: float?\n    inputBinding:\n      position: 5\n      prefix: --freq_freq\n  freq_gt_lt:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: --freq_gt_lt\n  freq_filter:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: --freq_filter\n\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n  stats:\n    type: File?\n    outputBinding:\n      glob: $(inputs.stats_file)\n\nbaseCommand: [vep]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'cache': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--cache'}}, 'merged': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '--merged'}}, 'refseq': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '--refseq'}}, 'offline': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--offline'}}, 'everything': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '--everything'}}, 'species': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '--species'}}, 'i': {'type': 'File', 'inputBinding': {'position': 4, 'prefix': '-i'}}, 'format': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '--format'}}, 'o': {'type': 'string', 'inputBinding': {'position': 5, 'prefix': '-o'}}, 'force_overwrite': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--force_overwrite'}}, 'stats_file': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '--stats_file'}}, 'no_stats': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--no_stats'}}, 'stats_text': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--stats_text'}}, 'threads': {'type': 'int', 'inputBinding': {'position': 5, 'prefix': '--fork'}}, 'dir': {'type': 'Directory?', 'inputBinding': {'position': 5, 'prefix': '--dir'}}, 'vcf': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--vcf'}}, 'tab': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--tab'}}, 'json': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--json'}}, 'compress_output': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--compress_output'}}, 'variant_class': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--variant_class'}}, 'nearest': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '--nearest'}}, 'overlaps': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--overlaps'}}, 'gene_phenotype': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--gene_phenotype'}}, 'regulatory': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--regulatory'}}, 'allele_number': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--allele_number'}}, 'show_ref_allele': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--show_ref_allele'}}, 'total_length': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--total_length'}}, 'hgvs': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--hgvs'}}, 'hgvsg': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--hgvsg'}}, 'shift_hgvs': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '--shift_hgvs'}}, 'transcript_version': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--transcript_version'}}, 'protein': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--protein'}}, 'symbol': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--symbol'}}, 'ccds': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--ccds'}}, 'uniprot': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--uniprot'}}, 'tsl': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--tsl'}}, 'appris': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--appris'}}, 'canonical': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--canonical'}}, 'mane': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--mane'}}, 'biotype': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--biotype'}}, 'domains': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--domains'}}, 'xref_refseq': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--xref_refseq'}}, 'synonyms': {'type': 'File?', 'inputBinding': {'position': 5, 'prefix': '--synonyms'}}, 'check_existing': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--check_existing'}}, 'check_svs': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--check_svs'}}, 'clin_sig_allele': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '--clin_sig_allele'}}, 'exclude_null_alleles': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--exclude_null_alleles'}}, 'no_check_alleles': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--no_check_alleles'}}, 'af': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--af'}}, 'max_af': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--max_af'}}, 'af_1kg': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--af_1kg'}}, 'af_esp': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--af_esp'}}, 'af_gnomad': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--af_gnomad'}}, 'af_exac': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--af_exac'}}, 'pubmed': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--pubmed'}}, 'var_synonyms': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--var_synonyms'}}, 'failed': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '--failed'}}, 'gencode_basic': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--gencode_basic'}}, 'exclude_predicted': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--exclude_predicted'}}, 'transcript_filter': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '--transcript_filter'}}, 'check_ref': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--check_ref'}}, 'lookup_ref': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--lookup_ref'}}, 'dont_skip': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--dont_skip'}}, 'allow_non_variant': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--allow_non_variant'}}, 'chr': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '--chr'}}, 'coding_only': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--coding_only'}}, 'no_intergenic': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--no_intergenic'}}, 'pick': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--pick'}}, 'pick_allele': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--pick_allele'}}, 'per_gene': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--per_gene'}}, 'pick_allele_gene': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--pick_allele_gene'}}, 'flag_pick': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--flag_pick'}}, 'flag_pick_allele': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--flag_pick_allele'}}, 'flag_pick_allele_gene': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--flag_pick_allele_gene'}}, 'most_severe': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--most_severe'}}, 'summary': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--summary'}}, 'filter_common': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--filter_common'}}, 'check_frequency': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--check_frequency'}}, 'freq_pop': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '--freq_pop'}}, 'freq_freq': {'type': 'float?', 'inputBinding': {'position': 5, 'prefix': '--freq_freq'}}, 'freq_gt_lt': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '--freq_gt_lt'}}, 'freq_filter': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '--freq_filter'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}, 'stats': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.stats_file)'}}}",
    "cwl_hints": "[{'$import': 'vep-docker.yml'}, {'$import': 'vep-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['vep']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.threads)'}}",
    "cwl_doc": "Variant Effect Predictor",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "vep",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/entrez/entrez-search-fetch.cwl",
    "sha": "7da20878325db130cfa5ceb2133412f46db4a3eb",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/entrez/entrez-search-fetch.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: contamination_detection\ndoc: This tools remove contamination using a Blast TSV file\n\nrequirements:\n  - class: ShellCommandRequirement\n\nhints:\n  - $import: entrez-docker.yml\n  - $import: entrez-bioconda.yml\n\ninputs:\n  db:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -db\n  query:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -query\n  pipe:\n    type: string\n    default: \"|\"\n    inputBinding:\n      position: 3\n      shellQuote: False\n  efetch:\n    type: string\n    default: \"efetch\"\n    inputBinding:\n      position: 4\n      shellQuote: False\n  format:\n    type: string\n    inputBinding:\n      position: 5\n      prefix: -format\n  out:\n    type: string\n\n\noutputs:\n  fsa:\n    type: stdout\n\nstdout: $(inputs.out)\n\nbaseCommand: [\"esearch\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'db': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-db'}}, 'query': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-query'}}, 'pipe': {'type': 'string', 'default': '|', 'inputBinding': {'position': 3, 'shellQuote': False}}, 'efetch': {'type': 'string', 'default': 'efetch', 'inputBinding': {'position': 4, 'shellQuote': False}}, 'format': {'type': 'string', 'inputBinding': {'position': 5, 'prefix': '-format'}}, 'out': {'type': 'string'}}",
    "cwl_outputs": "{'fsa': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'entrez-docker.yml'}, {'$import': 'entrez-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['esearch']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This tools remove contamination using a Blast TSV file",
    "cwl_stdout": "$(inputs.out)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "contamination_detection",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "tools/fastqc/fastqc.cwl",
    "sha": "1c63fb31bc757667cc10bf1a8897d43030db90c9",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/fastqc/fastqc.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\ndoc: BASH echo command\nlabel: FastQC\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n      coresMin: $(inputs.threads)\n\nhints:\n  - $import: fastqc-docker.yml\n  - $import: fastqc-bioconda.yml\n\ninputs:\n  fastq:\n    type: File[]\n    inputBinding:\n      position: 2\n  threads:\n    type: int\n    inputBinding:\n      position: 1\n      prefix: '-t'\noutputs:\n  out_html:\n    type: File[]\n    outputBinding:\n      glob: '*.html'\n  out_zip:\n    type: File[]\n    outputBinding:\n      glob: '*.zip'\n\nbaseCommand: [\"fastqc\", \"--outdir\", \".\", \"--extract\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fastq': {'type': 'File[]', 'inputBinding': {'position': 2}}, 'threads': {'type': 'int', 'inputBinding': {'position': 1, 'prefix': '-t'}}}",
    "cwl_outputs": "{'out_html': {'type': 'File[]', 'outputBinding': {'glob': '*.html'}}, 'out_zip': {'type': 'File[]', 'outputBinding': {'glob': '*.zip'}}}",
    "cwl_hints": "[{'$import': 'fastqc-docker.yml'}, {'$import': 'fastqc-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fastqc', '--outdir', '.', '--extract']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.threads)'}}",
    "cwl_doc": "BASH echo command",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "FastQC",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gatk/gatk-AnalyzeCovariates.cwl",
    "sha": "c7047d122019f7c8a2f0b5d55771fc2ab7cfd34d",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gatk/gatk-AnalyzeCovariates.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: gatk-AnalyzeCovariates\ndoc: GATK suite\n\nhints:\n  - $import: gatk-docker.yml\n  - $import: gatk-bioconda.yml\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 1024\n\ninputs:\n  before:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -before\n  after:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: -after\n  plots:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: -plots\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.plots)\n\nbaseCommand: [gatk, AnalyzeCovariates]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'before': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-before'}}, 'after': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-after'}}, 'plots': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-plots'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.plots)'}}}",
    "cwl_hints": "[{'$import': 'gatk-docker.yml'}, {'$import': 'gatk-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'AnalyzeCovariates']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 1024}}",
    "cwl_doc": "GATK suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-AnalyzeCovariates",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gatk/gatk-ApplyBQSR.cwl",
    "sha": "e5d3d5ffcbe347aefdbce77cab1dff07a0cf146b",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gatk/gatk-ApplyBQSR.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: gatk-ApplyBQSR\ndoc: GATK suite\n\nhints:\n  - $import: gatk-docker.yml\n  - $import: gatk-bioconda.yml\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 1024\n\ninputs:\n  I:\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n      position: 1\n      prefix: -I\n  R:\n    type: File\n    secondaryFiles: [.fai, ^.dict]\n    inputBinding:\n      position: 2\n      prefix: -R\n  bqsr:\n    type: File\n    inputBinding:\n      position: 3\n      prefix: -bqsr\n  O:\n    type: string\n    inputBinding:\n      position: 4\n      prefix: -O\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.O)\n\nbaseCommand: [gatk, ApplyBQSR]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'I': {'type': 'File', 'secondaryFiles': '.bai', 'inputBinding': {'position': 1, 'prefix': '-I'}}, 'R': {'type': 'File', 'secondaryFiles': ['.fai', '^.dict'], 'inputBinding': {'position': 2, 'prefix': '-R'}}, 'bqsr': {'type': 'File', 'inputBinding': {'position': 3, 'prefix': '-bqsr'}}, 'O': {'type': 'string', 'inputBinding': {'position': 4, 'prefix': '-O'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.O)'}}}",
    "cwl_hints": "[{'$import': 'gatk-docker.yml'}, {'$import': 'gatk-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'ApplyBQSR']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 1024}}",
    "cwl_doc": "GATK suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-ApplyBQSR",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gatk/gatk-BaseRecalibrator.cwl",
    "sha": "223f5c7e961a88a66e207eedd6bf0a71470c848d",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gatk/gatk-BaseRecalibrator.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: gatk-BaseRecalibrator\ndoc: GATK suite\n\nhints:\n  - $import: gatk-docker.yml\n  - $import: gatk-bioconda.yml\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 1024\n\ninputs:\n  I:\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n      position: 1\n      prefix: -I\n  R:\n    type: File\n    secondaryFiles: [.fai, ^.dict]\n    inputBinding:\n      position: 2\n      prefix: -R\n  known_sites:\n    type: File[]\n    secondaryFiles: .idx\n    inputBinding:\n      shellQuote: False\n      position: 3\n      valueFrom: |\n        ${\n           var listing = \"\";\n           for (var i = 0; i < inputs.known_sites.length; i++) {\n              listing += \" --known-sites \" + inputs.known_sites[i].path;\n           }\n           return listing;\n         }\n  O:\n    type: string\n    inputBinding:\n      position: 4\n      prefix: -O\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.O)\n\nbaseCommand: [gatk, BaseRecalibrator]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'I': {'type': 'File', 'secondaryFiles': '.bai', 'inputBinding': {'position': 1, 'prefix': '-I'}}, 'R': {'type': 'File', 'secondaryFiles': ['.fai', '^.dict'], 'inputBinding': {'position': 2, 'prefix': '-R'}}, 'known_sites': {'type': 'File[]', 'secondaryFiles': '.idx', 'inputBinding': {'shellQuote': False, 'position': 3, 'valueFrom': '${\\n   var listing = \"\";\\n   for (var i = 0; i < inputs.known_sites.length; i++) {\\n      listing += \" --known-sites \" + inputs.known_sites[i].path;\\n   }\\n   return listing;\\n }\\n'}}, 'O': {'type': 'string', 'inputBinding': {'position': 4, 'prefix': '-O'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.O)'}}}",
    "cwl_hints": "[{'$import': 'gatk-docker.yml'}, {'$import': 'gatk-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'BaseRecalibrator']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ShellCommandRequirement': {}, 'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 1024}}",
    "cwl_doc": "GATK suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-BaseRecalibrator",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gatk/gatk-CombineGVCFs.cwl",
    "sha": "27e4652bcc34a5a040a6ea6bb1545bb0aac4b047",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gatk/gatk-CombineGVCFs.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: gatk-CombineGVCFs\ndoc: GATK suite\n\nhints:\n  - $import: gatk-docker.yml\n  - $import: gatk-bioconda.yml\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\ninputs:\n  variants:\n    type: File[]\n    inputBinding:\n      position: 1\n      prefix: --variant\n  R:\n    type: File\n    secondaryFiles: [.fai, ^.dict]\n    inputBinding:\n      position: 2\n      prefix: -R\n  O:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: -O\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.O)\n\nbaseCommand: [gatk, CombineGVCFs]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'variants': {'type': 'File[]', 'inputBinding': {'position': 1, 'prefix': '--variant'}}, 'R': {'type': 'File', 'secondaryFiles': ['.fai', '^.dict'], 'inputBinding': {'position': 2, 'prefix': '-R'}}, 'O': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-O'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.O)'}}}",
    "cwl_hints": "[{'$import': 'gatk-docker.yml'}, {'$import': 'gatk-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'CombineGVCFs']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "GATK suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-CombineGVCFs",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gatk/gatk-CreateHadoopBamSplittingIndex.cwl",
    "sha": "32d69cb766448a8946bb38b5b5a4a940965d14d3",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gatk/gatk-CreateHadoopBamSplittingIndex.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: gatk-CreateHadoopBamSplittingIndex\ndoc: GATK suite\n\nhints:\n  - $import: gatk-docker.yml\n  - $import: gatk-bioconda.yml\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.I)\n\ninputs:\n  I:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -I\n  O:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -O\n      valueFrom: ${ return inputs.I.basename + \".sbi\" ;}\n\noutputs:\n output:\n    type: File\n    secondaryFiles: [.bai,.sbi]\n    outputBinding:\n      glob: $(inputs.I.basename)\n\n\nbaseCommand: [gatk, CreateHadoopBamSplittingIndex, --create-bai]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'I': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-I'}}, 'O': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-O', 'valueFrom': '${ return inputs.I.basename + \".sbi\" ;}'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'secondaryFiles': ['.bai', '.sbi'], 'outputBinding': {'glob': '$(inputs.I.basename)'}}}",
    "cwl_hints": "[{'$import': 'gatk-docker.yml'}, {'$import': 'gatk-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'CreateHadoopBamSplittingIndex', '--create-bai']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.I)']}}",
    "cwl_doc": "GATK suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-CreateHadoopBamSplittingIndex",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gatk/gatk-GatherVcfs.cwl",
    "sha": "51ebebb58cc8eb04e6c595dbd82ef1cd06386ad7",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gatk/gatk-GatherVcfs.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: gatk-GatherVcfs\ndoc: GATK suite\n\nhints:\n  - $import: gatk-docker.yml\n  - $import: gatk-bioconda.yml\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  I:\n    type: File[]\n    inputBinding:\n      shellQuote: False\n      position: 1\n      valueFrom: |\n        ${\n           var listing = \"\";\n           for (var i = 0; i < inputs.I.length; i++) {\n              listing += \" -I \" + inputs.I[i].path;\n           }\n           return listing;\n         }\n  O:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -O\n\noutputs:\n  output:\n    type: File\n    secondaryFiles: .idx\n    outputBinding:\n      glob: $(inputs.O)\n\nbaseCommand: [gatk, GatherVcfs]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'I': {'type': 'File[]', 'inputBinding': {'shellQuote': False, 'position': 1, 'valueFrom': '${\\n   var listing = \"\";\\n   for (var i = 0; i < inputs.I.length; i++) {\\n      listing += \" -I \" + inputs.I[i].path;\\n   }\\n   return listing;\\n }\\n'}}, 'O': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-O'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'secondaryFiles': '.idx', 'outputBinding': {'glob': '$(inputs.O)'}}}",
    "cwl_hints": "[{'$import': 'gatk-docker.yml'}, {'$import': 'gatk-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'GatherVcfs']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ShellCommandRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": "GATK suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-GatherVcfs",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gatk/gatk-HaplotypeCaller.cwl",
    "sha": "7ad036b4538eed5ec9bfa3060d9adf11a57a1f91",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gatk/gatk-HaplotypeCaller.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: gatk-HaplotypeCaller\ndoc: GATK suite\n\nhints:\n  - $import: gatk-docker.yml\n  - $import: gatk-bioconda.yml\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n    ramMin: 8000\n    ramMax: 16000\n\ninputs:\n  I:\n    type: File\n    secondaryFiles: [.bai, .sbi]\n    inputBinding:\n      position: 1\n      prefix: -I\n  R:\n    type: File\n    secondaryFiles: [.fai, ^.dict]\n    inputBinding:\n      position: 2\n      prefix: -R\n  O:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: -O\n  threads:\n    type: int\n    inputBinding:\n      position: 4\n      prefix: --native-pair-hmm-threads\n  intervals:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: --intervals\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.O)\n\nbaseCommand: [gatk, HaplotypeCaller]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'I': {'type': 'File', 'secondaryFiles': ['.bai', '.sbi'], 'inputBinding': {'position': 1, 'prefix': '-I'}}, 'R': {'type': 'File', 'secondaryFiles': ['.fai', '^.dict'], 'inputBinding': {'position': 2, 'prefix': '-R'}}, 'O': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-O'}}, 'threads': {'type': 'int', 'inputBinding': {'position': 4, 'prefix': '--native-pair-hmm-threads'}}, 'intervals': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '--intervals'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.O)'}}}",
    "cwl_hints": "[{'$import': 'gatk-docker.yml'}, {'$import': 'gatk-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'HaplotypeCaller']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.threads)', 'ramMin': 8000, 'ramMax': 16000}}",
    "cwl_doc": "GATK suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-HaplotypeCaller",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gatk/gatk-IndexFeatureFile.cwl",
    "sha": "45f6fdaf845840eb62402116d282290a593dc836",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gatk/gatk-IndexFeatureFile.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: gatk-IndexFeatureFile\ndoc: GATK suite\n\nhints:\n  - $import: gatk-docker.yml\n  - $import: gatk-bioconda.yml\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.I)\n\ninputs:\n  I:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -I\n\noutputs:\n  output:\n    type: File\n    secondaryFiles: .idx\n    outputBinding:\n      glob: $(inputs.I.basename)\n\nbaseCommand: [gatk, IndexFeatureFile]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'I': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-I'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'secondaryFiles': '.idx', 'outputBinding': {'glob': '$(inputs.I.basename)'}}}",
    "cwl_hints": "[{'$import': 'gatk-docker.yml'}, {'$import': 'gatk-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'IndexFeatureFile']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.I)']}}",
    "cwl_doc": "GATK suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-IndexFeatureFile",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gatk/gatk-MarkDuplicates.cwl",
    "sha": "65118171a409bc209d55a117512659743266d922",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gatk/gatk-MarkDuplicates.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: gatk-MarkDuplicatesSpark\ndoc: GATK suite\n\nhints:\n  - $import: gatk-docker.yml\n  - $import: gatk-bioconda.yml\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 1024\n\ninputs:\n  I:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -I\n  O:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -O\n  M:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: -M\n  ASO:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: -ASO\n\noutputs:\n  output:\n    type: File\n    secondaryFiles: [.bai, .sbi]\n    outputBinding:\n      glob: $(inputs.O)\n  metrics:\n    type: File\n    outputBinding:\n      glob: $(inputs.M)\n\nbaseCommand: [gatk, MarkDuplicates]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'I': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-I'}}, 'O': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-O'}}, 'M': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '-M'}}, 'ASO': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '-ASO'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'secondaryFiles': ['.bai', '.sbi'], 'outputBinding': {'glob': '$(inputs.O)'}}, 'metrics': {'type': 'File', 'outputBinding': {'glob': '$(inputs.M)'}}}",
    "cwl_hints": "[{'$import': 'gatk-docker.yml'}, {'$import': 'gatk-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'MarkDuplicates']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 1024}}",
    "cwl_doc": "GATK suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-MarkDuplicatesSpark",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gatk/gatk-MarkDuplicatesSpark.cwl",
    "sha": "26a81ad80b71b7fbd4abbfceae2425d94a1a5db4",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gatk/gatk-MarkDuplicatesSpark.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: gatk-MarkDuplicatesSpark\ndoc: GATK suite\n\nhints:\n  - $import: gatk-docker.yml\n  - $import: gatk-bioconda.yml\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 1024\n\ninputs:\n  I:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -I\n  O:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -O\n  M:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: -M\n\noutputs:\n  output:\n    type: File\n    secondaryFiles: [.bai, .sbi]\n    outputBinding:\n      glob: $(inputs.O)\n  metrics:\n    type: File\n    outputBinding:\n      glob: $(inputs.M)\n\nbaseCommand: [gatk, MarkDuplicatesSpark]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'I': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-I'}}, 'O': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-O'}}, 'M': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '-M'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'secondaryFiles': ['.bai', '.sbi'], 'outputBinding': {'glob': '$(inputs.O)'}}, 'metrics': {'type': 'File', 'outputBinding': {'glob': '$(inputs.M)'}}}",
    "cwl_hints": "[{'$import': 'gatk-docker.yml'}, {'$import': 'gatk-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'MarkDuplicatesSpark']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 1024}}",
    "cwl_doc": "GATK suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-MarkDuplicatesSpark",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gatk/gatk-SelectVariants.cwl",
    "sha": "5c25038333308c7272f1569ecb2d84554b7b41fe",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gatk/gatk-SelectVariants.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: gatk-SelectVariants\ndoc: GATK suite\n\nhints:\n  - $import: gatk-docker.yml\n  - $import: gatk-bioconda.yml\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 1024\n\ninputs:\n  V:\n    type: File\n    secondaryFiles: .idx\n    inputBinding:\n      position: 1\n      prefix: -V\n  R:\n    type: File?\n    secondaryFiles: [.fai, ^.dict]\n    inputBinding:\n      position: 3\n      prefix: -R\n  O:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -O\n  selectType:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: --select-type-to-include\n  exclude-filtered:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: --exclude-filtered\n\noutputs:\n  output:\n    type: File\n    secondaryFiles: .idx\n    outputBinding:\n      glob: $(inputs.O)\n\nbaseCommand: [gatk, SelectVariants, -OVI]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'V': {'type': 'File', 'secondaryFiles': '.idx', 'inputBinding': {'position': 1, 'prefix': '-V'}}, 'R': {'type': 'File?', 'secondaryFiles': ['.fai', '^.dict'], 'inputBinding': {'position': 3, 'prefix': '-R'}}, 'O': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-O'}}, 'selectType': {'type': 'string?', 'inputBinding': {'position': 4, 'prefix': '--select-type-to-include'}}, 'exclude-filtered': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '--exclude-filtered'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'secondaryFiles': '.idx', 'outputBinding': {'glob': '$(inputs.O)'}}}",
    "cwl_hints": "[{'$import': 'gatk-docker.yml'}, {'$import': 'gatk-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'SelectVariants', '-OVI']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 1024}}",
    "cwl_doc": "GATK suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-SelectVariants",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gatk/gatk-VariantFiltration.cwl",
    "sha": "09c082c5e254bef98bd0cb3c2148a895199f54a2",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gatk/gatk-VariantFiltration.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: gatk-VariantFiltration\ndoc: GATK suite\n\nhints:\n  - $import: gatk-docker.yml\n  - $import: gatk-bioconda.yml\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 1024\n\ninputs:\n  V:\n    type: File\n    secondaryFiles: .idx\n    inputBinding:\n      position: 1\n      prefix: -V\n  R:\n    type: File\n    secondaryFiles: [.fai, ^.dict]\n    inputBinding:\n      position: 2\n      prefix: -R\n  O:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: -O\n  filters:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"string\"}}\n    inputBinding:\n      position: 4\n      shellQuote: false\n      valueFrom: |\n        ${\n            var argument = \"\";\n            for (var j = 0; j < inputs.filters.length; j++) {\n              argument += '--filter-name \"' +  inputs.filters[j][0] + '\" --filter-expression \"' + inputs.filters[j][1] + '\" ';\n            }\n            return argument;\n         }\n\noutputs:\n  output:\n    type: File\n    secondaryFiles: .idx\n    outputBinding:\n      glob: $(inputs.O)\n\nbaseCommand: [gatk, VariantFiltration, -OVI]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'V': {'type': 'File', 'secondaryFiles': '.idx', 'inputBinding': {'position': 1, 'prefix': '-V'}}, 'R': {'type': 'File', 'secondaryFiles': ['.fai', '^.dict'], 'inputBinding': {'position': 2, 'prefix': '-R'}}, 'O': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-O'}}, 'filters': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'string'}}, 'inputBinding': {'position': 4, 'shellQuote': False, 'valueFrom': '${\\n    var argument = \"\";\\n    for (var j = 0; j < inputs.filters.length; j++) {\\n      argument += \\'--filter-name \"\\' +  inputs.filters[j][0] + \\'\" --filter-expression \"\\' + inputs.filters[j][1] + \\'\" \\';\\n    }\\n    return argument;\\n }\\n'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'secondaryFiles': '.idx', 'outputBinding': {'glob': '$(inputs.O)'}}}",
    "cwl_hints": "[{'$import': 'gatk-docker.yml'}, {'$import': 'gatk-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'VariantFiltration', '-OVI']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ShellCommandRequirement': {}, 'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 1024}}",
    "cwl_doc": "GATK suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-VariantFiltration",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gem/gem.cwl",
    "sha": "3810a542a80c8d53c756524e0a6610fea4450a4d",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gem/gem.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: GEM\ndoc: EM is a scientific software for studying protein-DNA interaction at high resolution using ChIP-seq/ChIP-exo data.\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: gem-docker.yml\n\ninputs:\n    t:\n        type: int?\n        inputBinding:\n            position: 2\n            prefix: --t\n    g:\n        type: File\n        inputBinding:\n            position: 1\n            prefix: --g\n    s:\n        type: int?\n        inputBinding:\n            position: 2\n            prefix: --s\n    d:\n        type: string\n        inputBinding:\n            position: 3\n            prefix: --d\n            valueFrom: ${ return '/usr/local/gem/' + inputs.d;}\n    expt:\n        type: File?\n        inputBinding:\n            position: 4\n            prefix: --expt\n    f:\n        type: string\n        inputBinding:\n            position: 5\n            prefix: --f\n    genome:\n        type: Directory\n        inputBinding:\n            position: 6\n            prefix: --genome\n    out:\n        type: string\n        inputBinding:\n            position: 7\n            prefix: --out\n    k_min:\n        type: int\n        inputBinding:\n            position: 8\n            prefix: --k_min\n    k_max:\n        type: int\n        inputBinding:\n            position: 8\n            prefix: --k_max\n    k_seqs:\n        type: int?\n        inputBinding:\n            position: 9\n            prefix: --k_seqs\n    outNP:\n        type: boolean?\n        inputBinding:\n            position: 10\n            prefix: --outNP\n    smooth:\n        type: int\n        inputBinding:\n            position: 11\n            prefix: --smooth\n\noutputs:\n    output:\n        type: Directory\n        outputBinding:\n            glob: $(inputs.out)\n\nbaseCommand: [\"java\", \"-Xmx10G\", \"-jar\", \"/usr/local/gem/gem.jar\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/kundajelab/phantompeakqualtools\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'t': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '--t'}}, 'g': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '--g'}}, 's': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '--s'}}, 'd': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '--d', 'valueFrom': \"${ return '/usr/local/gem/' + inputs.d;}\"}}, 'expt': {'type': 'File?', 'inputBinding': {'position': 4, 'prefix': '--expt'}}, 'f': {'type': 'string', 'inputBinding': {'position': 5, 'prefix': '--f'}}, 'genome': {'type': 'Directory', 'inputBinding': {'position': 6, 'prefix': '--genome'}}, 'out': {'type': 'string', 'inputBinding': {'position': 7, 'prefix': '--out'}}, 'k_min': {'type': 'int', 'inputBinding': {'position': 8, 'prefix': '--k_min'}}, 'k_max': {'type': 'int', 'inputBinding': {'position': 8, 'prefix': '--k_max'}}, 'k_seqs': {'type': 'int?', 'inputBinding': {'position': 9, 'prefix': '--k_seqs'}}, 'outNP': {'type': 'boolean?', 'inputBinding': {'position': 10, 'prefix': '--outNP'}}, 'smooth': {'type': 'int', 'inputBinding': {'position': 11, 'prefix': '--smooth'}}}",
    "cwl_outputs": "{'output': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.out)'}}}",
    "cwl_hints": "[{'$import': 'gem-docker.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['java', '-Xmx10G', '-jar', '/usr/local/gem/gem.jar']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "EM is a scientific software for studying protein-DNA interaction at high resolution using ChIP-seq/ChIP-exo data.",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "GEM",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/kundajelab/phantompeakqualtools",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/gffread/gffread.cwl",
    "sha": "d7af4daae14c6eb0ee838e7cda82c772842d4e9f",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/gffread/gffread.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: GFFread\ndoc: gffread can be used to validate, filter, convert and perform various other operations on GFF files\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: gffread-docker.yml\n  - $import: gffread-bioconda.yml\n\ninputs:\n  input:\n    type: File\n    inputBinding:\n      position: 1\n  T:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: -T\n  o:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: -o\n\n\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n\nbaseCommand: [\"gffread\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://ccb.jhu.edu/software/stringtie/gff.shtml\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'input': {'type': 'File', 'inputBinding': {'position': 1}}, 'T': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '-T'}}, 'o': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-o'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}}",
    "cwl_hints": "[{'$import': 'gffread-docker.yml'}, {'$import': 'gffread-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gffread']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "gffread can be used to validate, filter, convert and perform various other operations on GFF files",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "GFFread",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://ccb.jhu.edu/software/stringtie/gff.shtml",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/hicexplorer/hicbuildmatrix.cwl",
    "sha": "5f26eade7f5d84e4df385aaa4ef76c7b7c7abd58",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/hicexplorer/hicbuildmatrix.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: hicBuildMatrix\ndoc: Build HiC matrix from independently mated read pairs\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n\nhints:\n  - $import: hicexplorer-docker.yml\n  - $import: hicexplorer-bioconda.yml\n\ninputs:\n  samFiles:\n    type: File[]\n    inputBinding:\n      position: 1\n      prefix: --samFiles\n  binSize:\n    type: int\n    inputBinding:\n      position: 2\n      prefix: --binSize\n  restrictionSequence:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: --restrictionSequence\n  threads:\n    type: int\n    inputBinding:\n      position: 4\n      prefix: --threads\n  inputBufferSize:\n    type: int\n    inputBinding:\n      position: 5\n      prefix: --inputBufferSize\n  outBam:\n    type: string\n    inputBinding:\n      position: 6\n      prefix: --outBam\n  o:\n    type: string\n    inputBinding:\n      position: 7\n      prefix: -o\n  QCfolder:\n    type: string\n    inputBinding:\n      position: 8\n      prefix: --QCfolder\n\noutputs:\n  out_bam:\n    type: File\n    outputBinding:\n      glob: $(inputs.outBam)\n  out:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n  out_qc:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.QCfolder)\n\nbaseCommand: [\"hicBuildMatrix\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'samFiles': {'type': 'File[]', 'inputBinding': {'position': 1, 'prefix': '--samFiles'}}, 'binSize': {'type': 'int', 'inputBinding': {'position': 2, 'prefix': '--binSize'}}, 'restrictionSequence': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '--restrictionSequence'}}, 'threads': {'type': 'int', 'inputBinding': {'position': 4, 'prefix': '--threads'}}, 'inputBufferSize': {'type': 'int', 'inputBinding': {'position': 5, 'prefix': '--inputBufferSize'}}, 'outBam': {'type': 'string', 'inputBinding': {'position': 6, 'prefix': '--outBam'}}, 'o': {'type': 'string', 'inputBinding': {'position': 7, 'prefix': '-o'}}, 'QCfolder': {'type': 'string', 'inputBinding': {'position': 8, 'prefix': '--QCfolder'}}}",
    "cwl_outputs": "{'out_bam': {'type': 'File', 'outputBinding': {'glob': '$(inputs.outBam)'}}, 'out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}, 'out_qc': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.QCfolder)'}}}",
    "cwl_hints": "[{'$import': 'hicexplorer-docker.yml'}, {'$import': 'hicexplorer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['hicBuildMatrix']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.threads)'}}",
    "cwl_doc": "Build HiC matrix from independently mated read pairs",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "hicBuildMatrix",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/hicexplorer/hiccorrectmatrix-correct.cwl",
    "sha": "44024bdfdca1b4bf3f48f0966aff8d9f2606f2e7",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/hicexplorer/hiccorrectmatrix-correct.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: hicCorrectMatrix-correct\ndoc: Correct HiC matrices bins\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: hicexplorer-docker.yml\n  - $import: hicexplorer-bioconda.yml\n\ninputs:\n  matrix:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: --matrix\n  outFileName:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --outFileName\n  correctionMethod:\n    type: string[]?\n    inputBinding:\n      position: 3\n      prefix: --correctionMethod\n  filterThreshold:\n    type: string[]\n    inputBinding:\n      position: 4\n      prefix: --filterThreshold\n      shellQuote: false\n  iterNum:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: --iterNum\n  inflationCutoff:\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: --inflationCutoff\n  transCutoff:\n    type: float?\n    inputBinding:\n      position: 6\n      prefix: --transCutoff\n  sequencedCountCutoff:\n    type: float?\n    inputBinding:\n      position: 7\n      prefix: --sequencedCountCutoff\n  chromosome:\n    type: string[]?\n    inputBinding:\n      position: 8\n      prefix: --chromosomes\n      shellQuote: false\n  skipDiagonal:\n    type: boolean?\n    inputBinding:\n      position: 9\n      prefix: --chromosomes\n  perchr:\n    type: boolean?\n    inputBinding:\n      position: 10\n      prefix: --perchr\n\noutputs:\n  out:\n    type: File\n    outputBinding:\n      glob: $(inputs.outFileName)\n\nbaseCommand: [\"hicCorrectMatrix\", \"correct\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'matrix': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '--matrix'}}, 'outFileName': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--outFileName'}}, 'correctionMethod': {'type': 'string[]?', 'inputBinding': {'position': 3, 'prefix': '--correctionMethod'}}, 'filterThreshold': {'type': 'string[]', 'inputBinding': {'position': 4, 'prefix': '--filterThreshold', 'shellQuote': False}}, 'iterNum': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '--iterNum'}}, 'inflationCutoff': {'type': 'int?', 'inputBinding': {'position': 6, 'prefix': '--inflationCutoff'}}, 'transCutoff': {'type': 'float?', 'inputBinding': {'position': 6, 'prefix': '--transCutoff'}}, 'sequencedCountCutoff': {'type': 'float?', 'inputBinding': {'position': 7, 'prefix': '--sequencedCountCutoff'}}, 'chromosome': {'type': 'string[]?', 'inputBinding': {'position': 8, 'prefix': '--chromosomes', 'shellQuote': False}}, 'skipDiagonal': {'type': 'boolean?', 'inputBinding': {'position': 9, 'prefix': '--chromosomes'}}, 'perchr': {'type': 'boolean?', 'inputBinding': {'position': 10, 'prefix': '--perchr'}}}",
    "cwl_outputs": "{'out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.outFileName)'}}}",
    "cwl_hints": "[{'$import': 'hicexplorer-docker.yml'}, {'$import': 'hicexplorer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['hicCorrectMatrix', 'correct']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Correct HiC matrices bins",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "hicCorrectMatrix-correct",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/hicexplorer/hiccorrectmatrix-diagnostic-plot.cwl",
    "sha": "a3416d671251342c251dd806f3bfc921134f6b74",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/hicexplorer/hiccorrectmatrix-diagnostic-plot.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: hicCorrectMatrix-diagnostic_plot\ndoc: Correct HiC matrices diagnostic plot\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: hicexplorer-docker.yml\n  - $import: hicexplorer-bioconda.yml\n\ninputs:\n  matrix:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: --matrix\n  plotName:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --plotName\n  chromosome:\n    type: string[]?\n    inputBinding:\n      position: 3\n      prefix: --chromosomes\n      shellQuote: false\n  xMax:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: --xMax\n  perchr:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --perchr\n\noutputs:\n  out:\n    type: File\n    outputBinding:\n      glob: $(inputs.plotName)\n\nbaseCommand: [\"hicCorrectMatrix\", \"diagnostic_plot\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'matrix': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '--matrix'}}, 'plotName': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--plotName'}}, 'chromosome': {'type': 'string[]?', 'inputBinding': {'position': 3, 'prefix': '--chromosomes', 'shellQuote': False}}, 'xMax': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '--xMax'}}, 'perchr': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--perchr'}}}",
    "cwl_outputs": "{'out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.plotName)'}}}",
    "cwl_hints": "[{'$import': 'hicexplorer-docker.yml'}, {'$import': 'hicexplorer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['hicCorrectMatrix', 'diagnostic_plot']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Correct HiC matrices diagnostic plot",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "hicCorrectMatrix-diagnostic_plot",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/hicexplorer/hicdetectloops.cwl",
    "sha": "57821bb2c828685eae7e0fcd8501d94a2370f4f1",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/hicexplorer/hicdetectloops.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: hicDetectLoops\ndoc: Detect Loops from HiC matrix\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: |\n      ${\n        if (inputs.threads && inputs.threadsPerChromosome){\n          return  parseInt(inputs.threads, 10) * parseInt(inputs.threadsPerChromosome, 10);\n        }else if (inputs.threads && !inputs.threadsPerChromosome){\n          return  parseInt(inputs.threads, 10) * 4;\n        }else if (!inputs.threads && inputs.threadsPerChromosome){\n          return inputs.threadsPerChromosome;\n        }\n        return 4;\n      }\n\nhints:\n  - $import: hicexplorer-docker.yml\n  - $import: hicexplorer-bioconda.yml\n\ninputs:\n  matrix:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: --matrix\n  outFileName:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --outFileName\n  windowSize:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --windowSize\n  pValuePreselection:\n    type: float?\n    inputBinding:\n      position: 4\n      prefix: --pValuePreselection\n  peakInteractionsThreshold:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: --peakInteractionsThreshold\n  obsExpThreshold:\n    type: float?\n    inputBinding:\n      position: 6\n      prefix: --obsExpThreshold\n  pValue:\n    type: float?\n    inputBinding:\n      position: 7\n      prefix: --pValue\n  maxLoopDistance:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: --maxLoopDistance\n  chromosomes:\n    type: string[]?\n    inputBinding:\n      position: 9\n      prefix: --chromosomes\n      shellQuote: false\n  threads:\n    type: int?\n    inputBinding:\n      position: 10\n      prefix: --threads\n  threadsPerChromosome:\n    type: int?\n    inputBinding:\n      position: 11\n      prefix: --threadsPerChromosome\n  expected:\n    type: string?\n    inputBinding:\n      position:\n      prefix: --expected\n\noutputs:\n  out:\n    type: File\n    outputBinding:\n      glob: $(inputs.outFileName)\n\nbaseCommand: [\"hicDetectLoops\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'matrix': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '--matrix'}}, 'outFileName': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--outFileName'}}, 'windowSize': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--windowSize'}}, 'pValuePreselection': {'type': 'float?', 'inputBinding': {'position': 4, 'prefix': '--pValuePreselection'}}, 'peakInteractionsThreshold': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '--peakInteractionsThreshold'}}, 'obsExpThreshold': {'type': 'float?', 'inputBinding': {'position': 6, 'prefix': '--obsExpThreshold'}}, 'pValue': {'type': 'float?', 'inputBinding': {'position': 7, 'prefix': '--pValue'}}, 'maxLoopDistance': {'type': 'int?', 'inputBinding': {'position': 8, 'prefix': '--maxLoopDistance'}}, 'chromosomes': {'type': 'string[]?', 'inputBinding': {'position': 9, 'prefix': '--chromosomes', 'shellQuote': False}}, 'threads': {'type': 'int?', 'inputBinding': {'position': 10, 'prefix': '--threads'}}, 'threadsPerChromosome': {'type': 'int?', 'inputBinding': {'position': 11, 'prefix': '--threadsPerChromosome'}}, 'expected': {'type': 'string?', 'inputBinding': {'position': None, 'prefix': '--expected'}}}",
    "cwl_outputs": "{'out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.outFileName)'}}}",
    "cwl_hints": "[{'$import': 'hicexplorer-docker.yml'}, {'$import': 'hicexplorer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['hicDetectLoops']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '${\\n  if (inputs.threads && inputs.threadsPerChromosome){\\n    return  parseInt(inputs.threads, 10) * parseInt(inputs.threadsPerChromosome, 10);\\n  }else if (inputs.threads && !inputs.threadsPerChromosome){\\n    return  parseInt(inputs.threads, 10) * 4;\\n  }else if (!inputs.threads && inputs.threadsPerChromosome){\\n    return inputs.threadsPerChromosome;\\n  }\\n  return 4;\\n}\\n'}}",
    "cwl_doc": "Detect Loops from HiC matrix",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "hicDetectLoops",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/hicexplorer/hicfindtads.cwl",
    "sha": "6ea52e4323f0a4a54af2810f6b6c0cddd9835228",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/hicexplorer/hicfindtads.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: hicFindTADs\ndoc: Find HiC topologically associating domains (TADs)\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.numberOfProcessors)\n\nhints:\n  - $import: hicexplorer-docker.yml\n  - $import: hicexplorer-bioconda.yml\n\ninputs:\n  matrix:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: --matrix\n  outPrefix:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --outPrefix\n  correctForMultipleTesting:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: --correctForMultipleTesting\n  minDepth:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: --minDepth\n  maxDepth:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: --maxDepth\n  step:\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: --step\n  TAD_sep_score_prefix:\n    type: string?\n    inputBinding:\n      position: 7\n      prefix: -TAD_sep_score_prefix\n  thresholdComparisons:\n    type: float?\n    inputBinding:\n      position: 8\n      prefix: --thresholdComparisons\n  delta:\n    type: float?\n    inputBinding:\n      position: 9\n      prefix: --delta\n  minBoundaryDistance:\n    type: int?\n    inputBinding:\n      position: 10\n      prefix: --minBoundaryDistance\n  numberOfProcessors:\n    type: int?\n    inputBinding:\n      position: 11\n      prefix: --numberOfProcessors\n  chromosomes:\n    type: string[]?\n    inputBinding:\n      position: 12\n      prefix: --chromosomes\n      shellQuote: false\n\n\noutputs:\n  out:\n    type: File[]\n    outputBinding:\n      glob: $(inputs.outPrefix)*\n\nbaseCommand: [\"hicFindTADs\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'matrix': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '--matrix'}}, 'outPrefix': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--outPrefix'}}, 'correctForMultipleTesting': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '--correctForMultipleTesting'}}, 'minDepth': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '--minDepth'}}, 'maxDepth': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '--maxDepth'}}, 'step': {'type': 'int?', 'inputBinding': {'position': 6, 'prefix': '--step'}}, 'TAD_sep_score_prefix': {'type': 'string?', 'inputBinding': {'position': 7, 'prefix': '-TAD_sep_score_prefix'}}, 'thresholdComparisons': {'type': 'float?', 'inputBinding': {'position': 8, 'prefix': '--thresholdComparisons'}}, 'delta': {'type': 'float?', 'inputBinding': {'position': 9, 'prefix': '--delta'}}, 'minBoundaryDistance': {'type': 'int?', 'inputBinding': {'position': 10, 'prefix': '--minBoundaryDistance'}}, 'numberOfProcessors': {'type': 'int?', 'inputBinding': {'position': 11, 'prefix': '--numberOfProcessors'}}, 'chromosomes': {'type': 'string[]?', 'inputBinding': {'position': 12, 'prefix': '--chromosomes', 'shellQuote': False}}}",
    "cwl_outputs": "{'out': {'type': 'File[]', 'outputBinding': {'glob': '$(inputs.outPrefix)*'}}}",
    "cwl_hints": "[{'$import': 'hicexplorer-docker.yml'}, {'$import': 'hicexplorer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['hicFindTADs']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.numberOfProcessors)'}}",
    "cwl_doc": "Find HiC topologically associating domains (TADs)",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "hicFindTADs",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/hicexplorer/hicmergematrixbins.cwl",
    "sha": "8cd3ffb6c9040aead4d76454b57f1d86c1093ee1",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/hicexplorer/hicmergematrixbins.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: hicMergeMatrixBins\ndoc: Merge HiC matrices bins\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: hicexplorer-docker.yml\n  - $import: hicexplorer-bioconda.yml\n\ninputs:\n  matrix:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: --matrix\n  outFileName:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --outFileName\n  numBins:\n    type: int\n    inputBinding:\n      position: 3\n      prefix: --numBins\n  runningWindow:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: --runningWindow\n\noutputs:\n  out:\n    type: File\n    outputBinding:\n      glob: $(inputs.outFileName)\n\nbaseCommand: [\"hicMergeMatrixBins\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'matrix': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '--matrix'}}, 'outFileName': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--outFileName'}}, 'numBins': {'type': 'int', 'inputBinding': {'position': 3, 'prefix': '--numBins'}}, 'runningWindow': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '--runningWindow'}}}",
    "cwl_outputs": "{'out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.outFileName)'}}}",
    "cwl_hints": "[{'$import': 'hicexplorer-docker.yml'}, {'$import': 'hicexplorer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['hicMergeMatrixBins']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Merge HiC matrices bins",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "hicMergeMatrixBins",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/hicexplorer/hicplotmatrix.cwl",
    "sha": "47f594315a36146fffbd22998901d65a214d4bcc",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/hicexplorer/hicplotmatrix.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: hicplotmatrix\ndoc: Correct HiC matrices bins\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: hicexplorer-docker.yml\n  - $import: hicexplorer-bioconda.yml\n\ninputs:\n  matrix:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: --matrix\n  outFileName:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --outFileName\n  title:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: --title\n  scoreName:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: --scoreName\n  perChromosome:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: --perChromosome\n  clearMaskedBins:\n    type: boolean?\n    inputBinding:\n      position: 6\n      prefix: --clearMaskedBins\n  chromosomeOrder:\n    type: string[]?\n    inputBinding:\n      position: 6\n      prefix: --chromosomeOrder\n      shellQuote: false\n  region:\n    type: string?\n    inputBinding:\n      position: 7\n      prefix: --region\n  region2:\n    type: string?\n    inputBinding:\n      position: 8\n      prefix: --region2\n  dpi:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: --dpi\n  log1p:\n    type: boolean?\n    inputBinding:\n      position: 9\n      prefix: --log1p\n  log:\n    type: boolean?\n    inputBinding:\n      position: 10\n      prefix: --log\n  colorMap:\n    type: string?\n    inputBinding:\n      position: 11\n      prefix: --colorMap\n  vMin:\n    type: float?\n    inputBinding:\n      position: 12\n      prefix: --vMin\n  vMax:\n    type: float?\n    inputBinding:\n      position: 13\n      prefix: --vMax\n  bigwig:\n    type: boolean?\n    inputBinding:\n      position: 14\n      prefix: --bigwig\n  bigwigAdditionalVerticalAxis:\n    type: boolean?\n    inputBinding:\n      position: 14\n      prefix: --bigwigAdditionalVerticalAxis\n  vMinBigwig:\n    type: float?\n    inputBinding:\n      position: 14\n      prefix: --vMinBigwig\n  vMaxBigwig:\n    type: float?\n    inputBinding:\n      position: 14\n      prefix: --vMaxBigwig\n  flipBigwigSign:\n    type: boolean?\n    inputBinding:\n      position: 14\n      prefix: --flipBigwigSign\n  scaleFactorBigwig:\n    type: float?\n    inputBinding:\n      position: 14\n      prefix: --scaleFactorBigwig\n  fontsize:\n    type: int?\n    inputBinding:\n      position: 14\n      prefix: --fontsize\n  rotationX:\n    type: int?\n    inputBinding:\n      position: 14\n      prefix: --rotationX\n  rotationY:\n    type: int?\n    inputBinding:\n      position: 14\n      prefix: --rotationY\n  loops:\n    type: boolean?\n    inputBinding:\n      position: 14\n      prefix: --loops\n\noutputs:\n  out:\n    type: File\n    outputBinding:\n      glob: $(inputs.outFileName)\n\nbaseCommand: [\"hicPlotMatrix\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'matrix': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '--matrix'}}, 'outFileName': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--outFileName'}}, 'title': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '--title'}}, 'scoreName': {'type': 'string?', 'inputBinding': {'position': 4, 'prefix': '--scoreName'}}, 'perChromosome': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '--perChromosome'}}, 'clearMaskedBins': {'type': 'boolean?', 'inputBinding': {'position': 6, 'prefix': '--clearMaskedBins'}}, 'chromosomeOrder': {'type': 'string[]?', 'inputBinding': {'position': 6, 'prefix': '--chromosomeOrder', 'shellQuote': False}}, 'region': {'type': 'string?', 'inputBinding': {'position': 7, 'prefix': '--region'}}, 'region2': {'type': 'string?', 'inputBinding': {'position': 8, 'prefix': '--region2'}}, 'dpi': {'type': 'int?', 'inputBinding': {'position': 8, 'prefix': '--dpi'}}, 'log1p': {'type': 'boolean?', 'inputBinding': {'position': 9, 'prefix': '--log1p'}}, 'log': {'type': 'boolean?', 'inputBinding': {'position': 10, 'prefix': '--log'}}, 'colorMap': {'type': 'string?', 'inputBinding': {'position': 11, 'prefix': '--colorMap'}}, 'vMin': {'type': 'float?', 'inputBinding': {'position': 12, 'prefix': '--vMin'}}, 'vMax': {'type': 'float?', 'inputBinding': {'position': 13, 'prefix': '--vMax'}}, 'bigwig': {'type': 'boolean?', 'inputBinding': {'position': 14, 'prefix': '--bigwig'}}, 'bigwigAdditionalVerticalAxis': {'type': 'boolean?', 'inputBinding': {'position': 14, 'prefix': '--bigwigAdditionalVerticalAxis'}}, 'vMinBigwig': {'type': 'float?', 'inputBinding': {'position': 14, 'prefix': '--vMinBigwig'}}, 'vMaxBigwig': {'type': 'float?', 'inputBinding': {'position': 14, 'prefix': '--vMaxBigwig'}}, 'flipBigwigSign': {'type': 'boolean?', 'inputBinding': {'position': 14, 'prefix': '--flipBigwigSign'}}, 'scaleFactorBigwig': {'type': 'float?', 'inputBinding': {'position': 14, 'prefix': '--scaleFactorBigwig'}}, 'fontsize': {'type': 'int?', 'inputBinding': {'position': 14, 'prefix': '--fontsize'}}, 'rotationX': {'type': 'int?', 'inputBinding': {'position': 14, 'prefix': '--rotationX'}}, 'rotationY': {'type': 'int?', 'inputBinding': {'position': 14, 'prefix': '--rotationY'}}, 'loops': {'type': 'boolean?', 'inputBinding': {'position': 14, 'prefix': '--loops'}}}",
    "cwl_outputs": "{'out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.outFileName)'}}}",
    "cwl_hints": "[{'$import': 'hicexplorer-docker.yml'}, {'$import': 'hicexplorer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['hicPlotMatrix']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Correct HiC matrices bins",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "hicplotmatrix",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/hicexplorer/hicplottads.cwl",
    "sha": "1495bc337435202d54fb4e31a9b4df8bfdabe908",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/hicexplorer/hicplottads.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: hicPlotTADs\ndoc: Plot HiC topologically associating domains (TADs)\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.files)\n\nhints:\n  - $import: hicexplorer-docker.yml\n  - $import: hicexplorer-bioconda.yml\n\ninputs:\n  files:\n    type: File[]\n  tracks:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: --tracks\n  region:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --region\n  outFileName:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: --outFileName\n  t:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: -t\n\n\noutputs:\n  out:\n    type: File\n    outputBinding:\n      glob: $(inputs.outFileName)\n\nbaseCommand: [\"hicPlotTADs\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'files': {'type': 'File[]'}, 'tracks': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '--tracks'}}, 'region': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--region'}}, 'outFileName': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '--outFileName'}}, 't': {'type': 'string?', 'inputBinding': {'position': 4, 'prefix': '-t'}}}",
    "cwl_outputs": "{'out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.outFileName)'}}}",
    "cwl_hints": "[{'$import': 'hicexplorer-docker.yml'}, {'$import': 'hicexplorer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['hicPlotTADs']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.files)']}}",
    "cwl_doc": "Plot HiC topologically associating domains (TADs)",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "hicPlotTADs",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/hicexplorer/hicsummatrices.cwl",
    "sha": "8e167481b90b197dd3b7654d660b933e70d15897",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/hicexplorer/hicsummatrices.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: hicSumMatrices\ndoc: Sum HiC matrices\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: hicexplorer-docker.yml\n  - $import: hicexplorer-bioconda.yml\n\ninputs:\n  matrices:\n    type: File[]\n    inputBinding:\n      position: 1\n      prefix: --matrices\n  outFileName:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --outFileName\n\noutputs:\n  out:\n    type: File\n    outputBinding:\n      glob: $(inputs.outFileName)\n\nbaseCommand: [\"hicSumMatrices\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'matrices': {'type': 'File[]', 'inputBinding': {'position': 1, 'prefix': '--matrices'}}, 'outFileName': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--outFileName'}}}",
    "cwl_outputs": "{'out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.outFileName)'}}}",
    "cwl_hints": "[{'$import': 'hicexplorer-docker.yml'}, {'$import': 'hicexplorer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['hicSumMatrices']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Sum HiC matrices",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "hicSumMatrices",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/hmmer/hmmbuild.cwl",
    "sha": "32d784d9b405b63db75230308cd06ede5b140c1a",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/hmmer/hmmbuild.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: hmmbuild\ndoc: prepare an HMM database\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: hmmer-docker.yml\n  - $import: hmmer-bioconda.yml\n\ninputs:\n  msa:\n    type: File\n    inputBinding:\n      position: 2\n    doc: |\n      MSA file\n  hmm:\n    type: string\n    inputBinding:\n      position: 1\n\noutputs:\n  hmm:\n    type: File\n    outputBinding:\n      glob: $(inputs.hmm)\n\nbaseCommand: [\"hmmbuild\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://hmmer.org/\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'msa': {'type': 'File', 'inputBinding': {'position': 2}, 'doc': 'MSA file\\n'}, 'hmm': {'type': 'string', 'inputBinding': {'position': 1}}}",
    "cwl_outputs": "{'hmm': {'type': 'File', 'outputBinding': {'glob': '$(inputs.hmm)'}}}",
    "cwl_hints": "[{'$import': 'hmmer-docker.yml'}, {'$import': 'hmmer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['hmmbuild']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "prepare an HMM database",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "hmmbuild",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://hmmer.org/",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/hmmer/hmmpress.cwl",
    "sha": "fe8c848365332168556143ca271190a1dceee66f",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/hmmer/hmmpress.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: hmmpress\ndoc: prepare an HMM database for faster hmmscan searches\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.hmmfile)\n\nhints:\n  - $import: hmmer-docker.yml\n  - $import: hmmer-bioconda.yml\n\ninputs:\n  f:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -f\n    doc: |\n      overwrite any previous pressed files\n  hmmfile:\n    type: File\n    inputBinding:\n      position: 2\n\noutputs:\n  h3f:\n    type: File\n    outputBinding:\n      glob: $(inputs.hmmfile.basename).h3f\n  h3i:\n    type: File\n    outputBinding:\n      glob: $(inputs.hmmfile.basename).h3i\n  h3m:\n    type: File\n    outputBinding:\n      glob: $(inputs.hmmfile.basename).h3m\n  h3p:\n    type: File\n    outputBinding:\n      glob: $(inputs.hmmfile.basename).h3p\n\nbaseCommand: [\"hmmpress\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://hmmer.org/\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'f': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-f'}, 'doc': 'overwrite any previous pressed files\\n'}, 'hmmfile': {'type': 'File', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'h3f': {'type': 'File', 'outputBinding': {'glob': '$(inputs.hmmfile.basename).h3f'}}, 'h3i': {'type': 'File', 'outputBinding': {'glob': '$(inputs.hmmfile.basename).h3i'}}, 'h3m': {'type': 'File', 'outputBinding': {'glob': '$(inputs.hmmfile.basename).h3m'}}, 'h3p': {'type': 'File', 'outputBinding': {'glob': '$(inputs.hmmfile.basename).h3p'}}}",
    "cwl_hints": "[{'$import': 'hmmer-docker.yml'}, {'$import': 'hmmer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['hmmpress']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.hmmfile)']}}",
    "cwl_doc": "prepare an HMM database for faster hmmscan searches",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "hmmpress",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://hmmer.org/",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/hmmer/hmmscan.cwl",
    "sha": "326bcdf5f4f5effa1acc5188658814a6805e2efb",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/hmmer/hmmscan.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: hmmscan\ndoc: Search sequence(s) against a profile database\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: hmmer-docker.yml\n  - $import: hmmer-bioconda.yml\n\ninputs:\n  o:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -o\n    doc: |\n      direct output to file <f>, not stdout\n  tblout:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --tblout\n    doc: |\n      save parseable table of per-sequence hits to file\n  domtblout:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --domtblout\n    doc: |\n      save parseable table of per-domain hits to file\n  pfamtblout:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --pfamtblout\n    doc: |\n      save table of hits and domains to file, in Pfam format\n  acc:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --acc\n    doc: |\n      prefer accessions over names in output\n  noali:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --noali\n    doc: |\n      don't output alignments, so output is smaller\n  notextw:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --notextw\n    doc: |\n      unlimit ASCII text output line width\n  textw:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: --textw\n    doc: |\n      set max width of ASCII text output lines  [120]  (n>=120)\n  E:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -E\n    doc: |\n      report models <= this E-value threshold in output  [10.0]  (x>0)\n  T:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -T\n    doc: |\n      report models >= this score threshold in output\n  domE:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: --domE\n    doc: |\n      report domains <= this E-value threshold in output  [10.0]  (x>0)\n  domT:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: --domT\n    doc: |\n      report domains >= this score cutoff in output\n  incE:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: --incE\n    doc: |\n      consider models <= this E-value threshold as significant\n  incT:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: --incT\n    doc: |\n      consider models >= this score threshold as significant\n  incdomE:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: --incdomE\n    doc: |\n      consider domains <= this E-value threshold as significant\n  incdomT:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: --incdomT\n    doc: |\n      consider domains >= this score threshold as significant\n  cut_ga:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --cut_ga\n    doc: |\n      use profile's GA gathering cutoffs to set all thresholding\n  cut_nc:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --cut_nc\n    doc: |\n      use profile's NC noise cutoffs to set all thresholding\n  cut_tc:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --cut_tc\n    doc: |\n      use profile's TC trusted cutoffs to set all thresholding\n  max:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --max\n    doc: |\n      Turn all heuristic filters off (less speed, more power)\n  F1:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: --F1\n    doc: |\n      MSV threshold: promote hits w/ P <= F1  [0.02]\n  F2:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: --F2\n    doc: |\n      Vit threshold: promote hits w/ P <= F2  [1e-3]\n  F3:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: --F3\n    doc: |\n      Fwd threshold: promote hits w/ P <= F3  [1e-5]\n  nobias:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --nobias\n    doc: |\n      turn off composition bias filter\n  nonull2:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --nonull2\n    doc: |\n      turn off biased composition score corrections\n  Z:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -Z\n    doc: |\n      set # of comparisons done, for E-value calculation\n  domZ:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: --domZ\n    doc: |\n      set # of significant seqs, for domain E-value calculation\n  seed:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: --seed\n    doc: |\n      set RNG seed to <n> (if 0: one-time arbitrary seed)  [42]\n  qformat:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --qformat\n    doc: |\n      assert input <seqfile> is in format <s>: no autodetection\n  cpu:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: --cpu\n    doc: |\n      number of parallel CPU workers to use for multithreads  [2]\n  dbdir:\n    type: Directory\n    doc: |\n      Database directory\n  hmmdb:\n    type: string\n    inputBinding:\n      position: 2\n      valueFrom: |\n        ${\n          return inputs.dbdir.path + \"/\" + self;\n        }\n    doc: |\n      HMM database name\n  seqfile:\n    type: File\n    inputBinding:\n      position: 3\n    doc: |\n      Sequence file\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n  output_tblout:\n    type: File?\n    outputBinding:\n      glob: $(inputs.tblout)\n  output_domtblout:\n    type: File?\n    outputBinding:\n      glob: $(inputs.domtblout)\n  output_pfamtblout:\n    type: File?\n    outputBinding:\n      glob: $(inputs.pfamtblout)\n\nbaseCommand: [\"hmmscan\"]\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'o': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-o'}, 'doc': 'direct output to file <f>, not stdout\\n'}, 'tblout': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--tblout'}, 'doc': 'save parseable table of per-sequence hits to file\\n'}, 'domtblout': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--domtblout'}, 'doc': 'save parseable table of per-domain hits to file\\n'}, 'pfamtblout': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--pfamtblout'}, 'doc': 'save table of hits and domains to file, in Pfam format\\n'}, 'acc': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--acc'}, 'doc': 'prefer accessions over names in output\\n'}, 'noali': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--noali'}, 'doc': \"don't output alignments, so output is smaller\\n\"}, 'notextw': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--notextw'}, 'doc': 'unlimit ASCII text output line width\\n'}, 'textw': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--textw'}, 'doc': 'set max width of ASCII text output lines  [120]  (n>=120)\\n'}, 'E': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-E'}, 'doc': 'report models <= this E-value threshold in output  [10.0]  (x>0)\\n'}, 'T': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-T'}, 'doc': 'report models >= this score threshold in output\\n'}, 'domE': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--domE'}, 'doc': 'report domains <= this E-value threshold in output  [10.0]  (x>0)\\n'}, 'domT': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--domT'}, 'doc': 'report domains >= this score cutoff in output\\n'}, 'incE': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--incE'}, 'doc': 'consider models <= this E-value threshold as significant\\n'}, 'incT': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--incT'}, 'doc': 'consider models >= this score threshold as significant\\n'}, 'incdomE': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--incdomE'}, 'doc': 'consider domains <= this E-value threshold as significant\\n'}, 'incdomT': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--incdomT'}, 'doc': 'consider domains >= this score threshold as significant\\n'}, 'cut_ga': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--cut_ga'}, 'doc': \"use profile's GA gathering cutoffs to set all thresholding\\n\"}, 'cut_nc': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--cut_nc'}, 'doc': \"use profile's NC noise cutoffs to set all thresholding\\n\"}, 'cut_tc': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--cut_tc'}, 'doc': \"use profile's TC trusted cutoffs to set all thresholding\\n\"}, 'max': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--max'}, 'doc': 'Turn all heuristic filters off (less speed, more power)\\n'}, 'F1': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--F1'}, 'doc': 'MSV threshold: promote hits w/ P <= F1  [0.02]\\n'}, 'F2': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--F2'}, 'doc': 'Vit threshold: promote hits w/ P <= F2  [1e-3]\\n'}, 'F3': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--F3'}, 'doc': 'Fwd threshold: promote hits w/ P <= F3  [1e-5]\\n'}, 'nobias': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--nobias'}, 'doc': 'turn off composition bias filter\\n'}, 'nonull2': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--nonull2'}, 'doc': 'turn off biased composition score corrections\\n'}, 'Z': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-Z'}, 'doc': 'set # of comparisons done, for E-value calculation\\n'}, 'domZ': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--domZ'}, 'doc': 'set # of significant seqs, for domain E-value calculation\\n'}, 'seed': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--seed'}, 'doc': 'set RNG seed to <n> (if 0: one-time arbitrary seed)  [42]\\n'}, 'qformat': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--qformat'}, 'doc': 'assert input <seqfile> is in format <s>: no autodetection\\n'}, 'cpu': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--cpu'}, 'doc': 'number of parallel CPU workers to use for multithreads  [2]\\n'}, 'dbdir': {'type': 'Directory', 'doc': 'Database directory\\n'}, 'hmmdb': {'type': 'string', 'inputBinding': {'position': 2, 'valueFrom': '${\\n  return inputs.dbdir.path + \"/\" + self;\\n}\\n'}, 'doc': 'HMM database name\\n'}, 'seqfile': {'type': 'File', 'inputBinding': {'position': 3}, 'doc': 'Sequence file\\n'}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}, 'output_tblout': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.tblout)'}}, 'output_domtblout': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.domtblout)'}}, 'output_pfamtblout': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.pfamtblout)'}}}",
    "cwl_hints": "[{'$import': 'hmmer-docker.yml'}, {'$import': 'hmmer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['hmmscan']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Search sequence(s) against a profile database",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "hmmscan",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/homer/homer-annotatePeaks.cwl",
    "sha": "b4665fc356a48f71aec11bf82ad4932d6c6b5481",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/homer/homer-annotatePeaks.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: HOMER-annotatePeaks\ndoc: Software for motif discovery and next generation sequencing analysis\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 1024\n\nhints:\n  - $import: homer-docker.yml\n  - $import: homer-bioconda.yml\n\ninputs:\n  input:\n    type: File\n    inputBinding:\n      position: 1\n    doc: |\n      Peak/BED file\n  o:\n    type: string\n  genome:\n    type: File\n    inputBinding:\n      position: 2\n    doc: |\n      Genome version: hg19, hg38\n  annStats:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: -annStats\n  d:\n    type: Directory?\n    inputBinding:\n      position: 4\n      prefix: -d\n  fpkm:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: -fpkm\n  gtf:\n    type: File?\n    inputBinding:\n      position: 6\n      prefix: -gtf\n    doc: |\n      GTF definition file\n  gff:\n    type: File?\n    inputBinding:\n      position: 6\n      prefix: -gff\n    doc: |\n      GFF definition file\n  gff3:\n    type: File?\n    inputBinding:\n      position: 6\n      prefix: -gff3\n    doc: |\n      GFF3 definition file\n\noutputs:\n  output:\n    type: stdout\n  annStats_out:\n    type: File?\n    outputBinding:\n      glob: $(inputs.annStats)\n\nstdout: $(inputs.o)\n\nbaseCommand: [annotatePeaks.pl]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'input': {'type': 'File', 'inputBinding': {'position': 1}, 'doc': 'Peak/BED file\\n'}, 'o': {'type': 'string'}, 'genome': {'type': 'File', 'inputBinding': {'position': 2}, 'doc': 'Genome version: hg19, hg38\\n'}, 'annStats': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '-annStats'}}, 'd': {'type': 'Directory?', 'inputBinding': {'position': 4, 'prefix': '-d'}}, 'fpkm': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '-fpkm'}}, 'gtf': {'type': 'File?', 'inputBinding': {'position': 6, 'prefix': '-gtf'}, 'doc': 'GTF definition file\\n'}, 'gff': {'type': 'File?', 'inputBinding': {'position': 6, 'prefix': '-gff'}, 'doc': 'GFF definition file\\n'}, 'gff3': {'type': 'File?', 'inputBinding': {'position': 6, 'prefix': '-gff3'}, 'doc': 'GFF3 definition file\\n'}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}, 'annStats_out': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.annStats)'}}}",
    "cwl_hints": "[{'$import': 'homer-docker.yml'}, {'$import': 'homer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['annotatePeaks.pl']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 1024}}",
    "cwl_doc": "Software for motif discovery and next generation sequencing analysis",
    "cwl_stdout": "$(inputs.o)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "HOMER-annotatePeaks",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/homer/homer-makeTagDirectory.cwl",
    "sha": "1eb0628e45dabe0461b19359b226f51027c7d422",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/homer/homer-makeTagDirectory.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: HOMER-makeTagDirectory\ndoc: Software for motif discovery and next generation sequencing analysis\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 1024\n\nhints:\n  - $import: homer-docker.yml\n  - $import: homer-bioconda.yml\n\ninputs:\n  input:\n    type: File\n    inputBinding:\n      position: 2\n    doc: |\n      Input file: BED, SAM, bowtie, etc.\n  tags_directory_name:\n    type: string\n    inputBinding:\n      position: 1\n    doc: |\n      Output directory name with tags files\n  fragLength:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: -fragLength\n    doc: |\n      Set estimated fragment length or use PE length - given: use read lengths\n  format:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: -format\n    doc: |\n      Input file format: BED, SAM, bowtie, etc.\n  flip:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: -flip\n    doc: |\n      flip strand of each read, i.e. might want to use with some RNA-seq\n  totalReads:\n    type: string?\n    inputBinding:\n      position: 6\n      prefix: -totalReads\n    doc: |\n      <#|all|default> (set the effective total number of reads - all includes multimappers)\n  force5th:\n    type: string?\n    inputBinding:\n      position: 7\n      prefix: -force5th\n    doc: |\n      (5th column of BED file contains # of reads mapping to position)\n  d:\n    type: Directory[]?\n    inputBinding:\n      position: 8\n      prefix: -d\n    doc: |\n      <tag directory> [tag directory 2] ... (add Tag directory to new tag directory)\n  t:\n    type: File[]?\n    inputBinding:\n      position: 9\n      prefix: -t\n    doc: |\n      <tag file> [tag file 2] ... (add tag file i.e. *.tags.tsv to new tag directory)\n  single:\n    type: boolean?\n    inputBinding:\n      position: 10\n      prefix: -single\n    doc: |\n      (Create a single tags.tsv file for all \"chromosomes\" - i.e. if >100 chromosomes)\n  update:\n    type: boolean?\n    inputBinding:\n      position: 11\n      prefix: -update\n    doc: |\n      (Use current tag directory for QC/processing, do not parse new alignment files)\n  tbp:\n    type: int?\n    inputBinding:\n      position: 12\n      prefix: -tbp\n    doc: |\n      <#> (Maximum tags per bp, default: no maximum)\n  precision:\n    type: int?\n    inputBinding:\n      position: 13\n      prefix: -precision\n    doc: |\n      <1|2|3> (number of decimal places to use for tag totals, default: 1)\n  minlen:\n    type: int?\n    inputBinding:\n      position: 14\n      prefix: -minlen\n    doc: |\n      <#> and -maxlen <#> (Filter reads with lengths outside this range)\n  genome:\n    type: File\n    inputBinding:\n      position: 15\n      prefix: -genome\n    doc: |\n      <path-to-FASTA file or directory of FASTA files>\n  checkGC:\n    type: boolean?\n    inputBinding:\n      position: 16\n      prefix: -checkGC\n    doc: |\n      check Sequence bias, requires \"-genome\"\n\noutputs:\n  tags_directory:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.tags_directory_name)\n\nbaseCommand: [makeTagDirectory]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'input': {'type': 'File', 'inputBinding': {'position': 2}, 'doc': 'Input file: BED, SAM, bowtie, etc.\\n'}, 'tags_directory_name': {'type': 'string', 'inputBinding': {'position': 1}, 'doc': 'Output directory name with tags files\\n'}, 'fragLength': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '-fragLength'}, 'doc': 'Set estimated fragment length or use PE length - given: use read lengths\\n'}, 'format': {'type': 'string?', 'inputBinding': {'position': 4, 'prefix': '-format'}, 'doc': 'Input file format: BED, SAM, bowtie, etc.\\n'}, 'flip': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '-flip'}, 'doc': 'flip strand of each read, i.e. might want to use with some RNA-seq\\n'}, 'totalReads': {'type': 'string?', 'inputBinding': {'position': 6, 'prefix': '-totalReads'}, 'doc': '<#|all|default> (set the effective total number of reads - all includes multimappers)\\n'}, 'force5th': {'type': 'string?', 'inputBinding': {'position': 7, 'prefix': '-force5th'}, 'doc': '(5th column of BED file contains # of reads mapping to position)\\n'}, 'd': {'type': 'Directory[]?', 'inputBinding': {'position': 8, 'prefix': '-d'}, 'doc': '<tag directory> [tag directory 2] ... (add Tag directory to new tag directory)\\n'}, 't': {'type': 'File[]?', 'inputBinding': {'position': 9, 'prefix': '-t'}, 'doc': '<tag file> [tag file 2] ... (add tag file i.e. *.tags.tsv to new tag directory)\\n'}, 'single': {'type': 'boolean?', 'inputBinding': {'position': 10, 'prefix': '-single'}, 'doc': '(Create a single tags.tsv file for all \"chromosomes\" - i.e. if >100 chromosomes)\\n'}, 'update': {'type': 'boolean?', 'inputBinding': {'position': 11, 'prefix': '-update'}, 'doc': '(Use current tag directory for QC/processing, do not parse new alignment files)\\n'}, 'tbp': {'type': 'int?', 'inputBinding': {'position': 12, 'prefix': '-tbp'}, 'doc': '<#> (Maximum tags per bp, default: no maximum)\\n'}, 'precision': {'type': 'int?', 'inputBinding': {'position': 13, 'prefix': '-precision'}, 'doc': '<1|2|3> (number of decimal places to use for tag totals, default: 1)\\n'}, 'minlen': {'type': 'int?', 'inputBinding': {'position': 14, 'prefix': '-minlen'}, 'doc': '<#> and -maxlen <#> (Filter reads with lengths outside this range)\\n'}, 'genome': {'type': 'File', 'inputBinding': {'position': 15, 'prefix': '-genome'}, 'doc': '<path-to-FASTA file or directory of FASTA files>\\n'}, 'checkGC': {'type': 'boolean?', 'inputBinding': {'position': 16, 'prefix': '-checkGC'}, 'doc': 'check Sequence bias, requires \"-genome\"\\n'}}",
    "cwl_outputs": "{'tags_directory': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.tags_directory_name)'}}}",
    "cwl_hints": "[{'$import': 'homer-docker.yml'}, {'$import': 'homer-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['makeTagDirectory']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 1024}}",
    "cwl_doc": "Software for motif discovery and next generation sequencing analysis",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "HOMER-makeTagDirectory",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/idr/idr.cwl",
    "sha": "6ff866744699e213e30428f7faf27c410098a0fc",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/idr/idr.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: idr\ndoc: Irreproducible Discovery Rate (IDR)\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 1024\n\nhints:\n  - $import: idr-docker.yml\n  - $import: idr-bioconda.yml\n\ninputs:\n    samples:\n        type: File[]\n        inputBinding:\n            position: 1\n            prefix: --samples\n        doc: |\n            Files containing peaks and scores.\n    peak_list:\n        type: File?\n        inputBinding:\n            position: 2\n            prefix: --peak-list\n        doc: |\n            If provided, all peaks will be taken from this file.\n    input_file_type:\n        type: string\n        inputBinding:\n            position: 3\n            prefix: --input-file-type\n        doc: |\n            File type of --samples and --peak-list: narrowPeak, broadPeak, bed, gff\n    output_file:\n        type: string\n        inputBinding:\n            position: 4\n            prefix: --output-file\n        doc: |\n            File to write output to.\n    output_file_type:\n        type: string?\n        inputBinding:\n            position: 5\n            prefix: --output-file-type\n        doc: |\n            Output file type. Defaults to input file type when available, otherwise bed.\n    idr_threshold:\n        type: float?\n        inputBinding:\n            position: 6\n            prefix: --idr-threshold\n        doc: |\n            Only return peaks with a global idr threshold below this value.\n            Default: report all peaks\n    soft_idr_threshold:\n        type: float?\n        inputBinding:\n            position: 7\n            prefix: --soft-idr-threshold\n        doc: |\n            Report statistics for peaks with a global idr below this value but return all peaks with an idr below --idr.\n            Default: 0.05\n    plot:\n        type: boolean?\n        inputBinding:\n            position: 8\n            prefix: --plot\n        doc: |\n            Plot the results to [OFNAME].png\n    rank:\n        type: string?\n        inputBinding:\n            position: 9\n            prefix: --rank\n        doc: |\n            Options: signal.value p.value q.value columnIndex\n            Defaults:\n                narrowPeak/broadPeak: signal.value\n                bed: score\n    use_best_multisummit_IDR:\n        type: boolean?\n        inputBinding:\n            position: 10\n            prefix: --use-best-multisummit-IDR\n        doc: |\n            Set the IDR value for a group of multi summit peaks (a group of peaks with the same chr/start/stop but\n            different summits) to the best value across all of these peaks. This is a work around for peak callers\n            that don't do a good job splitting scores across multi summit peaks (e.g. MACS).\n            If set in conjunction with --plot two plots will be created - one with alternate summits and\n            one without.  Use this option with care.\n\noutputs:\n    idr_peaks:\n        type: File\n        outputBinding:\n          glob: $(inputs.output_file)\n    plots:\n        type: File[]\n        outputBinding:\n          glob: $(inputs.output_file)*.png\n\nbaseCommand: [\"idr\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'samples': {'type': 'File[]', 'inputBinding': {'position': 1, 'prefix': '--samples'}, 'doc': 'Files containing peaks and scores.\\n'}, 'peak_list': {'type': 'File?', 'inputBinding': {'position': 2, 'prefix': '--peak-list'}, 'doc': 'If provided, all peaks will be taken from this file.\\n'}, 'input_file_type': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '--input-file-type'}, 'doc': 'File type of --samples and --peak-list: narrowPeak, broadPeak, bed, gff\\n'}, 'output_file': {'type': 'string', 'inputBinding': {'position': 4, 'prefix': '--output-file'}, 'doc': 'File to write output to.\\n'}, 'output_file_type': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '--output-file-type'}, 'doc': 'Output file type. Defaults to input file type when available, otherwise bed.\\n'}, 'idr_threshold': {'type': 'float?', 'inputBinding': {'position': 6, 'prefix': '--idr-threshold'}, 'doc': 'Only return peaks with a global idr threshold below this value.\\nDefault: report all peaks\\n'}, 'soft_idr_threshold': {'type': 'float?', 'inputBinding': {'position': 7, 'prefix': '--soft-idr-threshold'}, 'doc': 'Report statistics for peaks with a global idr below this value but return all peaks with an idr below --idr.\\nDefault: 0.05\\n'}, 'plot': {'type': 'boolean?', 'inputBinding': {'position': 8, 'prefix': '--plot'}, 'doc': 'Plot the results to [OFNAME].png\\n'}, 'rank': {'type': 'string?', 'inputBinding': {'position': 9, 'prefix': '--rank'}, 'doc': 'Options: signal.value p.value q.value columnIndex\\nDefaults:\\n    narrowPeak/broadPeak: signal.value\\n    bed: score\\n'}, 'use_best_multisummit_IDR': {'type': 'boolean?', 'inputBinding': {'position': 10, 'prefix': '--use-best-multisummit-IDR'}, 'doc': \"Set the IDR value for a group of multi summit peaks (a group of peaks with the same chr/start/stop but\\ndifferent summits) to the best value across all of these peaks. This is a work around for peak callers\\nthat don't do a good job splitting scores across multi summit peaks (e.g. MACS).\\nIf set in conjunction with --plot two plots will be created - one with alternate summits and\\none without.  Use this option with care.\\n\"}}",
    "cwl_outputs": "{'idr_peaks': {'type': 'File', 'outputBinding': {'glob': '$(inputs.output_file)'}}, 'plots': {'type': 'File[]', 'outputBinding': {'glob': '$(inputs.output_file)*.png'}}}",
    "cwl_hints": "[{'$import': 'idr-docker.yml'}, {'$import': 'idr-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['idr']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 1024}}",
    "cwl_doc": "Irreproducible Discovery Rate (IDR)",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "idr",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/igvtools/igvtools-count.cwl",
    "sha": "0c321256bd8a285293adaad5bb764ec6721109ee",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/igvtools/igvtools-count.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: igvtools-count\ndoc: The igvtools utility provides a set of tools for pre-processing data files\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 2048\n\nhints:\n  - $import: igvtools-docker.yml\n  - $import: igvtools-bioconda.yml\n\ninputs:\n  z:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -z\n  i:\n    type: File\n    inputBinding:\n      position: 2\n  o:\n    type: string\n    inputBinding:\n      position: 3\n  g:\n    type: string\n    inputBinding:\n      position: 4\n  includeDuplicates:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --includeDuplicates\n\n\noutputs:\n  out_tdf:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n\nbaseCommand: [\"igvtools\", \"count\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'z': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-z'}}, 'i': {'type': 'File', 'inputBinding': {'position': 2}}, 'o': {'type': 'string', 'inputBinding': {'position': 3}}, 'g': {'type': 'string', 'inputBinding': {'position': 4}}, 'includeDuplicates': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--includeDuplicates'}}}",
    "cwl_outputs": "{'out_tdf': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}}",
    "cwl_hints": "[{'$import': 'igvtools-docker.yml'}, {'$import': 'igvtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['igvtools', 'count']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 2048}}",
    "cwl_doc": "The igvtools utility provides a set of tools for pre-processing data files",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "igvtools-count",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/igvtools/igvtools-totdf.cwl",
    "sha": "40abedc52b134963c161fe12fc194287a7a6fb55",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/igvtools/igvtools-totdf.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: igvtools-toTDF\ndoc: The igvtools utility provides a set of tools for pre-processing data files\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 2048\n\nhints:\n  - $import: igvtools-docker.yml\n  - $import: igvtools-bioconda.yml\n\ninputs:\n  z:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -z\n  i:\n    type: File\n    inputBinding:\n      position: 2\n  o:\n    type: string\n    inputBinding:\n      position: 3\n  g:\n    type: string?\n    inputBinding:\n      position: 4\n  s:\n    type: File?\n    inputBinding:\n      position: 4\n  f:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --fileType\n\n\noutputs:\n  out_tdf:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n\nbaseCommand: [\"igvtools\", \"toTDF\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'z': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-z'}}, 'i': {'type': 'File', 'inputBinding': {'position': 2}}, 'o': {'type': 'string', 'inputBinding': {'position': 3}}, 'g': {'type': 'string?', 'inputBinding': {'position': 4}}, 's': {'type': 'File?', 'inputBinding': {'position': 4}}, 'f': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--fileType'}}}",
    "cwl_outputs": "{'out_tdf': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}}",
    "cwl_hints": "[{'$import': 'igvtools-docker.yml'}, {'$import': 'igvtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['igvtools', 'toTDF']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 2048}}",
    "cwl_doc": "The igvtools utility provides a set of tools for pre-processing data files",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "igvtools-toTDF",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/mace/mace.cwl",
    "sha": "2606ee9be22150caecc62fc3bca90501495fee98",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/mace/mace.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  s: 'http://schema.org/'\n  sbg: 'https://www.sevenbridges.com/'\nbaseCommand:\n  - mace.py\ninputs:\n  - id: e\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: '-e'\n    doc: |\n      Peaks located closely within this window will be\n      merged. default=5 (bp)\n  - id: f\n    type: File\n    inputBinding:\n      position: 1\n      prefix: '-f'\n    doc: |\n      BigWig format file containing coverage calcualted from\n      reads mapped to *forward* strand.\n  - id: m\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: '-m'\n    doc: |\n      Maximum distance allowed for border pairing.\n      default=100\n  - id: 'n'\n    type: float?\n    inputBinding:\n      position: 9\n      prefix: '-n'\n    doc: |\n      Minmum coverage signal used to build model (i.e.\n      estimate optimal peak pair size). default=2.0\n  - id: o\n    type: string\n    inputBinding:\n      position: 4\n      prefix: '-o'\n    doc: |\n      Prefix of output files. NOTE: if 'prefix.border.bed'\n      exists and was non-empty, peak calling step will be\n      skipped! So if you want to rerun mace.py from scratch,\n      use different 'prefix' or delete old\n      'prefix.border.bed' before starting.\n  - id: p\n    type: float?\n    inputBinding:\n      position: 5\n      prefix: '-p'\n    doc: |\n      Pvalue cutoff for border detection and subsequent\n      border pairing. default=0.05'\n  - id: r\n    type: File\n    inputBinding:\n      position: 2\n      prefix: '-r'\n    doc: |\n      BigWig format file containing coverage calcualted from\n      reads mapped to *reverse* strand.\n  - id: s\n    type: File\n    inputBinding:\n      position: 3\n      prefix: '-s'\n    doc: |\n      Chromosome size file. Tab or space separated text file\n      with 2 columns: first column contains chromosome name,\n      second column contains chromosome size. Example:chr1\n      249250621 <NewLine> chr2        243199373 <NewLine>\n      chr3        198022430 <NewLine> ...\n  - id: w\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: '-w'\n    doc: |\n      Background window size used to determine background\n      signal level. default=100 (bp)\noutputs:\n  - id: border_cluster_out\n    type: File\n    outputBinding:\n      glob: $(inputs.o).border_cluster.bed\n  - id: border_out\n    type: File\n    outputBinding:\n      glob: $(inputs.o).border.bed\n  - id: border_pair_elite_out\n    type: File\n    outputBinding:\n      glob: $(inputs.o).border_pair_elite.bed\n  - id: border_pair_out\n    type: File\n    outputBinding:\n      glob: $(inputs.o).border_pair.bed\ndoc: Model based Analysis of ChIP Exo\nlabel: MACE\nrequirements:\n  - class: ResourceRequirement\n    coresMin: 1\n  - class: InlineJavascriptRequirement\nhints:\n  - $import: mace-docker.yml\n  - $import: mace-bioconda.yml\n$schemas:\n  - 'https://schema.org/version/latest/schemaorg-current-http.rdf'\n's:author':\n  - class: 's:Person'\n    's:email': 'mailto:r78v10a07@gmail.com'\n    's:identifier': 'https://orcid.org/0000-0002-4108-5982'\n    's:name': Roberto Vera Alvarez\n's:codeRepository': 'http://chipexo.sourceforge.net'\n's:license': 'https://spdx.org/licenses/OPL-1.0'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'e', 'type': 'int?', 'inputBinding': {'position': 7, 'prefix': '-e'}, 'doc': 'Peaks located closely within this window will be\\nmerged. default=5 (bp)\\n'}, {'id': 'f', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-f'}, 'doc': 'BigWig format file containing coverage calcualted from\\nreads mapped to *forward* strand.\\n'}, {'id': 'm', 'type': 'int?', 'inputBinding': {'position': 6, 'prefix': '-m'}, 'doc': 'Maximum distance allowed for border pairing.\\ndefault=100\\n'}, {'id': 'n', 'type': 'float?', 'inputBinding': {'position': 9, 'prefix': '-n'}, 'doc': 'Minmum coverage signal used to build model (i.e.\\nestimate optimal peak pair size). default=2.0\\n'}, {'id': 'o', 'type': 'string', 'inputBinding': {'position': 4, 'prefix': '-o'}, 'doc': \"Prefix of output files. NOTE: if 'prefix.border.bed'\\nexists and was non-empty, peak calling step will be\\nskipped! So if you want to rerun mace.py from scratch,\\nuse different 'prefix' or delete old\\n'prefix.border.bed' before starting.\\n\"}, {'id': 'p', 'type': 'float?', 'inputBinding': {'position': 5, 'prefix': '-p'}, 'doc': \"Pvalue cutoff for border detection and subsequent\\nborder pairing. default=0.05'\\n\"}, {'id': 'r', 'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-r'}, 'doc': 'BigWig format file containing coverage calcualted from\\nreads mapped to *reverse* strand.\\n'}, {'id': 's', 'type': 'File', 'inputBinding': {'position': 3, 'prefix': '-s'}, 'doc': 'Chromosome size file. Tab or space separated text file\\nwith 2 columns: first column contains chromosome name,\\nsecond column contains chromosome size. Example:chr1\\n249250621 <NewLine> chr2        243199373 <NewLine>\\nchr3        198022430 <NewLine> ...\\n'}, {'id': 'w', 'type': 'int?', 'inputBinding': {'position': 8, 'prefix': '-w'}, 'doc': 'Background window size used to determine background\\nsignal level. default=100 (bp)\\n'}]",
    "cwl_outputs": "[{'id': 'border_cluster_out', 'type': 'File', 'outputBinding': {'glob': '$(inputs.o).border_cluster.bed'}}, {'id': 'border_out', 'type': 'File', 'outputBinding': {'glob': '$(inputs.o).border.bed'}}, {'id': 'border_pair_elite_out', 'type': 'File', 'outputBinding': {'glob': '$(inputs.o).border_pair_elite.bed'}}, {'id': 'border_pair_out', 'type': 'File', 'outputBinding': {'glob': '$(inputs.o).border_pair.bed'}}]",
    "cwl_hints": "[{'$import': 'mace-docker.yml'}, {'$import': 'mace-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['mace.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Model based Analysis of ChIP Exo",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "https://spdx.org/licenses/OPL-1.0",
    "cwl_s:creator": null,
    "cwl_label": "MACE",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://chipexo.sourceforge.net",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:email': 'mailto:r78v10a07@gmail.com', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "tools/mace/preprocessor.cwl",
    "sha": "c0e116cd8f2f3cf7adbfa627ccc5b215b9decf1c",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/mace/preprocessor.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  s: 'http://schema.org/'\n  sbg: 'https://www.sevenbridges.com/'\nbaseCommand:\n  - preprocessor.py\ninputs:\n  - id: b\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: '-b'\n    doc: |\n      Chromosome chunk size. Each chomosome will be cut into\n      small chunks of this size. Decrease chunk size will\n      save more RAM. default=100000 (bp)\n  - id: d\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: '-d'\n    doc: |\n      Reference reads count (default = 10 million).\n      Sequencing depth will be normailzed to this number, so\n      that wig files are comparable between replicates.\n  - id: i\n    type: 'File[]'\n    inputBinding:\n      position: 1\n      prefix: '-i'\n      itemSeparator: ','\n    doc: |\n      Input file in BAM format. BAM file must be sorted and\n      indexed using samTools. Replicates separated by\n      comma(',') e.g. \"-i rep1.bam,rep2.bam,rep3.bam\"\n    secondaryFiles:\n      - .bai\n  - id: m\n    type: string?\n    inputBinding:\n      position: 8\n      prefix: '-m'\n    doc: |\n      methods (\"EM\", \"AM\", \"GM\", or \"SNR\") used to\n      consolidate replicates and reduce noise. \"EM\" =\n      Entropy weighted mean, \"AM\"=Arithmetic mean,\n      \"GM\"=Geometric mean, \"SNR\"=Signal-to-noise ratio.\n      default=EM\n  - id: o\n    type: string\n    inputBinding:\n      position: 3\n      prefix: '-o'\n    doc: |\n      Prefix of output wig files(s). \"Prefix_Forward.wig\"\n      and \"Prefix_Reverse.wig\" will be generated\n  - id: q\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: '-q'\n    doc: |\n      phred scaled mapping quality threshhold to determine\n       \"uniqueness\" of alignments. default=30\n  - id: r\n    type: File\n    inputBinding:\n      position: 2\n      prefix: '-r'\n    doc: |\n      Chromosome size file. Tab or space separated text file\n      with 2 columns: first column contains chromosome name,\n      second column contains chromosome size. Example:chr1\n      249250621 <NewLine> chr2        243199373 <NewLine>\n      chr3        198022430 <NewLine> ...\n  - id: w\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: '-w'\n    doc: |\n      Kmer size [6,12] to correct nucleotide composition\n      bias. kmerSize < 0.5*read_lenght. larger KmerSize\n      might make program slower. Set kmerSize = 0 to turn\n      off nucleotide compsition bias correction. default=6\noutputs:\n  - id: out_forward\n    type: File\n    outputBinding:\n      glob: $(inputs.o)_Forward.bw\n  - id: out_reverse\n    type: File\n    outputBinding:\n      glob: $(inputs.o)_Reverse.bw\ndoc: Model based Analysis of ChIP Exo\nlabel: MACE-preprocessor\nrequirements:\n  - class: ResourceRequirement\n    coresMin: 1\n  - class: InlineJavascriptRequirement\nhints:\n  - $import: mace-docker.yml\n  - $import: mace-bioconda.yml\n$schemas:\n  - 'https://schema.org/version/latest/schemaorg-current-http.rdf'\n's:author':\n  - class: 's:Person'\n    's:email': 'mailto:r78v10a07@gmail.com'\n    's:identifier': 'https://orcid.org/0000-0002-4108-5982'\n    's:name': Roberto Vera Alvarez\n's:codeRepository': 'http://chipexo.sourceforge.net'\n's:license': 'https://spdx.org/licenses/OPL-1.0'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'b', 'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '-b'}, 'doc': 'Chromosome chunk size. Each chomosome will be cut into\\nsmall chunks of this size. Decrease chunk size will\\nsave more RAM. default=100000 (bp)\\n'}, {'id': 'd', 'type': 'int?', 'inputBinding': {'position': 6, 'prefix': '-d'}, 'doc': 'Reference reads count (default = 10 million).\\nSequencing depth will be normailzed to this number, so\\nthat wig files are comparable between replicates.\\n'}, {'id': 'i', 'type': 'File[]', 'inputBinding': {'position': 1, 'prefix': '-i', 'itemSeparator': ','}, 'doc': 'Input file in BAM format. BAM file must be sorted and\\nindexed using samTools. Replicates separated by\\ncomma(\\',\\') e.g. \"-i rep1.bam,rep2.bam,rep3.bam\"\\n', 'secondaryFiles': ['.bai']}, {'id': 'm', 'type': 'string?', 'inputBinding': {'position': 8, 'prefix': '-m'}, 'doc': 'methods (\"EM\", \"AM\", \"GM\", or \"SNR\") used to\\nconsolidate replicates and reduce noise. \"EM\" =\\nEntropy weighted mean, \"AM\"=Arithmetic mean,\\n\"GM\"=Geometric mean, \"SNR\"=Signal-to-noise ratio.\\ndefault=EM\\n'}, {'id': 'o', 'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-o'}, 'doc': 'Prefix of output wig files(s). \"Prefix_Forward.wig\"\\nand \"Prefix_Reverse.wig\" will be generated\\n'}, {'id': 'q', 'type': 'int?', 'inputBinding': {'position': 7, 'prefix': '-q'}, 'doc': 'phred scaled mapping quality threshhold to determine\\n \"uniqueness\" of alignments. default=30\\n'}, {'id': 'r', 'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-r'}, 'doc': 'Chromosome size file. Tab or space separated text file\\nwith 2 columns: first column contains chromosome name,\\nsecond column contains chromosome size. Example:chr1\\n249250621 <NewLine> chr2        243199373 <NewLine>\\nchr3        198022430 <NewLine> ...\\n'}, {'id': 'w', 'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-w'}, 'doc': 'Kmer size [6,12] to correct nucleotide composition\\nbias. kmerSize < 0.5*read_lenght. larger KmerSize\\nmight make program slower. Set kmerSize = 0 to turn\\noff nucleotide compsition bias correction. default=6\\n'}]",
    "cwl_outputs": "[{'id': 'out_forward', 'type': 'File', 'outputBinding': {'glob': '$(inputs.o)_Forward.bw'}}, {'id': 'out_reverse', 'type': 'File', 'outputBinding': {'glob': '$(inputs.o)_Reverse.bw'}}]",
    "cwl_hints": "[{'$import': 'mace-docker.yml'}, {'$import': 'mace-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['preprocessor.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Model based Analysis of ChIP Exo",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "https://spdx.org/licenses/OPL-1.0",
    "cwl_s:creator": null,
    "cwl_label": "MACE-preprocessor",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://chipexo.sourceforge.net",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:email': 'mailto:r78v10a07@gmail.com', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "tools/macs/macs2-callpeak.cwl",
    "sha": "47df916ce069fb3b6d65fd271c29e4d54608791e",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/macs/macs2-callpeak.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: MACS2-callpeak\ndoc: BASH echo command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 1024\n\nhints:\n  - $import: macs2-docker.yml\n  - $import: macs2-bioconda.yml\n\ninputs:\n  call-summits:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --call-summits\n    doc: 'If set, MACS will use a more sophisticated signal processing approach to\n        find subpeak summits in each enriched peak region. DEFAULT: False '\n  f:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --format\n    doc: '-f {AUTO,BAM,SAM,BED,ELAND,ELANDMULTI,ELANDEXPORT,BOWTIE,BAMPE}, --format\n        {AUTO,BAM,SAM,BED,ELAND,ELANDMULTI,ELANDEXPORT,BOWTIE,BAMPE} Format of tag file,\n        \"AUTO\", \"BED\" or \"ELAND\" or \"ELANDMULTI\" or \"ELANDEXPORT\" or \"SAM\" or \"BAM\"\n        or \"BOWTIE\" or \"BAMPE\". The default AUTO option will let MACS decide which format\n        the file is. Note that MACS can''t detect \"BAMPE\" or \"BEDPE\" format with \"AUTO\",\n        and you have to implicitly specify the format for \"BAMPE\" and \"BEDPE\". DEFAULT:\n        \"AUTO\".'\n  cutoff-analysis:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --cutoff-analysis\n    doc: 'While set, MACS2 will analyze number or total length of peaks that can be\n        called by different p-value cutoff then output a summary table to help user\n        decide a better cutoff. The table will be saved in NAME_cutoff_analysis.txt\n        file. Note, minlen and maxgap may affect the results. WARNING: May take ~30\n        folds longer time to finish. DEFAULT: False Post-processing options: '\n  p:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: --pvalue\n    doc: 'Pvalue cutoff for peak detection. DEFAULT: not set.  -q, and -p are mutually\n        exclusive. If pvalue cutoff is  set, qvalue will not be calculated and reported\n        as -1  in the final .xls file..'\n  p_file:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: --pvalue\n      loadContents: True\n      valueFrom: ${ return inputs.input.contents.split('\\n')[0];}\n    doc: |\n      Pvalue cutoff for peak detection loaded from the first line of a file.\n  q:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: --qvalue\n    doc: |\n      The qvalue (minimum FDR) cutoff to call significant regions. Default is 0.05\n  q_file:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: --qvalue\n      loadContents: True\n      valueFrom: ${ return inputs.q_file.contents.split('\\n')[0];}\n    doc: |\n      The qvalue (minimum FDR) cutoff to call significant regions loaded from the first line of a file. Default is 0.05\n  B:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --bdg\n    doc: 'Whether or not to save extended fragment pileup, and local lambda tracks\n        (two files) at every bp into a bedGraph file. DEFAULT: True'\n  t:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: --treatment\n    doc: 'Treatment sample file(s). If multiple files are given as -t A B C, then\n        they will all be read and pooled together. IMPORTANT: the first sample will\n        be used as the outputs basename.'\n  n:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --name\n    doc: |\n      The name string of the experiment. MACS will use this string NAME to create output files like\n      NAME_peaks.xls, NAME_negative_peaks.xls, NAME_peaks.bed , NAME_summits.bed, NAME_model.r and so\n      on. So please avoid any confliction between these filenames and your existing files\n  c:\n    type: File?\n    inputBinding:\n      position: 2\n      prefix: --control\n    doc: |\n      The control or mock data file. Please follow the same direction as for -t/--treatment.\n  g:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --gsize\n    doc: |\n      It's the mappable genome size or effective genome size which is defined as the genome size which can be sequenced.\n  nomodel:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: --nomodel\n    doc: |\n      While on, MACS will bypass building the shifting model.\n  shift:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: --shift\n    doc: |\n      Note, this is NOT the legacy --shiftsize option which is replaced by --extsize! You can set an arbitrary shift in bp here.\n  extsize:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: --extsize\n    doc: |\n      While '--nomodel' is set, MACS uses this parameter to extend reads in 5'->3' direction to fix-sized fragments\n  broad:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: --broad\n    doc: |\n      When this flag is on, MACS will try to composite broad regions in BED12\n  broad-cutoff:\n    type: float?\n    inputBinding:\n      position: 2\n      prefix: --broad-cutoff\n    doc: |\n      Cutoff for broad region. This option is not available unless --broad is set. If -p is set, this is a pvalue cutoff, otherwise, it's a qvalue cutoff. DEFAULT: 0.1\n  outdir_name:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --outdir\n    doc: |\n      MACS2 will save all output files into speficied folder for this option\n\noutputs:\n  lambda:\n    type: File\n    outputBinding:\n      glob: $(inputs.outdir_name)/$(inputs.n)_control_lambda.bdg\n  pileup:\n    type: File\n    outputBinding:\n      glob: $(inputs.outdir_name)/$(inputs.n)_treat_pileup.bdg\n  cutoff_analysis:\n    type: File?\n    outputBinding:\n      glob: $(inputs.outdir_name)/$(inputs.n)_cutoff_analysis.txt\n  cutoff_analysis_pdf:\n    type: File?\n    outputBinding:\n      glob: $(inputs.outdir_name)/$(inputs.n)_cutoff_analysis.pdf\n  cutoff_analysis_inflection:\n    type: File?\n    outputBinding:\n      glob: $(inputs.outdir_name)/$(inputs.n)_cutoff_analysis_inflection.txt\n  narrowPeak:\n    type: File\n    outputBinding:\n      glob: $(inputs.outdir_name)/$(inputs.n)_peaks.narrowPeak\n  xls:\n    type: File\n    outputBinding:\n      glob: $(inputs.outdir_name)/$(inputs.n)_peaks.xls\n  bed:\n    type: File\n    outputBinding:\n      glob: $(inputs.outdir_name)/$(inputs.n)_summits.bed\n\n\nbaseCommand: [\"macs2\",\"callpeak\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'call-summits': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--call-summits'}, 'doc': 'If set, MACS will use a more sophisticated signal processing approach to find subpeak summits in each enriched peak region. DEFAULT: False '}, 'f': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--format'}, 'doc': '-f {AUTO,BAM,SAM,BED,ELAND,ELANDMULTI,ELANDEXPORT,BOWTIE,BAMPE}, --format {AUTO,BAM,SAM,BED,ELAND,ELANDMULTI,ELANDEXPORT,BOWTIE,BAMPE} Format of tag file, \"AUTO\", \"BED\" or \"ELAND\" or \"ELANDMULTI\" or \"ELANDEXPORT\" or \"SAM\" or \"BAM\" or \"BOWTIE\" or \"BAMPE\". The default AUTO option will let MACS decide which format the file is. Note that MACS can\\'t detect \"BAMPE\" or \"BEDPE\" format with \"AUTO\", and you have to implicitly specify the format for \"BAMPE\" and \"BEDPE\". DEFAULT: \"AUTO\".'}, 'cutoff-analysis': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--cutoff-analysis'}, 'doc': 'While set, MACS2 will analyze number or total length of peaks that can be called by different p-value cutoff then output a summary table to help user decide a better cutoff. The table will be saved in NAME_cutoff_analysis.txt file. Note, minlen and maxgap may affect the results. WARNING: May take ~30 folds longer time to finish. DEFAULT: False Post-processing options: '}, 'p': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--pvalue'}, 'doc': 'Pvalue cutoff for peak detection. DEFAULT: not set.  -q, and -p are mutually exclusive. If pvalue cutoff is  set, qvalue will not be calculated and reported as -1  in the final .xls file..'}, 'p_file': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '--pvalue', 'loadContents': True, 'valueFrom': \"${ return inputs.input.contents.split('\\\\n')[0];}\"}, 'doc': 'Pvalue cutoff for peak detection loaded from the first line of a file.\\n'}, 'q': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--qvalue'}, 'doc': 'The qvalue (minimum FDR) cutoff to call significant regions. Default is 0.05\\n'}, 'q_file': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '--qvalue', 'loadContents': True, 'valueFrom': \"${ return inputs.q_file.contents.split('\\\\n')[0];}\"}, 'doc': 'The qvalue (minimum FDR) cutoff to call significant regions loaded from the first line of a file. Default is 0.05\\n'}, 'B': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--bdg'}, 'doc': 'Whether or not to save extended fragment pileup, and local lambda tracks (two files) at every bp into a bedGraph file. DEFAULT: True'}, 't': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': '--treatment'}, 'doc': 'Treatment sample file(s). If multiple files are given as -t A B C, then they will all be read and pooled together. IMPORTANT: the first sample will be used as the outputs basename.'}, 'n': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--name'}, 'doc': 'The name string of the experiment. MACS will use this string NAME to create output files like\\nNAME_peaks.xls, NAME_negative_peaks.xls, NAME_peaks.bed , NAME_summits.bed, NAME_model.r and so\\non. So please avoid any confliction between these filenames and your existing files\\n'}, 'c': {'type': 'File?', 'inputBinding': {'position': 2, 'prefix': '--control'}, 'doc': 'The control or mock data file. Please follow the same direction as for -t/--treatment.\\n'}, 'g': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--gsize'}, 'doc': \"It's the mappable genome size or effective genome size which is defined as the genome size which can be sequenced.\\n\"}, 'nomodel': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '--nomodel'}, 'doc': 'While on, MACS will bypass building the shifting model.\\n'}, 'shift': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '--shift'}, 'doc': 'Note, this is NOT the legacy --shiftsize option which is replaced by --extsize! You can set an arbitrary shift in bp here.\\n'}, 'extsize': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '--extsize'}, 'doc': \"While '--nomodel' is set, MACS uses this parameter to extend reads in 5'->3' direction to fix-sized fragments\\n\"}, 'broad': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '--broad'}, 'doc': 'When this flag is on, MACS will try to composite broad regions in BED12\\n'}, 'broad-cutoff': {'type': 'float?', 'inputBinding': {'position': 2, 'prefix': '--broad-cutoff'}, 'doc': \"Cutoff for broad region. This option is not available unless --broad is set. If -p is set, this is a pvalue cutoff, otherwise, it's a qvalue cutoff. DEFAULT: 0.1\\n\"}, 'outdir_name': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--outdir'}, 'doc': 'MACS2 will save all output files into speficied folder for this option\\n'}}",
    "cwl_outputs": "{'lambda': {'type': 'File', 'outputBinding': {'glob': '$(inputs.outdir_name)/$(inputs.n)_control_lambda.bdg'}}, 'pileup': {'type': 'File', 'outputBinding': {'glob': '$(inputs.outdir_name)/$(inputs.n)_treat_pileup.bdg'}}, 'cutoff_analysis': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.outdir_name)/$(inputs.n)_cutoff_analysis.txt'}}, 'cutoff_analysis_pdf': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.outdir_name)/$(inputs.n)_cutoff_analysis.pdf'}}, 'cutoff_analysis_inflection': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.outdir_name)/$(inputs.n)_cutoff_analysis_inflection.txt'}}, 'narrowPeak': {'type': 'File', 'outputBinding': {'glob': '$(inputs.outdir_name)/$(inputs.n)_peaks.narrowPeak'}}, 'xls': {'type': 'File', 'outputBinding': {'glob': '$(inputs.outdir_name)/$(inputs.n)_peaks.xls'}}, 'bed': {'type': 'File', 'outputBinding': {'glob': '$(inputs.outdir_name)/$(inputs.n)_summits.bed'}}}",
    "cwl_hints": "[{'$import': 'macs2-docker.yml'}, {'$import': 'macs2-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['macs2', 'callpeak']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMin': 1024}}",
    "cwl_doc": "BASH echo command",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "MACS2-callpeak",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/magicblast/magicblast.cwl",
    "sha": "0d1c480f1059eaba0fc93c5043259cee88d7d1e0",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/magicblast/magicblast.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Magicblast\ndoc: NCBI Magicblast\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: |\n      ${\n                return inputs.num_threads ? inputs.num_threads : 1\n        }\n\nhints:\n  - $import: magicblast-docker.yml\n  - $import: magicblast-bioconda.yml\n\ninputs:\n  dbdir:\n    type: Directory\n  db:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -db\n      valueFrom: ${ return inputs.dbdir.path + \"/\" + self;}\n  query:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -query\n  query_mate:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -query_mate\n  infmt:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -infmt\n  out:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -out\n  paired:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -paired\n  sra:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -sra\n  sra_batch:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -sra_batch\n  gzo:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -gzo\n  out_unaligned:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -out_unaligned\n  word_size:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -word_size\n  gapopen:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -gapopen\n  gapextend:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -gapextend\n  penalty:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -penalty\n  max_intron_length:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_intron_length\n  subject:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -subject\n  subject_loc:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -subject_loc\n  outfmt:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -outfmt\n  unaligned_fmt:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -unaligned_fmt\n  md_tag:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -md_tag\n  no_query_id_trim:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -no_query_id_trim\n  no_unaligned:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -no_unaligned\n  no_discordant:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -no_discordant\n  lcase_masking:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -lcase_masking\n  validate_seqs:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -validate_seqs\n  limit_lookup:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -limit_lookup\n  max_db_word_count:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_db_word_count\n  lookup_stride:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -lookup_stride\n  gilist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -gilist\n  seqidlist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -seqidlist\n  negative_gilist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_gilist\n  negative_seqidlist:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_seqidlist\n  taxids:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -taxids\n  negative_taxids:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -negative_taxids\n  taxidlist:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -taxidlist\n  negative_taxidlist:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -negative_taxidlist\n  db_soft_mask:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -db_soft_mask\n  db_hard_mask:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -db_hard_mask\n  perc_identity:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -perc_identity\n  fr:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -fr\n  rf:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -rf\n  parse_deflines:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -parse_deflines\n  sra_cache:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -sra_cache\n  num_threads:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -num_threads\n  score:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -score\n  max_edit_dist:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -max_edit_dist\n  splice:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -splice\n  reftype:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -reftype\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n  out_unaligned_output:\n    type: File?\n    outputBinding:\n      glob: $(inputs.out_unaligned)\n\nbaseCommand: [\"magicblast\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'dbdir': {'type': 'Directory'}, 'db': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-db', 'valueFrom': '${ return inputs.dbdir.path + \"/\" + self;}'}}, 'query': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-query'}}, 'query_mate': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-query_mate'}}, 'infmt': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-infmt'}}, 'out': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-out'}}, 'paired': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-paired'}}, 'sra': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-sra'}}, 'sra_batch': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-sra_batch'}}, 'gzo': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-gzo'}}, 'out_unaligned': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-out_unaligned'}}, 'word_size': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-word_size'}}, 'gapopen': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-gapopen'}}, 'gapextend': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-gapextend'}}, 'penalty': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-penalty'}}, 'max_intron_length': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_intron_length'}}, 'subject': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-subject'}}, 'subject_loc': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-subject_loc'}}, 'outfmt': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-outfmt'}}, 'unaligned_fmt': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-unaligned_fmt'}}, 'md_tag': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-md_tag'}}, 'no_query_id_trim': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-no_query_id_trim'}}, 'no_unaligned': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-no_unaligned'}}, 'no_discordant': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-no_discordant'}}, 'lcase_masking': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-lcase_masking'}}, 'validate_seqs': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-validate_seqs'}}, 'limit_lookup': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-limit_lookup'}}, 'max_db_word_count': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_db_word_count'}}, 'lookup_stride': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-lookup_stride'}}, 'gilist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-gilist'}}, 'seqidlist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-seqidlist'}}, 'negative_gilist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_gilist'}}, 'negative_seqidlist': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_seqidlist'}}, 'taxids': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-taxids'}}, 'negative_taxids': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-negative_taxids'}}, 'taxidlist': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-taxidlist'}}, 'negative_taxidlist': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-negative_taxidlist'}}, 'db_soft_mask': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-db_soft_mask'}}, 'db_hard_mask': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-db_hard_mask'}}, 'perc_identity': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-perc_identity'}}, 'fr': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-fr'}}, 'rf': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-rf'}}, 'parse_deflines': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-parse_deflines'}}, 'sra_cache': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-sra_cache'}}, 'num_threads': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-num_threads'}}, 'score': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-score'}}, 'max_edit_dist': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-max_edit_dist'}}, 'splice': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-splice'}}, 'reftype': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-reftype'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}, 'out_unaligned_output': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.out_unaligned)'}}}",
    "cwl_hints": "[{'$import': 'magicblast-docker.yml'}, {'$import': 'magicblast-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['magicblast']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '${\\n          return inputs.num_threads ? inputs.num_threads : 1\\n  }\\n'}}",
    "cwl_doc": "NCBI Magicblast",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Magicblast",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/meme/fasta-center.cwl",
    "sha": "f2d6d4e6284062f96d22445161659ae06cd2596a",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/meme/fasta-center.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: MEME-fasta-center\ndoc: MEME Suite\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: meme-docker.yml\n  - $import: meme-bioconda.yml\n\ninputs:\n  dna:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -dna\n  len:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: -len\n  i:\n    type: File\n  o:\n    type: string\n\noutputs:\n  output:\n    type: stdout\n\nstdin: $(inputs.i.path)\nstdout: $(inputs.o)\n\nbaseCommand: [\"fasta-center\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://meme-suite.org\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'dna': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-dna'}}, 'len': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '-len'}}, 'i': {'type': 'File'}, 'o': {'type': 'string'}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'meme-docker.yml'}, {'$import': 'meme-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fasta-center']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "MEME Suite",
    "cwl_stdout": "$(inputs.o)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "MEME-fasta-center",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://meme-suite.org",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_stdin": "$(inputs.i.path)"
  },
  {
    "path": "tools/meme/fasta-get-markov.cwl",
    "sha": "5ecbe1bb14df96a82c2cbd0ee59dcfefab449cbc",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/meme/fasta-get-markov.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: MEME-fasta-get-markov\ndoc: MEME Suite\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: meme-docker.yml\n  - $import: meme-bioconda.yml\n\ninputs:\n  nostatus:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -nostatus\n  nosummary:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: -nosummary\n  dna:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: -dna\n  m:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -m\n  i:\n    type: File\n    inputBinding:\n      position: 5\n  o:\n    type: string\n    inputBinding:\n      position: 6\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n\nbaseCommand: [\"fasta-get-markov\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://meme-suite.org\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'nostatus': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-nostatus'}}, 'nosummary': {'type': 'boolean?', 'inputBinding': {'position': 2, 'prefix': '-nosummary'}}, 'dna': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '-dna'}}, 'm': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-m'}}, 'i': {'type': 'File', 'inputBinding': {'position': 5}}, 'o': {'type': 'string', 'inputBinding': {'position': 6}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}}",
    "cwl_hints": "[{'$import': 'meme-docker.yml'}, {'$import': 'meme-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fasta-get-markov']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "MEME Suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "MEME-fasta-get-markov",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://meme-suite.org",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/meme/fasta-most.cwl",
    "sha": "63ce04481c06dad83a21d4e0769a90959ca83851",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/meme/fasta-most.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: MEME-fasta-most\ndoc: MEME Suite\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: meme-docker.yml\n  - $import: meme-bioconda.yml\n\ninputs:\n  i:\n    type: File\n  o:\n    type: string\n  min:\n    type: int\n    inputBinding:\n      position: 1\n      prefix: -min\n\noutputs:\n  output:\n    type: stdout\n\nstdin: $(inputs.i.path)\nstdout: $(inputs.o)\n\nbaseCommand: [\"fasta-most\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://meme-suite.org\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'i': {'type': 'File'}, 'o': {'type': 'string'}, 'min': {'type': 'int', 'inputBinding': {'position': 1, 'prefix': '-min'}}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'meme-docker.yml'}, {'$import': 'meme-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fasta-most']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "MEME Suite",
    "cwl_stdout": "$(inputs.o)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "MEME-fasta-most",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://meme-suite.org",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_stdin": "$(inputs.i.path)"
  },
  {
    "path": "tools/meme/fasta-shuffle-letters.cwl",
    "sha": "65ff1e1d2cca5cf342ec3489b2988360f4030185",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/meme/fasta-shuffle-letters.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: MEME-fasta-shuffle-letters\ndoc: MEME Suite\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: meme-docker.yml\n  - $import: meme-bioconda.yml\n\ninputs:\n  i:\n    type: File\n    inputBinding:\n      position: 1\n  o:\n    type: string\n    inputBinding:\n      position: 2\n  kmer:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -kmer\n  tag:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: -tag\n  dinuc:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: -dinuc\n  seed:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -seed\n\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n\nbaseCommand: [\"fasta-shuffle-letters\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://meme-suite.org\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'i': {'type': 'File', 'inputBinding': {'position': 1}}, 'o': {'type': 'string', 'inputBinding': {'position': 2}}, 'kmer': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-kmer'}}, 'tag': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '-tag'}}, 'dinuc': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '-dinuc'}}, 'seed': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-seed'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}}",
    "cwl_hints": "[{'$import': 'meme-docker.yml'}, {'$import': 'meme-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fasta-shuffle-letters']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "MEME Suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "MEME-fasta-shuffle-letters",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://meme-suite.org",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/meme/getsize.cwl",
    "sha": "115ad6fad7dd0e1986a7dc15af2219fcae002b02",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/meme/getsize.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: MEME-getzise\ndoc: MEME Suite\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: meme-docker.yml\n  - $import: meme-bioconda.yml\n\ninputs:\n  i:\n    type: File\n    inputBinding:\n      position: 1\n  o:\n    type: string\n\noutputs:\n  output:\n    type: stdout\n\nstdout: $(inputs.o)\n\nbaseCommand: [\"getsize\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://meme-suite.org\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'i': {'type': 'File', 'inputBinding': {'position': 1}}, 'o': {'type': 'string'}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'meme-docker.yml'}, {'$import': 'meme-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['getsize']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "MEME Suite",
    "cwl_stdout": "$(inputs.o)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "MEME-getzise",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://meme-suite.org",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/meme/meme-chip.cwl",
    "sha": "f1bd3dcade97608b174ed66605b719ab08f41813",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/meme/meme-chip.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: meme-meme-chip\ndoc: meme Suite\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: meme-docker.yml\n  - $import: meme-bioconda.yml\n\ninputs:\n  oc:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -oc\n  time:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: -time\n  ccut:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -ccut\n  order:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -order\n  db:\n    type: File\n    inputBinding:\n      position: 5\n      prefix: -db\n  meme-mod:\n    type: string\n    inputBinding:\n      position: 6\n      prefix: -meme-mod\n  meme-minw:\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: -meme-minw\n  meme-maxw:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: -meme-maxw\n  meme-nmotifs:\n    type: int?\n    inputBinding:\n      position: 9\n      prefix: -meme-nmotifs\n  meme-searchsize:\n    type: int?\n    inputBinding:\n      position: 10\n      prefix: -meme-searchsize\n  dreme-e:\n    type: float?\n    inputBinding:\n      position: 11\n      prefix: -dreme-e\n  centrimo-score:\n    type: float?\n    inputBinding:\n      position: 12\n      prefix: -centrimo-score\n  centrimo-ethresh:\n    type: float?\n    inputBinding:\n      position: 13\n      prefix: -centrimo-ethresh\n  i:\n    type: File\n    inputBinding:\n      position: 14\n\noutputs:\n  output:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.oc)\n\nbaseCommand: [\"meme-chip\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'oc': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-oc'}}, 'time': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '-time'}}, 'ccut': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-ccut'}}, 'order': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-order'}}, 'db': {'type': 'File', 'inputBinding': {'position': 5, 'prefix': '-db'}}, 'meme-mod': {'type': 'string', 'inputBinding': {'position': 6, 'prefix': '-meme-mod'}}, 'meme-minw': {'type': 'int?', 'inputBinding': {'position': 7, 'prefix': '-meme-minw'}}, 'meme-maxw': {'type': 'int?', 'inputBinding': {'position': 8, 'prefix': '-meme-maxw'}}, 'meme-nmotifs': {'type': 'int?', 'inputBinding': {'position': 9, 'prefix': '-meme-nmotifs'}}, 'meme-searchsize': {'type': 'int?', 'inputBinding': {'position': 10, 'prefix': '-meme-searchsize'}}, 'dreme-e': {'type': 'float?', 'inputBinding': {'position': 11, 'prefix': '-dreme-e'}}, 'centrimo-score': {'type': 'float?', 'inputBinding': {'position': 12, 'prefix': '-centrimo-score'}}, 'centrimo-ethresh': {'type': 'float?', 'inputBinding': {'position': 13, 'prefix': '-centrimo-ethresh'}}, 'i': {'type': 'File', 'inputBinding': {'position': 14}}}",
    "cwl_outputs": "{'output': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.oc)'}}}",
    "cwl_hints": "[{'$import': 'meme-docker.yml'}, {'$import': 'meme-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['meme-chip']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "meme Suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "meme-meme-chip",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/meme/meme.cwl",
    "sha": "45c2e892d3a84b0d2775090c4a243979d348fa2b",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/meme/meme.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: MEME-meme\ndoc: MEME Suite\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: meme-docker.yml\n  - $import: meme-bioconda.yml\n\ninputs:\n  i:\n    type: File\n    inputBinding:\n      position: 1\n  oc:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -oc\n  mod:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: -mod\n  nmotifs:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -nmotifs\n  minw:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: -minw\n  maxw:\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: -maxw\n  bfile:\n    type: File\n    inputBinding:\n      position: 7\n      prefix: -bfile\n  dna:\n    type: boolean?\n    inputBinding:\n      position: 8\n      prefix: -dna\n  searchsize:\n    type: int?\n    inputBinding:\n      position: 9\n      prefix: -searchsize\n  time:\n    type: int?\n    inputBinding:\n      position: 10\n      prefix: -time\n  revcomp:\n    type: boolean?\n    inputBinding:\n      position: 11\n      prefix: -revcomp\n  nostatus:\n    type: boolean?\n    inputBinding:\n      position: 12\n      prefix: -nostatus\n\noutputs:\n  output:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.oc)\n\nbaseCommand: [\"meme\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://meme-suite.org\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'i': {'type': 'File', 'inputBinding': {'position': 1}}, 'oc': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-oc'}}, 'mod': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '-mod'}}, 'nmotifs': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-nmotifs'}}, 'minw': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '-minw'}}, 'maxw': {'type': 'int?', 'inputBinding': {'position': 6, 'prefix': '-maxw'}}, 'bfile': {'type': 'File', 'inputBinding': {'position': 7, 'prefix': '-bfile'}}, 'dna': {'type': 'boolean?', 'inputBinding': {'position': 8, 'prefix': '-dna'}}, 'searchsize': {'type': 'int?', 'inputBinding': {'position': 9, 'prefix': '-searchsize'}}, 'time': {'type': 'int?', 'inputBinding': {'position': 10, 'prefix': '-time'}}, 'revcomp': {'type': 'boolean?', 'inputBinding': {'position': 11, 'prefix': '-revcomp'}}, 'nostatus': {'type': 'boolean?', 'inputBinding': {'position': 12, 'prefix': '-nostatus'}}}",
    "cwl_outputs": "{'output': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.oc)'}}}",
    "cwl_hints": "[{'$import': 'meme-docker.yml'}, {'$import': 'meme-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['meme']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "MEME Suite",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "MEME-meme",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://meme-suite.org",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/phantompeakqualtools/phantompeakqualtools.cwl",
    "sha": "93ac6f66691303fa89856b576c55b4d712e8ca44",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/phantompeakqualtools/phantompeakqualtools.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Phantompeakqualtools\ndoc: This package computes informative enrichment and quality measures for ChIP-seq/DNase-seq/FAIRE-seq/MNase-seq data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.p)\n    ramMin: 2048\n\nhints:\n  - $import: phantompeakqualtools-docker.yml\n  - $import: phantompeakqualtools-bioconda.yml\n\ninputs:\n  p:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -p=\n      separate: false\n    doc: |\n      Threads.\n  npeak:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -npeak=\n      separate: false\n    doc: |\n      threshold on number of peaks to call\n  speak:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -speak=\n      separate: false\n    doc: |\n      user-defined cross-correlation peak strandshift\n  c:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -c=\n      separate: false\n    doc: |\n      full path and name (or URL) of tagAlign/BAM file (can be gzipped) (FILE EXTENSION MUST BE tagAlign.gz, tagAlign, bam or bam.gz)\n  i:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -i=\n      separate: false\n    doc: |\n      Cotrol: full path and name (or URL) of tagAlign/BAM file (can be gzipped) (FILE EXTENSION MUST BE tagAlign.gz, tagAlign, bam or bam.gz)\n  filtchr:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: -filtchr=\n      separate: false\n  savp:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: -savp=\n      separate: false\n  savr:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: -savr=\n      separate: false\n  savn:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: -savn=\n      separate: false\n  out:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: -out=\n      separate: false\n\noutputs:\n  output_savp:\n    type: File?\n    outputBinding:\n      glob: $(inputs.savp)\n  output_savr:\n    type: File?\n    outputBinding:\n      glob: $(inputs.savr)\n  output_savn:\n    type: File?\n    outputBinding:\n      glob: $(inputs.savn)\n  output_out:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n\nbaseCommand: [\"run_spp.R\", \"-rf\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/kundajelab/phantompeakqualtools\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'p': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-p=', 'separate': False}, 'doc': 'Threads.\\n'}, 'npeak': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-npeak=', 'separate': False}, 'doc': 'threshold on number of peaks to call\\n'}, 'speak': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-speak=', 'separate': False}, 'doc': 'user-defined cross-correlation peak strandshift\\n'}, 'c': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-c=', 'separate': False}, 'doc': 'full path and name (or URL) of tagAlign/BAM file (can be gzipped) (FILE EXTENSION MUST BE tagAlign.gz, tagAlign, bam or bam.gz)\\n'}, 'i': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-i=', 'separate': False}, 'doc': 'Cotrol: full path and name (or URL) of tagAlign/BAM file (can be gzipped) (FILE EXTENSION MUST BE tagAlign.gz, tagAlign, bam or bam.gz)\\n'}, 'filtchr': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '-filtchr=', 'separate': False}}, 'savp': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '-savp=', 'separate': False}}, 'savr': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '-savr=', 'separate': False}}, 'savn': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '-savn=', 'separate': False}}, 'out': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-out=', 'separate': False}}}",
    "cwl_outputs": "{'output_savp': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.savp)'}}, 'output_savr': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.savr)'}}, 'output_savn': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.savn)'}}, 'output_out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}}",
    "cwl_hints": "[{'$import': 'phantompeakqualtools-docker.yml'}, {'$import': 'phantompeakqualtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['run_spp.R', '-rf']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.p)', 'ramMin': 2048}}",
    "cwl_doc": "This package computes informative enrichment and quality measures for ChIP-seq/DNase-seq/FAIRE-seq/MNase-seq data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Phantompeakqualtools",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/kundajelab/phantompeakqualtools",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/picard/picard-collectalignmentsummarymetrics.cwl",
    "sha": "e16259b33fada26e8d4c9307d9aa588ca9872896",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/picard/picard-collectalignmentsummarymetrics.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Picard-CollectAlignmentSummaryMetrics\ndoc: Picard CollectAlignmentSummaryMetrics command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: picard-docker.yml\n  - $import: picard-bioconda.yml\n\ninputs:\n  R:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: R=\n      separate: false\n  I:\n    type: File\n    secondaryFiles: [.bai, .sbi]\n    inputBinding:\n      position: 2\n      prefix: I=\n      separate: false\n  O:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: O=\n      separate: false\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.O)\n\nbaseCommand: [\"picard\",\"CollectAlignmentSummaryMetrics\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'R': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': 'R=', 'separate': False}}, 'I': {'type': 'File', 'secondaryFiles': ['.bai', '.sbi'], 'inputBinding': {'position': 2, 'prefix': 'I=', 'separate': False}}, 'O': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': 'O=', 'separate': False}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.O)'}}}",
    "cwl_hints": "[{'$import': 'picard-docker.yml'}, {'$import': 'picard-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'CollectAlignmentSummaryMetrics']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Picard CollectAlignmentSummaryMetrics command",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Picard-CollectAlignmentSummaryMetrics",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/picard/picard-collectinsertsizemetrics.cwl",
    "sha": "44d4c1df340e59e060fcd4b5b60bc66e7567c16c",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/picard/picard-collectinsertsizemetrics.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Picard-CollectInsertSizeMetrics\ndoc: Picard CollectInsertSizeMetrics command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: picard-docker.yml\n  - $import: picard-bioconda.yml\n\ninputs:\n  I:\n    type: File\n    secondaryFiles: [.bai, .sbi]\n    inputBinding:\n      position: 1\n      prefix: I=\n      separate: false\n  O:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: O=\n      separate: false\n  H:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: H=\n      separate: false\n  M:\n    type: float?\n    inputBinding:\n      position: 4\n      prefix: M=\n      separate: false\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.O)\n  histogram:\n    type: File\n    outputBinding:\n      glob: $(inputs.H)\n\nbaseCommand: [\"picard\",\"CollectInsertSizeMetrics\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'I': {'type': 'File', 'secondaryFiles': ['.bai', '.sbi'], 'inputBinding': {'position': 1, 'prefix': 'I=', 'separate': False}}, 'O': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': 'O=', 'separate': False}}, 'H': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': 'H=', 'separate': False}}, 'M': {'type': 'float?', 'inputBinding': {'position': 4, 'prefix': 'M=', 'separate': False}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.O)'}}, 'histogram': {'type': 'File', 'outputBinding': {'glob': '$(inputs.H)'}}}",
    "cwl_hints": "[{'$import': 'picard-docker.yml'}, {'$import': 'picard-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'CollectInsertSizeMetrics']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Picard CollectInsertSizeMetrics command",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Picard-CollectInsertSizeMetrics",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/picard/picard-markduplicates.cwl",
    "sha": "c74ece21d4c518ccabea121f66ee3a71f8e63a00",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/picard/picard-markduplicates.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Picard-MarkDuplicates\ndoc: Picard MarkDuplicates command\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: picard-docker.yml\n  - $import: picard-bioconda.yml\n\ninputs:\n  input:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: INPUT=\n      separate: false\n  output:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: OUTPUT=\n      separate: false\n  metrics:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: METRICS_FILE=\n      separate: false\n  validation:\n    type: string\n    inputBinding:\n      position: 4\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n  sorted:\n    type: string\n    inputBinding:\n      position: 5\n      prefix: ASSUME_SORTED=\n      separate: false\n  remove_duplicates:\n    type: string\n    inputBinding:\n      position: 6\n      prefix: REMOVE_DUPLICATES=\n      separate: false\n\noutputs:\n  output_bam:\n    type: File\n    outputBinding:\n      glob: $(inputs.output)\n  metrics_out:\n    type: File\n    outputBinding:\n      glob: $(inputs.metrics)\n\nbaseCommand: [\"picard\",\"MarkDuplicates\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'input': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': 'INPUT=', 'separate': False}}, 'output': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': 'OUTPUT=', 'separate': False}}, 'metrics': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': 'METRICS_FILE=', 'separate': False}}, 'validation': {'type': 'string', 'inputBinding': {'position': 4, 'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}}, 'sorted': {'type': 'string', 'inputBinding': {'position': 5, 'prefix': 'ASSUME_SORTED=', 'separate': False}}, 'remove_duplicates': {'type': 'string', 'inputBinding': {'position': 6, 'prefix': 'REMOVE_DUPLICATES=', 'separate': False}}}",
    "cwl_outputs": "{'output_bam': {'type': 'File', 'outputBinding': {'glob': '$(inputs.output)'}}, 'metrics_out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.metrics)'}}}",
    "cwl_hints": "[{'$import': 'picard-docker.yml'}, {'$import': 'picard-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'MarkDuplicates']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Picard MarkDuplicates command",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Picard-MarkDuplicates",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/annotate_bed_gtf.cwl",
    "sha": "7e76a011d0764097e19387fc9b8252b4011ef09f",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/annotate_bed_gtf.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: annotate_bed\ndoc: This tools annotate bed files from GFF\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-pandas:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          pandas==1.0.5\n  SoftwareRequirement:\n    packages:\n      - package: 'pandas'\n        version:\n          - '1.0.5'\n        specs:\n          - https://anaconda.org/conda-forge/pandas\n\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: my.py\n        entry: |\n          import os\n          import sys\n          import pandas\n          import numpy as np\n\n          tss_size = int(sys.argv[4]) + 1\n          gff_df = pandas.read_csv(sys.argv[1], sep='\\t', header=None, comment='#')\n          gff_df[[9,10,11]] = gff_df[8].str.split(\";\", n = 2, expand = True)\n          for i in range(9,12):\n              if not gff_df[gff_df[i].str.contains(\"transcript_id\")].empty:\n                  gff_df = gff_df.rename(index=str, columns={ i:'transcript_id'})\n                  gff_df['transcript_id'] = gff_df['transcript_id'].str.strip().str.lstrip('transcript_id').str.rstrip('').str.replace('\"', '').str.strip()\n              elif not gff_df[gff_df[i].str.contains(\"gene_id\")].empty:\n                  gff_df = gff_df.rename(index=str, columns={ i:'gene_id'})\n                  gff_df['gene_id'] = gff_df['gene_id'].str.strip().str.lstrip('gene_id').str.rstrip('').str.replace('\"', '').str.strip()\n              elif not gff_df[gff_df[i].str.contains(\"gene_name \")].empty:\n                  gff_df = gff_df.rename(index=str, columns={ i:'gene_name'})\n                  gff_df['gene_name'] = gff_df['gene_name'].str.strip().str.lstrip('gene_name').str.rstrip('').str.replace('\"','').str.replace(';','').str.strip()\n\n          gff_df = gff_df.drop(columns=[5,7,8])\n\n          gff_df = gff_df.rename(index=str, columns={\n              0: 'chr',\n              1: 'source',\n              2: 'feature',\n              3: 'start',\n              4: 'end',\n              6: 'strand'\n          })\n\n          gff_df_forward = gff_df[gff_df['strand'] == '+']\n          gff_df_forward = gff_df_forward.reset_index(drop=True)\n          gff_df_forward['TSS'] = (gff_df_forward['start'] - tss_size)\n          gff_df_forward['TSS'] = gff_df_forward['TSS'].clip(0)\n          gff_df_reverse = gff_df[gff_df['strand'] == '-']\n          gff_df_reverse = gff_df_reverse.reset_index(drop=True)\n          gff_df_reverse['TSS'] = (gff_df_reverse['end'] + tss_size)\n          gff_df_reverse['TSS'] = gff_df_reverse['TSS'].clip(0)\n\n          bed_df = pandas.read_csv(sys.argv[2], sep='\\t', header=None)\n          bed_df = bed_df.rename(index=str, columns={0: \"#chrom\", 1: \"st\", 2:\"end\", 3:\"label\", 4:\"pvalue\"})\n\n          tpm_df = pandas.read_csv(sys.argv[3], sep='\\t')\n          tpm_df[['#chrom', 'coordinate']] = tpm_df['coordinate'].str.split(\":\", n = 2, expand = True)\n          tpm_df[['st', 'end']] = tpm_df['coordinate'].str.split(\"-\", n = 2, expand = True)\n          tpm_df['st'] = tpm_df['st'].astype('int64')\n          tpm_df['end'] = tpm_df['end'].astype('int64')\n          tpm_df = tpm_df.drop(columns=['coordinate'])\n          tpm_df['TPM'] = tpm_df[tpm_df.columns.difference(['#chrom', 'st', 'end'])].mean(axis=1)\n          tpm_df = tpm_df[['#chrom', 'st', 'end', 'TPM']]\n          bed_df = bed_df.merge(tpm_df, on=['#chrom','st', 'end'])\n\n          out = os.path.basename(sys.argv[2]).replace('.bed','_annot.bed')\n          data = []\n          for i, r in bed_df.iterrows():\n              chr = r['#chrom']\n              p_start = r['st']\n              p_end = r['end'] - 1\n              annot = ''\n\n              # Is in TSS:\n              df = gff_df_forward[(gff_df_forward['chr'] == chr) & (((p_start <= gff_df_forward['TSS']) & (p_end > gff_df_forward['TSS'])) |\n                                 ((p_start >= gff_df_forward['TSS'])&(p_start < gff_df_forward['start'])))]\n              if not df.empty:\n                  df = df.reset_index(drop=True)\n                  df['gene_name'] = 'promoter-' + df['gene_name']\n                  annot = df['gene_name'].str.cat(sep=',')\n\n              # Is in TSS:\n              df = gff_df_reverse[(gff_df_reverse['chr'] == chr) & (((p_start <= gff_df_reverse['end']) & (p_end > gff_df_reverse['end'])) |\n                                 ((p_start >= gff_df_reverse['end'])&(p_start < gff_df_reverse['TSS'])))]\n\n              if not df.empty:\n                  df = df.reset_index(drop=True)\n                  df['gene_name'] = 'promoter-' + df['gene_name']\n                  if annot:\n                      annot += ','\n                  annot += df['gene_name'].str.cat(sep=',')\n\n              # Is in exon\n              df = gff_df[(gff_df['chr'] == chr) & (((p_start <= gff_df['start']) & (p_end > gff_df['start'])) |\n                                 ((p_start >= gff_df['start'])&(p_start < gff_df['end'])))]\n              if not df.empty:\n                  df = df.reset_index(drop=True)\n                  df['gene_name'] = 'exon-' + df['gene_name']\n                  if annot:\n                      annot += ','\n                  annot += df['gene_name'].str.cat(sep=',')\n              r['annotation'] = annot\n              data.append(r)\n          annotated_df = pandas.DataFrame(data)\n          annotated_df.to_csv(out, index=None, sep='\\t')\n\ninputs:\n  - id: gtf\n    type: File\n    inputBinding:\n      position: 1\n  - id: bed\n    type: File\n    inputBinding:\n      position: 2\n  - id: tpm\n    type: File\n    inputBinding:\n      position: 3\n  - id: tss_size\n    type: int\n    inputBinding:\n      position: 4\noutputs:\n  - id: output\n    type: File\n    outputBinding:\n      glob: $(inputs.bed.nameroot)_annot.bed\n\nbaseCommand: [\"python\",\"my.py\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'gtf', 'type': 'File', 'inputBinding': {'position': 1}}, {'id': 'bed', 'type': 'File', 'inputBinding': {'position': 2}}, {'id': 'tpm', 'type': 'File', 'inputBinding': {'position': 3}}, {'id': 'tss_size', 'type': 'int', 'inputBinding': {'position': 4}}]",
    "cwl_outputs": "[{'id': 'output', 'type': 'File', 'outputBinding': {'glob': '$(inputs.bed.nameroot)_annot.bed'}}]",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-pandas:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    pandas==1.0.5\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'pandas', 'version': ['1.0.5'], 'specs': ['https://anaconda.org/conda-forge/pandas']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'my.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'my.py', 'entry': 'import os\\nimport sys\\nimport pandas\\nimport numpy as np\\n\\ntss_size = int(sys.argv[4]) + 1\\ngff_df = pandas.read_csv(sys.argv[1], sep=\\'\\\\t\\', header=None, comment=\\'#\\')\\ngff_df[[9,10,11]] = gff_df[8].str.split(\";\", n = 2, expand = True)\\nfor i in range(9,12):\\n    if not gff_df[gff_df[i].str.contains(\"transcript_id\")].empty:\\n        gff_df = gff_df.rename(index=str, columns={ i:\\'transcript_id\\'})\\n        gff_df[\\'transcript_id\\'] = gff_df[\\'transcript_id\\'].str.strip().str.lstrip(\\'transcript_id\\').str.rstrip(\\'\\').str.replace(\\'\"\\', \\'\\').str.strip()\\n    elif not gff_df[gff_df[i].str.contains(\"gene_id\")].empty:\\n        gff_df = gff_df.rename(index=str, columns={ i:\\'gene_id\\'})\\n        gff_df[\\'gene_id\\'] = gff_df[\\'gene_id\\'].str.strip().str.lstrip(\\'gene_id\\').str.rstrip(\\'\\').str.replace(\\'\"\\', \\'\\').str.strip()\\n    elif not gff_df[gff_df[i].str.contains(\"gene_name \")].empty:\\n        gff_df = gff_df.rename(index=str, columns={ i:\\'gene_name\\'})\\n        gff_df[\\'gene_name\\'] = gff_df[\\'gene_name\\'].str.strip().str.lstrip(\\'gene_name\\').str.rstrip(\\'\\').str.replace(\\'\"\\',\\'\\').str.replace(\\';\\',\\'\\').str.strip()\\n\\ngff_df = gff_df.drop(columns=[5,7,8])\\n\\ngff_df = gff_df.rename(index=str, columns={\\n    0: \\'chr\\',\\n    1: \\'source\\',\\n    2: \\'feature\\',\\n    3: \\'start\\',\\n    4: \\'end\\',\\n    6: \\'strand\\'\\n})\\n\\ngff_df_forward = gff_df[gff_df[\\'strand\\'] == \\'+\\']\\ngff_df_forward = gff_df_forward.reset_index(drop=True)\\ngff_df_forward[\\'TSS\\'] = (gff_df_forward[\\'start\\'] - tss_size)\\ngff_df_forward[\\'TSS\\'] = gff_df_forward[\\'TSS\\'].clip(0)\\ngff_df_reverse = gff_df[gff_df[\\'strand\\'] == \\'-\\']\\ngff_df_reverse = gff_df_reverse.reset_index(drop=True)\\ngff_df_reverse[\\'TSS\\'] = (gff_df_reverse[\\'end\\'] + tss_size)\\ngff_df_reverse[\\'TSS\\'] = gff_df_reverse[\\'TSS\\'].clip(0)\\n\\nbed_df = pandas.read_csv(sys.argv[2], sep=\\'\\\\t\\', header=None)\\nbed_df = bed_df.rename(index=str, columns={0: \"#chrom\", 1: \"st\", 2:\"end\", 3:\"label\", 4:\"pvalue\"})\\n\\ntpm_df = pandas.read_csv(sys.argv[3], sep=\\'\\\\t\\')\\ntpm_df[[\\'#chrom\\', \\'coordinate\\']] = tpm_df[\\'coordinate\\'].str.split(\":\", n = 2, expand = True)\\ntpm_df[[\\'st\\', \\'end\\']] = tpm_df[\\'coordinate\\'].str.split(\"-\", n = 2, expand = True)\\ntpm_df[\\'st\\'] = tpm_df[\\'st\\'].astype(\\'int64\\')\\ntpm_df[\\'end\\'] = tpm_df[\\'end\\'].astype(\\'int64\\')\\ntpm_df = tpm_df.drop(columns=[\\'coordinate\\'])\\ntpm_df[\\'TPM\\'] = tpm_df[tpm_df.columns.difference([\\'#chrom\\', \\'st\\', \\'end\\'])].mean(axis=1)\\ntpm_df = tpm_df[[\\'#chrom\\', \\'st\\', \\'end\\', \\'TPM\\']]\\nbed_df = bed_df.merge(tpm_df, on=[\\'#chrom\\',\\'st\\', \\'end\\'])\\n\\nout = os.path.basename(sys.argv[2]).replace(\\'.bed\\',\\'_annot.bed\\')\\ndata = []\\nfor i, r in bed_df.iterrows():\\n    chr = r[\\'#chrom\\']\\n    p_start = r[\\'st\\']\\n    p_end = r[\\'end\\'] - 1\\n    annot = \\'\\'\\n\\n    # Is in TSS:\\n    df = gff_df_forward[(gff_df_forward[\\'chr\\'] == chr) & (((p_start <= gff_df_forward[\\'TSS\\']) & (p_end > gff_df_forward[\\'TSS\\'])) |\\n                       ((p_start >= gff_df_forward[\\'TSS\\'])&(p_start < gff_df_forward[\\'start\\'])))]\\n    if not df.empty:\\n        df = df.reset_index(drop=True)\\n        df[\\'gene_name\\'] = \\'promoter-\\' + df[\\'gene_name\\']\\n        annot = df[\\'gene_name\\'].str.cat(sep=\\',\\')\\n\\n    # Is in TSS:\\n    df = gff_df_reverse[(gff_df_reverse[\\'chr\\'] == chr) & (((p_start <= gff_df_reverse[\\'end\\']) & (p_end > gff_df_reverse[\\'end\\'])) |\\n                       ((p_start >= gff_df_reverse[\\'end\\'])&(p_start < gff_df_reverse[\\'TSS\\'])))]\\n\\n    if not df.empty:\\n        df = df.reset_index(drop=True)\\n        df[\\'gene_name\\'] = \\'promoter-\\' + df[\\'gene_name\\']\\n        if annot:\\n            annot += \\',\\'\\n        annot += df[\\'gene_name\\'].str.cat(sep=\\',\\')\\n\\n    # Is in exon\\n    df = gff_df[(gff_df[\\'chr\\'] == chr) & (((p_start <= gff_df[\\'start\\']) & (p_end > gff_df[\\'start\\'])) |\\n                       ((p_start >= gff_df[\\'start\\'])&(p_start < gff_df[\\'end\\'])))]\\n    if not df.empty:\\n        df = df.reset_index(drop=True)\\n        df[\\'gene_name\\'] = \\'exon-\\' + df[\\'gene_name\\']\\n        if annot:\\n            annot += \\',\\'\\n        annot += df[\\'gene_name\\'].str.cat(sep=\\',\\')\\n    r[\\'annotation\\'] = annot\\n    data.append(r)\\nannotated_df = pandas.DataFrame(data)\\nannotated_df.to_csv(out, index=None, sep=\\'\\\\t\\')\\n'}]}}",
    "cwl_doc": "This tools annotate bed files from GFF",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "annotate_bed",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/concatenate-transdecoder-proteins.cwl",
    "sha": "876f0fb38b1f16cb3182a315628df2f8bbd87207",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/concatenate-transdecoder-proteins.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: concatenate_transdecoder_proteins\ndoc: Concatenate transdecoder longest_orfs.pep proteins by chromosome\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-biopython:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.77\n  SoftwareRequirement:\n    packages:\n      - package: 'biopython'\n        version:\n          - '1.71'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n\nrequirements:\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: concatenate-transdecoder-proteins.py\n        entry: |\n          import os\n          import sys\n          import gzip\n          from Bio import SeqIO\n          from Bio.SeqRecord import SeqRecord\n          from multiprocessing import Pool\n\n          fasta = sys.argv[1]\n          prot_dir = sys.argv[2]\n          window = int(sys.argv[3])\n          overlap = int(sys.argv[4])\n          threads = int(sys.argv[5])\n\n          filename, ext = os.path.splitext(os.path.basename(fasta))\n          if ext == '.gz':\n              handle = gzip.open(fasta, 'rt')\n          else:\n              handle = open(fasta, 'r')\n\n          def worker(r):\n              start = 0\n              length = len(r.seq)\n              records = {}\n              while True:\n                  end = window + start\n                  if end > length:\n                      end = length\n                  file = os.path.join(prot_dir, '{}_{}_transdecoder.fsa'.format(r.id,start))\n                  if os.path.exists(file):\n                      with open(file) as fin:\n                          for rec in SeqIO.parse(fin, \"fasta\"):\n                              field = rec.description.split('{}_{}'.format(r.id, start))\n                              field = field[2][1:-3].split('-')\n                              astart = start + int(field[0])\n                              aend = start + int(field[1])\n                              v = records.setdefault('{}-{}'.format(astart, aend), {})\n                              v1 = v.setdefault(rec.seq, rec)\n                  start += 2000000\n                  if end == length:\n                      break\n              if records:\n                  print('Writing: {}_transdecoder.fsa'.format(r.id))\n                  with open('{}_transdecoder.fsa'.format(r.id), 'w') as fout, open('{}_transdecoder.tsv'.format(r.id), 'w') as fouttsv:\n                      for s in records:\n                          if len(records[s]) != 1:\n                              fouttsv.write('{} {}'.format(r.id, s))\n                          for rec in records[s]:\n                              field = records[s][rec].description.split(' ')\n                              records[s][rec].id = '{}_{}'.format(r.id, s)\n                              records[s][rec].description = ' '.join(field[1:-1]) + ' ' + s + ' ' + records[s][rec].description[-3:]\n                              fout.write(records[s][rec].format(\"fasta\"))\n\n          p = Pool(processes=threads)\n          results = p.map(worker, [r for r in SeqIO.parse(handle, \"fasta\")])\n          p.close()\n          handle.close()\n\ninputs:\n  fasta:\n    type: File\n    inputBinding:\n      position: 1\n  protdir:\n    type: Directory\n    inputBinding:\n      position: 2\n  window:\n    type: int\n    inputBinding:\n      position: 3\n  overlap:\n    type: int\n    inputBinding:\n      position: 4\n  threads:\n    type: int\n    inputBinding:\n      position: 5\n\noutputs:\n  fasta:\n    type: File[]\n    outputBinding:\n      glob: '*.fsa'\n  tsv:\n    type: File[]\n    outputBinding:\n      glob: '*.tsv'\n\nbaseCommand: [\"python\",\"concatenate-transdecoder-proteins.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': {'type': 'File', 'inputBinding': {'position': 1}}, 'protdir': {'type': 'Directory', 'inputBinding': {'position': 2}}, 'window': {'type': 'int', 'inputBinding': {'position': 3}}, 'overlap': {'type': 'int', 'inputBinding': {'position': 4}}, 'threads': {'type': 'int', 'inputBinding': {'position': 5}}}",
    "cwl_outputs": "{'fasta': {'type': 'File[]', 'outputBinding': {'glob': '*.fsa'}}, 'tsv': {'type': 'File[]', 'outputBinding': {'glob': '*.tsv'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-biopython:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.77\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'biopython', 'version': ['1.71'], 'specs': ['https://anaconda.org/conda-forge/biopython']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'concatenate-transdecoder-proteins.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {'coresMin': '$(inputs.threads)'}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'concatenate-transdecoder-proteins.py', 'entry': 'import os\\nimport sys\\nimport gzip\\nfrom Bio import SeqIO\\nfrom Bio.SeqRecord import SeqRecord\\nfrom multiprocessing import Pool\\n\\nfasta = sys.argv[1]\\nprot_dir = sys.argv[2]\\nwindow = int(sys.argv[3])\\noverlap = int(sys.argv[4])\\nthreads = int(sys.argv[5])\\n\\nfilename, ext = os.path.splitext(os.path.basename(fasta))\\nif ext == \\'.gz\\':\\n    handle = gzip.open(fasta, \\'rt\\')\\nelse:\\n    handle = open(fasta, \\'r\\')\\n\\ndef worker(r):\\n    start = 0\\n    length = len(r.seq)\\n    records = {}\\n    while True:\\n        end = window + start\\n        if end > length:\\n            end = length\\n        file = os.path.join(prot_dir, \\'{}_{}_transdecoder.fsa\\'.format(r.id,start))\\n        if os.path.exists(file):\\n            with open(file) as fin:\\n                for rec in SeqIO.parse(fin, \"fasta\"):\\n                    field = rec.description.split(\\'{}_{}\\'.format(r.id, start))\\n                    field = field[2][1:-3].split(\\'-\\')\\n                    astart = start + int(field[0])\\n                    aend = start + int(field[1])\\n                    v = records.setdefault(\\'{}-{}\\'.format(astart, aend), {})\\n                    v1 = v.setdefault(rec.seq, rec)\\n        start += 2000000\\n        if end == length:\\n            break\\n    if records:\\n        print(\\'Writing: {}_transdecoder.fsa\\'.format(r.id))\\n        with open(\\'{}_transdecoder.fsa\\'.format(r.id), \\'w\\') as fout, open(\\'{}_transdecoder.tsv\\'.format(r.id), \\'w\\') as fouttsv:\\n            for s in records:\\n                if len(records[s]) != 1:\\n                    fouttsv.write(\\'{} {}\\'.format(r.id, s))\\n                for rec in records[s]:\\n                    field = records[s][rec].description.split(\\' \\')\\n                    records[s][rec].id = \\'{}_{}\\'.format(r.id, s)\\n                    records[s][rec].description = \\' \\'.join(field[1:-1]) + \\' \\' + s + \\' \\' + records[s][rec].description[-3:]\\n                    fout.write(records[s][rec].format(\"fasta\"))\\n\\np = Pool(processes=threads)\\nresults = p.map(worker, [r for r in SeqIO.parse(handle, \"fasta\")])\\np.close()\\nhandle.close()\\n'}]}}",
    "cwl_doc": "Concatenate transdecoder longest_orfs.pep proteins by chromosome",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "concatenate_transdecoder_proteins",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/contaminant-removal.cwl",
    "sha": "8cbefa4cb78eb89975a5cb181b2d7d8ef098e359",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/contaminant-removal.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: contaminant_removal\ndoc: This tools detect contaminants from a Blast TSV file\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-contaminants-removal:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.77  \\\n          networkx==2.4 \\\n          pandas==1.0.5\n  SoftwareRequirement:\n    packages:\n      - package: 'pandas'\n        version:\n          - '1.0.5'\n        specs:\n          - https://anaconda.org/conda-forge/pandas\n      - package: 'biopython'\n        version:\n          - '1.71'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n      - package: 'networkx'\n        version:\n          - '2.4'\n        specs:\n          - https://anaconda.org/conda-forge/networkx\n\nrequirements:\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: contaminants_removal.py\n        entry: |\n          import os\n          import sys\n          import pandas\n          import gzip\n          from Bio import SeqIO\n          from Bio.SeqRecord import SeqRecord\n          from multiprocessing import Pool, Value\n\n          fasta = sys.argv[1]\n          blast_tsv = sys.argv[2]\n          threads = int(sys.argv[3])\n          min_length = int(sys.argv[4])\n          sequence_chunk = int(sys.argv[5])\n\n          if threads > 1:\n              threads = threads - 1\n\n          blast = pandas.read_csv(blast_tsv, sep='\\t', header=None,\n                                  names=['qseqid', 'sseqid', 'pident', 'length', 'mismatch', 'gapopen',\n                                         'qlen', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore', 'score'])\n          print('{} results loaded from Blast'.format(len(blast)))\n\n          blast['coverage'] = blast['length']*100/blast['qlen']\n          df_cont = blast[((blast['pident'] >= 98.0) & (blast['length'] >= 40))|((blast['pident'] >= 94.0) & (blast['length'] >= 100))|((blast['pident'] >= 90.0) & (blast['length'] >= 200))]\n          df_cont = df_cont[df_cont['coverage'] >= 75].sort_values(by=['qseqid', 'coverage']).drop_duplicates(subset='qseqid', keep=\"last\")\n          contaminated_ids = df_cont['qseqid'].unique()\n          print('{} contaminated IDs'.format(len(contaminated_ids)))\n          blast = blast[~blast['qseqid'].isin(contaminated_ids)]\n\n          filename, ext = os.path.splitext(os.path.basename(fasta))\n          if ext == '.gz':\n              handler = gzip.open(fasta, 'rt')\n              prefix  =  os.path.splitext(filename)[0]\n          else:\n              handler = open(fasta, 'r')\n              prefix = filename\n\n          total = 0\n          positions = [0]\n          line = handler.readline()\n          while line:\n              if line.startswith('>'):\n                  total += 1\n                  if total == sequence_chunk:\n                      total = 0\n                      positions.append(pos)\n                      print('position: {}'.format(pos))\n              pos = handler.tell()\n              line = handler.readline()\n          print('{} chunks of {} sequences to process'.format(len(positions), sequence_chunk))\n          handler.close()\n\n          file_prefix = Value('i', 0)\n          counter = Value('i', 0)\n\n          def build_seqs(segs, rec):\n              last = 0\n              segments_to_build = []\n              for s in segs:\n                  if s[0] - 1 - last >= min_length:\n                      segments_to_build.append([last,s[0] - 1])\n                  last = s[1] + 1\n              if len(rec.seq) - last >= min_length:\n                  segments_to_build.append([last,len(rec.seq)])\n              return segments_to_build\n\n          def terminal_contamination(df):\n              return df[((df['qstart'] <= 25) | (df['qend'] >= df['qlen'] - 25))]\n\n          def internal_contamination(df):\n              return df[((df['qstart'] > 25) | (df['qend'] < df['qlen'] - 25))]\n\n          def contaminations(df):\n              return pandas.concat([terminal_contamination(df), internal_contamination(df)])\n\n          def build_segments_worker(position):\n              global counter\n              global total\n              global file_prefix\n              with file_prefix.get_lock():\n                  file_prefix.value += 1\n                  pre = file_prefix.value\n              filename, ext = os.path.splitext(os.path.basename(fasta))\n              if ext == '.gz':\n                  handler = gzip.open(fasta, 'rt')\n              else:\n                  handler = open(fasta, 'r')\n              handler.seek(position, 0)\n              total = 0\n              sequences = {}\n              for record in SeqIO.parse(handler, \"fasta\"):\n                  total += 1\n                  if total > sequence_chunk:\n                      break\n                  sequences[record.id] = record\n              handler.close()\n\n              with open('{}_nocont_tmp.fsa'.format(pre), \"w\") as nocont_handle, open('{}_cont_tmp.ids'.format(pre), \"w\") as cont_handle:\n                  blast_df = blast[blast['qseqid'].isin(sequences.keys())]\n                  for t in sequences:\n                      trans = sequences[t]\n                      trans_len = len(trans.seq)\n                      df = contaminations(blast_df[blast_df['qseqid'] == t])\n                      if df.empty:\n                          if trans_len >= min_length:\n                              SeqIO.write(trans, nocont_handle, \"fasta\")\n                      else:\n                          segs = []\n                          index = 0\n                          last_seg = None\n                          for i, r in df.iterrows():\n                              if not segs:\n                                  index = 1\n                                  last_seg = [r['qstart'], r['qend']]\n                                  segs.append(last_seg)\n                              elif r['qstart'] <= last_seg[1] < r['qend']:\n                                  last_seg = [last_seg[0], r['qend']]\n                                  segs[index - 1] = last_seg\n                              elif r['qstart'] > last_seg[1]:\n                                  index += 1\n                                  last_seg = [r['qstart'], r['qend']]\n                                  segs.append(last_seg)\n                          segs_to_build = build_seqs(segs, trans)\n                          if segs_to_build:\n                              for s in segs_to_build:\n                                  id = '{}|{}_{}'.format(t, s[0], s[1])\n                                  rec = SeqRecord(trans.seq[s[0]:s[1]], id=id, name=id, description='')\n                                  SeqIO.write(rec, nocont_handle, \"fasta\")\n                          else:\n                              df = df.sort_values(by=['qseqid', 'coverage']).drop_duplicates(subset='qseqid', keep=\"last\")\n                              for i, r in df.iterrows():\n                                  cont_handle.write('{}\\t{}\\t{}\\t{}\\t{}\\t{}\\n'.format(r['qseqid'],r['sseqid'],r['pident'],r['evalue'],r['bitscore'],r['coverage']))\n\n          print('Processing sequences by cunks of {}'.format(sequence_chunk))\n          p = Pool(processes=threads)\n          data = p.map(build_segments_worker, positions)\n          print('Printing results')\n          count = 0\n          cont_count = 0\n          with gzip.open('{}_nocont.fsa.gz'.format(prefix), \"wt\") as output_handle, open('{}_cont.ids'.format(prefix), \"w\") as cont_handle:\n              cont_handle.write('{}\\t{}\\t{}\\t{}\\t{}\\n'.format('qseqid','sseqid','pident','evalue','bitscore','coverage'))\n              for i, r in df_cont.iterrows():\n                  cont_count += 1\n                  cont_handle.write('{}\\t{}\\t{}\\t{}\\t{}\\t{}\\n'.format(r['qseqid'],r['sseqid'],r['pident'],r['evalue'],r['bitscore'],r['coverage']))\n              for d in range(1, len(positions) + 1):\n                  with open('{}_nocont_tmp.fsa'.format(d)) as input_handle:\n                      for r in SeqIO.parse(input_handle, \"fasta\"):\n                          count += 1\n                          SeqIO.write(r, output_handle, \"fasta\")\n                  os.remove('{}_nocont_tmp.fsa'.format(d))\n                  with open('{}_cont_tmp.ids'.format(d)) as input_handle:\n                      for r in input_handle:\n                          cont_count += 1\n                          cont_handle.write(r)\n                  os.remove('{}_cont_tmp.ids'.format(d))\n\n          print('{} transcripts with no contamination'.format(count))\n          print('{} transcripts discarded due to contamination'.format(cont_count))\n\ninputs:\n  fasta:\n    type: File\n    inputBinding:\n      position: 1\n  blast:\n    type: File\n    inputBinding:\n      position: 2\n  threads:\n    type: int\n    inputBinding:\n      position: 3\n  min_length:\n    type: int\n    inputBinding:\n      position: 4\n  sequence_chunk:\n    type: int\n    inputBinding:\n      position: 5\n\noutputs:\n  fsa:\n    type: File\n    outputBinding:\n      glob: '*_nocont.fsa.gz'\n  cont:\n    type: File\n    outputBinding:\n      glob: '*_cont.ids'\n\nbaseCommand: [\"python\",\"contaminants_removal.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': {'type': 'File', 'inputBinding': {'position': 1}}, 'blast': {'type': 'File', 'inputBinding': {'position': 2}}, 'threads': {'type': 'int', 'inputBinding': {'position': 3}}, 'min_length': {'type': 'int', 'inputBinding': {'position': 4}}, 'sequence_chunk': {'type': 'int', 'inputBinding': {'position': 5}}}",
    "cwl_outputs": "{'fsa': {'type': 'File', 'outputBinding': {'glob': '*_nocont.fsa.gz'}}, 'cont': {'type': 'File', 'outputBinding': {'glob': '*_cont.ids'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-contaminants-removal:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.77  \\\\\\n    networkx==2.4 \\\\\\n    pandas==1.0.5\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'pandas', 'version': ['1.0.5'], 'specs': ['https://anaconda.org/conda-forge/pandas']}, {'package': 'biopython', 'version': ['1.71'], 'specs': ['https://anaconda.org/conda-forge/biopython']}, {'package': 'networkx', 'version': ['2.4'], 'specs': ['https://anaconda.org/conda-forge/networkx']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'contaminants_removal.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {'coresMin': '$(inputs.threads)'}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'contaminants_removal.py', 'entry': 'import os\\nimport sys\\nimport pandas\\nimport gzip\\nfrom Bio import SeqIO\\nfrom Bio.SeqRecord import SeqRecord\\nfrom multiprocessing import Pool, Value\\n\\nfasta = sys.argv[1]\\nblast_tsv = sys.argv[2]\\nthreads = int(sys.argv[3])\\nmin_length = int(sys.argv[4])\\nsequence_chunk = int(sys.argv[5])\\n\\nif threads > 1:\\n    threads = threads - 1\\n\\nblast = pandas.read_csv(blast_tsv, sep=\\'\\\\t\\', header=None,\\n                        names=[\\'qseqid\\', \\'sseqid\\', \\'pident\\', \\'length\\', \\'mismatch\\', \\'gapopen\\',\\n                               \\'qlen\\', \\'qstart\\', \\'qend\\', \\'sstart\\', \\'send\\', \\'evalue\\', \\'bitscore\\', \\'score\\'])\\nprint(\\'{} results loaded from Blast\\'.format(len(blast)))\\n\\nblast[\\'coverage\\'] = blast[\\'length\\']*100/blast[\\'qlen\\']\\ndf_cont = blast[((blast[\\'pident\\'] >= 98.0) & (blast[\\'length\\'] >= 40))|((blast[\\'pident\\'] >= 94.0) & (blast[\\'length\\'] >= 100))|((blast[\\'pident\\'] >= 90.0) & (blast[\\'length\\'] >= 200))]\\ndf_cont = df_cont[df_cont[\\'coverage\\'] >= 75].sort_values(by=[\\'qseqid\\', \\'coverage\\']).drop_duplicates(subset=\\'qseqid\\', keep=\"last\")\\ncontaminated_ids = df_cont[\\'qseqid\\'].unique()\\nprint(\\'{} contaminated IDs\\'.format(len(contaminated_ids)))\\nblast = blast[~blast[\\'qseqid\\'].isin(contaminated_ids)]\\n\\nfilename, ext = os.path.splitext(os.path.basename(fasta))\\nif ext == \\'.gz\\':\\n    handler = gzip.open(fasta, \\'rt\\')\\n    prefix  =  os.path.splitext(filename)[0]\\nelse:\\n    handler = open(fasta, \\'r\\')\\n    prefix = filename\\n\\ntotal = 0\\npositions = [0]\\nline = handler.readline()\\nwhile line:\\n    if line.startswith(\\'>\\'):\\n        total += 1\\n        if total == sequence_chunk:\\n            total = 0\\n            positions.append(pos)\\n            print(\\'position: {}\\'.format(pos))\\n    pos = handler.tell()\\n    line = handler.readline()\\nprint(\\'{} chunks of {} sequences to process\\'.format(len(positions), sequence_chunk))\\nhandler.close()\\n\\nfile_prefix = Value(\\'i\\', 0)\\ncounter = Value(\\'i\\', 0)\\n\\ndef build_seqs(segs, rec):\\n    last = 0\\n    segments_to_build = []\\n    for s in segs:\\n        if s[0] - 1 - last >= min_length:\\n            segments_to_build.append([last,s[0] - 1])\\n        last = s[1] + 1\\n    if len(rec.seq) - last >= min_length:\\n        segments_to_build.append([last,len(rec.seq)])\\n    return segments_to_build\\n\\ndef terminal_contamination(df):\\n    return df[((df[\\'qstart\\'] <= 25) | (df[\\'qend\\'] >= df[\\'qlen\\'] - 25))]\\n\\ndef internal_contamination(df):\\n    return df[((df[\\'qstart\\'] > 25) | (df[\\'qend\\'] < df[\\'qlen\\'] - 25))]\\n\\ndef contaminations(df):\\n    return pandas.concat([terminal_contamination(df), internal_contamination(df)])\\n\\ndef build_segments_worker(position):\\n    global counter\\n    global total\\n    global file_prefix\\n    with file_prefix.get_lock():\\n        file_prefix.value += 1\\n        pre = file_prefix.value\\n    filename, ext = os.path.splitext(os.path.basename(fasta))\\n    if ext == \\'.gz\\':\\n        handler = gzip.open(fasta, \\'rt\\')\\n    else:\\n        handler = open(fasta, \\'r\\')\\n    handler.seek(position, 0)\\n    total = 0\\n    sequences = {}\\n    for record in SeqIO.parse(handler, \"fasta\"):\\n        total += 1\\n        if total > sequence_chunk:\\n            break\\n        sequences[record.id] = record\\n    handler.close()\\n\\n    with open(\\'{}_nocont_tmp.fsa\\'.format(pre), \"w\") as nocont_handle, open(\\'{}_cont_tmp.ids\\'.format(pre), \"w\") as cont_handle:\\n        blast_df = blast[blast[\\'qseqid\\'].isin(sequences.keys())]\\n        for t in sequences:\\n            trans = sequences[t]\\n            trans_len = len(trans.seq)\\n            df = contaminations(blast_df[blast_df[\\'qseqid\\'] == t])\\n            if df.empty:\\n                if trans_len >= min_length:\\n                    SeqIO.write(trans, nocont_handle, \"fasta\")\\n            else:\\n                segs = []\\n                index = 0\\n                last_seg = None\\n                for i, r in df.iterrows():\\n                    if not segs:\\n                        index = 1\\n                        last_seg = [r[\\'qstart\\'], r[\\'qend\\']]\\n                        segs.append(last_seg)\\n                    elif r[\\'qstart\\'] <= last_seg[1] < r[\\'qend\\']:\\n                        last_seg = [last_seg[0], r[\\'qend\\']]\\n                        segs[index - 1] = last_seg\\n                    elif r[\\'qstart\\'] > last_seg[1]:\\n                        index += 1\\n                        last_seg = [r[\\'qstart\\'], r[\\'qend\\']]\\n                        segs.append(last_seg)\\n                segs_to_build = build_seqs(segs, trans)\\n                if segs_to_build:\\n                    for s in segs_to_build:\\n                        id = \\'{}|{}_{}\\'.format(t, s[0], s[1])\\n                        rec = SeqRecord(trans.seq[s[0]:s[1]], id=id, name=id, description=\\'\\')\\n                        SeqIO.write(rec, nocont_handle, \"fasta\")\\n                else:\\n                    df = df.sort_values(by=[\\'qseqid\\', \\'coverage\\']).drop_duplicates(subset=\\'qseqid\\', keep=\"last\")\\n                    for i, r in df.iterrows():\\n                        cont_handle.write(\\'{}\\\\t{}\\\\t{}\\\\t{}\\\\t{}\\\\t{}\\\\n\\'.format(r[\\'qseqid\\'],r[\\'sseqid\\'],r[\\'pident\\'],r[\\'evalue\\'],r[\\'bitscore\\'],r[\\'coverage\\']))\\n\\nprint(\\'Processing sequences by cunks of {}\\'.format(sequence_chunk))\\np = Pool(processes=threads)\\ndata = p.map(build_segments_worker, positions)\\nprint(\\'Printing results\\')\\ncount = 0\\ncont_count = 0\\nwith gzip.open(\\'{}_nocont.fsa.gz\\'.format(prefix), \"wt\") as output_handle, open(\\'{}_cont.ids\\'.format(prefix), \"w\") as cont_handle:\\n    cont_handle.write(\\'{}\\\\t{}\\\\t{}\\\\t{}\\\\t{}\\\\n\\'.format(\\'qseqid\\',\\'sseqid\\',\\'pident\\',\\'evalue\\',\\'bitscore\\',\\'coverage\\'))\\n    for i, r in df_cont.iterrows():\\n        cont_count += 1\\n        cont_handle.write(\\'{}\\\\t{}\\\\t{}\\\\t{}\\\\t{}\\\\t{}\\\\n\\'.format(r[\\'qseqid\\'],r[\\'sseqid\\'],r[\\'pident\\'],r[\\'evalue\\'],r[\\'bitscore\\'],r[\\'coverage\\']))\\n    for d in range(1, len(positions) + 1):\\n        with open(\\'{}_nocont_tmp.fsa\\'.format(d)) as input_handle:\\n            for r in SeqIO.parse(input_handle, \"fasta\"):\\n                count += 1\\n                SeqIO.write(r, output_handle, \"fasta\")\\n        os.remove(\\'{}_nocont_tmp.fsa\\'.format(d))\\n        with open(\\'{}_cont_tmp.ids\\'.format(d)) as input_handle:\\n            for r in input_handle:\\n                cont_count += 1\\n                cont_handle.write(r)\\n        os.remove(\\'{}_cont_tmp.ids\\'.format(d))\\n\\nprint(\\'{} transcripts with no contamination\\'.format(count))\\nprint(\\'{} transcripts discarded due to contamination\\'.format(cont_count))\\n'}]}}",
    "cwl_doc": "This tools detect contaminants from a Blast TSV file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "contaminant_removal",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/contamination-detection.cwl",
    "sha": "39d7b7c8c38ca6e88f225efe46d78179d8827b0a",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/contamination-detection.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: contamination_detection\ndoc: This tools remove contamination using a Blast TSV file\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-transcriptome-contamination-detection:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.77  \\\n          networkx==2.4 \\\n          pandas==1.0.5\n  SoftwareRequirement:\n    packages:\n      - package: 'pandas'\n        version:\n          - '1.0.5'\n        specs:\n          - https://anaconda.org/conda-forge/pandas\n      - package: 'biopython'\n        version:\n          - '1.71'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n      - package: 'networkx'\n        version:\n          - '2.4'\n        specs:\n          - https://anaconda.org/conda-forge/networkx\n\n\nrequirements:\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: transcriptome-contamination-detection.py\n        entry: |\n          import os\n          import sys\n          import pandas\n          import gzip\n          import pickle\n          import networkx as nx\n          from Bio import SeqIO\n          from multiprocessing import Pool\n\n          fasta = sys.argv[1]\n          blast_tsv = sys.argv[2]\n          threads = int(sys.argv[3])\n          tax_pickle = sys.argv[4]\n          tax_id = sys.argv[5]\n\n          def successors(g, O):\n              \"\"\"\n              Extract ancestors nodes from an starting node\n              :param g: starting node name\n              :param O: Graph\n              :return: a set with node names\n              \"\"\"\n              result = {g}\n              for o in O.successors(g):\n                  result.update(successors(o, O))\n              return result\n\n          def findNode(O, id):\n              nodes = [y for x,y in O.nodes(data=True) if y['id']==id]\n              if nodes:\n                  a = \"\"\n                  for i in nx.shortest_path(O, source=\"1\", target=id)[2:]:\n                      ns = [y for x,y in O.nodes(data=True) if y['id']==i]\n                      if ns:\n                          if a:\n                              a += \"; \"\n                          a += ns[0]['name']\n                  return nodes[0], a\n              return None, None\n\n          tax = pickle.load(open(tax_pickle, \"rb\"))\n          tax_ids = [int(i) for i in successors(tax_id, tax)]\n          print('{} taxonomies IDs in the list'.format(len(tax_ids)))\n\n          filename, ext = os.path.splitext(os.path.basename(fasta))\n          if ext == '.gz':\n              handle = gzip.open(fasta, 'rt')\n              prefix  =  os.path.splitext(filename)[0]\n          else:\n              handle = open(fasta, 'r')\n              prefix = filename\n\n          records = {}\n          for record in SeqIO.parse(handle, \"fasta\"):\n              records[record.id] = record\n\n          handle.close()\n\n          blast_df = pandas.read_csv(blast_tsv, sep='\\t', header=None)\n          print('{} results loaded from Blast'.format(len(blast_df)))\n\n          def transcript_contamination(t):\n              df = blast_df[blast_df[0] == t]\n              if not df.empty:\n                  df = df[df[5] == df[5].min()]\n                  if not all(elem in tax_ids for elem in df[8].unique()):\n                      df = df.reset_index()\n                      node = findNode(tax, str(df[8].iloc[0]))\n                      if node[0]:\n                          node = node[0]['name']\n                      else:\n                          node = str(df[8].iloc[0])\n                      return (t, True, node, df[5].iloc[0], df[2].iloc[0], df[8].iloc[0])\n              return (t, False)\n\n          p = Pool(processes=threads)\n          results = p.map(transcript_contamination, [t for t in records])\n          p.close()\n\n          print('Printing results with prefix ' + prefix)\n          clean = 0\n          contamination = 0\n          with open('{}_cont.tsv'.format(prefix), 'w') as f_cont:\n              f_cont.write('transcript\\tsubject\\tevalue\\ttax_id\\ttaxa\\n')\n              with open('{}_nocont.fsa'.format(prefix), 'w') as f_fsa:\n                  for r in results:\n                      if r[1]:\n                          contamination += 1\n                          f_cont.write('{}\\t{}\\t{}\\t{}\\t{}\\n'.format(r[0], r[4], r[3], r[5], r[2]))\n                      else:\n                          clean += 1\n                          SeqIO.write(records[r[0]], f_fsa, \"fasta\")\n          print('Input Transcripts: {}\\nClean Transcripts: {}\\nContaminated transcripts: {}'.format(len(records),clean, contamination))\n\ninputs:\n  fasta:\n    type: File\n    inputBinding:\n      position: 1\n  blast:\n    type: File\n    inputBinding:\n      position: 2\n  threads:\n    type: int\n    inputBinding:\n      position: 3\n  tax_pickle:\n    type: File\n    inputBinding:\n      position: 4\n  tax_id:\n    type: int\n    inputBinding:\n      position: 5\n\noutputs:\n  fsa:\n    type: File\n    outputBinding:\n      glob: '*_nocont.fsa'\n  contamination:\n    type: File\n    outputBinding:\n      glob: '*_cont.tsv'\n\nbaseCommand: [\"python\",\"transcriptome-contamination-detection.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': {'type': 'File', 'inputBinding': {'position': 1}}, 'blast': {'type': 'File', 'inputBinding': {'position': 2}}, 'threads': {'type': 'int', 'inputBinding': {'position': 3}}, 'tax_pickle': {'type': 'File', 'inputBinding': {'position': 4}}, 'tax_id': {'type': 'int', 'inputBinding': {'position': 5}}}",
    "cwl_outputs": "{'fsa': {'type': 'File', 'outputBinding': {'glob': '*_nocont.fsa'}}, 'contamination': {'type': 'File', 'outputBinding': {'glob': '*_cont.tsv'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-transcriptome-contamination-detection:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.77  \\\\\\n    networkx==2.4 \\\\\\n    pandas==1.0.5\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'pandas', 'version': ['1.0.5'], 'specs': ['https://anaconda.org/conda-forge/pandas']}, {'package': 'biopython', 'version': ['1.71'], 'specs': ['https://anaconda.org/conda-forge/biopython']}, {'package': 'networkx', 'version': ['2.4'], 'specs': ['https://anaconda.org/conda-forge/networkx']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'transcriptome-contamination-detection.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {'coresMin': '$(inputs.threads)'}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'transcriptome-contamination-detection.py', 'entry': 'import os\\nimport sys\\nimport pandas\\nimport gzip\\nimport pickle\\nimport networkx as nx\\nfrom Bio import SeqIO\\nfrom multiprocessing import Pool\\n\\nfasta = sys.argv[1]\\nblast_tsv = sys.argv[2]\\nthreads = int(sys.argv[3])\\ntax_pickle = sys.argv[4]\\ntax_id = sys.argv[5]\\n\\ndef successors(g, O):\\n    \"\"\"\\n    Extract ancestors nodes from an starting node\\n    :param g: starting node name\\n    :param O: Graph\\n    :return: a set with node names\\n    \"\"\"\\n    result = {g}\\n    for o in O.successors(g):\\n        result.update(successors(o, O))\\n    return result\\n\\ndef findNode(O, id):\\n    nodes = [y for x,y in O.nodes(data=True) if y[\\'id\\']==id]\\n    if nodes:\\n        a = \"\"\\n        for i in nx.shortest_path(O, source=\"1\", target=id)[2:]:\\n            ns = [y for x,y in O.nodes(data=True) if y[\\'id\\']==i]\\n            if ns:\\n                if a:\\n                    a += \"; \"\\n                a += ns[0][\\'name\\']\\n        return nodes[0], a\\n    return None, None\\n\\ntax = pickle.load(open(tax_pickle, \"rb\"))\\ntax_ids = [int(i) for i in successors(tax_id, tax)]\\nprint(\\'{} taxonomies IDs in the list\\'.format(len(tax_ids)))\\n\\nfilename, ext = os.path.splitext(os.path.basename(fasta))\\nif ext == \\'.gz\\':\\n    handle = gzip.open(fasta, \\'rt\\')\\n    prefix  =  os.path.splitext(filename)[0]\\nelse:\\n    handle = open(fasta, \\'r\\')\\n    prefix = filename\\n\\nrecords = {}\\nfor record in SeqIO.parse(handle, \"fasta\"):\\n    records[record.id] = record\\n\\nhandle.close()\\n\\nblast_df = pandas.read_csv(blast_tsv, sep=\\'\\\\t\\', header=None)\\nprint(\\'{} results loaded from Blast\\'.format(len(blast_df)))\\n\\ndef transcript_contamination(t):\\n    df = blast_df[blast_df[0] == t]\\n    if not df.empty:\\n        df = df[df[5] == df[5].min()]\\n        if not all(elem in tax_ids for elem in df[8].unique()):\\n            df = df.reset_index()\\n            node = findNode(tax, str(df[8].iloc[0]))\\n            if node[0]:\\n                node = node[0][\\'name\\']\\n            else:\\n                node = str(df[8].iloc[0])\\n            return (t, True, node, df[5].iloc[0], df[2].iloc[0], df[8].iloc[0])\\n    return (t, False)\\n\\np = Pool(processes=threads)\\nresults = p.map(transcript_contamination, [t for t in records])\\np.close()\\n\\nprint(\\'Printing results with prefix \\' + prefix)\\nclean = 0\\ncontamination = 0\\nwith open(\\'{}_cont.tsv\\'.format(prefix), \\'w\\') as f_cont:\\n    f_cont.write(\\'transcript\\\\tsubject\\\\tevalue\\\\ttax_id\\\\ttaxa\\\\n\\')\\n    with open(\\'{}_nocont.fsa\\'.format(prefix), \\'w\\') as f_fsa:\\n        for r in results:\\n            if r[1]:\\n                contamination += 1\\n                f_cont.write(\\'{}\\\\t{}\\\\t{}\\\\t{}\\\\t{}\\\\n\\'.format(r[0], r[4], r[3], r[5], r[2]))\\n            else:\\n                clean += 1\\n                SeqIO.write(records[r[0]], f_fsa, \"fasta\")\\nprint(\\'Input Transcripts: {}\\\\nClean Transcripts: {}\\\\nContaminated transcripts: {}\\'.format(len(records),clean, contamination))\\n'}]}}",
    "cwl_doc": "This tools remove contamination using a Blast TSV file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "contamination_detection",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/count-fasta.cwl",
    "sha": "a40fd120a317182fb210f221d4c0e753c3aec33c",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/count-fasta.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: count_fasta\ndoc: Count number of sequences in a fasta file\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-biopython:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.77\n  SoftwareRequirement:\n    packages:\n      - package: 'biopython'\n        version:\n          - '1.71'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: count_fasta.py\n        entry: |\n          import os\n          import sys\n          import gzip\n          from Bio import SeqIO\n\n          fasta = sys.argv[1]\n          filename, ext = os.path.splitext(os.path.basename(fasta))\n          if ext == '.gz':\n              handle = gzip.open(fasta, 'rt')\n              prefix  =  os.path.splitext(filename)[0]\n          else:\n              handle = open(fasta, 'r')\n              prefix = filename\n\n          count = 0\n          for record in SeqIO.parse(handle, \"fasta\"):\n              count += 1\n              print('{} {}'.format(record.id, count), end='\\r')\n          print('{} sequences to process'.format(count))\n          handle.close()\n\ninputs:\n  fasta:\n    type: File\n    inputBinding:\n      position: 1\n\noutputs: []\n\nbaseCommand: [\"python\",\"count_fasta.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': {'type': 'File', 'inputBinding': {'position': 1}}}",
    "cwl_outputs": "[]",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-biopython:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.77\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'biopython', 'version': ['1.71'], 'specs': ['https://anaconda.org/conda-forge/biopython']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'count_fasta.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'count_fasta.py', 'entry': 'import os\\nimport sys\\nimport gzip\\nfrom Bio import SeqIO\\n\\nfasta = sys.argv[1]\\nfilename, ext = os.path.splitext(os.path.basename(fasta))\\nif ext == \\'.gz\\':\\n    handle = gzip.open(fasta, \\'rt\\')\\n    prefix  =  os.path.splitext(filename)[0]\\nelse:\\n    handle = open(fasta, \\'r\\')\\n    prefix = filename\\n\\ncount = 0\\nfor record in SeqIO.parse(handle, \"fasta\"):\\n    count += 1\\n    print(\\'{} {}\\'.format(record.id, count), end=\\'\\\\r\\')\\nprint(\\'{} sequences to process\\'.format(count))\\nhandle.close()\\n'}]}}",
    "cwl_doc": "Count number of sequences in a fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "count_fasta",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/duplicate-removal.cwl",
    "sha": "af73cc4dbb70e10edfaa9bc609748a8b59933d4c",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/duplicate-removal.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: duplicate_removal\ndoc: This tools remove duplicate sequences\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-biopython-pandas:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.779\n  SoftwareRequirement:\n    packages:\n      - package: 'biopython'\n        version:\n          - '1.79'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n\nrequirements:\n  ResourceRequirement: {}\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: duplicate_removal.py\n        entry: |\n          import os\n          import sys\n          import gzip\n          from Bio import SeqIO\n          from collections import defaultdict\n          from multiprocessing import Pool\n\n          fasta = sys.argv[1]\n          filename, ext = os.path.splitext(os.path.basename(fasta))\n          if ext == '.gz':\n              handle = gzip.open(fasta, 'rt')\n              prefix  =  os.path.splitext(filename)[0]\n          else:\n              handle = open(fasta, 'r')\n              prefix = filename\n\n          count = 0\n          dedup_records = defaultdict(list)\n          for record in SeqIO.parse(handle, \"fasta\"):\n              count += 1\n              dedup_records[str(record.seq)].append(record)\n\n          print('Sequences: {} Non redundant: {}'.format(count, len(dedup_records)))\n          with gzip.open('{}_nodup.fsa.gz'.format(prefix), \"wt\") as fout, open('{}_dup.ids'.format(prefix), \"w\") as fout_ids:\n              for seq, record in dedup_records.items():\n                  fout.write(record[0].format(\"fasta\"))\n                  if len(record) > 1:\n                      for r in record[1:]:\n                          fout_ids.write(r.id + '\\n')\n\n          handle.close()\n\ninputs:\n  fasta:\n    type: File\n    inputBinding:\n      position: 1\n\noutputs:\n  fsa:\n    type: File\n    outputBinding:\n      glob: '*_nodup.fsa.gz'\n  ids:\n    type: File\n    outputBinding:\n      glob: '*_dup.ids'\n\nbaseCommand: [\"python\",\"duplicate_removal.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': {'type': 'File', 'inputBinding': {'position': 1}}}",
    "cwl_outputs": "{'fsa': {'type': 'File', 'outputBinding': {'glob': '*_nodup.fsa.gz'}}, 'ids': {'type': 'File', 'outputBinding': {'glob': '*_dup.ids'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-biopython-pandas:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.779\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'biopython', 'version': ['1.79'], 'specs': ['https://anaconda.org/conda-forge/biopython']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'duplicate_removal.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'duplicate_removal.py', 'entry': 'import os\\nimport sys\\nimport gzip\\nfrom Bio import SeqIO\\nfrom collections import defaultdict\\nfrom multiprocessing import Pool\\n\\nfasta = sys.argv[1]\\nfilename, ext = os.path.splitext(os.path.basename(fasta))\\nif ext == \\'.gz\\':\\n    handle = gzip.open(fasta, \\'rt\\')\\n    prefix  =  os.path.splitext(filename)[0]\\nelse:\\n    handle = open(fasta, \\'r\\')\\n    prefix = filename\\n\\ncount = 0\\ndedup_records = defaultdict(list)\\nfor record in SeqIO.parse(handle, \"fasta\"):\\n    count += 1\\n    dedup_records[str(record.seq)].append(record)\\n\\nprint(\\'Sequences: {} Non redundant: {}\\'.format(count, len(dedup_records)))\\nwith gzip.open(\\'{}_nodup.fsa.gz\\'.format(prefix), \"wt\") as fout, open(\\'{}_dup.ids\\'.format(prefix), \"w\") as fout_ids:\\n    for seq, record in dedup_records.items():\\n        fout.write(record[0].format(\"fasta\"))\\n        if len(record) > 1:\\n            for r in record[1:]:\\n                fout_ids.write(r.id + \\'\\\\n\\')\\n\\nhandle.close()\\n'}]}}",
    "cwl_doc": "This tools remove duplicate sequences",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "duplicate_removal",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/equal-removal.cwl",
    "sha": "b44719b3e1042464fc956d230b1daceb52ea59ae",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/equal-removal.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: equal_removal\ndoc: This tools remove equal sequences\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-biopython:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.77\n  SoftwareRequirement:\n    packages:\n      - package: 'biopython'\n        version:\n          - '1.71'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: equal_removal.py\n        entry: |\n          import os\n          import sys\n          import gzip\n          from Bio import SeqIO\n          from collections import defaultdict\n\n          fasta = sys.argv[1]\n          filename, ext = os.path.splitext(os.path.basename(fasta))\n          if ext == '.gz':\n              handle = gzip.open(fasta, 'rt')\n              prefix  =  os.path.splitext(filename)[0]\n          else:\n              handle = open(fasta, 'r')\n              prefix = filename\n\n          with gzip.open('{}_noequal.fsa.gz'.format(prefix), \"wt\") as fout, gzip.open('{}_equal_ids.tsv.gz'.format(prefix), \"wt\") as fouttsv:\n              dedup_records = defaultdict(list)\n              for record in SeqIO.parse(handle, \"fasta\"):\n                  dedup_records[str(record.seq)].append(record)\n              for seq, record in dedup_records.items():\n                  fout.write(record[0].format(\"fasta\"))\n                  if len(record) > 1:\n                      fouttsv.write('{}\\t{}\\n'.format(record[0].id, ','.join(map(lambda r: r.id, record[1:]))))\n\ninputs:\n  fasta:\n    type: File\n    inputBinding:\n      position: 1\n\noutputs:\n  fsa:\n    type: File\n    outputBinding:\n      glob: '*_noequal.fsa.gz'\n  tsv:\n    type: File\n    outputBinding:\n      glob: '*_equal_ids.tsv.gz'\n\nbaseCommand: [\"python\",\"equal_removal.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': {'type': 'File', 'inputBinding': {'position': 1}}}",
    "cwl_outputs": "{'fsa': {'type': 'File', 'outputBinding': {'glob': '*_noequal.fsa.gz'}}, 'tsv': {'type': 'File', 'outputBinding': {'glob': '*_equal_ids.tsv.gz'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-biopython:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.77\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'biopython', 'version': ['1.71'], 'specs': ['https://anaconda.org/conda-forge/biopython']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'equal_removal.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'equal_removal.py', 'entry': 'import os\\nimport sys\\nimport gzip\\nfrom Bio import SeqIO\\nfrom collections import defaultdict\\n\\nfasta = sys.argv[1]\\nfilename, ext = os.path.splitext(os.path.basename(fasta))\\nif ext == \\'.gz\\':\\n    handle = gzip.open(fasta, \\'rt\\')\\n    prefix  =  os.path.splitext(filename)[0]\\nelse:\\n    handle = open(fasta, \\'r\\')\\n    prefix = filename\\n\\nwith gzip.open(\\'{}_noequal.fsa.gz\\'.format(prefix), \"wt\") as fout, gzip.open(\\'{}_equal_ids.tsv.gz\\'.format(prefix), \"wt\") as fouttsv:\\n    dedup_records = defaultdict(list)\\n    for record in SeqIO.parse(handle, \"fasta\"):\\n        dedup_records[str(record.seq)].append(record)\\n    for seq, record in dedup_records.items():\\n        fout.write(record[0].format(\"fasta\"))\\n        if len(record) > 1:\\n            fouttsv.write(\\'{}\\\\t{}\\\\n\\'.format(record[0].id, \\',\\'.join(map(lambda r: r.id, record[1:]))))\\n'}]}}",
    "cwl_doc": "This tools remove equal sequences",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "equal_removal",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/extract-aligned-seq-ids-blast.cwl",
    "sha": "41171aba514ee4a9e48b1b392e0c4f29a1eeac94",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/extract-aligned-seq-ids-blast.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: extract_aligned_seq_ids_blast\ndoc: This extract sequence IDs from blast TSV including possible splice\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-transcriptome-contamination-detection:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          pandas==1.2.4\n  SoftwareRequirement:\n    packages:\n      - package: 'pandas'\n        version:\n          - '1.2.4'\n        specs:\n          - https://anaconda.org/conda-forge/pandas\n\n\nrequirements:\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: script.py\n        entry: |\n            import os\n            import pandas\n            import argparse\n            from operator import itemgetter\n            from functools import partial\n            from itertools import takewhile\n            from multiprocessing import Pool\n\n            def find_overlaps(items):\n                overlaps = []\n                item_len = len(items)\n                while items:\n                    overlap = list(takewhile(lambda item:item[0] <= items[0][1],items))\n                    overlaps.append((min(overlap,key=itemgetter(0))[0],max(overlap,key=itemgetter(1))[1]))\n                    items = items[len(overlap):]\n                if len(overlaps) > 1 and len(overlaps) != item_len:\n                    overlaps = find_overlaps(overlaps)\n                return overlaps\n\n            def find_coverage(g, grouped_qseqid, cutoff):\n                grouped_sseqid = grouped_qseqid.get_group(g).groupby(['sseqid'])\n                for s in grouped_sseqid.groups:\n                    d = grouped_sseqid.get_group(s)\n                    overlaps = find_overlaps(list(d[['qstart', 'qend']].to_records(index=False)))\n                    cover = 0\n                    for o in overlaps:\n                        cover += o[1] - o[0] + 1\n                    if cover * 100/d.iloc[0]['qlen'] >= cutoff:\n                        return g\n                return None\n\n            if __name__ == \"__main__\":\n                parser = argparse.ArgumentParser()\n\n                parser.add_argument('--blastout', help='Blast TSV output file', required=True)\n                parser.add_argument('--columns', help='Blast columns space separated. \"qseqid sseqid pident length mismatch\"', required=True)\n                parser.add_argument('--pident', help='Percent of identity cutoff', required=True)\n                parser.add_argument('--coverage', help='Coverage cutoff', required=True)\n                parser.add_argument('--threads', help='Number of threads', required=True)\n                parser.add_argument('--out', help='Number of threads', required=True)\n\n                args = parser.parse_args()\n\n                blast = pandas.read_csv(args.blastout, sep='\\t', names=args.columns.split(' '))\n                blast = blast[blast['pident'] >= float(args.pident)]\n                if not blast.empty:\n                    print('Blast hits to analyze: {}'.format(len(blast)))\n                    blast['coverage'] = blast['length']*100/blast['qlen']\n                    ids = set(blast[blast['coverage'] >= float(args.coverage)]['qseqid'].unique())\n                    if ids:\n                        blast = blast[~blast['qseqid'].isin(ids)]\n                    blast = blast.sort_values(by=['qseqid','sseqid', 'qstart', 'qend'])\n                    grouped_qseqid = blast.groupby(['qseqid'])\n                    with Pool(processes=int(args.threads)) as p:\n                        data = p.map(partial(find_coverage, grouped_qseqid=grouped_qseqid, cutoff=float(args.coverage)), grouped_qseqid.groups)\n\n                    ids.update(set(data))\n                    with open(args.out, \"w\") as fout:\n                        for i in ids:\n                            if i:\n                                fout.write('{}\\n'.format(i))\n                else:\n                    print('No Blast hits to analyze')\n                    f = open(args.out, \"w\")\n                    f.close()\n\ninputs:\n  blastout:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: --blastout\n  columns:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --columns\n  pident:\n    type: float\n    inputBinding:\n      position: 3\n      prefix: --pident\n  coverage:\n    type: float\n    inputBinding:\n      position: 4\n      prefix: --coverage\n  threads:\n    type: int\n    inputBinding:\n      position: 5\n      prefix: --threads\n  out:\n    type: string\n    inputBinding:\n      position: 6\n      prefix: --out\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n\nbaseCommand: [\"python\",\"script.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'blastout': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '--blastout'}}, 'columns': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--columns'}}, 'pident': {'type': 'float', 'inputBinding': {'position': 3, 'prefix': '--pident'}}, 'coverage': {'type': 'float', 'inputBinding': {'position': 4, 'prefix': '--coverage'}}, 'threads': {'type': 'int', 'inputBinding': {'position': 5, 'prefix': '--threads'}}, 'out': {'type': 'string', 'inputBinding': {'position': 6, 'prefix': '--out'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-transcriptome-contamination-detection:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    pandas==1.2.4\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'pandas', 'version': ['1.2.4'], 'specs': ['https://anaconda.org/conda-forge/pandas']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'script.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {'coresMin': '$(inputs.threads)'}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'script.py', 'entry': 'import os\\nimport pandas\\nimport argparse\\nfrom operator import itemgetter\\nfrom functools import partial\\nfrom itertools import takewhile\\nfrom multiprocessing import Pool\\n\\ndef find_overlaps(items):\\n    overlaps = []\\n    item_len = len(items)\\n    while items:\\n        overlap = list(takewhile(lambda item:item[0] <= items[0][1],items))\\n        overlaps.append((min(overlap,key=itemgetter(0))[0],max(overlap,key=itemgetter(1))[1]))\\n        items = items[len(overlap):]\\n    if len(overlaps) > 1 and len(overlaps) != item_len:\\n        overlaps = find_overlaps(overlaps)\\n    return overlaps\\n\\ndef find_coverage(g, grouped_qseqid, cutoff):\\n    grouped_sseqid = grouped_qseqid.get_group(g).groupby([\\'sseqid\\'])\\n    for s in grouped_sseqid.groups:\\n        d = grouped_sseqid.get_group(s)\\n        overlaps = find_overlaps(list(d[[\\'qstart\\', \\'qend\\']].to_records(index=False)))\\n        cover = 0\\n        for o in overlaps:\\n            cover += o[1] - o[0] + 1\\n        if cover * 100/d.iloc[0][\\'qlen\\'] >= cutoff:\\n            return g\\n    return None\\n\\nif __name__ == \"__main__\":\\n    parser = argparse.ArgumentParser()\\n\\n    parser.add_argument(\\'--blastout\\', help=\\'Blast TSV output file\\', required=True)\\n    parser.add_argument(\\'--columns\\', help=\\'Blast columns space separated. \"qseqid sseqid pident length mismatch\"\\', required=True)\\n    parser.add_argument(\\'--pident\\', help=\\'Percent of identity cutoff\\', required=True)\\n    parser.add_argument(\\'--coverage\\', help=\\'Coverage cutoff\\', required=True)\\n    parser.add_argument(\\'--threads\\', help=\\'Number of threads\\', required=True)\\n    parser.add_argument(\\'--out\\', help=\\'Number of threads\\', required=True)\\n\\n    args = parser.parse_args()\\n\\n    blast = pandas.read_csv(args.blastout, sep=\\'\\\\t\\', names=args.columns.split(\\' \\'))\\n    blast = blast[blast[\\'pident\\'] >= float(args.pident)]\\n    if not blast.empty:\\n        print(\\'Blast hits to analyze: {}\\'.format(len(blast)))\\n        blast[\\'coverage\\'] = blast[\\'length\\']*100/blast[\\'qlen\\']\\n        ids = set(blast[blast[\\'coverage\\'] >= float(args.coverage)][\\'qseqid\\'].unique())\\n        if ids:\\n            blast = blast[~blast[\\'qseqid\\'].isin(ids)]\\n        blast = blast.sort_values(by=[\\'qseqid\\',\\'sseqid\\', \\'qstart\\', \\'qend\\'])\\n        grouped_qseqid = blast.groupby([\\'qseqid\\'])\\n        with Pool(processes=int(args.threads)) as p:\\n            data = p.map(partial(find_coverage, grouped_qseqid=grouped_qseqid, cutoff=float(args.coverage)), grouped_qseqid.groups)\\n\\n        ids.update(set(data))\\n        with open(args.out, \"w\") as fout:\\n            for i in ids:\\n                if i:\\n                    fout.write(\\'{}\\\\n\\'.format(i))\\n    else:\\n        print(\\'No Blast hits to analyze\\')\\n        f = open(args.out, \"w\")\\n        f.close()\\n'}]}}",
    "cwl_doc": "This extract sequence IDs from blast TSV including possible splice",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "extract_aligned_seq_ids_blast",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/extract-clean-from-foreign-blastn.cwl",
    "sha": "83fc255a984cebe858a0c219a4de98717cb27721",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/extract-clean-from-foreign-blastn.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: extract_foreign_contaminated_ids\ndoc: This tools remove contaminated reads from fastq using blastn results from Gtax TSV file\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-transcriptome-contamination-detection:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.79  \\\n          networkx==2.5.1 \\\n          pandas==1.3.4\n  SoftwareRequirement:\n    packages:\n      - package: 'pandas'\n        version:\n          - '1.3.4'\n        specs:\n          - https://anaconda.org/conda-forge/pandas\n      - package: 'biopython'\n        version:\n          - '1.79'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n      - package: 'networkx'\n        version:\n          - '2.5.1'\n        specs:\n          - https://anaconda.org/conda-forge/networkx\n\nrequirements:\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: extract_foreign_contaminated_ids.py\n        entry: |\n          import os\n          import sys\n          import pandas\n          import gzip\n          import pickle\n          import networkx as nx\n          from Bio import SeqIO\n          from multiprocessing import Pool\n\n          file_name_prefix = sys.argv[1]\n          partitions = int(sys.argv[2])\n          threads = int(sys.argv[3])\n          tax_group_pickle = sys.argv[4]\n          tax_group = sys.argv[5]\n          data_dir = sys.argv[6]\n\n          tax_groups = pickle.load(open(tax_group_pickle, \"rb\"))\n\n          num_files = len([f for dr, ds, files in os.walk(data_dir) for f in files if f.endswith('.fsa.gz')])\n\n          def find_decont_reads(p):\n              transcripts = set()\n              with gzip.open(os.path.join(data_dir, '{}_{}.fsa.gz'.format(file_name_prefix, p)), 'rt') as fin:\n                  for r in SeqIO.parse(fin, \"fasta\"):\n                      transcripts.add(r.id)\n              file_name = os.path.join(data_dir, '{}_{}_contamination_{}_blastn.tsv'.format(file_name_prefix, p, 1))\n              df = pandas.read_csv(file_name, sep='\\t', header=None,\n                                   names=['qseqid', 'sseqid', 'pident', 'length', 'mismatch', 'gapopen',\n                                          'qlen', 'qstart', 'qend', 'sstart', 'send', 'evalue',\n                                          'bitscore', 'score', 'taxid'])\n              for i in range(2, partitions + 1):\n                  file_name = os.path.join(data_dir, '{}_{}_contamination_{}_blastn.tsv'.format(file_name_prefix, p, i))\n                  if os.path.exists(file_name):\n                      df_tmp = pandas.read_csv(file_name, sep='\\t', header=None,\n                                               names=['qseqid', 'sseqid', 'pident', 'length', 'mismatch', 'gapopen',\n                                                      'qlen', 'qstart', 'qend', 'sstart', 'send', 'evalue',\n                                                      'bitscore', 'score', 'taxid'])\n                      df = pandas.concat([df, df_tmp])\n              df['coverage'] = df['length']*100/df['qlen']\n              df = df[df['coverage'] >= 75]\n              ids = df[df['taxid'].isin(tax_groups[tax_group]['nodes'])]['qseqid'].unique()\n              df = df[~df['qseqid'].isin(ids)]\n              print('{} done'.format(p))\n              return transcripts.difference(set(df['qseqid'].unique()))\n\n          p = Pool(processes=threads)\n          results = p.map(find_decont_reads, [t for t in range(1, num_files + 1)])\n          p.close()\n\n          transcripts_ids = set()\n          for r in results:\n              transcripts_ids.update(r)\n              print('{}'.format(len(transcripts_ids)))\n\n          print('Printing file: {}_clean_reads.tsv'.format(file_name_prefix))\n          with open('{}_clean_reads.tsv'.format(file_name_prefix), 'w') as fout:\n              for t in transcripts_ids:\n                  fout.write(t + '\\n')\n\ninputs:\n  file_name_prefix:\n    type: string\n    inputBinding:\n      position: 1\n  partitions:\n    type: int\n    inputBinding:\n      position: 2\n  threads:\n    type: int\n    inputBinding:\n      position: 3\n  tax_group_pickle:\n    type: File\n    inputBinding:\n      position: 4\n  tax_group:\n    type: string\n    inputBinding:\n      position: 5\n  data_dir:\n    type: Directory\n    inputBinding:\n      position: 6\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.file_name_prefix)_clean_reads.tsv\n\nbaseCommand: [\"python\",\"extract_foreign_contaminated_ids.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'file_name_prefix': {'type': 'string', 'inputBinding': {'position': 1}}, 'partitions': {'type': 'int', 'inputBinding': {'position': 2}}, 'threads': {'type': 'int', 'inputBinding': {'position': 3}}, 'tax_group_pickle': {'type': 'File', 'inputBinding': {'position': 4}}, 'tax_group': {'type': 'string', 'inputBinding': {'position': 5}}, 'data_dir': {'type': 'Directory', 'inputBinding': {'position': 6}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.file_name_prefix)_clean_reads.tsv'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-transcriptome-contamination-detection:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.79  \\\\\\n    networkx==2.5.1 \\\\\\n    pandas==1.3.4\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'pandas', 'version': ['1.3.4'], 'specs': ['https://anaconda.org/conda-forge/pandas']}, {'package': 'biopython', 'version': ['1.79'], 'specs': ['https://anaconda.org/conda-forge/biopython']}, {'package': 'networkx', 'version': ['2.5.1'], 'specs': ['https://anaconda.org/conda-forge/networkx']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'extract_foreign_contaminated_ids.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {'coresMin': '$(inputs.threads)'}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'extract_foreign_contaminated_ids.py', 'entry': 'import os\\nimport sys\\nimport pandas\\nimport gzip\\nimport pickle\\nimport networkx as nx\\nfrom Bio import SeqIO\\nfrom multiprocessing import Pool\\n\\nfile_name_prefix = sys.argv[1]\\npartitions = int(sys.argv[2])\\nthreads = int(sys.argv[3])\\ntax_group_pickle = sys.argv[4]\\ntax_group = sys.argv[5]\\ndata_dir = sys.argv[6]\\n\\ntax_groups = pickle.load(open(tax_group_pickle, \"rb\"))\\n\\nnum_files = len([f for dr, ds, files in os.walk(data_dir) for f in files if f.endswith(\\'.fsa.gz\\')])\\n\\ndef find_decont_reads(p):\\n    transcripts = set()\\n    with gzip.open(os.path.join(data_dir, \\'{}_{}.fsa.gz\\'.format(file_name_prefix, p)), \\'rt\\') as fin:\\n        for r in SeqIO.parse(fin, \"fasta\"):\\n            transcripts.add(r.id)\\n    file_name = os.path.join(data_dir, \\'{}_{}_contamination_{}_blastn.tsv\\'.format(file_name_prefix, p, 1))\\n    df = pandas.read_csv(file_name, sep=\\'\\\\t\\', header=None,\\n                         names=[\\'qseqid\\', \\'sseqid\\', \\'pident\\', \\'length\\', \\'mismatch\\', \\'gapopen\\',\\n                                \\'qlen\\', \\'qstart\\', \\'qend\\', \\'sstart\\', \\'send\\', \\'evalue\\',\\n                                \\'bitscore\\', \\'score\\', \\'taxid\\'])\\n    for i in range(2, partitions + 1):\\n        file_name = os.path.join(data_dir, \\'{}_{}_contamination_{}_blastn.tsv\\'.format(file_name_prefix, p, i))\\n        if os.path.exists(file_name):\\n            df_tmp = pandas.read_csv(file_name, sep=\\'\\\\t\\', header=None,\\n                                     names=[\\'qseqid\\', \\'sseqid\\', \\'pident\\', \\'length\\', \\'mismatch\\', \\'gapopen\\',\\n                                            \\'qlen\\', \\'qstart\\', \\'qend\\', \\'sstart\\', \\'send\\', \\'evalue\\',\\n                                            \\'bitscore\\', \\'score\\', \\'taxid\\'])\\n            df = pandas.concat([df, df_tmp])\\n    df[\\'coverage\\'] = df[\\'length\\']*100/df[\\'qlen\\']\\n    df = df[df[\\'coverage\\'] >= 75]\\n    ids = df[df[\\'taxid\\'].isin(tax_groups[tax_group][\\'nodes\\'])][\\'qseqid\\'].unique()\\n    df = df[~df[\\'qseqid\\'].isin(ids)]\\n    print(\\'{} done\\'.format(p))\\n    return transcripts.difference(set(df[\\'qseqid\\'].unique()))\\n\\np = Pool(processes=threads)\\nresults = p.map(find_decont_reads, [t for t in range(1, num_files + 1)])\\np.close()\\n\\ntranscripts_ids = set()\\nfor r in results:\\n    transcripts_ids.update(r)\\n    print(\\'{}\\'.format(len(transcripts_ids)))\\n\\nprint(\\'Printing file: {}_clean_reads.tsv\\'.format(file_name_prefix))\\nwith open(\\'{}_clean_reads.tsv\\'.format(file_name_prefix), \\'w\\') as fout:\\n    for t in transcripts_ids:\\n        fout.write(t + \\'\\\\n\\')\\n'}]}}",
    "cwl_doc": "This tools remove contaminated reads from fastq using blastn results from Gtax TSV file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "extract_foreign_contaminated_ids",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/extract-foreign-contaminated-ids.cwl",
    "sha": "2dae0d944815a35d62ce1a6e9d00104e623ec4b2",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/extract-foreign-contaminated-ids.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: Extract contaminated reads IDs\ndoc: This tools extract contaminated reads IDs from BlastN results to different kingdoms\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-pandas:1.3.2\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.8\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.8\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.8\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          pandas==1.3.2\n  SoftwareRequirement:\n    packages:\n      - package: 'pandas'\n        version:\n          - '1.3.2'\n        specs:\n          - https://anaconda.org/conda-forge/pandas\n\nrequirements:\n  InlineJavascriptRequirement: { }\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: extract_contaminated_ids.py\n        entry: |\n          import os\n          import sys\n          import pandas\n\n          kingdom = sys.argv[1]\n          file_name_prefix = sys.argv[2]\n          wDir = sys.argv[3]\n          out = sys.argv[4]\n\n          foreign_databases = ['archaea','other_eukaryota', 'arthropoda', 'fungi', 'chordata',\n                               'other_metazoa', 'viruses_and_viroids', 'viridiplantae', 'bacteria']\n\n          foreign_databases.remove(kingdom)\n\n          files = [ f.replace('.fsa.gz', '') for dr, ds, files in os.walk(wDir) for f in files if f.startswith('{}'.format(file_name_prefix)) and f.endswith('.fsa.gz')]\n          print('There are {} fasta files'.format(len(files)))\n\n          contaminated_ids = {}\n          for f in files:\n              print(f)\n              blast_tsv = '{}/{}_{}_blastn.tsv'.format(wDir, f, kingdom)\n              kingdom_blast = pandas.read_csv(blast_tsv, sep='\\t', header=None,\n                                              names=['qseqid', 'sseqid', 'pident', 'length', 'mismatch', 'gapopen',\n                                                     'qlen', 'qstart', 'qend', 'sstart', 'send', 'evalue',\n                                                     'bitscore', 'score'])\n              kingdom_blast['coverage'] = kingdom_blast['length']*100/kingdom_blast['qlen']\n              kingdom_blast = kingdom_blast[kingdom_blast['coverage'] >= 75].sort_values(by=['qseqid', 'coverage']).drop_duplicates(subset='qseqid', keep=\"last\")\n              for db in foreign_databases:\n                  v = contaminated_ids.setdefault(db, set())\n                  blast_tsv = '{}/{}_{}_blastn.tsv'.format(wDir, f, db)\n                  if os.path.exists(blast_tsv):\n                      blast = pandas.read_csv(blast_tsv, sep='\\t', header=None,\n                                              names=['qseqid', 'sseqid', 'pident', 'length', 'mismatch', 'gapopen',\n                                                     'qlen', 'qstart', 'qend', 'sstart', 'send', 'evalue',\n                                                     'bitscore', 'score'])\n                      blast['coverage'] = blast['length']*100/blast['qlen']\n                      df_cont = blast[((blast['pident'] >= 98.0) & (blast['length'] >= 40))|((blast['pident'] >= 94.0) & (blast['length'] >= 70))|((blast['pident'] >= 90) & (blast['length'] >= 100))]\n                      df_cont = df_cont[df_cont['coverage'] >= 75].sort_values(by=['qseqid', 'coverage']).drop_duplicates(subset='qseqid', keep=\"last\")\n                      df_cont = df_cont[~df_cont['qseqid'].isin(kingdom_blast['qseqid'])]\n                      v.update(df_cont['qseqid'].unique())\n                      print('{} {} {} {}'.format(f, db, len(v), len(df_cont['qseqid'].unique())))\n\n          cont_ids = set([ f for d in contaminated_ids.values() for f in d])\n          print('Contaminated reads: {:n}\\nTotal reads: {:n}'.format(len(cont_ids), 5239868))\n\n          with open(out, \"w\") as fout:\n              for id in cont_ids:\n                  fout.write(id + '\\n')\n\n\ninputs:\n  kingdom:\n    type: string\n    inputBinding:\n      position: 1\n  file_name_prefix:\n    type: string\n    inputBinding:\n      position: 2\n  blast_tsv_dir:\n    type: Directory\n    inputBinding:\n      position: 3\n      valueFrom: ${ return self.path;}\n  out:\n    type: string\n    inputBinding:\n      position: 4\n\noutputs:\n  ids:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n\nbaseCommand: [\"python\",\"extract_contaminated_ids.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'kingdom': {'type': 'string', 'inputBinding': {'position': 1}}, 'file_name_prefix': {'type': 'string', 'inputBinding': {'position': 2}}, 'blast_tsv_dir': {'type': 'Directory', 'inputBinding': {'position': 3, 'valueFrom': '${ return self.path;}'}}, 'out': {'type': 'string', 'inputBinding': {'position': 4}}}",
    "cwl_outputs": "{'ids': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-pandas:1.3.2', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.8\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.8\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.8\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    pandas==1.3.2\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'pandas', 'version': ['1.3.2'], 'specs': ['https://anaconda.org/conda-forge/pandas']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'extract_contaminated_ids.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'extract_contaminated_ids.py', 'entry': 'import os\\nimport sys\\nimport pandas\\n\\nkingdom = sys.argv[1]\\nfile_name_prefix = sys.argv[2]\\nwDir = sys.argv[3]\\nout = sys.argv[4]\\n\\nforeign_databases = [\\'archaea\\',\\'other_eukaryota\\', \\'arthropoda\\', \\'fungi\\', \\'chordata\\',\\n                     \\'other_metazoa\\', \\'viruses_and_viroids\\', \\'viridiplantae\\', \\'bacteria\\']\\n\\nforeign_databases.remove(kingdom)\\n\\nfiles = [ f.replace(\\'.fsa.gz\\', \\'\\') for dr, ds, files in os.walk(wDir) for f in files if f.startswith(\\'{}\\'.format(file_name_prefix)) and f.endswith(\\'.fsa.gz\\')]\\nprint(\\'There are {} fasta files\\'.format(len(files)))\\n\\ncontaminated_ids = {}\\nfor f in files:\\n    print(f)\\n    blast_tsv = \\'{}/{}_{}_blastn.tsv\\'.format(wDir, f, kingdom)\\n    kingdom_blast = pandas.read_csv(blast_tsv, sep=\\'\\\\t\\', header=None,\\n                                    names=[\\'qseqid\\', \\'sseqid\\', \\'pident\\', \\'length\\', \\'mismatch\\', \\'gapopen\\',\\n                                           \\'qlen\\', \\'qstart\\', \\'qend\\', \\'sstart\\', \\'send\\', \\'evalue\\',\\n                                           \\'bitscore\\', \\'score\\'])\\n    kingdom_blast[\\'coverage\\'] = kingdom_blast[\\'length\\']*100/kingdom_blast[\\'qlen\\']\\n    kingdom_blast = kingdom_blast[kingdom_blast[\\'coverage\\'] >= 75].sort_values(by=[\\'qseqid\\', \\'coverage\\']).drop_duplicates(subset=\\'qseqid\\', keep=\"last\")\\n    for db in foreign_databases:\\n        v = contaminated_ids.setdefault(db, set())\\n        blast_tsv = \\'{}/{}_{}_blastn.tsv\\'.format(wDir, f, db)\\n        if os.path.exists(blast_tsv):\\n            blast = pandas.read_csv(blast_tsv, sep=\\'\\\\t\\', header=None,\\n                                    names=[\\'qseqid\\', \\'sseqid\\', \\'pident\\', \\'length\\', \\'mismatch\\', \\'gapopen\\',\\n                                           \\'qlen\\', \\'qstart\\', \\'qend\\', \\'sstart\\', \\'send\\', \\'evalue\\',\\n                                           \\'bitscore\\', \\'score\\'])\\n            blast[\\'coverage\\'] = blast[\\'length\\']*100/blast[\\'qlen\\']\\n            df_cont = blast[((blast[\\'pident\\'] >= 98.0) & (blast[\\'length\\'] >= 40))|((blast[\\'pident\\'] >= 94.0) & (blast[\\'length\\'] >= 70))|((blast[\\'pident\\'] >= 90) & (blast[\\'length\\'] >= 100))]\\n            df_cont = df_cont[df_cont[\\'coverage\\'] >= 75].sort_values(by=[\\'qseqid\\', \\'coverage\\']).drop_duplicates(subset=\\'qseqid\\', keep=\"last\")\\n            df_cont = df_cont[~df_cont[\\'qseqid\\'].isin(kingdom_blast[\\'qseqid\\'])]\\n            v.update(df_cont[\\'qseqid\\'].unique())\\n            print(\\'{} {} {} {}\\'.format(f, db, len(v), len(df_cont[\\'qseqid\\'].unique())))\\n\\ncont_ids = set([ f for d in contaminated_ids.values() for f in d])\\nprint(\\'Contaminated reads: {:n}\\\\nTotal reads: {:n}\\'.format(len(cont_ids), 5239868))\\n\\nwith open(out, \"w\") as fout:\\n    for id in cont_ids:\\n        fout.write(id + \\'\\\\n\\')\\n'}]}}",
    "cwl_doc": "This tools extract contaminated reads IDs from BlastN results to different kingdoms",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Extract contaminated reads IDs",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/filter-blastout-query.cwl",
    "sha": "f2ea74fe9f90ef7534b9d6b5199cb585e25a8755",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/filter-blastout-query.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: contamination_detection\ndoc: This tools remove contamination using a Blast TSV file\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-transcriptome-contamination-detection:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.79  \\\n          networkx==2.5.1 \\\n          pandas==1.2.4\n  SoftwareRequirement:\n    packages:\n      - package: 'pandas'\n        version:\n          - '1.2.4'\n        specs:\n          - https://anaconda.org/conda-forge/pandas\n      - package: 'biopython'\n        version:\n          - '1.79'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n      - package: 'networkx'\n        version:\n          - '2.5.1'\n        specs:\n          - https://anaconda.org/conda-forge/networkx\n\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: script.py\n        entry: |\n          import os\n          import sys\n          import pandas\n          import pickle\n          import networkx as nx\n\n          blastdir = sys.argv[1]\n          tax_pickle = sys.argv[2]\n          tax_id = sys.argv[3]\n          output = sys.argv[4]\n\n          def successors(g, O):\n              \"\"\"\n              Extract ancestors nodes from an starting node\n              :param g: starting node name\n              :param O: Graph\n              :return: a set with node names\n              \"\"\"\n              result = {g}\n              for o in O.successors(g):\n                  result.update(successors(o, O))\n              return result\n\n          def findNode(O, id):\n              nodes = [y for x,y in O.nodes(data=True) if y['id']==id]\n              if nodes:\n                  a = \"\"\n                  for i in nx.shortest_path(O, source=\"1\", target=id)[2:]:\n                      ns = [y for x,y in O.nodes(data=True) if y['id']==i]\n                      if ns:\n                          if a:\n                              a += \"; \"\n                          a += ns[0]['name']\n                  return nodes[0], a\n              return None, None\n\n          tax = pickle.load(open(tax_pickle, \"rb\"))\n          tax_ids = [int(i) for i in successors(tax_id, tax)]\n          print('{} taxonomies IDs in the list'.format(len(tax_ids)))\n\n          files = [f for dr, ds, files in os.walk(blastdir) for f in files if f.endswith('.tsv')]\n          queries = []\n          count = 0\n          total = len(files)\n          for f in files:\n              count += 1\n              print('Processing file: {}/{}\\r'.format(count, total), end='')\n              df = pandas.read_csv(os.path.join(blastdir, f), sep='\\t', header=None)\n              queries.extend(df[~df[6].isin(tax_ids)][0].unique())\n          queries = set(queries)\n          with open(output, 'w') as f_cont:\n              for r in queries:\n                  f_cont.write('{}\\n'.format(r))\n          print('Queries: {}'.format(len(queries)))\n\ninputs:\n  blastdir:\n    type: Directory\n    inputBinding:\n      position: 1\n  tax_pickle:\n    type: File\n    inputBinding:\n      position: 2\n  tax_id:\n    type: int\n    inputBinding:\n      position: 3\n  out:\n    type: string\n    inputBinding:\n      position: 4\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.out)\n\nbaseCommand: [\"python\",\"script.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'blastdir': {'type': 'Directory', 'inputBinding': {'position': 1}}, 'tax_pickle': {'type': 'File', 'inputBinding': {'position': 2}}, 'tax_id': {'type': 'int', 'inputBinding': {'position': 3}}, 'out': {'type': 'string', 'inputBinding': {'position': 4}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out)'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-transcriptome-contamination-detection:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.79  \\\\\\n    networkx==2.5.1 \\\\\\n    pandas==1.2.4\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'pandas', 'version': ['1.2.4'], 'specs': ['https://anaconda.org/conda-forge/pandas']}, {'package': 'biopython', 'version': ['1.79'], 'specs': ['https://anaconda.org/conda-forge/biopython']}, {'package': 'networkx', 'version': ['2.5.1'], 'specs': ['https://anaconda.org/conda-forge/networkx']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'script.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'script.py', 'entry': 'import os\\nimport sys\\nimport pandas\\nimport pickle\\nimport networkx as nx\\n\\nblastdir = sys.argv[1]\\ntax_pickle = sys.argv[2]\\ntax_id = sys.argv[3]\\noutput = sys.argv[4]\\n\\ndef successors(g, O):\\n    \"\"\"\\n    Extract ancestors nodes from an starting node\\n    :param g: starting node name\\n    :param O: Graph\\n    :return: a set with node names\\n    \"\"\"\\n    result = {g}\\n    for o in O.successors(g):\\n        result.update(successors(o, O))\\n    return result\\n\\ndef findNode(O, id):\\n    nodes = [y for x,y in O.nodes(data=True) if y[\\'id\\']==id]\\n    if nodes:\\n        a = \"\"\\n        for i in nx.shortest_path(O, source=\"1\", target=id)[2:]:\\n            ns = [y for x,y in O.nodes(data=True) if y[\\'id\\']==i]\\n            if ns:\\n                if a:\\n                    a += \"; \"\\n                a += ns[0][\\'name\\']\\n        return nodes[0], a\\n    return None, None\\n\\ntax = pickle.load(open(tax_pickle, \"rb\"))\\ntax_ids = [int(i) for i in successors(tax_id, tax)]\\nprint(\\'{} taxonomies IDs in the list\\'.format(len(tax_ids)))\\n\\nfiles = [f for dr, ds, files in os.walk(blastdir) for f in files if f.endswith(\\'.tsv\\')]\\nqueries = []\\ncount = 0\\ntotal = len(files)\\nfor f in files:\\n    count += 1\\n    print(\\'Processing file: {}/{}\\\\r\\'.format(count, total), end=\\'\\')\\n    df = pandas.read_csv(os.path.join(blastdir, f), sep=\\'\\\\t\\', header=None)\\n    queries.extend(df[~df[6].isin(tax_ids)][0].unique())\\nqueries = set(queries)\\nwith open(output, \\'w\\') as f_cont:\\n    for r in queries:\\n        f_cont.write(\\'{}\\\\n\\'.format(r))\\nprint(\\'Queries: {}\\'.format(len(queries)))\\n'}]}}",
    "cwl_doc": "This tools remove contamination using a Blast TSV file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "contamination_detection",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/filter-fasta-by-blast.cwl",
    "sha": "06812c2fce5586da1733ad514b74cf473ff41928",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/filter-fasta-by-blast.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: contamination_detection\ndoc: This tools remove contamination using a Blast TSV file\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-transcriptome-contamination-detection:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.79  \\\n          pandas==1.2.4\n  SoftwareRequirement:\n    packages:\n      - package: 'pandas'\n        version:\n          - '1.2.4'\n        specs:\n          - https://anaconda.org/conda-forge/pandas\n      - package: 'biopython'\n        version:\n          - '1.79'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: filter-fasta-by-blast.py\n        entry: |\n          import os\n          import gzip\n          import pandas\n          import argparse\n          from Bio import SeqIO\n\n          if __name__ == \"__main__\":\n              parser = argparse.ArgumentParser()\n\n              parser.add_argument('--blastout', help='Blast TSV output file', required=True)\n              parser.add_argument('--columns', help='Blast columns space separated. \"qseqid sseqid pident length mismatch\"', required=True)\n              parser.add_argument('--id_column', help='ID column', required=True)\n              parser.add_argument('--fasta', help='Fasta file to filter', required=True)\n              parser.add_argument('--filter_out',\n                                  default=False, action='store_true',\n                                  help='Filter out the IDs obtained from Blast', required=False)\n              parser.add_argument('--add_coverage',\n                                  default=False, action='store_true',\n                                  help='Add coverage column. Requiere columns length and qlen\"', required=False)\n              parser.add_argument('--filter_columns', help='Filter column: column name. Coma separated for AND filter', required=True)\n              parser.add_argument('--filter_values', help='Filter value: column name. Coma separated for AND filter', required=True)\n              parser.add_argument('--filter_types', help='Filter value type (int, float). Coma separated for AND filter', required=True)\n              parser.add_argument('--filter_ops', help='Filter operation: <, <=, >, >=, =, !=', required=True)\n\n              args = parser.parse_args()\n              df = pandas.read_csv(args.blastout, sep='\\t', names=args.columns.split(' '))\n              if args.add_coverage:\n                  df['coverage'] = df['length']*100/df['qlen']\n\n              columns = args.filter_columns.split(',')\n              values = args.filter_values.split(',')\n              types = args.filter_types.split(',')\n              operators = args.filter_ops.split(',')\n\n              for i in range(0, len(columns)):\n                  if types[i] == 'int':\n                      v = int(values[i])\n                  else:\n                      v = float(values[i])\n                  if operators[i] == '<':\n                      df = df[df[columns[i]] < v]\n                  elif operators[i] == '<=':\n                      df = df[df[columns[i]] <= v]\n                  elif operators[i] == '>':\n                      df = df[df[columns[i]] > v]\n                  elif operators[i] == '>=':\n                      df = df[df[columns[i]] >= v]\n                  elif operators[i] == '==':\n                      df = df[df[columns[i]] == v]\n                  elif operators[i] == '!=':\n                      df = df[df[columns[i]] != v]\n\n              ids = df[args.id_column].unique()\n              print('Filtered IDs: {}'.format(len(ids)))\n              filename, ext = os.path.splitext(os.path.basename(args.fasta))\n              if ext == '.gz':\n                  handler = gzip.open(args.fasta, 'rt')\n                  prefix = os.path.splitext(filename)[0]\n              else:\n                  handler = open(args.fasta, 'r')\n                  prefix = filename\n\n              count = 0\n              used = 0\n              filtered = 0\n              with gzip.open('{}_filtered.fsa.gz'.format(prefix), \"wt\") as fsa_handle, gzip.open('{}_filtered.ids.gz'.format(prefix), \"wt\") as ids_handle:\n                  for record in SeqIO.parse(handler, \"fasta\"):\n                      count += 1\n                      if (args.filter_out and record.id not in ids) or (not args.filter_out and record.id in ids):\n                          used += 1\n                          SeqIO.write(record, fsa_handle, \"fasta\")\n                      else:\n                          filtered += 1\n                          ids_handle.write(record.id + '\\n')\n              print('Total: {} Used: {} Discarded: {}'.format(count, used, filtered))\n              handler.close()\n\n\ninputs:\n  blastout:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: --blastout\n  columns:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --columns\n  id_column:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: --id_column\n  fasta:\n    type: File\n    inputBinding:\n      position: 4\n      prefix: --fasta\n  filter_out:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: --filter_out\n  add_coverage:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: --add_coverage\n  filter_columns:\n    type: string\n    inputBinding:\n      position: 4\n      prefix: --filter_columns\n  filter_values:\n    type: string\n    inputBinding:\n      position: 4\n      prefix: --filter_values\n  filter_types:\n    type: string\n    inputBinding:\n      position: 4\n      prefix: --filter_types\n  filter_ops:\n    type: string\n    inputBinding:\n      position: 4\n      prefix: --filter_ops\n\noutputs:\n  fsa:\n    type: File\n    outputBinding:\n      glob: '*_filtered.fsa.gz'\n  ids:\n    type: File\n    outputBinding:\n      glob: '*_filtered.ids.gz'\n\nbaseCommand: [\"python\",\"filter-fasta-by-blast.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'blastout': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '--blastout'}}, 'columns': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--columns'}}, 'id_column': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '--id_column'}}, 'fasta': {'type': 'File', 'inputBinding': {'position': 4, 'prefix': '--fasta'}}, 'filter_out': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '--filter_out'}}, 'add_coverage': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '--add_coverage'}}, 'filter_columns': {'type': 'string', 'inputBinding': {'position': 4, 'prefix': '--filter_columns'}}, 'filter_values': {'type': 'string', 'inputBinding': {'position': 4, 'prefix': '--filter_values'}}, 'filter_types': {'type': 'string', 'inputBinding': {'position': 4, 'prefix': '--filter_types'}}, 'filter_ops': {'type': 'string', 'inputBinding': {'position': 4, 'prefix': '--filter_ops'}}}",
    "cwl_outputs": "{'fsa': {'type': 'File', 'outputBinding': {'glob': '*_filtered.fsa.gz'}}, 'ids': {'type': 'File', 'outputBinding': {'glob': '*_filtered.ids.gz'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-transcriptome-contamination-detection:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.79  \\\\\\n    pandas==1.2.4\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'pandas', 'version': ['1.2.4'], 'specs': ['https://anaconda.org/conda-forge/pandas']}, {'package': 'biopython', 'version': ['1.79'], 'specs': ['https://anaconda.org/conda-forge/biopython']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'filter-fasta-by-blast.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'filter-fasta-by-blast.py', 'entry': 'import os\\nimport gzip\\nimport pandas\\nimport argparse\\nfrom Bio import SeqIO\\n\\nif __name__ == \"__main__\":\\n    parser = argparse.ArgumentParser()\\n\\n    parser.add_argument(\\'--blastout\\', help=\\'Blast TSV output file\\', required=True)\\n    parser.add_argument(\\'--columns\\', help=\\'Blast columns space separated. \"qseqid sseqid pident length mismatch\"\\', required=True)\\n    parser.add_argument(\\'--id_column\\', help=\\'ID column\\', required=True)\\n    parser.add_argument(\\'--fasta\\', help=\\'Fasta file to filter\\', required=True)\\n    parser.add_argument(\\'--filter_out\\',\\n                        default=False, action=\\'store_true\\',\\n                        help=\\'Filter out the IDs obtained from Blast\\', required=False)\\n    parser.add_argument(\\'--add_coverage\\',\\n                        default=False, action=\\'store_true\\',\\n                        help=\\'Add coverage column. Requiere columns length and qlen\"\\', required=False)\\n    parser.add_argument(\\'--filter_columns\\', help=\\'Filter column: column name. Coma separated for AND filter\\', required=True)\\n    parser.add_argument(\\'--filter_values\\', help=\\'Filter value: column name. Coma separated for AND filter\\', required=True)\\n    parser.add_argument(\\'--filter_types\\', help=\\'Filter value type (int, float). Coma separated for AND filter\\', required=True)\\n    parser.add_argument(\\'--filter_ops\\', help=\\'Filter operation: <, <=, >, >=, =, !=\\', required=True)\\n\\n    args = parser.parse_args()\\n    df = pandas.read_csv(args.blastout, sep=\\'\\\\t\\', names=args.columns.split(\\' \\'))\\n    if args.add_coverage:\\n        df[\\'coverage\\'] = df[\\'length\\']*100/df[\\'qlen\\']\\n\\n    columns = args.filter_columns.split(\\',\\')\\n    values = args.filter_values.split(\\',\\')\\n    types = args.filter_types.split(\\',\\')\\n    operators = args.filter_ops.split(\\',\\')\\n\\n    for i in range(0, len(columns)):\\n        if types[i] == \\'int\\':\\n            v = int(values[i])\\n        else:\\n            v = float(values[i])\\n        if operators[i] == \\'<\\':\\n            df = df[df[columns[i]] < v]\\n        elif operators[i] == \\'<=\\':\\n            df = df[df[columns[i]] <= v]\\n        elif operators[i] == \\'>\\':\\n            df = df[df[columns[i]] > v]\\n        elif operators[i] == \\'>=\\':\\n            df = df[df[columns[i]] >= v]\\n        elif operators[i] == \\'==\\':\\n            df = df[df[columns[i]] == v]\\n        elif operators[i] == \\'!=\\':\\n            df = df[df[columns[i]] != v]\\n\\n    ids = df[args.id_column].unique()\\n    print(\\'Filtered IDs: {}\\'.format(len(ids)))\\n    filename, ext = os.path.splitext(os.path.basename(args.fasta))\\n    if ext == \\'.gz\\':\\n        handler = gzip.open(args.fasta, \\'rt\\')\\n        prefix = os.path.splitext(filename)[0]\\n    else:\\n        handler = open(args.fasta, \\'r\\')\\n        prefix = filename\\n\\n    count = 0\\n    used = 0\\n    filtered = 0\\n    with gzip.open(\\'{}_filtered.fsa.gz\\'.format(prefix), \"wt\") as fsa_handle, gzip.open(\\'{}_filtered.ids.gz\\'.format(prefix), \"wt\") as ids_handle:\\n        for record in SeqIO.parse(handler, \"fasta\"):\\n            count += 1\\n            if (args.filter_out and record.id not in ids) or (not args.filter_out and record.id in ids):\\n                used += 1\\n                SeqIO.write(record, fsa_handle, \"fasta\")\\n            else:\\n                filtered += 1\\n                ids_handle.write(record.id + \\'\\\\n\\')\\n    print(\\'Total: {} Used: {} Discarded: {}\\'.format(count, used, filtered))\\n    handler.close()\\n'}]}}",
    "cwl_doc": "This tools remove contamination using a Blast TSV file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "contamination_detection",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/remove-duplicated-ids.cwl",
    "sha": "e17aa08b5a55f88164dc28dc285a7e2f4dc95db5",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/remove-duplicated-ids.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: remove_duplicated_ids\ndoc: This tools remove sequences with duplicated IDs\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-biopython:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.77\n  SoftwareRequirement:\n    packages:\n      - package: 'biopython'\n        version:\n          - '1.71'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: duplicate_removal.py\n        entry: |\n          import os\n          import sys\n          from Bio import SeqIO\n          from collections import defaultdict\n\n          fasta = os.path.basename(sys.argv[1])\n          with open(sys.argv[1], 'r') as handle, open(fasta + '.fsa', \"w\") as fout:\n              dedup_records = defaultdict()\n              for record in SeqIO.parse(handle, \"fasta\"):\n                  r = dedup_records.setdefault(record.id, False)\n                  if not r:\n                      dedup_records[record.id] = True\n                      fout.write(record.format(\"fasta\"))\n\ninputs:\n  fasta:\n    type: File\n    inputBinding:\n      position: 1\n\noutputs:\n  fsa:\n    type: File\n    outputBinding:\n      glob: $(inputs.fasta.basename).fsa\n\nbaseCommand: [\"python\",\"duplicate_removal.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': {'type': 'File', 'inputBinding': {'position': 1}}}",
    "cwl_outputs": "{'fsa': {'type': 'File', 'outputBinding': {'glob': '$(inputs.fasta.basename).fsa'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-biopython:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.77\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'biopython', 'version': ['1.71'], 'specs': ['https://anaconda.org/conda-forge/biopython']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'duplicate_removal.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'duplicate_removal.py', 'entry': 'import os\\nimport sys\\nfrom Bio import SeqIO\\nfrom collections import defaultdict\\n\\nfasta = os.path.basename(sys.argv[1])\\nwith open(sys.argv[1], \\'r\\') as handle, open(fasta + \\'.fsa\\', \"w\") as fout:\\n    dedup_records = defaultdict()\\n    for record in SeqIO.parse(handle, \"fasta\"):\\n        r = dedup_records.setdefault(record.id, False)\\n        if not r:\\n            dedup_records[record.id] = True\\n            fout.write(record.format(\"fasta\"))\\n'}]}}",
    "cwl_doc": "This tools remove sequences with duplicated IDs",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "remove_duplicated_ids",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/remove-reads-fastq.cwl",
    "sha": "baed55a72a2147a484dada5899920859f535f3d2",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/remove-reads-fastq.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: remove_reads_fastq\ndoc: Remove list of reads from fastq file\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-biopython:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.77\n  SoftwareRequirement:\n    packages:\n      - package: 'biopython'\n        version:\n          - '1.71'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: remove_reads_fastq.py\n        entry: |\n          import os\n          import gzip\n          from Bio import SeqIO\n\n          ids = []\n          with open(sys.argv[1]) as handle:\n              for line in handle:\n                ids.append(line.strip())\n          fastq_files = sys.argv[2].split(',')\n\n          def worker(file):\n              ids_cpy = ids.copy()\n              with gzip.open(file, \"rt\") as handle, gzip.open(file.replace(\".fastq.gz\", \"_clean.fastq.gz\", \"wt\") as output_handle:\n                  for rec in SeqIO.parse(handle, \"fastq\"):\n                      if rec.id not in ids_cpy:\n                          SeqIO.write(rec, output_handle, \"fastq\")\n                      else:\n                          ids_cpy.remove(rec.id)\n\n\n\ninputs:\n  fasta:\n    type: File\n    inputBinding:\n      position: 1\n  total_per_file:\n    type: int\n    inputBinding:\n      position: 2\n\noutputs:\n  output:\n    type: File[]\n    outputBinding:\n      glob: '*.fsa.gz'\n\nbaseCommand: [\"python\",\"remove_reads_fastq.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': {'type': 'File', 'inputBinding': {'position': 1}}, 'total_per_file': {'type': 'int', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'output': {'type': 'File[]', 'outputBinding': {'glob': '*.fsa.gz'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-biopython:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.77\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'biopython', 'version': ['1.71'], 'specs': ['https://anaconda.org/conda-forge/biopython']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'remove_reads_fastq.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'remove_reads_fastq.py', 'entry': 'import os\\nimport gzip\\nfrom Bio import SeqIO\\n\\nids = []\\nwith open(sys.argv[1]) as handle:\\n    for line in handle:\\n      ids.append(line.strip())\\nfastq_files = sys.argv[2].split(\\',\\')\\n\\ndef worker(file):\\n    ids_cpy = ids.copy()\\n    with gzip.open(file, \"rt\") as handle, gzip.open(file.replace(\".fastq.gz\", \"_clean.fastq.gz\", \"wt\") as output_handle:\\n        for rec in SeqIO.parse(handle, \"fastq\"):\\n            if rec.id not in ids_cpy:\\n                SeqIO.write(rec, output_handle, \"fastq\")\\n            else:\\n                ids_cpy.remove(rec.id)\\n'}]}}",
    "cwl_doc": "Remove list of reads from fastq file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "remove_reads_fastq",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/split-fasta.cwl",
    "sha": "cf27643eeb9e7c31a14f7d4210d43d2b4dc0bd02",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/split-fasta.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: split_fasta\ndoc: Split fasta file in multiple files\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-biopython:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.77\n  SoftwareRequirement:\n    packages:\n      - package: 'biopython'\n        version:\n          - '1.71'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: split-fasta.py\n        entry: |\n          import os\n          import sys\n          import gzip\n          from Bio import SeqIO\n\n          fasta = sys.argv[1]\n          total_per_file = int(sys.argv[2])\n\n          filename, ext = os.path.splitext(os.path.basename(fasta))\n          if ext == '.gz':\n              handle = gzip.open(fasta, 'rt')\n              prefix  =  '{}_{}'.format(os.path.splitext(filename)[0], total_per_file)\n          else:\n              handle = open(fasta, 'r')\n              prefix = '{}_{}'.format(filename, total_per_file)\n\n          count = 0\n          total = 0\n          output_handle = gzip.open('{}_{}.fsa.gz'.format(total_per_file, total + 1), \"wt\")\n          print('Writing file {}_{}.fsa.gz'.format(total_per_file, total + 1))\n\n          for r in SeqIO.parse(handle, \"fasta\"):\n              if count == total_per_file:\n                  count = 0\n                  total += 1\n                  output_handle.close()\n                  output_handle = gzip.open('{}_{}.fsa.gz'.format(total_per_file, total + 1), \"wt\")\n                  print('Writing final file {}_{}.fsa.gz'.format(total_per_file, total + 1))\n              count += 1\n              output_handle.write(r.format(\"fasta\"))\n          handle.close()\n          output_handle.close()\n\ninputs:\n  fasta:\n    type: File\n    inputBinding:\n      position: 1\n  total_per_file:\n    type: int\n    inputBinding:\n      position: 2\n\noutputs:\n  output:\n    type: File[]\n    outputBinding:\n      glob: '*.fsa.gz'\n\nbaseCommand: [\"python\",\"split-fasta.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': {'type': 'File', 'inputBinding': {'position': 1}}, 'total_per_file': {'type': 'int', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'output': {'type': 'File[]', 'outputBinding': {'glob': '*.fsa.gz'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-biopython:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.77\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'biopython', 'version': ['1.71'], 'specs': ['https://anaconda.org/conda-forge/biopython']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'split-fasta.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'split-fasta.py', 'entry': 'import os\\nimport sys\\nimport gzip\\nfrom Bio import SeqIO\\n\\nfasta = sys.argv[1]\\ntotal_per_file = int(sys.argv[2])\\n\\nfilename, ext = os.path.splitext(os.path.basename(fasta))\\nif ext == \\'.gz\\':\\n    handle = gzip.open(fasta, \\'rt\\')\\n    prefix  =  \\'{}_{}\\'.format(os.path.splitext(filename)[0], total_per_file)\\nelse:\\n    handle = open(fasta, \\'r\\')\\n    prefix = \\'{}_{}\\'.format(filename, total_per_file)\\n\\ncount = 0\\ntotal = 0\\noutput_handle = gzip.open(\\'{}_{}.fsa.gz\\'.format(total_per_file, total + 1), \"wt\")\\nprint(\\'Writing file {}_{}.fsa.gz\\'.format(total_per_file, total + 1))\\n\\nfor r in SeqIO.parse(handle, \"fasta\"):\\n    if count == total_per_file:\\n        count = 0\\n        total += 1\\n        output_handle.close()\\n        output_handle = gzip.open(\\'{}_{}.fsa.gz\\'.format(total_per_file, total + 1), \"wt\")\\n        print(\\'Writing final file {}_{}.fsa.gz\\'.format(total_per_file, total + 1))\\n    count += 1\\n    output_handle.write(r.format(\"fasta\"))\\nhandle.close()\\noutput_handle.close()\\n'}]}}",
    "cwl_doc": "Split fasta file in multiple files",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "split_fasta",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/split-genome-by-chromosome.cwl",
    "sha": "85c5ff26cad79438ca830c75f23636d4a88dc2af",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/split-genome-by-chromosome.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: split_genome_by_chromosome\ndoc: Split genome in fasta file one chtomosome per file\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/biopython:1.78\n  SoftwareRequirement:\n    packages:\n      - package: 'python'\n        version:\n          - '3.9.1'\n        specs:\n          - https://anaconda.org/conda-forge/python\n      - package: 'biopython'\n        version:\n          - '1.78'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n\nrequirements:\n  ResourceRequirement: {}\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: split-genome-by-chromosome.py\n        entry: |\n          import os\n          import sys\n          import gzip\n          from Bio import SeqIO\n\n          fasta = sys.argv[1]\n          filename, ext = os.path.splitext(os.path.basename(fasta))\n          if ext == '.gz':\n              handle = gzip.open(fasta, 'rt')\n          else:\n              handle = open(fasta, 'r')\n\n          for r in SeqIO.parse(handle, \"fasta\"):\n              with open('{}.fsa'.format(r.id), 'w') as output_handle:\n                  output_handle.write(r.format(\"fasta\"))\n          handle.close()\n\ninputs:\n  fasta:\n    type: File\n    inputBinding:\n      position: 1\n\noutputs:\n  output:\n    type: File[]\n    outputBinding:\n      glob: '*.fsa'\n\nbaseCommand: [\"python\",\"split-genome-by-chromosome.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': {'type': 'File', 'inputBinding': {'position': 1}}}",
    "cwl_outputs": "{'output': {'type': 'File[]', 'outputBinding': {'glob': '*.fsa'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/biopython:1.78'}, 'SoftwareRequirement': {'packages': [{'package': 'python', 'version': ['3.9.1'], 'specs': ['https://anaconda.org/conda-forge/python']}, {'package': 'biopython', 'version': ['1.78'], 'specs': ['https://anaconda.org/conda-forge/biopython']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'split-genome-by-chromosome.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'split-genome-by-chromosome.py', 'entry': 'import os\\nimport sys\\nimport gzip\\nfrom Bio import SeqIO\\n\\nfasta = sys.argv[1]\\nfilename, ext = os.path.splitext(os.path.basename(fasta))\\nif ext == \\'.gz\\':\\n    handle = gzip.open(fasta, \\'rt\\')\\nelse:\\n    handle = open(fasta, \\'r\\')\\n\\nfor r in SeqIO.parse(handle, \"fasta\"):\\n    with open(\\'{}.fsa\\'.format(r.id), \\'w\\') as output_handle:\\n        output_handle.write(r.format(\"fasta\"))\\nhandle.close()\\n'}]}}",
    "cwl_doc": "Split genome in fasta file one chtomosome per file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "split_genome_by_chromosome",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/split-genome-by-window.cwl",
    "sha": "5c94ec729ceabfb5ec63d2272baa1f6d4aa382b9",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/split-genome-by-window.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: split_genome_by_window\ndoc: Split genome in fasta file in multiple files using window size and overload\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-biopython:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.77\n  SoftwareRequirement:\n    packages:\n      - package: 'biopython'\n        version:\n          - '1.71'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n\nrequirements:\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: split-genome-by-window.py\n        entry: |\n          import os\n          import sys\n          import gzip\n          from Bio import SeqIO\n          from Bio.SeqRecord import SeqRecord\n          from multiprocessing import Pool\n\n          fasta = sys.argv[1]\n          window = int(sys.argv[2])\n          overlap = int(sys.argv[3])\n          threads = int(sys.argv[4])\n\n          filename, ext = os.path.splitext(os.path.basename(fasta))\n          if ext == '.gz':\n              handle = gzip.open(fasta, 'rt')\n          else:\n              handle = open(fasta, 'r')\n\n          def worker(r):\n              start = 0\n              length = len(r.seq)\n              while True:\n                  end = window + start\n                  if end > length:\n                      end = length\n                  with open('{}_{}.fsa'.format(r.id,start), 'w') as output_handle:\n                      record = SeqRecord(r.seq[start:end],\n                             id='{}_{}'.format(r.id,start), name=\"\",\n                             description=\"\")\n                      output_handle.write(record.format(\"fasta\"))\n                  start += window - overlap\n                  if end == length:\n                      break\n\n          p = Pool(processes=threads)\n          results = p.map(worker, [r for r in SeqIO.parse(handle, \"fasta\")])\n          p.close()\n          handle.close()\n\ninputs:\n  fasta:\n    type: File\n    inputBinding:\n      position: 1\n  window:\n    type: int\n    inputBinding:\n      position: 2\n  overlap:\n    type: int\n    inputBinding:\n      position: 3\n  threads:\n    type: int\n    inputBinding:\n      position: 4\n\noutputs:\n  output:\n    type: File[]\n    outputBinding:\n      glob: '*.fsa'\n\nbaseCommand: [\"python\",\"split-genome-by-window.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': {'type': 'File', 'inputBinding': {'position': 1}}, 'window': {'type': 'int', 'inputBinding': {'position': 2}}, 'overlap': {'type': 'int', 'inputBinding': {'position': 3}}, 'threads': {'type': 'int', 'inputBinding': {'position': 4}}}",
    "cwl_outputs": "{'output': {'type': 'File[]', 'outputBinding': {'glob': '*.fsa'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-biopython:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.77\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'biopython', 'version': ['1.71'], 'specs': ['https://anaconda.org/conda-forge/biopython']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'split-genome-by-window.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {'coresMin': '$(inputs.threads)'}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'split-genome-by-window.py', 'entry': 'import os\\nimport sys\\nimport gzip\\nfrom Bio import SeqIO\\nfrom Bio.SeqRecord import SeqRecord\\nfrom multiprocessing import Pool\\n\\nfasta = sys.argv[1]\\nwindow = int(sys.argv[2])\\noverlap = int(sys.argv[3])\\nthreads = int(sys.argv[4])\\n\\nfilename, ext = os.path.splitext(os.path.basename(fasta))\\nif ext == \\'.gz\\':\\n    handle = gzip.open(fasta, \\'rt\\')\\nelse:\\n    handle = open(fasta, \\'r\\')\\n\\ndef worker(r):\\n    start = 0\\n    length = len(r.seq)\\n    while True:\\n        end = window + start\\n        if end > length:\\n            end = length\\n        with open(\\'{}_{}.fsa\\'.format(r.id,start), \\'w\\') as output_handle:\\n            record = SeqRecord(r.seq[start:end],\\n                   id=\\'{}_{}\\'.format(r.id,start), name=\"\",\\n                   description=\"\")\\n            output_handle.write(record.format(\"fasta\"))\\n        start += window - overlap\\n        if end == length:\\n            break\\n\\np = Pool(processes=threads)\\nresults = p.map(worker, [r for r in SeqIO.parse(handle, \"fasta\")])\\np.close()\\nhandle.close()\\n'}]}}",
    "cwl_doc": "Split genome in fasta file in multiple files using window size and overload",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "split_genome_by_window",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/python/vector-removal.cwl",
    "sha": "7136fd017835650b879f36a17cdb4e00c419dd0c",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/python/vector-removal.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: vector_removal\ndoc: This tools detect vectors from a Blast TSV file\n\nhints:\n  DockerRequirement:\n    dockerImageId: cwl-ngs-workflows-cbb-vector-removal:3.7\n    dockerFile: |\n      # Base Image\n      FROM quay.io/biocontainers/python:3.7\n\n      # Metadata\n      LABEL base.image=\"quay.io/biocontainers/python:3.7\"\n      LABEL version=\"1\"\n      LABEL software=\"Python3\"\n      LABEL software.version=\"3.7\"\n      LABEL description=\"Python based docker image\"\n      LABEL tags=\"Python\"\n\n      # Maintainer\n      MAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\n\n      USER root\n      # Adding Python packages\n      RUN python -m pip install \\\n          biopython==1.77  \\\n          networkx==2.4 \\\n          pandas==1.0.5\n  SoftwareRequirement:\n    packages:\n      - package: 'pandas'\n        version:\n          - '1.0.5'\n        specs:\n          - https://anaconda.org/conda-forge/pandas\n      - package: 'biopython'\n        version:\n          - '1.71'\n        specs:\n          - https://anaconda.org/conda-forge/biopython\n      - package: 'networkx'\n        version:\n          - '2.4'\n        specs:\n          - https://anaconda.org/conda-forge/networkx\n\nrequirements:\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: vector_removal.py\n        entry: |\n          import os\n          import sys\n          import pandas\n          import gzip\n          import datetime\n          from Bio import SeqIO\n          from Bio.Seq import Seq\n          from Bio.SeqRecord import SeqRecord\n          from multiprocessing import Pool, Value\n\n          fasta = sys.argv[1]\n          blast_tsv = sys.argv[2]\n          threads = int(sys.argv[3])\n          min_length = int(sys.argv[4])\n\n          if threads > 1:\n              threads = threads - 1\n\n          blast = pandas.read_csv(blast_tsv, sep='\\t', header=None,\n                                  names=['qseqid', 'sseqid', 'pident', 'length', 'mismatch', 'gapopen',\n                                         'qlen', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore', 'score'])\n          blast['coverage'] = blast['length']*100/blast['qlen']\n          print('{} results loaded from Blast'.format(len(blast)))\n\n          filename, ext = os.path.splitext(os.path.basename(fasta))\n          if ext == '.gz':\n              handler = gzip.open(fasta, 'rt')\n              prefix  =  os.path.splitext(filename)[0]\n          else:\n              handler = open(fasta, 'r')\n              prefix = filename\n\n          transcripts = {}\n          count = 0\n          for record in SeqIO.parse(handler, \"fasta\"):\n              count += 1\n              transcripts[record.id] = record\n              print('{}'.format(count), end='\\r')\n          total = len(transcripts)\n          print('{} transcripts to process'.format(total))\n          handler.close()\n\n          file_prefix = Value('i', 0)\n          counter = Value('i', 0)\n          start_time = datetime.datetime.now()\n\n          def chunks(lst, n):\n              \"\"\"Yield successive n-sized chunks from lst.\"\"\"\n              for i in range(0, len(lst), n):\n                  yield lst[i:i + n]\n\n          def build_seqs(segs, rec):\n              last = 0\n              segments_to_build = []\n              for s in segs:\n                  if s[0] - 1 - last >= 200:\n                      segments_to_build.append([last,s[0] - 1])\n                  last = s[1] + 1\n              if len(rec.seq) - last >= 200:\n                  segments_to_build.append([last,len(rec.seq)])\n              return segments_to_build\n\n          def terminal_vector(df):\n              return df[((df['qstart'] <= 25) | (df['qend'] >= df['qlen'] - 25)) & (df['score'] >= 19)]\n\n          def internal_vector(df):\n              return df[((df['qstart'] > 25) | (df['qend'] < df['qlen'] - 25)) & (df['score'] >= 25)]\n\n          def vectors(df):\n              return pandas.concat([terminal_vector(df), internal_vector(df)])\n\n          def build_segments_worker(tlist):\n              global counter\n              global total\n              global file_prefix\n              with file_prefix.get_lock():\n                  file_prefix.value += 1\n                  pre = file_prefix.value\n              with open('{}_novect.fsa'.format(pre), \"w\") as novect_handle, open('{}_vect.ids'.format(pre), \"w\") as vect_handle:\n                  blast_df = blast[blast['qseqid'].isin(tlist)]\n                  for t in tlist:\n                      trans = transcripts[t]\n                      trans_len = len(trans.seq)\n                      df = vectors(blast_df[blast_df['qseqid'] == t])\n                      if df.empty:\n                          if trans_len >= 200:\n                              SeqIO.write(trans, novect_handle, \"fasta\")\n                      else:\n                          segs = []\n                          index = 0\n                          last_seg = None\n                          for i, r in df.iterrows():\n                              if not segs:\n                                  index = 1\n                                  last_seg = [r['qstart'], r['qend']]\n                                  segs.append(last_seg)\n                              elif r['qstart'] <= last_seg[1] and r['qend'] > last_seg[1]:\n                                  last_seg = [last_seg[0], r['qend']]\n                                  segs[index - 1] = last_seg\n                              elif r['qstart'] > last_seg[1]:\n                                  index += 1\n                                  last_seg = [r['qstart'], r['qend']]\n                                  segs.append(last_seg)\n                          segs_to_build = build_seqs(segs, trans)\n                          if segs_to_build:\n                              for s in segs_to_build:\n                                  id = '{}|{}_{}'.format(t, s[0], s[1])\n                                  rec = SeqRecord(trans.seq[s[0]:s[1]], id=id, name=id, description='')\n                                  SeqIO.write(rec, novect_handle, \"fasta\")\n                          else:\n                              df = df.sort_values(by=['qseqid', 'coverage']).drop_duplicates(subset='qseqid', keep=\"last\")\n                              for i, r in df.iterrows():\n                                  vect_handle.write('{}\\t{}\\t{}\\t{}\\t{}\\t{}\\n'.format(r['qseqid'],r['sseqid'],r['pident'],r['evalue'],r['bitscore'],r['coverage']))\n\n                      with counter.get_lock():\n                          counter.value += 1\n                          value = counter.value\n                          end_time = datetime.datetime.now()\n                          c = end_time - start_time\n                          print('{:3.2f}%\\tRemaining: {:5.1f} secs Elapsed: {:5.1f} secs {}'.format((value * 100 / total), ((c.seconds * total / value) - c.seconds), c.seconds, 20 * ' '), end='\\r')\n          p = Pool(processes=threads)\n          transcripts_list = [d for d in list(chunks(list(transcripts.keys()), 1000))]\n          data = p.map(build_segments_worker, transcripts_list)\n          print('\\n\\nPrinting results...')\n          count = 0\n          vect_count = 0\n          with open('{}_novect.fsa'.format(prefix), \"w\") as output_handle, open('{}_vect.ids'.format(prefix), \"w\") as vect_handle:\n              for d in range(1, len(transcripts_list) + 1):\n                  with open('{}_novect.fsa'.format(d)) as input_handle:\n                      for r in SeqIO.parse(input_handle, \"fasta\"):\n                          count += 1\n                          SeqIO.write(r, output_handle, \"fasta\")\n                  os.remove('{}_novect.fsa'.format(d))\n                  with open('{}_vect.ids'.format(d)) as input_handle:\n                      for r in input_handle:\n                          vect_count += 1\n                          vect_handle.write(r)\n                  os.remove('{}_vect.ids'.format(d))\n          print('{} transcripts with no interior vectors'.format(count))\n          print('{} transcripts discarded due to vectors'.format(vect_count))\n\n\n\ninputs:\n  fasta:\n    type: File\n    inputBinding:\n      position: 1\n  blast:\n    type: File\n    inputBinding:\n      position: 2\n  threads:\n    type: int\n    inputBinding:\n      position: 3\n  min_length:\n    type: int\n    inputBinding:\n      position: 4\n\noutputs:\n  fsa:\n    type: File\n    outputBinding:\n      glob: '*_novect.fsa'\n  vect:\n    type: File\n    outputBinding:\n      glob: '*_vect.ids'\n\nbaseCommand: [\"python\",\"vector_removal.py\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': {'type': 'File', 'inputBinding': {'position': 1}}, 'blast': {'type': 'File', 'inputBinding': {'position': 2}}, 'threads': {'type': 'int', 'inputBinding': {'position': 3}}, 'min_length': {'type': 'int', 'inputBinding': {'position': 4}}}",
    "cwl_outputs": "{'fsa': {'type': 'File', 'outputBinding': {'glob': '*_novect.fsa'}}, 'vect': {'type': 'File', 'outputBinding': {'glob': '*_vect.ids'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerImageId': 'cwl-ngs-workflows-cbb-vector-removal:3.7', 'dockerFile': '# Base Image\\nFROM quay.io/biocontainers/python:3.7\\n\\n# Metadata\\nLABEL base.image=\"quay.io/biocontainers/python:3.7\"\\nLABEL version=\"1\"\\nLABEL software=\"Python3\"\\nLABEL software.version=\"3.7\"\\nLABEL description=\"Python based docker image\"\\nLABEL tags=\"Python\"\\n\\n# Maintainer\\nMAINTAINER Roberto Vera Alvarez <r78v10a07@gmail.com>\\n\\nUSER root\\n# Adding Python packages\\nRUN python -m pip install \\\\\\n    biopython==1.77  \\\\\\n    networkx==2.4 \\\\\\n    pandas==1.0.5\\n'}, 'SoftwareRequirement': {'packages': [{'package': 'pandas', 'version': ['1.0.5'], 'specs': ['https://anaconda.org/conda-forge/pandas']}, {'package': 'biopython', 'version': ['1.71'], 'specs': ['https://anaconda.org/conda-forge/biopython']}, {'package': 'networkx', 'version': ['2.4'], 'specs': ['https://anaconda.org/conda-forge/networkx']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', 'vector_removal.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ResourceRequirement': {'coresMin': '$(inputs.threads)'}, 'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'vector_removal.py', 'entry': 'import os\\nimport sys\\nimport pandas\\nimport gzip\\nimport datetime\\nfrom Bio import SeqIO\\nfrom Bio.Seq import Seq\\nfrom Bio.SeqRecord import SeqRecord\\nfrom multiprocessing import Pool, Value\\n\\nfasta = sys.argv[1]\\nblast_tsv = sys.argv[2]\\nthreads = int(sys.argv[3])\\nmin_length = int(sys.argv[4])\\n\\nif threads > 1:\\n    threads = threads - 1\\n\\nblast = pandas.read_csv(blast_tsv, sep=\\'\\\\t\\', header=None,\\n                        names=[\\'qseqid\\', \\'sseqid\\', \\'pident\\', \\'length\\', \\'mismatch\\', \\'gapopen\\',\\n                               \\'qlen\\', \\'qstart\\', \\'qend\\', \\'sstart\\', \\'send\\', \\'evalue\\', \\'bitscore\\', \\'score\\'])\\nblast[\\'coverage\\'] = blast[\\'length\\']*100/blast[\\'qlen\\']\\nprint(\\'{} results loaded from Blast\\'.format(len(blast)))\\n\\nfilename, ext = os.path.splitext(os.path.basename(fasta))\\nif ext == \\'.gz\\':\\n    handler = gzip.open(fasta, \\'rt\\')\\n    prefix  =  os.path.splitext(filename)[0]\\nelse:\\n    handler = open(fasta, \\'r\\')\\n    prefix = filename\\n\\ntranscripts = {}\\ncount = 0\\nfor record in SeqIO.parse(handler, \"fasta\"):\\n    count += 1\\n    transcripts[record.id] = record\\n    print(\\'{}\\'.format(count), end=\\'\\\\r\\')\\ntotal = len(transcripts)\\nprint(\\'{} transcripts to process\\'.format(total))\\nhandler.close()\\n\\nfile_prefix = Value(\\'i\\', 0)\\ncounter = Value(\\'i\\', 0)\\nstart_time = datetime.datetime.now()\\n\\ndef chunks(lst, n):\\n    \"\"\"Yield successive n-sized chunks from lst.\"\"\"\\n    for i in range(0, len(lst), n):\\n        yield lst[i:i + n]\\n\\ndef build_seqs(segs, rec):\\n    last = 0\\n    segments_to_build = []\\n    for s in segs:\\n        if s[0] - 1 - last >= 200:\\n            segments_to_build.append([last,s[0] - 1])\\n        last = s[1] + 1\\n    if len(rec.seq) - last >= 200:\\n        segments_to_build.append([last,len(rec.seq)])\\n    return segments_to_build\\n\\ndef terminal_vector(df):\\n    return df[((df[\\'qstart\\'] <= 25) | (df[\\'qend\\'] >= df[\\'qlen\\'] - 25)) & (df[\\'score\\'] >= 19)]\\n\\ndef internal_vector(df):\\n    return df[((df[\\'qstart\\'] > 25) | (df[\\'qend\\'] < df[\\'qlen\\'] - 25)) & (df[\\'score\\'] >= 25)]\\n\\ndef vectors(df):\\n    return pandas.concat([terminal_vector(df), internal_vector(df)])\\n\\ndef build_segments_worker(tlist):\\n    global counter\\n    global total\\n    global file_prefix\\n    with file_prefix.get_lock():\\n        file_prefix.value += 1\\n        pre = file_prefix.value\\n    with open(\\'{}_novect.fsa\\'.format(pre), \"w\") as novect_handle, open(\\'{}_vect.ids\\'.format(pre), \"w\") as vect_handle:\\n        blast_df = blast[blast[\\'qseqid\\'].isin(tlist)]\\n        for t in tlist:\\n            trans = transcripts[t]\\n            trans_len = len(trans.seq)\\n            df = vectors(blast_df[blast_df[\\'qseqid\\'] == t])\\n            if df.empty:\\n                if trans_len >= 200:\\n                    SeqIO.write(trans, novect_handle, \"fasta\")\\n            else:\\n                segs = []\\n                index = 0\\n                last_seg = None\\n                for i, r in df.iterrows():\\n                    if not segs:\\n                        index = 1\\n                        last_seg = [r[\\'qstart\\'], r[\\'qend\\']]\\n                        segs.append(last_seg)\\n                    elif r[\\'qstart\\'] <= last_seg[1] and r[\\'qend\\'] > last_seg[1]:\\n                        last_seg = [last_seg[0], r[\\'qend\\']]\\n                        segs[index - 1] = last_seg\\n                    elif r[\\'qstart\\'] > last_seg[1]:\\n                        index += 1\\n                        last_seg = [r[\\'qstart\\'], r[\\'qend\\']]\\n                        segs.append(last_seg)\\n                segs_to_build = build_seqs(segs, trans)\\n                if segs_to_build:\\n                    for s in segs_to_build:\\n                        id = \\'{}|{}_{}\\'.format(t, s[0], s[1])\\n                        rec = SeqRecord(trans.seq[s[0]:s[1]], id=id, name=id, description=\\'\\')\\n                        SeqIO.write(rec, novect_handle, \"fasta\")\\n                else:\\n                    df = df.sort_values(by=[\\'qseqid\\', \\'coverage\\']).drop_duplicates(subset=\\'qseqid\\', keep=\"last\")\\n                    for i, r in df.iterrows():\\n                        vect_handle.write(\\'{}\\\\t{}\\\\t{}\\\\t{}\\\\t{}\\\\t{}\\\\n\\'.format(r[\\'qseqid\\'],r[\\'sseqid\\'],r[\\'pident\\'],r[\\'evalue\\'],r[\\'bitscore\\'],r[\\'coverage\\']))\\n\\n            with counter.get_lock():\\n                counter.value += 1\\n                value = counter.value\\n                end_time = datetime.datetime.now()\\n                c = end_time - start_time\\n                print(\\'{:3.2f}%\\\\tRemaining: {:5.1f} secs Elapsed: {:5.1f} secs {}\\'.format((value * 100 / total), ((c.seconds * total / value) - c.seconds), c.seconds, 20 * \\' \\'), end=\\'\\\\r\\')\\np = Pool(processes=threads)\\ntranscripts_list = [d for d in list(chunks(list(transcripts.keys()), 1000))]\\ndata = p.map(build_segments_worker, transcripts_list)\\nprint(\\'\\\\n\\\\nPrinting results...\\')\\ncount = 0\\nvect_count = 0\\nwith open(\\'{}_novect.fsa\\'.format(prefix), \"w\") as output_handle, open(\\'{}_vect.ids\\'.format(prefix), \"w\") as vect_handle:\\n    for d in range(1, len(transcripts_list) + 1):\\n        with open(\\'{}_novect.fsa\\'.format(d)) as input_handle:\\n            for r in SeqIO.parse(input_handle, \"fasta\"):\\n                count += 1\\n                SeqIO.write(r, output_handle, \"fasta\")\\n        os.remove(\\'{}_novect.fsa\\'.format(d))\\n        with open(\\'{}_vect.ids\\'.format(d)) as input_handle:\\n            for r in input_handle:\\n                vect_count += 1\\n                vect_handle.write(r)\\n        os.remove(\\'{}_vect.ids\\'.format(d))\\nprint(\\'{} transcripts with no interior vectors\\'.format(count))\\nprint(\\'{} transcripts discarded due to vectors\\'.format(vect_count))\\n'}]}}",
    "cwl_doc": "This tools detect vectors from a Blast TSV file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "vector_removal",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/rseqc/rseqc-FPKM_count.cwl",
    "sha": "ef3211413a5871f6b31cb5df55bec00236f020ec",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/rseqc/rseqc-FPKM_count.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: RSeQC-FPKM_count\ndoc: RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMax: |\n      ${\n          return inputs.ramMax ? inputs.ramMax : 1000\n      }\n\nhints:\n  - $import: rseqc-docker.yml\n  - $import: rseqc-bioconda.yml\n\ninputs:\n  ramMax:\n    type: int?\n    doc: Maximun the RAM in MB\n  out_stdout:\n    type: string\n  out_stderr:\n    type: string\n  inputdir:\n    type: Directory\n  bam:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -i\n      valueFrom: |\n        ${\n          return inputs.inputdir.path + \"/\" + self;\n        }\n  refgene:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: -r\n  outprefix:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: -o\n  strand:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: -d\n  mapq:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -q\n  skip-multi-hits:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: -u\n  only-exonic:\n    type: boolean?\n    inputBinding:\n      position: 6\n      prefix: -e\n  single-read:\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: -s\n\noutputs:\n  out_stdout:\n    type: stdout\n  out_stderr:\n    type: stderr\n  output:\n    type: File[]\n    outputBinding:\n      glob: $(inputs.outprefix)*\n\n\nstdout: $(inputs.out_stdout)\nstderr: $(inputs.out_stderr)\n\nbaseCommand: [FPKM_count.py]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://rseqc.sourceforge.net\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'ramMax': {'type': 'int?', 'doc': 'Maximun the RAM in MB'}, 'out_stdout': {'type': 'string'}, 'out_stderr': {'type': 'string'}, 'inputdir': {'type': 'Directory'}, 'bam': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-i', 'valueFrom': '${\\n  return inputs.inputdir.path + \"/\" + self;\\n}\\n'}}, 'refgene': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-r'}}, 'outprefix': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-o'}}, 'strand': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '-d'}}, 'mapq': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-q'}}, 'skip-multi-hits': {'type': 'boolean?', 'inputBinding': {'position': 5, 'prefix': '-u'}}, 'only-exonic': {'type': 'boolean?', 'inputBinding': {'position': 6, 'prefix': '-e'}}, 'single-read': {'type': 'int?', 'inputBinding': {'position': 7, 'prefix': '-s'}}}",
    "cwl_outputs": "{'out_stdout': {'type': 'stdout'}, 'out_stderr': {'type': 'stderr'}, 'output': {'type': 'File[]', 'outputBinding': {'glob': '$(inputs.outprefix)*'}}}",
    "cwl_hints": "[{'$import': 'rseqc-docker.yml'}, {'$import': 'rseqc-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['FPKM_count.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMax': '${\\n    return inputs.ramMax ? inputs.ramMax : 1000\\n}\\n'}}",
    "cwl_doc": "RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data",
    "cwl_stdout": "$(inputs.out_stdout)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RSeQC-FPKM_count",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://rseqc.sourceforge.net",
    "cwl_s:about": null,
    "cwl_stderr": "$(inputs.out_stderr)",
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/rseqc/rseqc-bam_stat.cwl",
    "sha": "ca4ac367c93d9325488bfa5e5fce9baa5cb8e3f4",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/rseqc/rseqc-bam_stat.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: RSeQC-bam_stat\ndoc: RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMax: |\n      ${\n          return inputs.ramMax ? inputs.ramMax : 1000\n      }\n\nhints:\n  - $import: rseqc-docker.yml\n  - $import: rseqc-bioconda.yml\n\ninputs:\n  ramMax:\n    type: int?\n    doc: Maximun the RAM in MB\n  o:\n    type: string\n  i:\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n      position: 1\n      prefix: -i\n  q:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: -q\n\noutputs:\n  output:\n    type: stdout\n\nstdout: $(inputs.o)\n\nbaseCommand: [bam_stat.py]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://rseqc.sourceforge.net\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'ramMax': {'type': 'int?', 'doc': 'Maximun the RAM in MB'}, 'o': {'type': 'string'}, 'i': {'type': 'File', 'secondaryFiles': '.bai', 'inputBinding': {'position': 1, 'prefix': '-i'}}, 'q': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '-q'}}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'rseqc-docker.yml'}, {'$import': 'rseqc-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bam_stat.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMax': '${\\n    return inputs.ramMax ? inputs.ramMax : 1000\\n}\\n'}}",
    "cwl_doc": "RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data",
    "cwl_stdout": "$(inputs.o)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RSeQC-bam_stat",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://rseqc.sourceforge.net",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/rseqc/rseqc-geneBody_coverage.cwl",
    "sha": "5071029130b5b188213f8381730bd74cb0a441be",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/rseqc/rseqc-geneBody_coverage.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: RSeQC-geneBody_coverage\ndoc: RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data\n\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMax: |\n      ${\n          return inputs.ramMax ? inputs.ramMax : 1000\n      }\n\nhints:\n  - $import: rseqc-docker.yml\n  - $import: rseqc-bioconda.yml\n\ninputs:\n  ramMax:\n    type: int?\n    doc: Maximun the RAM in MB\n  input-file:\n    type: File[]?\n    inputBinding:\n      position: 1\n      prefix: -i\n  input-dir:\n    type: Directory?\n    inputBinding:\n      position: 1\n      prefix: -i\n  r:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: -r\n  l:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -l\n  f:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: -f\n  o:\n    type: string\n    inputBinding:\n      position: 5\n      prefix: -o\n\n\noutputs:\n  out_stdout:\n    type: stdout\n  out_stderr:\n    type: stderr\n  output:\n    type: File[]\n    outputBinding:\n      glob: $(inputs.o)*\n\nbaseCommand: [geneBody_coverage.py]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://rseqc.sourceforge.net\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'ramMax': {'type': 'int?', 'doc': 'Maximun the RAM in MB'}, 'input-file': {'type': 'File[]?', 'inputBinding': {'position': 1, 'prefix': '-i'}}, 'input-dir': {'type': 'Directory?', 'inputBinding': {'position': 1, 'prefix': '-i'}}, 'r': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-r'}}, 'l': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-l'}}, 'f': {'type': 'string?', 'inputBinding': {'position': 4, 'prefix': '-f'}}, 'o': {'type': 'string', 'inputBinding': {'position': 5, 'prefix': '-o'}}}",
    "cwl_outputs": "{'out_stdout': {'type': 'stdout'}, 'out_stderr': {'type': 'stderr'}, 'output': {'type': 'File[]', 'outputBinding': {'glob': '$(inputs.o)*'}}}",
    "cwl_hints": "[{'$import': 'rseqc-docker.yml'}, {'$import': 'rseqc-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['geneBody_coverage.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMax': '${\\n    return inputs.ramMax ? inputs.ramMax : 1000\\n}\\n'}}",
    "cwl_doc": "RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RSeQC-geneBody_coverage",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://rseqc.sourceforge.net",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/rseqc/rseqc-infer_experiment.cwl",
    "sha": "f0fe32be8521eb490fb8c1d08c3359d1786dbfe7",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/rseqc/rseqc-infer_experiment.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: RSeQC-infer_experiment\ndoc: RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMax: |\n      ${\n          return inputs.ramMax ? inputs.ramMax : 1000\n      }\n\nhints:\n  - $import: rseqc-docker.yml\n  - $import: rseqc-bioconda.yml\n\ninputs:\n  ramMax:\n    type: int?\n    doc: Maximun the RAM in MB\n  o:\n    type: string\n  i:\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n      position: 1\n      prefix: -i\n  r:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: -r\n  s:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -s\n  q:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -q\n\n\noutputs:\n  output:\n    type: stdout\n\nstdout: $(inputs.o)\n\nbaseCommand: [infer_experiment.py]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://rseqc.sourceforge.net\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'ramMax': {'type': 'int?', 'doc': 'Maximun the RAM in MB'}, 'o': {'type': 'string'}, 'i': {'type': 'File', 'secondaryFiles': '.bai', 'inputBinding': {'position': 1, 'prefix': '-i'}}, 'r': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-r'}}, 's': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-s'}}, 'q': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-q'}}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'rseqc-docker.yml'}, {'$import': 'rseqc-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['infer_experiment.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMax': '${\\n    return inputs.ramMax ? inputs.ramMax : 1000\\n}\\n'}}",
    "cwl_doc": "RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data",
    "cwl_stdout": "$(inputs.o)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RSeQC-infer_experiment",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://rseqc.sourceforge.net",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/rseqc/rseqc-junction_annotation.cwl",
    "sha": "be393f2ac37a61ef3b8f210341e23449aedbf3d8",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/rseqc/rseqc-junction_annotation.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: RSeQC-junction_annotation\ndoc: RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMax: |\n      ${\n          return inputs.ramMax ? inputs.ramMax : 1000\n      }\n\nhints:\n  - $import: rseqc-docker.yml\n  - $import: rseqc-bioconda.yml\n\ninputs:\n  ramMax:\n    type: int?\n    doc: Maximun the RAM in MB\n  i:\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n      position: 1\n      prefix: -i\n  r:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: -r\n  m:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -m\n  q:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -q\n  o:\n    type: string\n    inputBinding:\n      position: 5\n      prefix: -o\n\noutputs:\n  bed:\n    type: File\n    outputBinding:\n      glob: $(inputs.o).junction.bed\n  xls:\n    type: File\n    outputBinding:\n      glob: $(inputs.o).junction.xls\n  pdf:\n    type: File[]\n    outputBinding:\n      glob: $(inputs.o)*.pdf\n\nbaseCommand: [junction_annotation.py]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://rseqc.sourceforge.net\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'ramMax': {'type': 'int?', 'doc': 'Maximun the RAM in MB'}, 'i': {'type': 'File', 'secondaryFiles': '.bai', 'inputBinding': {'position': 1, 'prefix': '-i'}}, 'r': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-r'}}, 'm': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-m'}}, 'q': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-q'}}, 'o': {'type': 'string', 'inputBinding': {'position': 5, 'prefix': '-o'}}}",
    "cwl_outputs": "{'bed': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o).junction.bed'}}, 'xls': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o).junction.xls'}}, 'pdf': {'type': 'File[]', 'outputBinding': {'glob': '$(inputs.o)*.pdf'}}}",
    "cwl_hints": "[{'$import': 'rseqc-docker.yml'}, {'$import': 'rseqc-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['junction_annotation.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMax': '${\\n    return inputs.ramMax ? inputs.ramMax : 1000\\n}\\n'}}",
    "cwl_doc": "RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RSeQC-junction_annotation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://rseqc.sourceforge.net",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/rseqc/rseqc-junction_saturation.cwl",
    "sha": "da26de0552b78a5c2b1f574ac0084c227b8e59f8",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/rseqc/rseqc-junction_saturation.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: RSeQC-junction_saturation\ndoc: RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMax: |\n      ${\n          return inputs.ramMax ? inputs.ramMax : 1000\n      }\n\nhints:\n  - $import: rseqc-docker.yml\n  - $import: rseqc-bioconda.yml\n\ninputs:\n  ramMax:\n    type: int?\n    doc: Maximun the RAM in MB\n  i:\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n      position: 1\n      prefix: -i\n  r:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: -r\n  o:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: -o\n  l:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -l\n  q:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -q\n  u:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: -u\n  s:\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: -s\n  m:\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: -m\n  v:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: -v\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o).junctionSaturation_plot.pdf\n\nbaseCommand: [junction_saturation.py]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://rseqc.sourceforge.net\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'ramMax': {'type': 'int?', 'doc': 'Maximun the RAM in MB'}, 'i': {'type': 'File', 'secondaryFiles': '.bai', 'inputBinding': {'position': 1, 'prefix': '-i'}}, 'r': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-r'}}, 'o': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-o'}}, 'l': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-l'}}, 'q': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-q'}}, 'u': {'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '-u'}}, 's': {'type': 'int?', 'inputBinding': {'position': 6, 'prefix': '-s'}}, 'm': {'type': 'int?', 'inputBinding': {'position': 7, 'prefix': '-m'}}, 'v': {'type': 'int?', 'inputBinding': {'position': 8, 'prefix': '-v'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o).junctionSaturation_plot.pdf'}}}",
    "cwl_hints": "[{'$import': 'rseqc-docker.yml'}, {'$import': 'rseqc-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['junction_saturation.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMax': '${\\n    return inputs.ramMax ? inputs.ramMax : 1000\\n}\\n'}}",
    "cwl_doc": "RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RSeQC-junction_saturation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://rseqc.sourceforge.net",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/rseqc/rseqc-read_distribution.cwl",
    "sha": "05b908376561440301a9aa169fc5a2e6e8147a2c",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/rseqc/rseqc-read_distribution.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: RSeQC-read_distribution\ndoc: RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMax: |\n      ${\n          return inputs.ramMax ? inputs.ramMax : 1000\n      }\n\nhints:\n  - $import: rseqc-docker.yml\n  - $import: rseqc-bioconda.yml\n\ninputs:\n  ramMax:\n    type: int?\n    doc: Maximun the RAM in MB\n  o:\n    type: string\n  i:\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n      position: 1\n      prefix: -i\n  r:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: -r\n\noutputs:\n  output:\n    type: stdout\n\nstdout: $(inputs.o)\n\nbaseCommand: [read_distribution.py]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://rseqc.sourceforge.net\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'ramMax': {'type': 'int?', 'doc': 'Maximun the RAM in MB'}, 'o': {'type': 'string'}, 'i': {'type': 'File', 'secondaryFiles': '.bai', 'inputBinding': {'position': 1, 'prefix': '-i'}}, 'r': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-r'}}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": "[{'$import': 'rseqc-docker.yml'}, {'$import': 'rseqc-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['read_distribution.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMax': '${\\n    return inputs.ramMax ? inputs.ramMax : 1000\\n}\\n'}}",
    "cwl_doc": "RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data",
    "cwl_stdout": "$(inputs.o)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RSeQC-read_distribution",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://rseqc.sourceforge.net",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/rseqc/rseqc-read_quality.cwl",
    "sha": "249e5ee5eb49b8f8de3f65429ca51380235d1340",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/rseqc/rseqc-read_quality.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: RSeQC-read_quality\ndoc: RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMax: |\n      ${\n          return inputs.ramMax ? inputs.ramMax : 18000\n      }\n\nhints:\n  - $import: rseqc-docker.yml\n  - $import: rseqc-bioconda.yml\n\ninputs:\n  ramMax:\n    type: int?\n    doc: Maximun the RAM in MB\n  i:\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n      position: 1\n      prefix: -i\n  o:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -o\n  r:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -r\n  q:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -q\n\noutputs:\n  output:\n    type: File[]\n    outputBinding:\n      glob: $(inputs.o)*.pdf\n\nbaseCommand: [read_quality.py]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: http://rseqc.sourceforge.net\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'ramMax': {'type': 'int?', 'doc': 'Maximun the RAM in MB'}, 'i': {'type': 'File', 'secondaryFiles': '.bai', 'inputBinding': {'position': 1, 'prefix': '-i'}}, 'o': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-o'}}, 'r': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-r'}}, 'q': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '-q'}}}",
    "cwl_outputs": "{'output': {'type': 'File[]', 'outputBinding': {'glob': '$(inputs.o)*.pdf'}}}",
    "cwl_hints": "[{'$import': 'rseqc-docker.yml'}, {'$import': 'rseqc-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['read_quality.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMax': '${\\n    return inputs.ramMax ? inputs.ramMax : 18000\\n}\\n'}}",
    "cwl_doc": "RSeQC package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RSeQC-read_quality",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "http://rseqc.sourceforge.net",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/samtools/samtools-depth.cwl",
    "sha": "7111f480eb92af8541284d6843045f8114314703",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/samtools/samtools-depth.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Samtools-depth\ndoc: Samtools is a suite of programs for interacting with high-throughput sequencing data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: samtools-docker.yml\n  - $import: samtools-bioconda.yml\n\ninputs:\n  o:\n    type: string\n  a:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -a\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n\nstdout: $(inputs.o)\n\nbaseCommand: [samtools, depth]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'o': {'type': 'string'}, 'a': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-a'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}}",
    "cwl_hints": "[{'$import': 'samtools-docker.yml'}, {'$import': 'samtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'depth']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Samtools is a suite of programs for interacting with high-throughput sequencing data",
    "cwl_stdout": "$(inputs.o)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Samtools-depth",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/samtools/samtools-faidx.cwl",
    "sha": "f8e18155402a0b8e11e49504b8c441e90be34650",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/samtools/samtools-faidx.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Samtools-faidx\ndoc: Samtools is a suite of programs for interacting with high-throughput sequencing data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.input)\n\nhints:\n  - $import: samtools-docker.yml\n  - $import: samtools-bioconda.yml\n\ninputs:\n  o:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -o\n    doc: |\n      Write FASTA to file.\n  n:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -n\n    doc: |\n      Length of FASTA sequence line. [60]\n  c:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -c\n    doc: |\n      Continue after trying to retrieve missing region.\n  r:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -r\n    doc: |\n      File of regions.  Format is chr:from-to. One per line.\n  i:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -i\n    doc: |\n      Reverse complement sequences.\n  f:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -f\n    doc: |\n      File and index in FASTQ format.\n  mark_strand:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --mark-strand\n    doc: |\n      Add strand indicator to sequence name\n          TYPE = rc   for /rc on negative strand (default)\n                 no   for no strand indicator\n                 sign for (+) / (-)\n                 custom,<pos>,<neg> for custom indicator\n  input:\n    type: File\n    inputBinding:\n      position: 2\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n\nbaseCommand: [samtools, faidx]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'o': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-o'}, 'doc': 'Write FASTA to file.\\n'}, 'n': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-n'}, 'doc': 'Length of FASTA sequence line. [60]\\n'}, 'c': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-c'}, 'doc': 'Continue after trying to retrieve missing region.\\n'}, 'r': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-r'}, 'doc': 'File of regions.  Format is chr:from-to. One per line.\\n'}, 'i': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-i'}, 'doc': 'Reverse complement sequences.\\n'}, 'f': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-f'}, 'doc': 'File and index in FASTQ format.\\n'}, 'mark_strand': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--mark-strand'}, 'doc': 'Add strand indicator to sequence name\\n    TYPE = rc   for /rc on negative strand (default)\\n           no   for no strand indicator\\n           sign for (+) / (-)\\n           custom,<pos>,<neg> for custom indicator\\n'}, 'input': {'type': 'File', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}}",
    "cwl_hints": "[{'$import': 'samtools-docker.yml'}, {'$import': 'samtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'faidx']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.input)']}}",
    "cwl_doc": "Samtools is a suite of programs for interacting with high-throughput sequencing data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Samtools-faidx",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/samtools/samtools-fastq.cwl",
    "sha": "81ee4c5b290f3322cdcb72fad059743239a93747",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/samtools/samtools-fastq.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Samtools-fastq\ndoc: Samtools is a suite of programs for interacting with high-throughput sequencing data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: samtools-docker.yml\n  - $import: samtools-bioconda.yml\n\ninputs:\n  threads:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: --threads\n  F:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: -F\n  f:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -f\n  input_fmt_option:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: --input-fmt-option\n  forward:\n    type: string\n    inputBinding:\n      position: 5\n      prefix: \"-1\"\n  reverse:\n    type: string?\n    inputBinding:\n      position: 6\n      prefix: \"-2\"\n  in_bam:\n    type: File\n    inputBinding:\n      position: 7\n\noutputs:\n  forward_out:\n    type: File\n    outputBinding:\n      glob: $(inputs.forward)\n  reverse_out:\n    type: File?\n    outputBinding:\n      glob: $(inputs.reverse)\n\nbaseCommand: [samtools, fastq]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'threads': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--threads'}}, 'F': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '-F'}}, 'f': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-f'}}, 'input_fmt_option': {'type': 'string?', 'inputBinding': {'position': 4, 'prefix': '--input-fmt-option'}}, 'forward': {'type': 'string', 'inputBinding': {'position': 5, 'prefix': '-1'}}, 'reverse': {'type': 'string?', 'inputBinding': {'position': 6, 'prefix': '-2'}}, 'in_bam': {'type': 'File', 'inputBinding': {'position': 7}}}",
    "cwl_outputs": "{'forward_out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.forward)'}}, 'reverse_out': {'type': 'File?', 'outputBinding': {'glob': '$(inputs.reverse)'}}}",
    "cwl_hints": "[{'$import': 'samtools-docker.yml'}, {'$import': 'samtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'fastq']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Samtools is a suite of programs for interacting with high-throughput sequencing data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Samtools-fastq",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/samtools/samtools-fixmate.cwl",
    "sha": "c497da29f55f1bb86740cc58a016fb4eb477f203",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/samtools/samtools-fixmate.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Samtools-fixmate\ndoc: Samtools is a suite of programs for interacting with high-throughput sequencing data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n\nhints:\n  - $import: samtools-docker.yml\n  - $import: samtools-bioconda.yml\n\ninputs:\n  threads:\n    type: int\n    inputBinding:\n      prefix: --threads\n      position: 1\n  out_bam:\n    type: string\n    inputBinding:\n      position: 3\n  in_bam:\n    type: File\n    inputBinding:\n      position: 2\n  r:\n    type: boolean?\n    inputBinding:\n      prefix: -r\n      position: 1\n  p:\n    type: boolean?\n    inputBinding:\n      prefix: -p\n      position: 1\n  m:\n    type: boolean?\n    inputBinding:\n      prefix: -m\n      position: 1\n\noutputs:\n  out:\n    type: File\n    outputBinding:\n      glob: $(inputs.out_bam)\n\nbaseCommand: [samtools, fixmate]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'threads': {'type': 'int', 'inputBinding': {'prefix': '--threads', 'position': 1}}, 'out_bam': {'type': 'string', 'inputBinding': {'position': 3}}, 'in_bam': {'type': 'File', 'inputBinding': {'position': 2}}, 'r': {'type': 'boolean?', 'inputBinding': {'prefix': '-r', 'position': 1}}, 'p': {'type': 'boolean?', 'inputBinding': {'prefix': '-p', 'position': 1}}, 'm': {'type': 'boolean?', 'inputBinding': {'prefix': '-m', 'position': 1}}}",
    "cwl_outputs": "{'out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out_bam)'}}}",
    "cwl_hints": "[{'$import': 'samtools-docker.yml'}, {'$import': 'samtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'fixmate']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.threads)'}}",
    "cwl_doc": "Samtools is a suite of programs for interacting with high-throughput sequencing data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Samtools-fixmate",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/samtools/samtools-flagstat.cwl",
    "sha": "8e8f33ed8d0911e846c5eaac46c32e5c3556a139",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/samtools/samtools-flagstat.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Samtools-flagstat\ndoc: Samtools is a suite of programs for interacting with high-throughput sequencing data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: samtools-docker.yml\n  - $import: samtools-bioconda.yml\n\ninputs:\n  stdout:\n    type: string\n  in_bam:\n    type: File\n    inputBinding:\n      position: 1\n\noutputs:\n  out_stdout:\n    type: File\n    outputBinding:\n      glob: $(inputs.stdout)\n\nstdout: $(inputs.stdout)\n\nbaseCommand: [samtools, flagstat]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'stdout': {'type': 'string'}, 'in_bam': {'type': 'File', 'inputBinding': {'position': 1}}}",
    "cwl_outputs": "{'out_stdout': {'type': 'File', 'outputBinding': {'glob': '$(inputs.stdout)'}}}",
    "cwl_hints": "[{'$import': 'samtools-docker.yml'}, {'$import': 'samtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'flagstat']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Samtools is a suite of programs for interacting with high-throughput sequencing data",
    "cwl_stdout": "$(inputs.stdout)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Samtools-flagstat",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/samtools/samtools-index-bam.cwl",
    "sha": "9ae895c804d67c964855f41e0786149d035eb4ef",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/samtools/samtools-index-bam.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Samtools-index-bam\ndoc: Samtools is a suite of programs for interacting with high-throughput sequencing data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.bam)\n\nhints:\n  - $import: samtools-docker.yml\n  - $import: samtools-bioconda.yml\n\ninputs:\n  bam:\n    type: File\n    inputBinding:\n      position: 1\n\noutputs:\n  indexed_bam:\n    type: File\n    secondaryFiles: .bai\n    outputBinding:\n      glob: $(inputs.bam.basename)\n\nbaseCommand: [samtools, index, -b]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam': {'type': 'File', 'inputBinding': {'position': 1}}}",
    "cwl_outputs": "{'indexed_bam': {'type': 'File', 'secondaryFiles': '.bai', 'outputBinding': {'glob': '$(inputs.bam.basename)'}}}",
    "cwl_hints": "[{'$import': 'samtools-docker.yml'}, {'$import': 'samtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'index', '-b']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.bam)']}}",
    "cwl_doc": "Samtools is a suite of programs for interacting with high-throughput sequencing data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Samtools-index-bam",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/samtools/samtools-index.cwl",
    "sha": "1f7e92e6c395e6b121b2755f7b5636d7df6923b7",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/samtools/samtools-index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Samtools-index\ndoc: Samtools is a suite of programs for interacting with high-throughput sequencing data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.in_bam)\n\nhints:\n  - $import: samtools-docker.yml\n  - $import: samtools-bioconda.yml\n\ninputs:\n  in_bam:\n    type: File\n    inputBinding:\n      position: 1\n\noutputs:\n  out_sam:\n    type: File\n    secondaryFiles: .bai\n    outputBinding:\n      glob: $(inputs.in_bam.basename)\n\nbaseCommand: [samtools, index, -b]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'in_bam': {'type': 'File', 'inputBinding': {'position': 1}}}",
    "cwl_outputs": "{'out_sam': {'type': 'File', 'secondaryFiles': '.bai', 'outputBinding': {'glob': '$(inputs.in_bam.basename)'}}}",
    "cwl_hints": "[{'$import': 'samtools-docker.yml'}, {'$import': 'samtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'index', '-b']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.in_bam)']}}",
    "cwl_doc": "Samtools is a suite of programs for interacting with high-throughput sequencing data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Samtools-index",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/samtools/samtools-merge.cwl",
    "sha": "067bf1c8534c0e266d267682f870403d9b623343",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/samtools/samtools-merge.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Samtools-merge\ndoc: Samtools is a suite of programs for interacting with high-throughput sequencing data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ShellCommandRequirement: {}\n\nhints:\n  - $import: samtools-docker.yml\n  - $import: samtools-bioconda.yml\n\ninputs:\n  out_bam:\n    type: string\n    inputBinding:\n      position: 1\n  in_bam:\n    type: File[]\n    inputBinding:\n      position: 2\n      separate: true\n      itemSeparator: \" \"\n      shellQuote: false\n\noutputs:\n  out_sam:\n    type: File\n    outputBinding:\n      glob: $(inputs.out_bam)\n\nbaseCommand: [samtools, merge]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'out_bam': {'type': 'string', 'inputBinding': {'position': 1}}, 'in_bam': {'type': 'File[]', 'inputBinding': {'position': 2, 'separate': True, 'itemSeparator': ' ', 'shellQuote': False}}}",
    "cwl_outputs": "{'out_sam': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out_bam)'}}}",
    "cwl_hints": "[{'$import': 'samtools-docker.yml'}, {'$import': 'samtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'merge']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ShellCommandRequirement': {}}",
    "cwl_doc": "Samtools is a suite of programs for interacting with high-throughput sequencing data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Samtools-merge",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/samtools/samtools-sort.cwl",
    "sha": "bb099a9f9061c77b4b771d1ff96cf2fdfbb0e891",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/samtools/samtools-sort.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Samtools-sort\ndoc: Samtools is a suite of programs for interacting with high-throughput sequencing data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n\nhints:\n  - $import: samtools-docker.yml\n  - $import: samtools-bioconda.yml\n\ninputs:\n  threads:\n    type: int\n    inputBinding:\n      prefix: --threads\n      position: 1\n  out_bam:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -o\n  in_bam:\n    type: File\n    inputBinding:\n      position: 3\n  n:\n    type: boolean?\n    inputBinding:\n      prefix: -n\n      position: 1\n\noutputs:\n  out_sam:\n    type: File\n    outputBinding:\n      glob: $(inputs.out_bam)\n\nbaseCommand: [samtools, sort]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'threads': {'type': 'int', 'inputBinding': {'prefix': '--threads', 'position': 1}}, 'out_bam': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-o'}}, 'in_bam': {'type': 'File', 'inputBinding': {'position': 3}}, 'n': {'type': 'boolean?', 'inputBinding': {'prefix': '-n', 'position': 1}}}",
    "cwl_outputs": "{'out_sam': {'type': 'File', 'outputBinding': {'glob': '$(inputs.out_bam)'}}}",
    "cwl_hints": "[{'$import': 'samtools-docker.yml'}, {'$import': 'samtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'sort']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.threads)'}}",
    "cwl_doc": "Samtools is a suite of programs for interacting with high-throughput sequencing data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Samtools-sort",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/samtools/samtools-stats.cwl",
    "sha": "9c9ccf260330fa71ea1372c3e85867438db321b1",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/samtools/samtools-stats.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: Samtools-stats\ndoc: >-\n  Samtools is a suite of programs for interacting with high-throughput\n  sequencing data\n\nrequirements:\n  - class: InlineJavascriptRequirement\n\nhints:\n  - $import: samtools-docker.yml\n  - $import: samtools-bioconda.yml\n\ninputs:\n  - id: in_bam\n    type: File\n    inputBinding:\n      position: 1\n  - id: stdout\n    type: string\noutputs:\n  - id: out_stdout\n    type: File\n    outputBinding:\n      glob: $(inputs.stdout)\n\nstdout: $(inputs.stdout)\n\nbaseCommand:\n  - samtools\n  - stats\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'in_bam', 'type': 'File', 'inputBinding': {'position': 1}}, {'id': 'stdout', 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'out_stdout', 'type': 'File', 'outputBinding': {'glob': '$(inputs.stdout)'}}]",
    "cwl_hints": "[{'$import': 'samtools-docker.yml'}, {'$import': 'samtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'stats']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Samtools is a suite of programs for interacting with high-throughput sequencing data",
    "cwl_stdout": "$(inputs.stdout)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Samtools-stats",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "tools/samtools/samtools-view-indexed.cwl",
    "sha": "bcf1c8b26040f3697231a72be2c5e52725fd9e2a",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/samtools/samtools-view-indexed.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Samtools-view\ndoc: Samtools is a suite of programs for interacting with high-throughput sequencing data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n\nhints:\n  - $import: samtools-docker.yml\n  - $import: samtools-bioconda.yml\n\ninputs:\n  isbam:\n    type: boolean\n    default: false\n    inputBinding:\n      position: 2\n      prefix: -b\n    doc: |\n      output in BAM format\n  readswithoutbits:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -F\n    doc: |\n      only include reads with none of the bits set in INT set in FLAG [0]\n  collapsecigar:\n    type: boolean?\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -B\n    doc: |\n      collapse the backward CIGAR operation\n  readsingroup:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -r\n    doc: |\n      only include reads in read group STR [null]\n  bedoverlap:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -L\n    doc: |\n      only include reads overlapping this BED FILE [null]\n  uncompressed:\n    type: boolean?\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -u\n    doc: |\n      uncompressed BAM output (implies -b)\n  readtagtostrip:\n    type: string[]?\n    inputBinding:\n      position: 1\n\n    doc: |\n      read tag to strip (repeatable) [null]\n  input:\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n      position: 4\n    doc: |\n      Input bam file.\n  readsquality:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -q\n    doc: |\n      only include reads with mapping quality >= INT [0]\n  readswithbits:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -f\n    doc: |\n      only include reads with all bits set in INT set in FLAG [0]\n  cigar:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -m\n    doc: |\n      only include reads with number of CIGAR operations\n      consuming query sequence >= INT [0]\n  iscram:\n    type: boolean?\n    default: false\n    inputBinding:\n      position: 2\n      prefix: -C\n    doc: |\n      output in CRAM format\n  threads:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -@\n    doc: |\n      number of BAM compression threads [0]\n  fastcompression:\n    type: boolean?\n    default: false\n    inputBinding:\n      position: 1\n      prefix: '-1'\n    doc: |\n      use fast BAM compression (implies -b)\n  samheader:\n    type: boolean?\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -h\n    doc: |\n      include header in SAM output\n  count:\n    type: boolean?\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -c\n    doc: |\n      print only the count of matching records\n  randomseed:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -s\n    doc: |\n      integer part sets seed of random number generator [0];\n      rest sets fraction of templates to subsample [no subsampling]\n  referencefasta:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -T\n    doc: |\n      reference sequence FASTA FILE [null]\n  region:\n    type: string?\n    inputBinding:\n      position: 5\n    doc: |\n      [region ...]\n  readsingroupfile:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -R\n    doc: |\n      only include reads with read group listed in FILE [null]\n  readsinlibrary:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -l\n    doc: |\n      only include reads in library STR [null]\n  output_name:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -o\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.output_name)\n\nbaseCommand: [samtools, view]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'isbam': {'type': 'boolean', 'default': False, 'inputBinding': {'position': 2, 'prefix': '-b'}, 'doc': 'output in BAM format\\n'}, 'readswithoutbits': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-F'}, 'doc': 'only include reads with none of the bits set in INT set in FLAG [0]\\n'}, 'collapsecigar': {'type': 'boolean?', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-B'}, 'doc': 'collapse the backward CIGAR operation\\n'}, 'readsingroup': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-r'}, 'doc': 'only include reads in read group STR [null]\\n'}, 'bedoverlap': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-L'}, 'doc': 'only include reads overlapping this BED FILE [null]\\n'}, 'uncompressed': {'type': 'boolean?', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-u'}, 'doc': 'uncompressed BAM output (implies -b)\\n'}, 'readtagtostrip': {'type': 'string[]?', 'inputBinding': {'position': 1}, 'doc': 'read tag to strip (repeatable) [null]\\n'}, 'input': {'type': 'File', 'secondaryFiles': '.bai', 'inputBinding': {'position': 4}, 'doc': 'Input bam file.\\n'}, 'readsquality': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-q'}, 'doc': 'only include reads with mapping quality >= INT [0]\\n'}, 'readswithbits': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-f'}, 'doc': 'only include reads with all bits set in INT set in FLAG [0]\\n'}, 'cigar': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-m'}, 'doc': 'only include reads with number of CIGAR operations\\nconsuming query sequence >= INT [0]\\n'}, 'iscram': {'type': 'boolean?', 'default': False, 'inputBinding': {'position': 2, 'prefix': '-C'}, 'doc': 'output in CRAM format\\n'}, 'threads': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-@'}, 'doc': 'number of BAM compression threads [0]\\n'}, 'fastcompression': {'type': 'boolean?', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-1'}, 'doc': 'use fast BAM compression (implies -b)\\n'}, 'samheader': {'type': 'boolean?', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-h'}, 'doc': 'include header in SAM output\\n'}, 'count': {'type': 'boolean?', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-c'}, 'doc': 'print only the count of matching records\\n'}, 'randomseed': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-s'}, 'doc': 'integer part sets seed of random number generator [0];\\nrest sets fraction of templates to subsample [no subsampling]\\n'}, 'referencefasta': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-T'}, 'doc': 'reference sequence FASTA FILE [null]\\n'}, 'region': {'type': 'string?', 'inputBinding': {'position': 5}, 'doc': '[region ...]\\n'}, 'readsingroupfile': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-R'}, 'doc': 'only include reads with read group listed in FILE [null]\\n'}, 'readsinlibrary': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-l'}, 'doc': 'only include reads in library STR [null]\\n'}, 'output_name': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-o'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.output_name)'}}}",
    "cwl_hints": "[{'$import': 'samtools-docker.yml'}, {'$import': 'samtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'view']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.threads)'}}",
    "cwl_doc": "Samtools is a suite of programs for interacting with high-throughput sequencing data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Samtools-view",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/samtools/samtools-view.cwl",
    "sha": "5b3dd00d4dd8a598d6bceb96d6fa869893f10dd9",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/samtools/samtools-view.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Samtools-view\ndoc: Samtools is a suite of programs for interacting with high-throughput sequencing data\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n\nhints:\n  - $import: samtools-docker.yml\n  - $import: samtools-bioconda.yml\n\ninputs:\n  S:\n    type: boolean\n    default: false\n    inputBinding:\n      position: 2\n      prefix: -S\n    doc: |\n      input format is auto-detected\n  isbam:\n    type: boolean\n    default: false\n    inputBinding:\n      position: 2\n      prefix: -b\n    doc: |\n      output in BAM format\n  readswithoutbits:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -F\n    doc: |\n      only include reads with none of the bits set in INT set in FLAG [0]\n  collapsecigar:\n    type: boolean?\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -B\n    doc: |\n      collapse the backward CIGAR operation\n  readsingroup:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -r\n    doc: |\n      only include reads in read group STR [null]\n  bedoverlap:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -L\n    doc: |\n      only include reads overlapping this BED FILE [null]\n  uncompressed:\n    type: boolean?\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -u\n    doc: |\n      uncompressed BAM output (implies -b)\n  readtagtostrip:\n    type: string[]?\n    inputBinding:\n      position: 1\n    doc: |\n      read tag to strip (repeatable) [null]\n  input:\n    type: File\n    inputBinding:\n      position: 4\n    doc: |\n      Input bam file.\n  readsquality:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -q\n    doc: |\n      only include reads with mapping quality >= INT [0]\n  readswithbits:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -f\n    doc: |\n      only include reads with all bits set in INT set in FLAG [0]\n  cigar:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -m\n    doc: |\n      only include reads with number of CIGAR operations\n      consuming query sequence >= INT [0]\n  iscram:\n    type: boolean?\n    default: false\n    inputBinding:\n      position: 2\n      prefix: -C\n    doc: |\n      output in CRAM format\n  threads:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -@\n    doc: |\n      number of BAM compression threads [0]\n  fastcompression:\n    type: boolean?\n    default: false\n    inputBinding:\n      position: 1\n      prefix: '-1'\n    doc: |\n      use fast BAM compression (implies -b)\n  samheader:\n    type: boolean?\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -h\n    doc: |\n      include header in SAM output\n  count:\n    type: boolean?\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -c\n    doc: |\n      print only the count of matching records\n  randomseed:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: -s\n    doc: |\n      integer part sets seed of random number generator [0];\n      rest sets fraction of templates to subsample [no subsampling]\n  referencefasta:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -T\n    doc: |\n      reference sequence FASTA FILE [null]\n  region:\n    type: string?\n    inputBinding:\n      position: 5\n    doc: |\n      [region ...]\n  readsingroupfile:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -R\n    doc: |\n      only include reads with read group listed in FILE [null]\n  readsinlibrary:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -l\n    doc: |\n      only include reads in library STR [null]\n  output_name:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -o\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.output_name)\n\nbaseCommand: [samtools, view]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'S': {'type': 'boolean', 'default': False, 'inputBinding': {'position': 2, 'prefix': '-S'}, 'doc': 'input format is auto-detected\\n'}, 'isbam': {'type': 'boolean', 'default': False, 'inputBinding': {'position': 2, 'prefix': '-b'}, 'doc': 'output in BAM format\\n'}, 'readswithoutbits': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-F'}, 'doc': 'only include reads with none of the bits set in INT set in FLAG [0]\\n'}, 'collapsecigar': {'type': 'boolean?', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-B'}, 'doc': 'collapse the backward CIGAR operation\\n'}, 'readsingroup': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-r'}, 'doc': 'only include reads in read group STR [null]\\n'}, 'bedoverlap': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-L'}, 'doc': 'only include reads overlapping this BED FILE [null]\\n'}, 'uncompressed': {'type': 'boolean?', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-u'}, 'doc': 'uncompressed BAM output (implies -b)\\n'}, 'readtagtostrip': {'type': 'string[]?', 'inputBinding': {'position': 1}, 'doc': 'read tag to strip (repeatable) [null]\\n'}, 'input': {'type': 'File', 'inputBinding': {'position': 4}, 'doc': 'Input bam file.\\n'}, 'readsquality': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-q'}, 'doc': 'only include reads with mapping quality >= INT [0]\\n'}, 'readswithbits': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-f'}, 'doc': 'only include reads with all bits set in INT set in FLAG [0]\\n'}, 'cigar': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-m'}, 'doc': 'only include reads with number of CIGAR operations\\nconsuming query sequence >= INT [0]\\n'}, 'iscram': {'type': 'boolean?', 'default': False, 'inputBinding': {'position': 2, 'prefix': '-C'}, 'doc': 'output in CRAM format\\n'}, 'threads': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-@'}, 'doc': 'number of BAM compression threads [0]\\n'}, 'fastcompression': {'type': 'boolean?', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-1'}, 'doc': 'use fast BAM compression (implies -b)\\n'}, 'samheader': {'type': 'boolean?', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-h'}, 'doc': 'include header in SAM output\\n'}, 'count': {'type': 'boolean?', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-c'}, 'doc': 'print only the count of matching records\\n'}, 'randomseed': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '-s'}, 'doc': 'integer part sets seed of random number generator [0];\\nrest sets fraction of templates to subsample [no subsampling]\\n'}, 'referencefasta': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-T'}, 'doc': 'reference sequence FASTA FILE [null]\\n'}, 'region': {'type': 'string?', 'inputBinding': {'position': 5}, 'doc': '[region ...]\\n'}, 'readsingroupfile': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-R'}, 'doc': 'only include reads with read group listed in FILE [null]\\n'}, 'readsinlibrary': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-l'}, 'doc': 'only include reads in library STR [null]\\n'}, 'output_name': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-o'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.output_name)'}}}",
    "cwl_hints": "[{'$import': 'samtools-docker.yml'}, {'$import': 'samtools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'view']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.threads)'}}",
    "cwl_doc": "Samtools is a suite of programs for interacting with high-throughput sequencing data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Samtools-view",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/sra-tools/fasterq-dump.cwl",
    "sha": "e4b446f321e1470af6f6682bed9f8ef09fb273ce",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/sra-tools/fasterq-dump.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: fasterq_dump\nlabel: fasterq_dump\ndoc: Faster Fastq-dump from SRA database\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.ncbi_config)\n\nhints:\n  - $import: sra-tools-docker.yml\n  - $import: sra-tools-bioconda.yml\n\ninputs:\n  ncbi_config:\n    type: Directory\n  accession:\n    type: string\n    inputBinding:\n      position: 2\n  S:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -S\n  e:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -e\n\noutputs:\n  output:\n    type: 'File[]'\n    outputBinding:\n      glob: $(inputs.accession)*\n\nbaseCommand: [\"fasterq-dump\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf",
    "cwl_class": "CommandLineTool",
    "cwl_id": "fasterq_dump",
    "cwl_inputs": "{'ncbi_config': {'type': 'Directory'}, 'accession': {'type': 'string', 'inputBinding': {'position': 2}}, 'S': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-S'}}, 'e': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-e'}}}",
    "cwl_outputs": "{'output': {'type': 'File[]', 'outputBinding': {'glob': '$(inputs.accession)*'}}}",
    "cwl_hints": "[{'$import': 'sra-tools-docker.yml'}, {'$import': 'sra-tools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fasterq-dump']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.ncbi_config)']}}",
    "cwl_doc": "Faster Fastq-dump from SRA database",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "fasterq_dump",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/sra-tools/fastq-dump.cwl",
    "sha": "e0a9b0e85615ae6c3da4ea2b163e6a999f2f2048",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/sra-tools/fastq-dump.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: fastq_dump\nlabel: fastq-dump\ndoc: Fastq-dump from SRA database\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.ncbi_config)\n\nhints:\n  - $import: sra-tools-docker.yml\n  - $import: sra-tools-bioconda.yml\n\ninputs:\n  - id: ncbi_config\n    type: Directory\n  - id: fasta\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: '--fasta'\n    label: fasta\n    doc: 'FASTA only, no qualities'\n  - id: accession\n    type: string\n    inputBinding:\n      position: 2\n    label: accession\n    doc: SRA accession ID\n  - id: gzip\n    type: boolean?\n    inputBinding:\n      position: 0\n      prefix: '--gzip'\n  - id: split-files\n    type: boolean?\n    inputBinding:\n      position: 0\n      prefix: '--split-files'\n  - id: X\n    type: int?\n    inputBinding:\n      position: 0\n      prefix: '-X'\n  - id: aligned\n    type: boolean?\n    inputBinding:\n      position: 0\n      prefix: '--aligned'\noutputs:\n  - id: output\n    type: 'File[]'\n    outputBinding:\n      glob: $(inputs.accession)*\n\nbaseCommand:\n  - fastq-dump\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "fastq_dump",
    "cwl_inputs": "[{'id': 'ncbi_config', 'type': 'Directory'}, {'id': 'fasta', 'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--fasta'}, 'label': 'fasta', 'doc': 'FASTA only, no qualities'}, {'id': 'accession', 'type': 'string', 'inputBinding': {'position': 2}, 'label': 'accession', 'doc': 'SRA accession ID'}, {'id': 'gzip', 'type': 'boolean?', 'inputBinding': {'position': 0, 'prefix': '--gzip'}}, {'id': 'split-files', 'type': 'boolean?', 'inputBinding': {'position': 0, 'prefix': '--split-files'}}, {'id': 'X', 'type': 'int?', 'inputBinding': {'position': 0, 'prefix': '-X'}}, {'id': 'aligned', 'type': 'boolean?', 'inputBinding': {'position': 0, 'prefix': '--aligned'}}]",
    "cwl_outputs": "[{'id': 'output', 'type': 'File[]', 'outputBinding': {'glob': '$(inputs.accession)*'}}]",
    "cwl_hints": "[{'$import': 'sra-tools-docker.yml'}, {'$import': 'sra-tools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fastq-dump']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.ncbi_config)']}}",
    "cwl_doc": "Fastq-dump from SRA database",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "fastq-dump",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/sra-tools/fastq-dump_PE.cwl",
    "sha": "b6d50f4246a9142f6a722544459f870c55d1aa34",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/sra-tools/fastq-dump_PE.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: fastq_dump-PE\nlabel: fastq-dump-PE\ndoc: Fastq-dump from SRA database paired-end data\n\nhints:\n  - $import: sra-tools-docker.yml\n  - $import: sra-tools-bioconda.yml\n\nrequirements:\n  - class: InlineJavascriptRequirement\n\ninputs:\n  - id: fasta\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: '--fasta'\n    label: fasta\n    doc: 'FASTA only, no qualities'\n  - id: accession\n    type: string\n    inputBinding:\n      position: 2\n    label: accession\n    doc: SRA accession ID\n  - id: gzip\n    type: boolean?\n    inputBinding:\n      position: 0\n      prefix: '--gzip'\n  - id: split-files\n    type: boolean?\n    inputBinding:\n      position: 0\n      prefix: '--split-files'\n  - id: X\n    type: int?\n    inputBinding:\n      position: 0\n      prefix: '-X'\n  - id: aligned\n    type: boolean?\n    inputBinding:\n      position: 0\n      prefix: '--aligned'\n\noutputs:\n  - id: output_1\n    type: 'File'\n    outputBinding:\n      glob: $(inputs.accession)_1*\n  - id: output_2\n    type: 'File'\n    outputBinding:\n      glob: $(inputs.accession)_2*\n\nbaseCommand:\n  - fastq-dump\n\n$schemas:\n  - 'https://schema.org/version/latest/schemaorg-current-http.rdf'\n's:author':\n  - class: 's:Person'\n    's:email': 'mailto:r78v10a07@gmail.com'\n    's:identifier': 'https://orcid.org/0000-0002-4108-5982'\n    's:name': Roberto Vera Alvarez\n's:codeRepository': 'https://www.ncbi.nlm.nih.gov/sra/docs/toolkitsoft/'\n's:license': 'https://spdx.org/licenses/OPL-1.0'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "fastq_dump-PE",
    "cwl_inputs": "[{'id': 'fasta', 'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--fasta'}, 'label': 'fasta', 'doc': 'FASTA only, no qualities'}, {'id': 'accession', 'type': 'string', 'inputBinding': {'position': 2}, 'label': 'accession', 'doc': 'SRA accession ID'}, {'id': 'gzip', 'type': 'boolean?', 'inputBinding': {'position': 0, 'prefix': '--gzip'}}, {'id': 'split-files', 'type': 'boolean?', 'inputBinding': {'position': 0, 'prefix': '--split-files'}}, {'id': 'X', 'type': 'int?', 'inputBinding': {'position': 0, 'prefix': '-X'}}, {'id': 'aligned', 'type': 'boolean?', 'inputBinding': {'position': 0, 'prefix': '--aligned'}}]",
    "cwl_outputs": "[{'id': 'output_1', 'type': 'File', 'outputBinding': {'glob': '$(inputs.accession)_1*'}}, {'id': 'output_2', 'type': 'File', 'outputBinding': {'glob': '$(inputs.accession)_2*'}}]",
    "cwl_hints": "[{'$import': 'sra-tools-docker.yml'}, {'$import': 'sra-tools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fastq-dump']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Fastq-dump from SRA database paired-end data",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "https://spdx.org/licenses/OPL-1.0",
    "cwl_s:creator": null,
    "cwl_label": "fastq-dump-PE",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://www.ncbi.nlm.nih.gov/sra/docs/toolkitsoft/",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:email': 'mailto:r78v10a07@gmail.com', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "tools/sra-tools/vdb-config.cwl",
    "sha": "05d0484482a1ce4178df62dd99f403b0f47ac9d4",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/sra-tools/vdb-config.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: vdb-config\nlabel: vdb-config\ndoc: vdb-config for sra-tools\n\nrequirements:\n  - class: InlineJavascriptRequirement\n\nhints:\n  - $import: sra-tools-docker.yml\n  - $import: sra-tools-bioconda.yml\n\ninputs:\n  i:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -a\n  accept_aws_charges:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --accept-aws-charges\n  set_aws_credentials:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: --set-aws-credentials\n  set_aws_profile:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: --set-aws-profile\n  accept_gcp_charges:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --accept-gcp-charges\n  set_gcp_credentials:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: --set-gcp-credentials\n  prefetch_to_cwd:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --prefetch-to-cwd\n  root:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --root\n\noutputs: []\n\nbaseCommand: [\"vdb-config\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "vdb-config",
    "cwl_inputs": "{'i': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-a'}}, 'accept_aws_charges': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--accept-aws-charges'}}, 'set_aws_credentials': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '--set-aws-credentials'}}, 'set_aws_profile': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--set-aws-profile'}}, 'accept_gcp_charges': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--accept-gcp-charges'}}, 'set_gcp_credentials': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '--set-gcp-credentials'}}, 'prefetch_to_cwd': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--prefetch-to-cwd'}}, 'root': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--root'}}}",
    "cwl_outputs": "[]",
    "cwl_hints": "[{'$import': 'sra-tools-docker.yml'}, {'$import': 'sra-tools-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['vdb-config']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "vdb-config for sra-tools",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "vdb-config",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "tools/star/star-index.cwl",
    "sha": "556b32d901e9da7652bdd545c264bebeee2a87ad",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/star/star-index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: STAR-index\ndoc: Spliced Transcripts Alignment to a Reference\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.runThreadN)\n    ramMax: |\n      ${\n          return inputs.limitGenomeGenerateRAM ? inputs.limitGenomeGenerateRAM/1000000 : 32000\n      }\n\nhints:\n  - $import: star-docker.yml\n  - $import: star-bioconda.yml\n\ninputs:\n  runMode:\n    type: string\n    default: \"genomeGenerate\"\n    inputBinding:\n      position: 1\n      prefix: --runMode\n  limitGenomeGenerateRAM:\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: '--limitGenomeGenerateRAM'\n  genomeChrBinNbits:\n    type: int\n    default: 16\n    inputBinding:\n      position: 2\n      prefix: --genomeChrBinNbits\n  sjdbOverhang:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: --sjdbOverhang\n    doc: |\n      Use for normal RNASeq 124\n  genomeDir:\n    type: string\n    default: '.'\n    inputBinding:\n      position: 5\n      prefix: --genomeDir\n  runThreadN:\n    type: int\n    inputBinding:\n      prefix: --runThreadN\n      position: 6\n  genomeFastaFiles:\n    type: File\n    inputBinding:\n      position: 7\n      prefix: --genomeFastaFiles\n  sjdbGTFfile:\n    type: File?\n    inputBinding:\n      position: 8\n      prefix: --sjdbGTFfile\n  genomeSAindexNbases:\n    type: int?\n    inputBinding:\n      prefix: --genomeSAindexNbases\n      position: 9\n\noutputs:\n  indices_txt:\n    type: File[]\n    outputBinding:\n      glob: \"*.txt\"\n  indices_tab:\n    type: File[]\n    outputBinding:\n      glob: \"*.tab\"\n  indices_genome:\n    type: File\n    outputBinding:\n      glob: \"Genome\"\n  indices_SA:\n    type: File\n    outputBinding:\n      glob: \"SA\"\n  indices_SAindex:\n    type: File\n    outputBinding:\n      glob: \"SAindex\"\n  indices_out:\n    type: File\n    outputBinding:\n      glob: \"Log.out\"\n\nbaseCommand: [\"STAR\"]\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'runMode': {'type': 'string', 'default': 'genomeGenerate', 'inputBinding': {'position': 1, 'prefix': '--runMode'}}, 'limitGenomeGenerateRAM': {'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--limitGenomeGenerateRAM'}}, 'genomeChrBinNbits': {'type': 'int', 'default': 16, 'inputBinding': {'position': 2, 'prefix': '--genomeChrBinNbits'}}, 'sjdbOverhang': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '--sjdbOverhang'}, 'doc': 'Use for normal RNASeq 124\\n'}, 'genomeDir': {'type': 'string', 'default': '.', 'inputBinding': {'position': 5, 'prefix': '--genomeDir'}}, 'runThreadN': {'type': 'int', 'inputBinding': {'prefix': '--runThreadN', 'position': 6}}, 'genomeFastaFiles': {'type': 'File', 'inputBinding': {'position': 7, 'prefix': '--genomeFastaFiles'}}, 'sjdbGTFfile': {'type': 'File?', 'inputBinding': {'position': 8, 'prefix': '--sjdbGTFfile'}}, 'genomeSAindexNbases': {'type': 'int?', 'inputBinding': {'prefix': '--genomeSAindexNbases', 'position': 9}}}",
    "cwl_outputs": "{'indices_txt': {'type': 'File[]', 'outputBinding': {'glob': '*.txt'}}, 'indices_tab': {'type': 'File[]', 'outputBinding': {'glob': '*.tab'}}, 'indices_genome': {'type': 'File', 'outputBinding': {'glob': 'Genome'}}, 'indices_SA': {'type': 'File', 'outputBinding': {'glob': 'SA'}}, 'indices_SAindex': {'type': 'File', 'outputBinding': {'glob': 'SAindex'}}, 'indices_out': {'type': 'File', 'outputBinding': {'glob': 'Log.out'}}}",
    "cwl_hints": "[{'$import': 'star-docker.yml'}, {'$import': 'star-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['STAR']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'ShellCommandRequirement': {}, 'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.runThreadN)', 'ramMax': '${\\n    return inputs.limitGenomeGenerateRAM ? inputs.limitGenomeGenerateRAM/1000000 : 32000\\n}\\n'}}",
    "cwl_doc": "Spliced Transcripts Alignment to a Reference",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "STAR-index",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/star/star.cwl",
    "sha": "60e04109c5c3aa810bd69d73d57296218b97dd48",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/star/star.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\ndoc: Spliced Transcripts Alignment to a Reference\nlabel: STAR\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.threads)\n    ramMax: |\n      ${\n          return inputs.limitGenomeGenerateRAM ? inputs.limitGenomeGenerateRAM : 32000\n      }\n\nhints:\n  - $import: star-docker.yml\n  - $import: star-bioconda.yml\n\ninputs:\n  - id: alignEndsType\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: '--alignEndsType'\n    doc: >\n      Local\n\n      string: type of read ends alignment\n\n      Local           ... standard local alignment with soft-clipping allowed\n\n      EndToEnd        ... force end-to-end read alignment, do not soft-clip\n\n      Extend5pOfRead1 ... fully extend only the 5p of the read1, all other ends:\n      local alignment\n  - id: alignSJDBoverhangMin\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '--alignSJDBoverhangMin'\n    doc: >\n      3\n\n      int>0: minimum overhang (i.e. block size) for annotated (sjdb) spliced\n      alignments\n  - id: alignSJoverhangMin\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '--alignSJoverhangMin'\n    doc: |\n      15\n      int>0: minimum overhang (i.e. block size) for spliced alignments\n  - id: genomeDir\n    type: Directory\n    inputBinding:\n      position: 2\n      prefix: '--genomeDir'\n  - id: limitGenomeGenerateRAM\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: '--limitGenomeGenerateRAM'\n      valueFrom: |\n        ${\n            return parseInt(self, 10) * 1000000;\n         }\n    doc: |\n      31000000000\n      int>0: maximum available RAM (Megabytes) for genome generation\n  - id: limitOutSJcollapsed\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '--limitOutSJcollapsed'\n    doc: |\n      1000000\n      int>0: max number of collapsed junctions\n  - id: limitSjdbInsertNsj\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '--limitSjdbInsertNsj'\n    doc: >-\n      1000000\n\n      int>=0: maximum number of junction to be inserted to the genome on the fly\n      at the mapping stage, including those from annotations and those detected\n      in the 1st step of the 2-pass run\n  - id: outFileNamePrefix\n    type: string\n    default: \"\"\n    inputBinding:\n      position: 5\n      prefix: '--outFileNamePrefix'\n    doc: |\n      string: output files name prefix (including full or relative path). Can\n      only be defined on the command line.\n  - id: outFilterMatchNminOverLread\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: '--outFilterMatchNminOverLread'\n    doc: >\n      0.0\n\n      float: outFilterMatchNmin normalized to read length (sum of mates' lengths\n      for paired-end reads)\n  - id: outFilterMismatchNmax\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '--outFilterMismatchNmax'\n    doc: >\n      33\n\n      int: alignment will be output only if it has fewer mismatches than this\n      value\n  - id: outFilterMismatchNoverLmax\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: '--outFilterMismatchNoverLmax'\n    doc: >\n      0.3\n\n      int: alignment will be output only if its ratio of mismatches to *mapped*\n      length is less than this value\n  - id: outFilterMultimapNmax\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '--outFilterMultimapNmax'\n    doc: >\n      100\n\n      int: read alignments will be output only if the read maps fewer than this\n      value, otherwise no alignments will be output\n  - id: outFilterScoreMinOverLread\n    type: float?\n    inputBinding:\n      position: 1\n      prefix: '--outFilterScoreMinOverLread'\n    doc: >\n      0.3\n\n      float: outFilterScoreMin normalized to read length (sum of mates' lengths\n      for paired-end reads)\n  - id: outFilterType\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: '--outFilterType'\n    doc: >\n      Normal\n\n      string: type of filtering\n\n      Normal  ... standard filtering using only current alignment\n\n      BySJout ... keep only those reads that contain junctions that passed\n      filtering into SJ.out.tab\n  - id: outSAMtype\n    type: 'string[]'\n    inputBinding:\n      position: 1\n      prefix: '--outSAMtype'\n      shellQuote: false\n  - id: outSAMunmapped\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: '--outSAMunmapped'\n  - id: outStd\n    type: string\n    inputBinding:\n      position: 2\n      prefix: '--outStd'\n  - id: readFilesCommand\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: '--readFilesCommand'\n  - id: reads\n    type: File[]\n    inputBinding:\n      position: 3\n      prefix: '--readFilesIn'\n    doc: >\n      string(s): paths to files that contain input read1 (and, if needed, \n      read2)\n  - id: seedSearchStartLmax\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '--seedSearchStartLmax'\n    doc: >\n      12\n\n      int>0: defines the search start point through the read - the read is split\n      into pieces no longer than this value\n  - id: threads\n    type: int\n    inputBinding:\n      position: 1\n      prefix: '--runThreadN'\n  - id: twopassMode\n    type: string\n    inputBinding:\n      position: 1\n      prefix: '--twopassMode'\n  - id: winAnchorMultimapNmax\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '--winAnchorMultimapNmax'\n    doc: |\n      50\n      int>0: max number of loci anchors are allowed to map to\n  - id: quantMode\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: '--quantMode'\n  - id: alignIntronMax\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '--alignIntronMax'\n  - id: chimSegmentMin\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '--chimSegmentMin'\n\noutputs:\n  - id: aligned\n    type: File\n    outputBinding:\n      glob: |\n        ${\n          var p = inputs.outFileNamePrefix?inputs.outFileNamePrefix:\"\";\n          return p+\"Aligned.out.bam\";\n        }\n  - id: bamRemDups\n    type: File?\n    outputBinding:\n      glob: |\n        ${\n          if (inputs.bamRemoveDuplicatesType != \"UniqueIdentical\")\n            return null;\n          var p=inputs.outFileNamePrefix?inputs.outFileNamePrefix:\"\";\n          return p+\"Processed.out.bam\";\n        }\n  - id: mappingstats\n    type: File?\n    outputBinding:\n      loadContents: true\n      glob: |\n        ${\n          var p = inputs.outFileNamePrefix?inputs.outFileNamePrefix:\"\";\n          return p+\"Log.final.out\";\n        }\n  - id: readspergene\n    type: File?\n    outputBinding:\n      glob: |\n        ${\n          var p=inputs.outFileNamePrefix?inputs.outFileNamePrefix:\"\";\n          return p+\"ReadsPerGene.out.tab\";\n        }\n  - id: transcriptomesam\n    type: File?\n    outputBinding:\n      glob: |\n        ${\n          var p=inputs.outFileNamePrefix?inputs.outFileNamePrefix:\"\";\n          return p+\"Aligned.toTranscriptome.out.bam\";\n        }\n  - id: chimeric\n    type: File?\n    outputBinding:\n      glob: |\n        ${\n          \n          var p=inputs.outFileNamePrefix?inputs.outFileNamePrefix:\"\";\n          return p+\"Chimeric.out.junction\";\n        }\n    \n\nbaseCommand:\n  - STAR\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'alignEndsType', 'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--alignEndsType'}, 'doc': 'Local\\nstring: type of read ends alignment\\nLocal           ... standard local alignment with soft-clipping allowed\\nEndToEnd        ... force end-to-end read alignment, do not soft-clip\\nExtend5pOfRead1 ... fully extend only the 5p of the read1, all other ends: local alignment\\n'}, {'id': 'alignSJDBoverhangMin', 'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--alignSJDBoverhangMin'}, 'doc': '3\\nint>0: minimum overhang (i.e. block size) for annotated (sjdb) spliced alignments\\n'}, {'id': 'alignSJoverhangMin', 'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--alignSJoverhangMin'}, 'doc': '15\\nint>0: minimum overhang (i.e. block size) for spliced alignments\\n'}, {'id': 'genomeDir', 'type': 'Directory', 'inputBinding': {'position': 2, 'prefix': '--genomeDir'}}, {'id': 'limitGenomeGenerateRAM', 'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--limitGenomeGenerateRAM', 'valueFrom': '${\\n    return parseInt(self, 10) * 1000000;\\n }\\n'}, 'doc': '31000000000\\nint>0: maximum available RAM (Megabytes) for genome generation\\n'}, {'id': 'limitOutSJcollapsed', 'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--limitOutSJcollapsed'}, 'doc': '1000000\\nint>0: max number of collapsed junctions\\n'}, {'id': 'limitSjdbInsertNsj', 'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--limitSjdbInsertNsj'}, 'doc': '1000000\\nint>=0: maximum number of junction to be inserted to the genome on the fly at the mapping stage, including those from annotations and those detected in the 1st step of the 2-pass run'}, {'id': 'outFileNamePrefix', 'type': 'string', 'default': '', 'inputBinding': {'position': 5, 'prefix': '--outFileNamePrefix'}, 'doc': 'string: output files name prefix (including full or relative path). Can\\nonly be defined on the command line.\\n'}, {'id': 'outFilterMatchNminOverLread', 'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--outFilterMatchNminOverLread'}, 'doc': \"0.0\\nfloat: outFilterMatchNmin normalized to read length (sum of mates' lengths for paired-end reads)\\n\"}, {'id': 'outFilterMismatchNmax', 'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--outFilterMismatchNmax'}, 'doc': '33\\nint: alignment will be output only if it has fewer mismatches than this value\\n'}, {'id': 'outFilterMismatchNoverLmax', 'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--outFilterMismatchNoverLmax'}, 'doc': '0.3\\nint: alignment will be output only if its ratio of mismatches to *mapped* length is less than this value\\n'}, {'id': 'outFilterMultimapNmax', 'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--outFilterMultimapNmax'}, 'doc': '100\\nint: read alignments will be output only if the read maps fewer than this value, otherwise no alignments will be output\\n'}, {'id': 'outFilterScoreMinOverLread', 'type': 'float?', 'inputBinding': {'position': 1, 'prefix': '--outFilterScoreMinOverLread'}, 'doc': \"0.3\\nfloat: outFilterScoreMin normalized to read length (sum of mates' lengths for paired-end reads)\\n\"}, {'id': 'outFilterType', 'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--outFilterType'}, 'doc': 'Normal\\nstring: type of filtering\\nNormal  ... standard filtering using only current alignment\\nBySJout ... keep only those reads that contain junctions that passed filtering into SJ.out.tab\\n'}, {'id': 'outSAMtype', 'type': 'string[]', 'inputBinding': {'position': 1, 'prefix': '--outSAMtype', 'shellQuote': False}}, {'id': 'outSAMunmapped', 'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--outSAMunmapped'}}, {'id': 'outStd', 'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--outStd'}}, {'id': 'readFilesCommand', 'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--readFilesCommand'}}, {'id': 'reads', 'type': 'File[]', 'inputBinding': {'position': 3, 'prefix': '--readFilesIn'}, 'doc': 'string(s): paths to files that contain input read1 (and, if needed,  read2)\\n'}, {'id': 'seedSearchStartLmax', 'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--seedSearchStartLmax'}, 'doc': '12\\nint>0: defines the search start point through the read - the read is split into pieces no longer than this value\\n'}, {'id': 'threads', 'type': 'int', 'inputBinding': {'position': 1, 'prefix': '--runThreadN'}}, {'id': 'twopassMode', 'type': 'string', 'inputBinding': {'position': 1, 'prefix': '--twopassMode'}}, {'id': 'winAnchorMultimapNmax', 'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--winAnchorMultimapNmax'}, 'doc': '50\\nint>0: max number of loci anchors are allowed to map to\\n'}, {'id': 'quantMode', 'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '--quantMode'}}, {'id': 'alignIntronMax', 'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--alignIntronMax'}}, {'id': 'chimSegmentMin', 'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '--chimSegmentMin'}}]",
    "cwl_outputs": "[{'id': 'aligned', 'type': 'File', 'outputBinding': {'glob': '${\\n  var p = inputs.outFileNamePrefix?inputs.outFileNamePrefix:\"\";\\n  return p+\"Aligned.out.bam\";\\n}\\n'}}, {'id': 'bamRemDups', 'type': 'File?', 'outputBinding': {'glob': '${\\n  if (inputs.bamRemoveDuplicatesType != \"UniqueIdentical\")\\n    return null;\\n  var p=inputs.outFileNamePrefix?inputs.outFileNamePrefix:\"\";\\n  return p+\"Processed.out.bam\";\\n}\\n'}}, {'id': 'mappingstats', 'type': 'File?', 'outputBinding': {'loadContents': True, 'glob': '${\\n  var p = inputs.outFileNamePrefix?inputs.outFileNamePrefix:\"\";\\n  return p+\"Log.final.out\";\\n}\\n'}}, {'id': 'readspergene', 'type': 'File?', 'outputBinding': {'glob': '${\\n  var p=inputs.outFileNamePrefix?inputs.outFileNamePrefix:\"\";\\n  return p+\"ReadsPerGene.out.tab\";\\n}\\n'}}, {'id': 'transcriptomesam', 'type': 'File?', 'outputBinding': {'glob': '${\\n  var p=inputs.outFileNamePrefix?inputs.outFileNamePrefix:\"\";\\n  return p+\"Aligned.toTranscriptome.out.bam\";\\n}\\n'}}, {'id': 'chimeric', 'type': 'File?', 'outputBinding': {'glob': '${\\n  \\n  var p=inputs.outFileNamePrefix?inputs.outFileNamePrefix:\"\";\\n  return p+\"Chimeric.out.junction\";\\n}\\n'}}]",
    "cwl_hints": "[{'$import': 'star-docker.yml'}, {'$import': 'star-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['STAR']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'ShellCommandRequirement': {}, 'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.threads)', 'ramMax': '${\\n    return inputs.limitGenomeGenerateRAM ? inputs.limitGenomeGenerateRAM : 32000\\n}\\n'}}",
    "cwl_doc": "Spliced Transcripts Alignment to a Reference",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "STAR",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/tpmcalculator/tpmcalculator.cwl",
    "sha": "bf3107869e41e8d94db9e048fab36b668de88fee",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/tpmcalculator/tpmcalculator.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: TPMCalculator\ndoc: TPMCalculator quantifies mRNA abundance directly from the alignments by parsing BAM files\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMax: |\n      ${\n          return inputs.ramMax ? inputs.ramMax : 2000\n      }\n    ramMin: 2000\n\nhints:\n  - $import: tpmcalculator-docker.yml\n  - $import: tpmcalculator-bioconda.yml\n\ninputs:\n  ramMax:\n    type: int?\n    doc: Maximun the RAM in MB\n  g:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -g\n    doc: |\n      GTF file\n  b:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: -b\n    doc: |\n      BAM file\n  k:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: -k\n    doc: |\n      Gene key to use from GTF file. Default: gene_id\n  t:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: -t\n    doc: |\n      Transcript key to use from GTF file. Default: transcript_id\n  c:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -c\n    doc: |\n      Smaller size allowed for an intron created for genes. Default: 16. We recommend to use the reads length\n  p:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: -p\n    doc: |\n      Use only properly paired reads. Default: No. Recommended for paired-end reads.\n  q:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -q\n    doc: |\n      Minimum MAPQ value to filter out reads. Default: 0. This value depends on the aligner MAPQ value.\n  o:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -o\n    doc: |\n      Minimum overlap between a reads and a feature. Default: 8.\n  e:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: -e\n  a:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: -a\n\noutputs:\n  gene_out:\n    type: File\n    outputBinding:\n      glob: $(inputs.b.nameroot)_genes.out\n  gene_ent:\n    type: File\n    outputBinding:\n      glob: $(inputs.b.nameroot)_genes.ent\n  gene_uni:\n    type: File\n    outputBinding:\n      glob: $(inputs.b.nameroot)_genes.uni\n  transcripts_out:\n    type: File\n    outputBinding:\n      glob: $(inputs.b.nameroot)_transcripts.out\n  transcripts_ent:\n    type: File\n    outputBinding:\n      glob: $(inputs.b.nameroot)_transcripts.ent\n\nbaseCommand: [\"TPMCalculator\", \"-e\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/ncbi/TPMCalculator\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'ramMax': {'type': 'int?', 'doc': 'Maximun the RAM in MB'}, 'g': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-g'}, 'doc': 'GTF file\\n'}, 'b': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-b'}, 'doc': 'BAM file\\n'}, 'k': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '-k'}, 'doc': 'Gene key to use from GTF file. Default: gene_id\\n'}, 't': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '-t'}, 'doc': 'Transcript key to use from GTF file. Default: transcript_id\\n'}, 'c': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-c'}, 'doc': 'Smaller size allowed for an intron created for genes. Default: 16. We recommend to use the reads length\\n'}, 'p': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '-p'}, 'doc': 'Use only properly paired reads. Default: No. Recommended for paired-end reads.\\n'}, 'q': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-q'}, 'doc': 'Minimum MAPQ value to filter out reads. Default: 0. This value depends on the aligner MAPQ value.\\n'}, 'o': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-o'}, 'doc': 'Minimum overlap between a reads and a feature. Default: 8.\\n'}, 'e': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '-e'}}, 'a': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '-a'}}}",
    "cwl_outputs": "{'gene_out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.b.nameroot)_genes.out'}}, 'gene_ent': {'type': 'File', 'outputBinding': {'glob': '$(inputs.b.nameroot)_genes.ent'}}, 'gene_uni': {'type': 'File', 'outputBinding': {'glob': '$(inputs.b.nameroot)_genes.uni'}}, 'transcripts_out': {'type': 'File', 'outputBinding': {'glob': '$(inputs.b.nameroot)_transcripts.out'}}, 'transcripts_ent': {'type': 'File', 'outputBinding': {'glob': '$(inputs.b.nameroot)_transcripts.ent'}}}",
    "cwl_hints": "[{'$import': 'tpmcalculator-docker.yml'}, {'$import': 'tpmcalculator-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['TPMCalculator', '-e']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMax': '${\\n    return inputs.ramMax ? inputs.ramMax : 2000\\n}\\n', 'ramMin': 2000}}",
    "cwl_doc": "TPMCalculator quantifies mRNA abundance directly from the alignments by parsing BAM files",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "TPMCalculator",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/ncbi/TPMCalculator",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/transdecoder/transdecoder_longorfs.cwl",
    "sha": "c4b1ae567b8d1b1dacc70d02c82fe8c04a783f05",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/transdecoder/transdecoder_longorfs.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: TransDecoder.LongOrfs\ndoc: TransDecoder.LongOrfs Transcriptome Protein Prediction\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: transdecoder-docker.yml\n  - $import: transdecoder-bioconda.yml\n\ninputs:\n  t:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -t\n    doc: transcripts.fasta\n  gene_trans_map:\n    type: File?\n    inputBinding:\n      position: 1\n      prefix: -gene_trans_map\n    doc: |\n      gene-to-transcript identifier mapping file (tab-delimited, gene_id<tab>trans_id<return> )\n  m:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -m\n    doc: |\n      minimum protein length (default: 100)\n  G:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -G\n    doc: |\n      genetic code (default: universal; see PerlDoc; options: Euplotes, Tetrahymena, Candida, Acetabularia)\n  S:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -S\n    doc: strand-specific (only analyzes top strand)\n  genetic_code:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -genetic_code\n    doc: Universal (default)\n\noutputs:\n  output:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.t.basename).transdecoder_dir\n\nbaseCommand: [\"TransDecoder.LongOrfs\"]\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'t': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-t'}, 'doc': 'transcripts.fasta'}, 'gene_trans_map': {'type': 'File?', 'inputBinding': {'position': 1, 'prefix': '-gene_trans_map'}, 'doc': 'gene-to-transcript identifier mapping file (tab-delimited, gene_id<tab>trans_id<return> )\\n'}, 'm': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-m'}, 'doc': 'minimum protein length (default: 100)\\n'}, 'G': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-G'}, 'doc': 'genetic code (default: universal; see PerlDoc; options: Euplotes, Tetrahymena, Candida, Acetabularia)\\n'}, 'S': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-S'}, 'doc': 'strand-specific (only analyzes top strand)'}, 'genetic_code': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-genetic_code'}, 'doc': 'Universal (default)'}}",
    "cwl_outputs": "{'output': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.t.basename).transdecoder_dir'}}}",
    "cwl_hints": "[{'$import': 'transdecoder-docker.yml'}, {'$import': 'transdecoder-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['TransDecoder.LongOrfs']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "TransDecoder.LongOrfs Transcriptome Protein Prediction",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "TransDecoder.LongOrfs",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/transdecoder/transdecoder_longorfs_extract_result.cwl",
    "sha": "01275ffb4e3e3b2291f3f81ac8227fd53108e151",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/transdecoder/transdecoder_longorfs_extract_result.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: TransDecoder.LongOrfs_extract_result\ndoc: Extract TransDecoder.LongOrfs result file from transdecoder directory\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.d)\n\ninputs:\n  d:\n    type: Directory\n    inputBinding:\n      position: 1\n      valueFrom: ${ return self.path + '/' + inputs.filename;}\n    doc: |\n      Transdecoder LongOrfs result directory\n  filename:\n    type: string\n    doc: |\n      File name to extract from transdecoder result directory\n  o:\n    type: string\n    inputBinding:\n      position: 2\n    doc: |\n      Out file name\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.o)\n\nbaseCommand: [\"cp\"]\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'d': {'type': 'Directory', 'inputBinding': {'position': 1, 'valueFrom': \"${ return self.path + '/' + inputs.filename;}\"}, 'doc': 'Transdecoder LongOrfs result directory\\n'}, 'filename': {'type': 'string', 'doc': 'File name to extract from transdecoder result directory\\n'}, 'o': {'type': 'string', 'inputBinding': {'position': 2}, 'doc': 'Out file name\\n'}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.o)'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cp']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.d)']}}",
    "cwl_doc": "Extract TransDecoder.LongOrfs result file from transdecoder directory",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "TransDecoder.LongOrfs_extract_result",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/transdecoder/transdecoder_predict.cwl",
    "sha": "178528c9d004dd46c70f6199888cd118b2bde6fb",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/transdecoder/transdecoder_predict.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: TransDecoder.Predict\ndoc: TransDecoder.Predict Transcriptome Protein Prediction\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: transdecoder-docker.yml\n  - $import: transdecoder-bioconda.yml\n\ninputs:\n  t:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -t\n    doc: transcripts.fasta\n  retain_long_orfs_mode:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -retain_long_orfs_mode\n    doc: |\n      'dynamic' or 'strict' (default: dynamic)\n      In dynamic mode, sets range according to 1%FDR in random sequence of same GC content.\n  retain_long_orfs_length:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -retain_long_orfs_length\n    doc: |\n      under 'strict' mode, retain all ORFs found that are equal or longer than these many nucleotides even if no\n      other evidence marks it as coding (default: 1000000) so essentially turned off by default.)\n  retain_pfam_hits:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -retain_pfam_hits\n    doc: |\n      domain table output file from running hmmscan to search Pfam (see transdecoder.github.io for info)\n      Any ORF with a pfam domain hit will be retained in the final output.\n  retain_blastp_hits:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -retain_blastp_hits\n    doc: |\n      blastp output in '-outfmt 6' format. Any ORF with a blast match will be retained in the final output.\n  single_best_only:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -single_best_only\n    doc: |\n      Retain only the single best orf per transcript (prioritized by homology then orf length)\n  no_refine_starts:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: -no_refine_starts\n    doc: |\n      start refinement identifies potential start codons for 5' partial ORFs using a PWM, process on by default.\n  T:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -T\n    doc: |\n      Top longest ORFs to train Markov Model (hexamer stats) (default: 500)\n      Note, 10x this value are first selected for removing redundancies,\n      and then this -T value of longest ORFs are selected from the non-redundant set.\n  G:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -G\n    doc: |\n      genetic code (default: universal; see PerlDoc; options: Euplotes, Tetrahymena, Candida, Acetabularia)\n  genetic_code:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -genetic_code\n    doc: Universal (default)\n\noutputs:\n  output:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.t.basename).transdecoder_dir\n\nbaseCommand: [\"TransDecoder.Predict\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/TransDecoder/TransDecoder\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'t': {'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-t'}, 'doc': 'transcripts.fasta'}, 'retain_long_orfs_mode': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-retain_long_orfs_mode'}, 'doc': \"'dynamic' or 'strict' (default: dynamic)\\nIn dynamic mode, sets range according to 1%FDR in random sequence of same GC content.\\n\"}, 'retain_long_orfs_length': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-retain_long_orfs_length'}, 'doc': \"under 'strict' mode, retain all ORFs found that are equal or longer than these many nucleotides even if no\\nother evidence marks it as coding (default: 1000000) so essentially turned off by default.)\\n\"}, 'retain_pfam_hits': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-retain_pfam_hits'}, 'doc': 'domain table output file from running hmmscan to search Pfam (see transdecoder.github.io for info)\\nAny ORF with a pfam domain hit will be retained in the final output.\\n'}, 'retain_blastp_hits': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-retain_blastp_hits'}, 'doc': \"blastp output in '-outfmt 6' format. Any ORF with a blast match will be retained in the final output.\\n\"}, 'single_best_only': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-single_best_only'}, 'doc': 'Retain only the single best orf per transcript (prioritized by homology then orf length)\\n'}, 'no_refine_starts': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '-no_refine_starts'}, 'doc': \"start refinement identifies potential start codons for 5' partial ORFs using a PWM, process on by default.\\n\"}, 'T': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-T'}, 'doc': 'Top longest ORFs to train Markov Model (hexamer stats) (default: 500)\\nNote, 10x this value are first selected for removing redundancies,\\nand then this -T value of longest ORFs are selected from the non-redundant set.\\n'}, 'G': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-G'}, 'doc': 'genetic code (default: universal; see PerlDoc; options: Euplotes, Tetrahymena, Candida, Acetabularia)\\n'}, 'genetic_code': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-genetic_code'}, 'doc': 'Universal (default)'}}",
    "cwl_outputs": "{'output': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.t.basename).transdecoder_dir'}}}",
    "cwl_hints": "[{'$import': 'transdecoder-docker.yml'}, {'$import': 'transdecoder-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['TransDecoder.Predict']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "TransDecoder.Predict Transcriptome Protein Prediction",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "TransDecoder.Predict",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/TransDecoder/TransDecoder",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/trimgalore/trimgalore.cwl",
    "sha": "923760ee4dfd7d5dacd241df5ea9d7dc8f6c61df",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/trimgalore/trimgalore.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: trimgalore\ndoc: Trim Galore is a wrapper around Cutadapt and FastQC to consistently apply adapter and quality\n  trimming to FastQ files, with extra functionality for RRBS data.\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  - $import: trimgalore-docker.yml\n  - $import: trimgalore-bioconda.yml\n\ninputs:\n  q:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: -q\n    doc: |\n      Trim low-quality ends from reads in addition to adapter removal\n  phred33:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --phred33\n    doc: |\n      Instructs Cutadapt to use ASCII+33 quality scores as Phred scores\n  phred64:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --phred64\n    doc: |\n      Instructs Cutadapt to use ASCII+64 quality scores as Phred scores\n  fastqc:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --fastqc\n    doc: |\n      Run FastQC in the default mode on the FastQ file once trimming is complete\n  fastqc_args:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --fastqc_args\n    doc: |\n      Passes extra arguments to FastQC\n  adapter:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --adapter\n    doc: |\n      Adapter sequence to be trimmed\n  adapter2:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: --adapter2\n    doc: |\n      Optional adapter sequence to be trimmed off read 2 of paired-end files\n  illumina:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: --illumina\n    doc: |\n      Adapter sequence to be trimmed is the first 13bp of the Illumina universal adapter\n  nextera:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: --nextera\n    doc: |\n      Adapter sequence to be trimmed is the first 12bp of the Nextera adapter\n  small_rna:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: --small_rna\n    doc: |\n      Adapter sequence to be trimmed is the first 12bp of the Illumina Small RNA 3' Adapter\n  max_length:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --max_length\n    doc: |\n      Discard reads that are longer than bp after trimming\n  stringency:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --stringency\n    doc: |\n      Overlap with adapter sequence required to trim a sequence\n  e:\n    type: float?\n    inputBinding:\n      position: 3\n      prefix: -e\n    doc: |\n      Maximum allowed error rate (no. of errors divided by the length of the matching region)\n  gzip:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: --small_rna\n    doc: |\n      Compress the output file with gzip\n  length:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --length\n    doc: |\n      Discard reads that became shorter than length INT because of either quality or adapter trimming\n  max_n:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --max_n\n    doc: |\n      The total number of Ns (as integer) a read may contain before it will be removed altogether\n  trim_n:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --trim-n\n    doc: |\n      Removes Ns from either side of the read\n  no_report_file:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: --no_report_file\n    doc: |\n      If specified no report file will be generated\n  suppress_warn:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: --suppress_warn\n    doc: |\n      If specified any output to STDOUT or STDERR will be suppressed\n  clip_R1:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --clip_R1\n    doc: |\n      Instructs Trim Galore to remove bp from the 5' end of read 1 (or single-end reads)\n  clip_R2:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --clip_R2\n    doc: |\n      Instructs Trim Galore to remove bp from the 5' end of read 2 (paired-end reads only)\n  three_prime_clip_R1:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --three_prime_clip_R1\n    doc: |\n      Instructs Trim Galore to remove <int> bp from the 3' end of read 1\n  three_prime_clip_R2:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --three_prime_clip_R1\n    doc: |\n      Instructs Trim Galore to re move <int> bp from the 3' end of read 2\n  nextseq:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --nextseq\n    doc: |\n      This enables the option --nextseq-trim=3'CUTOFF within Cutadapt\n  path_to_cutadapt:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: --path_to_cutadapt\n    doc: |\n      You may use this option to specify a path to the Cutadapt executable\n  basename:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: --basename\n    doc: |\n      Use PREFERRED_NAME as the basename for output files\n  cores:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: --cores\n    doc: |\n      Number of cores to be used for trimming [default: 1]\n  hardtrim5:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: --hardtrim5\n    doc: |\n      Instead of performing adapter-/quality trimming\n  hardtrim3:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: --hardtrim3\n    doc: |\n      Instead of performing adapter-/quality trimming\n  clock:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: --clock\n    doc: |\n      In this mode, reads are trimmed in a specific way that is currently used for the Mouse Epigenetic Clock\n  rrbs:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: --rrbs\n    doc: |\n      Specifies that the input file was an MspI digested RRBS sample\n  non_directional:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: --non_directional\n    doc: |\n      Selecting this option for non-directional RRBS libraries will screen quality-trimmed sequences\n      for CAA or CGA at the start of the read and, if found, removes the first two base pairs\n  keep:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: --keep\n    doc: |\n      Keep the quality trimmed intermediate file\n  paired:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: --paired\n    doc: |\n      This option performs length trimming of quality/adapter/RRBS trimmed reads for paired-end files\n  trim1:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: --trim1\n    doc: |\n      Trims 1 bp off every read from its 3' end\n  retain_unpaired:\n    type: boolean?\n    inputBinding:\n      position: 4\n      prefix: --retain_unpaired\n    doc: |\n      If only one of the two paired-end reads became too short, the longer read will be written\n      to either .unpaired_1.fq or .unpaired_2.fq output files\n  length_1:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: --length_1\n    doc: |\n      Unpaired single-end read length cutoff needed for read 1 to be written to .unpaired_1.fq output file\n  length_2:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: --length_2\n    doc: |\n      Unpaired single-end read length cutoff needed for read 2 to be written to .unpaired_2.fq output file.\n  files:\n    type: File[]\n    inputBinding:\n      position: 5\n\n\noutputs:\n  trimmed:\n    type: File[]\n    outputBinding:\n      glob: \"*.fq.gz\"\n  fastqc_html:\n    type: File[]?\n    outputBinding:\n      glob: \"*.html\"\n  fastqc_zip:\n    type: File[]\n    outputBinding:\n      glob: \"*.zip\"\n  report:\n    type: File[]?\n    outputBinding:\n      glob: \"*_report.txt\"\n\n\nbaseCommand: [trim_galore]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/FelixKrueger/TrimGalore/\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'q': {'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-q'}, 'doc': 'Trim low-quality ends from reads in addition to adapter removal\\n'}, 'phred33': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--phred33'}, 'doc': 'Instructs Cutadapt to use ASCII+33 quality scores as Phred scores\\n'}, 'phred64': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--phred64'}, 'doc': 'Instructs Cutadapt to use ASCII+64 quality scores as Phred scores\\n'}, 'fastqc': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--fastqc'}, 'doc': 'Run FastQC in the default mode on the FastQ file once trimming is complete\\n'}, 'fastqc_args': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--fastqc_args'}, 'doc': 'Passes extra arguments to FastQC\\n'}, 'adapter': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--adapter'}, 'doc': 'Adapter sequence to be trimmed\\n'}, 'adapter2': {'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '--adapter2'}, 'doc': 'Optional adapter sequence to be trimmed off read 2 of paired-end files\\n'}, 'illumina': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '--illumina'}, 'doc': 'Adapter sequence to be trimmed is the first 13bp of the Illumina universal adapter\\n'}, 'nextera': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '--nextera'}, 'doc': 'Adapter sequence to be trimmed is the first 12bp of the Nextera adapter\\n'}, 'small_rna': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '--small_rna'}, 'doc': \"Adapter sequence to be trimmed is the first 12bp of the Illumina Small RNA 3' Adapter\\n\"}, 'max_length': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--max_length'}, 'doc': 'Discard reads that are longer than bp after trimming\\n'}, 'stringency': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--stringency'}, 'doc': 'Overlap with adapter sequence required to trim a sequence\\n'}, 'e': {'type': 'float?', 'inputBinding': {'position': 3, 'prefix': '-e'}, 'doc': 'Maximum allowed error rate (no. of errors divided by the length of the matching region)\\n'}, 'gzip': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '--small_rna'}, 'doc': 'Compress the output file with gzip\\n'}, 'length': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--length'}, 'doc': 'Discard reads that became shorter than length INT because of either quality or adapter trimming\\n'}, 'max_n': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--max_n'}, 'doc': 'The total number of Ns (as integer) a read may contain before it will be removed altogether\\n'}, 'trim_n': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--trim-n'}, 'doc': 'Removes Ns from either side of the read\\n'}, 'no_report_file': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '--no_report_file'}, 'doc': 'If specified no report file will be generated\\n'}, 'suppress_warn': {'type': 'boolean?', 'inputBinding': {'position': 3, 'prefix': '--suppress_warn'}, 'doc': 'If specified any output to STDOUT or STDERR will be suppressed\\n'}, 'clip_R1': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--clip_R1'}, 'doc': \"Instructs Trim Galore to remove bp from the 5' end of read 1 (or single-end reads)\\n\"}, 'clip_R2': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--clip_R2'}, 'doc': \"Instructs Trim Galore to remove bp from the 5' end of read 2 (paired-end reads only)\\n\"}, 'three_prime_clip_R1': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--three_prime_clip_R1'}, 'doc': \"Instructs Trim Galore to remove <int> bp from the 3' end of read 1\\n\"}, 'three_prime_clip_R2': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--three_prime_clip_R1'}, 'doc': \"Instructs Trim Galore to re move <int> bp from the 3' end of read 2\\n\"}, 'nextseq': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--nextseq'}, 'doc': \"This enables the option --nextseq-trim=3'CUTOFF within Cutadapt\\n\"}, 'path_to_cutadapt': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '--path_to_cutadapt'}, 'doc': 'You may use this option to specify a path to the Cutadapt executable\\n'}, 'basename': {'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '--basename'}, 'doc': 'Use PREFERRED_NAME as the basename for output files\\n'}, 'cores': {'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '--cores'}, 'doc': 'Number of cores to be used for trimming [default: 1]\\n'}, 'hardtrim5': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '--hardtrim5'}, 'doc': 'Instead of performing adapter-/quality trimming\\n'}, 'hardtrim3': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '--hardtrim3'}, 'doc': 'Instead of performing adapter-/quality trimming\\n'}, 'clock': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '--clock'}, 'doc': 'In this mode, reads are trimmed in a specific way that is currently used for the Mouse Epigenetic Clock\\n'}, 'rrbs': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '--rrbs'}, 'doc': 'Specifies that the input file was an MspI digested RRBS sample\\n'}, 'non_directional': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '--non_directional'}, 'doc': 'Selecting this option for non-directional RRBS libraries will screen quality-trimmed sequences\\nfor CAA or CGA at the start of the read and, if found, removes the first two base pairs\\n'}, 'keep': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '--keep'}, 'doc': 'Keep the quality trimmed intermediate file\\n'}, 'paired': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '--paired'}, 'doc': 'This option performs length trimming of quality/adapter/RRBS trimmed reads for paired-end files\\n'}, 'trim1': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '--trim1'}, 'doc': \"Trims 1 bp off every read from its 3' end\\n\"}, 'retain_unpaired': {'type': 'boolean?', 'inputBinding': {'position': 4, 'prefix': '--retain_unpaired'}, 'doc': 'If only one of the two paired-end reads became too short, the longer read will be written\\nto either .unpaired_1.fq or .unpaired_2.fq output files\\n'}, 'length_1': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '--length_1'}, 'doc': 'Unpaired single-end read length cutoff needed for read 1 to be written to .unpaired_1.fq output file\\n'}, 'length_2': {'type': 'int?', 'inputBinding': {'position': 4, 'prefix': '--length_2'}, 'doc': 'Unpaired single-end read length cutoff needed for read 2 to be written to .unpaired_2.fq output file.\\n'}, 'files': {'type': 'File[]', 'inputBinding': {'position': 5}}}",
    "cwl_outputs": "{'trimmed': {'type': 'File[]', 'outputBinding': {'glob': '*.fq.gz'}}, 'fastqc_html': {'type': 'File[]?', 'outputBinding': {'glob': '*.html'}}, 'fastqc_zip': {'type': 'File[]', 'outputBinding': {'glob': '*.zip'}}, 'report': {'type': 'File[]?', 'outputBinding': {'glob': '*_report.txt'}}}",
    "cwl_hints": "[{'$import': 'trimgalore-docker.yml'}, {'$import': 'trimgalore-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['trim_galore']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Trim Galore is a wrapper around Cutadapt and FastQC to consistently apply adapter and quality trimming to FastQ files, with extra functionality for RRBS data.",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "trimgalore",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/FelixKrueger/TrimGalore/",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/trimmomatic/trimmomatic-PE.cwl",
    "sha": "42a61a5da68bfc0ccc676b0080c4e104f59e746d",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/trimmomatic/trimmomatic-PE.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: Trimmomatic\ndoc: >\n  Trimmomatic is a fast, multithreaded command line tool that can be used to\n  trim and crop\n\n  Illumina (FASTQ) data as well as to remove adapters\n\nrequirements:\n  - class: ResourceRequirement\n    coresMin: $(inputs.threads)\n  - class: SchemaDefRequirement\n    types:\n      - name: end_mode\n        symbols:\n          - SE\n          - PE\n        type: enum\n      - fields:\n          - name: windowSize\n            type: int\n          - name: requiredQuality\n            type: int\n        name: slidingWindow\n        type: record\n      - name: phred\n        symbols:\n          - '64'\n          - '33'\n        type: enum\n      - fields:\n          - doc: >\n              FASTA file containing adapters, PCR sequences, etc. It is used to\n              search\n\n              for and remove these sequences in the input FASTQ file(s)\n            name: adapters\n            type: File\n          - doc: >\n              specifies the maximum mismatch count which will still allow a full\n              match\n\n              to be performed\n            name: seedMismatches\n            type: int\n          - doc: >\n              specifies how accurate the match between the two 'adapter ligated'\n              reads\n\n              must be for PE palindrome read alignment.\n            name: palindromeClipThreshold\n            type: int\n          - doc: >\n              specifies how accurate the match between any adapter etc. sequence\n              must\n\n              be against a read\n            name: simpleClipThreshold\n            type: int\n          - doc: >\n              In addition to the alignment score, palindrome mode can verify\n              that a\n\n              minimum length of adapter has been detected. If unspecified, this\n\n              defaults to 8 bases, for historical reasons. However, since\n              palindrome\n\n              mode has a very low false positive rate, this can be safely\n              reduced, even\n\n              down to 1, to allow shorter adapter fragments to be removed.\n            name: minAdapterLength\n            type: int?\n          - doc: >\n              After read-though has been detected by palindrome mode, and the\n              adapter\n\n              sequence removed, the reverse read contains the same sequence\n              information\n\n              as the forward read, albeit in reverse complement. For this\n              reason, the\n\n              default behaviour is to entirely drop the reverse read. By\n              specifying\n\n              \"true\" for this parameter, the reverse read will also be retained,\n              which\n\n              may be useful e.g. if the downstream tools cannot handle a\n              combination of\n\n              paired and unpaired reads.\n            name: keepBothReads\n            type: boolean?\n        name: illuminaClipping\n        type: record\n      - fields:\n          - name: targetLength\n            type: int\n          - name: strictness\n            type: int\n        name: maxinfo\n        type: record\n  - class: InlineJavascriptRequirement\n  - class: ShellCommandRequirement\n\nhints:\n  - $import: trimmomatic-docker.yml\n  - $import: trimmomatic-bioconda.yml\n\ninputs:\n  - id: avgqual\n    type: int?\n    inputBinding:\n      position: 20\n      prefix: 'AVGQUAL:'\n      separate: false\n    doc: |\n      Drop the read if the average quality is below the specified level\n  - id: crop\n    type: int?\n    inputBinding:\n      position: 19\n      prefix: 'CROP:'\n      separate: false\n    doc: >\n      Removes bases regardless of quality from the end of the read, so that the\n\n      read has maximally the specified length after this step has been\n\n      performed. Steps performed after CROP might of course further shorten the\n\n      read. The value is the number of bases to keep, from the start of the\n      read.\n  - id: headcrop\n    type: int?\n    inputBinding:\n      position: 18\n      prefix: 'HEADCROP:'\n      separate: false\n    doc: |\n      Removes the specified number of bases, regardless of quality, from the\n      beginning of the read.\n      The numbser specified is the number of bases to keep, from the start of\n      the read.\n  - id: illuminaClip\n    type: string?\n    inputBinding:\n      position: 11\n      valueFrom: |\n        ${\n            return 'ILLUMINACLIP:' + self;\n         }\n    doc: Cut adapter and other illumina-specific sequences from the read.\n  - id: leading\n    type: int?\n    inputBinding:\n      position: 20\n      prefix: 'LEADING:'\n      separate: false\n    doc: |\n      Remove low quality bases from the beginning. As long as a base has a\n      value below this threshold the base is removed and the next base will be\n      investigated.\n  - id: maxinfo\n    type: int?\n    inputBinding:\n      position: 15\n      valueFrom: |\n        ${ if ( self ) {\n             return \"MAXINFO:\" + self.targetLength + \":\" + self.strictness;\n           } else {\n             return self;\n           }\n         }\n    doc: |\n      Performs an adaptive quality trim, balancing the benefits of retaining\n      longer reads against the costs of retaining bases with errors.\n      <targetLength>: This specifies the read length which is likely to allow\n      the location of the read within the target sequence to be determined.\n      <strictness>: This value, which should be set between 0 and 1, specifies\n      the balance between preserving as much read length as possible vs.\n      removal of incorrect bases. A low value of this parameter (<0.2) favours\n      longer reads, while a high value (>0.8) favours read correctness.\n  - id: minlen\n    type: int?\n    inputBinding:\n      position: 22\n      prefix: 'MINLEN:'\n      separate: false\n    doc: |\n      This module removes reads that fall below the specified minimal length.\n      If required, it should normally be after all other processing steps.\n      Reads removed by this step will be counted and included in the \"dropped\n      reads\" count presented in the trimmomatic summary.\n  - id: phred\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: '-phred'\n      separate: false\n    doc: |\n      \"33\" or \"64\" specifies the base quality encoding. Default: 64\n  - id: input_files\n    type: File[]\n    inputBinding:\n      position: 4\n    doc: Array of FASTQ files\n  - id: trimmomatic_options\n    type: string?\n    default: \"\"\n    inputBinding:\n      shellQuote: false\n      position: 5\n      valueFrom: |\n        ${\n           var listing = \"\";\n           var nameroot = inputs.input_files[0].nameroot;\n           for (var i = 0; i < inputs.input_files.length; i++) {\n              var nameroot = inputs.input_files[i].nameroot;\n              if (nameroot.endsWith(\".fastq\")){\n                 nameroot = nameroot.replace(\".fastq\", \"\")\n              }else if (nameroot.endsWith(\".fq\")){\n                 nameroot = nameroot.replace(\".fq\", \"\")\n              }\n              if (nameroot.endsWith(\"_1\")){\n                 nameroot = nameroot.slice(0, -2);\n                 listing += nameroot + \"_1.fastq.gz \"\n                 listing += nameroot + \"_U_1.fastq.gz \";\n              }else if (nameroot.endsWith(\"_2\")){\n                 nameroot = nameroot.slice(0, -2);\n                 listing += nameroot + \"_2.fastq.gz \"\n                 listing += nameroot + \"_U_2.fastq.gz \";\n              }else if (nameroot.includes(\"_R1_\") || nameroot.includes(\"_R2_\")){\n                 listing += nameroot + \".fastq.gz \"\n                 listing += nameroot + \"_U.fastq.gz \";\n              }\n           }\n           return listing;\n         }\n  - id: slidingwindow\n    type: slidingWindow?\n    inputBinding:\n      position: 15\n      valueFrom: |\n        ${ if ( self ) {\n             return \"SLIDINGWINDOW:\" + self.windowSize + \":\"\n               + self.requiredQuality;\n           } else {\n             return self;\n           }\n         }\n    doc: |\n      Perform a sliding window trimming, cutting once the average quality\n      within the window falls below a threshold. By considering multiple\n      bases, a single poor quality base will not cause the removal of high\n      quality data later in the read.\n      <windowSize> specifies the number of bases to average across\n      <requiredQuality> specifies the average quality required\n  - id: threads\n    type: int\n    inputBinding:\n      position: 2\n      prefix: '-threads'\n  - id: tophred33\n    type: boolean?\n    inputBinding:\n      position: 12\n      prefix: TOPHRED33\n      separate: false\n    doc: This (re)encodes the quality part of the FASTQ file to base 33.\n  - id: tophred64\n    type: boolean?\n    inputBinding:\n      position: 12\n      prefix: TOPHRED64\n      separate: false\n    doc: This (re)encodes the quality part of the FASTQ file to base 64.\n  - id: trailing\n    type: int?\n    inputBinding:\n      position: 20\n      prefix: 'TRAILING:'\n      separate: false\n    doc: |\n      Remove low quality bases from the end. As long as a base has a value\n      below this threshold the base is removed and the next base (which as\n      trimmomatic is starting from the 3' prime end would be base preceding\n      the just removed base) will be investigated. This approach can be used\n      removing the special Illumina \"low quality segment\" regions (which are\n      marked with quality score of 2), but we recommend Sliding Window or\n      MaxInfo instead\noutputs:\n  - id: trimmed\n    type: File[]\n    outputBinding:\n      glob: |\n        ${\n            var files = [];\n            for(var i = 0; i < inputs.input_files.length; i++){\n               var nameroot = inputs.input_files[i].nameroot;\n               if (nameroot.endsWith(\".fastq\")){\n                  nameroot = nameroot.replace(\".fastq\", \"\")\n               }else if (nameroot.endsWith(\".fq\")){\n                  nameroot = nameroot.replace(\".fq\", \"\")\n               }\n               if (nameroot.endsWith(\"_1\")){\n                  nameroot = nameroot.slice(0, -2);\n                  files.push(nameroot + \"_1.fastq.gz\");\n               }else if (nameroot.endsWith(\"_2\")){\n                  nameroot = nameroot.slice(0, -2);\n                  files.push(nameroot + \"_2.fastq.gz\");\n               }else if (nameroot.includes(\"_R1_\") || nameroot.includes(\"_R2_\")){\n                  nameroot = nameroot + \".fastq.gz\"\n                  files.push(nameroot);\n               }\n            }\n            return files;\n         }\n  - id: error\n    type: File[]\n    outputBinding:\n      glob: \"*_U_*.fastq.gz\"\n\nbaseCommand:\n  - trimmomatic\n  - PE\n\n$namespaces:\n  edam: 'http://edamontology.org/'\n  s: 'http://schema.org/'\n\n$schemas:\n  - 'http://edamontology.org/EDAM_1.16.owl'\n  - 'https://schema.org/version/latest/schemaorg-current-http.rdf'\n's:author':\n  - class: 's:Person'\n    's:email': 'mailto:r78v10a07@gmail.com'\n    's:identifier': 'https://orcid.org/0000-0002-4108-5982'\n    's:name': Roberto Vera Alvarez\n's:codeRepository': 'https://github.com/alexdobin/STAR'\n's:license': 'https://spdx.org/licenses/OPL-1.0'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'avgqual', 'type': 'int?', 'inputBinding': {'position': 20, 'prefix': 'AVGQUAL:', 'separate': False}, 'doc': 'Drop the read if the average quality is below the specified level\\n'}, {'id': 'crop', 'type': 'int?', 'inputBinding': {'position': 19, 'prefix': 'CROP:', 'separate': False}, 'doc': 'Removes bases regardless of quality from the end of the read, so that the\\nread has maximally the specified length after this step has been\\nperformed. Steps performed after CROP might of course further shorten the\\nread. The value is the number of bases to keep, from the start of the read.\\n'}, {'id': 'headcrop', 'type': 'int?', 'inputBinding': {'position': 18, 'prefix': 'HEADCROP:', 'separate': False}, 'doc': 'Removes the specified number of bases, regardless of quality, from the\\nbeginning of the read.\\nThe numbser specified is the number of bases to keep, from the start of\\nthe read.\\n'}, {'id': 'illuminaClip', 'type': 'string?', 'inputBinding': {'position': 11, 'valueFrom': \"${\\n    return 'ILLUMINACLIP:' + self;\\n }\\n\"}, 'doc': 'Cut adapter and other illumina-specific sequences from the read.'}, {'id': 'leading', 'type': 'int?', 'inputBinding': {'position': 20, 'prefix': 'LEADING:', 'separate': False}, 'doc': 'Remove low quality bases from the beginning. As long as a base has a\\nvalue below this threshold the base is removed and the next base will be\\ninvestigated.\\n'}, {'id': 'maxinfo', 'type': 'int?', 'inputBinding': {'position': 15, 'valueFrom': '${ if ( self ) {\\n     return \"MAXINFO:\" + self.targetLength + \":\" + self.strictness;\\n   } else {\\n     return self;\\n   }\\n }\\n'}, 'doc': 'Performs an adaptive quality trim, balancing the benefits of retaining\\nlonger reads against the costs of retaining bases with errors.\\n<targetLength>: This specifies the read length which is likely to allow\\nthe location of the read within the target sequence to be determined.\\n<strictness>: This value, which should be set between 0 and 1, specifies\\nthe balance between preserving as much read length as possible vs.\\nremoval of incorrect bases. A low value of this parameter (<0.2) favours\\nlonger reads, while a high value (>0.8) favours read correctness.\\n'}, {'id': 'minlen', 'type': 'int?', 'inputBinding': {'position': 22, 'prefix': 'MINLEN:', 'separate': False}, 'doc': 'This module removes reads that fall below the specified minimal length.\\nIf required, it should normally be after all other processing steps.\\nReads removed by this step will be counted and included in the \"dropped\\nreads\" count presented in the trimmomatic summary.\\n'}, {'id': 'phred', 'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-phred', 'separate': False}, 'doc': '\"33\" or \"64\" specifies the base quality encoding. Default: 64\\n'}, {'id': 'input_files', 'type': 'File[]', 'inputBinding': {'position': 4}, 'doc': 'Array of FASTQ files'}, {'id': 'trimmomatic_options', 'type': 'string?', 'default': '', 'inputBinding': {'shellQuote': False, 'position': 5, 'valueFrom': '${\\n   var listing = \"\";\\n   var nameroot = inputs.input_files[0].nameroot;\\n   for (var i = 0; i < inputs.input_files.length; i++) {\\n      var nameroot = inputs.input_files[i].nameroot;\\n      if (nameroot.endsWith(\".fastq\")){\\n         nameroot = nameroot.replace(\".fastq\", \"\")\\n      }else if (nameroot.endsWith(\".fq\")){\\n         nameroot = nameroot.replace(\".fq\", \"\")\\n      }\\n      if (nameroot.endsWith(\"_1\")){\\n         nameroot = nameroot.slice(0, -2);\\n         listing += nameroot + \"_1.fastq.gz \"\\n         listing += nameroot + \"_U_1.fastq.gz \";\\n      }else if (nameroot.endsWith(\"_2\")){\\n         nameroot = nameroot.slice(0, -2);\\n         listing += nameroot + \"_2.fastq.gz \"\\n         listing += nameroot + \"_U_2.fastq.gz \";\\n      }else if (nameroot.includes(\"_R1_\") || nameroot.includes(\"_R2_\")){\\n         listing += nameroot + \".fastq.gz \"\\n         listing += nameroot + \"_U.fastq.gz \";\\n      }\\n   }\\n   return listing;\\n }\\n'}}, {'id': 'slidingwindow', 'type': 'slidingWindow?', 'inputBinding': {'position': 15, 'valueFrom': '${ if ( self ) {\\n     return \"SLIDINGWINDOW:\" + self.windowSize + \":\"\\n       + self.requiredQuality;\\n   } else {\\n     return self;\\n   }\\n }\\n'}, 'doc': 'Perform a sliding window trimming, cutting once the average quality\\nwithin the window falls below a threshold. By considering multiple\\nbases, a single poor quality base will not cause the removal of high\\nquality data later in the read.\\n<windowSize> specifies the number of bases to average across\\n<requiredQuality> specifies the average quality required\\n'}, {'id': 'threads', 'type': 'int', 'inputBinding': {'position': 2, 'prefix': '-threads'}}, {'id': 'tophred33', 'type': 'boolean?', 'inputBinding': {'position': 12, 'prefix': 'TOPHRED33', 'separate': False}, 'doc': 'This (re)encodes the quality part of the FASTQ file to base 33.'}, {'id': 'tophred64', 'type': 'boolean?', 'inputBinding': {'position': 12, 'prefix': 'TOPHRED64', 'separate': False}, 'doc': 'This (re)encodes the quality part of the FASTQ file to base 64.'}, {'id': 'trailing', 'type': 'int?', 'inputBinding': {'position': 20, 'prefix': 'TRAILING:', 'separate': False}, 'doc': 'Remove low quality bases from the end. As long as a base has a value\\nbelow this threshold the base is removed and the next base (which as\\ntrimmomatic is starting from the 3\\' prime end would be base preceding\\nthe just removed base) will be investigated. This approach can be used\\nremoving the special Illumina \"low quality segment\" regions (which are\\nmarked with quality score of 2), but we recommend Sliding Window or\\nMaxInfo instead\\n'}]",
    "cwl_outputs": "[{'id': 'trimmed', 'type': 'File[]', 'outputBinding': {'glob': '${\\n    var files = [];\\n    for(var i = 0; i < inputs.input_files.length; i++){\\n       var nameroot = inputs.input_files[i].nameroot;\\n       if (nameroot.endsWith(\".fastq\")){\\n          nameroot = nameroot.replace(\".fastq\", \"\")\\n       }else if (nameroot.endsWith(\".fq\")){\\n          nameroot = nameroot.replace(\".fq\", \"\")\\n       }\\n       if (nameroot.endsWith(\"_1\")){\\n          nameroot = nameroot.slice(0, -2);\\n          files.push(nameroot + \"_1.fastq.gz\");\\n       }else if (nameroot.endsWith(\"_2\")){\\n          nameroot = nameroot.slice(0, -2);\\n          files.push(nameroot + \"_2.fastq.gz\");\\n       }else if (nameroot.includes(\"_R1_\") || nameroot.includes(\"_R2_\")){\\n          nameroot = nameroot + \".fastq.gz\"\\n          files.push(nameroot);\\n       }\\n    }\\n    return files;\\n }\\n'}}, {'id': 'error', 'type': 'File[]', 'outputBinding': {'glob': '*_U_*.fastq.gz'}}]",
    "cwl_hints": "[{'$import': 'trimmomatic-docker.yml'}, {'$import': 'trimmomatic-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['trimmomatic', 'PE']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 's': 'http://schema.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.16.owl', 'https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Trimmomatic is a fast, multithreaded command line tool that can be used to trim and crop\nIllumina (FASTQ) data as well as to remove adapters\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "https://spdx.org/licenses/OPL-1.0",
    "cwl_s:creator": null,
    "cwl_label": "Trimmomatic",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/alexdobin/STAR",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:email': 'mailto:r78v10a07@gmail.com', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "tools/trimmomatic/trimmomatic-SE.cwl",
    "sha": "84ecbb53abda7069b1b0df4d9ea74b5d0a8ce119",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/trimmomatic/trimmomatic-SE.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nlabel: Trimmomatic\ndoc: >\n  Trimmomatic is a fast, multithreaded command line tool that can be used to\n  trim and crop\n\n  Illumina (FASTQ) data as well as to remove adapters\n\nrequirements:\n  - class: ResourceRequirement\n    coresMin: $(inputs.threads)\n  - class: SchemaDefRequirement\n    types:\n      - name: end_mode\n        symbols:\n          - SE\n          - PE\n        type: enum\n      - fields:\n          - name: windowSize\n            type: int\n          - name: requiredQuality\n            type: int\n        name: slidingWindow\n        type: record\n      - name: phred\n        symbols:\n          - '64'\n          - '33'\n        type: enum\n      - fields:\n          - doc: >\n              FASTA file containing adapters, PCR sequences, etc. It is used to\n              search\n\n              for and remove these sequences in the input FASTQ file(s)\n            name: adapters\n            type: File\n          - doc: >\n              specifies the maximum mismatch count which will still allow a full\n              match\n\n              to be performed\n            name: seedMismatches\n            type: int\n          - doc: >\n              specifies how accurate the match between the two 'adapter ligated'\n              reads\n\n              must be for PE palindrome read alignment.\n            name: palindromeClipThreshold\n            type: int\n          - doc: >\n              specifies how accurate the match between any adapter etc. sequence\n              must\n\n              be against a read\n            name: simpleClipThreshold\n            type: int\n          - doc: >\n              In addition to the alignment score, palindrome mode can verify\n              that a\n\n              minimum length of adapter has been detected. If unspecified, this\n\n              defaults to 8 bases, for historical reasons. However, since\n              palindrome\n\n              mode has a very low false positive rate, this can be safely\n              reduced, even\n\n              down to 1, to allow shorter adapter fragments to be removed.\n            name: minAdapterLength\n            type: int?\n          - doc: >\n              After read-though has been detected by palindrome mode, and the\n              adapter\n\n              sequence removed, the reverse read contains the same sequence\n              information\n\n              as the forward read, albeit in reverse complement. For this\n              reason, the\n\n              default behaviour is to entirely drop the reverse read. By\n              specifying\n\n              \"true\" for this parameter, the reverse read will also be retained,\n              which\n\n              may be useful e.g. if the downstream tools cannot handle a\n              combination of\n\n              paired and unpaired reads.\n            name: keepBothReads\n            type: boolean?\n        name: illuminaClipping\n        type: record\n      - fields:\n          - name: targetLength\n            type: int\n          - name: strictness\n            type: int\n        name: maxinfo\n        type: record\n  - class: InlineJavascriptRequirement\n  - class: ShellCommandRequirement\n\nhints:\n  - $import: trimmomatic-docker.yml\n  - $import: trimmomatic-bioconda.yml\n\ninputs:\n  - id: avgqual\n    type: int?\n    inputBinding:\n      position: 20\n      prefix: 'AVGQUAL:'\n      separate: false\n    doc: |\n      Drop the read if the average quality is below the specified level\n  - id: crop\n    type: int?\n    inputBinding:\n      position: 19\n      prefix: 'CROP:'\n      separate: false\n    doc: >\n      Removes bases regardless of quality from the end of the read, so that the\n\n      read has maximally the specified length after this step has been\n\n      performed. Steps performed after CROP might of course further shorten the\n\n      read. The value is the number of bases to keep, from the start of the\n      read.\n  - id: headcrop\n    type: int?\n    inputBinding:\n      position: 18\n      prefix: 'HEADCROP:'\n      separate: false\n    doc: |\n      Removes the specified number of bases, regardless of quality, from the\n      beginning of the read.\n      The numbser specified is the number of bases to keep, from the start of\n      the read.\n  - id: illuminaClip\n    type: string?\n    inputBinding:\n      position: 11\n      valueFrom: |\n        ${\n            return 'ILLUMINACLIP:' + self;\n         }\n    doc: Cut adapter and other illumina-specific sequences from the read.\n  - id: leading\n    type: int?\n    inputBinding:\n      position: 20\n      prefix: 'LEADING:'\n      separate: false\n    doc: |\n      Remove low quality bases from the beginning. As long as a base has a\n      value below this threshold the base is removed and the next base will be\n      investigated.\n  - id: maxinfo\n    type: int?\n    inputBinding:\n      position: 15\n      valueFrom: |\n        ${ if ( self ) {\n             return \"MAXINFO:\" + self.targetLength + \":\" + self.strictness;\n           } else {\n             return self;\n           }\n         }\n    doc: |\n      Performs an adaptive quality trim, balancing the benefits of retaining\n      longer reads against the costs of retaining bases with errors.\n      <targetLength>: This specifies the read length which is likely to allow\n      the location of the read within the target sequence to be determined.\n      <strictness>: This value, which should be set between 0 and 1, specifies\n      the balance between preserving as much read length as possible vs.\n      removal of incorrect bases. A low value of this parameter (<0.2) favours\n      longer reads, while a high value (>0.8) favours read correctness.\n  - id: minlen\n    type: int?\n    inputBinding:\n      position: 22\n      prefix: 'MINLEN:'\n      separate: false\n    doc: |\n      This module removes reads that fall below the specified minimal length.\n      If required, it should normally be after all other processing steps.\n      Reads removed by this step will be counted and included in the \"dropped\n      reads\" count presented in the trimmomatic summary.\n  - id: phred\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: '-phred'\n      separate: false\n    doc: |\n      \"33\" or \"64\" specifies the base quality encoding. Default: 64\n  - id: input_files\n    type: File\n    inputBinding:\n      position: 4\n    doc: FASTQ file\n  - id: trimmomatic_options\n    type: string?\n    default: \"\"\n    inputBinding:\n      shellQuote: false\n      position: 5\n      valueFrom: |\n        ${\n           var nameroot = inputs.input_files.nameroot;\n           if (nameroot.endsWith(\".fastq\")){\n             nameroot = nameroot.replace(\".fastq\", \"\")\n           }else if (nameroot.endsWith(\".fq\")){\n             nameroot = nameroot.replace(\".fq\", \"\")\n           }\n           var listing = nameroot + \".fastq.gz \";\n           return listing;\n         }\n  - id: slidingwindow\n    type: slidingWindow?\n    inputBinding:\n      position: 15\n      valueFrom: |\n        ${ if ( self ) {\n             return \"SLIDINGWINDOW:\" + self.windowSize + \":\"\n               + self.requiredQuality;\n           } else {\n             return self;\n           }\n         }\n    doc: |\n      Perform a sliding window trimming, cutting once the average quality\n      within the window falls below a threshold. By considering multiple\n      bases, a single poor quality base will not cause the removal of high\n      quality data later in the read.\n      <windowSize> specifies the number of bases to average across\n      <requiredQuality> specifies the average quality required\n  - id: threads\n    type: int\n    inputBinding:\n      position: 2\n      prefix: '-threads'\n  - id: tophred33\n    type: boolean?\n    inputBinding:\n      position: 12\n      prefix: TOPHRED33\n      separate: false\n    doc: This (re)encodes the quality part of the FASTQ file to base 33.\n  - id: tophred64\n    type: boolean?\n    inputBinding:\n      position: 12\n      prefix: TOPHRED64\n      separate: false\n    doc: This (re)encodes the quality part of the FASTQ file to base 64.\n  - id: trailing\n    type: int?\n    inputBinding:\n      position: 20\n      prefix: 'TRAILING:'\n      separate: false\n    doc: |\n      Remove low quality bases from the end. As long as a base has a value\n      below this threshold the base is removed and the next base (which as\n      trimmomatic is starting from the 3' prime end would be base preceding\n      the just removed base) will be investigated. This approach can be used\n      removing the special Illumina \"low quality segment\" regions (which are\n      marked with quality score of 2), but we recommend Sliding Window or\n      MaxInfo instead\noutputs:\n  - id: trimmed\n    type: File[]\n    outputBinding:\n      glob: \"*.fastq.gz\"\n\nbaseCommand:\n  - trimmomatic\n  - SE\n\n$namespaces:\n  edam: 'http://edamontology.org/'\n  s: 'http://schema.org/'\n\n$schemas:\n  - 'http://edamontology.org/EDAM_1.16.owl'\n  - 'https://schema.org/version/latest/schemaorg-current-http.rdf'\n's:author':\n  - class: 's:Person'\n    's:email': 'mailto:r78v10a07@gmail.com'\n    's:identifier': 'https://orcid.org/0000-0002-4108-5982'\n    's:name': Roberto Vera Alvarez\n's:codeRepository': 'https://github.com/alexdobin/STAR'\n's:license': 'https://spdx.org/licenses/OPL-1.0'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'avgqual', 'type': 'int?', 'inputBinding': {'position': 20, 'prefix': 'AVGQUAL:', 'separate': False}, 'doc': 'Drop the read if the average quality is below the specified level\\n'}, {'id': 'crop', 'type': 'int?', 'inputBinding': {'position': 19, 'prefix': 'CROP:', 'separate': False}, 'doc': 'Removes bases regardless of quality from the end of the read, so that the\\nread has maximally the specified length after this step has been\\nperformed. Steps performed after CROP might of course further shorten the\\nread. The value is the number of bases to keep, from the start of the read.\\n'}, {'id': 'headcrop', 'type': 'int?', 'inputBinding': {'position': 18, 'prefix': 'HEADCROP:', 'separate': False}, 'doc': 'Removes the specified number of bases, regardless of quality, from the\\nbeginning of the read.\\nThe numbser specified is the number of bases to keep, from the start of\\nthe read.\\n'}, {'id': 'illuminaClip', 'type': 'string?', 'inputBinding': {'position': 11, 'valueFrom': \"${\\n    return 'ILLUMINACLIP:' + self;\\n }\\n\"}, 'doc': 'Cut adapter and other illumina-specific sequences from the read.'}, {'id': 'leading', 'type': 'int?', 'inputBinding': {'position': 20, 'prefix': 'LEADING:', 'separate': False}, 'doc': 'Remove low quality bases from the beginning. As long as a base has a\\nvalue below this threshold the base is removed and the next base will be\\ninvestigated.\\n'}, {'id': 'maxinfo', 'type': 'int?', 'inputBinding': {'position': 15, 'valueFrom': '${ if ( self ) {\\n     return \"MAXINFO:\" + self.targetLength + \":\" + self.strictness;\\n   } else {\\n     return self;\\n   }\\n }\\n'}, 'doc': 'Performs an adaptive quality trim, balancing the benefits of retaining\\nlonger reads against the costs of retaining bases with errors.\\n<targetLength>: This specifies the read length which is likely to allow\\nthe location of the read within the target sequence to be determined.\\n<strictness>: This value, which should be set between 0 and 1, specifies\\nthe balance between preserving as much read length as possible vs.\\nremoval of incorrect bases. A low value of this parameter (<0.2) favours\\nlonger reads, while a high value (>0.8) favours read correctness.\\n'}, {'id': 'minlen', 'type': 'int?', 'inputBinding': {'position': 22, 'prefix': 'MINLEN:', 'separate': False}, 'doc': 'This module removes reads that fall below the specified minimal length.\\nIf required, it should normally be after all other processing steps.\\nReads removed by this step will be counted and included in the \"dropped\\nreads\" count presented in the trimmomatic summary.\\n'}, {'id': 'phred', 'type': 'int?', 'inputBinding': {'position': 3, 'prefix': '-phred', 'separate': False}, 'doc': '\"33\" or \"64\" specifies the base quality encoding. Default: 64\\n'}, {'id': 'input_files', 'type': 'File', 'inputBinding': {'position': 4}, 'doc': 'FASTQ file'}, {'id': 'trimmomatic_options', 'type': 'string?', 'default': '', 'inputBinding': {'shellQuote': False, 'position': 5, 'valueFrom': '${\\n   var nameroot = inputs.input_files.nameroot;\\n   if (nameroot.endsWith(\".fastq\")){\\n     nameroot = nameroot.replace(\".fastq\", \"\")\\n   }else if (nameroot.endsWith(\".fq\")){\\n     nameroot = nameroot.replace(\".fq\", \"\")\\n   }\\n   var listing = nameroot + \".fastq.gz \";\\n   return listing;\\n }\\n'}}, {'id': 'slidingwindow', 'type': 'slidingWindow?', 'inputBinding': {'position': 15, 'valueFrom': '${ if ( self ) {\\n     return \"SLIDINGWINDOW:\" + self.windowSize + \":\"\\n       + self.requiredQuality;\\n   } else {\\n     return self;\\n   }\\n }\\n'}, 'doc': 'Perform a sliding window trimming, cutting once the average quality\\nwithin the window falls below a threshold. By considering multiple\\nbases, a single poor quality base will not cause the removal of high\\nquality data later in the read.\\n<windowSize> specifies the number of bases to average across\\n<requiredQuality> specifies the average quality required\\n'}, {'id': 'threads', 'type': 'int', 'inputBinding': {'position': 2, 'prefix': '-threads'}}, {'id': 'tophred33', 'type': 'boolean?', 'inputBinding': {'position': 12, 'prefix': 'TOPHRED33', 'separate': False}, 'doc': 'This (re)encodes the quality part of the FASTQ file to base 33.'}, {'id': 'tophred64', 'type': 'boolean?', 'inputBinding': {'position': 12, 'prefix': 'TOPHRED64', 'separate': False}, 'doc': 'This (re)encodes the quality part of the FASTQ file to base 64.'}, {'id': 'trailing', 'type': 'int?', 'inputBinding': {'position': 20, 'prefix': 'TRAILING:', 'separate': False}, 'doc': 'Remove low quality bases from the end. As long as a base has a value\\nbelow this threshold the base is removed and the next base (which as\\ntrimmomatic is starting from the 3\\' prime end would be base preceding\\nthe just removed base) will be investigated. This approach can be used\\nremoving the special Illumina \"low quality segment\" regions (which are\\nmarked with quality score of 2), but we recommend Sliding Window or\\nMaxInfo instead\\n'}]",
    "cwl_outputs": "[{'id': 'trimmed', 'type': 'File[]', 'outputBinding': {'glob': '*.fastq.gz'}}]",
    "cwl_hints": "[{'$import': 'trimmomatic-docker.yml'}, {'$import': 'trimmomatic-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['trimmomatic', 'SE']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 's': 'http://schema.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.16.owl', 'https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Trimmomatic is a fast, multithreaded command line tool that can be used to trim and crop\nIllumina (FASTQ) data as well as to remove adapters\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "https://spdx.org/licenses/OPL-1.0",
    "cwl_s:creator": null,
    "cwl_label": "Trimmomatic",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/alexdobin/STAR",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:email': 'mailto:r78v10a07@gmail.com', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "tools/trinity/align_and_estimate_abundance.cwl",
    "sha": "be99167f147050fb2655ea43d4604fbcb409a14b",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/trinity/align_and_estimate_abundance.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Trinity\ndoc: Trinity assembles transcript sequences from Illumina RNA-Seq data.\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    coresMin: $(inputs.thread_count)\n\nhints:\n  - $import: trinity-docker.yml\n  - $import: trinity-bioconda.yml\n\ninputs:\n  prep_reference:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --prep_reference\n  seqType:\n    type: string\n    inputBinding:\n      position: 2\n      prefix: --seqType\n  transcripts:\n    type: File\n    inputBinding:\n      position: 3\n      prefix: --transcripts\n  thread_count:\n    type: int?\n    default: 4\n    inputBinding:\n      position: 4\n      prefix: --thread_count\n  est_method:\n    type: string\n    inputBinding:\n      position: 5\n      prefix: --est_method\n  left:\n    type: File?\n    inputBinding:\n      position: 6\n      prefix: --left\n  right:\n    type: File?\n    inputBinding:\n      position: 7\n      prefix: --right\n  single:\n    type: File?\n    inputBinding:\n      position: 6\n      prefix: --single\n  samples_file:\n    type: File?\n    inputBinding:\n      position: 7\n      prefix: --samples_file\n  output_dir:\n    type: string\n    inputBinding:\n      position: 8\n      prefix: --output_dir\n  trinity_mode:\n    type: boolean?\n    inputBinding:\n      position: 8\n      prefix: --trinity_mode\n\noutputs:\n  output:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.output_dir)\n\nbaseCommand: [\"align_and_estimate_abundance.pl\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/ncbi/TPMCalculator\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'prep_reference': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--prep_reference'}}, 'seqType': {'type': 'string', 'inputBinding': {'position': 2, 'prefix': '--seqType'}}, 'transcripts': {'type': 'File', 'inputBinding': {'position': 3, 'prefix': '--transcripts'}}, 'thread_count': {'type': 'int?', 'default': 4, 'inputBinding': {'position': 4, 'prefix': '--thread_count'}}, 'est_method': {'type': 'string', 'inputBinding': {'position': 5, 'prefix': '--est_method'}}, 'left': {'type': 'File?', 'inputBinding': {'position': 6, 'prefix': '--left'}}, 'right': {'type': 'File?', 'inputBinding': {'position': 7, 'prefix': '--right'}}, 'single': {'type': 'File?', 'inputBinding': {'position': 6, 'prefix': '--single'}}, 'samples_file': {'type': 'File?', 'inputBinding': {'position': 7, 'prefix': '--samples_file'}}, 'output_dir': {'type': 'string', 'inputBinding': {'position': 8, 'prefix': '--output_dir'}}, 'trinity_mode': {'type': 'boolean?', 'inputBinding': {'position': 8, 'prefix': '--trinity_mode'}}}",
    "cwl_outputs": "{'output': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.output_dir)'}}}",
    "cwl_hints": "[{'$import': 'trinity-docker.yml'}, {'$import': 'trinity-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['align_and_estimate_abundance.pl']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ShellCommandRequirement': {}, 'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.thread_count)'}}",
    "cwl_doc": "Trinity assembles transcript sequences from Illumina RNA-Seq data.",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Trinity",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/ncbi/TPMCalculator",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/trinity/trinity.cwl",
    "sha": "e68f8e0e504c7a220c6b3b9c3f4c452881fc6fb5",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/trinity/trinity.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: Trinity\ndoc: Trinity assembles transcript sequences from Illumina RNA-Seq data.\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMax: |\n      ${\n          return inputs.max_memory ? parseInt(inputs.max_memory.replace('G','')) : 2000\n      }\n    ramMin: 2000\n    coresMin: $(inputs.CPU)\n\nhints:\n  - $import: trinity-docker.yml\n  - $import: trinity-bioconda.yml\n\ninputs:\n  max_memory:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: --max_memory\n  CPU:\n    type: int\n    inputBinding:\n      position: 2\n      prefix: --CPU\n  output:\n    type: string\n    inputBinding:\n      position: 3\n      prefix: --output\n  seqType:\n    type: string\n    inputBinding:\n      position: 4\n      prefix: --seqType\n  SS_lib_type:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: --SS_lib_type\n  left:\n    type: File[]?\n    inputBinding:\n      position: 6\n      prefix: --left\n      shellQuote: False\n      itemSeparator: ','\n  right:\n    type: File[]?\n    inputBinding:\n      position: 7\n      prefix: --right\n      shellQuote: False\n      itemSeparator: ','\n  single:\n    type: File[]?\n    inputBinding:\n      position: 6\n      prefix: --single\n      shellQuote: False\n      itemSeparator: ','\n  no_version_check:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --no_version_check\n\noutputs:\n  output:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.output)\n\nbaseCommand: [\"Trinity\"]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\ns:codeRepository: https://github.com/ncbi/TPMCalculator\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'max_memory': {'type': 'string', 'inputBinding': {'position': 1, 'prefix': '--max_memory'}}, 'CPU': {'type': 'int', 'inputBinding': {'position': 2, 'prefix': '--CPU'}}, 'output': {'type': 'string', 'inputBinding': {'position': 3, 'prefix': '--output'}}, 'seqType': {'type': 'string', 'inputBinding': {'position': 4, 'prefix': '--seqType'}}, 'SS_lib_type': {'type': 'string?', 'inputBinding': {'position': 5, 'prefix': '--SS_lib_type'}}, 'left': {'type': 'File[]?', 'inputBinding': {'position': 6, 'prefix': '--left', 'shellQuote': False, 'itemSeparator': ','}}, 'right': {'type': 'File[]?', 'inputBinding': {'position': 7, 'prefix': '--right', 'shellQuote': False, 'itemSeparator': ','}}, 'single': {'type': 'File[]?', 'inputBinding': {'position': 6, 'prefix': '--single', 'shellQuote': False, 'itemSeparator': ','}}, 'no_version_check': {'type': 'boolean?', 'inputBinding': {'position': 1, 'prefix': '--no_version_check'}}}",
    "cwl_outputs": "{'output': {'type': 'Directory', 'outputBinding': {'glob': '$(inputs.output)'}}}",
    "cwl_hints": "[{'$import': 'trinity-docker.yml'}, {'$import': 'trinity-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Trinity']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ShellCommandRequirement': {}, 'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'ramMax': \"${\\n    return inputs.max_memory ? parseInt(inputs.max_memory.replace('G','')) : 2000\\n}\\n\", 'ramMin': 2000, 'coresMin': '$(inputs.CPU)'}}",
    "cwl_doc": "Trinity assembles transcript sequences from Illumina RNA-Seq data.",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Trinity",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/ncbi/TPMCalculator",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/ucsc/ucsc-bedtogenepred.cwl",
    "sha": "f9b253d72a6a0bb7e56327761ab117c892f5e969",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/ucsc/ucsc-bedtogenepred.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: ucsc-bedtogenepred\ndoc: UCSC genepredtobed utility\n\nhints:\n  - $import: ucsc-bedtogenepred-docker.yml\n  - $import: ucsc-bedtogenepred-bioconda.yml\n\ninputs:\n  bed:\n    type: File\n    inputBinding:\n      position: 1\n  genePred:\n    type: string\n    inputBinding:\n      position: 2\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.genePred)\n\nbaseCommand: [\"bedToGenePred\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bed': {'type': 'File', 'inputBinding': {'position': 1}}, 'genePred': {'type': 'string', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.genePred)'}}}",
    "cwl_hints": "[{'$import': 'ucsc-bedtogenepred-docker.yml'}, {'$import': 'ucsc-bedtogenepred-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bedToGenePred']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "UCSC genepredtobed utility",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ucsc-bedtogenepred",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/ucsc/ucsc-genepredtobed.cwl",
    "sha": "4175e42b2863c5eec6dd41eb403b0612fa0cee0e",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/ucsc/ucsc-genepredtobed.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: ucsc-genepredtobed\ndoc: UCSC genepredtobed utility\n\nhints:\n  - $import: ucsc-genepredtobed-docker.yml\n  - $import: ucsc-genepredtobed-bioconda.yml\n\ninputs:\n  genePred:\n    type: File\n    inputBinding:\n      position: 1\n  bed:\n    type: string\n    inputBinding:\n      position: 2\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.bed)\n\nbaseCommand: [\"genePredToBed\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'genePred': {'type': 'File', 'inputBinding': {'position': 1}}, 'bed': {'type': 'string', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.bed)'}}}",
    "cwl_hints": "[{'$import': 'ucsc-genepredtobed-docker.yml'}, {'$import': 'ucsc-genepredtobed-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['genePredToBed']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "UCSC genepredtobed utility",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ucsc-genepredtobed",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/ucsc/ucsc-genepredtogtf.cwl",
    "sha": "dc7adec0d3e1df5bd5846474d4426b02f845bf63",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/ucsc/ucsc-genepredtogtf.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: ucsc-genepredtogtf\ndoc: UCSC genepredtogtf utility\n\nhints:\n  - $import: ucsc-genepredtogtf-docker.yml\n  - $import: ucsc-genepredtogtf-bioconda.yml\n\ninputs:\n  database:\n    type: string\n    inputBinding:\n      position: 1\n  genePred:\n    type: File\n    inputBinding:\n      position: 2\n  gtf:\n    type: string\n    inputBinding:\n      position: 2\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.gtf)\n\nbaseCommand: [\"genePredToGtf\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'database': {'type': 'string', 'inputBinding': {'position': 1}}, 'genePred': {'type': 'File', 'inputBinding': {'position': 2}}, 'gtf': {'type': 'string', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.gtf)'}}}",
    "cwl_hints": "[{'$import': 'ucsc-genepredtogtf-docker.yml'}, {'$import': 'ucsc-genepredtogtf-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['genePredToGtf']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "UCSC genepredtogtf utility",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ucsc-genepredtogtf",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/ucsc/ucsc-gff3togenepred.cwl",
    "sha": "ea2133952c7b51513610f56e6ba14fc0d7fab9b8",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/ucsc/ucsc-gff3togenepred.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: ucsc-gff3togenepred\ndoc: UCSC gff3togenepred utility\n\nhints:\n  - $import: ucsc-gff3togenepred-docker.yml\n  - $import: ucsc-gff3togenepred-bioconda.yml\n\ninputs:\n  gff:\n    type: File\n    inputBinding:\n      position: 1\n  genePred:\n    type: string\n    inputBinding:\n      position: 2\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.genePred)\n\nbaseCommand: [\"gff3ToGenePred\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'gff': {'type': 'File', 'inputBinding': {'position': 1}}, 'genePred': {'type': 'string', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.genePred)'}}}",
    "cwl_hints": "[{'$import': 'ucsc-gff3togenepred-docker.yml'}, {'$import': 'ucsc-gff3togenepred-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gff3ToGenePred']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "UCSC gff3togenepred utility",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ucsc-gff3togenepred",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "tools/ucsc/ucsc-gtftogenepred.cwl",
    "sha": "f2e1425ef66f4132a64e7a87137f322902d5d732",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/tools/ucsc/ucsc-gtftogenepred.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: ucsc-gtftogenepred\ndoc: UCSC gtftogenepred utility\n\nhints:\n  - $import: ucsc-gtftogenepred-docker.yml\n  - $import: ucsc-gtftogenepred-bioconda.yml\n\ninputs:\n  gtf:\n    type: File\n    inputBinding:\n      position: 1\n  genePred:\n    type: string\n    inputBinding:\n      position: 2\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: $(inputs.genePred)\n\nbaseCommand: [\"gtfToGenePred\"]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'gtf': {'type': 'File', 'inputBinding': {'position': 1}}, 'genePred': {'type': 'string', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.genePred)'}}}",
    "cwl_hints": "[{'$import': 'ucsc-gtftogenepred-docker.yml'}, {'$import': 'ucsc-gtftogenepred-bioconda.yml'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gtfToGenePred']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "UCSC gtftogenepred utility",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ucsc-gtftogenepred",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "workflows/ATAC-Seq/peak_caller-SE.cwl",
    "sha": "c8eb93164d97f88d0da3ea549a8b31c4ac5b597d",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/ATAC-Seq/peak_caller-SE.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\ndoc: >-\n  This workflow execute peak caller and QC from ChIP-Seq and ATAC-Seq for\n  single-end samples\nlabel: ATAC-Seq peak caller workflow for single-end samples\n$namespaces:\n  s: 'http://schema.org/'\ninputs:\n  - id: genome_fasta\n    type: File\n  - id: genome_gtf\n    type: File\n  - id: homer_genome\n    type: string\n  - id: input_bam\n    type: File\n    secondaryFiles:\n      - .bai\n  - id: input_bed\n    type: File\n  - id: macs_callpeaks_g\n    type: string\n  - id: macs_callpeaks_q\n    type: float\noutputs:\n  - id: ChIPQC_report\n    outputSource:\n      - ChIPQC/report\n    type: Directory\n  - id: homer_annotate_peaks_annStats\n    outputSource:\n      - homer_annotate_peaks/annStats_out\n    type: File?\n  - id: homer_annotate_peaks_output\n    outputSource:\n      - homer_annotate_peaks/output\n    type: File\n  - id: macs_callpeak_q_value_narrowPeak\n    outputSource:\n      - macs_callpeak_q_value/narrowPeak\n    type: File\n  - id: macs_callpeak_q_value_xls\n    outputSource:\n      - macs_callpeak_q_value/xls\n    type: File\n  - id: macs_callpeak_q_value_bed\n    outputSource:\n      - macs_callpeak_q_value/bed\n    type: File\n  - id: macs_cutoff_inflection\n    outputSource:\n      - macs_cutoff/out_inflection\n    type: File\n  - id: macs_cutoff_pdf\n    outputSource:\n      - macs_cutoff/out_pdf\n    type: File\n  - id: phantompeakqualtools_output_out\n    outputSource:\n      - phantompeakqualtools/output_out\n    type: File\n  - id: phantompeakqualtools_output_savp\n    outputSource:\n      - phantompeakqualtools/output_savp\n    type: File\n  - id: readQC_plots\n    outputSource:\n      - readQC/plots\n    type: 'File[]'\nsteps:\n  - id: ChIPQC\n    in:\n      - id: input\n        source: input_bam\n    out:\n      - id: report\n    run: ../../tools/R/ChIPQC.cwl\n    label: ChIPQC\n  - id: homer_annotate_peaks\n    in:\n      - id: annStats\n        valueFrom: '${ return inputs.macs_out_dir.basename + ''_annStats.txt'';}'\n      - id: d\n        source: homer_tags/tags_directory\n      - id: fpkm\n        default: true\n      - id: genome\n        source: homer_genome\n      - id: gtf\n        source: genome_gtf\n      - id: input\n        valueFrom: '${ return inputs.macs_out_dir.basename + ''.narrowPeak'';}'\n      - id: macs_out_dir\n        source: macs_callpeak/outdir\n      - id: o\n        valueFrom: '${ return inputs.macs_out_dir.basename + ''_annotation.txt'';}'\n    out:\n      - id: annStats_out\n      - id: output\n    run: ../../tools/homer/homer-annotatePeaks.cwl\n    label: HOMER-annotatePeaks\n  - id: homer_tags\n    in:\n      - id: checkGC\n        default: true\n      - id: format\n        default: bed\n      - id: genome\n        source: genome_fasta\n      - id: input\n        source: input_bed\n    out:\n      - id: tags_directory\n    run: ../../tools/homer/homer-makeTagDirectory.cwl\n    label: HOMER-makeTagDirectory\n  - id: macs_callpeak\n    in:\n      - id: B\n        default: true\n      - id: cutoff-analysis\n        default: true\n      - id: extsize\n        default: 73\n      - id: f\n        default: BAM\n      - id: g\n        source: macs_callpeaks_g\n      - id: 'n'\n        valueFrom: '${ return inputs.t.nameroot;}'\n      - id: nomodel\n        default: true\n      - id: q\n        source: macs_callpeaks_q\n      - id: shift\n        default: -37\n      - id: t\n        source: input_bam\n    out:\n      - id: cutoff_analysis\n    run: ../../tools/macs/macs2-callpeak.cwl\n    label: MACS2-callpeak\n  - id: macs_callpeak_q_value\n    in:\n      - id: B\n        default: true\n      - id: call-summits\n        default: true\n      - id: cutoff-analysis\n        default: true\n      - id: extsize\n        default: 73\n      - id: f\n        default: BAM\n      - id: g\n        source: macs_callpeaks_g\n      - id: 'n'\n        valueFrom: '${ return inputs.t.nameroot;}'\n      - id: nomodel\n        default: true\n      - id: q_file\n        source: macs_cutoff/out_inflection\n      - id: shift\n        default: -37\n      - id: t\n        source: input_bam\n    out:\n      - id: [lambda, pileup, narrowPeak, xls, bed]\n    run: ../../tools/macs/macs2-callpeak.cwl\n    label: MACS2-callpeak\n  - id: macs_cutoff\n    in:\n      - id: peak_cutoff_file\n        source: cutoff_analysis\n      - id: out_pdf_name\n        valueFrom: ${ return inputs.peak_cutoff_file.nameroot + \".pdf\";}\n      - id: out_inflection_name\n        valueFrom: ${ return inputs.peak_cutoff_file.nameroot + \"_inflection.txt\";}\n    out:\n      - id: out_inflection\n      - id: out_pdf\n    run: ../../tools/R/macs-cutoff.cwl\n    label: MACS2_cutoff\n  - id: phantompeakqualtools\n    in:\n      - id: c\n        source: input_bam\n      - id: out\n        valueFrom: '${ return inputs.c.nameroot + \"_metrics.txt\";}'\n      - id: savp\n        valueFrom: '${ return inputs.c.nameroot + \"_cross_correlation.pdf\";}'\n    out:\n      - id: output_out\n      - id: output_savn\n      - id: output_savp\n      - id: output_savr\n    run: ../../tools/phantompeakqualtools/phantompeakqualtools.cwl\n    label: Phantompeakqualtools\n  - id: readQC\n    in:\n      - id: tags_directory\n        source: homer_tags/tags_directory\n    out:\n      - id: plots\n    run: ../../tools/R/readQC.cwl\n    label: readQC\nrequirements: []\n$schemas:\n  - 'https://schema.org/version/latest/schemaorg-current-http.rdf'\n's:author':\n  - class: 's:Person'\n    's:email': 'mailto:r78v10a07@gmail.com'\n    's:identifier': 'https://orcid.org/0000-0002-4108-5982'\n    's:name': Roberto Vera Alvarez\n's:license': 'https://spdx.org/licenses/OPL-1.0'\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'genome_fasta', 'type': 'File'}, {'id': 'genome_gtf', 'type': 'File'}, {'id': 'homer_genome', 'type': 'string'}, {'id': 'input_bam', 'type': 'File', 'secondaryFiles': ['.bai']}, {'id': 'input_bed', 'type': 'File'}, {'id': 'macs_callpeaks_g', 'type': 'string'}, {'id': 'macs_callpeaks_q', 'type': 'float'}]",
    "cwl_outputs": "[{'id': 'ChIPQC_report', 'outputSource': ['ChIPQC/report'], 'type': 'Directory'}, {'id': 'homer_annotate_peaks_annStats', 'outputSource': ['homer_annotate_peaks/annStats_out'], 'type': 'File?'}, {'id': 'homer_annotate_peaks_output', 'outputSource': ['homer_annotate_peaks/output'], 'type': 'File'}, {'id': 'macs_callpeak_q_value_narrowPeak', 'outputSource': ['macs_callpeak_q_value/narrowPeak'], 'type': 'File'}, {'id': 'macs_callpeak_q_value_xls', 'outputSource': ['macs_callpeak_q_value/xls'], 'type': 'File'}, {'id': 'macs_callpeak_q_value_bed', 'outputSource': ['macs_callpeak_q_value/bed'], 'type': 'File'}, {'id': 'macs_cutoff_inflection', 'outputSource': ['macs_cutoff/out_inflection'], 'type': 'File'}, {'id': 'macs_cutoff_pdf', 'outputSource': ['macs_cutoff/out_pdf'], 'type': 'File'}, {'id': 'phantompeakqualtools_output_out', 'outputSource': ['phantompeakqualtools/output_out'], 'type': 'File'}, {'id': 'phantompeakqualtools_output_savp', 'outputSource': ['phantompeakqualtools/output_savp'], 'type': 'File'}, {'id': 'readQC_plots', 'outputSource': ['readQC/plots'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow execute peak caller and QC from ChIP-Seq and ATAC-Seq for single-end samples",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ATAC-Seq peak caller workflow for single-end samples",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "workflows/Alignments/bwa-alignment.cwl",
    "sha": "ed66bc0c967864ed858b61062a57a6ab565a2416",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Alignments/bwa-alignment.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\nid: bwa_alignment\ndoc: This workflow aligns the fastq files using bwa\nlabel: bwa alignment workflow\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n\ninputs:\n  reads: File[]\n  genome_index: Directory\n  genome_prefix: string\n  threads: int?\n\noutputs:\n  bam_out:\n    outputSource: samtools_view/output\n    type: File\n  bam_flagstat_out:\n    outputSource: samtools_flagstat/out_stdout\n    type: File\n  bam_stats_out:\n    outputSource: samtools_stats/out_stdout\n    type: File\n\nsteps:\n  bwa_mem:\n    run: ../../tools/bwa/bwa-mem.cwl\n    label: bwa-mem\n    in:\n      M: {default: true}\n      index: genome_index\n      reads: reads\n      prefix: genome_prefix\n      t: threads\n    out: [out_stdout]\n  samtools_view:\n    run: ../../tools/samtools/samtools-view.cwl\n    label: Samtools-view\n    in:\n      input: bwa_mem/out_stdout\n      isbam: {default: true}\n      output_name:\n        valueFrom: '${ return inputs.input.nameroot + \".bam\";}'\n      threads: threads\n    out: [output]\n  samtools_flagstat:\n    run: ../../tools/samtools/samtools-flagstat.cwl\n    label: Samtools-flagstat\n    in:\n      in_bam: samtools_view/output\n      stdout:\n        valueFrom: '${ return inputs.in_bam.nameroot + \".flagstat\";}'\n    out: [out_stdout]\n  samtools_stats:\n    run: ../../tools/samtools/samtools-stats.cwl\n    label: Samtools-stats\n    in:\n      in_bam: samtools_view/output\n      stdout:\n        valueFrom: '${ return inputs.in_bam.nameroot + \".stats\";}'\n    out: [out_stdout]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": "bwa_alignment",
    "cwl_inputs": "{'reads': 'File[]', 'genome_index': 'Directory', 'genome_prefix': 'string', 'threads': 'int?'}",
    "cwl_outputs": "{'bam_out': {'outputSource': 'samtools_view/output', 'type': 'File'}, 'bam_flagstat_out': {'outputSource': 'samtools_flagstat/out_stdout', 'type': 'File'}, 'bam_stats_out': {'outputSource': 'samtools_stats/out_stdout', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}}",
    "cwl_doc": "This workflow aligns the fastq files using bwa",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "bwa alignment workflow",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "bwa_mem": {
        "run": "../../tools/bwa/bwa-mem.cwl",
        "label": "bwa-mem",
        "in": {
          "M": {
            "default": true
          },
          "index": "genome_index",
          "reads": "reads",
          "prefix": "genome_prefix",
          "t": "threads"
        },
        "out": [
          "out_stdout"
        ]
      },
      "samtools_view": {
        "run": "../../tools/samtools/samtools-view.cwl",
        "label": "Samtools-view",
        "in": {
          "input": "bwa_mem/out_stdout",
          "isbam": {
            "default": true
          },
          "output_name": {
            "valueFrom": "${ return inputs.input.nameroot + \".bam\";}"
          },
          "threads": "threads"
        },
        "out": [
          "output"
        ]
      },
      "samtools_flagstat": {
        "run": "../../tools/samtools/samtools-flagstat.cwl",
        "label": "Samtools-flagstat",
        "in": {
          "in_bam": "samtools_view/output",
          "stdout": {
            "valueFrom": "${ return inputs.in_bam.nameroot + \".flagstat\";}"
          }
        },
        "out": [
          "out_stdout"
        ]
      },
      "samtools_stats": {
        "run": "../../tools/samtools/samtools-stats.cwl",
        "label": "Samtools-stats",
        "in": {
          "in_bam": "samtools_view/output",
          "stdout": {
            "valueFrom": "${ return inputs.in_bam.nameroot + \".stats\";}"
          }
        },
        "out": [
          "out_stdout"
        ]
      }
    }
  },
  {
    "path": "workflows/Alignments/magicblast-alignment.cwl",
    "sha": "df512dfbdebf702e3cbca595d02586e3972ee4b5",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Alignments/magicblast-alignment.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: This workflow aligns the fastq files using magicblast for paired-end samples\nlabel: magicblast-alignment-pe\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n\ninputs:\n  dbdir: Directory\n  db: string\n  query: File\n  query_mate: File\n  threads: int\n\noutputs:\n  out_unaligned_output:\n    outputSource: alignment/out_unaligned_output\n    type: File\n  sorted_bam:\n    outputSource: bam_index/out_sam\n    type: File\n  stats_bam:\n    outputSource: bam_stats/out_stdout\n    type: File\n\nsteps:\n  alignment:\n    run: ../../tools/magicblast/magicblast.cwl\n    label: magicblast\n    in:\n      query: query\n      query_mate: query_mate\n      dbdir: dbdir\n      db: db\n      num_threads: threads\n      out:\n        valueFrom: |\n          ${\n            var nameroot = inputs.query.nameroot;\n            if (nameroot.endsWith(\".fastq\")){\n               nameroot = nameroot.replace(\".fastq\", \"\")\n            }\n            if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n               nameroot = nameroot.slice(0, -2);\n            }\n            return nameroot + \".sam\";\n          }\n      unaligned_fmt: {default: \"fasta\"}\n      out_unaligned:\n        valueFrom: |\n          ${\n            var nameroot = inputs.query.nameroot;\n            if (nameroot.endsWith(\".fastq\")){\n               nameroot = nameroot.replace(\".fastq\", \"\")\n            }\n            if (nameroot.endsWith(\".fa\")){\n               nameroot = nameroot.replace(\".fa\", \"\")\n            }\n            if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n               nameroot = nameroot.slice(0, -2);\n            }\n            return nameroot + \"_unaligned.fa\";\n          }\n    out: [output, out_unaligned_output]\n  samtools_view:\n    run: ../../tools/samtools/samtools-view.cwl\n    label: Samtools-view\n    in:\n      input: alignment/output\n      isbam: { default: true }\n      output_name:\n        valueFrom: '${ return inputs.input.nameroot + \".bam\";}'\n      threads: threads\n    out: [ output ]\n  bam_sort:\n    run: ../../tools/samtools/samtools-sort.cwl\n    label: Samtools-sort\n    in:\n      in_bam: samtools_view/output\n      out_bam:\n        valueFrom: '${ return inputs.input.nameroot + \"_sorted.bam\";}'\n      threads: threads\n    out: [out_sam]\n  bam_index:\n    run: ../../tools/samtools/samtools-index.cwl\n    label: Samtools-index\n    in:\n      in_bam: bam_sort/out_sam\n    out: [out_sam]\n  bam_stats:\n    run: ../../tools/samtools/samtools-stats.cwl\n    label: Samtools-stats\n    in:\n      in_bam: samtools_view/output\n      stdout:\n        valueFrom: '${ return inputs.in_bam.nameroot + \".stats\";}'\n    out:  [out_stdout]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'dbdir': 'Directory', 'db': 'string', 'query': 'File', 'query_mate': 'File', 'threads': 'int'}",
    "cwl_outputs": "{'out_unaligned_output': {'outputSource': 'alignment/out_unaligned_output', 'type': 'File'}, 'sorted_bam': {'outputSource': 'bam_index/out_sam', 'type': 'File'}, 'stats_bam': {'outputSource': 'bam_stats/out_stdout', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}}",
    "cwl_doc": "This workflow aligns the fastq files using magicblast for paired-end samples",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "magicblast-alignment-pe",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "alignment": {
        "run": "../../tools/magicblast/magicblast.cwl",
        "label": "magicblast",
        "in": {
          "query": "query",
          "query_mate": "query_mate",
          "dbdir": "dbdir",
          "db": "db",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${\n  var nameroot = inputs.query.nameroot;\n  if (nameroot.endsWith(\".fastq\")){\n     nameroot = nameroot.replace(\".fastq\", \"\")\n  }\n  if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n     nameroot = nameroot.slice(0, -2);\n  }\n  return nameroot + \".sam\";\n}\n"
          },
          "unaligned_fmt": {
            "default": "fasta"
          },
          "out_unaligned": {
            "valueFrom": "${\n  var nameroot = inputs.query.nameroot;\n  if (nameroot.endsWith(\".fastq\")){\n     nameroot = nameroot.replace(\".fastq\", \"\")\n  }\n  if (nameroot.endsWith(\".fa\")){\n     nameroot = nameroot.replace(\".fa\", \"\")\n  }\n  if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n     nameroot = nameroot.slice(0, -2);\n  }\n  return nameroot + \"_unaligned.fa\";\n}\n"
          }
        },
        "out": [
          "output",
          "out_unaligned_output"
        ]
      },
      "samtools_view": {
        "run": "../../tools/samtools/samtools-view.cwl",
        "label": "Samtools-view",
        "in": {
          "input": "alignment/output",
          "isbam": {
            "default": true
          },
          "output_name": {
            "valueFrom": "${ return inputs.input.nameroot + \".bam\";}"
          },
          "threads": "threads"
        },
        "out": [
          "output"
        ]
      },
      "bam_sort": {
        "run": "../../tools/samtools/samtools-sort.cwl",
        "label": "Samtools-sort",
        "in": {
          "in_bam": "samtools_view/output",
          "out_bam": {
            "valueFrom": "${ return inputs.input.nameroot + \"_sorted.bam\";}"
          },
          "threads": "threads"
        },
        "out": [
          "out_sam"
        ]
      },
      "bam_index": {
        "run": "../../tools/samtools/samtools-index.cwl",
        "label": "Samtools-index",
        "in": {
          "in_bam": "bam_sort/out_sam"
        },
        "out": [
          "out_sam"
        ]
      },
      "bam_stats": {
        "run": "../../tools/samtools/samtools-stats.cwl",
        "label": "Samtools-stats",
        "in": {
          "in_bam": "samtools_view/output",
          "stdout": {
            "valueFrom": "${ return inputs.in_bam.nameroot + \".stats\";}"
          }
        },
        "out": [
          "out_stdout"
        ]
      }
    }
  },
  {
    "path": "workflows/Alignments/star-alignment-circRNA-default.cwl",
    "sha": "8fa69cb001d89f98fbc7aaae34e8d8dbcab467a5",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Alignments/star-alignment-circRNA-default.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: This workflow aligns the fastq files using STAR for paired-end samples to be used in circRNA pipeline\nlabel: STAR-Alignment-PE-circRNA\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n\ninputs:\n  genomeDir: Directory\n  reads: File[]\n  threads: int\n  ramMaxSTAR: float?\n\noutputs:\n  sorted_bam:\n    outputSource: bam_index/out_sam\n    type: File\n  stats_bam:\n    outputSource: bam_stats/out_stdout\n    type: File\n  alignment_bam:\n    outputSource: alignment/aligned\n    type: File?\n  star_stats:\n    outputSource: alignment/mappingstats\n    type: File?\n  readspergene:\n    outputSource: alignment/readspergene\n    type: File?\n  mappingstats:\n    outputSource: alignment/mappingstats\n    type: File?\n  chimeric:\n    outputSource: alignment/chimeric\n    type: File?\n  bamRemDups:\n    outputSource: alignment/bamRemDups\n    type: File?\n  transcriptomesam:\n    outputSource: alignment/transcriptomesam\n    type: File?\n\nsteps:\n  alignment:\n    run: ../../tools/star/star.cwl\n    label: STAR\n    in:\n      reads: reads\n      limitGenomeGenerateRAM: ramMaxSTAR\n      outFileNamePrefix:\n        valueFrom: |\n          ${\n            var nameroot = inputs.reads[0].nameroot;\n            if (nameroot.endsWith(\".fastq\")){\n               nameroot = nameroot.replace(\".fastq\", \"\")\n            }\n            if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n               nameroot = nameroot.slice(0, -2);\n            }\n            return nameroot;\n          }\n      genomeDir: genomeDir\n      twopassMode: { default: \"Basic\" }\n      outSAMtype:\n        default:\n          - BAM\n          - Unsorted\n      outSAMunmapped: { default: \"None\" }\n      outStd: { default: \"Log\" }\n      readFilesCommand: { default: \"zcat\" }\n      threads: threads\n      chimSegmentMin: { default: 10 }\n    out: [aligned, bamRemDups, mappingstats, readspergene, transcriptomesam, chimeric]\n  bam_sort:\n    run: ../../tools/samtools/samtools-sort.cwl\n    label: Samtools-sort\n    in:\n      in_bam: alignment/aligned\n      out_bam:\n        valueFrom: >-\n          ${ return inputs.in_bam.nameroot.replace('Aligned.out', '') +\n          \"_sorted.bam\";}\n      threads: threads\n    out: [out_sam]\n  bam_index:\n    run: ../../tools/samtools/samtools-index.cwl\n    label: Samtools-index\n    in:\n      in_bam: bam_sort/out_sam\n    out: [out_sam]\n  bam_stats:\n    run: ../../tools/samtools/samtools-stats.cwl\n    label: Samtools-stats\n    in:\n      in_bam: alignment/aligned\n      stdout:\n        valueFrom: '${ return inputs.in_bam.nameroot + \".stats\";}'\n    out:  [out_stdout]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'genomeDir': 'Directory', 'reads': 'File[]', 'threads': 'int', 'ramMaxSTAR': 'float?'}",
    "cwl_outputs": "{'sorted_bam': {'outputSource': 'bam_index/out_sam', 'type': 'File'}, 'stats_bam': {'outputSource': 'bam_stats/out_stdout', 'type': 'File'}, 'alignment_bam': {'outputSource': 'alignment/aligned', 'type': 'File?'}, 'star_stats': {'outputSource': 'alignment/mappingstats', 'type': 'File?'}, 'readspergene': {'outputSource': 'alignment/readspergene', 'type': 'File?'}, 'mappingstats': {'outputSource': 'alignment/mappingstats', 'type': 'File?'}, 'chimeric': {'outputSource': 'alignment/chimeric', 'type': 'File?'}, 'bamRemDups': {'outputSource': 'alignment/bamRemDups', 'type': 'File?'}, 'transcriptomesam': {'outputSource': 'alignment/transcriptomesam', 'type': 'File?'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}}",
    "cwl_doc": "This workflow aligns the fastq files using STAR for paired-end samples to be used in circRNA pipeline",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "STAR-Alignment-PE-circRNA",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "alignment": {
        "run": "../../tools/star/star.cwl",
        "label": "STAR",
        "in": {
          "reads": "reads",
          "limitGenomeGenerateRAM": "ramMaxSTAR",
          "outFileNamePrefix": {
            "valueFrom": "${\n  var nameroot = inputs.reads[0].nameroot;\n  if (nameroot.endsWith(\".fastq\")){\n     nameroot = nameroot.replace(\".fastq\", \"\")\n  }\n  if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n     nameroot = nameroot.slice(0, -2);\n  }\n  return nameroot;\n}\n"
          },
          "genomeDir": "genomeDir",
          "twopassMode": {
            "default": "Basic"
          },
          "outSAMtype": {
            "default": [
              "BAM",
              "Unsorted"
            ]
          },
          "outSAMunmapped": {
            "default": "None"
          },
          "outStd": {
            "default": "Log"
          },
          "readFilesCommand": {
            "default": "zcat"
          },
          "threads": "threads",
          "chimSegmentMin": {
            "default": 10
          }
        },
        "out": [
          "aligned",
          "bamRemDups",
          "mappingstats",
          "readspergene",
          "transcriptomesam",
          "chimeric"
        ]
      },
      "bam_sort": {
        "run": "../../tools/samtools/samtools-sort.cwl",
        "label": "Samtools-sort",
        "in": {
          "in_bam": "alignment/aligned",
          "out_bam": {
            "valueFrom": "${ return inputs.in_bam.nameroot.replace('Aligned.out', '') + \"_sorted.bam\";}"
          },
          "threads": "threads"
        },
        "out": [
          "out_sam"
        ]
      },
      "bam_index": {
        "run": "../../tools/samtools/samtools-index.cwl",
        "label": "Samtools-index",
        "in": {
          "in_bam": "bam_sort/out_sam"
        },
        "out": [
          "out_sam"
        ]
      },
      "bam_stats": {
        "run": "../../tools/samtools/samtools-stats.cwl",
        "label": "Samtools-stats",
        "in": {
          "in_bam": "alignment/aligned",
          "stdout": {
            "valueFrom": "${ return inputs.in_bam.nameroot + \".stats\";}"
          }
        },
        "out": [
          "out_stdout"
        ]
      }
    }
  },
  {
    "path": "workflows/Alignments/star-alignment-circRNA-multiple-samples-default.cwl",
    "sha": "3dc6206999b6d82da28d0724ec7c0641f6f94d91",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Alignments/star-alignment-circRNA-multiple-samples-default.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: >-\n  This workflow aligns multiple samples using STAR for paired-end samples to be used in circRNA pipeline\nlabel: rnaseq-alignment-circRNA-multiple-samples\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  reads:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  genomeDir: Directory\n  threads: int\n  ramMaxSTAR: float?\n    \noutputs:\n  sorted_bam:\n    outputSource: alignment/sorted_bam\n    type: File[]\n  stats_bam:\n    outputSource: alignment/stats_bam\n    type: File[]\n  alignment_bam:\n    outputSource: alignment/alignment_bam\n    type: File[]?\n  star_stats:\n    outputSource: alignment/mappingstats\n    type: File[]?\n  readspergene:\n    outputSource: alignment/readspergene\n    type: File[]?\n  mappingstats:\n    outputSource: alignment/mappingstats\n    type: File[]?\n  chimeric:\n    outputSource: alignment/chimeric\n    type: File[]?\n  bamRemDups:\n    outputSource: alignment/bamRemDups\n    type: File[]?\n\nsteps:\n  alignment:\n    run: star-alignment-circRNA-default.cwl\n    label: STAR-alignment\n    scatter: reads\n    in:\n      reads: reads\n      genomeDir: genomeDir\n      ramMaxSTAR: ramMaxSTAR\n      threads: threads\n    out: [sorted_bam, stats_bam, alignment_bam, star_stats, readspergene, mappingstats, chimeric, bamRemDups, transcriptomesam]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'reads': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'genomeDir': 'Directory', 'threads': 'int', 'ramMaxSTAR': 'float?'}",
    "cwl_outputs": "{'sorted_bam': {'outputSource': 'alignment/sorted_bam', 'type': 'File[]'}, 'stats_bam': {'outputSource': 'alignment/stats_bam', 'type': 'File[]'}, 'alignment_bam': {'outputSource': 'alignment/alignment_bam', 'type': 'File[]?'}, 'star_stats': {'outputSource': 'alignment/mappingstats', 'type': 'File[]?'}, 'readspergene': {'outputSource': 'alignment/readspergene', 'type': 'File[]?'}, 'mappingstats': {'outputSource': 'alignment/mappingstats', 'type': 'File[]?'}, 'chimeric': {'outputSource': 'alignment/chimeric', 'type': 'File[]?'}, 'bamRemDups': {'outputSource': 'alignment/bamRemDups', 'type': 'File[]?'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow aligns multiple samples using STAR for paired-end samples to be used in circRNA pipeline",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "rnaseq-alignment-circRNA-multiple-samples",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "alignment": {
        "run": "star-alignment-circRNA-default.cwl",
        "label": "STAR-alignment",
        "scatter": "reads",
        "in": {
          "reads": "reads",
          "genomeDir": "genomeDir",
          "ramMaxSTAR": "ramMaxSTAR",
          "threads": "threads"
        },
        "out": [
          "sorted_bam",
          "stats_bam",
          "alignment_bam",
          "star_stats",
          "readspergene",
          "mappingstats",
          "chimeric",
          "bamRemDups",
          "transcriptomesam"
        ]
      }
    }
  },
  {
    "path": "workflows/Alignments/star-alignment-circRNA-multiple-samples.cwl",
    "sha": "5f66c97787c8db28465fe7b38129abea2dc56eef",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Alignments/star-alignment-circRNA-multiple-samples.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: >-\n  This workflow aligns multiple samples using STAR for paired-end samples to be used in circRNA pipeline\nlabel: rnaseq-alignment-circRNA-multiple-samples\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  reads:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  genomeDir: Directory\n  threads: int\n  ramMaxSTAR: float?\n    \noutputs:\n  sorted_bam:\n    outputSource: alignment/sorted_bam\n    type: File[]\n  stats_bam:\n    outputSource: alignment/stats_bam\n    type: File[]\n  alignment_bam:\n    outputSource: alignment/alignment_bam\n    type: File[]?\n  star_stats:\n    outputSource: alignment/mappingstats\n    type: File[]?\n  readspergene:\n    outputSource: alignment/readspergene\n    type: File[]?\n  mappingstats:\n    outputSource: alignment/mappingstats\n    type: File[]?\n  chimeric:\n    outputSource: alignment/chimeric\n    type: File[]?\n  bamRemDups:\n    outputSource: alignment/bamRemDups\n    type: File[]?\n  transcriptomesam:\n    outputSource: alignment/transcriptomesam\n    type: File[]?\n\nsteps:\n  alignment:\n    run: star-alignment-circRNA.cwl\n    label: STAR-alignment\n    scatter: reads\n    in:\n      reads: reads\n      genomeDir: genomeDir\n      ramMaxSTAR: ramMaxSTAR\n      threads: threads\n    out: [sorted_bam, stats_bam, alignment_bam, star_stats, readspergene, mappingstats, chimeric, bamRemDups, transcriptomesam]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'reads': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'genomeDir': 'Directory', 'threads': 'int', 'ramMaxSTAR': 'float?'}",
    "cwl_outputs": "{'sorted_bam': {'outputSource': 'alignment/sorted_bam', 'type': 'File[]'}, 'stats_bam': {'outputSource': 'alignment/stats_bam', 'type': 'File[]'}, 'alignment_bam': {'outputSource': 'alignment/alignment_bam', 'type': 'File[]?'}, 'star_stats': {'outputSource': 'alignment/mappingstats', 'type': 'File[]?'}, 'readspergene': {'outputSource': 'alignment/readspergene', 'type': 'File[]?'}, 'mappingstats': {'outputSource': 'alignment/mappingstats', 'type': 'File[]?'}, 'chimeric': {'outputSource': 'alignment/chimeric', 'type': 'File[]?'}, 'bamRemDups': {'outputSource': 'alignment/bamRemDups', 'type': 'File[]?'}, 'transcriptomesam': {'outputSource': 'alignment/transcriptomesam', 'type': 'File[]?'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow aligns multiple samples using STAR for paired-end samples to be used in circRNA pipeline",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "rnaseq-alignment-circRNA-multiple-samples",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "alignment": {
        "run": "star-alignment-circRNA.cwl",
        "label": "STAR-alignment",
        "scatter": "reads",
        "in": {
          "reads": "reads",
          "genomeDir": "genomeDir",
          "ramMaxSTAR": "ramMaxSTAR",
          "threads": "threads"
        },
        "out": [
          "sorted_bam",
          "stats_bam",
          "alignment_bam",
          "star_stats",
          "readspergene",
          "mappingstats",
          "chimeric",
          "bamRemDups",
          "transcriptomesam"
        ]
      }
    }
  },
  {
    "path": "workflows/Alignments/star-alignment-circRNA.cwl",
    "sha": "0c0036fea35123d1216723042ab4bf721e03343b",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Alignments/star-alignment-circRNA.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: This workflow aligns the fastq files using STAR for paired-end samples to be used in circRNA pipeline\nlabel: STAR-Alignment-PE-circRNA\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n\ninputs:\n  genomeDir: Directory\n  reads: File[]\n  threads: int\n  ramMaxSTAR: float?\n\noutputs:\n  sorted_bam:\n    outputSource: bam_index/out_sam\n    type: File\n  stats_bam:\n    outputSource: bam_stats/out_stdout\n    type: File\n  alignment_bam:\n    outputSource: alignment/aligned\n    type: File?\n  star_stats:\n    outputSource: alignment/mappingstats\n    type: File?\n  readspergene:\n    outputSource: alignment/readspergene\n    type: File?\n  mappingstats:\n    outputSource: alignment/mappingstats\n    type: File?\n  chimeric:\n    outputSource: alignment/chimeric\n    type: File?\n  bamRemDups:\n    outputSource: alignment/bamRemDups\n    type: File?\n  transcriptomesam:\n    outputSource: alignment/transcriptomesam\n    type: File?\n\nsteps:\n  alignment:\n    run: ../../tools/star/star.cwl\n    label: STAR\n    in:\n      reads: reads\n      limitGenomeGenerateRAM: ramMaxSTAR\n      outFileNamePrefix:\n        valueFrom: |\n          ${\n            var nameroot = inputs.reads[0].nameroot;\n            if (nameroot.endsWith(\".fastq\")){\n               nameroot = nameroot.replace(\".fastq\", \"\")\n            }\n            if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n               nameroot = nameroot.slice(0, -2);\n            }\n            return nameroot;\n          }\n      alignEndsType: { default: \"Local\" }\n      alignSJDBoverhangMin: { default: 1 }\n      alignSJoverhangMin: { default: 15 }\n      genomeDir: genomeDir\n      limitOutSJcollapsed: { default: 1000000 }\n      limitSjdbInsertNsj: { default: 1000000 }\n      outFilterMatchNminOverLread: { default: 0 }\n      outFilterMismatchNmax: { default: 33 }\n      outFilterMismatchNoverLmax: { default: 0.3 }\n      outFilterMultimapNmax: { default: 100 }\n      outFilterScoreMinOverLread: { default: 0.3 }\n      outFilterType: { default: \"BySJout\" }\n      outSAMtype:\n        default:\n          - BAM\n          - Unsorted\n      outSAMunmapped: { default: \"None\" }\n      outStd: { default: \"Log\" }\n      readFilesCommand: { default: \"zcat\" }\n      seedSearchStartLmax: { default: 12 }\n      threads: threads\n      twopassMode: { default: \"Basic\" }\n      winAnchorMultimapNmax: { default: 50 }\n      quantMode: { default: \"GeneCounts\" }\n      chimSegmentMin: { default: 10 }\n    out: [aligned, bamRemDups, mappingstats, readspergene, transcriptomesam, chimeric]\n  bam_sort:\n    run: ../../tools/samtools/samtools-sort.cwl\n    label: Samtools-sort\n    in:\n      in_bam: alignment/aligned\n      out_bam:\n        valueFrom: >-\n          ${ return inputs.in_bam.nameroot.replace('Aligned.out', '') +\n          \"_sorted.bam\";}\n      threads: threads\n    out: [out_sam]\n  bam_index:\n    run: ../../tools/samtools/samtools-index.cwl\n    label: Samtools-index\n    in:\n      in_bam: bam_sort/out_sam\n    out: [out_sam]\n  bam_stats:\n    run: ../../tools/samtools/samtools-stats.cwl\n    label: Samtools-stats\n    in:\n      in_bam: alignment/aligned\n      stdout:\n        valueFrom: '${ return inputs.in_bam.nameroot + \".stats\";}'\n    out:  [out_stdout]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'genomeDir': 'Directory', 'reads': 'File[]', 'threads': 'int', 'ramMaxSTAR': 'float?'}",
    "cwl_outputs": "{'sorted_bam': {'outputSource': 'bam_index/out_sam', 'type': 'File'}, 'stats_bam': {'outputSource': 'bam_stats/out_stdout', 'type': 'File'}, 'alignment_bam': {'outputSource': 'alignment/aligned', 'type': 'File?'}, 'star_stats': {'outputSource': 'alignment/mappingstats', 'type': 'File?'}, 'readspergene': {'outputSource': 'alignment/readspergene', 'type': 'File?'}, 'mappingstats': {'outputSource': 'alignment/mappingstats', 'type': 'File?'}, 'chimeric': {'outputSource': 'alignment/chimeric', 'type': 'File?'}, 'bamRemDups': {'outputSource': 'alignment/bamRemDups', 'type': 'File?'}, 'transcriptomesam': {'outputSource': 'alignment/transcriptomesam', 'type': 'File?'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}}",
    "cwl_doc": "This workflow aligns the fastq files using STAR for paired-end samples to be used in circRNA pipeline",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "STAR-Alignment-PE-circRNA",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "alignment": {
        "run": "../../tools/star/star.cwl",
        "label": "STAR",
        "in": {
          "reads": "reads",
          "limitGenomeGenerateRAM": "ramMaxSTAR",
          "outFileNamePrefix": {
            "valueFrom": "${\n  var nameroot = inputs.reads[0].nameroot;\n  if (nameroot.endsWith(\".fastq\")){\n     nameroot = nameroot.replace(\".fastq\", \"\")\n  }\n  if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n     nameroot = nameroot.slice(0, -2);\n  }\n  return nameroot;\n}\n"
          },
          "alignEndsType": {
            "default": "Local"
          },
          "alignSJDBoverhangMin": {
            "default": 1
          },
          "alignSJoverhangMin": {
            "default": 15
          },
          "genomeDir": "genomeDir",
          "limitOutSJcollapsed": {
            "default": 1000000
          },
          "limitSjdbInsertNsj": {
            "default": 1000000
          },
          "outFilterMatchNminOverLread": {
            "default": 0
          },
          "outFilterMismatchNmax": {
            "default": 33
          },
          "outFilterMismatchNoverLmax": {
            "default": 0.3
          },
          "outFilterMultimapNmax": {
            "default": 100
          },
          "outFilterScoreMinOverLread": {
            "default": 0.3
          },
          "outFilterType": {
            "default": "BySJout"
          },
          "outSAMtype": {
            "default": [
              "BAM",
              "Unsorted"
            ]
          },
          "outSAMunmapped": {
            "default": "None"
          },
          "outStd": {
            "default": "Log"
          },
          "readFilesCommand": {
            "default": "zcat"
          },
          "seedSearchStartLmax": {
            "default": 12
          },
          "threads": "threads",
          "twopassMode": {
            "default": "Basic"
          },
          "winAnchorMultimapNmax": {
            "default": 50
          },
          "quantMode": {
            "default": "GeneCounts"
          },
          "chimSegmentMin": {
            "default": 10
          }
        },
        "out": [
          "aligned",
          "bamRemDups",
          "mappingstats",
          "readspergene",
          "transcriptomesam",
          "chimeric"
        ]
      },
      "bam_sort": {
        "run": "../../tools/samtools/samtools-sort.cwl",
        "label": "Samtools-sort",
        "in": {
          "in_bam": "alignment/aligned",
          "out_bam": {
            "valueFrom": "${ return inputs.in_bam.nameroot.replace('Aligned.out', '') + \"_sorted.bam\";}"
          },
          "threads": "threads"
        },
        "out": [
          "out_sam"
        ]
      },
      "bam_index": {
        "run": "../../tools/samtools/samtools-index.cwl",
        "label": "Samtools-index",
        "in": {
          "in_bam": "bam_sort/out_sam"
        },
        "out": [
          "out_sam"
        ]
      },
      "bam_stats": {
        "run": "../../tools/samtools/samtools-stats.cwl",
        "label": "Samtools-stats",
        "in": {
          "in_bam": "alignment/aligned",
          "stdout": {
            "valueFrom": "${ return inputs.in_bam.nameroot + \".stats\";}"
          }
        },
        "out": [
          "out_stdout"
        ]
      }
    }
  },
  {
    "path": "workflows/Alignments/star-alignment-nosplice.cwl",
    "sha": "20acb3cce65d7c1f209e20383ccb6c1c0dc445b6",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Alignments/star-alignment-nosplice.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: This workflow aligns the fastq files using STAR for no spliced genomes\nlabel: STAR-Alignment-PE\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n\ninputs:\n  genomeDir: Directory\n  reads: File[]\n  threads: int\n  ramMaxSTAR: float?\n\noutputs:\n  indexed_bam:\n    outputSource: bam_index/out_sam\n    type: File\n  sorted_bam:\n    outputSource: bam_sort/out_sam\n    type: File\n  star_stats:\n    outputSource: alignment/mappingstats\n    type: File?\n  stats_bam:\n    outputSource: bam_stats/out_stdout\n    type: File\n  readspergene:\n    outputSource: alignment/readspergene\n    type: File?\n  mappingstats:\n    outputSource: alignment/mappingstats\n    type: File?\n\nsteps:\n  alignment:\n    run: ../../tools/star/star.cwl\n    label: STAR\n    in:\n      reads: reads\n      limitGenomeGenerateRAM: ramMaxSTAR\n      outFileNamePrefix:\n        valueFrom: |\n          ${\n            var nameroot = inputs.reads[0].nameroot;\n            if (nameroot.endsWith(\".fastq\")){\n               nameroot = nameroot.replace(\".fastq\", \"\")\n            }\n            if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n               nameroot = nameroot.slice(0, -2);\n            }\n            return nameroot;\n          }\n      alignEndsType: { default: \"Local\" }\n      alignIntronMax: { default: 1 }\n      genomeDir: genomeDir\n      limitOutSJcollapsed: { default: 1000000 }\n      limitSjdbInsertNsj: { default: 1000000 }\n      outFilterMatchNminOverLread: { default: 0 }\n      outFilterMismatchNmax: { default: 33 }\n      outFilterMismatchNoverLmax: { default: 0.3 }\n      outFilterMultimapNmax: { default: 100 }\n      outFilterScoreMinOverLread: { default: 0.3 }\n      outFilterType: { default: \"Normal\" }\n      outSAMtype:\n        default:\n          - BAM\n          - Unsorted\n      outSAMunmapped: { default: \"Within\" }\n      outStd: { default: \"Log\" }\n      readFilesCommand: { default: \"zcat\" }\n      seedSearchStartLmax: { default: 12 }\n      threads: threads\n      twopassMode: { default: \"Basic\" }\n      winAnchorMultimapNmax: { default: 50 }\n      quantMode: { default: \"GeneCounts\" }\n    out: [aligned, bamRemDups, mappingstats, readspergene, transcriptomesam]\n  bam_sort:\n    run: ../../tools/samtools/samtools-sort.cwl\n    label: Samtools-sort\n    in:\n      in_bam: alignment/aligned\n      out_bam:\n        valueFrom: >-\n          ${ return inputs.in_bam.nameroot.replace('Aligned.out', '') +\n          \"_sorted.bam\";}\n      threads: threads\n    out: [out_sam]\n  bam_index:\n    run: ../../tools/samtools/samtools-index.cwl\n    label: Samtools-index\n    in:\n      in_bam: bam_sort/out_sam\n    out: [out_sam]\n  bam_stats:\n    run: ../../tools/samtools/samtools-stats.cwl\n    label: Samtools-stats\n    in:\n      in_bam: alignment/aligned\n      stdout:\n        valueFrom: '${ return inputs.in_bam.nameroot + \".stats\";}'\n    out:  [out_stdout]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'genomeDir': 'Directory', 'reads': 'File[]', 'threads': 'int', 'ramMaxSTAR': 'float?'}",
    "cwl_outputs": "{'indexed_bam': {'outputSource': 'bam_index/out_sam', 'type': 'File'}, 'sorted_bam': {'outputSource': 'bam_sort/out_sam', 'type': 'File'}, 'star_stats': {'outputSource': 'alignment/mappingstats', 'type': 'File?'}, 'stats_bam': {'outputSource': 'bam_stats/out_stdout', 'type': 'File'}, 'readspergene': {'outputSource': 'alignment/readspergene', 'type': 'File?'}, 'mappingstats': {'outputSource': 'alignment/mappingstats', 'type': 'File?'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}}",
    "cwl_doc": "This workflow aligns the fastq files using STAR for no spliced genomes",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "STAR-Alignment-PE",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "alignment": {
        "run": "../../tools/star/star.cwl",
        "label": "STAR",
        "in": {
          "reads": "reads",
          "limitGenomeGenerateRAM": "ramMaxSTAR",
          "outFileNamePrefix": {
            "valueFrom": "${\n  var nameroot = inputs.reads[0].nameroot;\n  if (nameroot.endsWith(\".fastq\")){\n     nameroot = nameroot.replace(\".fastq\", \"\")\n  }\n  if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n     nameroot = nameroot.slice(0, -2);\n  }\n  return nameroot;\n}\n"
          },
          "alignEndsType": {
            "default": "Local"
          },
          "alignIntronMax": {
            "default": 1
          },
          "genomeDir": "genomeDir",
          "limitOutSJcollapsed": {
            "default": 1000000
          },
          "limitSjdbInsertNsj": {
            "default": 1000000
          },
          "outFilterMatchNminOverLread": {
            "default": 0
          },
          "outFilterMismatchNmax": {
            "default": 33
          },
          "outFilterMismatchNoverLmax": {
            "default": 0.3
          },
          "outFilterMultimapNmax": {
            "default": 100
          },
          "outFilterScoreMinOverLread": {
            "default": 0.3
          },
          "outFilterType": {
            "default": "Normal"
          },
          "outSAMtype": {
            "default": [
              "BAM",
              "Unsorted"
            ]
          },
          "outSAMunmapped": {
            "default": "Within"
          },
          "outStd": {
            "default": "Log"
          },
          "readFilesCommand": {
            "default": "zcat"
          },
          "seedSearchStartLmax": {
            "default": 12
          },
          "threads": "threads",
          "twopassMode": {
            "default": "Basic"
          },
          "winAnchorMultimapNmax": {
            "default": 50
          },
          "quantMode": {
            "default": "GeneCounts"
          }
        },
        "out": [
          "aligned",
          "bamRemDups",
          "mappingstats",
          "readspergene",
          "transcriptomesam"
        ]
      },
      "bam_sort": {
        "run": "../../tools/samtools/samtools-sort.cwl",
        "label": "Samtools-sort",
        "in": {
          "in_bam": "alignment/aligned",
          "out_bam": {
            "valueFrom": "${ return inputs.in_bam.nameroot.replace('Aligned.out', '') + \"_sorted.bam\";}"
          },
          "threads": "threads"
        },
        "out": [
          "out_sam"
        ]
      },
      "bam_index": {
        "run": "../../tools/samtools/samtools-index.cwl",
        "label": "Samtools-index",
        "in": {
          "in_bam": "bam_sort/out_sam"
        },
        "out": [
          "out_sam"
        ]
      },
      "bam_stats": {
        "run": "../../tools/samtools/samtools-stats.cwl",
        "label": "Samtools-stats",
        "in": {
          "in_bam": "alignment/aligned",
          "stdout": {
            "valueFrom": "${ return inputs.in_bam.nameroot + \".stats\";}"
          }
        },
        "out": [
          "out_stdout"
        ]
      }
    }
  },
  {
    "path": "workflows/Alignments/star-alignment.cwl",
    "sha": "8bb13bd60d51ee87039ed90a669dc5d9573438ba",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Alignments/star-alignment.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: This workflow aligns the fastq files using STAR for paired-end samples\nlabel: STAR-Alignment-PE\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n\ninputs:\n  genomeDir: Directory\n  reads: File[]\n  threads: int\n  ramMaxSTAR: float?\n\noutputs:\n  sorted_bam:\n    outputSource: bam_index/out_sam\n    type: File\n  star_stats:\n    outputSource: alignment/mappingstats\n    type: File?\n  stats_bam:\n    outputSource: bam_stats/out_stdout\n    type: File\n  readspergene:\n    outputSource: alignment/readspergene\n    type: File?\n  mappingstats:\n    outputSource: alignment/mappingstats\n    type: File?\n\nsteps:\n  alignment:\n    run: ../../tools/star/star.cwl\n    label: STAR\n    in:\n      reads: reads\n      limitGenomeGenerateRAM: ramMaxSTAR\n      outFileNamePrefix:\n        valueFrom: |\n          ${\n            var nameroot = inputs.reads[0].nameroot;\n            if (nameroot.endsWith(\".fastq\")){\n               nameroot = nameroot.replace(\".fastq\", \"\")\n            }\n            if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n               nameroot = nameroot.slice(0, -2);\n            }\n            return nameroot;\n          }\n      alignEndsType: { default: \"Local\" }\n      alignSJDBoverhangMin: { default: 1 }\n      alignSJoverhangMin: { default: 15 }\n      genomeDir: genomeDir\n      limitOutSJcollapsed: { default: 1000000 }\n      limitSjdbInsertNsj: { default: 1000000 }\n      outFilterMatchNminOverLread: { default: 0 }\n      outFilterMismatchNmax: { default: 33 }\n      outFilterMismatchNoverLmax: { default: 0.3 }\n      outFilterMultimapNmax: { default: 100 }\n      outFilterScoreMinOverLread: { default: 0.3 }\n      outFilterType: { default: \"BySJout\" }\n      outSAMtype:\n        default:\n          - BAM\n          - Unsorted\n      outSAMunmapped: { default: \"Within\" }\n      outStd: { default: \"Log\" }\n      seedSearchStartLmax: { default: 12 }\n      threads: threads\n      twopassMode: { default: \"Basic\" }\n      winAnchorMultimapNmax: { default: 50 }\n      quantMode: { default: \"GeneCounts\" }\n    out: [aligned, bamRemDups, mappingstats, readspergene, transcriptomesam]\n  bam_sort:\n    run: ../../tools/samtools/samtools-sort.cwl\n    label: Samtools-sort\n    in:\n      in_bam: alignment/aligned\n      out_bam:\n        valueFrom: >-\n          ${ return inputs.in_bam.nameroot.replace('Aligned.out', '') +\n          \"_sorted.bam\";}\n      threads: threads\n    out: [out_sam]\n  bam_index:\n    run: ../../tools/samtools/samtools-index.cwl\n    label: Samtools-index\n    in:\n      in_bam: bam_sort/out_sam\n    out: [out_sam]\n  bam_stats:\n    run: ../../tools/samtools/samtools-stats.cwl\n    label: Samtools-stats\n    in:\n      in_bam: alignment/aligned\n      stdout:\n        valueFrom: '${ return inputs.in_bam.nameroot + \".stats\";}'\n    out:  [out_stdout]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'genomeDir': 'Directory', 'reads': 'File[]', 'threads': 'int', 'ramMaxSTAR': 'float?'}",
    "cwl_outputs": "{'sorted_bam': {'outputSource': 'bam_index/out_sam', 'type': 'File'}, 'star_stats': {'outputSource': 'alignment/mappingstats', 'type': 'File?'}, 'stats_bam': {'outputSource': 'bam_stats/out_stdout', 'type': 'File'}, 'readspergene': {'outputSource': 'alignment/readspergene', 'type': 'File?'}, 'mappingstats': {'outputSource': 'alignment/mappingstats', 'type': 'File?'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}}",
    "cwl_doc": "This workflow aligns the fastq files using STAR for paired-end samples",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "STAR-Alignment-PE",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "alignment": {
        "run": "../../tools/star/star.cwl",
        "label": "STAR",
        "in": {
          "reads": "reads",
          "limitGenomeGenerateRAM": "ramMaxSTAR",
          "outFileNamePrefix": {
            "valueFrom": "${\n  var nameroot = inputs.reads[0].nameroot;\n  if (nameroot.endsWith(\".fastq\")){\n     nameroot = nameroot.replace(\".fastq\", \"\")\n  }\n  if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n     nameroot = nameroot.slice(0, -2);\n  }\n  return nameroot;\n}\n"
          },
          "alignEndsType": {
            "default": "Local"
          },
          "alignSJDBoverhangMin": {
            "default": 1
          },
          "alignSJoverhangMin": {
            "default": 15
          },
          "genomeDir": "genomeDir",
          "limitOutSJcollapsed": {
            "default": 1000000
          },
          "limitSjdbInsertNsj": {
            "default": 1000000
          },
          "outFilterMatchNminOverLread": {
            "default": 0
          },
          "outFilterMismatchNmax": {
            "default": 33
          },
          "outFilterMismatchNoverLmax": {
            "default": 0.3
          },
          "outFilterMultimapNmax": {
            "default": 100
          },
          "outFilterScoreMinOverLread": {
            "default": 0.3
          },
          "outFilterType": {
            "default": "BySJout"
          },
          "outSAMtype": {
            "default": [
              "BAM",
              "Unsorted"
            ]
          },
          "outSAMunmapped": {
            "default": "Within"
          },
          "outStd": {
            "default": "Log"
          },
          "seedSearchStartLmax": {
            "default": 12
          },
          "threads": "threads",
          "twopassMode": {
            "default": "Basic"
          },
          "winAnchorMultimapNmax": {
            "default": 50
          },
          "quantMode": {
            "default": "GeneCounts"
          }
        },
        "out": [
          "aligned",
          "bamRemDups",
          "mappingstats",
          "readspergene",
          "transcriptomesam"
        ]
      },
      "bam_sort": {
        "run": "../../tools/samtools/samtools-sort.cwl",
        "label": "Samtools-sort",
        "in": {
          "in_bam": "alignment/aligned",
          "out_bam": {
            "valueFrom": "${ return inputs.in_bam.nameroot.replace('Aligned.out', '') + \"_sorted.bam\";}"
          },
          "threads": "threads"
        },
        "out": [
          "out_sam"
        ]
      },
      "bam_index": {
        "run": "../../tools/samtools/samtools-index.cwl",
        "label": "Samtools-index",
        "in": {
          "in_bam": "bam_sort/out_sam"
        },
        "out": [
          "out_sam"
        ]
      },
      "bam_stats": {
        "run": "../../tools/samtools/samtools-stats.cwl",
        "label": "Samtools-stats",
        "in": {
          "in_bam": "alignment/aligned",
          "stdout": {
            "valueFrom": "${ return inputs.in_bam.nameroot + \".stats\";}"
          }
        },
        "out": [
          "out_stdout"
        ]
      }
    }
  },
  {
    "path": "workflows/Annotation/transcriptome-annotation.cwl",
    "sha": "700e0c737dddcb950b7249917f4a4177b2e9dcb5",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Annotation/transcriptome-annotation.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: transcriptome_annotation\nlabel: transcriptome_annotation\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\ninputs:\n  blast_db_dir: Directory\n  trans_fsa_gz: File\n  evalue: float\n  threads: int\n  blast_nr_db: string\n  blast_nt_db: string\n  tax_pickle: File\n  tax_id: int\n\noutputs:\n  blastn_output:\n    outputSource: blastn/output\n    type: File\n  contamination_fsa:\n    outputSource: contamination_removal/fsa\n    type: File\n  contamination_tsv:\n    outputSource: contamination_removal/contamination\n    type: File\n  transdecoder_protein:\n    outputSource: transdecoder_longorfs_extract_result/output\n    type: File\n  blastp_output:\n    outputSource: blastp/output\n    type: File\n\nsteps:\n  uncompress_trans:\n    run: ../../tools/basic/gzip.cwl\n    label: Uncompress transcriptome fasta\n    in:\n      d: { default: True}\n      file: trans_fsa_gz\n    out: [output]\n  blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: BlastN\n    in:\n      dbdir: blast_db_dir\n      db: blast_nt_db\n      num_threads: threads\n      max_target_seqs: { default: 50 }\n      out:\n        valueFrom: '${ return inputs.query.nameroot + \"_blastn.tsv\";}'\n      outfmt: { default: \"6 qseqid sgi saccver length pident evalue bitscore score staxid\"}\n      evalue: evalue\n      query: uncompress_trans/output\n      task: { default: \"megablast\"}\n    out: [output]\n  contamination_removal:\n    run: ../../tools/python/contamination-detection.cwl\n    label: Remove contamination from BlastN and split fasta\n    in:\n      fasta: uncompress_trans/output\n      blast: blastn/output\n      threads: threads\n      tax_pickle: tax_pickle\n      tax_id: tax_id\n    out: [fsa, contamination]\n  transdecoder_longorfs:\n    run: ../../tools/transdecoder/transdecoder_longorfs.cwl\n    label: TransDecoder\n    in:\n      t: contamination_removal/fsa\n    out: [output]\n  transdecoder_longorfs_extract_result:\n    run: ../../tools/transdecoder/transdecoder_longorfs_extract_result.cwl\n    label: TransDecoder-Filter\n    in:\n      d: transdecoder_longorfs/output\n      filename: { default: \"longest_orfs.pep\"}\n      o:\n        valueFrom: '${ return inputs.d.nameroot.replace(\".fsa\",\"_transdecoder.fsa\");}'\n    out: [output]\n  blastp:\n    run: ../../tools/blast/blastp.cwl\n    label: BlastP\n    in:\n      db: blast_nr_db\n      dbdir: blast_db_dir\n      evalue: evalue\n      max_target_seqs: { default: 1000}\n      num_threads: threads\n      out:\n        valueFrom: '${ return inputs.query.nameroot + \"_blastp.tsv\";}'\n      query: transdecoder_longorfs_extract_result/output\n      task: { default: \"blastp-fast\"}\n    out: [export_search_strategy_output, output]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": "transcriptome_annotation",
    "cwl_inputs": "{'blast_db_dir': 'Directory', 'trans_fsa_gz': 'File', 'evalue': 'float', 'threads': 'int', 'blast_nr_db': 'string', 'blast_nt_db': 'string', 'tax_pickle': 'File', 'tax_id': 'int'}",
    "cwl_outputs": "{'blastn_output': {'outputSource': 'blastn/output', 'type': 'File'}, 'contamination_fsa': {'outputSource': 'contamination_removal/fsa', 'type': 'File'}, 'contamination_tsv': {'outputSource': 'contamination_removal/contamination', 'type': 'File'}, 'transdecoder_protein': {'outputSource': 'transdecoder_longorfs_extract_result/output', 'type': 'File'}, 'blastp_output': {'outputSource': 'blastp/output', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "transcriptome_annotation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "uncompress_trans": {
        "run": "../../tools/basic/gzip.cwl",
        "label": "Uncompress transcriptome fasta",
        "in": {
          "d": {
            "default": true
          },
          "file": "trans_fsa_gz"
        },
        "out": [
          "output"
        ]
      },
      "blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "BlastN",
        "in": {
          "dbdir": "blast_db_dir",
          "db": "blast_nt_db",
          "num_threads": "threads",
          "max_target_seqs": {
            "default": 50
          },
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \"_blastn.tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid sgi saccver length pident evalue bitscore score staxid"
          },
          "evalue": "evalue",
          "query": "uncompress_trans/output",
          "task": {
            "default": "megablast"
          }
        },
        "out": [
          "output"
        ]
      },
      "contamination_removal": {
        "run": "../../tools/python/contamination-detection.cwl",
        "label": "Remove contamination from BlastN and split fasta",
        "in": {
          "fasta": "uncompress_trans/output",
          "blast": "blastn/output",
          "threads": "threads",
          "tax_pickle": "tax_pickle",
          "tax_id": "tax_id"
        },
        "out": [
          "fsa",
          "contamination"
        ]
      },
      "transdecoder_longorfs": {
        "run": "../../tools/transdecoder/transdecoder_longorfs.cwl",
        "label": "TransDecoder",
        "in": {
          "t": "contamination_removal/fsa"
        },
        "out": [
          "output"
        ]
      },
      "transdecoder_longorfs_extract_result": {
        "run": "../../tools/transdecoder/transdecoder_longorfs_extract_result.cwl",
        "label": "TransDecoder-Filter",
        "in": {
          "d": "transdecoder_longorfs/output",
          "filename": {
            "default": "longest_orfs.pep"
          },
          "o": {
            "valueFrom": "${ return inputs.d.nameroot.replace(\".fsa\",\"_transdecoder.fsa\");}"
          }
        },
        "out": [
          "output"
        ]
      },
      "blastp": {
        "run": "../../tools/blast/blastp.cwl",
        "label": "BlastP",
        "in": {
          "db": "blast_nr_db",
          "dbdir": "blast_db_dir",
          "evalue": "evalue",
          "max_target_seqs": {
            "default": 1000
          },
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \"_blastp.tsv\";}"
          },
          "query": "transdecoder_longorfs_extract_result/output",
          "task": {
            "default": "blastp-fast"
          }
        },
        "out": [
          "export_search_strategy_output",
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Annotation/transcriptome-cleanup-star.cwl",
    "sha": "31d873acd19f2fcb2fbf574d1817178f2a70fce6",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Annotation/transcriptome-cleanup-star.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n- class: InlineJavascriptRequirement\n- class: StepInputExpressionRequirement\n\nlabel: transcriptome_cleanup\ndoc: \"This workflow detect and remove vector, duplicate and contamination from fastq files\"\n\ninputs:\n  reads: File[]\n  threads: int\n  ramMaxSTAR: float?\n\noutputs:\n  equal_seq_removal_fsa:\n    outputSource: equal_seq_removal/fsa\n    type: File\n  equal_seq_removal_tsv:\n    outputSource: equal_seq_removal/tsv\n    type: File\n  vector_blastn_output:\n    outputSource: vector_blastn/output\n    type: File\n  vector_removal_fsa:\n    outputSource: vector_removal/fsa\n    type: File\n  duplicate_blastn_output:\n    outputSource: duplicate_blastn/output\n    type: File\n  duplicate_removal_fsa:\n    outputSource: duplicate_removal/fsa\n    type: File\n\nsteps:\n  equal_seq_removal:\n    run: ../../tools/python/equal-removal.cwl\n    label: Removing equal sequences\n    in:\n      fasta: trans_fsa_gz\n    out: [fsa, tsv]\n  uncompress_noequal:\n    run: ../../tools/basic/gzip.cwl\n    label: Uncompress non equal sequences fasta\n    in:\n      d: { default: True}\n      file: equal_seq_removal/fsa\n    out: [output]\n  vector_blastdb:\n    run: ../../tools/blast/makeblastdb.cwl\n    label: Make Vector BlastDB\n    in:\n      dbtype: { default: \"nucl\"}\n      hash_index: { default: True}\n      out: { default: \"myblastdb\"}\n      in: vector_fsa\n    out: [out_db]\n  collect_blastdb:\n    run: ../../tools/basic/files2dir.cwl\n    label: Collect BlastDB\n    in:\n      files: vector_blastdb/out_db\n      dir: { default: \"myblastdb\"}\n    out: [output]\n  vector_blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: Vector BlastN\n    in:\n      dbdir: collect_blastdb/output\n      db: { default: \"myblastdb\"}\n      query: uncompress_noequal/output\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \".tsv\";}\n      outfmt: { default: \"6 qseqid saccver qstart qend length evalue bitscore score\"}\n      evalue: evalue\n      task: { default: \"blastn\" }\n      reward: { default: 1 }\n      penalty: { default: -5 }\n      gapopen: { default: 3 }\n      gapextend: { default: 3 }\n      dust: { default: \"yes\" }\n      soft_masking: { default: \"true\" }\n      searchsp: { default: 1750000000000 }\n    out: [output]\n  vector_removal:\n    run: ../../tools/python/vector-removal.cwl\n    label: Remove vector from BlastN\n    in:\n      fasta: uncompress_noequal/output\n      blast: vector_blastn/output\n      threads: threads\n      min_length: min_length\n    out: [fsa]\n  duplicate_blastdb:\n    run: ../../tools/blast/makeblastdb.cwl\n    label: Make Duplicate BlastDB\n    in:\n      dbtype: { default: \"nucl\"}\n      hash_index: { default: True}\n      out: { default: \"duplicate_blastdb\"}\n      in: vector_removal/fsa\n    out: [out_db]\n  collect_duplicate_blastdb:\n    run: ../../tools/basic/files2dir.cwl\n    label: Collect Duplicate BlastDB\n    in:\n      files: duplicate_blastdb/out_db\n      dir: { default: \"duplicate_blastdb\"}\n    out: [output]\n  duplicate_blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: Duplicate BlastN\n    in:\n      dbdir: collect_duplicate_blastdb/output\n      db: { default: \"duplicate_blastdb\"}\n      query: vector_removal/fsa\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \".tsv\";}\n      outfmt: { default: \"6 qseqid saccver qstart qend length evalue bitscore score\"}\n      evalue: evalue\n      task: { default: \"blastn\" }\n    out: [output]\n  duplicate_removal:\n    run: ../../tools/python/duplicate-removal.cwl\n    label: Remove duplicates from BlastN\n    in:\n      fasta: vector_removal/fsa\n      blast: duplicate_blastn/output\n      threads: threads\n    out: [fsa]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'reads': 'File[]', 'threads': 'int', 'ramMaxSTAR': 'float?'}",
    "cwl_outputs": "{'equal_seq_removal_fsa': {'outputSource': 'equal_seq_removal/fsa', 'type': 'File'}, 'equal_seq_removal_tsv': {'outputSource': 'equal_seq_removal/tsv', 'type': 'File'}, 'vector_blastn_output': {'outputSource': 'vector_blastn/output', 'type': 'File'}, 'vector_removal_fsa': {'outputSource': 'vector_removal/fsa', 'type': 'File'}, 'duplicate_blastn_output': {'outputSource': 'duplicate_blastn/output', 'type': 'File'}, 'duplicate_removal_fsa': {'outputSource': 'duplicate_removal/fsa', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This workflow detect and remove vector, duplicate and contamination from fastq files",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "transcriptome_cleanup",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "equal_seq_removal": {
        "run": "../../tools/python/equal-removal.cwl",
        "label": "Removing equal sequences",
        "in": {
          "fasta": "trans_fsa_gz"
        },
        "out": [
          "fsa",
          "tsv"
        ]
      },
      "uncompress_noequal": {
        "run": "../../tools/basic/gzip.cwl",
        "label": "Uncompress non equal sequences fasta",
        "in": {
          "d": {
            "default": true
          },
          "file": "equal_seq_removal/fsa"
        },
        "out": [
          "output"
        ]
      },
      "vector_blastdb": {
        "run": "../../tools/blast/makeblastdb.cwl",
        "label": "Make Vector BlastDB",
        "in": {
          "dbtype": {
            "default": "nucl"
          },
          "hash_index": {
            "default": true
          },
          "out": {
            "default": "myblastdb"
          },
          "in": "vector_fsa"
        },
        "out": [
          "out_db"
        ]
      },
      "collect_blastdb": {
        "run": "../../tools/basic/files2dir.cwl",
        "label": "Collect BlastDB",
        "in": {
          "files": "vector_blastdb/out_db",
          "dir": {
            "default": "myblastdb"
          }
        },
        "out": [
          "output"
        ]
      },
      "vector_blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "Vector BlastN",
        "in": {
          "dbdir": "collect_blastdb/output",
          "db": {
            "default": "myblastdb"
          },
          "query": "uncompress_noequal/output",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \".tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid saccver qstart qend length evalue bitscore score"
          },
          "evalue": "evalue",
          "task": {
            "default": "blastn"
          },
          "reward": {
            "default": 1
          },
          "penalty": {
            "default": -5
          },
          "gapopen": {
            "default": 3
          },
          "gapextend": {
            "default": 3
          },
          "dust": {
            "default": "yes"
          },
          "soft_masking": {
            "default": "true"
          },
          "searchsp": {
            "default": 1750000000000
          }
        },
        "out": [
          "output"
        ]
      },
      "vector_removal": {
        "run": "../../tools/python/vector-removal.cwl",
        "label": "Remove vector from BlastN",
        "in": {
          "fasta": "uncompress_noequal/output",
          "blast": "vector_blastn/output",
          "threads": "threads",
          "min_length": "min_length"
        },
        "out": [
          "fsa"
        ]
      },
      "duplicate_blastdb": {
        "run": "../../tools/blast/makeblastdb.cwl",
        "label": "Make Duplicate BlastDB",
        "in": {
          "dbtype": {
            "default": "nucl"
          },
          "hash_index": {
            "default": true
          },
          "out": {
            "default": "duplicate_blastdb"
          },
          "in": "vector_removal/fsa"
        },
        "out": [
          "out_db"
        ]
      },
      "collect_duplicate_blastdb": {
        "run": "../../tools/basic/files2dir.cwl",
        "label": "Collect Duplicate BlastDB",
        "in": {
          "files": "duplicate_blastdb/out_db",
          "dir": {
            "default": "duplicate_blastdb"
          }
        },
        "out": [
          "output"
        ]
      },
      "duplicate_blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "Duplicate BlastN",
        "in": {
          "dbdir": "collect_duplicate_blastdb/output",
          "db": {
            "default": "duplicate_blastdb"
          },
          "query": "vector_removal/fsa",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \".tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid saccver qstart qend length evalue bitscore score"
          },
          "evalue": "evalue",
          "task": {
            "default": "blastn"
          }
        },
        "out": [
          "output"
        ]
      },
      "duplicate_removal": {
        "run": "../../tools/python/duplicate-removal.cwl",
        "label": "Remove duplicates from BlastN",
        "in": {
          "fasta": "vector_removal/fsa",
          "blast": "duplicate_blastn/output",
          "threads": "threads"
        },
        "out": [
          "fsa"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Annotation/transcriptome-cleanup.cwl",
    "sha": "1ac00ca826f5d9215fc14abffc7ca24ddd438fb1",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Annotation/transcriptome-cleanup.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n- class: InlineJavascriptRequirement\n- class: StepInputExpressionRequirement\n\nlabel: transcriptome_cleanup\ndoc: \"This workflow detect and remove vector, duplicate and contamination from a transcriptome fasta file\"\n\ninputs:\n  trans_fsa_gz: File\n  vector_fsa: File\n  total_per_file: int\n  threads: int\n  min_length: int\n  evalue: float\n\noutputs:\n  split_fasta_fsa:\n    outputSource: split_fasta/output\n    type: File[]\n\nsteps:\n  equal_seq_removal:\n    run: ../../tools/python/equal-removal.cwl\n    label: Removing equal sequences\n    in:\n      fasta: trans_fsa_gz\n    out: [fsa, tsv]\n  uncompress_noequal:\n    run: ../../tools/basic/gzip.cwl\n    label: Uncompress non equal sequences fasta\n    in:\n      d: { default: True}\n      file: equal_seq_removal/fsa\n    out: [output]\n  vector_blastdb:\n    run: ../../tools/blast/makeblastdb.cwl\n    label: Make Vector BlastDB\n    in:\n      dbtype: { default: \"nucl\"}\n      hash_index: { default: True}\n      out: { default: \"myblastdb\"}\n      in: vector_fsa\n    out: [out_db]\n  collect_blastdb:\n    run: ../../tools/basic/files2dir.cwl\n    label: Collect BlastDB\n    in:\n      files: vector_blastdb/out_db\n      dir: { default: \"myblastdb\"}\n    out: [output]\n  vector_blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: Vector BlastN\n    in:\n      dbdir: collect_blastdb/output\n      db: { default: \"myblastdb\"}\n      query: uncompress_noequal/output\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \".tsv\";}\n      outfmt: { default: \"6 qseqid saccver qstart qend length evalue bitscore score\"}\n      evalue: evalue\n      task: { default: \"blastn\" }\n      reward: { default: 1 }\n      penalty: { default: -5 }\n      gapopen: { default: 3 }\n      gapextend: { default: 3 }\n      dust: { default: \"yes\" }\n      soft_masking: { default: \"true\" }\n      searchsp: { default: 1750000000000 }\n    out: [output]\n  vector_removal:\n    run: ../../tools/python/vector-removal.cwl\n    label: Remove vector from BlastN\n    in:\n      fasta: uncompress_noequal/output\n      blast: vector_blastn/output\n      threads: threads\n      min_length: min_length\n    out: [fsa]\n  duplicate_blastdb:\n    run: ../../tools/blast/makeblastdb.cwl\n    label: Make Duplicate BlastDB\n    in:\n      dbtype: { default: \"nucl\"}\n      hash_index: { default: True}\n      out: { default: \"duplicate_blastdb\"}\n      in: vector_removal/fsa\n    out: [out_db]\n  collect_duplicate_blastdb:\n    run: ../../tools/basic/files2dir.cwl\n    label: Collect Duplicate BlastDB\n    in:\n      files: duplicate_blastdb/out_db\n      dir: { default: \"duplicate_blastdb\"}\n    out: [output]\n  duplicate_blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: Duplicate BlastN\n    in:\n      dbdir: collect_duplicate_blastdb/output\n      db: { default: \"duplicate_blastdb\"}\n      query: vector_removal/fsa\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \".tsv\";}\n      outfmt: { default: \"6 qseqid saccver qstart qend length evalue bitscore score pident\"}\n      evalue: evalue\n      task: { default: \"blastn\" }\n    out: [output]\n  duplicate_removal:\n    run: ../../tools/python/duplicate-removal.cwl\n    label: Remove duplicates from BlastN\n    in:\n      fasta: vector_removal/fsa\n      blast: duplicate_blastn/output\n      threads: threads\n    out: [fsa]\n  split_fasta:\n    run: ../../tools/python/split-fasta.cwl\n    label: Split fasta\n    in:\n      fasta: duplicate_removal/fsa\n      total_per_file: total_per_file\n    out: [output]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'trans_fsa_gz': 'File', 'vector_fsa': 'File', 'total_per_file': 'int', 'threads': 'int', 'min_length': 'int', 'evalue': 'float'}",
    "cwl_outputs": "{'split_fasta_fsa': {'outputSource': 'split_fasta/output', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This workflow detect and remove vector, duplicate and contamination from a transcriptome fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "transcriptome_cleanup",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "equal_seq_removal": {
        "run": "../../tools/python/equal-removal.cwl",
        "label": "Removing equal sequences",
        "in": {
          "fasta": "trans_fsa_gz"
        },
        "out": [
          "fsa",
          "tsv"
        ]
      },
      "uncompress_noequal": {
        "run": "../../tools/basic/gzip.cwl",
        "label": "Uncompress non equal sequences fasta",
        "in": {
          "d": {
            "default": true
          },
          "file": "equal_seq_removal/fsa"
        },
        "out": [
          "output"
        ]
      },
      "vector_blastdb": {
        "run": "../../tools/blast/makeblastdb.cwl",
        "label": "Make Vector BlastDB",
        "in": {
          "dbtype": {
            "default": "nucl"
          },
          "hash_index": {
            "default": true
          },
          "out": {
            "default": "myblastdb"
          },
          "in": "vector_fsa"
        },
        "out": [
          "out_db"
        ]
      },
      "collect_blastdb": {
        "run": "../../tools/basic/files2dir.cwl",
        "label": "Collect BlastDB",
        "in": {
          "files": "vector_blastdb/out_db",
          "dir": {
            "default": "myblastdb"
          }
        },
        "out": [
          "output"
        ]
      },
      "vector_blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "Vector BlastN",
        "in": {
          "dbdir": "collect_blastdb/output",
          "db": {
            "default": "myblastdb"
          },
          "query": "uncompress_noequal/output",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \".tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid saccver qstart qend length evalue bitscore score"
          },
          "evalue": "evalue",
          "task": {
            "default": "blastn"
          },
          "reward": {
            "default": 1
          },
          "penalty": {
            "default": -5
          },
          "gapopen": {
            "default": 3
          },
          "gapextend": {
            "default": 3
          },
          "dust": {
            "default": "yes"
          },
          "soft_masking": {
            "default": "true"
          },
          "searchsp": {
            "default": 1750000000000
          }
        },
        "out": [
          "output"
        ]
      },
      "vector_removal": {
        "run": "../../tools/python/vector-removal.cwl",
        "label": "Remove vector from BlastN",
        "in": {
          "fasta": "uncompress_noequal/output",
          "blast": "vector_blastn/output",
          "threads": "threads",
          "min_length": "min_length"
        },
        "out": [
          "fsa"
        ]
      },
      "duplicate_blastdb": {
        "run": "../../tools/blast/makeblastdb.cwl",
        "label": "Make Duplicate BlastDB",
        "in": {
          "dbtype": {
            "default": "nucl"
          },
          "hash_index": {
            "default": true
          },
          "out": {
            "default": "duplicate_blastdb"
          },
          "in": "vector_removal/fsa"
        },
        "out": [
          "out_db"
        ]
      },
      "collect_duplicate_blastdb": {
        "run": "../../tools/basic/files2dir.cwl",
        "label": "Collect Duplicate BlastDB",
        "in": {
          "files": "duplicate_blastdb/out_db",
          "dir": {
            "default": "duplicate_blastdb"
          }
        },
        "out": [
          "output"
        ]
      },
      "duplicate_blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "Duplicate BlastN",
        "in": {
          "dbdir": "collect_duplicate_blastdb/output",
          "db": {
            "default": "duplicate_blastdb"
          },
          "query": "vector_removal/fsa",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \".tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid saccver qstart qend length evalue bitscore score pident"
          },
          "evalue": "evalue",
          "task": {
            "default": "blastn"
          }
        },
        "out": [
          "output"
        ]
      },
      "duplicate_removal": {
        "run": "../../tools/python/duplicate-removal.cwl",
        "label": "Remove duplicates from BlastN",
        "in": {
          "fasta": "vector_removal/fsa",
          "blast": "duplicate_blastn/output",
          "threads": "threads"
        },
        "out": [
          "fsa"
        ]
      },
      "split_fasta": {
        "run": "../../tools/python/split-fasta.cwl",
        "label": "Split fasta",
        "in": {
          "fasta": "duplicate_removal/fsa",
          "total_per_file": "total_per_file"
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Annotation/transcriptome-read-assignment-bowtie2.cwl",
    "sha": "fba17a2cea45077d6e31f8d7e6ed62acf43e96d7",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Annotation/transcriptome-read-assignment-bowtie2.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\ndoc: This workflow download SRA samples and aligng them to a transcriptome fasta file\nlabel: Transcriptome Read assignment with Bowtie2\n\ninputs:\n  - id: fastq1\n    type: File\n  - id: fastq2\n    type: File?\n  - id: threads\n    type: int\n  - id: genome_fasta\n    type: File\n\noutputs:\n  - id: indexed_bam\n    outputSource:\n      - bam_index/out_sam\n    type: File\n  - id: sorted_bam\n    outputSource:\n      - bam_sort/out_sam\n    type: File\n  - id: stats_bam\n    outputSource:\n      - bam_stats/out_stdout\n    type: File\n\nsteps:\n  - id: bowtie2_index\n    in:\n      - id: reference\n        source: genome_fasta\n      - id: base\n        valueFrom: '${ return inputs.reference.basename;}'\n      - id: threads\n        source: threads\n    out:\n      - id: output\n    run: ../../tools/bowtie/bowtie2-build.cwl\n    label: Bowtie2\n  - id: alignment\n    in:\n      - id: p\n        source: threads\n      - id: q\n        default: true\n      - id: all\n        default: true\n      - id: S\n        default: true\n      - id: fastq1\n        source: fastq1\n      - id: fastq2\n        source: fastq2\n      - id: x\n        source: bowtie2_index/output\n    out:\n      - id: output\n    run: ../../tools/bowtie/bowtie2.cwl\n    label: Bowtie2\n  - id: bam_filter\n    in:\n      - id: input\n        source: alignment/output\n      - id: output_name\n        valueFrom: '${ return inputs.input.nameroot + \".bam\";}'\n      - id: threads\n        source: threads\n      - id: readswithoutbits\n        default: 4\n      - id: S\n        default: true\n      - id: isbam\n        default: true\n    out:\n      - id: output\n    run: ../../tools/samtools/samtools-view.cwl\n    label: Samtools-sort\n    doc: |\n      Sort BAM file\n  - id: bam_sort\n    in:\n      - id: in_bam\n        source: bam_filter/output\n      - id: out_bam\n        valueFrom: '${ return inputs.in_bam.nameroot + \"_sorted.bam\";}'\n      - id: threads\n        source: threads\n    out:\n      - id: out_sam\n    run: ../../tools/samtools/samtools-sort.cwl\n    label: Samtools-sort\n    doc: |\n      Sort BAM file\n  - id: bam_index\n    in:\n      - id: in_bam\n        source: bam_sort/out_sam\n    out:\n      - id: out_sam\n    run: ../../tools/samtools/samtools-index.cwl\n    label: Samtools-index\n    doc: |\n      Creates the BAM index file\n  - id: bam_stats\n    in:\n      - id: in_bam\n        source: alignment/output\n      - id: stdout\n        valueFrom: '${ return inputs.in_bam.nameroot + \".stats\";}'\n    out:\n      - id: out_stdout\n    run: ../../tools/samtools/samtools-stats.cwl\n    label: Samtools-stats\n    doc: |\n      Samtools stats for extracting BAM statistics\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n  - class: SubworkflowFeatureRequirement\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'fastq1', 'type': 'File'}, {'id': 'fastq2', 'type': 'File?'}, {'id': 'threads', 'type': 'int'}, {'id': 'genome_fasta', 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'indexed_bam', 'outputSource': ['bam_index/out_sam'], 'type': 'File'}, {'id': 'sorted_bam', 'outputSource': ['bam_sort/out_sam'], 'type': 'File'}, {'id': 'stats_bam', 'outputSource': ['bam_stats/out_stdout'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow download SRA samples and aligng them to a transcriptome fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Transcriptome Read assignment with Bowtie2",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "workflows/Annotation/transcriptome-read-assignment.cwl",
    "sha": "4d393d73aa9c50e70947d5c2cd0358bdef6c4608",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Annotation/transcriptome-read-assignment.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\ndoc: This workflow download SRA samples and aligng them to a transcriptome fasta file\nlabel: Transcriptome Read assignment\n\ninputs:\n  - id: genome_fasta\n    type: File\n  - id: reads\n    type: File[]\n  - id: threads\n    type: int\n\noutputs:\n  - id: indexed_bam\n    outputSource:\n      - bam_index/out_sam\n    type: File\n  - id: sorted_bam\n    outputSource:\n      - bam_sort/out_sam\n    type: File\n  - id: star_stats\n    outputSource:\n      - alignment/mappingstats\n    type: File?\n  - id: stats_bam\n    outputSource:\n      - bam_stats/out_stdout\n    type: File\n  - id: readspergene\n    outputSource:\n      - alignment/readspergene\n    type: File?\n\nsteps:\n  - id: star_genome_indexes\n    in:\n      - id: genomeFastaFiles\n        source: genome_fasta\n      - id: runThreadN\n        source: threads\n    out:\n      - id: genome_indexes\n    run:\n      class: CommandLineTool\n      requirements:\n        InlineJavascriptRequirement: {}\n      inputs:\n        runMode:\n          type: string\n          default: \"genomeGenerate\"\n          inputBinding:\n            position: 1\n            prefix: --runMode\n        genomeDir:\n          type: string\n          default: '.'\n          inputBinding:\n            position: 5\n            prefix: --genomeDir\n        runThreadN:\n          type: int\n          inputBinding:\n            prefix: --runThreadN\n            position: 6\n        genomeFastaFiles:\n          type: File\n          inputBinding:\n            position: 7\n            prefix: --genomeFastaFiles\n      outputs:\n        genome_indexes:\n          type: Directory\n          outputBinding:\n            glob: \".\"\n      baseCommand: [\"STAR\"]\n  - id: alignment\n    in:\n      - id: alignEndsType\n        default: Local\n      - id: alignSJDBoverhangMin\n        default: 1\n      - id: alignSJoverhangMin\n        default: 15\n      - id: genomeDir\n        source: star_genome_indexes/genome_indexes\n      - id: limitOutSJcollapsed\n        default: 1000000\n      - id: limitSjdbInsertNsj\n        default: 1000000\n      - id: outFileNamePrefix\n        valueFrom: |\n          ${\n            var nameroot = inputs.reads[0].nameroot;\n            if (nameroot.endsWith(\".fastq\")){\n               nameroot = nameroot.replace(\".fastq\", \"\")\n            }\n            if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n               nameroot = nameroot.slice(0, -2);\n            }\n            return nameroot;\n          }\n      - id: outFilterMatchNminOverLread\n        default: 0\n      - id: outFilterMismatchNmax\n        default: 33\n      - id: outFilterMismatchNoverLmax\n        default: 0.3\n      - id: outFilterMultimapNmax\n        default: 100\n      - id: outFilterScoreMinOverLread\n        default: 0.3\n      - id: outFilterType\n        default: BySJout\n      - id: outSAMtype\n        default:\n          - BAM\n          - Unsorted\n      - id: outSAMunmapped\n        default: Within\n      - id: outStd\n        default: Log\n      - id: readFilesCommand\n        default: zcat\n      - id: reads\n        source: reads\n      - id: seedSearchStartLmax\n        default: 12\n      - id: threads\n        source: threads\n      - id: twopassMode\n        default: Basic\n      - id: winAnchorMultimapNmax\n        default: 50\n    out:\n      - id: aligned\n      - id: bamRemDups\n      - id: mappingstats\n      - id: readspergene\n      - id: transcriptomesam\n    run: ../../tools/star/star.cwl\n    label: STAR\n    doc: |\n      Align the reads using STAR and tuned parameters\n  - id: bam_index\n    in:\n      - id: in_bam\n        source: bam_sort/out_sam\n    out:\n      - id: out_sam\n    run: ../../tools/samtools/samtools-index.cwl\n    label: Samtools-index\n    doc: |\n      Creates the BAM index file\n  - id: bam_sort\n    in:\n      - id: in_bam\n        source: alignment/aligned\n      - id: out_bam\n        valueFrom: >-\n          ${ return inputs.in_bam.nameroot.replace('Aligned.out', '') +\n          \"_sorted.bam\";}\n      - id: threads\n        source: threads\n    out:\n      - id: out_sam\n    run: ../../tools/samtools/samtools-sort.cwl\n    label: Samtools-sort\n    doc: |\n      Sort BAM file\n  - id: bam_stats\n    in:\n      - id: in_bam\n        source: alignment/aligned\n      - id: stdout\n        valueFrom: '${ return inputs.in_bam.nameroot + \".stats\";}'\n    out:\n      - id: out_stdout\n    run: ../../tools/samtools/samtools-stats.cwl\n    label: Samtools-stats\n    doc: |\n      Samtools stats for extracting BAM statistics\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n  - class: SubworkflowFeatureRequirement\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'genome_fasta', 'type': 'File'}, {'id': 'reads', 'type': 'File[]'}, {'id': 'threads', 'type': 'int'}]",
    "cwl_outputs": "[{'id': 'indexed_bam', 'outputSource': ['bam_index/out_sam'], 'type': 'File'}, {'id': 'sorted_bam', 'outputSource': ['bam_sort/out_sam'], 'type': 'File'}, {'id': 'star_stats', 'outputSource': ['alignment/mappingstats'], 'type': 'File?'}, {'id': 'stats_bam', 'outputSource': ['bam_stats/out_stdout'], 'type': 'File'}, {'id': 'readspergene', 'outputSource': ['alignment/readspergene'], 'type': 'File?'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow download SRA samples and aligng them to a transcriptome fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Transcriptome Read assignment",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "workflows/Blast/blast-aligned-seq-ids.cwl",
    "sha": "508b6fd1d94ca4ca5d37f2fe05df11b3d31a69bf",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Blast/blast-aligned-seq-ids.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: blast_aligned_seq_ids\ndoc: \"This workflow screening a Fasta file and extract aligned reads\"\n\ninputs:\n  fsa: File\n  threads: int\n  blastdb: Directory\n  blastdb_name: string\n  perc_identity: float\n  coverage: float\n\noutputs:\n  aligned_ids:\n    outputSource: find_aligned_ids/output\n    type: File\n  blastn_tsv:\n    outputSource: blastn/output\n    type: File\n\nsteps:\n  blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: BlastN\n    in:\n      dbdir: blastdb\n      db: blastdb_name\n      query: fsa\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \"_\" + inputs.db + \"_blastn.tsv\";}\n      outfmt: { default: \"6 qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid\" }\n      word_size: { default: 28 }\n      best_hit_overhang: { default: 0.1 }\n      best_hit_score_edge: { default: 0.1 }\n      evalue: { default: 0.0001 }\n      penalty: { default: -5 }\n      perc_identity: perc_identity\n      max_target_seqs: { default: 100 }\n      task: { default: \"megablast\" }\n      dust: { default: \"yes\" }\n      soft_masking: { default: \"true\" }\n    out: [ output ]\n  find_aligned_ids:\n    run: ../../tools/python/extract-aligned-seq-ids-blast.cwl\n    label: Find aligned IDS\n    in:\n      blastout: blastn/output\n      columns: { default: \"qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid\" }\n      pident: perc_identity\n      coverage: coverage\n      threads: threads\n      out:\n        valueFrom: ${ return inputs.blastout.nameroot + \".ids\";}\n    out: [ output ]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'fsa': 'File', 'threads': 'int', 'blastdb': 'Directory', 'blastdb_name': 'string', 'perc_identity': 'float', 'coverage': 'float'}",
    "cwl_outputs": "{'aligned_ids': {'outputSource': 'find_aligned_ids/output', 'type': 'File'}, 'blastn_tsv': {'outputSource': 'blastn/output', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow screening a Fasta file and extract aligned reads",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "blast_aligned_seq_ids",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "BlastN",
        "in": {
          "dbdir": "blastdb",
          "db": "blastdb_name",
          "query": "fsa",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \"_\" + inputs.db + \"_blastn.tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid"
          },
          "word_size": {
            "default": 28
          },
          "best_hit_overhang": {
            "default": 0.1
          },
          "best_hit_score_edge": {
            "default": 0.1
          },
          "evalue": {
            "default": 0.0001
          },
          "penalty": {
            "default": -5
          },
          "perc_identity": "perc_identity",
          "max_target_seqs": {
            "default": 100
          },
          "task": {
            "default": "megablast"
          },
          "dust": {
            "default": "yes"
          },
          "soft_masking": {
            "default": "true"
          }
        },
        "out": [
          "output"
        ]
      },
      "find_aligned_ids": {
        "run": "../../tools/python/extract-aligned-seq-ids-blast.cwl",
        "label": "Find aligned IDS",
        "in": {
          "blastout": "blastn/output",
          "columns": {
            "default": "qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid"
          },
          "pident": "perc_identity",
          "coverage": "coverage",
          "threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.blastout.nameroot + \".ids\";}"
          }
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Blast/blast-extratc-aligned-seq-ids.cwl",
    "sha": "d7f10882f591d43b37090ee4fc9c36b5bad1bcc4",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Blast/blast-extratc-aligned-seq-ids.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: blast_extratc_aligned_seq_ids\ndoc: \"This workflow screening a Fasta file and extract aligned reads\"\n\ninputs:\n  fsa: File\n  threads: int\n  blastdb: Directory\n  blastdb_name: string\n  perc_identity: float\n  coverage: float\n\noutputs:\n  aligned_ids:\n    outputSource: find_aligned_ids/output\n    type: File\n  filter_fsa:\n    outputSource: filter_fsa_step/output\n    type: File\n\nsteps:\n  blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: BlastN\n    in:\n      dbdir: blastdb\n      db: blastdb_name\n      query: fsa\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \"_\" + inputs.db + \".tsv\";}\n      outfmt: { default: \"6 qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid\" }\n      word_size: { default: 28 }\n      best_hit_overhang: { default: 0.1 }\n      best_hit_score_edge: { default: 0.1 }\n      evalue: { default: 0.0001 }\n      penalty: { default: -5 }\n      perc_identity: perc_identity\n      max_target_seqs: { default: 100 }\n      task: { default: \"megablast\" }\n      dust: { default: \"yes\" }\n      soft_masking: { default: \"true\" }\n    out: [ output ]\n  find_aligned_ids:\n    run: ../../tools/python/extract-aligned-seq-ids-blast.cwl\n    label: Find aligned IDS\n    in:\n      blastout: blastn/output\n      columns: { default: \"qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid\" }\n      pident: perc_identity\n      coverage: coverage\n      threads: threads\n      out:\n        valueFrom: ${ return inputs.blastout.nameroot + \".ids\";}\n    out: [ output ]\n  filter_fsa_step:\n    label: Removed aligned ids from input fasta\n    run: ../../tools/bbmap/filterbyname.cwl\n    in:\n      in: fsa\n      out:\n        valueFrom: ${ return inputs.names.nameroot + \".fa\"; }\n      names: find_aligned_ids/output\n      include: { default: \"f\" }\n    out: [ output ]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'fsa': 'File', 'threads': 'int', 'blastdb': 'Directory', 'blastdb_name': 'string', 'perc_identity': 'float', 'coverage': 'float'}",
    "cwl_outputs": "{'aligned_ids': {'outputSource': 'find_aligned_ids/output', 'type': 'File'}, 'filter_fsa': {'outputSource': 'filter_fsa_step/output', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow screening a Fasta file and extract aligned reads",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "blast_extratc_aligned_seq_ids",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "BlastN",
        "in": {
          "dbdir": "blastdb",
          "db": "blastdb_name",
          "query": "fsa",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \"_\" + inputs.db + \".tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid"
          },
          "word_size": {
            "default": 28
          },
          "best_hit_overhang": {
            "default": 0.1
          },
          "best_hit_score_edge": {
            "default": 0.1
          },
          "evalue": {
            "default": 0.0001
          },
          "penalty": {
            "default": -5
          },
          "perc_identity": "perc_identity",
          "max_target_seqs": {
            "default": 100
          },
          "task": {
            "default": "megablast"
          },
          "dust": {
            "default": "yes"
          },
          "soft_masking": {
            "default": "true"
          }
        },
        "out": [
          "output"
        ]
      },
      "find_aligned_ids": {
        "run": "../../tools/python/extract-aligned-seq-ids-blast.cwl",
        "label": "Find aligned IDS",
        "in": {
          "blastout": "blastn/output",
          "columns": {
            "default": "qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid"
          },
          "pident": "perc_identity",
          "coverage": "coverage",
          "threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.blastout.nameroot + \".ids\";}"
          }
        },
        "out": [
          "output"
        ]
      },
      "filter_fsa_step": {
        "label": "Removed aligned ids from input fasta",
        "run": "../../tools/bbmap/filterbyname.cwl",
        "in": {
          "in": "fsa",
          "out": {
            "valueFrom": "${ return inputs.names.nameroot + \".fa\"; }"
          },
          "names": "find_aligned_ids/output",
          "include": {
            "default": "f"
          }
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Blast/blast-fastq-aligned-seq-ids.cwl",
    "sha": "c2fea39bce9454dafb0509ddb44ffc5cc57806c2",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Blast/blast-fastq-aligned-seq-ids.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n  - class: SubworkflowFeatureRequirement\n\nlabel: blast_fastq_aligned_seq_ids\ndoc: \"This workflow screening fastq file and extract aligned reads with BLASTN\"\n\ninputs:\n  fastq1: File\n  fastq2: File?\n  threads: int\n  blastdb: Directory\n  blastdb_name: string\n  perc_identity: float\n  coverage: float\n\noutputs:\n  aligned_ids:\n    outputSource: find_aligned_ids/output\n    type: File\n  blastn_tsv:\n    outputSource: blastn/output\n    type: File\n\nsteps:\n  fastq_dump:\n    run: ../../tools/sra-tools/fastq-dump.cwl\n    label: fastq-dump-SE\n    scatter: accession\n    in:\n      ncbi_config: ncbi_config\n      accession: accession\n      X: X\n      gzip: { default: true }\n      split-files: split-files\n    out: [ output ]\n  create_fasta_from_fastq:\n    label: Create FASTA from FASTQ\n    run: ../../tools/basic/fastq2fasta.cwl\n    in:\n      fastq1: fastq1\n      fastq2: fastq2\n    out: [ output ]\n  blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: BlastN\n    in:\n      dbdir: blastdb\n      db: blastdb_name\n      query: create_fasta_from_fastq/output\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \"_\" + inputs.db + \"_blastn.tsv\";}\n      outfmt: { default: \"6 qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid\" }\n      word_size: { default: 28 }\n      best_hit_overhang: { default: 0.1 }\n      best_hit_score_edge: { default: 0.1 }\n      evalue: { default: 0.0001 }\n      penalty: { default: -5 }\n      perc_identity: perc_identity\n      max_target_seqs: { default: 100 }\n      task: { default: \"megablast\" }\n      dust: { default: \"yes\" }\n      soft_masking: { default: \"true\" }\n    out: [ output ]\n  find_aligned_ids:\n    run: ../../tools/python/extract-aligned-seq-ids-blast.cwl\n    label: Find aligned IDS\n    in:\n      blastout: blastn/output\n      columns: { default: \"qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid\" }\n      pident: perc_identity\n      coverage: coverage\n      threads: threads\n      out:\n        valueFrom: ${ return inputs.blastout.nameroot + \".ids\";}\n    out: [ output ]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'fastq1': 'File', 'fastq2': 'File?', 'threads': 'int', 'blastdb': 'Directory', 'blastdb_name': 'string', 'perc_identity': 'float', 'coverage': 'float'}",
    "cwl_outputs": "{'aligned_ids': {'outputSource': 'find_aligned_ids/output', 'type': 'File'}, 'blastn_tsv': {'outputSource': 'blastn/output', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow screening fastq file and extract aligned reads with BLASTN",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "blast_fastq_aligned_seq_ids",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "fastq_dump": {
        "run": "../../tools/sra-tools/fastq-dump.cwl",
        "label": "fastq-dump-SE",
        "scatter": "accession",
        "in": {
          "ncbi_config": "ncbi_config",
          "accession": "accession",
          "X": "X",
          "gzip": {
            "default": true
          },
          "split-files": "split-files"
        },
        "out": [
          "output"
        ]
      },
      "create_fasta_from_fastq": {
        "label": "Create FASTA from FASTQ",
        "run": "../../tools/basic/fastq2fasta.cwl",
        "in": {
          "fastq1": "fastq1",
          "fastq2": "fastq2"
        },
        "out": [
          "output"
        ]
      },
      "blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "BlastN",
        "in": {
          "dbdir": "blastdb",
          "db": "blastdb_name",
          "query": "create_fasta_from_fastq/output",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \"_\" + inputs.db + \"_blastn.tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid"
          },
          "word_size": {
            "default": 28
          },
          "best_hit_overhang": {
            "default": 0.1
          },
          "best_hit_score_edge": {
            "default": 0.1
          },
          "evalue": {
            "default": 0.0001
          },
          "penalty": {
            "default": -5
          },
          "perc_identity": "perc_identity",
          "max_target_seqs": {
            "default": 100
          },
          "task": {
            "default": "megablast"
          },
          "dust": {
            "default": "yes"
          },
          "soft_masking": {
            "default": "true"
          }
        },
        "out": [
          "output"
        ]
      },
      "find_aligned_ids": {
        "run": "../../tools/python/extract-aligned-seq-ids-blast.cwl",
        "label": "Find aligned IDS",
        "in": {
          "blastout": "blastn/output",
          "columns": {
            "default": "qseqid sseqid pident slen length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid"
          },
          "pident": "perc_identity",
          "coverage": "coverage",
          "threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.blastout.nameroot + \".ids\";}"
          }
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/ChIP-Seq/chip-seq-alignment.cwl",
    "sha": "c6c286986c0d3ea41e6a5666989621f01ae24aae",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/ChIP-Seq/chip-seq-alignment.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\nid: chip_seq_alignment\ndoc: This workflow aligns ChIp-Seq samples\nlabel: ChIP-Seq alignment workflow\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  genome_index: Directory\n  genome_prefix: string\n  reads:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  readsquality: int\n  subsample_nreads: int\n  threads: int\n\noutputs:\n  bam_flagstat_out:\n    outputSource: alignment/bam_flagstat_out\n    type: File[]\n  bam_index_out:\n    outputSource: bam_index/out_sam\n    type: File[]\n  bam_stats_out:\n    outputSource: alignment/bam_stats_out\n    type: File[]\n  bed_file_out:\n    outputSource: bamtobed/out_stdout\n    type: File[]\n  final_bam_flagstat_out:\n    outputSource: final_bam_flagstat/out_stdout\n    type: File[]\n  final_bam_out:\n    outputSource: final_bam/out_sam\n    type: File[]\n  pbc_out:\n    outputSource: pbc/out\n    type: File[]\n  phantompeakqualtools_output_out:\n    outputSource: phantompeakqualtools/output_out\n    type: File[]\n  phantompeakqualtools_output_savp:\n    outputSource: phantompeakqualtools/output_savp\n    type: File[]?\n  subsample_pseudoreplicate_gzip_out:\n    outputSource: subsample/pseudoreplicate_gzip_out\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  subsample_subsample_out:\n    outputSource: subsample/subsample_out\n    type: File[]\n  subsample_tagalign_out:\n    outputSource: subsample/tagalign_out\n    type: File[]\n\nsteps:\n  alignment:\n    run: ../Alignments/bwa-alignment.cwl\n    label: bwa alignment workflow for single-end samples\n    scatter: reads\n    in:\n      reads: reads\n      genome_index: genome_index\n      genome_prefix: genome_prefix\n      threads: threads\n    out: [bam_out, bam_flagstat_out, bam_stats_out]\n  bam_index:\n    run: ../../tools/samtools/samtools-index.cwl\n    label: Samtools-index\n    scatter: in_bam\n    in:\n      in_bam: final_bam/out_sam\n    out: [out_sam]\n  bamtobed:\n    run: ../../tools/bedtools/bedtools-bamtobed.cwl\n    label: bedtools-bamtobed\n    scatter: i\n    in:\n      i: final_bam/out_sam\n      stdout:\n        valueFrom: '${ return inputs.i.nameroot + \".bed\";}'\n    out: [out_stdout]\n  filtered_bam:\n    run: ../../tools/samtools/samtools-view.cwl\n    label: Samtools-view\n    scatter: input\n    in:\n      input: alignment/bam_out\n      isbam: { default: true }\n      output_name:\n        valueFrom: '${ return inputs.input.nameroot + \".bam\";}'\n      readsquality: readsquality\n      threads: threads\n    out: [output]\n  final_bam:\n    run: ../../tools/samtools/samtools-sort.cwl\n    label: Samtools-sort\n    scatter: in_bam\n    in:\n      in_bam: filtered_bam/output\n      out_bam:\n        valueFrom: '${ return inputs.in_bam.nameroot + \"_sorted.bam\";}'\n      threads: threads\n    out: [out_sam]\n  final_bam_flagstat:\n    run: ../../tools/samtools/samtools-flagstat.cwl\n    label: Samtools-flagstat\n    scatter: in_bam\n    in:\n      in_bam: final_bam/out_sam\n      stdout:\n        valueFrom: >-\n          ${ return\n          inputs.in_bam.nameroot.replace(\"_sorted\",\"_filtered.flagstat\")}\n    out: [out_stdout]\n  pbc:\n    run: ../File-formats/bedtools-bam-pbc.cwl\n    label: Compute library complexity\n    scatter: bam_file\n    in:\n      bam_file: filtered_bam/output\n    out: [out]\n  phantompeakqualtools:\n    run: ../../tools/phantompeakqualtools/phantompeakqualtools.cwl\n    label: Phantompeakqualtools\n    scatter: c\n    in:\n      c: subsample/tagalign_out\n      filtchr: {default: chrM}\n      out:\n        valueFrom: '${ return inputs.c.nameroot + \".cc.qc\";}'\n      p: threads\n      savp:\n        valueFrom: '${ return inputs.c.nameroot + \".cc.plot.pdf\";}'\n    out: [output_out, output_savn, output_savp, output_savr]\n  subsample:\n    run: ../File-formats/subample-pseudoreplicates.cwl\n    label: Subsample BAM file creating a tagAlign and pseudoreplicates\n    scatter: bam_file\n    in:\n      bam_file: final_bam/out_sam\n      nreads: subsample_nreads\n    out: [pseudoreplicate_gzip_out, subsample_out, tagalign_out]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": "chip_seq_alignment",
    "cwl_inputs": "{'genome_index': 'Directory', 'genome_prefix': 'string', 'reads': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'readsquality': 'int', 'subsample_nreads': 'int', 'threads': 'int'}",
    "cwl_outputs": "{'bam_flagstat_out': {'outputSource': 'alignment/bam_flagstat_out', 'type': 'File[]'}, 'bam_index_out': {'outputSource': 'bam_index/out_sam', 'type': 'File[]'}, 'bam_stats_out': {'outputSource': 'alignment/bam_stats_out', 'type': 'File[]'}, 'bed_file_out': {'outputSource': 'bamtobed/out_stdout', 'type': 'File[]'}, 'final_bam_flagstat_out': {'outputSource': 'final_bam_flagstat/out_stdout', 'type': 'File[]'}, 'final_bam_out': {'outputSource': 'final_bam/out_sam', 'type': 'File[]'}, 'pbc_out': {'outputSource': 'pbc/out', 'type': 'File[]'}, 'phantompeakqualtools_output_out': {'outputSource': 'phantompeakqualtools/output_out', 'type': 'File[]'}, 'phantompeakqualtools_output_savp': {'outputSource': 'phantompeakqualtools/output_savp', 'type': 'File[]?'}, 'subsample_pseudoreplicate_gzip_out': {'outputSource': 'subsample/pseudoreplicate_gzip_out', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'subsample_subsample_out': {'outputSource': 'subsample/subsample_out', 'type': 'File[]'}, 'subsample_tagalign_out': {'outputSource': 'subsample/tagalign_out', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow aligns ChIp-Seq samples",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ChIP-Seq alignment workflow",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "alignment": {
        "run": "../Alignments/bwa-alignment.cwl",
        "label": "bwa alignment workflow for single-end samples",
        "scatter": "reads",
        "in": {
          "reads": "reads",
          "genome_index": "genome_index",
          "genome_prefix": "genome_prefix",
          "threads": "threads"
        },
        "out": [
          "bam_out",
          "bam_flagstat_out",
          "bam_stats_out"
        ]
      },
      "bam_index": {
        "run": "../../tools/samtools/samtools-index.cwl",
        "label": "Samtools-index",
        "scatter": "in_bam",
        "in": {
          "in_bam": "final_bam/out_sam"
        },
        "out": [
          "out_sam"
        ]
      },
      "bamtobed": {
        "run": "../../tools/bedtools/bedtools-bamtobed.cwl",
        "label": "bedtools-bamtobed",
        "scatter": "i",
        "in": {
          "i": "final_bam/out_sam",
          "stdout": {
            "valueFrom": "${ return inputs.i.nameroot + \".bed\";}"
          }
        },
        "out": [
          "out_stdout"
        ]
      },
      "filtered_bam": {
        "run": "../../tools/samtools/samtools-view.cwl",
        "label": "Samtools-view",
        "scatter": "input",
        "in": {
          "input": "alignment/bam_out",
          "isbam": {
            "default": true
          },
          "output_name": {
            "valueFrom": "${ return inputs.input.nameroot + \".bam\";}"
          },
          "readsquality": "readsquality",
          "threads": "threads"
        },
        "out": [
          "output"
        ]
      },
      "final_bam": {
        "run": "../../tools/samtools/samtools-sort.cwl",
        "label": "Samtools-sort",
        "scatter": "in_bam",
        "in": {
          "in_bam": "filtered_bam/output",
          "out_bam": {
            "valueFrom": "${ return inputs.in_bam.nameroot + \"_sorted.bam\";}"
          },
          "threads": "threads"
        },
        "out": [
          "out_sam"
        ]
      },
      "final_bam_flagstat": {
        "run": "../../tools/samtools/samtools-flagstat.cwl",
        "label": "Samtools-flagstat",
        "scatter": "in_bam",
        "in": {
          "in_bam": "final_bam/out_sam",
          "stdout": {
            "valueFrom": "${ return inputs.in_bam.nameroot.replace(\"_sorted\",\"_filtered.flagstat\")}"
          }
        },
        "out": [
          "out_stdout"
        ]
      },
      "pbc": {
        "run": "../File-formats/bedtools-bam-pbc.cwl",
        "label": "Compute library complexity",
        "scatter": "bam_file",
        "in": {
          "bam_file": "filtered_bam/output"
        },
        "out": [
          "out"
        ]
      },
      "phantompeakqualtools": {
        "run": "../../tools/phantompeakqualtools/phantompeakqualtools.cwl",
        "label": "Phantompeakqualtools",
        "scatter": "c",
        "in": {
          "c": "subsample/tagalign_out",
          "filtchr": {
            "default": "chrM"
          },
          "out": {
            "valueFrom": "${ return inputs.c.nameroot + \".cc.qc\";}"
          },
          "p": "threads",
          "savp": {
            "valueFrom": "${ return inputs.c.nameroot + \".cc.plot.pdf\";}"
          }
        },
        "out": [
          "output_out",
          "output_savn",
          "output_savp",
          "output_savr"
        ]
      },
      "subsample": {
        "run": "../File-formats/subample-pseudoreplicates.cwl",
        "label": "Subsample BAM file creating a tagAlign and pseudoreplicates",
        "scatter": "bam_file",
        "in": {
          "bam_file": "final_bam/out_sam",
          "nreads": "subsample_nreads"
        },
        "out": [
          "pseudoreplicate_gzip_out",
          "subsample_out",
          "tagalign_out"
        ]
      }
    }
  },
  {
    "path": "workflows/ChIP-Seq/diffbind-parallel.cwl",
    "sha": "d74e65c1ad402d4aa777a4b90bfd2d73f5560368",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/ChIP-Seq/diffbind-parallel.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\nid: diffbind_parallel\ndoc: This workflow runs Diffbind in parallel\nlabel: diffbind_parallel\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  peakcaller: string\n  bamDir: Directory\n  bedDir: Directory\n  factors: File[]\n  minMembers: int[]\n\noutputs:\n  diffbind_outpng:\n    outputSource: diffbind/outpng\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  diffbind_outxls:\n    outputSource: diffbind/outxls\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  diffbind_outbed:\n    outputSource: diffbind/outbed\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n\nsteps:\n  diffbind:\n    run: ../../tools/R/diffbind.cwl\n    scatter: [factor, minMembers]\n    scatterMethod: dotproduct\n    in:\n      peakcaller: peakcaller\n      bamDir: bamDir\n      bedDir: bedDir\n      factor: factors\n      minMembers: minMembers\n    out: [outpng, outxls, outbed]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "diffbind_parallel",
    "cwl_inputs": "{'peakcaller': 'string', 'bamDir': 'Directory', 'bedDir': 'Directory', 'factors': 'File[]', 'minMembers': 'int[]'}",
    "cwl_outputs": "{'diffbind_outpng': {'outputSource': 'diffbind/outpng', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'diffbind_outxls': {'outputSource': 'diffbind/outxls', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'diffbind_outbed': {'outputSource': 'diffbind/outbed', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow runs Diffbind in parallel",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "diffbind_parallel",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "diffbind": {
        "run": "../../tools/R/diffbind.cwl",
        "scatter": [
          "factor",
          "minMembers"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "peakcaller": "peakcaller",
          "bamDir": "bamDir",
          "bedDir": "bedDir",
          "factor": "factors",
          "minMembers": "minMembers"
        },
        "out": [
          "outpng",
          "outxls",
          "outbed"
        ]
      }
    }
  },
  {
    "path": "workflows/ChIP-Seq/gem.cwl",
    "sha": "edeb12ea3038a5f5773afe41411ff72261cb2695",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/ChIP-Seq/gem.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n    - class: InlineJavascriptRequirement\n    - class: StepInputExpressionRequirement\n    - class: SubworkflowFeatureRequirement\n\nlabel: \"GEM peak calling\"\ndoc: \"This workflow execute peak calling using GEM\"\n\ninputs:\n  threads: int\n  infile: File\n  chromsize: File\n  mapsize: int\n  format: string\n  genome_dir: Directory\n  k_min: int\n  k_max: int\n  smooth: int\n  k_seqs: int\n\noutputs:\n  gem_out:\n    outputSource: gem/output\n    type: Directory\n\nsteps:\n    gzip_cat:\n        run: ../../tools/basic/gzip.cwl\n        in:\n          d: { default: True}\n          file: infile\n        out: [output]\n    gem:\n        run: ../../tools/gem/gem.cwl\n        in:\n          t: threads\n          s: mapsize\n          g: chromsize\n          d: { default: \"Read_Distribution_ChIP-exo.txt\"}\n          expt: gzip_cat/output\n          f: format\n          genome: genome_dir\n          k_min: k_min\n          k_max: k_max\n          k_seqs: k_seqs\n          outNP: { default: True}\n          smooth: smooth\n          out:\n            valueFrom: ${ return inputs.expt.nameroot.replace('.tagAlign','_gem');}\n        out: [output]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'threads': 'int', 'infile': 'File', 'chromsize': 'File', 'mapsize': 'int', 'format': 'string', 'genome_dir': 'Directory', 'k_min': 'int', 'k_max': 'int', 'smooth': 'int', 'k_seqs': 'int'}",
    "cwl_outputs": "{'gem_out': {'outputSource': 'gem/output', 'type': 'Directory'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This workflow execute peak calling using GEM",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "GEM peak calling",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "gzip_cat": {
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "d": {
            "default": true
          },
          "file": "infile"
        },
        "out": [
          "output"
        ]
      },
      "gem": {
        "run": "../../tools/gem/gem.cwl",
        "in": {
          "t": "threads",
          "s": "mapsize",
          "g": "chromsize",
          "d": {
            "default": "Read_Distribution_ChIP-exo.txt"
          },
          "expt": "gzip_cat/output",
          "f": "format",
          "genome": "genome_dir",
          "k_min": "k_min",
          "k_max": "k_max",
          "k_seqs": "k_seqs",
          "outNP": {
            "default": true
          },
          "smooth": "smooth",
          "out": {
            "valueFrom": "${ return inputs.expt.nameroot.replace('.tagAlign','_gem');}"
          }
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/ChIP-Seq/idr-no-pooled.cwl",
    "sha": "3084f28b24b7900719e3e016c1573d505ecedc3d",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/ChIP-Seq/idr-no-pooled.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\nid: idr\ndoc: Irreproducible Discovery Rate (IDR) workflow with Homer annotation\nlabel: IDR workflow\n\nrequirements: \n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  narrowpeaks:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  soft_idr_threshold: float?\n  input_file_type: string\n  genome_fasta: File\n  genome_gtf: File?\n  output_file: string[]\n\noutputs:\n  output:\n    outputSource: homer_annotate_peaks_file/output\n    type: File[]\n  annStats_out:\n    outputSource: homer_annotate_peaks_file/annStats_out\n    type: File[]?\n  plots:\n    outputSource: idr/plots\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  idr_peaks:\n    outputSource: idr/idr_peaks\n    type: File[]\n\nsteps:\n  idr:\n    run: ../../tools/idr/idr.cwl\n    label: idr\n    scatter: [samples, output_file]\n    scatterMethod: dotproduct\n    in:\n      input_file_type: input_file_type\n      output_file: output_file\n      plot: { default: true }\n      rank: { default: signal.value }\n      samples: narrowpeaks\n      soft_idr_threshold: soft_idr_threshold\n      use_best_multisummit_IDR: {default: true}\n    out: [idr_peaks, plots]\n  homer_make_tag_directory:\n    run: ../../tools/homer/homer-makeTagDirectory.cwl\n    label: HOMER-makeTagDirectory\n    scatter: input\n    in:\n      checkGC: { default: true}\n      format: { default: bed}\n      genome: genome_fasta\n      input: idr/idr_peaks\n      tags_directory_name:\n        valueFrom: ' ${ return inputs.input.nameroot + \"_tags\";}'\n    out: [tags_directory]\n  homer_annotate_peaks_file:\n    run: ../../tools/homer/homer-annotatePeaks.cwl\n    scatter: [input, d]\n    scatterMethod: dotproduct\n    in:\n      annStats:\n        valueFrom: '${ return inputs.input.basename + \"_annStats.txt\";}'\n      d: homer_make_tag_directory/tags_directory\n      fpkm: { default: true}\n      genome: genome_fasta\n      gtf: genome_gtf\n      input: idr/idr_peaks\n      o:\n        valueFrom: '${ return inputs.input.basename + \"_annotation.txt\";}'\n    out: [annStats_out, output]\n\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": "idr",
    "cwl_inputs": "{'narrowpeaks': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'soft_idr_threshold': 'float?', 'input_file_type': 'string', 'genome_fasta': 'File', 'genome_gtf': 'File?', 'output_file': 'string[]'}",
    "cwl_outputs": "{'output': {'outputSource': 'homer_annotate_peaks_file/output', 'type': 'File[]'}, 'annStats_out': {'outputSource': 'homer_annotate_peaks_file/annStats_out', 'type': 'File[]?'}, 'plots': {'outputSource': 'idr/plots', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'idr_peaks': {'outputSource': 'idr/idr_peaks', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "Irreproducible Discovery Rate (IDR) workflow with Homer annotation",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "IDR workflow",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "idr": {
        "run": "../../tools/idr/idr.cwl",
        "label": "idr",
        "scatter": [
          "samples",
          "output_file"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "input_file_type": "input_file_type",
          "output_file": "output_file",
          "plot": {
            "default": true
          },
          "rank": {
            "default": "signal.value"
          },
          "samples": "narrowpeaks",
          "soft_idr_threshold": "soft_idr_threshold",
          "use_best_multisummit_IDR": {
            "default": true
          }
        },
        "out": [
          "idr_peaks",
          "plots"
        ]
      },
      "homer_make_tag_directory": {
        "run": "../../tools/homer/homer-makeTagDirectory.cwl",
        "label": "HOMER-makeTagDirectory",
        "scatter": "input",
        "in": {
          "checkGC": {
            "default": true
          },
          "format": {
            "default": "bed"
          },
          "genome": "genome_fasta",
          "input": "idr/idr_peaks",
          "tags_directory_name": {
            "valueFrom": " ${ return inputs.input.nameroot + \"_tags\";}"
          }
        },
        "out": [
          "tags_directory"
        ]
      },
      "homer_annotate_peaks_file": {
        "run": "../../tools/homer/homer-annotatePeaks.cwl",
        "scatter": [
          "input",
          "d"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "annStats": {
            "valueFrom": "${ return inputs.input.basename + \"_annStats.txt\";}"
          },
          "d": "homer_make_tag_directory/tags_directory",
          "fpkm": {
            "default": true
          },
          "genome": "genome_fasta",
          "gtf": "genome_gtf",
          "input": "idr/idr_peaks",
          "o": {
            "valueFrom": "${ return inputs.input.basename + \"_annotation.txt\";}"
          }
        },
        "out": [
          "annStats_out",
          "output"
        ]
      }
    }
  },
  {
    "path": "workflows/ChIP-Seq/idr.cwl",
    "sha": "604e48d67157b2eb6d231968f78057fada67bb76",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/ChIP-Seq/idr.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\nid: idr\ndoc: Irreproducible Discovery Rate (IDR) workflow with Homer annotation\nlabel: IDR workflow\n\nrequirements: \n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  narrowpeaks:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  soft_idr_threshold: float?\n  input_file_type: string\n  genome_fasta: File\n  genome_gtf: File?\n  output_file: string[]\n  pooled_peak_list: File[]\n\noutputs:\n  output:\n    outputSource: homer_annotate_peaks_file/output\n    type: File[]\n  annStats_out:\n    outputSource: homer_annotate_peaks_file/annStats_out\n    type: File[]?\n  plots:\n    outputSource: idr/plots\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  idr_peaks:\n    outputSource: idr/idr_peaks\n    type: File[]\n\nsteps:\n  idr:\n    run: ../../tools/idr/idr.cwl\n    label: idr\n    scatter: [samples, output_file, peak_list]\n    scatterMethod: dotproduct\n    in:\n      input_file_type: input_file_type\n      output_file: output_file\n      peak_list: pooled_peak_list\n      plot: { default: true }\n      rank: { default: signal.value }\n      samples: narrowpeaks\n      soft_idr_threshold: soft_idr_threshold\n      use_best_multisummit_IDR: {default: true}\n    out: [idr_peaks, plots]\n  homer_make_tag_directory:\n    run: ../../tools/homer/homer-makeTagDirectory.cwl\n    label: HOMER-makeTagDirectory\n    scatter: input\n    in:\n      checkGC: { default: true}\n      format: { default: bed}\n      genome: genome_fasta\n      input: idr/idr_peaks\n      tags_directory_name:\n        valueFrom: ' ${ return inputs.input.nameroot + \"_tags\";}'\n    out: [tags_directory]\n  homer_annotate_peaks_file:\n    run: ../../tools/homer/homer-annotatePeaks.cwl\n    scatter: [input, d]\n    scatterMethod: dotproduct\n    in:\n      annStats:\n        valueFrom: '${ return inputs.input.basename + \"_annStats.txt\";}'\n      d: homer_make_tag_directory/tags_directory\n      fpkm: { default: true}\n      genome: genome_fasta\n      gtf: genome_gtf\n      input: idr/idr_peaks\n      o:\n        valueFrom: '${ return inputs.input.basename + \"_annotation.txt\";}'\n    out: [annStats_out, output]\n\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": "idr",
    "cwl_inputs": "{'narrowpeaks': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'soft_idr_threshold': 'float?', 'input_file_type': 'string', 'genome_fasta': 'File', 'genome_gtf': 'File?', 'output_file': 'string[]', 'pooled_peak_list': 'File[]'}",
    "cwl_outputs": "{'output': {'outputSource': 'homer_annotate_peaks_file/output', 'type': 'File[]'}, 'annStats_out': {'outputSource': 'homer_annotate_peaks_file/annStats_out', 'type': 'File[]?'}, 'plots': {'outputSource': 'idr/plots', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'idr_peaks': {'outputSource': 'idr/idr_peaks', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "Irreproducible Discovery Rate (IDR) workflow with Homer annotation",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "IDR workflow",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "idr": {
        "run": "../../tools/idr/idr.cwl",
        "label": "idr",
        "scatter": [
          "samples",
          "output_file",
          "peak_list"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "input_file_type": "input_file_type",
          "output_file": "output_file",
          "peak_list": "pooled_peak_list",
          "plot": {
            "default": true
          },
          "rank": {
            "default": "signal.value"
          },
          "samples": "narrowpeaks",
          "soft_idr_threshold": "soft_idr_threshold",
          "use_best_multisummit_IDR": {
            "default": true
          }
        },
        "out": [
          "idr_peaks",
          "plots"
        ]
      },
      "homer_make_tag_directory": {
        "run": "../../tools/homer/homer-makeTagDirectory.cwl",
        "label": "HOMER-makeTagDirectory",
        "scatter": "input",
        "in": {
          "checkGC": {
            "default": true
          },
          "format": {
            "default": "bed"
          },
          "genome": "genome_fasta",
          "input": "idr/idr_peaks",
          "tags_directory_name": {
            "valueFrom": " ${ return inputs.input.nameroot + \"_tags\";}"
          }
        },
        "out": [
          "tags_directory"
        ]
      },
      "homer_annotate_peaks_file": {
        "run": "../../tools/homer/homer-annotatePeaks.cwl",
        "scatter": [
          "input",
          "d"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "annStats": {
            "valueFrom": "${ return inputs.input.basename + \"_annStats.txt\";}"
          },
          "d": "homer_make_tag_directory/tags_directory",
          "fpkm": {
            "default": true
          },
          "genome": "genome_fasta",
          "gtf": "genome_gtf",
          "input": "idr/idr_peaks",
          "o": {
            "valueFrom": "${ return inputs.input.basename + \"_annotation.txt\";}"
          }
        },
        "out": [
          "annStats_out",
          "output"
        ]
      }
    }
  },
  {
    "path": "workflows/ChIP-Seq/meme-motif.cwl",
    "sha": "a903b53d5532e51c738b5c335f0814ac16d752fc",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/ChIP-Seq/meme-motif.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\nlabel: \"MEME motif\"\ndoc: \"This workflow uses MEME suite for motif finding\"\n\ninputs:\n    genome: File\n    bed: File[]\n    nmotifs: int\n    memedb: File[]\n\noutputs:\n    meme_out:\n        outputSource: memechip/output\n        type: Directory[]\n\nsteps:\n    fastafrombed:\n        run: ../File-formats/fasta-from-bed.cwl\n        scatter: bed\n        in:\n          fasta_out:\n            valueFrom: ${ return inputs.bed.nameroot + \".fa\";}\n          fasta: genome\n          bed: bed\n        out: [output]\n    memechip:\n        run: ../../tools/meme/meme-chip.cwl\n        scatter: [i, db]\n        scatterMethod: flat_crossproduct\n        in:\n          i: fastafrombed/output\n          oc:\n            valueFrom: ${ return inputs.i.nameroot + \"_\" + inputs.db.nameroot;}\n          time: { default: 300 }\n          ccut: { default: 100 }\n          order: { default: 1 }\n          db: memedb\n          meme-mod: { default: \"zoops\" }\n          meme-nmotifs: nmotifs\n          meme-minw: { default: 6 }\n          meme-maxw: { default: 30 }\n          dreme-e: { default: 0.05 }\n          centrimo-score: { default: 5.0 }\n          centrimo-ethresh: { default: 10.0 }\n        out: [output]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'genome': 'File', 'bed': 'File[]', 'nmotifs': 'int', 'memedb': 'File[]'}",
    "cwl_outputs": "{'meme_out': {'outputSource': 'memechip/output', 'type': 'Directory[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow uses MEME suite for motif finding",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "MEME motif",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "fastafrombed": {
        "run": "../File-formats/fasta-from-bed.cwl",
        "scatter": "bed",
        "in": {
          "fasta_out": {
            "valueFrom": "${ return inputs.bed.nameroot + \".fa\";}"
          },
          "fasta": "genome",
          "bed": "bed"
        },
        "out": [
          "output"
        ]
      },
      "memechip": {
        "run": "../../tools/meme/meme-chip.cwl",
        "scatter": [
          "i",
          "db"
        ],
        "scatterMethod": "flat_crossproduct",
        "in": {
          "i": "fastafrombed/output",
          "oc": {
            "valueFrom": "${ return inputs.i.nameroot + \"_\" + inputs.db.nameroot;}"
          },
          "time": {
            "default": 300
          },
          "ccut": {
            "default": 100
          },
          "order": {
            "default": 1
          },
          "db": "memedb",
          "meme-mod": {
            "default": "zoops"
          },
          "meme-nmotifs": "nmotifs",
          "meme-minw": {
            "default": 6
          },
          "meme-maxw": {
            "default": 30
          },
          "dreme-e": {
            "default": 0.05
          },
          "centrimo-score": {
            "default": 5.0
          },
          "centrimo-ethresh": {
            "default": 10.0
          }
        },
        "out": [
          "output"
        ]
      }
    }
  },
  {
    "path": "workflows/ChIP-Seq/peak-calling-MACS2-genome-size.cwl",
    "sha": "6ee8b352dd15b5beb2e5f0604996dbe5c870d5a9",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/ChIP-Seq/peak-calling-MACS2-genome-size.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nlabel: \"ChIP-seq peak caller workflow MACS2 based\"\ndoc: \"This workflow execute peak caller and QC for ChIP-seq using MACS2\"\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  genome_size: File\n  genome_fasta: File\n  genome_gtf: File\n  tagAlign_gz: File[]\n  macs_callpeaks_g: string\n  macs_callpeaks_q: float\n  nomodel: boolean?\n  extsize: int?\n\noutputs:\n  readQC_plots:\n    outputSource: readQC/plots\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  macs_cutoff_pdf:\n    outputSource: macs_cutoff/out_pdf\n    type: File[]\n  macs_cutoff_inflection:\n    outputSource: macs_cutoff/out_inflection\n    type: File[]\n  macs_callpeak_q_value_narrowPeak:\n    outputSource: macs_callpeak_q_value/narrowPeak\n    type: File[]\n  macs_callpeak_q_value_xls:\n    outputSource: macs_callpeak_q_value/xls\n    type: File[]\n  macs_callpeak_q_value_bed:\n    outputSource: macs_callpeak_q_value/bed\n    type: File[]\n  homer_annotate_peaks_output:\n    outputSource: homer_annotate_peaks/output\n    type: File[]\n  homer_annotate_peaks_annStats:\n    outputSource: homer_annotate_peaks/annStats_out\n    type: File[]?\n  lambda_tdf_out:\n    outputSource: macs_callpeak_q_value/lambda\n    type: File[]\n  pileup_tdf_out:\n    outputSource: macs_callpeak_q_value/pileup\n    type: File[]\n\nsteps:\n  gzip_cat:\n    run: ../../tools/basic/gzip.cwl\n    scatter: file\n    in:\n      d: { default: True}\n      file: tagAlign_gz\n    out: [output]\n  homer_tags:\n    run: ../../tools/homer/homer-makeTagDirectory.cwl\n    scatter: input\n    in:\n      tags_directory_name:\n        valueFrom: ${ return inputs.input.nameroot + \"_tags\";}\n      checkGC: { default: True}\n      genome: genome_fasta\n      input: gzip_cat/output\n      format: { default: \"bed\"}\n    out: [tags_directory]\n  readQC:\n    run: ../../tools/R/readQC.cwl\n    scatter: tags_directory\n    in:\n      tags_directory: homer_tags/tags_directory\n    out: [plots]\n  macs_callpeak:\n    run: ../../tools/macs/macs2-callpeak.cwl\n    scatter: t\n    in:\n      n:\n        valueFrom: ${ return inputs.t.nameroot;}\n      f: { default: \"BED\"}\n      g: macs_callpeaks_g\n      cutoff-analysis: { default: True}\n      nomodel: nomodel\n      B: { default: True}\n      shift: { default: 0}\n      extsize: extsize\n      q: macs_callpeaks_q\n      outdir_name:\n        valueFrom: ${ return inputs.t.nameroot + \"_peaks\";}\n      t: gzip_cat/output\n    out: [cutoff_analysis]\n  macs_cutoff:\n    run: ../../tools/R/macs-cutoff.cwl\n    scatter: peak_cutoff_file\n    in:\n      peak_cutoff_file: macs_callpeak/cutoff_analysis\n      out_pdf_name:\n        valueFrom: ${ return inputs.peak_cutoff_file.nameroot + \".pdf\";}\n      out_inflection_name:\n        valueFrom: ${ return inputs.peak_cutoff_file.nameroot + \"_inflection.txt\";}\n    out: [out_pdf,out_inflection]\n  macs_callpeak_q_value:\n    run: ../../tools/macs/macs2-callpeak.cwl\n    scatter: [t, q_file]\n    scatterMethod: dotproduct\n    in:\n      n:\n        valueFrom: ${ return inputs.t.nameroot;}\n      f: { default: \"BED\"}\n      g: macs_callpeaks_g\n      cutoff-analysis: { default: True}\n      call-summits: { default: True}\n      nomodel: nomodel\n      B: { default: True}\n      shift: { default: 0}\n      extsize: extsize\n      q_file: macs_cutoff/out_inflection\n      outdir_name:\n        valueFrom: ${ return inputs.t.nameroot + \"_peaks\";}\n      t: gzip_cat/output\n    out: [lambda, pileup, narrowPeak, xls, bed]\n  homer_annotate_peaks:\n    run: ../../tools/homer/homer-annotatePeaks.cwl\n    scatter: [input, d]\n    scatterMethod: dotproduct\n    in:\n      genome: genome_fasta\n      gtf: genome_gtf\n      input: macs_callpeak_q_value/narrowPeak\n      o:\n        valueFrom: ${ return inputs.input.nameroot + \"_annotation.txt\";}\n      annStats:\n        valueFrom: ${ return inputs.input.nameroot + \"_annStats.txt\";}\n      d: homer_tags/tags_directory\n      fpkm: {default: True}\n    out: [output,annStats_out]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'genome_size': 'File', 'genome_fasta': 'File', 'genome_gtf': 'File', 'tagAlign_gz': 'File[]', 'macs_callpeaks_g': 'string', 'macs_callpeaks_q': 'float', 'nomodel': 'boolean?', 'extsize': 'int?'}",
    "cwl_outputs": "{'readQC_plots': {'outputSource': 'readQC/plots', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'macs_cutoff_pdf': {'outputSource': 'macs_cutoff/out_pdf', 'type': 'File[]'}, 'macs_cutoff_inflection': {'outputSource': 'macs_cutoff/out_inflection', 'type': 'File[]'}, 'macs_callpeak_q_value_narrowPeak': {'outputSource': 'macs_callpeak_q_value/narrowPeak', 'type': 'File[]'}, 'macs_callpeak_q_value_xls': {'outputSource': 'macs_callpeak_q_value/xls', 'type': 'File[]'}, 'macs_callpeak_q_value_bed': {'outputSource': 'macs_callpeak_q_value/bed', 'type': 'File[]'}, 'homer_annotate_peaks_output': {'outputSource': 'homer_annotate_peaks/output', 'type': 'File[]'}, 'homer_annotate_peaks_annStats': {'outputSource': 'homer_annotate_peaks/annStats_out', 'type': 'File[]?'}, 'lambda_tdf_out': {'outputSource': 'macs_callpeak_q_value/lambda', 'type': 'File[]'}, 'pileup_tdf_out': {'outputSource': 'macs_callpeak_q_value/pileup', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow execute peak caller and QC for ChIP-seq using MACS2",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ChIP-seq peak caller workflow MACS2 based",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "gzip_cat": {
        "run": "../../tools/basic/gzip.cwl",
        "scatter": "file",
        "in": {
          "d": {
            "default": true
          },
          "file": "tagAlign_gz"
        },
        "out": [
          "output"
        ]
      },
      "homer_tags": {
        "run": "../../tools/homer/homer-makeTagDirectory.cwl",
        "scatter": "input",
        "in": {
          "tags_directory_name": {
            "valueFrom": "${ return inputs.input.nameroot + \"_tags\";}"
          },
          "checkGC": {
            "default": true
          },
          "genome": "genome_fasta",
          "input": "gzip_cat/output",
          "format": {
            "default": "bed"
          }
        },
        "out": [
          "tags_directory"
        ]
      },
      "readQC": {
        "run": "../../tools/R/readQC.cwl",
        "scatter": "tags_directory",
        "in": {
          "tags_directory": "homer_tags/tags_directory"
        },
        "out": [
          "plots"
        ]
      },
      "macs_callpeak": {
        "run": "../../tools/macs/macs2-callpeak.cwl",
        "scatter": "t",
        "in": {
          "n": {
            "valueFrom": "${ return inputs.t.nameroot;}"
          },
          "f": {
            "default": "BED"
          },
          "g": "macs_callpeaks_g",
          "cutoff-analysis": {
            "default": true
          },
          "nomodel": "nomodel",
          "B": {
            "default": true
          },
          "shift": {
            "default": 0
          },
          "extsize": "extsize",
          "q": "macs_callpeaks_q",
          "outdir_name": {
            "valueFrom": "${ return inputs.t.nameroot + \"_peaks\";}"
          },
          "t": "gzip_cat/output"
        },
        "out": [
          "cutoff_analysis"
        ]
      },
      "macs_cutoff": {
        "run": "../../tools/R/macs-cutoff.cwl",
        "scatter": "peak_cutoff_file",
        "in": {
          "peak_cutoff_file": "macs_callpeak/cutoff_analysis",
          "out_pdf_name": {
            "valueFrom": "${ return inputs.peak_cutoff_file.nameroot + \".pdf\";}"
          },
          "out_inflection_name": {
            "valueFrom": "${ return inputs.peak_cutoff_file.nameroot + \"_inflection.txt\";}"
          }
        },
        "out": [
          "out_pdf",
          "out_inflection"
        ]
      },
      "macs_callpeak_q_value": {
        "run": "../../tools/macs/macs2-callpeak.cwl",
        "scatter": [
          "t",
          "q_file"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "n": {
            "valueFrom": "${ return inputs.t.nameroot;}"
          },
          "f": {
            "default": "BED"
          },
          "g": "macs_callpeaks_g",
          "cutoff-analysis": {
            "default": true
          },
          "call-summits": {
            "default": true
          },
          "nomodel": "nomodel",
          "B": {
            "default": true
          },
          "shift": {
            "default": 0
          },
          "extsize": "extsize",
          "q_file": "macs_cutoff/out_inflection",
          "outdir_name": {
            "valueFrom": "${ return inputs.t.nameroot + \"_peaks\";}"
          },
          "t": "gzip_cat/output"
        },
        "out": [
          "lambda",
          "pileup",
          "narrowPeak",
          "xls",
          "bed"
        ]
      },
      "homer_annotate_peaks": {
        "run": "../../tools/homer/homer-annotatePeaks.cwl",
        "scatter": [
          "input",
          "d"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "genome": "genome_fasta",
          "gtf": "genome_gtf",
          "input": "macs_callpeak_q_value/narrowPeak",
          "o": {
            "valueFrom": "${ return inputs.input.nameroot + \"_annotation.txt\";}"
          },
          "annStats": {
            "valueFrom": "${ return inputs.input.nameroot + \"_annStats.txt\";}"
          },
          "d": "homer_tags/tags_directory",
          "fpkm": {
            "default": true
          }
        },
        "out": [
          "output",
          "annStats_out"
        ]
      }
    }
  },
  {
    "path": "workflows/ChIP-Seq/peak-calling-MACS2.cwl",
    "sha": "00a56d9e076652df9a9111ef012f22390a3fd035",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/ChIP-Seq/peak-calling-MACS2.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nlabel: \"ChIP-seq peak caller workflow MACS2 based\"\ndoc: \"This workflow execute peak caller and QC for ChIP-seq using MACS2\"\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  genome_name: string\n  genome_fasta: File\n  genome_gtf: File\n  tagAlign_gz: File[]\n  macs_callpeaks_g: string\n  macs_callpeaks_q: float\n  nomodel: boolean?\n  extsize: int?\n\noutputs:\n  readQC_plots:\n    outputSource: readQC/plots\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  macs_cutoff_pdf:\n    outputSource: macs_cutoff/out_pdf\n    type: File[]\n  macs_cutoff_inflection:\n    outputSource: macs_cutoff/out_inflection\n    type: File[]\n  macs_callpeak_q_value_narrowPeak:\n    outputSource: macs_callpeak_q_value/narrowPeak\n    type: File[]\n  macs_callpeak_q_value_xls:\n    outputSource: macs_callpeak_q_value/xls\n    type: File[]\n  macs_callpeak_q_value_bed:\n    outputSource: macs_callpeak_q_value/bed\n    type: File[]\n  homer_annotate_peaks_output:\n    outputSource: homer_annotate_peaks/output\n    type: File[]\n  homer_annotate_peaks_annStats:\n    outputSource: homer_annotate_peaks/annStats_out\n    type: File[]?\n  lambda_tdf_out:\n    outputSource: lambda_bdg_to_tdf/out_tdf\n    type: File[]\n  pileup_tdf_out:\n    outputSource: pileup_bdg_to_tdf/out_tdf\n    type: File[]\n\nsteps:\n  gzip_cat:\n    run: ../../tools/basic/gzip.cwl\n    scatter: file\n    in:\n      d: { default: True}\n      file: tagAlign_gz\n    out: [output]\n  homer_tags:\n    run: ../../tools/homer/homer-makeTagDirectory.cwl\n    scatter: input\n    in:\n      tags_directory_name:\n        valueFrom: ${ return inputs.input.nameroot + \"_tags\";}\n      checkGC: { default: True}\n      genome: genome_fasta\n      input: gzip_cat/output\n      format: { default: \"bed\"}\n    out: [tags_directory]\n  readQC:\n    run: ../../tools/R/readQC.cwl\n    scatter: tags_directory\n    in:\n      tags_directory: homer_tags/tags_directory\n    out: [plots]\n  macs_callpeak:\n    run: ../../tools/macs/macs2-callpeak.cwl\n    scatter: t\n    in:\n      n:\n        valueFrom: ${ return inputs.t.nameroot;}\n      f: { default: \"BED\"}\n      g: macs_callpeaks_g\n      cutoff-analysis: { default: True}\n      nomodel: nomodel\n      B: { default: True}\n      shift: { default: 0}\n      extsize: extsize\n      q: macs_callpeaks_q\n      outdir_name:\n        valueFrom: ${ return inputs.t.nameroot + \"_peaks\";}\n      t: gzip_cat/output\n    out: [cutoff_analysis]\n  macs_cutoff:\n    run: ../../tools/R/macs-cutoff.cwl\n    scatter: peak_cutoff_file\n    in:\n      peak_cutoff_file: macs_callpeak/cutoff_analysis\n      out_pdf_name:\n        valueFrom: ${ return inputs.peak_cutoff_file.nameroot + \".pdf\";}\n      out_inflection_name:\n        valueFrom: ${ return inputs.peak_cutoff_file.nameroot + \"_inflection.txt\";}\n    out: [out_pdf,out_inflection]\n  macs_callpeak_q_value:\n    run: ../../tools/macs/macs2-callpeak.cwl\n    scatter: [t, q_file]\n    scatterMethod: dotproduct\n    in:\n      n:\n        valueFrom: ${ return inputs.t.nameroot;}\n      f: { default: \"BED\"}\n      g: macs_callpeaks_g\n      cutoff-analysis: { default: True}\n      call-summits: { default: True}\n      nomodel: nomodel\n      B: { default: True}\n      shift: { default: 0}\n      extsize: extsize\n      q_file: macs_cutoff/out_inflection\n      outdir_name:\n        valueFrom: ${ return inputs.t.nameroot + \"_peaks\";}\n      t: gzip_cat/output\n    out: [lambda, pileup, narrowPeak, xls, bed]\n  homer_annotate_peaks:\n    run: ../../tools/homer/homer-annotatePeaks.cwl\n    scatter: [input, d]\n    scatterMethod: dotproduct\n    in:\n      genome: genome_fasta\n      gtf: genome_gtf\n      input: macs_callpeak_q_value/narrowPeak\n      o:\n        valueFrom: ${ return inputs.input.nameroot + \"_annotation.txt\";}\n      annStats:\n        valueFrom: ${ return inputs.input.nameroot + \"_annStats.txt\";}\n      d: homer_tags/tags_directory\n      fpkm: {default: True}\n    out: [output,annStats_out]\n  lambda_bdg_to_tdf:\n    run: ../../tools/igvtools/igvtools-totdf.cwl\n    scatter: i\n    in:\n      i: macs_callpeak_q_value/lambda\n      g: genome_name\n      o:\n        valueFrom: ${ return inputs.i.nameroot + \".tdf\";}\n      z: {default: 5}\n    out: [out_tdf]\n  pileup_bdg_to_tdf:\n    run: ../../tools/igvtools/igvtools-totdf.cwl\n    scatter: i\n    in:\n      i: macs_callpeak_q_value/pileup\n      g: genome_name\n      o:\n        valueFrom: ${ return inputs.i.nameroot + \".tdf\";}\n      z: {default: 5}\n    out: [out_tdf]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'genome_name': 'string', 'genome_fasta': 'File', 'genome_gtf': 'File', 'tagAlign_gz': 'File[]', 'macs_callpeaks_g': 'string', 'macs_callpeaks_q': 'float', 'nomodel': 'boolean?', 'extsize': 'int?'}",
    "cwl_outputs": "{'readQC_plots': {'outputSource': 'readQC/plots', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'macs_cutoff_pdf': {'outputSource': 'macs_cutoff/out_pdf', 'type': 'File[]'}, 'macs_cutoff_inflection': {'outputSource': 'macs_cutoff/out_inflection', 'type': 'File[]'}, 'macs_callpeak_q_value_narrowPeak': {'outputSource': 'macs_callpeak_q_value/narrowPeak', 'type': 'File[]'}, 'macs_callpeak_q_value_xls': {'outputSource': 'macs_callpeak_q_value/xls', 'type': 'File[]'}, 'macs_callpeak_q_value_bed': {'outputSource': 'macs_callpeak_q_value/bed', 'type': 'File[]'}, 'homer_annotate_peaks_output': {'outputSource': 'homer_annotate_peaks/output', 'type': 'File[]'}, 'homer_annotate_peaks_annStats': {'outputSource': 'homer_annotate_peaks/annStats_out', 'type': 'File[]?'}, 'lambda_tdf_out': {'outputSource': 'lambda_bdg_to_tdf/out_tdf', 'type': 'File[]'}, 'pileup_tdf_out': {'outputSource': 'pileup_bdg_to_tdf/out_tdf', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow execute peak caller and QC for ChIP-seq using MACS2",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ChIP-seq peak caller workflow MACS2 based",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "gzip_cat": {
        "run": "../../tools/basic/gzip.cwl",
        "scatter": "file",
        "in": {
          "d": {
            "default": true
          },
          "file": "tagAlign_gz"
        },
        "out": [
          "output"
        ]
      },
      "homer_tags": {
        "run": "../../tools/homer/homer-makeTagDirectory.cwl",
        "scatter": "input",
        "in": {
          "tags_directory_name": {
            "valueFrom": "${ return inputs.input.nameroot + \"_tags\";}"
          },
          "checkGC": {
            "default": true
          },
          "genome": "genome_fasta",
          "input": "gzip_cat/output",
          "format": {
            "default": "bed"
          }
        },
        "out": [
          "tags_directory"
        ]
      },
      "readQC": {
        "run": "../../tools/R/readQC.cwl",
        "scatter": "tags_directory",
        "in": {
          "tags_directory": "homer_tags/tags_directory"
        },
        "out": [
          "plots"
        ]
      },
      "macs_callpeak": {
        "run": "../../tools/macs/macs2-callpeak.cwl",
        "scatter": "t",
        "in": {
          "n": {
            "valueFrom": "${ return inputs.t.nameroot;}"
          },
          "f": {
            "default": "BED"
          },
          "g": "macs_callpeaks_g",
          "cutoff-analysis": {
            "default": true
          },
          "nomodel": "nomodel",
          "B": {
            "default": true
          },
          "shift": {
            "default": 0
          },
          "extsize": "extsize",
          "q": "macs_callpeaks_q",
          "outdir_name": {
            "valueFrom": "${ return inputs.t.nameroot + \"_peaks\";}"
          },
          "t": "gzip_cat/output"
        },
        "out": [
          "cutoff_analysis"
        ]
      },
      "macs_cutoff": {
        "run": "../../tools/R/macs-cutoff.cwl",
        "scatter": "peak_cutoff_file",
        "in": {
          "peak_cutoff_file": "macs_callpeak/cutoff_analysis",
          "out_pdf_name": {
            "valueFrom": "${ return inputs.peak_cutoff_file.nameroot + \".pdf\";}"
          },
          "out_inflection_name": {
            "valueFrom": "${ return inputs.peak_cutoff_file.nameroot + \"_inflection.txt\";}"
          }
        },
        "out": [
          "out_pdf",
          "out_inflection"
        ]
      },
      "macs_callpeak_q_value": {
        "run": "../../tools/macs/macs2-callpeak.cwl",
        "scatter": [
          "t",
          "q_file"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "n": {
            "valueFrom": "${ return inputs.t.nameroot;}"
          },
          "f": {
            "default": "BED"
          },
          "g": "macs_callpeaks_g",
          "cutoff-analysis": {
            "default": true
          },
          "call-summits": {
            "default": true
          },
          "nomodel": "nomodel",
          "B": {
            "default": true
          },
          "shift": {
            "default": 0
          },
          "extsize": "extsize",
          "q_file": "macs_cutoff/out_inflection",
          "outdir_name": {
            "valueFrom": "${ return inputs.t.nameroot + \"_peaks\";}"
          },
          "t": "gzip_cat/output"
        },
        "out": [
          "lambda",
          "pileup",
          "narrowPeak",
          "xls",
          "bed"
        ]
      },
      "homer_annotate_peaks": {
        "run": "../../tools/homer/homer-annotatePeaks.cwl",
        "scatter": [
          "input",
          "d"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "genome": "genome_fasta",
          "gtf": "genome_gtf",
          "input": "macs_callpeak_q_value/narrowPeak",
          "o": {
            "valueFrom": "${ return inputs.input.nameroot + \"_annotation.txt\";}"
          },
          "annStats": {
            "valueFrom": "${ return inputs.input.nameroot + \"_annStats.txt\";}"
          },
          "d": "homer_tags/tags_directory",
          "fpkm": {
            "default": true
          }
        },
        "out": [
          "output",
          "annStats_out"
        ]
      },
      "lambda_bdg_to_tdf": {
        "run": "../../tools/igvtools/igvtools-totdf.cwl",
        "scatter": "i",
        "in": {
          "i": "macs_callpeak_q_value/lambda",
          "g": "genome_name",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot + \".tdf\";}"
          },
          "z": {
            "default": 5
          }
        },
        "out": [
          "out_tdf"
        ]
      },
      "pileup_bdg_to_tdf": {
        "run": "../../tools/igvtools/igvtools-totdf.cwl",
        "scatter": "i",
        "in": {
          "i": "macs_callpeak_q_value/pileup",
          "g": "genome_name",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot + \".tdf\";}"
          },
          "z": {
            "default": 5
          }
        },
        "out": [
          "out_tdf"
        ]
      }
    }
  },
  {
    "path": "workflows/ChIP-exo/peak-caller-MACE-SE.cwl",
    "sha": "359ab5dda631d5b677f015519fcb4142dc0343a7",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/ChIP-exo/peak-caller-MACE-SE.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\nlabel: MACE ChIP-exo peak caller workflow for single-end samples\ndoc: >-\n  This workflow execute peak caller and QC from ChIP-exo for single-end samples\n  using MACE\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  chrom_size: File\n  sorted_bam:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  output_basename: string[]\n  genome_gtf: File\n  tss_size: int\n  norm_method: string\n\noutputs:\n  annotated_bed:\n    outputSource: annotate_bed_gff/output\n    type: File[]\n\nsteps:\n  preprocessor:\n    run: ../../tools/mace/preprocessor.cwl\n    label: MACE-preprocessor\n    scatter: [i, o]\n    scatterMethod: dotproduct\n    in:\n      i: sorted_bam\n      o: output_basename\n      r: chrom_size\n      m: norm_method\n    out: [out_forward, out_reverse]\n  mace:\n    run: ../../tools/mace/mace.cwl\n    label: MACE\n    scatter: [f,r,o]\n    scatterMethod: dotproduct\n    in:\n      f: preprocessor/out_forward\n      o: output_basename\n      r: preprocessor/out_reverse\n      s: chrom_size\n    out: [border_cluster_out, border_out, border_pair_elite_out, border_pair_out]\n  bamscale_cov:\n    run: ../../tools/bamscale/bamscale-cov.cwl\n    label: BAMscale-cov\n    scatter: [bam, bed]\n    scatterMethod: dotproduct\n    in:\n      bam: sorted_bam\n      bed: mace/border_pair_out\n      n:\n        valueFrom: '${ return inputs.bed.nameroot;}'\n    out: [fpkm_out, library_out, raw_out, tpm_out]\n  annotate_bed_gff:\n    run: ../../tools/python/annotate_bed_gtf.cwl\n    label: annotate_bed\n    scatter: [bed, tpm]\n    scatterMethod: dotproduct\n    in:\n      gtf: genome_gtf\n      bed: mace/border_pair_out\n      tpm: bamscale_cov/tpm_out\n      tss_size: tss_size\n    out: [output]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'chrom_size': 'File', 'sorted_bam': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'output_basename': 'string[]', 'genome_gtf': 'File', 'tss_size': 'int', 'norm_method': 'string'}",
    "cwl_outputs": "{'annotated_bed': {'outputSource': 'annotate_bed_gff/output', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow execute peak caller and QC from ChIP-exo for single-end samples using MACE",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "MACE ChIP-exo peak caller workflow for single-end samples",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "preprocessor": {
        "run": "../../tools/mace/preprocessor.cwl",
        "label": "MACE-preprocessor",
        "scatter": [
          "i",
          "o"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "i": "sorted_bam",
          "o": "output_basename",
          "r": "chrom_size",
          "m": "norm_method"
        },
        "out": [
          "out_forward",
          "out_reverse"
        ]
      },
      "mace": {
        "run": "../../tools/mace/mace.cwl",
        "label": "MACE",
        "scatter": [
          "f",
          "r",
          "o"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "f": "preprocessor/out_forward",
          "o": "output_basename",
          "r": "preprocessor/out_reverse",
          "s": "chrom_size"
        },
        "out": [
          "border_cluster_out",
          "border_out",
          "border_pair_elite_out",
          "border_pair_out"
        ]
      },
      "bamscale_cov": {
        "run": "../../tools/bamscale/bamscale-cov.cwl",
        "label": "BAMscale-cov",
        "scatter": [
          "bam",
          "bed"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "bam": "sorted_bam",
          "bed": "mace/border_pair_out",
          "n": {
            "valueFrom": "${ return inputs.bed.nameroot;}"
          }
        },
        "out": [
          "fpkm_out",
          "library_out",
          "raw_out",
          "tpm_out"
        ]
      },
      "annotate_bed_gff": {
        "run": "../../tools/python/annotate_bed_gtf.cwl",
        "label": "annotate_bed",
        "scatter": [
          "bed",
          "tpm"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "gtf": "genome_gtf",
          "bed": "mace/border_pair_out",
          "tpm": "bamscale_cov/tpm_out",
          "tss_size": "tss_size"
        },
        "out": [
          "output"
        ]
      }
    }
  },
  {
    "path": "workflows/ChIP-exo/peak_caller-SE-no_inflection.cwl",
    "sha": "70946a070c8ca36705aba63eea0476435a3ba955",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/ChIP-exo/peak_caller-SE-no_inflection.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: \"ChIP-exo peak caller workflow for single-end samples with no P-Value inflection\"\ndoc: \"This workflow execute peak caller and QC from ChIP-exo for single-end samples with no P-Value inflection\"\n\ninputs:\n  homer_genome: string\n  genome_fasta: File\n  genome_gtf: File\n  tagAlign_gz: File\n  macs_callpeaks_g: string\n  macs_callpeaks_q: float\n\noutputs:\n  readQC_plots:\n    outputSource: readQC/plots\n    type: File[]\n  macs_callpeak_q_value_narrowPeak:\n    outputSource: macs_callpeak_q_value/narrowPeak\n    type: File\n  macs_callpeak_q_value_xls:\n    outputSource: macs_callpeak_q_value/xls\n    type: File\n  macs_callpeak_q_value_bed:\n    outputSource: macs_callpeak_q_value/bed\n    type: File\n  homer_annotate_peaks_output:\n    outputSource: homer_annotate_peaks/output\n    type: File\n  homer_annotate_peaks_annStats:\n    outputSource: homer_annotate_peaks/annStats_out\n    type: File?\n\nsteps:\n  gzip_cat:\n    run: ../../tools/basic/gzip.cwl\n    in:\n      c: { default: True}\n      d: { default: True}\n      file: tagAlign_gz\n      outFileName:\n        valueFrom: ${ return inputs.file.nameroot;}\n    out: [output]\n  homer_tags:\n    run: ../../tools/homer/homer-makeTagDirectory.cwl\n    in:\n      tags_directory_name:\n        valueFrom: ${ return inputs.input.nameroot + \"_tags\";}\n      checkGC: { default: True}\n      genome: genome_fasta\n      input: gzip_cat/output\n      format: { default: \"bed\"}\n    out: [tags_directory]\n  readQC:\n    run: ../../tools/R/readQC.cwl\n    in:\n      tags_directory: homer_tags/tags_directory\n    out: [plots]\n  macs_callpeak:\n    run: ../../tools/macs/macs2-callpeak.cwl\n    in:\n      n:\n        valueFrom: ${ return inputs.t.nameroot;}\n      f: { default: \"BED\"}\n      g: macs_callpeaks_g\n      nomodel: { default: True}\n      B: { default: True}\n      shift: { default: 0}\n      extsize: { default: 147}\n      q: macs_callpeaks_q\n      outdir_name:\n        valueFrom: ${ return inputs.t.nameroot + \"_peaks\";}\n      t: gzip_cat/output\n    out: [narrowPeak, xls, bed]\n  homer_annotate_peaks:\n    run: ../../tools/homer/homer-annotatePeaks.cwl\n    in:\n      macs_out_dir: macs_callpeak/outdir\n      genome: homer_genome\n      gtf: genome_gtf\n      input:\n        valueFrom: ${ return inputs.macs_out_dir.basename + '.narrowPeak';}\n      o:\n        valueFrom: ${ return inputs.macs_out_dir.basename + '_annotation.txt';}\n      annStats:\n        valueFrom: ${ return inputs.macs_out_dir.basename + '_annStats.txt';}\n      d: homer_tags/tags_directory\n      fpkm: {default: True}\n    out: [output,annStats_out]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'homer_genome': 'string', 'genome_fasta': 'File', 'genome_gtf': 'File', 'tagAlign_gz': 'File', 'macs_callpeaks_g': 'string', 'macs_callpeaks_q': 'float'}",
    "cwl_outputs": "{'readQC_plots': {'outputSource': 'readQC/plots', 'type': 'File[]'}, 'macs_callpeak_q_value_narrowPeak': {'outputSource': 'macs_callpeak_q_value/narrowPeak', 'type': 'File'}, 'macs_callpeak_q_value_xls': {'outputSource': 'macs_callpeak_q_value/xls', 'type': 'File'}, 'macs_callpeak_q_value_bed': {'outputSource': 'macs_callpeak_q_value/bed', 'type': 'File'}, 'homer_annotate_peaks_output': {'outputSource': 'homer_annotate_peaks/output', 'type': 'File'}, 'homer_annotate_peaks_annStats': {'outputSource': 'homer_annotate_peaks/annStats_out', 'type': 'File?'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This workflow execute peak caller and QC from ChIP-exo for single-end samples with no P-Value inflection",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ChIP-exo peak caller workflow for single-end samples with no P-Value inflection",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "gzip_cat": {
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "c": {
            "default": true
          },
          "d": {
            "default": true
          },
          "file": "tagAlign_gz",
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot;}"
          }
        },
        "out": [
          "output"
        ]
      },
      "homer_tags": {
        "run": "../../tools/homer/homer-makeTagDirectory.cwl",
        "in": {
          "tags_directory_name": {
            "valueFrom": "${ return inputs.input.nameroot + \"_tags\";}"
          },
          "checkGC": {
            "default": true
          },
          "genome": "genome_fasta",
          "input": "gzip_cat/output",
          "format": {
            "default": "bed"
          }
        },
        "out": [
          "tags_directory"
        ]
      },
      "readQC": {
        "run": "../../tools/R/readQC.cwl",
        "in": {
          "tags_directory": "homer_tags/tags_directory"
        },
        "out": [
          "plots"
        ]
      },
      "macs_callpeak": {
        "run": "../../tools/macs/macs2-callpeak.cwl",
        "in": {
          "n": {
            "valueFrom": "${ return inputs.t.nameroot;}"
          },
          "f": {
            "default": "BED"
          },
          "g": "macs_callpeaks_g",
          "nomodel": {
            "default": true
          },
          "B": {
            "default": true
          },
          "shift": {
            "default": 0
          },
          "extsize": {
            "default": 147
          },
          "q": "macs_callpeaks_q",
          "outdir_name": {
            "valueFrom": "${ return inputs.t.nameroot + \"_peaks\";}"
          },
          "t": "gzip_cat/output"
        },
        "out": [
          "narrowPeak",
          "xls",
          "bed"
        ]
      },
      "homer_annotate_peaks": {
        "run": "../../tools/homer/homer-annotatePeaks.cwl",
        "in": {
          "macs_out_dir": "macs_callpeak/outdir",
          "genome": "homer_genome",
          "gtf": "genome_gtf",
          "input": {
            "valueFrom": "${ return inputs.macs_out_dir.basename + '.narrowPeak';}"
          },
          "o": {
            "valueFrom": "${ return inputs.macs_out_dir.basename + '_annotation.txt';}"
          },
          "annStats": {
            "valueFrom": "${ return inputs.macs_out_dir.basename + '_annStats.txt';}"
          },
          "d": "homer_tags/tags_directory",
          "fpkm": {
            "default": true
          }
        },
        "out": [
          "output",
          "annStats_out"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/ChIP-exo/peak_caller-SE.cwl",
    "sha": "80d3b728d42bfbadec99a170fd4c94e7bfba66d9",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/ChIP-exo/peak_caller-SE.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: \"ChIP-exo peak caller workflow for single-end samples\"\ndoc: \"This workflow execute peak caller and QC from ChIP-exo for single-end samples\"\n\ninputs:\n  homer_genome: string\n  genome_fasta: File\n  genome_gtf: File\n  tagAlign_gz: File\n  macs_callpeaks_g: string\n  macs_callpeaks_q: float\n\noutputs:\n  readQC_plots:\n    outputSource: readQC/plots\n    type: File[]\n  macs_cutoff_pdf:\n    outputSource: macs_cutoff/out_pdf\n    type: File\n  macs_cutoff_inflection:\n    outputSource: macs_cutoff/out_inflection\n    type: File\n  macs_callpeak_q_value_narrowPeak:\n    outputSource: macs_callpeak_q_value/narrowPeak\n    type: File\n  macs_callpeak_q_value_xls:\n    outputSource: macs_callpeak_q_value/xls\n    type: File\n  macs_callpeak_q_value_bed:\n    outputSource: macs_callpeak_q_value/bed\n    type: File\n  homer_annotate_peaks_output:\n    outputSource: homer_annotate_peaks/output\n    type: File\n  homer_annotate_peaks_annStats:\n    outputSource: homer_annotate_peaks/annStats_out\n    type: File?\n\nsteps:\n  gzip_cat:\n    run: ../../tools/basic/gzip.cwl\n    in:\n      c: { default: True}\n      d: { default: True}\n      file: tagAlign_gz\n      outFileName:\n        valueFrom: ${ return inputs.file.nameroot;}\n    out: [output]\n  homer_tags:\n    run: ../../tools/homer/homer-makeTagDirectory.cwl\n    in:\n      tags_directory_name:\n        valueFrom: ${ return inputs.input.nameroot + \"_tags\";}\n      checkGC: { default: True}\n      genome: genome_fasta\n      input: gzip_cat/output\n      format: { default: \"bed\"}\n    out: [tags_directory]\n  readQC:\n    run: ../../tools/R/readQC.cwl\n    in:\n      tags_directory: homer_tags/tags_directory\n    out: [plots]\n  macs_callpeak:\n    run: ../../tools/macs/macs2-callpeak.cwl\n    in:\n      n:\n        valueFrom: ${ return inputs.t.nameroot;}\n      f: { default: \"BED\"}\n      g: macs_callpeaks_g\n      cutoff-analysis: { default: True}\n      nomodel: { default: True}\n      B: { default: True}\n      shift: { default: 0}\n      extsize: { default: 147}\n      q: macs_callpeaks_q\n      outdir_name:\n        valueFrom: ${ return inputs.t.nameroot + \"_peaks\";}\n      t: gzip_cat/output\n    out: [cutoff_analysis, cutoff_analysis_pdf, lambda, pileup, narrowPeak, xls, bed]\n  macs_cutoff:\n    run: ../../tools/R/macs-cutoff.cwl\n    in:\n      macs_out_dir: macs_callpeak/outdir\n      peak_cutoff_file: macs_callpeak/cutoff_analysis\n      out_pdf_name: macs_callpeak/cutoff_analysis_pdf\n      out_inflection_name: macs_callpeak/cutoff_analysis_inflection\n    out: [out_pdf,out_inflection]\n  macs_callpeak_q_value:\n    run: ../../tools/macs/macs2-callpeak.cwl\n    in:\n      n:\n        valueFrom: ${ return inputs.t.nameroot;}\n      f: { default: \"BED\"}\n      g: macs_callpeaks_g\n      cutoff-analysis: { default: True}\n      call-summits: { default: True}\n      nomodel: { default: True}\n      B: { default: True}\n      shift: { default: 0}\n      extsize: { default: 147}\n      q_file: macs_cutoff/out_inflection\n      outdir_name:\n        valueFrom: ${ return inputs.t.nameroot + \"_peaks\";}\n      t: gzip_cat/output\n    out: [cutoff_analysis, cutoff_analysis_pdf, lambda, pileup, narrowPeak, xls, bed]\n  homer_annotate_peaks:\n    run: ../../tools/homer/homer-annotatePeaks.cwl\n    in:\n      macs_out_dir: macs_callpeak_q_value/outdir\n      genome: homer_genome\n      gtf: genome_gtf\n      input:\n        valueFrom: ${ return inputs.macs_out_dir.basename + '.narrowPeak';}\n      o:\n        valueFrom: ${ return inputs.macs_out_dir.basename + '_annotation.txt';}\n      annStats:\n        valueFrom: ${ return inputs.macs_out_dir.basename + '_annStats.txt';}\n      d: homer_tags/tags_directory\n      fpkm: {default: True}\n    out: [output,annStats_out]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'homer_genome': 'string', 'genome_fasta': 'File', 'genome_gtf': 'File', 'tagAlign_gz': 'File', 'macs_callpeaks_g': 'string', 'macs_callpeaks_q': 'float'}",
    "cwl_outputs": "{'readQC_plots': {'outputSource': 'readQC/plots', 'type': 'File[]'}, 'macs_cutoff_pdf': {'outputSource': 'macs_cutoff/out_pdf', 'type': 'File'}, 'macs_cutoff_inflection': {'outputSource': 'macs_cutoff/out_inflection', 'type': 'File'}, 'macs_callpeak_q_value_narrowPeak': {'outputSource': 'macs_callpeak_q_value/narrowPeak', 'type': 'File'}, 'macs_callpeak_q_value_xls': {'outputSource': 'macs_callpeak_q_value/xls', 'type': 'File'}, 'macs_callpeak_q_value_bed': {'outputSource': 'macs_callpeak_q_value/bed', 'type': 'File'}, 'homer_annotate_peaks_output': {'outputSource': 'homer_annotate_peaks/output', 'type': 'File'}, 'homer_annotate_peaks_annStats': {'outputSource': 'homer_annotate_peaks/annStats_out', 'type': 'File?'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This workflow execute peak caller and QC from ChIP-exo for single-end samples",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ChIP-exo peak caller workflow for single-end samples",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "gzip_cat": {
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "c": {
            "default": true
          },
          "d": {
            "default": true
          },
          "file": "tagAlign_gz",
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot;}"
          }
        },
        "out": [
          "output"
        ]
      },
      "homer_tags": {
        "run": "../../tools/homer/homer-makeTagDirectory.cwl",
        "in": {
          "tags_directory_name": {
            "valueFrom": "${ return inputs.input.nameroot + \"_tags\";}"
          },
          "checkGC": {
            "default": true
          },
          "genome": "genome_fasta",
          "input": "gzip_cat/output",
          "format": {
            "default": "bed"
          }
        },
        "out": [
          "tags_directory"
        ]
      },
      "readQC": {
        "run": "../../tools/R/readQC.cwl",
        "in": {
          "tags_directory": "homer_tags/tags_directory"
        },
        "out": [
          "plots"
        ]
      },
      "macs_callpeak": {
        "run": "../../tools/macs/macs2-callpeak.cwl",
        "in": {
          "n": {
            "valueFrom": "${ return inputs.t.nameroot;}"
          },
          "f": {
            "default": "BED"
          },
          "g": "macs_callpeaks_g",
          "cutoff-analysis": {
            "default": true
          },
          "nomodel": {
            "default": true
          },
          "B": {
            "default": true
          },
          "shift": {
            "default": 0
          },
          "extsize": {
            "default": 147
          },
          "q": "macs_callpeaks_q",
          "outdir_name": {
            "valueFrom": "${ return inputs.t.nameroot + \"_peaks\";}"
          },
          "t": "gzip_cat/output"
        },
        "out": [
          "cutoff_analysis",
          "cutoff_analysis_pdf",
          "lambda",
          "pileup",
          "narrowPeak",
          "xls",
          "bed"
        ]
      },
      "macs_cutoff": {
        "run": "../../tools/R/macs-cutoff.cwl",
        "in": {
          "macs_out_dir": "macs_callpeak/outdir",
          "peak_cutoff_file": "macs_callpeak/cutoff_analysis",
          "out_pdf_name": "macs_callpeak/cutoff_analysis_pdf",
          "out_inflection_name": "macs_callpeak/cutoff_analysis_inflection"
        },
        "out": [
          "out_pdf",
          "out_inflection"
        ]
      },
      "macs_callpeak_q_value": {
        "run": "../../tools/macs/macs2-callpeak.cwl",
        "in": {
          "n": {
            "valueFrom": "${ return inputs.t.nameroot;}"
          },
          "f": {
            "default": "BED"
          },
          "g": "macs_callpeaks_g",
          "cutoff-analysis": {
            "default": true
          },
          "call-summits": {
            "default": true
          },
          "nomodel": {
            "default": true
          },
          "B": {
            "default": true
          },
          "shift": {
            "default": 0
          },
          "extsize": {
            "default": 147
          },
          "q_file": "macs_cutoff/out_inflection",
          "outdir_name": {
            "valueFrom": "${ return inputs.t.nameroot + \"_peaks\";}"
          },
          "t": "gzip_cat/output"
        },
        "out": [
          "cutoff_analysis",
          "cutoff_analysis_pdf",
          "lambda",
          "pileup",
          "narrowPeak",
          "xls",
          "bed"
        ]
      },
      "homer_annotate_peaks": {
        "run": "../../tools/homer/homer-annotatePeaks.cwl",
        "in": {
          "macs_out_dir": "macs_callpeak_q_value/outdir",
          "genome": "homer_genome",
          "gtf": "genome_gtf",
          "input": {
            "valueFrom": "${ return inputs.macs_out_dir.basename + '.narrowPeak';}"
          },
          "o": {
            "valueFrom": "${ return inputs.macs_out_dir.basename + '_annotation.txt';}"
          },
          "annStats": {
            "valueFrom": "${ return inputs.macs_out_dir.basename + '_annStats.txt';}"
          },
          "d": "homer_tags/tags_directory",
          "fpkm": {
            "default": true
          }
        },
        "out": [
          "output",
          "annStats_out"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Contamination/contaminant-cleanup.cwl",
    "sha": "e198b4f8d7e9471c87733f9451e95bf2251e3dff",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Contamination/contaminant-cleanup.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: contaminant_cleanup\ndoc: \"This workflow detect and remove contamination from a DNA fasta file\"\n\ninputs:\n  trans_fsa: File\n  threads: int\n  min_length: int\n  contaminant_fsa: File\n\noutputs:\n  contaminant_blastn_tsv:\n    outputSource: contaminant_blastn/output\n    type: File\n  contamination_removal_cont:\n    outputSource: contamination_removal/cont\n    type: File\n  equal_seq_removal_fsa:\n    outputSource: equal_seq_removal/fsa\n    type: File\n  equal_seq_removal_tsv:\n    outputSource: equal_seq_removal/tsv\n    type: File\n\n\nsteps:\n  contaminant_blastdb:\n    run: ../../tools/blast/makeblastdb.cwl\n    label: Make Contaminant BlastDB\n    in:\n      dbtype: { default: \"nucl\"}\n      hash_index: { default: True}\n      out: { default: \"myblastdb\"}\n      in: contaminant_fsa\n    out: [out_db]\n  collect_blastdb:\n    run: ../../tools/basic/files2dir.cwl\n    label: Collect BlastDB\n    in:\n      files: contaminant_blastdb/out_db\n      dir: { default: \"myblastdb\"}\n    out: [output]\n  contaminant_blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: Contaminant BlastN\n    in:\n      dbdir: collect_blastdb/output\n      db: { default: \"myblastdb\"}\n      query: trans_fsa\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \"_contaminant_blastn.tsv\";}\n      outfmt: { default: \"6 qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score\"}\n      word_size: { default: 28 }\n      best_hit_overhang: { default: 0.1 }\n      best_hit_score_edge: { default: 0.1 }\n      evalue: { default: 0.0001 }\n      perc_identity: { default: 90.0 }\n      task: { default: \"megablast\" }\n      dust: { default: \"yes\" }\n    out: [output]\n  contamination_removal:\n    run: ../../tools/python/contaminant-removal.cwl\n    label: Remove contaminants from BlastN\n    in:\n      fasta: trans_fsa\n      blast: contaminant_blastn/output\n      threads: threads\n      min_length: min_length\n      sequence_chunk: { default: 1000}\n    out: [ fsa, cont ]\n  equal_seq_removal:\n    run: ../../tools/python/equal-removal.cwl\n    label: Removing equal sequences\n    in:\n      fasta: contamination_removal/fsa\n    out: [fsa, tsv]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'trans_fsa': 'File', 'threads': 'int', 'min_length': 'int', 'contaminant_fsa': 'File'}",
    "cwl_outputs": "{'contaminant_blastn_tsv': {'outputSource': 'contaminant_blastn/output', 'type': 'File'}, 'contamination_removal_cont': {'outputSource': 'contamination_removal/cont', 'type': 'File'}, 'equal_seq_removal_fsa': {'outputSource': 'equal_seq_removal/fsa', 'type': 'File'}, 'equal_seq_removal_tsv': {'outputSource': 'equal_seq_removal/tsv', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow detect and remove contamination from a DNA fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "contaminant_cleanup",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "contaminant_blastdb": {
        "run": "../../tools/blast/makeblastdb.cwl",
        "label": "Make Contaminant BlastDB",
        "in": {
          "dbtype": {
            "default": "nucl"
          },
          "hash_index": {
            "default": true
          },
          "out": {
            "default": "myblastdb"
          },
          "in": "contaminant_fsa"
        },
        "out": [
          "out_db"
        ]
      },
      "collect_blastdb": {
        "run": "../../tools/basic/files2dir.cwl",
        "label": "Collect BlastDB",
        "in": {
          "files": "contaminant_blastdb/out_db",
          "dir": {
            "default": "myblastdb"
          }
        },
        "out": [
          "output"
        ]
      },
      "contaminant_blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "Contaminant BlastN",
        "in": {
          "dbdir": "collect_blastdb/output",
          "db": {
            "default": "myblastdb"
          },
          "query": "trans_fsa",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \"_contaminant_blastn.tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score"
          },
          "word_size": {
            "default": 28
          },
          "best_hit_overhang": {
            "default": 0.1
          },
          "best_hit_score_edge": {
            "default": 0.1
          },
          "evalue": {
            "default": 0.0001
          },
          "perc_identity": {
            "default": 90.0
          },
          "task": {
            "default": "megablast"
          },
          "dust": {
            "default": "yes"
          }
        },
        "out": [
          "output"
        ]
      },
      "contamination_removal": {
        "run": "../../tools/python/contaminant-removal.cwl",
        "label": "Remove contaminants from BlastN",
        "in": {
          "fasta": "trans_fsa",
          "blast": "contaminant_blastn/output",
          "threads": "threads",
          "min_length": "min_length",
          "sequence_chunk": {
            "default": 1000
          }
        },
        "out": [
          "fsa",
          "cont"
        ]
      },
      "equal_seq_removal": {
        "run": "../../tools/python/equal-removal.cwl",
        "label": "Removing equal sequences",
        "in": {
          "fasta": "contamination_removal/fsa"
        },
        "out": [
          "fsa",
          "tsv"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Contamination/contamination-cleanup.cwl",
    "sha": "6f348dc81d11cd0e3811279921d8c3a57e9f8bda",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Contamination/contamination-cleanup.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n  - class: SubworkflowFeatureRequirement\n\nlabel: contamination_cleanup\ndoc: \"This workflow detect and remove contamination from a DNA fasta file\"\n\ninputs:\n  trans_fsa: File\n  threads: int\n  min_length: int\n  contaminant_fsa: File\n  ribo_fsa: File\n\noutputs:\n  contaminant_blastn_tsv:\n    outputSource: contamination_removal/contaminant_blastn_tsv\n    type: File\n  contamination_removal_cont:\n    outputSource: contamination_removal/contamination_removal_cont\n    type: File\n  equal_seq_removal_fsa:\n    outputSource: contamination_removal/equal_seq_removal_fsa\n    type: File\n  equal_seq_removal_tsv:\n    outputSource: contamination_removal/equal_seq_removal_tsv\n    type: File\n  mitochondrial_removal_fsa:\n    outputSource: mitochondrial_removal/filtered_fsa\n    type: File\n  mitochondrial_removal_tsv:\n    outputSource: mitochondrial_removal/filtered_ids\n    type: File\n  mitochondrial_removal_blastn:\n    outputSource: mitochondrial_removal/mito_blastn_tsv\n    type: File\n  ribosomal_removal_fsa:\n    outputSource: ribosomal_removal/filtered_fsa\n    type: File\n  ribosomal_removal_tsv:\n    outputSource: ribosomal_removal/filtered_ids\n    type: File\n  ribosomal_removal_blastn:\n    outputSource: ribosomal_removal/ribosomal_blastn_tsv\n    type: File\n\nsteps:\n  contamination_removal:\n    run: contaminant-cleanup.cwl\n    label: Remove contaminants from FASTA\n    in:\n      trans_fsa: trans_fsa\n      threads: threads\n      min_length: min_length\n      contaminant_fsa: contaminant_fsa\n    out: [ contaminant_blastn_tsv, contamination_removal_cont, equal_seq_removal_fsa, equal_seq_removal_tsv ]\n  mitochondrial_removal:\n    run: mitochondrial-cleanup.cwl\n    label: Remove mitochondrial from FASTA\n    in:\n      trans_fsa_gz: contamination_removal/equal_seq_removal_fsa\n      threads: threads\n      min_length: min_length\n    out: [ mito_blastn_tsv, filtered_fsa, filtered_ids]\n  ribosomal_removal:\n    run: ribosomal-cleanup.cwl\n    label: Remove ribosomal from FASTA\n    in:\n      trans_fsa_gz: mitochondrial_removal/filtered_fsa\n      threads: threads\n      ribo_fsa: ribo_fsa\n    out: [ ribosomal_blastn_tsv, filtered_fsa, filtered_ids]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'trans_fsa': 'File', 'threads': 'int', 'min_length': 'int', 'contaminant_fsa': 'File', 'ribo_fsa': 'File'}",
    "cwl_outputs": "{'contaminant_blastn_tsv': {'outputSource': 'contamination_removal/contaminant_blastn_tsv', 'type': 'File'}, 'contamination_removal_cont': {'outputSource': 'contamination_removal/contamination_removal_cont', 'type': 'File'}, 'equal_seq_removal_fsa': {'outputSource': 'contamination_removal/equal_seq_removal_fsa', 'type': 'File'}, 'equal_seq_removal_tsv': {'outputSource': 'contamination_removal/equal_seq_removal_tsv', 'type': 'File'}, 'mitochondrial_removal_fsa': {'outputSource': 'mitochondrial_removal/filtered_fsa', 'type': 'File'}, 'mitochondrial_removal_tsv': {'outputSource': 'mitochondrial_removal/filtered_ids', 'type': 'File'}, 'mitochondrial_removal_blastn': {'outputSource': 'mitochondrial_removal/mito_blastn_tsv', 'type': 'File'}, 'ribosomal_removal_fsa': {'outputSource': 'ribosomal_removal/filtered_fsa', 'type': 'File'}, 'ribosomal_removal_tsv': {'outputSource': 'ribosomal_removal/filtered_ids', 'type': 'File'}, 'ribosomal_removal_blastn': {'outputSource': 'ribosomal_removal/ribosomal_blastn_tsv', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow detect and remove contamination from a DNA fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "contamination_cleanup",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "contamination_removal": {
        "run": "contaminant-cleanup.cwl",
        "label": "Remove contaminants from FASTA",
        "in": {
          "trans_fsa": "trans_fsa",
          "threads": "threads",
          "min_length": "min_length",
          "contaminant_fsa": "contaminant_fsa"
        },
        "out": [
          "contaminant_blastn_tsv",
          "contamination_removal_cont",
          "equal_seq_removal_fsa",
          "equal_seq_removal_tsv"
        ]
      },
      "mitochondrial_removal": {
        "run": "mitochondrial-cleanup.cwl",
        "label": "Remove mitochondrial from FASTA",
        "in": {
          "trans_fsa_gz": "contamination_removal/equal_seq_removal_fsa",
          "threads": "threads",
          "min_length": "min_length"
        },
        "out": [
          "mito_blastn_tsv",
          "filtered_fsa",
          "filtered_ids"
        ]
      },
      "ribosomal_removal": {
        "run": "ribosomal-cleanup.cwl",
        "label": "Remove ribosomal from FASTA",
        "in": {
          "trans_fsa_gz": "mitochondrial_removal/filtered_fsa",
          "threads": "threads",
          "ribo_fsa": "ribo_fsa"
        },
        "out": [
          "ribosomal_blastn_tsv",
          "filtered_fsa",
          "filtered_ids"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Contamination/contamination-foreign-chromosome-blastn.cwl",
    "sha": "c2d3d7c80de138b5a7816639c38519e57aac86f7",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Contamination/contamination-foreign-chromosome-blastn.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: contamination_foreign_chromosome\ndoc: \"This workflow detect and remove foreign chromosome from a DNA fasta file\"\n\ninputs:\n  trans_fsa_gz: File\n  threads: int\n  blastdb: Directory\n  blastdb_name: string\n  perc_identity: float\n\n\noutputs:\n  blastn_tsv:\n    outputSource: blastn/output\n    type: File\n\nsteps:\n  uncompress_noequal:\n    run: ../../tools/basic/gzip.cwl\n    label: Uncompress fasta\n    in:\n      d: { default: True }\n      file: trans_fsa_gz\n    out: [ output ]\n  blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: BlastN\n    in:\n      dbdir: blastdb\n      db: blastdb_name\n      query: uncompress_noequal/output\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \"_\" + inputs.db + \"_blastn.tsv\";}\n      outfmt: { default: \"6 qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid\"}\n      word_size: { default: 28 }\n      best_hit_overhang: { default: 0.1 }\n      best_hit_score_edge: { default: 0.1 }\n      evalue: { default: 0.0001 }\n      penalty: { default: -5 }\n      perc_identity: perc_identity\n      max_target_seqs: { default: 100}\n      task: { default: \"megablast\" }\n      dust: { default: \"yes\" }\n      soft_masking: { default: \"true\"}\n    out: [output]\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'trans_fsa_gz': 'File', 'threads': 'int', 'blastdb': 'Directory', 'blastdb_name': 'string', 'perc_identity': 'float'}",
    "cwl_outputs": "{'blastn_tsv': {'outputSource': 'blastn/output', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow detect and remove foreign chromosome from a DNA fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "contamination_foreign_chromosome",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "uncompress_noequal": {
        "run": "../../tools/basic/gzip.cwl",
        "label": "Uncompress fasta",
        "in": {
          "d": {
            "default": true
          },
          "file": "trans_fsa_gz"
        },
        "out": [
          "output"
        ]
      },
      "blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "BlastN",
        "in": {
          "dbdir": "blastdb",
          "db": "blastdb_name",
          "query": "uncompress_noequal/output",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \"_\" + inputs.db + \"_blastn.tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score staxid"
          },
          "word_size": {
            "default": 28
          },
          "best_hit_overhang": {
            "default": 0.1
          },
          "best_hit_score_edge": {
            "default": 0.1
          },
          "evalue": {
            "default": 0.0001
          },
          "penalty": {
            "default": -5
          },
          "perc_identity": "perc_identity",
          "max_target_seqs": {
            "default": 100
          },
          "task": {
            "default": "megablast"
          },
          "dust": {
            "default": "yes"
          },
          "soft_masking": {
            "default": "true"
          }
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Contamination/contamination-foreign-chromosome-magicblast.cwl",
    "sha": "9a50b283af4e505a8f03540250b7fbd0d1053676",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Contamination/contamination-foreign-chromosome-magicblast.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: contamination_foreign_chromosome\ndoc: \"This workflow detect and remove foreign chromosome from a DNA fasta file\"\n\ninputs:\n  trans_fsa_gz: File\n  threads: int\n  blastdb: Directory\n  blastdb_name: string\n  paired: boolean?\n\n\noutputs:\n  magicblast_aligned:\n    outputSource: magicblast/output\n    type: File\n  magicblast_unaligned:\n    outputSource: magicblast/out_unaligned_output\n    type: File\n\nsteps:\n  uncompress_noequal:\n    run: ../../tools/basic/gzip.cwl\n    label: Uncompress fasta\n    in:\n      d: { default: True }\n      file: trans_fsa_gz\n    out: [ output ]\n  magicblast:\n    run: ../../tools/magicblast/magicblast.cwl\n    label: magicblast\n    in:\n      query:\n      dbdir: blastdb\n      db: blastdb_name\n      num_threads: threads\n      paired: paired\n      out:\n        valueFrom: |\n          ${\n            var nameroot = inputs.query.nameroot;\n            if (nameroot.endsWith(\".fastq\")){\n               nameroot = nameroot.replace(\".fastq\", \"\")\n            }\n            if (nameroot.endsWith(\".fsa\")){\n                nameroot = nameroot.replace(\".fsa\", \"\")\n            }\n            if (nameroot.endsWith(\".fa\")){\n                nameroot = nameroot.replace(\".fa\", \"\")\n            }\n            if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n               nameroot = nameroot.slice(0, -2);\n            }\n            return nameroot + \".sam\";\n          }\n      unaligned_fmt: { default: \"fasta\" }\n      out_unaligned:\n        valueFrom: |\n          ${\n            var nameroot = inputs.query.nameroot;\n            if (nameroot.endsWith(\".fastq\")){\n               nameroot = nameroot.replace(\".fastq\", \"\")\n            }\n            if (nameroot.endsWith(\".fsa\")){\n               nameroot = nameroot.replace(\".fsa\", \"\")\n            }\n            if (nameroot.endsWith(\".fa\")){\n               nameroot = nameroot.replace(\".fa\", \"\")\n            }\n            if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n               nameroot = nameroot.slice(0, -2);\n            }\n            return nameroot + \"_unaligned.fa\";\n          }\n    out: [ output, out_unaligned_output ]\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'trans_fsa_gz': 'File', 'threads': 'int', 'blastdb': 'Directory', 'blastdb_name': 'string', 'paired': 'boolean?'}",
    "cwl_outputs": "{'magicblast_aligned': {'outputSource': 'magicblast/output', 'type': 'File'}, 'magicblast_unaligned': {'outputSource': 'magicblast/out_unaligned_output', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow detect and remove foreign chromosome from a DNA fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "contamination_foreign_chromosome",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "uncompress_noequal": {
        "run": "../../tools/basic/gzip.cwl",
        "label": "Uncompress fasta",
        "in": {
          "d": {
            "default": true
          },
          "file": "trans_fsa_gz"
        },
        "out": [
          "output"
        ]
      },
      "magicblast": {
        "run": "../../tools/magicblast/magicblast.cwl",
        "label": "magicblast",
        "in": {
          "query": null,
          "dbdir": "blastdb",
          "db": "blastdb_name",
          "num_threads": "threads",
          "paired": "paired",
          "out": {
            "valueFrom": "${\n  var nameroot = inputs.query.nameroot;\n  if (nameroot.endsWith(\".fastq\")){\n     nameroot = nameroot.replace(\".fastq\", \"\")\n  }\n  if (nameroot.endsWith(\".fsa\")){\n      nameroot = nameroot.replace(\".fsa\", \"\")\n  }\n  if (nameroot.endsWith(\".fa\")){\n      nameroot = nameroot.replace(\".fa\", \"\")\n  }\n  if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n     nameroot = nameroot.slice(0, -2);\n  }\n  return nameroot + \".sam\";\n}\n"
          },
          "unaligned_fmt": {
            "default": "fasta"
          },
          "out_unaligned": {
            "valueFrom": "${\n  var nameroot = inputs.query.nameroot;\n  if (nameroot.endsWith(\".fastq\")){\n     nameroot = nameroot.replace(\".fastq\", \"\")\n  }\n  if (nameroot.endsWith(\".fsa\")){\n     nameroot = nameroot.replace(\".fsa\", \"\")\n  }\n  if (nameroot.endsWith(\".fa\")){\n     nameroot = nameroot.replace(\".fa\", \"\")\n  }\n  if (nameroot.endsWith(\"_1\") || nameroot.endsWith(\"_2\")){\n     nameroot = nameroot.slice(0, -2);\n  }\n  return nameroot + \"_unaligned.fa\";\n}\n"
          }
        },
        "out": [
          "output",
          "out_unaligned_output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Contamination/fastq-contaminant-cleanup.cwl",
    "sha": "9e1bbfb0ee6b836bfb3510b1c594d3730f52afe4",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Contamination/fastq-contaminant-cleanup.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: contaminant_cleanup\ndoc: \"This workflow detect and remove contamination from a DNA fasta file\"\n\ninputs:\n  trans_fsa: File\n  threads: int\n  min_length: int\n  contaminant_fsa: File\n  sequence_chunk: int\n\noutputs:\n  contaminant_blastn_tsv:\n    outputSource: contaminant_blastn/output\n    type: File\n  contamination_removal_cont:\n    outputSource: contamination_removal/cont\n    type: File\n  contamination_removal_fsa:\n    outputSource: contamination_removal/fsa\n    type: File\n\n\nsteps:\n  contaminant_blastdb:\n    run: ../../tools/blast/makeblastdb.cwl\n    label: Make Contaminant BlastDB\n    in:\n      dbtype: { default: \"nucl\"}\n      hash_index: { default: True}\n      out: { default: \"myblastdb\"}\n      in: contaminant_fsa\n    out: [out_db]\n  collect_blastdb:\n    run: ../../tools/basic/files2dir.cwl\n    label: Collect BlastDB\n    in:\n      files: contaminant_blastdb/out_db\n      dir: { default: \"myblastdb\"}\n    out: [output]\n  contaminant_blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: Contaminant BlastN\n    in:\n      dbdir: collect_blastdb/output\n      db: { default: \"myblastdb\"}\n      query: trans_fsa\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \"_contaminant_blastn.tsv\";}\n      outfmt: { default: \"6 qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score\"}\n      word_size: { default: 28 }\n      best_hit_overhang: { default: 0.1 }\n      best_hit_score_edge: { default: 0.1 }\n      evalue: { default: 0.0001 }\n      perc_identity: { default: 90.0 }\n      task: { default: \"megablast\" }\n      dust: { default: \"yes\" }\n    out: [output]\n  contamination_removal:\n    run: ../../tools/python/contaminant-removal.cwl\n    label: Remove contaminants from BlastN\n    in:\n      fasta: trans_fsa\n      blast: contaminant_blastn/output\n      threads: threads\n      min_length: min_length\n      sequence_chunk: sequence_chunk\n    out: [ fsa, cont ]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'trans_fsa': 'File', 'threads': 'int', 'min_length': 'int', 'contaminant_fsa': 'File', 'sequence_chunk': 'int'}",
    "cwl_outputs": "{'contaminant_blastn_tsv': {'outputSource': 'contaminant_blastn/output', 'type': 'File'}, 'contamination_removal_cont': {'outputSource': 'contamination_removal/cont', 'type': 'File'}, 'contamination_removal_fsa': {'outputSource': 'contamination_removal/fsa', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow detect and remove contamination from a DNA fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "contaminant_cleanup",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "contaminant_blastdb": {
        "run": "../../tools/blast/makeblastdb.cwl",
        "label": "Make Contaminant BlastDB",
        "in": {
          "dbtype": {
            "default": "nucl"
          },
          "hash_index": {
            "default": true
          },
          "out": {
            "default": "myblastdb"
          },
          "in": "contaminant_fsa"
        },
        "out": [
          "out_db"
        ]
      },
      "collect_blastdb": {
        "run": "../../tools/basic/files2dir.cwl",
        "label": "Collect BlastDB",
        "in": {
          "files": "contaminant_blastdb/out_db",
          "dir": {
            "default": "myblastdb"
          }
        },
        "out": [
          "output"
        ]
      },
      "contaminant_blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "Contaminant BlastN",
        "in": {
          "dbdir": "collect_blastdb/output",
          "db": {
            "default": "myblastdb"
          },
          "query": "trans_fsa",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \"_contaminant_blastn.tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score"
          },
          "word_size": {
            "default": 28
          },
          "best_hit_overhang": {
            "default": 0.1
          },
          "best_hit_score_edge": {
            "default": 0.1
          },
          "evalue": {
            "default": 0.0001
          },
          "perc_identity": {
            "default": 90.0
          },
          "task": {
            "default": "megablast"
          },
          "dust": {
            "default": "yes"
          }
        },
        "out": [
          "output"
        ]
      },
      "contamination_removal": {
        "run": "../../tools/python/contaminant-removal.cwl",
        "label": "Remove contaminants from BlastN",
        "in": {
          "fasta": "trans_fsa",
          "blast": "contaminant_blastn/output",
          "threads": "threads",
          "min_length": "min_length",
          "sequence_chunk": "sequence_chunk"
        },
        "out": [
          "fsa",
          "cont"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Contamination/fastq-contamination-cleanup.cwl",
    "sha": "f161da486645f63faebfc0414b43dffef2e200f8",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Contamination/fastq-contamination-cleanup.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n  - class: SubworkflowFeatureRequirement\n\nlabel: fastq_contamination_cleanup\ndoc: \"This workflow detect and remove contamination from a DNA fasta file\"\n\ninputs:\n  trans_fsa: File\n  threads: int\n  min_length: int\n  contaminant_fsa: File\n  ribo_fsa: File\n  total_per_file: int\n\noutputs:\n  contamination_removal_cont:\n    outputSource: contamination_removal/contamination_removal_cont\n    type: File\n  mitochondrial_removal_tsv:\n    outputSource: mitochondrial_removal/filtered_ids\n    type: File\n  ribosomal_removal_tsv:\n    outputSource: ribosomal_removal/filtered_ids\n    type: File\n  split_fasta_fsa:\n    outputSource: split_fasta/output\n    type: File[]\n\nsteps:\n  contamination_removal:\n    run: fastq-contaminant-cleanup.cwl\n    label: Remove contaminants from FASTA\n    in:\n      trans_fsa: trans_fsa\n      threads: threads\n      min_length: min_length\n      contaminant_fsa: contaminant_fsa\n      sequence_chunk: total_per_file\n    out: [ contaminant_blastn_tsv, contamination_removal_cont, contamination_removal_fsa ]\n  mitochondrial_removal:\n    run: mitochondrial-cleanup.cwl\n    label: Remove mitochondrial from FASTA\n    in:\n      trans_fsa_gz: contamination_removal/contamination_removal_fsa\n      threads: threads\n      min_length: min_length\n    out: [ mito_blastn_tsv, filtered_fsa, filtered_ids]\n  ribosomal_removal:\n    run: ribosomal-cleanup.cwl\n    label: Remove ribosomal from FASTA\n    in:\n      trans_fsa_gz: mitochondrial_removal/filtered_fsa\n      threads: threads\n      ribo_fsa: ribo_fsa\n    out: [ ribosomal_blastn_tsv, filtered_fsa, filtered_ids]\n  split_fasta:\n    run: ../../tools/python/split-fasta.cwl\n    label: Split fasta\n    in:\n      fasta: ribosomal_removal/filtered_fsa\n      total_per_file: total_per_file\n    out: [ output ]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'trans_fsa': 'File', 'threads': 'int', 'min_length': 'int', 'contaminant_fsa': 'File', 'ribo_fsa': 'File', 'total_per_file': 'int'}",
    "cwl_outputs": "{'contamination_removal_cont': {'outputSource': 'contamination_removal/contamination_removal_cont', 'type': 'File'}, 'mitochondrial_removal_tsv': {'outputSource': 'mitochondrial_removal/filtered_ids', 'type': 'File'}, 'ribosomal_removal_tsv': {'outputSource': 'ribosomal_removal/filtered_ids', 'type': 'File'}, 'split_fasta_fsa': {'outputSource': 'split_fasta/output', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow detect and remove contamination from a DNA fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "fastq_contamination_cleanup",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "contamination_removal": {
        "run": "fastq-contaminant-cleanup.cwl",
        "label": "Remove contaminants from FASTA",
        "in": {
          "trans_fsa": "trans_fsa",
          "threads": "threads",
          "min_length": "min_length",
          "contaminant_fsa": "contaminant_fsa",
          "sequence_chunk": "total_per_file"
        },
        "out": [
          "contaminant_blastn_tsv",
          "contamination_removal_cont",
          "contamination_removal_fsa"
        ]
      },
      "mitochondrial_removal": {
        "run": "mitochondrial-cleanup.cwl",
        "label": "Remove mitochondrial from FASTA",
        "in": {
          "trans_fsa_gz": "contamination_removal/contamination_removal_fsa",
          "threads": "threads",
          "min_length": "min_length"
        },
        "out": [
          "mito_blastn_tsv",
          "filtered_fsa",
          "filtered_ids"
        ]
      },
      "ribosomal_removal": {
        "run": "ribosomal-cleanup.cwl",
        "label": "Remove ribosomal from FASTA",
        "in": {
          "trans_fsa_gz": "mitochondrial_removal/filtered_fsa",
          "threads": "threads",
          "ribo_fsa": "ribo_fsa"
        },
        "out": [
          "ribosomal_blastn_tsv",
          "filtered_fsa",
          "filtered_ids"
        ]
      },
      "split_fasta": {
        "run": "../../tools/python/split-fasta.cwl",
        "label": "Split fasta",
        "in": {
          "fasta": "ribosomal_removal/filtered_fsa",
          "total_per_file": "total_per_file"
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Contamination/fastq-foreign-chromosome-cleanup.cwl",
    "sha": "79a74e1140b23d1405f4511a027c9142339597a8",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Contamination/fastq-foreign-chromosome-cleanup.cwl",
    "content": "class: Workflow\ncwlVersion: v1.2\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: fastq_foreign_chromosome_cleanup\ndoc: \"This workflow remove foreign chromosome comtamination from blastn TSV files\"\n\ninputs:\n  fastq1: File\n  fastq2: File?\n  tax_group: string\n  file_name_prefix: string\n  partitions: int\n  data_dir: Directory\n  tax_group_pickle: File\n  threads: int\n\noutputs:\n  fastq1_output:\n    outputSource: create_clean_fastq/output\n    type: File\n  fastq2_output:\n    outputSource: create_clean_fastq/output2\n    type: File?\n  decontaminated_reads_ids:\n    outputSource: extract_clean_reads_ids/output\n    type: File\n  fastqc1_html:\n    outputSource: fastqc1/out_html\n    type: File[]\n  fastqc1_zip:\n    outputSource: fastqc1/out_zip\n    type: File[]\n  fastqc2_html:\n    outputSource: fastqc2/out_html\n    type: File[]?\n  fastqc2_zip:\n    outputSource: fastqc2/out_zip\n    type: File[]?\n\nsteps:\n  extract_clean_reads_ids:\n    label: Extract decontaminated reads IDs\n    run: ../../tools/python/extract-clean-from-foreign-blastn.cwl\n    in:\n      tax_group: tax_group\n      file_name_prefix: file_name_prefix\n      partitions: partitions\n      threads: threads\n      tax_group_pickle: tax_group_pickle\n      data_dir: data_dir\n    out: [ output ]\n  create_clean_fastq:\n    label: Creates clean FASTQ\n    run: ../../tools/bbmap/filterbyname.cwl\n    in:\n      in: fastq1\n      in2: fastq2\n      out:\n        valueFrom: |\n          ${\n             var nameroot = inputs.in.nameroot;\n             if (nameroot.endsWith(\".fastq\")){\n               nameroot = nameroot.replace(\".fastq\", \"\");\n             }else if (nameroot.endsWith(\".fq\")){\n               nameroot = nameroot.replace(\".fq\", \"\");\n             }\n             if (nameroot.endsWith(\"_1\")){\n               nameroot = nameroot.replace('_1', '_foreign_1.fastq.gz');\n             }else if (nameroot.includes(\"_R1_\")){\n               nameroot = nameroot.substring(1, nameroot.indexOf(\"_R1_\")) + '_foreign_1.fastq.gz';\n             } else{\n               nameroot = nameroot + '_foreign.fastq.gz';\n             }\n             return nameroot;\n          }\n      out2:\n        valueFrom: |\n          ${\n              if (inputs.in2 != null){\n                 var nameroot = inputs.in2.nameroot;\n                 if (nameroot.endsWith(\".fastq\")){\n                   nameroot = nameroot.replace(\".fastq\", \"\");\n                 }else if (nameroot.endsWith(\".fq\")){\n                   nameroot = nameroot.replace(\".fq\", \"\");\n                 }\n                 if (nameroot.endsWith(\"_2\")){\n                   nameroot = nameroot.replace('_2', '_foreign_2.fastq.gz');\n                 }else if (nameroot.includes(\"_R2_\")){\n                   nameroot = nameroot.substring(1, nameroot.indexOf(\"_R2_\")) + '_foreign_2.fastq.gz';\n                 }\n                 return nameroot;\n              }\n              return null;\n          }\n      names: extract_clean_reads_ids/output\n      include: { default: \"t\" }\n    out: [ output, output2 ]\n  fastqc1:\n    run: ../../tools/fastqc/fastqc.cwl\n    label: fastqc\n    in:\n      fastq:\n        source: create_clean_fastq/output\n        valueFrom: ${ return [ self ]; }\n      threads: threads\n    out: [ out_html, out_zip ]\n  fastqc2:\n    run: ../../tools/fastqc/fastqc.cwl\n    when: $(inputs.fastq[0] != null)\n    label: fastqc\n    in:\n      fastq:\n        source: create_clean_fastq/output2\n        valueFrom: ${ return [ self ]; }\n      threads: threads\n    out: [ out_html, out_zip ]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'fastq1': 'File', 'fastq2': 'File?', 'tax_group': 'string', 'file_name_prefix': 'string', 'partitions': 'int', 'data_dir': 'Directory', 'tax_group_pickle': 'File', 'threads': 'int'}",
    "cwl_outputs": "{'fastq1_output': {'outputSource': 'create_clean_fastq/output', 'type': 'File'}, 'fastq2_output': {'outputSource': 'create_clean_fastq/output2', 'type': 'File?'}, 'decontaminated_reads_ids': {'outputSource': 'extract_clean_reads_ids/output', 'type': 'File'}, 'fastqc1_html': {'outputSource': 'fastqc1/out_html', 'type': 'File[]'}, 'fastqc1_zip': {'outputSource': 'fastqc1/out_zip', 'type': 'File[]'}, 'fastqc2_html': {'outputSource': 'fastqc2/out_html', 'type': 'File[]?'}, 'fastqc2_zip': {'outputSource': 'fastqc2/out_zip', 'type': 'File[]?'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.2",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow remove foreign chromosome comtamination from blastn TSV files",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "fastq_foreign_chromosome_cleanup",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "extract_clean_reads_ids": {
        "label": "Extract decontaminated reads IDs",
        "run": "../../tools/python/extract-clean-from-foreign-blastn.cwl",
        "in": {
          "tax_group": "tax_group",
          "file_name_prefix": "file_name_prefix",
          "partitions": "partitions",
          "threads": "threads",
          "tax_group_pickle": "tax_group_pickle",
          "data_dir": "data_dir"
        },
        "out": [
          "output"
        ]
      },
      "create_clean_fastq": {
        "label": "Creates clean FASTQ",
        "run": "../../tools/bbmap/filterbyname.cwl",
        "in": {
          "in": "fastq1",
          "in2": "fastq2",
          "out": {
            "valueFrom": "${\n   var nameroot = inputs.in.nameroot;\n   if (nameroot.endsWith(\".fastq\")){\n     nameroot = nameroot.replace(\".fastq\", \"\");\n   }else if (nameroot.endsWith(\".fq\")){\n     nameroot = nameroot.replace(\".fq\", \"\");\n   }\n   if (nameroot.endsWith(\"_1\")){\n     nameroot = nameroot.replace('_1', '_foreign_1.fastq.gz');\n   }else if (nameroot.includes(\"_R1_\")){\n     nameroot = nameroot.substring(1, nameroot.indexOf(\"_R1_\")) + '_foreign_1.fastq.gz';\n   } else{\n     nameroot = nameroot + '_foreign.fastq.gz';\n   }\n   return nameroot;\n}\n"
          },
          "out2": {
            "valueFrom": "${\n    if (inputs.in2 != null){\n       var nameroot = inputs.in2.nameroot;\n       if (nameroot.endsWith(\".fastq\")){\n         nameroot = nameroot.replace(\".fastq\", \"\");\n       }else if (nameroot.endsWith(\".fq\")){\n         nameroot = nameroot.replace(\".fq\", \"\");\n       }\n       if (nameroot.endsWith(\"_2\")){\n         nameroot = nameroot.replace('_2', '_foreign_2.fastq.gz');\n       }else if (nameroot.includes(\"_R2_\")){\n         nameroot = nameroot.substring(1, nameroot.indexOf(\"_R2_\")) + '_foreign_2.fastq.gz';\n       }\n       return nameroot;\n    }\n    return null;\n}\n"
          },
          "names": "extract_clean_reads_ids/output",
          "include": {
            "default": "t"
          }
        },
        "out": [
          "output",
          "output2"
        ]
      },
      "fastqc1": {
        "run": "../../tools/fastqc/fastqc.cwl",
        "label": "fastqc",
        "in": {
          "fastq": {
            "source": "create_clean_fastq/output",
            "valueFrom": "${ return [ self ]; }"
          },
          "threads": "threads"
        },
        "out": [
          "out_html",
          "out_zip"
        ]
      },
      "fastqc2": {
        "run": "../../tools/fastqc/fastqc.cwl",
        "when": "$(inputs.fastq[0] != null)",
        "label": "fastqc",
        "in": {
          "fastq": {
            "source": "create_clean_fastq/output2",
            "valueFrom": "${ return [ self ]; }"
          },
          "threads": "threads"
        },
        "out": [
          "out_html",
          "out_zip"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Contamination/fastq-foreign-chromosome-cleanup_test.cwl",
    "sha": "831bab23725f8044814387f8610ddb813cf1c306",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Contamination/fastq-foreign-chromosome-cleanup_test.cwl",
    "content": "class: Workflow\ncwlVersion: v1.2\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n  - class: SubworkflowFeatureRequirement\n\nlabel: fastq_foreign_chromosome_cleanup\ndoc: \"This workflow remove foreign chromosome contamination by taxonomic groups\"\n\ninputs:\n  fsa: File\n  target_tax_group: string\n  blastdb: Directory\n  threads: int\n  tax_group_1: string\n  tax_group_2: string\n  tax_group_3: string\n  tax_group_4: string\n  tax_group_5: string\n  tax_group_6: string\n  tax_group_7: string\n  tax_group_8: string\n\noutputs:\n  fsa_output:\n    outputSource: include_not_aligned_ids/output\n    type: File\n  tax_group_ids:\n    outputSource: screen_target_taxonomic_group/aligned_ids\n    type: File\n  tax_group_1_ids:\n    outputSource: screen_taxonomic_group_1/aligned_ids\n    type: File\n  tax_group_2_ids:\n    outputSource: screen_taxonomic_group_2/aligned_ids\n    type: File\n  tax_group_3_ids:\n    outputSource: screen_taxonomic_group_3/aligned_ids\n    type: File\n  tax_group_4_ids:\n    outputSource: screen_taxonomic_group_4/aligned_ids\n    type: File\n  tax_group_5_ids:\n    outputSource: screen_taxonomic_group_5/aligned_ids\n    type: File\n  tax_group_6_ids:\n    outputSource: screen_taxonomic_group_6/aligned_ids\n    type: File\n  tax_group_7_ids:\n    outputSource: screen_taxonomic_group_7/aligned_ids\n    type: File\n  tax_group_8_ids:\n    outputSource: screen_taxonomic_group_8/aligned_ids\n    type: File\n  tax_group_9_ids:\n    outputSource: screen_taxonomic_group_9/aligned_ids\n    type: File\n  tax_group_10_ids:\n    outputSource: screen_taxonomic_group_10/aligned_ids\n    type: File\n  tax_group_11_ids:\n    outputSource: screen_taxonomic_group_11/aligned_ids\n    type: File\n  tax_group_12_ids:\n    outputSource: screen_taxonomic_group_12/aligned_ids\n    type: File\n  tax_group_13_ids:\n    outputSource: screen_taxonomic_group_13/aligned_ids\n    type: File\n  tax_group_14_ids:\n    outputSource: screen_taxonomic_group_14/aligned_ids\n    type: File\n  tax_group_15_ids:\n    outputSource: screen_taxonomic_group_15/aligned_ids\n    type: File\n  tax_group_16_ids:\n    outputSource: screen_taxonomic_group_16/aligned_ids\n    type: File\n\n\nsteps:\n  screen_target_taxonomic_group:\n    label: Blast screen of fasta for taxonomic group\n    run: ../Blast/blast-extratc-aligned-seq-ids.cwl\n    in:\n      fsa: fsa\n      blastdb: blastdb\n      blastdb_name: target_tax_group\n      threads: threads\n      perc_identity: { default: 95}\n      coverage: { default: 75}\n    out: [ aligned_ids, filter_fsa ]\n  screen_taxonomic_group_1:\n    label: Blast screen of fasta for first taxonomic group\n    run: ../Blast/blast-extratc-aligned-seq-ids.cwl\n    in:\n      fsa: screen_target_taxonomic_group/filter_fsa\n      blastdb: blastdb\n      blastdb_name: tax_group_1\n      threads: threads\n      perc_identity: { default: 95 }\n      coverage: { default: 80 }\n    out: [ aligned_ids, filter_fsa ]\n  screen_taxonomic_group_2:\n    label: Blast screen of fasta for first taxonomic group\n    run: ../Blast/blast-extratc-aligned-seq-ids.cwl\n    in:\n      fsa: screen_taxonomic_group_1/filter_fsa\n      blastdb: blastdb\n      blastdb_name: tax_group_2\n      threads: threads\n      perc_identity: { default: 95 }\n      coverage: { default: 80 }\n    out: [ aligned_ids, filter_fsa ]\n  screen_taxonomic_group_3:\n    label: Blast screen of fasta for first taxonomic group\n    run: ../Blast/blast-extratc-aligned-seq-ids.cwl\n    in:\n      fsa: screen_taxonomic_group_2/filter_fsa\n      blastdb: blastdb\n      blastdb_name: tax_group_3\n      threads: threads\n      perc_identity: { default: 95 }\n      coverage: { default: 80 }\n    out: [ aligned_ids, filter_fsa ]\n  screen_taxonomic_group_4:\n    label: Blast screen of fasta for first taxonomic group\n    run: ../Blast/blast-extratc-aligned-seq-ids.cwl\n    in:\n      fsa: screen_taxonomic_group_3/filter_fsa\n      blastdb: blastdb\n      blastdb_name: tax_group_4\n      threads: threads\n      perc_identity: { default: 95 }\n      coverage: { default: 80 }\n    out: [ aligned_ids, filter_fsa ]\n  screen_taxonomic_group_5:\n    label: Blast screen of fasta for first taxonomic group\n    run: ../Blast/blast-extratc-aligned-seq-ids.cwl\n    in:\n      fsa: screen_taxonomic_group_4/filter_fsa\n      blastdb: blastdb\n      blastdb_name: tax_group_5\n      threads: threads\n      perc_identity: { default: 95 }\n      coverage: { default: 80 }\n    out: [ aligned_ids, filter_fsa ]\n  screen_taxonomic_group_6:\n    label: Blast screen of fasta for first taxonomic group\n    run: ../Blast/blast-extratc-aligned-seq-ids.cwl\n    in:\n      fsa: screen_taxonomic_group_5/filter_fsa\n      blastdb: blastdb\n      blastdb_name: tax_group_6\n      threads: threads\n      perc_identity: { default: 95 }\n      coverage: { default: 80 }\n    out: [ aligned_ids, filter_fsa ]\n  screen_taxonomic_group_7:\n    label: Blast screen of fasta for first taxonomic group\n    run: ../Blast/blast-extratc-aligned-seq-ids.cwl\n    in:\n      fsa: screen_taxonomic_group_6/filter_fsa\n      blastdb: blastdb\n      blastdb_name: tax_group_7\n      threads: threads\n      perc_identity: { default: 95 }\n      coverage: { default: 80 }\n    out: [ aligned_ids, filter_fsa ]\n  screen_taxonomic_group_8:\n    label: Blast screen of fasta for first taxonomic group\n    run: ../Blast/blast-extratc-aligned-seq-ids.cwl\n    in:\n      fsa: screen_taxonomic_group_7/filter_fsa\n      blastdb: blastdb\n      blastdb_name: tax_group_8\n      threads: threads\n      perc_identity: { default: 95 }\n      coverage: { default: 80 }\n    out: [ aligned_ids, filter_fsa ]\n  include_tax_group_aligned_ids:\n    label: Creates clean FASTQ\n    run: ../../tools/bbmap/filterbyname.cwl\n    in:\n      in: fsa\n      out:\n        valueFrom: ${ return inputs.in.basename;}\n      names: screen_target_taxonomic_group/aligned_ids\n      include: { default: \"t\" }\n    out: [ output ]\n  include_not_aligned_ids:\n    label: Creates clean FASTA\n    run:\n      class: CommandLineTool\n      label: Cat\n      requirements:\n        InlineJavascriptRequirement: { }\n      hints:\n        - $import: ../../tools/basic/ubuntu-docker.yml\n      inputs:\n        file1:\n          type: File\n          inputBinding:\n            position: 1\n        file2:\n          type: File\n          inputBinding:\n            position: 2\n      outputs:\n        output:\n          type: File\n          outputBinding:\n            glob: $(inputs.file1.nameroot + \"_noforeign.fa\")\n\n      stdout: $(inputs.file1.nameroot + \"_noforeign.fa\")\n      baseCommand: [ \"cat\" ]\n    in:\n      file1: include_tax_group_aligned_ids/output\n      file2: screen_taxonomic_group_8/filter_fsa\n    out: [ output ]",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'fsa': 'File', 'target_tax_group': 'string', 'blastdb': 'Directory', 'threads': 'int', 'tax_group_1': 'string', 'tax_group_2': 'string', 'tax_group_3': 'string', 'tax_group_4': 'string', 'tax_group_5': 'string', 'tax_group_6': 'string', 'tax_group_7': 'string', 'tax_group_8': 'string'}",
    "cwl_outputs": "{'fsa_output': {'outputSource': 'include_not_aligned_ids/output', 'type': 'File'}, 'tax_group_ids': {'outputSource': 'screen_target_taxonomic_group/aligned_ids', 'type': 'File'}, 'tax_group_1_ids': {'outputSource': 'screen_taxonomic_group_1/aligned_ids', 'type': 'File'}, 'tax_group_2_ids': {'outputSource': 'screen_taxonomic_group_2/aligned_ids', 'type': 'File'}, 'tax_group_3_ids': {'outputSource': 'screen_taxonomic_group_3/aligned_ids', 'type': 'File'}, 'tax_group_4_ids': {'outputSource': 'screen_taxonomic_group_4/aligned_ids', 'type': 'File'}, 'tax_group_5_ids': {'outputSource': 'screen_taxonomic_group_5/aligned_ids', 'type': 'File'}, 'tax_group_6_ids': {'outputSource': 'screen_taxonomic_group_6/aligned_ids', 'type': 'File'}, 'tax_group_7_ids': {'outputSource': 'screen_taxonomic_group_7/aligned_ids', 'type': 'File'}, 'tax_group_8_ids': {'outputSource': 'screen_taxonomic_group_8/aligned_ids', 'type': 'File'}, 'tax_group_9_ids': {'outputSource': 'screen_taxonomic_group_9/aligned_ids', 'type': 'File'}, 'tax_group_10_ids': {'outputSource': 'screen_taxonomic_group_10/aligned_ids', 'type': 'File'}, 'tax_group_11_ids': {'outputSource': 'screen_taxonomic_group_11/aligned_ids', 'type': 'File'}, 'tax_group_12_ids': {'outputSource': 'screen_taxonomic_group_12/aligned_ids', 'type': 'File'}, 'tax_group_13_ids': {'outputSource': 'screen_taxonomic_group_13/aligned_ids', 'type': 'File'}, 'tax_group_14_ids': {'outputSource': 'screen_taxonomic_group_14/aligned_ids', 'type': 'File'}, 'tax_group_15_ids': {'outputSource': 'screen_taxonomic_group_15/aligned_ids', 'type': 'File'}, 'tax_group_16_ids': {'outputSource': 'screen_taxonomic_group_16/aligned_ids', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.2",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow remove foreign chromosome contamination by taxonomic groups",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "fastq_foreign_chromosome_cleanup",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "screen_target_taxonomic_group": {
        "label": "Blast screen of fasta for taxonomic group",
        "run": "../Blast/blast-extratc-aligned-seq-ids.cwl",
        "in": {
          "fsa": "fsa",
          "blastdb": "blastdb",
          "blastdb_name": "target_tax_group",
          "threads": "threads",
          "perc_identity": {
            "default": 95
          },
          "coverage": {
            "default": 75
          }
        },
        "out": [
          "aligned_ids",
          "filter_fsa"
        ]
      },
      "screen_taxonomic_group_1": {
        "label": "Blast screen of fasta for first taxonomic group",
        "run": "../Blast/blast-extratc-aligned-seq-ids.cwl",
        "in": {
          "fsa": "screen_target_taxonomic_group/filter_fsa",
          "blastdb": "blastdb",
          "blastdb_name": "tax_group_1",
          "threads": "threads",
          "perc_identity": {
            "default": 95
          },
          "coverage": {
            "default": 80
          }
        },
        "out": [
          "aligned_ids",
          "filter_fsa"
        ]
      },
      "screen_taxonomic_group_2": {
        "label": "Blast screen of fasta for first taxonomic group",
        "run": "../Blast/blast-extratc-aligned-seq-ids.cwl",
        "in": {
          "fsa": "screen_taxonomic_group_1/filter_fsa",
          "blastdb": "blastdb",
          "blastdb_name": "tax_group_2",
          "threads": "threads",
          "perc_identity": {
            "default": 95
          },
          "coverage": {
            "default": 80
          }
        },
        "out": [
          "aligned_ids",
          "filter_fsa"
        ]
      },
      "screen_taxonomic_group_3": {
        "label": "Blast screen of fasta for first taxonomic group",
        "run": "../Blast/blast-extratc-aligned-seq-ids.cwl",
        "in": {
          "fsa": "screen_taxonomic_group_2/filter_fsa",
          "blastdb": "blastdb",
          "blastdb_name": "tax_group_3",
          "threads": "threads",
          "perc_identity": {
            "default": 95
          },
          "coverage": {
            "default": 80
          }
        },
        "out": [
          "aligned_ids",
          "filter_fsa"
        ]
      },
      "screen_taxonomic_group_4": {
        "label": "Blast screen of fasta for first taxonomic group",
        "run": "../Blast/blast-extratc-aligned-seq-ids.cwl",
        "in": {
          "fsa": "screen_taxonomic_group_3/filter_fsa",
          "blastdb": "blastdb",
          "blastdb_name": "tax_group_4",
          "threads": "threads",
          "perc_identity": {
            "default": 95
          },
          "coverage": {
            "default": 80
          }
        },
        "out": [
          "aligned_ids",
          "filter_fsa"
        ]
      },
      "screen_taxonomic_group_5": {
        "label": "Blast screen of fasta for first taxonomic group",
        "run": "../Blast/blast-extratc-aligned-seq-ids.cwl",
        "in": {
          "fsa": "screen_taxonomic_group_4/filter_fsa",
          "blastdb": "blastdb",
          "blastdb_name": "tax_group_5",
          "threads": "threads",
          "perc_identity": {
            "default": 95
          },
          "coverage": {
            "default": 80
          }
        },
        "out": [
          "aligned_ids",
          "filter_fsa"
        ]
      },
      "screen_taxonomic_group_6": {
        "label": "Blast screen of fasta for first taxonomic group",
        "run": "../Blast/blast-extratc-aligned-seq-ids.cwl",
        "in": {
          "fsa": "screen_taxonomic_group_5/filter_fsa",
          "blastdb": "blastdb",
          "blastdb_name": "tax_group_6",
          "threads": "threads",
          "perc_identity": {
            "default": 95
          },
          "coverage": {
            "default": 80
          }
        },
        "out": [
          "aligned_ids",
          "filter_fsa"
        ]
      },
      "screen_taxonomic_group_7": {
        "label": "Blast screen of fasta for first taxonomic group",
        "run": "../Blast/blast-extratc-aligned-seq-ids.cwl",
        "in": {
          "fsa": "screen_taxonomic_group_6/filter_fsa",
          "blastdb": "blastdb",
          "blastdb_name": "tax_group_7",
          "threads": "threads",
          "perc_identity": {
            "default": 95
          },
          "coverage": {
            "default": 80
          }
        },
        "out": [
          "aligned_ids",
          "filter_fsa"
        ]
      },
      "screen_taxonomic_group_8": {
        "label": "Blast screen of fasta for first taxonomic group",
        "run": "../Blast/blast-extratc-aligned-seq-ids.cwl",
        "in": {
          "fsa": "screen_taxonomic_group_7/filter_fsa",
          "blastdb": "blastdb",
          "blastdb_name": "tax_group_8",
          "threads": "threads",
          "perc_identity": {
            "default": 95
          },
          "coverage": {
            "default": 80
          }
        },
        "out": [
          "aligned_ids",
          "filter_fsa"
        ]
      },
      "include_tax_group_aligned_ids": {
        "label": "Creates clean FASTQ",
        "run": "../../tools/bbmap/filterbyname.cwl",
        "in": {
          "in": "fsa",
          "out": {
            "valueFrom": "${ return inputs.in.basename;}"
          },
          "names": "screen_target_taxonomic_group/aligned_ids",
          "include": {
            "default": "t"
          }
        },
        "out": [
          "output"
        ]
      },
      "include_not_aligned_ids": {
        "label": "Creates clean FASTA",
        "run": "{'class': 'CommandLineTool', 'label': 'Cat', 'requirements': {'InlineJavascriptRequirement': {}}, 'hints': [{'$import': '../../tools/basic/ubuntu-docker.yml'}], 'inputs': {'file1': {'type': 'File', 'inputBinding': {'position': 1}}, 'file2': {'type': 'File', 'inputBinding': {'position': 2}}}, 'outputs': {'output': {'type': 'File', 'outputBinding': {'glob': '$(inputs.file1.nameroot + \"_noforeign.fa\")'}}}, 'stdout': '$(inputs.file1.nameroot + \"_noforeign.fa\")', 'baseCommand': ['cat']}",
        "in": {
          "file1": "include_tax_group_aligned_ids/output",
          "file2": "screen_taxonomic_group_8/filter_fsa"
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Contamination/fastq-vector-removal.cwl",
    "sha": "23bec30849f89ff27aa0461887b27759801afbc9",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Contamination/fastq-vector-removal.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: This workflow clean up vectros from fastq files\nlabel: FASTQ Vector Removal\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ShellCommandRequirement: {}\n\ninputs:\n  threads: int\n  vector_fsa: File\n  fastq1: File\n  fastq2: File?\n\noutputs:\n  fastq1_output:\n    outputSource: create_clean_fastq/output\n    type: File\n  fastq2_output:\n    outputSource: create_clean_fastq/output2\n    type: File?\n  clean_fasta_:\n    outputSource: create_clean_fasta_from_fastq/output\n    type: File\n\nsteps:\n  vector_blastdb:\n    run: ../../tools/blast/makeblastdb.cwl\n    label: Make Vector BlastDB\n    in:\n      dbtype: { default: \"nucl\" }\n      hash_index: { default: True }\n      out: { default: \"myblastdb\" }\n      in: vector_fsa\n    out: [ out_db ]\n  collect_blastdb:\n    run: ../../tools/basic/files2dir.cwl\n    label: Collect BlastDB\n    in:\n      files: vector_blastdb/out_db\n      dir: { default: \"myblastdb\" }\n    out: [ output ]\n  create_fasta_from_fastq:\n    label: Create FASTA from FASTQ\n    run: ../../tools/basic/fastq2fasta.cwl\n    in:\n      fastq1: fastq1\n      fastq2: fastq2\n    out: [output]\n  vector_blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: Vector BlastN\n    in:\n      dbdir: collect_blastdb/output\n      db: { default: \"myblastdb\" }\n      query: create_fasta_from_fastq/output\n      num_threads: threads\n      mt_mode: { default: 0 }\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \".tsv\";}\n      outfmt: { default: \"6 qseqid saccver qstart qend length evalue bitscore score\" }\n      evalue: { default: 700 }\n      task: { default: \"blastn\" }\n      reward: { default: 1 }\n      penalty: { default: -5 }\n      gapopen: { default: 3 }\n      gapextend: { default: 3 }\n      dust: { default: \"yes\" }\n      soft_masking: { default: \"true\" }\n      max_target_seqs: { default: 5 }\n      max_hsps: { default: 10 }\n      searchsp: { default: 1750000000000 }\n    out: [ output ]\n  extract_read_ids:\n    label: Extract read IDs\n    run:\n      class: CommandLineTool\n      label: Extract read IDs\n      requirements:\n        InlineJavascriptRequirement: { }\n      hints:\n        - $import: ../../tools/basic/ubuntu-docker.yml\n      inputs:\n        tsv:\n          type: File\n          streamable: true\n          inputBinding:\n            position: 1\n        pipe:\n          type: string\n          default: \"|\"\n          inputBinding:\n            position: 3\n            shellQuote: False\n        awk:\n          type: string\n          default: \"'{print $1}'\"\n          inputBinding:\n            position: 4\n            prefix: awk\n            shellQuote: False\n        pipe2:\n          type: string\n          default: \"|\"\n          inputBinding:\n            position: 5\n            shellQuote: False\n        sort:\n          type: string\n          default: \"-u\"\n          inputBinding:\n            position: 6\n            prefix: sort\n            shellQuote: False\n      outputs:\n        output:\n          type: File\n          streamable: true\n          outputBinding:\n            glob: $(inputs.tsv.nameroot + \"_unique.ids\")\n\n      stdout: $(inputs.tsv.nameroot + \"_unique.ids\")\n      baseCommand: [ \"cat\" ]\n    in:\n      tsv: vector_blastn/output\n    out: [ output ]\n  create_clean_fastq:\n    label: Creates clean FASTQ\n    run: ../../tools/bbmap/filterbyname.cwl\n    in:\n      in: fastq1\n      in2: fastq2\n      out:\n        valueFrom: |\n          ${\n             var nameroot = inputs.in.nameroot;\n             if (nameroot.endsWith(\".fastq\")){\n               nameroot = nameroot.replace(\".fastq\", \"\");\n             }else if (nameroot.endsWith(\".fq\")){\n               nameroot = nameroot.replace(\".fq\", \"\");\n             }\n             if (nameroot.endsWith(\"_1\")){\n               nameroot = nameroot.replace('_1', '_clean_1.fastq.gz');\n             }else if (nameroot.includes(\"_R1_\")){\n               nameroot = nameroot.substring(1, nameroot.indexOf(\"_R1_\")) + '_clean_1.fastq.gz';\n             } else{\n               nameroot = nameroot + '_clean.fastq.gz';\n             }\n             return nameroot;\n          }\n      out2:\n        valueFrom: |\n          ${\n              if (inputs.in2 != null){\n                 var nameroot = inputs.in2.nameroot;\n                 if (nameroot.endsWith(\".fastq\")){\n                   nameroot = nameroot.replace(\".fastq\", \"\");\n                 }else if (nameroot.endsWith(\".fq\")){\n                   nameroot = nameroot.replace(\".fq\", \"\");\n                 }\n                 if (nameroot.endsWith(\"_2\")){\n                   nameroot = nameroot.replace('_2', '_clean_2.fastq.gz');\n                 }else if (nameroot.includes(\"_R2_\")){\n                   nameroot = nameroot.substring(1, nameroot.indexOf(\"_R2_\")) + '_clean_2.fastq.gz';\n                 }\n                 return nameroot;\n              }\n              return null;\n          }\n      names: extract_read_ids/output\n      include: {default: \"f\"}\n    out: [output, output2]\n  create_clean_fasta_from_fastq:\n    label: Create FASTA from FASTQ\n    run: ../../tools/basic/fastq2fasta.cwl\n    in:\n      fastq1: create_clean_fastq/output\n      fastq2: create_clean_fastq/output2\n    out: [ output ]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'threads': 'int', 'vector_fsa': 'File', 'fastq1': 'File', 'fastq2': 'File?'}",
    "cwl_outputs": "{'fastq1_output': {'outputSource': 'create_clean_fastq/output', 'type': 'File'}, 'fastq2_output': {'outputSource': 'create_clean_fastq/output2', 'type': 'File?'}, 'clean_fasta_': {'outputSource': 'create_clean_fasta_from_fastq/output', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ShellCommandRequirement': {}}",
    "cwl_doc": "This workflow clean up vectros from fastq files",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "FASTQ Vector Removal",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "vector_blastdb": {
        "run": "../../tools/blast/makeblastdb.cwl",
        "label": "Make Vector BlastDB",
        "in": {
          "dbtype": {
            "default": "nucl"
          },
          "hash_index": {
            "default": true
          },
          "out": {
            "default": "myblastdb"
          },
          "in": "vector_fsa"
        },
        "out": [
          "out_db"
        ]
      },
      "collect_blastdb": {
        "run": "../../tools/basic/files2dir.cwl",
        "label": "Collect BlastDB",
        "in": {
          "files": "vector_blastdb/out_db",
          "dir": {
            "default": "myblastdb"
          }
        },
        "out": [
          "output"
        ]
      },
      "create_fasta_from_fastq": {
        "label": "Create FASTA from FASTQ",
        "run": "../../tools/basic/fastq2fasta.cwl",
        "in": {
          "fastq1": "fastq1",
          "fastq2": "fastq2"
        },
        "out": [
          "output"
        ]
      },
      "vector_blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "Vector BlastN",
        "in": {
          "dbdir": "collect_blastdb/output",
          "db": {
            "default": "myblastdb"
          },
          "query": "create_fasta_from_fastq/output",
          "num_threads": "threads",
          "mt_mode": {
            "default": 0
          },
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \".tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid saccver qstart qend length evalue bitscore score"
          },
          "evalue": {
            "default": 700
          },
          "task": {
            "default": "blastn"
          },
          "reward": {
            "default": 1
          },
          "penalty": {
            "default": -5
          },
          "gapopen": {
            "default": 3
          },
          "gapextend": {
            "default": 3
          },
          "dust": {
            "default": "yes"
          },
          "soft_masking": {
            "default": "true"
          },
          "max_target_seqs": {
            "default": 5
          },
          "max_hsps": {
            "default": 10
          },
          "searchsp": {
            "default": 1750000000000
          }
        },
        "out": [
          "output"
        ]
      },
      "extract_read_ids": {
        "label": "Extract read IDs",
        "run": "{'class': 'CommandLineTool', 'label': 'Extract read IDs', 'requirements': {'InlineJavascriptRequirement': {}}, 'hints': [{'$import': '../../tools/basic/ubuntu-docker.yml'}], 'inputs': {'tsv': {'type': 'File', 'streamable': True, 'inputBinding': {'position': 1}}, 'pipe': {'type': 'string', 'default': '|', 'inputBinding': {'position': 3, 'shellQuote': False}}, 'awk': {'type': 'string', 'default': \"'{print $1}'\", 'inputBinding': {'position': 4, 'prefix': 'awk', 'shellQuote': False}}, 'pipe2': {'type': 'string', 'default': '|', 'inputBinding': {'position': 5, 'shellQuote': False}}, 'sort': {'type': 'string', 'default': '-u', 'inputBinding': {'position': 6, 'prefix': 'sort', 'shellQuote': False}}}, 'outputs': {'output': {'type': 'File', 'streamable': True, 'outputBinding': {'glob': '$(inputs.tsv.nameroot + \"_unique.ids\")'}}}, 'stdout': '$(inputs.tsv.nameroot + \"_unique.ids\")', 'baseCommand': ['cat']}",
        "in": {
          "tsv": "vector_blastn/output"
        },
        "out": [
          "output"
        ]
      },
      "create_clean_fastq": {
        "label": "Creates clean FASTQ",
        "run": "../../tools/bbmap/filterbyname.cwl",
        "in": {
          "in": "fastq1",
          "in2": "fastq2",
          "out": {
            "valueFrom": "${\n   var nameroot = inputs.in.nameroot;\n   if (nameroot.endsWith(\".fastq\")){\n     nameroot = nameroot.replace(\".fastq\", \"\");\n   }else if (nameroot.endsWith(\".fq\")){\n     nameroot = nameroot.replace(\".fq\", \"\");\n   }\n   if (nameroot.endsWith(\"_1\")){\n     nameroot = nameroot.replace('_1', '_clean_1.fastq.gz');\n   }else if (nameroot.includes(\"_R1_\")){\n     nameroot = nameroot.substring(1, nameroot.indexOf(\"_R1_\")) + '_clean_1.fastq.gz';\n   } else{\n     nameroot = nameroot + '_clean.fastq.gz';\n   }\n   return nameroot;\n}\n"
          },
          "out2": {
            "valueFrom": "${\n    if (inputs.in2 != null){\n       var nameroot = inputs.in2.nameroot;\n       if (nameroot.endsWith(\".fastq\")){\n         nameroot = nameroot.replace(\".fastq\", \"\");\n       }else if (nameroot.endsWith(\".fq\")){\n         nameroot = nameroot.replace(\".fq\", \"\");\n       }\n       if (nameroot.endsWith(\"_2\")){\n         nameroot = nameroot.replace('_2', '_clean_2.fastq.gz');\n       }else if (nameroot.includes(\"_R2_\")){\n         nameroot = nameroot.substring(1, nameroot.indexOf(\"_R2_\")) + '_clean_2.fastq.gz';\n       }\n       return nameroot;\n    }\n    return null;\n}\n"
          },
          "names": "extract_read_ids/output",
          "include": {
            "default": "f"
          }
        },
        "out": [
          "output",
          "output2"
        ]
      },
      "create_clean_fasta_from_fastq": {
        "label": "Create FASTA from FASTQ",
        "run": "../../tools/basic/fastq2fasta.cwl",
        "in": {
          "fastq1": "create_clean_fastq/output",
          "fastq2": "create_clean_fastq/output2"
        },
        "out": [
          "output"
        ]
      }
    }
  },
  {
    "path": "workflows/Contamination/mitochondrial-cleanup.cwl",
    "sha": "738fc71c711fa8024f1d01155c214853732f8777",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Contamination/mitochondrial-cleanup.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: mito_cleanup\ndoc: \"This workflow detect and remove Mitochondrial from a DNA fasta file\"\n\ninputs:\n  trans_fsa_gz: File\n  threads: int\n  min_length: int\n\noutputs:\n  mito_blastn_tsv:\n    outputSource: mito_blastn/output\n    type: File\n  filtered_fsa:\n    outputSource: filter_blast/fsa\n    type: File\n  filtered_ids:\n    outputSource: filter_blast/ids\n    type: File\n\n\nsteps:\n  download_blastdb:\n    run: ../../tools/blast/update_blastdb.cwl\n    label: Download Mito blastdb\n    in:\n      decompress: { default: True}\n      blastdb: { default: \"mito\" }\n    out: [output]\n  collect_blastdb:\n    run: ../../tools/basic/files2dir.cwl\n    label: Collect BlastDB\n    in:\n      files: download_blastdb/output\n      dir: { default: \"mito\" }\n    out: [ output ]\n  uncompress_noequal:\n    run: ../../tools/basic/gzip.cwl\n    label: Uncompress fasta\n    in:\n      d: { default: True }\n      file: trans_fsa_gz\n    out: [ output ]\n  mito_blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: Vector BlastN\n    in:\n      dbdir: collect_blastdb/output\n      db: { default: \"mito\"}\n      query: uncompress_noequal/output\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \"_mito_blastn.tsv\";}\n      outfmt: { default: \"6 qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score\"}\n      word_size: { default: 28 }\n      best_hit_overhang: { default: 0.1 }\n      best_hit_score_edge: { default: 0.1 }\n      evalue: { default: 0.0001 }\n      perc_identity: { default: 98.6 }\n      soft_masking: { default: \"true\" }\n      task: { default: \"megablast\" }\n      dust: { default: \"yes\" }\n    out: [output]\n  filter_blast:\n    run: ../../tools/python/filter-fasta-by-blast.cwl\n    label: Filter fasta by BlastN outpur\n    in:\n      blastout: mito_blastn/output\n      columns: { default: \"qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score\" }\n      id_column: { default: \"qseqid\" }\n      fasta: uncompress_noequal/output\n      filter_out: { default: True }\n      filter_columns: { default: \"length\" }\n      filter_values: { default: \"120\" }\n      filter_types: { default: \"int,\" }\n      filter_ops: { default: \">=\" }\n    out: [ fsa, ids ]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'trans_fsa_gz': 'File', 'threads': 'int', 'min_length': 'int'}",
    "cwl_outputs": "{'mito_blastn_tsv': {'outputSource': 'mito_blastn/output', 'type': 'File'}, 'filtered_fsa': {'outputSource': 'filter_blast/fsa', 'type': 'File'}, 'filtered_ids': {'outputSource': 'filter_blast/ids', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow detect and remove Mitochondrial from a DNA fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "mito_cleanup",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "download_blastdb": {
        "run": "../../tools/blast/update_blastdb.cwl",
        "label": "Download Mito blastdb",
        "in": {
          "decompress": {
            "default": true
          },
          "blastdb": {
            "default": "mito"
          }
        },
        "out": [
          "output"
        ]
      },
      "collect_blastdb": {
        "run": "../../tools/basic/files2dir.cwl",
        "label": "Collect BlastDB",
        "in": {
          "files": "download_blastdb/output",
          "dir": {
            "default": "mito"
          }
        },
        "out": [
          "output"
        ]
      },
      "uncompress_noequal": {
        "run": "../../tools/basic/gzip.cwl",
        "label": "Uncompress fasta",
        "in": {
          "d": {
            "default": true
          },
          "file": "trans_fsa_gz"
        },
        "out": [
          "output"
        ]
      },
      "mito_blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "Vector BlastN",
        "in": {
          "dbdir": "collect_blastdb/output",
          "db": {
            "default": "mito"
          },
          "query": "uncompress_noequal/output",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \"_mito_blastn.tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score"
          },
          "word_size": {
            "default": 28
          },
          "best_hit_overhang": {
            "default": 0.1
          },
          "best_hit_score_edge": {
            "default": 0.1
          },
          "evalue": {
            "default": 0.0001
          },
          "perc_identity": {
            "default": 98.6
          },
          "soft_masking": {
            "default": "true"
          },
          "task": {
            "default": "megablast"
          },
          "dust": {
            "default": "yes"
          }
        },
        "out": [
          "output"
        ]
      },
      "filter_blast": {
        "run": "../../tools/python/filter-fasta-by-blast.cwl",
        "label": "Filter fasta by BlastN outpur",
        "in": {
          "blastout": "mito_blastn/output",
          "columns": {
            "default": "qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score"
          },
          "id_column": {
            "default": "qseqid"
          },
          "fasta": "uncompress_noequal/output",
          "filter_out": {
            "default": true
          },
          "filter_columns": {
            "default": "length"
          },
          "filter_values": {
            "default": "120"
          },
          "filter_types": {
            "default": "int,"
          },
          "filter_ops": {
            "default": ">="
          }
        },
        "out": [
          "fsa",
          "ids"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Contamination/ribosomal-cleanup.cwl",
    "sha": "ea050d4edb376b62c88cdb8b42f0357019074946",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Contamination/ribosomal-cleanup.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: ribosomal_cleanup\ndoc: \"This workflow detect and remove ribosomal from a DNA fasta file\"\n\ninputs:\n  trans_fsa_gz: File\n  threads: int\n  ribo_fsa: File\n\noutputs:\n  ribosomal_blastn_tsv:\n    outputSource: ribosomal_blastn/output\n    type: File\n  filtered_fsa:\n    outputSource: filter_blast/fsa\n    type: File\n  filtered_ids:\n    outputSource: filter_blast/ids\n    type: File\n\nsteps:\n  ribo_blastdb:\n    run: ../../tools/blast/makeblastdb.cwl\n    label: Make ribosomal BlastDB\n    in:\n      dbtype: { default: \"nucl\" }\n      hash_index: { default: True }\n      out: { default: \"ribosomal\" }\n      in: ribo_fsa\n    out: [ out_db ]\n  collect_blastdb:\n    run: ../../tools/basic/files2dir.cwl\n    label: Collect BlastDB\n    in:\n      files: ribo_blastdb/out_db\n      dir: { default: \"ribosomal\" }\n    out: [ output ]\n  uncompress_noequal:\n    run: ../../tools/basic/gzip.cwl\n    label: Uncompress fasta\n    in:\n      d: { default: True }\n      file: trans_fsa_gz\n    out: [ output ]\n  ribosomal_blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: Vector BlastN\n    in:\n      dbdir: collect_blastdb/output\n      db: { default: \"ribosomal\"}\n      query: uncompress_noequal/output\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \"_ribosomal_blastn.tsv\";}\n      outfmt: { default: \"6 qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score\"}\n      task: { default: \"megablast\" }\n      template_length: { default: 18}\n      template_type: { default: \"coding\"}\n      word_size: { default: 12 }\n      xdrop_gap: { default: 20 }\n      no_greedy: { default: True }\n      best_hit_overhang: { default: 0.1 }\n      best_hit_score_edge: { default: 0.1 }\n      dust: { default: \"yes\" }\n      evalue: { default: 1e-9 }\n      gapextend: { default: 2 }\n      gapopen: { default: 4 }\n      penalty: { default: -4 }\n      perc_identity: { default: 95.0 }\n      reward: { default: 3 }\n      soft_masking: { default: \"true\" }\n    out: [output]\n  filter_blast:\n    run: ../../tools/python/filter-fasta-by-blast.cwl\n    label: Filter fasta by BlastN outpur\n    in:\n      blastout: ribosomal_blastn/output\n      columns: { default: \"qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score\" }\n      id_column: { default: \"qseqid\" }\n      fasta: uncompress_noequal/output\n      filter_out: { default: True }\n      add_coverage: { default: True }\n      filter_columns: { default: \"length,coverage\" }\n      filter_values: { default: \"100,75.0\" }\n      filter_types: { default: \"int,float\" }\n      filter_ops: { default: \">=,>=\" }\n    out: [ fsa, ids ]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'trans_fsa_gz': 'File', 'threads': 'int', 'ribo_fsa': 'File'}",
    "cwl_outputs": "{'ribosomal_blastn_tsv': {'outputSource': 'ribosomal_blastn/output', 'type': 'File'}, 'filtered_fsa': {'outputSource': 'filter_blast/fsa', 'type': 'File'}, 'filtered_ids': {'outputSource': 'filter_blast/ids', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow detect and remove ribosomal from a DNA fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ribosomal_cleanup",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "ribo_blastdb": {
        "run": "../../tools/blast/makeblastdb.cwl",
        "label": "Make ribosomal BlastDB",
        "in": {
          "dbtype": {
            "default": "nucl"
          },
          "hash_index": {
            "default": true
          },
          "out": {
            "default": "ribosomal"
          },
          "in": "ribo_fsa"
        },
        "out": [
          "out_db"
        ]
      },
      "collect_blastdb": {
        "run": "../../tools/basic/files2dir.cwl",
        "label": "Collect BlastDB",
        "in": {
          "files": "ribo_blastdb/out_db",
          "dir": {
            "default": "ribosomal"
          }
        },
        "out": [
          "output"
        ]
      },
      "uncompress_noequal": {
        "run": "../../tools/basic/gzip.cwl",
        "label": "Uncompress fasta",
        "in": {
          "d": {
            "default": true
          },
          "file": "trans_fsa_gz"
        },
        "out": [
          "output"
        ]
      },
      "ribosomal_blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "Vector BlastN",
        "in": {
          "dbdir": "collect_blastdb/output",
          "db": {
            "default": "ribosomal"
          },
          "query": "uncompress_noequal/output",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \"_ribosomal_blastn.tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score"
          },
          "task": {
            "default": "megablast"
          },
          "template_length": {
            "default": 18
          },
          "template_type": {
            "default": "coding"
          },
          "word_size": {
            "default": 12
          },
          "xdrop_gap": {
            "default": 20
          },
          "no_greedy": {
            "default": true
          },
          "best_hit_overhang": {
            "default": 0.1
          },
          "best_hit_score_edge": {
            "default": 0.1
          },
          "dust": {
            "default": "yes"
          },
          "evalue": {
            "default": "1e-9"
          },
          "gapextend": {
            "default": 2
          },
          "gapopen": {
            "default": 4
          },
          "penalty": {
            "default": -4
          },
          "perc_identity": {
            "default": 95.0
          },
          "reward": {
            "default": 3
          },
          "soft_masking": {
            "default": "true"
          }
        },
        "out": [
          "output"
        ]
      },
      "filter_blast": {
        "run": "../../tools/python/filter-fasta-by-blast.cwl",
        "label": "Filter fasta by BlastN outpur",
        "in": {
          "blastout": "ribosomal_blastn/output",
          "columns": {
            "default": "qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score"
          },
          "id_column": {
            "default": "qseqid"
          },
          "fasta": "uncompress_noequal/output",
          "filter_out": {
            "default": true
          },
          "add_coverage": {
            "default": true
          },
          "filter_columns": {
            "default": "length,coverage"
          },
          "filter_values": {
            "default": "100,75.0"
          },
          "filter_types": {
            "default": "int,float"
          },
          "filter_ops": {
            "default": ">=,>="
          }
        },
        "out": [
          "fsa",
          "ids"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Contamination/vector-cleanup.cwl",
    "sha": "f40debec7b38994c1d762ee8bde6a2f0e780ef86",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Contamination/vector-cleanup.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: vector_cleanup\ndoc: \"This workflow detect and remove vectors from a DNA fasta file\"\n\ninputs:\n  trans_fsa_gz: File\n  threads: int\n  min_length: int\n  vector_fsa: File\n\noutputs:\n  equal_seq_removal_1_tsv:\n    outputSource: equal_seq_removal_1/tsv\n    type: File\n  vector_blastn_tsv:\n    outputSource: vector_blastn/output\n    type: File\n  vector_cont:\n    outputSource: vector_removal/vect\n    type: File\n  vector_clean:\n    outputSource: vector_removal/fsa\n    type: File\n  equal_seq_removal_2_tsv:\n    outputSource: equal_seq_removal_2/tsv\n    type: File\n  equal_seq_removal_2_fsa:\n    outputSource: equal_seq_removal_2/fsa\n    type: File\n\n\nsteps:\n  equal_seq_removal_1:\n    run: ../../tools/python/equal-removal.cwl\n    label: Removing equal sequences\n    in:\n      fasta: trans_fsa_gz\n    out: [fsa, tsv]\n  uncompress_noequal:\n    run: ../../tools/basic/gzip.cwl\n    label: Uncompress non equal sequences fasta\n    in:\n      d: { default: True}\n      file: equal_seq_removal_1/fsa\n    out: [output]\n  vector_blastdb:\n    run: ../../tools/blast/makeblastdb.cwl\n    label: Make Vector BlastDB\n    in:\n      dbtype: { default: \"nucl\"}\n      hash_index: { default: True}\n      out: { default: \"myblastdb\"}\n      in: vector_fsa\n    out: [out_db]\n  collect_blastdb:\n    run: ../../tools/basic/files2dir.cwl\n    label: Collect BlastDB\n    in:\n      files: vector_blastdb/out_db\n      dir: { default: \"myblastdb\"}\n    out: [output]\n  vector_blastn:\n    run: ../../tools/blast/blastn.cwl\n    label: Vector BlastN\n    in:\n      dbdir: collect_blastdb/output\n      db: { default: \"myblastdb\"}\n      query: uncompress_noequal/output\n      num_threads: threads\n      out:\n        valueFrom: ${ return inputs.query.nameroot + \"_vector_blastn.tsv\";}\n      outfmt: { default: \"6 qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score\"}\n      evalue: { default: 0.0001 }\n      task: { default: \"megablast\" }\n      reward: { default: 1 }\n      penalty: { default: -5 }\n      gapopen: { default: 3 }\n      gapextend: { default: 3 }\n      dust: { default: \"yes\" }\n      soft_masking: { default: \"true\" }\n      searchsp: { default: 1750000000000 }\n    out: [output]\n  vector_removal:\n    run: ../../tools/python/vector-removal.cwl\n    label: Remove vector from BlastN\n    in:\n      fasta: uncompress_noequal/output\n      blast: vector_blastn/output\n      threads: threads\n      min_length: min_length\n    out: [ fsa, vect ]\n  equal_seq_removal_2:\n    run: ../../tools/python/equal-removal.cwl\n    label: Removing equal sequences\n    in:\n      fasta: vector_removal/fsa\n    out: [fsa, tsv]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'trans_fsa_gz': 'File', 'threads': 'int', 'min_length': 'int', 'vector_fsa': 'File'}",
    "cwl_outputs": "{'equal_seq_removal_1_tsv': {'outputSource': 'equal_seq_removal_1/tsv', 'type': 'File'}, 'vector_blastn_tsv': {'outputSource': 'vector_blastn/output', 'type': 'File'}, 'vector_cont': {'outputSource': 'vector_removal/vect', 'type': 'File'}, 'vector_clean': {'outputSource': 'vector_removal/fsa', 'type': 'File'}, 'equal_seq_removal_2_tsv': {'outputSource': 'equal_seq_removal_2/tsv', 'type': 'File'}, 'equal_seq_removal_2_fsa': {'outputSource': 'equal_seq_removal_2/fsa', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow detect and remove vectors from a DNA fasta file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "vector_cleanup",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "equal_seq_removal_1": {
        "run": "../../tools/python/equal-removal.cwl",
        "label": "Removing equal sequences",
        "in": {
          "fasta": "trans_fsa_gz"
        },
        "out": [
          "fsa",
          "tsv"
        ]
      },
      "uncompress_noequal": {
        "run": "../../tools/basic/gzip.cwl",
        "label": "Uncompress non equal sequences fasta",
        "in": {
          "d": {
            "default": true
          },
          "file": "equal_seq_removal_1/fsa"
        },
        "out": [
          "output"
        ]
      },
      "vector_blastdb": {
        "run": "../../tools/blast/makeblastdb.cwl",
        "label": "Make Vector BlastDB",
        "in": {
          "dbtype": {
            "default": "nucl"
          },
          "hash_index": {
            "default": true
          },
          "out": {
            "default": "myblastdb"
          },
          "in": "vector_fsa"
        },
        "out": [
          "out_db"
        ]
      },
      "collect_blastdb": {
        "run": "../../tools/basic/files2dir.cwl",
        "label": "Collect BlastDB",
        "in": {
          "files": "vector_blastdb/out_db",
          "dir": {
            "default": "myblastdb"
          }
        },
        "out": [
          "output"
        ]
      },
      "vector_blastn": {
        "run": "../../tools/blast/blastn.cwl",
        "label": "Vector BlastN",
        "in": {
          "dbdir": "collect_blastdb/output",
          "db": {
            "default": "myblastdb"
          },
          "query": "uncompress_noequal/output",
          "num_threads": "threads",
          "out": {
            "valueFrom": "${ return inputs.query.nameroot + \"_vector_blastn.tsv\";}"
          },
          "outfmt": {
            "default": "6 qseqid sseqid pident length mismatch gapopen qlen qstart qend sstart send evalue bitscore score"
          },
          "evalue": {
            "default": 0.0001
          },
          "task": {
            "default": "megablast"
          },
          "reward": {
            "default": 1
          },
          "penalty": {
            "default": -5
          },
          "gapopen": {
            "default": 3
          },
          "gapextend": {
            "default": 3
          },
          "dust": {
            "default": "yes"
          },
          "soft_masking": {
            "default": "true"
          },
          "searchsp": {
            "default": 1750000000000
          }
        },
        "out": [
          "output"
        ]
      },
      "vector_removal": {
        "run": "../../tools/python/vector-removal.cwl",
        "label": "Remove vector from BlastN",
        "in": {
          "fasta": "uncompress_noequal/output",
          "blast": "vector_blastn/output",
          "threads": "threads",
          "min_length": "min_length"
        },
        "out": [
          "fsa",
          "vect"
        ]
      },
      "equal_seq_removal_2": {
        "run": "../../tools/python/equal-removal.cwl",
        "label": "Removing equal sequences",
        "in": {
          "fasta": "vector_removal/fsa"
        },
        "out": [
          "fsa",
          "tsv"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/DNA2Protein/genome-to-protein-augustus.cwl",
    "sha": "9d1a7d40e871afa8245e6a66aad1c8e264708e2c",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/DNA2Protein/genome-to-protein-augustus.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: genome-to-protein-augustus\nlabel: Gene prediction with Augustus and proteins extraction\n\nrequirements:\n  InlineJavascriptRequirement: { }\n  StepInputExpressionRequirement: { }\n  ScatterFeatureRequirement: { }\n\ninputs:\n  threads: int\n  fasta: File\n  species: string\n  proteinprofile: File?\n\noutputs:\n  split_genome_fasta:\n    outputSource: split_genome/output\n    type: File[]\n  gtf:\n    outputSource: augustus/output\n    type: File[]\n  proteins:\n    outputSource: extract_protein/fsa\n    type: File[]\n\nsteps:\n  split_genome:\n    run: ../../tools/python/split-genome-by-chromosome.cwl\n    label: Split genome DNA by chromosome\n    in:\n      fasta: fasta\n    out: [ output ]\n  augustus:\n    scatter: input\n    run: ../../tools/augustus/augustus.cwl\n    label: Augustus\n    in:\n      threads: threads\n      input: split_genome/output\n      species: species\n      strand: { default: \"both\"}\n      proteinprofile: proteinprofile\n      out:\n        valueFrom: '${ return inputs.input.nameroot + \"_augustus.gtf\";}'\n    out: [ output ]\n  extract_protein:\n    scatter: gtf\n    run: ../../tools/augustus/extract_augustus_proteins.cwl\n    label: Extracting Augustus proteins\n    in:\n      gtf: augustus/output\n      fasta:\n        valueFrom: '${ return inputs.gtf.nameroot + \".fsa\";}'\n    out: [ fsa ]",
    "cwl_class": "Workflow",
    "cwl_id": "genome-to-protein-augustus",
    "cwl_inputs": "{'threads': 'int', 'fasta': 'File', 'species': 'string', 'proteinprofile': 'File?'}",
    "cwl_outputs": "{'split_genome_fasta': {'outputSource': 'split_genome/output', 'type': 'File[]'}, 'gtf': {'outputSource': 'augustus/output', 'type': 'File[]'}, 'proteins': {'outputSource': 'extract_protein/fsa', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Gene prediction with Augustus and proteins extraction",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "split_genome": {
        "run": "../../tools/python/split-genome-by-chromosome.cwl",
        "label": "Split genome DNA by chromosome",
        "in": {
          "fasta": "fasta"
        },
        "out": [
          "output"
        ]
      },
      "augustus": {
        "scatter": "input",
        "run": "../../tools/augustus/augustus.cwl",
        "label": "Augustus",
        "in": {
          "threads": "threads",
          "input": "split_genome/output",
          "species": "species",
          "strand": {
            "default": "both"
          },
          "proteinprofile": "proteinprofile",
          "out": {
            "valueFrom": "${ return inputs.input.nameroot + \"_augustus.gtf\";}"
          }
        },
        "out": [
          "output"
        ]
      },
      "extract_protein": {
        "scatter": "gtf",
        "run": "../../tools/augustus/extract_augustus_proteins.cwl",
        "label": "Extracting Augustus proteins",
        "in": {
          "gtf": "augustus/output",
          "fasta": {
            "valueFrom": "${ return inputs.gtf.nameroot + \".fsa\";}"
          }
        },
        "out": [
          "fsa"
        ]
      }
    }
  },
  {
    "path": "workflows/DNA2Protein/genomeDNA2Protein.cwl",
    "sha": "12748898b382f748b44aa09b6f3ceb2698ab8169",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/DNA2Protein/genomeDNA2Protein.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: genomeDNA2Protein\nlabel: genomeDNA2Protein\n\nrequirements:\n  InlineJavascriptRequirement: { }\n  StepInputExpressionRequirement: { }\n  ScatterFeatureRequirement: { }\n\ninputs:\n  fasta: File\n  window: int\n  overlap: int\n  threads: int\n\noutputs:\n  concatenate_transdecoder_fasta:\n    outputSource: concatenate_transdecoder/fasta\n    type: File[]\n  concatenate_transdecoder_tsv:\n    outputSource: concatenate_transdecoder/tsv\n    type: File[]\n\nsteps:\n  split_genome:\n    run: ../../tools/python/split-genome-by-window.cwl\n    label: Split genome DNA\n    in:\n      fasta: fasta\n      window: window\n      overlap: overlap\n      threads: threads\n    out: [ output ]\n  transdecoder_longorfs:\n    scatter: t\n    run: ../../tools/transdecoder/transdecoder_longorfs.cwl\n    label: TransDecoder\n    in:\n      t: split_genome/output\n    out: [ output ]\n  transdecoder_longorfs_extract_result:\n    scatter: d\n    run: ../../tools/transdecoder/transdecoder_longorfs_extract_result.cwl\n    label: TransDecoder-Filter\n    in:\n      d: transdecoder_longorfs/output\n      filename: { default: \"longest_orfs.pep\" }\n      o:\n        valueFrom: '${ return inputs.d.nameroot.replace(\".fsa\",\"_transdecoder.fsa\");}'\n    out: [ output ]\n  transdecoder_longorfs_dir:\n    run:\n      class: ExpressionTool\n      requirements:\n        InlineJavascriptRequirement: { }\n      inputs:\n        files:\n          type: File[]\n      outputs:\n        output: Directory\n      expression: |\n        ${\n          var listing = [];\n          for (var i = 1; i < inputs.files.length; i++) {\n            listing.push(inputs.files[i]);\n          }\n          return {\"output\": {\n            \"class\": \"Directory\",\n            \"basename\": \"transdecoder\",\n            \"listing\": listing\n          } };\n        }\n    in:\n      files: transdecoder_longorfs_extract_result/output\n    out: [output]\n  concatenate_transdecoder:\n    run: ../../tools/python/concatenate-transdecoder-proteins.cwl\n    in:\n      fasta: fasta\n      window: window\n      overlap: overlap\n      threads: threads\n      protdir: transdecoder_longorfs_dir/output\n    out: [fasta, tsv]\n\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": "genomeDNA2Protein",
    "cwl_inputs": "{'fasta': 'File', 'window': 'int', 'overlap': 'int', 'threads': 'int'}",
    "cwl_outputs": "{'concatenate_transdecoder_fasta': {'outputSource': 'concatenate_transdecoder/fasta', 'type': 'File[]'}, 'concatenate_transdecoder_tsv': {'outputSource': 'concatenate_transdecoder/tsv', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "genomeDNA2Protein",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "split_genome": {
        "run": "../../tools/python/split-genome-by-window.cwl",
        "label": "Split genome DNA",
        "in": {
          "fasta": "fasta",
          "window": "window",
          "overlap": "overlap",
          "threads": "threads"
        },
        "out": [
          "output"
        ]
      },
      "transdecoder_longorfs": {
        "scatter": "t",
        "run": "../../tools/transdecoder/transdecoder_longorfs.cwl",
        "label": "TransDecoder",
        "in": {
          "t": "split_genome/output"
        },
        "out": [
          "output"
        ]
      },
      "transdecoder_longorfs_extract_result": {
        "scatter": "d",
        "run": "../../tools/transdecoder/transdecoder_longorfs_extract_result.cwl",
        "label": "TransDecoder-Filter",
        "in": {
          "d": "transdecoder_longorfs/output",
          "filename": {
            "default": "longest_orfs.pep"
          },
          "o": {
            "valueFrom": "${ return inputs.d.nameroot.replace(\".fsa\",\"_transdecoder.fsa\");}"
          }
        },
        "out": [
          "output"
        ]
      },
      "transdecoder_longorfs_dir": {
        "run": "{'class': 'ExpressionTool', 'requirements': {'InlineJavascriptRequirement': {}}, 'inputs': {'files': {'type': 'File[]'}}, 'outputs': {'output': 'Directory'}, 'expression': '${\\n  var listing = [];\\n  for (var i = 1; i < inputs.files.length; i++) {\\n    listing.push(inputs.files[i]);\\n  }\\n  return {\"output\": {\\n    \"class\": \"Directory\",\\n    \"basename\": \"transdecoder\",\\n    \"listing\": listing\\n  } };\\n}\\n'}",
        "in": {
          "files": "transdecoder_longorfs_extract_result/output"
        },
        "out": [
          "output"
        ]
      },
      "concatenate_transdecoder": {
        "run": "../../tools/python/concatenate-transdecoder-proteins.cwl",
        "in": {
          "fasta": "fasta",
          "window": "window",
          "overlap": "overlap",
          "threads": "threads",
          "protdir": "transdecoder_longorfs_dir/output"
        },
        "out": [
          "fasta",
          "tsv"
        ]
      }
    }
  },
  {
    "path": "workflows/File-formats/awk.cwl",
    "sha": "2cee6fa18496fda796af73f5fed19f8f723d75fc",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/File-formats/awk.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: awk\ndescription: \"AWK command\"\n\ninputs:\n  F:\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: -F\n    doc: Awk separator\n\n  text:\n    type: string\n    inputBinding:\n      position: 2\n    doc: Awk text\n  file:\n    type: File\n    inputBinding:\n      position: 3\n    doc: Input file\n  outFileName:\n    type: string\n    doc: Out put file name\n\noutputs:\n  output:\n    type: stdout\n\nbaseCommand: [\"awk\"]\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'F': {'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-F'}, 'doc': 'Awk separator'}, 'text': {'type': 'string', 'inputBinding': {'position': 2}, 'doc': 'Awk text'}, 'file': {'type': 'File', 'inputBinding': {'position': 3}, 'doc': 'Input file'}, 'outFileName': {'type': 'string', 'doc': 'Out put file name'}}",
    "cwl_outputs": "{'output': {'type': 'stdout'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['awk']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "awk",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_description": "AWK command"
  },
  {
    "path": "workflows/File-formats/bamtobedpe-gzip.cwl",
    "sha": "a90b216a11eedc2d5d4f89812486a5543f19d75f",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/File-formats/bamtobedpe-gzip.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: \"BAM to BEDPE\"\ndoc: \"Comvert BAM to BEDPE and compress the output\"\n\ninputs:\n  bam:\n    type: File\n    doc: BAM file to be analyzed\n\noutputs:\n  out:\n    type: File\n    outputSource: gzip/output\n\nsteps:\n  bamtobed:\n    run: ../../tools/bedtools/bedtools-bamtobed.cwl\n    in:\n      stdout:\n        valueFrom: ${ return inputs.i.nameroot + \".bedpe\";}\n      i: bam\n      bedpe: { default: True }\n    out: [out_stdout]\n  gzip:\n    run: ../../tools/basic/gzip.cwl\n    in:\n      file: bamtobed/out_stdout\n    out: [output]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'bam': {'type': 'File', 'doc': 'BAM file to be analyzed'}}",
    "cwl_outputs": "{'out': {'type': 'File', 'outputSource': 'gzip/output'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Comvert BAM to BEDPE and compress the output",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "BAM to BEDPE",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "bamtobed": {
        "run": "../../tools/bedtools/bedtools-bamtobed.cwl",
        "in": {
          "stdout": {
            "valueFrom": "${ return inputs.i.nameroot + \".bedpe\";}"
          },
          "i": "bam",
          "bedpe": {
            "default": true
          }
        },
        "out": [
          "out_stdout"
        ]
      },
      "gzip": {
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "file": "bamtobed/out_stdout"
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/File-formats/bedtools-bam-pbc.cwl",
    "sha": "fff5774b8d98551ae6aef4b54c4844e17f98ed72",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/File-formats/bedtools-bam-pbc.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: \"Compute library complexity\"\ndoc: \"This workflow compute library complexity\"\n\ninputs:\n    bam_file:\n        type: File\n        doc: BAM file to be analyzed\n\noutputs:\n    out:\n        type: File\n        outputSource: count_awk/output\n\nsteps:\n    bamtobed:\n        run: ../../tools/bedtools/bedtools-bamtobed.cwl\n        in:\n          stdout:\n            valueFrom: ${ return inputs.i.nameroot + \".bed\";}\n          i: bam_file\n        out: [out_stdout]\n    first_awk:\n        run: ../../tools/basic/awk.cwl\n        in:\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot + \".awk\";}\n          file: bamtobed/out_stdout\n          text: { default: 'BEGIN{OFS=\"\\t\"}{print $1,$2,$3,$6}' }\n        out: [output]\n    filter_chrM:\n       run: ../../tools/basic/grep.cwl\n       in:\n          v: { default: True }\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot + \".grep\";}\n          pattern: { default: 'chrM' }\n          file: first_awk/output\n       out: [output]\n    sort:\n        run: ../../tools/basic/sort.cwl\n        in:\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot + \".sort\";}\n          file: filter_chrM/output\n        out: [output]\n    uniq:\n        run: ../../tools/basic/uniq.cwl\n        in:\n          c: { default: True }\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot + \".uniq\";}\n          file: sort/output\n        out: [output]\n    count_awk:\n        run: ../../tools/basic/awk.cwl\n        in:\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot + \".pbc.qc\";}\n          file: uniq/output\n          text: { default: 'BEGIN{mt=0;m0=0;m1=0;m2=0} ($1==1){m1=m1+1} ($1==2){m2=m2+1} {m0=m0+1} {mt=mt+$1} END{printf \"%d\\t%d\\t%d\\t%d\\t%f\\t%f\\t%f\\n\",mt,m0,m1,m2,m0/mt,m1/m0,m1/m2}' }\n        out: [output]\n\n\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'bam_file': {'type': 'File', 'doc': 'BAM file to be analyzed'}}",
    "cwl_outputs": "{'out': {'type': 'File', 'outputSource': 'count_awk/output'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This workflow compute library complexity",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Compute library complexity",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "bamtobed": {
        "run": "../../tools/bedtools/bedtools-bamtobed.cwl",
        "in": {
          "stdout": {
            "valueFrom": "${ return inputs.i.nameroot + \".bed\";}"
          },
          "i": "bam_file"
        },
        "out": [
          "out_stdout"
        ]
      },
      "first_awk": {
        "run": "../../tools/basic/awk.cwl",
        "in": {
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + \".awk\";}"
          },
          "file": "bamtobed/out_stdout",
          "text": {
            "default": "BEGIN{OFS=\"\\t\"}{print $1,$2,$3,$6}"
          }
        },
        "out": [
          "output"
        ]
      },
      "filter_chrM": {
        "run": "../../tools/basic/grep.cwl",
        "in": {
          "v": {
            "default": true
          },
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + \".grep\";}"
          },
          "pattern": {
            "default": "chrM"
          },
          "file": "first_awk/output"
        },
        "out": [
          "output"
        ]
      },
      "sort": {
        "run": "../../tools/basic/sort.cwl",
        "in": {
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + \".sort\";}"
          },
          "file": "filter_chrM/output"
        },
        "out": [
          "output"
        ]
      },
      "uniq": {
        "run": "../../tools/basic/uniq.cwl",
        "in": {
          "c": {
            "default": true
          },
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + \".uniq\";}"
          },
          "file": "sort/output"
        },
        "out": [
          "output"
        ]
      },
      "count_awk": {
        "run": "../../tools/basic/awk.cwl",
        "in": {
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + \".pbc.qc\";}"
          },
          "file": "uniq/output",
          "text": {
            "default": "BEGIN{mt=0;m0=0;m1=0;m2=0} ($1==1){m1=m1+1} ($1==2){m2=m2+1} {m0=m0+1} {mt=mt+$1} END{printf \"%d\\t%d\\t%d\\t%d\\t%f\\t%f\\t%f\\n\",mt,m0,m1,m2,m0/mt,m1/m0,m1/m2}"
          }
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/File-formats/create-tagAlign.cwl",
    "sha": "cc63a179c50ebf3a3c57d221baed20139378cd74",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/File-formats/create-tagAlign.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: \"Create tagAlign file\"\ndoc: \"This workflow creates tagAlign file\"\n\ninputs:\n    bam_file: File\n\noutputs:\n    output:\n        outputSource: gzip/output\n        type: File\n\nsteps:\n    bamtobed:\n        run: ../../tools/bedtools/bedtools-bamtobed.cwl\n        in:\n          stdout:\n            valueFrom: ${ return inputs.i.nameroot + \".bed\";}\n          i: bam_file\n        out: [out_stdout]\n    awk:\n        run: ../../tools/basic/awk.cwl\n        in:\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot + \".tagAlign\";}\n          file: bamtobed/out_stdout\n          text: { default: 'BEGIN{OFS=\"\\t\"}{$4=\"N\";$5=\"1000\";print $0}'  }\n        out: [output]\n    gzip:\n       run: ../../tools/basic/gzip.cwl\n       in:\n          file: awk/output\n       out: [output]\n\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'bam_file': 'File'}",
    "cwl_outputs": "{'output': {'outputSource': 'gzip/output', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This workflow creates tagAlign file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Create tagAlign file",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "bamtobed": {
        "run": "../../tools/bedtools/bedtools-bamtobed.cwl",
        "in": {
          "stdout": {
            "valueFrom": "${ return inputs.i.nameroot + \".bed\";}"
          },
          "i": "bam_file"
        },
        "out": [
          "out_stdout"
        ]
      },
      "awk": {
        "run": "../../tools/basic/awk.cwl",
        "in": {
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + \".tagAlign\";}"
          },
          "file": "bamtobed/out_stdout",
          "text": {
            "default": "BEGIN{OFS=\"\\t\"}{$4=\"N\";$5=\"1000\";print $0}"
          }
        },
        "out": [
          "output"
        ]
      },
      "gzip": {
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "file": "awk/output"
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/File-formats/fasta-from-bed.cwl",
    "sha": "bae2d1900451ae0886f0402d788b7dc2c30f0533",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/File-formats/fasta-from-bed.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n\nlabel: \"Creates FASTA file from BED coordinates\"\ndoc: \"This workflow creates FASTA file from BED coordinates\"\n\ninputs:\n    fasta: File\n    bed: File\n    fasta_out: string\n\noutputs:\n    output:\n        outputSource: samtools_faidx/output\n        type: File\n\nsteps:\n    remove_comments:\n        run: ../../tools/basic/grep.cwl\n        in:\n          v: {default: True}\n          pattern: {default: '^#'}\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot + \".grep\";}\n          file: bed\n        out: [output]\n    bedtocoord:\n        run: ../../tools/basic/awk.cwl\n        in:\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot + \".coord\";}\n          file: remove_comments/output\n          text: { default: '{printf(\"%s:%d-%d\\n\",$1,$2,$3)}'}\n        out: [output]\n    sort:\n        run: ../../tools/basic/sort.cwl\n        in:\n          u: { default: True}\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot + \".sort\";}\n          file: bedtocoord/output\n        out: [output]\n    samtools_faidx:\n        run: ../../tools/samtools/samtools-faidx.cwl\n        in:\n          o: fasta_out\n          input: fasta\n          r: sort/output\n        out: [output]\n\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'fasta': 'File', 'bed': 'File', 'fasta_out': 'string'}",
    "cwl_outputs": "{'output': {'outputSource': 'samtools_faidx/output', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}}",
    "cwl_doc": "This workflow creates FASTA file from BED coordinates",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Creates FASTA file from BED coordinates",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "remove_comments": {
        "run": "../../tools/basic/grep.cwl",
        "in": {
          "v": {
            "default": true
          },
          "pattern": {
            "default": "^#"
          },
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + \".grep\";}"
          },
          "file": "bed"
        },
        "out": [
          "output"
        ]
      },
      "bedtocoord": {
        "run": "../../tools/basic/awk.cwl",
        "in": {
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + \".coord\";}"
          },
          "file": "remove_comments/output",
          "text": {
            "default": "{printf(\"%s:%d-%d\\n\",$1,$2,$3)}"
          }
        },
        "out": [
          "output"
        ]
      },
      "sort": {
        "run": "../../tools/basic/sort.cwl",
        "in": {
          "u": {
            "default": true
          },
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + \".sort\";}"
          },
          "file": "bedtocoord/output"
        },
        "out": [
          "output"
        ]
      },
      "samtools_faidx": {
        "run": "../../tools/samtools/samtools-faidx.cwl",
        "in": {
          "o": "fasta_out",
          "input": "fasta",
          "r": "sort/output"
        },
        "out": [
          "output"
        ]
      }
    }
  },
  {
    "path": "workflows/File-formats/fastq-to-splitted-fasta.cwl",
    "sha": "6fb03a54322e4c51b74b1206f06931d3f72728f7",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/File-formats/fastq-to-splitted-fasta.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: This workflow convert fastq to multiple fasta files\nlabel: FASTQ Vector Removal\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  fastq1: File\n  fastq2: File?\n  fsa: File\n  total_per_file: int\n\noutputs:\n  output:\n    outputSource: split_fasta/output\n    type: File[]\n\nsteps:\n  create_fasta_from_fastq:\n    label: Create FASTA from FASTQ\n    run: ../../tools/basic/fastq2fasta.cwl\n    in:\n      fastq1: fastq1\n      fastq2: fastq2\n    out: [output]\n  split_fasta:\n    run: ../../tools/python/split-fasta.cwl\n    label: Split fasta\n    in:\n      fasta: create_fasta_from_fastq/output\n      total_per_file: total_per_file\n    out: [output]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'fastq1': 'File', 'fastq2': 'File?', 'fsa': 'File', 'total_per_file': 'int'}",
    "cwl_outputs": "{'output': {'outputSource': 'split_fasta/output', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow convert fastq to multiple fasta files",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "FASTQ Vector Removal",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "create_fasta_from_fastq": {
        "label": "Create FASTA from FASTQ",
        "run": "../../tools/basic/fastq2fasta.cwl",
        "in": {
          "fastq1": "fastq1",
          "fastq2": "fastq2"
        },
        "out": [
          "output"
        ]
      },
      "split_fasta": {
        "run": "../../tools/python/split-fasta.cwl",
        "label": "Split fasta",
        "in": {
          "fasta": "create_fasta_from_fastq/output",
          "total_per_file": "total_per_file"
        },
        "out": [
          "output"
        ]
      }
    }
  },
  {
    "path": "workflows/File-formats/merge-bam-parallel.cwl",
    "sha": "2f02636f183202cd785e624c0f169ea999056519",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/File-formats/merge-bam-parallel.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: >-\n  This workflow merge BAM files per condition in parallel\nlabel: merge-bam-parallel\n\nrequirements:\n  ScatterFeatureRequirement: {}\n\ninputs:\n  bams:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  out_bam: string[]\n\noutputs:\n  merged_bams:\n    outputSource: bam_merge/out_sam\n    type: File[]\n\nsteps:\n  bam_merge:\n    run: ../../tools/samtools/samtools-merge.cwl\n    label: Samtools-Merge\n    scatter: [in_bam, out_bam]\n    scatterMethod: dotproduct\n    in:\n      in_bam: bams\n      out_bam: out_bam\n    out: [out_sam]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'bams': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'out_bam': 'string[]'}",
    "cwl_outputs": "{'merged_bams': {'outputSource': 'bam_merge/out_sam', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow merge BAM files per condition in parallel",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "merge-bam-parallel",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "bam_merge": {
        "run": "../../tools/samtools/samtools-merge.cwl",
        "label": "Samtools-Merge",
        "scatter": [
          "in_bam",
          "out_bam"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "in_bam": "bams",
          "out_bam": "out_bam"
        },
        "out": [
          "out_sam"
        ]
      }
    }
  },
  {
    "path": "workflows/File-formats/remove-fastq-reads-from-blast.cwl",
    "sha": "4cb207bfa3766996bf262fec8a2ac5ae7015ec16",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/File-formats/remove-fastq-reads-from-blast.cwl",
    "content": "class: Workflow\ncwlVersion: v1.2\n\ndoc: This workflow clean up vectros from fastq files\nlabel: FASTQ Vector Removal\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ShellCommandRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  blastdir: Directory\n  tax_pickle: File\n  tax_id: int\n  fastq1: File\n  fastq2: File?\n  threads: int\n\noutputs:\n  fastq1_output:\n    outputSource: create_clean_fastq/output\n    type: File\n  fastq2_output:\n    outputSource: create_clean_fastq/output2\n    type: File?\n  fastqc1_html:\n    outputSource: fastqc1/out_html\n    type: File[]\n  fastqc1_zip:\n    outputSource: fastqc1/out_zip\n    type: File[]\n  fastqc2_html:\n    outputSource: fastqc2/out_html\n    type: File[]?\n  fastqc2_zip:\n    outputSource: fastqc2/out_zip\n    type: File[]?\n\nsteps:\n  contaminated_reads:\n    label: Get contaminated read IDs\n    run: ../../tools/python/filter-blastout-query.cwl\n    in:\n      blastdir: blastdir\n      tax_pickle: tax_pickle\n      tax_id: tax_id\n      out: { default: \"contaminated.ids\" }\n    out: [ output ]\n  create_clean_fastq:\n    label: Creates clean FASTQ\n    run: ../../tools/bbmap/filterbyname.cwl\n    in:\n      in: fastq1\n      in2: fastq2\n      out:\n        valueFrom: |\n          ${\n             var nameroot = inputs.in.nameroot;\n             if (nameroot.endsWith(\".fastq\")){\n               nameroot = nameroot.replace(\".fastq\", \"\");\n             }else if (nameroot.endsWith(\".fq\")){\n               nameroot = nameroot.replace(\".fq\", \"\");\n             }\n             if (nameroot.endsWith(\"_1\")){\n               nameroot = nameroot.replace('_1', '_noCont_1.fastq.gz');\n             }else if (nameroot.includes(\"_R1_\")){\n               nameroot = nameroot.substring(1, nameroot.indexOf(\"_R1_\")) + '_noCont_1.fastq.gz';\n             } else{\n               nameroot = nameroot + '_noCont.fastq.gz';\n             }\n             return nameroot;\n          }\n      out2:\n        valueFrom: |\n          ${\n              if (inputs.in2 != null){\n                 var nameroot = inputs.in2.nameroot;\n                 if (nameroot.endsWith(\".fastq\")){\n                   nameroot = nameroot.replace(\".fastq\", \"\");\n                 }else if (nameroot.endsWith(\".fq\")){\n                   nameroot = nameroot.replace(\".fq\", \"\");\n                 }\n                 if (nameroot.endsWith(\"_2\")){\n                   nameroot = nameroot.replace('_2', '_noCont_2.fastq.gz');\n                 }else if (nameroot.includes(\"_R2_\")){\n                   nameroot = nameroot.substring(1, nameroot.indexOf(\"_R2_\")) + '_noCont_2.fastq.gz';\n                 }\n                 return nameroot;\n              }\n              return null;\n          }\n      names: contaminated_reads/output\n      include: {default: \"f\"}\n    out: [output, output2]\n  fastqc1:\n    run: ../../tools/fastqc/fastqc.cwl\n    label: fastqc\n    in:\n      fastq:\n        source: create_clean_fastq/output\n        valueFrom: ${ return [ self ]; }\n      threads: threads\n    out: [ out_html, out_zip ]\n  fastqc2:\n    run: ../../tools/fastqc/fastqc.cwl\n    when: $(inputs.fastq[0] != null)\n    label: fastqc\n    in:\n      fastq:\n        source: create_clean_fastq/output2\n        valueFrom: ${ return [ self ]; }\n      threads: threads\n    out: [ out_html, out_zip ]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'blastdir': 'Directory', 'tax_pickle': 'File', 'tax_id': 'int', 'fastq1': 'File', 'fastq2': 'File?', 'threads': 'int'}",
    "cwl_outputs": "{'fastq1_output': {'outputSource': 'create_clean_fastq/output', 'type': 'File'}, 'fastq2_output': {'outputSource': 'create_clean_fastq/output2', 'type': 'File?'}, 'fastqc1_html': {'outputSource': 'fastqc1/out_html', 'type': 'File[]'}, 'fastqc1_zip': {'outputSource': 'fastqc1/out_zip', 'type': 'File[]'}, 'fastqc2_html': {'outputSource': 'fastqc2/out_html', 'type': 'File[]?'}, 'fastqc2_zip': {'outputSource': 'fastqc2/out_zip', 'type': 'File[]?'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.2",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ShellCommandRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow clean up vectros from fastq files",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "FASTQ Vector Removal",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "contaminated_reads": {
        "label": "Get contaminated read IDs",
        "run": "../../tools/python/filter-blastout-query.cwl",
        "in": {
          "blastdir": "blastdir",
          "tax_pickle": "tax_pickle",
          "tax_id": "tax_id",
          "out": {
            "default": "contaminated.ids"
          }
        },
        "out": [
          "output"
        ]
      },
      "create_clean_fastq": {
        "label": "Creates clean FASTQ",
        "run": "../../tools/bbmap/filterbyname.cwl",
        "in": {
          "in": "fastq1",
          "in2": "fastq2",
          "out": {
            "valueFrom": "${\n   var nameroot = inputs.in.nameroot;\n   if (nameroot.endsWith(\".fastq\")){\n     nameroot = nameroot.replace(\".fastq\", \"\");\n   }else if (nameroot.endsWith(\".fq\")){\n     nameroot = nameroot.replace(\".fq\", \"\");\n   }\n   if (nameroot.endsWith(\"_1\")){\n     nameroot = nameroot.replace('_1', '_noCont_1.fastq.gz');\n   }else if (nameroot.includes(\"_R1_\")){\n     nameroot = nameroot.substring(1, nameroot.indexOf(\"_R1_\")) + '_noCont_1.fastq.gz';\n   } else{\n     nameroot = nameroot + '_noCont.fastq.gz';\n   }\n   return nameroot;\n}\n"
          },
          "out2": {
            "valueFrom": "${\n    if (inputs.in2 != null){\n       var nameroot = inputs.in2.nameroot;\n       if (nameroot.endsWith(\".fastq\")){\n         nameroot = nameroot.replace(\".fastq\", \"\");\n       }else if (nameroot.endsWith(\".fq\")){\n         nameroot = nameroot.replace(\".fq\", \"\");\n       }\n       if (nameroot.endsWith(\"_2\")){\n         nameroot = nameroot.replace('_2', '_noCont_2.fastq.gz');\n       }else if (nameroot.includes(\"_R2_\")){\n         nameroot = nameroot.substring(1, nameroot.indexOf(\"_R2_\")) + '_noCont_2.fastq.gz';\n       }\n       return nameroot;\n    }\n    return null;\n}\n"
          },
          "names": "contaminated_reads/output",
          "include": {
            "default": "f"
          }
        },
        "out": [
          "output",
          "output2"
        ]
      },
      "fastqc1": {
        "run": "../../tools/fastqc/fastqc.cwl",
        "label": "fastqc",
        "in": {
          "fastq": {
            "source": "create_clean_fastq/output",
            "valueFrom": "${ return [ self ]; }"
          },
          "threads": "threads"
        },
        "out": [
          "out_html",
          "out_zip"
        ]
      },
      "fastqc2": {
        "run": "../../tools/fastqc/fastqc.cwl",
        "when": "$(inputs.fastq[0] != null)",
        "label": "fastqc",
        "in": {
          "fastq": {
            "source": "create_clean_fastq/output2",
            "valueFrom": "${ return [ self ]; }"
          },
          "threads": "threads"
        },
        "out": [
          "out_html",
          "out_zip"
        ]
      }
    }
  },
  {
    "path": "workflows/File-formats/subample-pseudoreplicates.cwl",
    "sha": "d71fa274a0f2d375e3a4d67fdc93faaca0e173d5",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/File-formats/subample-pseudoreplicates.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n  - class: SubworkflowFeatureRequirement\n  - class: ScatterFeatureRequirement\n\nlabel: \"Subsample BAM file creating a tagAlign and pseudoreplicates\"\ndoc: \"This workflow creates a subsample from a BAM file creating a tagAlign and pseudoreplicates\"\n\ninputs:\n    bam_file: File\n    nreads: int\n\noutputs:\n    tagalign_out:\n        outputSource: create_tagalign/output\n        type: File\n    subsample_out:\n        outputSource: gzip/output\n        type: File\n    pseudoreplicate_gzip_out:\n        outputSource: pseudoreplicate_gzip/output\n        type: File[]\n\nsteps:\n    create_tagalign:\n        run: create-tagAlign.cwl\n        in:\n          bam_file: bam_file\n        out: [output]\n    gzip_cat:\n        run: ../../tools/basic/gzip.cwl\n        in:\n          c: { default: True}\n          d: { default: True}\n          file: create_tagalign/output\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot;}\n        out: [output]\n    filter_chrM:\n       run: ../../tools/basic/grep.cwl\n       in:\n          v: { default: True }\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot;}\n          pattern: { default: 'chrM' }\n          file: gzip_cat/output\n       out: [output]\n    shuf:\n        run: ../../tools/basic/shuf.cwl\n        in:\n          n: nreads\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot + \".filt.nodup.sample.tagAlign\";}\n          random-source: gzip_cat/output\n          file: filter_chrM/output\n        out: [output]\n    gzip:\n        run: ../../tools/basic/gzip.cwl\n        in:\n          c: { default: True }\n          n: { default: True }\n          file: shuf/output\n          outFileName:\n            valueFrom: ${ return inputs.file.basename + \".gz\";}\n        out: [output]\n    pseudoreplicate_count_lines:\n        run: ../../tools/basic/wc.cwl\n        in:\n          l: { default: True }\n          file: gzip_cat/output\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot;}\n        out: [output]\n    pseudoreplicate_split_file:\n        run: ../../tools/basic/split_half.cwl\n        in:\n          d: { default: True}\n          valuefile: pseudoreplicate_count_lines/output\n          file: gzip_cat/output\n          outFileName:\n            valueFrom: ${ return inputs.file.nameroot + '.';}\n        out: [output]\n    pseudoreplicate_gzip:\n        run: ../../tools/basic/gzip.cwl\n        scatter: [file]\n        in:\n          c: { default: True }\n          file: pseudoreplicate_split_file/output\n          outFileName:\n            valueFrom: ${ return inputs.file.basename + '.tagAlign.gz';}\n        out: [output]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'bam_file': 'File', 'nreads': 'int'}",
    "cwl_outputs": "{'tagalign_out': {'outputSource': 'create_tagalign/output', 'type': 'File'}, 'subsample_out': {'outputSource': 'gzip/output', 'type': 'File'}, 'pseudoreplicate_gzip_out': {'outputSource': 'pseudoreplicate_gzip/output', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This workflow creates a subsample from a BAM file creating a tagAlign and pseudoreplicates",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Subsample BAM file creating a tagAlign and pseudoreplicates",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "create_tagalign": {
        "run": "create-tagAlign.cwl",
        "in": {
          "bam_file": "bam_file"
        },
        "out": [
          "output"
        ]
      },
      "gzip_cat": {
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "c": {
            "default": true
          },
          "d": {
            "default": true
          },
          "file": "create_tagalign/output",
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot;}"
          }
        },
        "out": [
          "output"
        ]
      },
      "filter_chrM": {
        "run": "../../tools/basic/grep.cwl",
        "in": {
          "v": {
            "default": true
          },
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot;}"
          },
          "pattern": {
            "default": "chrM"
          },
          "file": "gzip_cat/output"
        },
        "out": [
          "output"
        ]
      },
      "shuf": {
        "run": "../../tools/basic/shuf.cwl",
        "in": {
          "n": "nreads",
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + \".filt.nodup.sample.tagAlign\";}"
          },
          "random-source": "gzip_cat/output",
          "file": "filter_chrM/output"
        },
        "out": [
          "output"
        ]
      },
      "gzip": {
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "c": {
            "default": true
          },
          "n": {
            "default": true
          },
          "file": "shuf/output",
          "outFileName": {
            "valueFrom": "${ return inputs.file.basename + \".gz\";}"
          }
        },
        "out": [
          "output"
        ]
      },
      "pseudoreplicate_count_lines": {
        "run": "../../tools/basic/wc.cwl",
        "in": {
          "l": {
            "default": true
          },
          "file": "gzip_cat/output",
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot;}"
          }
        },
        "out": [
          "output"
        ]
      },
      "pseudoreplicate_split_file": {
        "run": "../../tools/basic/split_half.cwl",
        "in": {
          "d": {
            "default": true
          },
          "valuefile": "pseudoreplicate_count_lines/output",
          "file": "gzip_cat/output",
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + '.';}"
          }
        },
        "out": [
          "output"
        ]
      },
      "pseudoreplicate_gzip": {
        "run": "../../tools/basic/gzip.cwl",
        "scatter": [
          "file"
        ],
        "in": {
          "c": {
            "default": true
          },
          "file": "pseudoreplicate_split_file/output",
          "outFileName": {
            "valueFrom": "${ return inputs.file.basename + '.tagAlign.gz';}"
          }
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/RNA-Seq/rnaseq-alignment-quantification.cwl",
    "sha": "d1d0053f207b24ec5381ca62ebede2e27614208d",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/RNA-Seq/rnaseq-alignment-quantification.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: >-\n  This workflow retrieve SRA fastqc data and execute QC, alignment and\n  quantification from TPMCalculator\nlabel: rnaseq-alignment-quantification\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  reads:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  genomeDir: Directory\n  threads: int\n  genome_bed: File\n  genome_gtf: File\n  q: int\n  p: boolean?\n  ramMaxRSeQC: int?\n  ramMaxSTAR: float?\n    \noutputs:\n  sorted_bam:\n    outputSource: alignment/sorted_bam\n    type: File[]\n  star_stats:\n    outputSource: alignment/mappingstats\n    type: File[]?\n  stats_bam:\n    outputSource: alignment/stats_bam\n    type: File[]\n  readspergene:\n    outputSource: alignment/readspergene\n    type: File[]?\n  gzip_transcripts_out_out:\n    outputSource: gzip_transcripts_out/output\n    type: File[]\n  gzip_transcripts_ent_out:\n    outputSource: gzip_transcripts_ent/output\n    type: File[]\n  gzip_gene_uni_out:\n    outputSource: gzip_gene_uni/output\n    type: File[]\n  gzip_gene_out_out:\n    outputSource: gzip_gene_out/output\n    type: File[]\n  gzip_gene_ent_out:\n    outputSource: gzip_gene_ent/output\n    type: File[]\n  bam_stat_out:\n    outputSource: bam_stat/output\n    type: File[]\n  experiment_out:\n    outputSource: infer_experiment/output\n    type: File[]\n  gzip_junction_annotation_bed_out:\n    outputSource: gzip_junction_annotation_bed/output\n    type: File[]\n  gzip_junction_annotation_xls_out:\n    outputSource: gzip_junction_annotation_xls/output\n    type: File[]\n  junction_annotation_pdf_out:\n    outputSource: junction_annotation/pdf\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  junction_saturation_out:\n    outputSource: junction_saturation/output\n    type: File[]\n  read_distribution_out:\n    outputSource: read_distribution/output\n    type: File[]\n\nsteps:\n  alignment:\n    run: ../Alignments/star-alignment.cwl\n    label: STAR-alingment\n    scatter: reads\n    in:\n      reads: reads\n      genomeDir: genomeDir\n      ramMaxSTAR: ramMaxSTAR\n      threads: threads\n    out: [sorted_bam, star_stats, stats_bam, readspergene, mappingstats]\n  quantification:\n    run: ../../tools/tpmcalculator/tpmcalculator.cwl\n    label: tpmcalculator\n    scatter: b\n    in:\n      b: alignment/sorted_bam\n      g: genome_gtf\n      q: q\n      p: p\n      e: { default: true }\n      a: { default: true }\n    out: [gene_ent, gene_out, gene_uni, transcripts_ent, transcripts_out]\n  gzip_gene_ent:\n    scatter: file\n    in:\n      file: quantification/gene_ent\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_gene_out:\n    scatter: file\n    in:\n      file: quantification/gene_out\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_gene_uni:\n    scatter: file\n    in:\n      file: quantification/gene_uni\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_transcripts_ent:\n    scatter: file\n    in:\n      file: quantification/transcripts_ent\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_transcripts_out:\n    scatter: file\n    in:\n      file: quantification/transcripts_out\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  bam_stat:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-bam_stat.cwl\n    in:\n      i: alignment/sorted_bam\n      q: q\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.bam_stat.txt\";}\n    out: [output]\n    doc: |\n      BAM stats\n  infer_experiment:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-infer_experiment.cwl\n    in:\n      i: alignment/sorted_bam\n      q: q\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.infer_experiment.txt\";}\n    out: [output]\n    doc: |\n      Infering Experiment\n  junction_annotation:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-junction_annotation.cwl\n    in:\n      i: alignment/sorted_bam\n      q: q\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}\n    out: [bed, xls, pdf]\n    doc: |\n      Junction annotation\n  gzip_junction_annotation_bed:\n    scatter: file\n    run: ../../tools/basic/gzip.cwl\n    in:\n      file: junction_annotation/bed\n    out: [output]\n    doc: |\n      Gzip Bed file\n  gzip_junction_annotation_xls:\n    scatter: file\n    run: ../../tools/basic/gzip.cwl\n    in:\n      c: { default: True}\n      file: junction_annotation/xls\n      outFileName:\n        valueFrom: ${ return inputs.file.basename + \".gz\";}\n    out: [output]\n    doc: |\n      Gzip XLS file\n  junction_saturation:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-junction_saturation.cwl\n    in:\n      i: alignment/sorted_bam\n      q: q\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}\n    out: [output]\n    doc: |\n      Junction saturation\n  read_distribution:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-read_distribution.cwl\n    in:\n      i: alignment/sorted_bam\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.read_distribution.txt\";}\n    out: [output]\n    doc: |\n      Read distribution\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'reads': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'genomeDir': 'Directory', 'threads': 'int', 'genome_bed': 'File', 'genome_gtf': 'File', 'q': 'int', 'p': 'boolean?', 'ramMaxRSeQC': 'int?', 'ramMaxSTAR': 'float?'}",
    "cwl_outputs": "{'sorted_bam': {'outputSource': 'alignment/sorted_bam', 'type': 'File[]'}, 'star_stats': {'outputSource': 'alignment/mappingstats', 'type': 'File[]?'}, 'stats_bam': {'outputSource': 'alignment/stats_bam', 'type': 'File[]'}, 'readspergene': {'outputSource': 'alignment/readspergene', 'type': 'File[]?'}, 'gzip_transcripts_out_out': {'outputSource': 'gzip_transcripts_out/output', 'type': 'File[]'}, 'gzip_transcripts_ent_out': {'outputSource': 'gzip_transcripts_ent/output', 'type': 'File[]'}, 'gzip_gene_uni_out': {'outputSource': 'gzip_gene_uni/output', 'type': 'File[]'}, 'gzip_gene_out_out': {'outputSource': 'gzip_gene_out/output', 'type': 'File[]'}, 'gzip_gene_ent_out': {'outputSource': 'gzip_gene_ent/output', 'type': 'File[]'}, 'bam_stat_out': {'outputSource': 'bam_stat/output', 'type': 'File[]'}, 'experiment_out': {'outputSource': 'infer_experiment/output', 'type': 'File[]'}, 'gzip_junction_annotation_bed_out': {'outputSource': 'gzip_junction_annotation_bed/output', 'type': 'File[]'}, 'gzip_junction_annotation_xls_out': {'outputSource': 'gzip_junction_annotation_xls/output', 'type': 'File[]'}, 'junction_annotation_pdf_out': {'outputSource': 'junction_annotation/pdf', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'junction_saturation_out': {'outputSource': 'junction_saturation/output', 'type': 'File[]'}, 'read_distribution_out': {'outputSource': 'read_distribution/output', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow retrieve SRA fastqc data and execute QC, alignment and quantification from TPMCalculator",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "rnaseq-alignment-quantification",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "alignment": {
        "run": "../Alignments/star-alignment.cwl",
        "label": "STAR-alingment",
        "scatter": "reads",
        "in": {
          "reads": "reads",
          "genomeDir": "genomeDir",
          "ramMaxSTAR": "ramMaxSTAR",
          "threads": "threads"
        },
        "out": [
          "sorted_bam",
          "star_stats",
          "stats_bam",
          "readspergene",
          "mappingstats"
        ]
      },
      "quantification": {
        "run": "../../tools/tpmcalculator/tpmcalculator.cwl",
        "label": "tpmcalculator",
        "scatter": "b",
        "in": {
          "b": "alignment/sorted_bam",
          "g": "genome_gtf",
          "q": "q",
          "p": "p",
          "e": {
            "default": true
          },
          "a": {
            "default": true
          }
        },
        "out": [
          "gene_ent",
          "gene_out",
          "gene_uni",
          "transcripts_ent",
          "transcripts_out"
        ]
      },
      "gzip_gene_ent": {
        "scatter": "file",
        "in": {
          "file": "quantification/gene_ent"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_gene_out": {
        "scatter": "file",
        "in": {
          "file": "quantification/gene_out"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_gene_uni": {
        "scatter": "file",
        "in": {
          "file": "quantification/gene_uni"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_transcripts_ent": {
        "scatter": "file",
        "in": {
          "file": "quantification/transcripts_ent"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_transcripts_out": {
        "scatter": "file",
        "in": {
          "file": "quantification/transcripts_out"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "bam_stat": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-bam_stat.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "q": "q",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.bam_stat.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "BAM stats\n"
      },
      "infer_experiment": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-infer_experiment.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "q": "q",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.infer_experiment.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Infering Experiment\n"
      },
      "junction_annotation": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-junction_annotation.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "q": "q",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}"
          }
        },
        "out": [
          "bed",
          "xls",
          "pdf"
        ],
        "doc": "Junction annotation\n"
      },
      "gzip_junction_annotation_bed": {
        "scatter": "file",
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "file": "junction_annotation/bed"
        },
        "out": [
          "output"
        ],
        "doc": "Gzip Bed file\n"
      },
      "gzip_junction_annotation_xls": {
        "scatter": "file",
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "c": {
            "default": true
          },
          "file": "junction_annotation/xls",
          "outFileName": {
            "valueFrom": "${ return inputs.file.basename + \".gz\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Gzip XLS file\n"
      },
      "junction_saturation": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-junction_saturation.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "q": "q",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Junction saturation\n"
      },
      "read_distribution": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-read_distribution.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.read_distribution.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Read distribution\n"
      }
    }
  },
  {
    "path": "workflows/RNA-Seq/rnaseq-alignment-quantification_nosplice.cwl",
    "sha": "3cb861cae2cec8cffb9b5df9eb12dc899e74ae0b",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/RNA-Seq/rnaseq-alignment-quantification_nosplice.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: >-\n  This workflow QC, alignment and quantification from TPMCalculator for not spliced genomes\nlabel: rnaseq-alignment-quantification-nosplice\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  reads:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  genomeDir: Directory\n  threads: int\n  genome_bed: File\n  genome_gtf: File\n  q: int\n  p: boolean?\n  ramMaxRSeQC: int?\n  ramMaxSTAR: float?\n    \noutputs:\n  indexed_bam:\n    outputSource: alignment/indexed_bam\n    type: File[]\n  sorted_bam:\n    outputSource: alignment/sorted_bam\n    type: File[]\n  star_stats:\n    outputSource: alignment/mappingstats\n    type: File[]?\n  stats_bam:\n    outputSource: alignment/stats_bam\n    type: File[]\n  readspergene:\n    outputSource: alignment/readspergene\n    type: File[]?\n  gzip_transcripts_out_out:\n    outputSource: gzip_transcripts_out/output\n    type: File[]\n  gzip_transcripts_ent_out:\n    outputSource: gzip_transcripts_ent/output\n    type: File[]\n  gzip_gene_uni_out:\n    outputSource: gzip_gene_uni/output\n    type: File[]\n  gzip_gene_out_out:\n    outputSource: gzip_gene_out/output\n    type: File[]\n  gzip_gene_ent_out:\n    outputSource: gzip_gene_ent/output\n    type: File[]\n  bam_stat_out:\n    outputSource: bam_stat/output\n    type: File[]\n  experiment_out:\n    outputSource: infer_experiment/output\n    type: File[]\n  read_distribution_out:\n    outputSource: read_distribution/output\n    type: File[]\n  read_quality_out:\n    outputSource: read_quality/output\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n\n\nsteps:\n  alignment:\n    run: ../Alignments/star-alignment-nosplice.cwl\n    label: STAR-alingment\n    scatter: reads\n    in:\n      reads: reads\n      genomeDir: genomeDir\n      ramMaxSTAR: ramMaxSTAR\n      threads: threads\n    out: [indexed_bam, sorted_bam, star_stats, stats_bam, readspergene, mappingstats]\n  quantification:\n    run: ../../tools/tpmcalculator/tpmcalculator.cwl\n    label: tpmcalculator\n    scatter: b\n    in:\n      b: alignment/sorted_bam\n      g: genome_gtf\n      q: q\n      p: p\n      e: { default: true }\n      a: { default: true }\n    out: [gene_ent, gene_out, gene_uni, transcripts_ent, transcripts_out]\n  gzip_gene_ent:\n    scatter: file\n    in:\n      file: quantification/gene_ent\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_gene_out:\n    scatter: file\n    in:\n      file: quantification/gene_out\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_gene_uni:\n    scatter: file\n    in:\n      file: quantification/gene_uni\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_transcripts_ent:\n    scatter: file\n    in:\n      file: quantification/transcripts_ent\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_transcripts_out:\n    scatter: file\n    in:\n      file: quantification/transcripts_out\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  bam_stat:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-bam_stat.cwl\n    in:\n      i: alignment/sorted_bam\n      q: q\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.bam_stat.txt\";}\n    out: [output]\n    doc: |\n      BAM stats\n  infer_experiment:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-infer_experiment.cwl\n    in:\n      i: alignment/sorted_bam\n      q: q\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.infer_experiment.txt\";}\n    out: [output]\n    doc: |\n      Infering Experiment\n  read_distribution:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-read_distribution.cwl\n    in:\n      i: alignment/sorted_bam\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.read_distribution.txt\";}\n    out: [output]\n    doc: |\n      Read distribution\n  read_quality:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-read_quality.cwl\n    in:\n      i: alignment/sorted_bam\n      q: q\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}\n    out: [output]\n    doc: |\n      Read quality\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'reads': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'genomeDir': 'Directory', 'threads': 'int', 'genome_bed': 'File', 'genome_gtf': 'File', 'q': 'int', 'p': 'boolean?', 'ramMaxRSeQC': 'int?', 'ramMaxSTAR': 'float?'}",
    "cwl_outputs": "{'indexed_bam': {'outputSource': 'alignment/indexed_bam', 'type': 'File[]'}, 'sorted_bam': {'outputSource': 'alignment/sorted_bam', 'type': 'File[]'}, 'star_stats': {'outputSource': 'alignment/mappingstats', 'type': 'File[]?'}, 'stats_bam': {'outputSource': 'alignment/stats_bam', 'type': 'File[]'}, 'readspergene': {'outputSource': 'alignment/readspergene', 'type': 'File[]?'}, 'gzip_transcripts_out_out': {'outputSource': 'gzip_transcripts_out/output', 'type': 'File[]'}, 'gzip_transcripts_ent_out': {'outputSource': 'gzip_transcripts_ent/output', 'type': 'File[]'}, 'gzip_gene_uni_out': {'outputSource': 'gzip_gene_uni/output', 'type': 'File[]'}, 'gzip_gene_out_out': {'outputSource': 'gzip_gene_out/output', 'type': 'File[]'}, 'gzip_gene_ent_out': {'outputSource': 'gzip_gene_ent/output', 'type': 'File[]'}, 'bam_stat_out': {'outputSource': 'bam_stat/output', 'type': 'File[]'}, 'experiment_out': {'outputSource': 'infer_experiment/output', 'type': 'File[]'}, 'read_distribution_out': {'outputSource': 'read_distribution/output', 'type': 'File[]'}, 'read_quality_out': {'outputSource': 'read_quality/output', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow QC, alignment and quantification from TPMCalculator for not spliced genomes",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "rnaseq-alignment-quantification-nosplice",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "alignment": {
        "run": "../Alignments/star-alignment-nosplice.cwl",
        "label": "STAR-alingment",
        "scatter": "reads",
        "in": {
          "reads": "reads",
          "genomeDir": "genomeDir",
          "ramMaxSTAR": "ramMaxSTAR",
          "threads": "threads"
        },
        "out": [
          "indexed_bam",
          "sorted_bam",
          "star_stats",
          "stats_bam",
          "readspergene",
          "mappingstats"
        ]
      },
      "quantification": {
        "run": "../../tools/tpmcalculator/tpmcalculator.cwl",
        "label": "tpmcalculator",
        "scatter": "b",
        "in": {
          "b": "alignment/sorted_bam",
          "g": "genome_gtf",
          "q": "q",
          "p": "p",
          "e": {
            "default": true
          },
          "a": {
            "default": true
          }
        },
        "out": [
          "gene_ent",
          "gene_out",
          "gene_uni",
          "transcripts_ent",
          "transcripts_out"
        ]
      },
      "gzip_gene_ent": {
        "scatter": "file",
        "in": {
          "file": "quantification/gene_ent"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_gene_out": {
        "scatter": "file",
        "in": {
          "file": "quantification/gene_out"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_gene_uni": {
        "scatter": "file",
        "in": {
          "file": "quantification/gene_uni"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_transcripts_ent": {
        "scatter": "file",
        "in": {
          "file": "quantification/transcripts_ent"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_transcripts_out": {
        "scatter": "file",
        "in": {
          "file": "quantification/transcripts_out"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "bam_stat": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-bam_stat.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "q": "q",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.bam_stat.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "BAM stats\n"
      },
      "infer_experiment": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-infer_experiment.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "q": "q",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.infer_experiment.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Infering Experiment\n"
      },
      "read_distribution": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-read_distribution.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.read_distribution.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Read distribution\n"
      },
      "read_quality": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-read_quality.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "q": "q",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Read quality\n"
      }
    }
  },
  {
    "path": "workflows/RNA-Seq/rnaseq-quantification-qc.cwl",
    "sha": "b37b449dacdcfbfe44b23f9beb1d66e9a1f0e69c",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/RNA-Seq/rnaseq-quantification-qc.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: >-\n  This workflow retrieve SRA fastqc data and execute QC, alignment and\n  quantification from TPMCalculator\nlabel: rnaseq-alignment-quantification\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  bam:\n    type: File\n    secondaryFiles: .bai\n  genome_bed: File\n  genome_gtf: File\n  q: int\n  p: boolean?\n  ramMaxRSeQC: int?\n    \noutputs:\n  gzip_transcripts_out_out:\n    outputSource: gzip_transcripts_out/output\n    type: File\n  gzip_transcripts_ent_out:\n    outputSource: gzip_transcripts_ent/output\n    type: File\n  gzip_gene_uni_out:\n    outputSource: gzip_gene_uni/output\n    type: File\n  gzip_gene_out_out:\n    outputSource: gzip_gene_out/output\n    type: File\n  gzip_gene_ent_out:\n    outputSource: gzip_gene_ent/output\n    type: File\n  bam_stat_out:\n    outputSource: bam_stat/output\n    type: File\n  experiment_out:\n    outputSource: infer_experiment/output\n    type: File\n  gzip_junction_annotation_bed_out:\n    outputSource: gzip_junction_annotation_bed/output\n    type: File\n  gzip_junction_annotation_xls_out:\n    outputSource: gzip_junction_annotation_xls/output\n    type: File\n  junction_annotation_pdf_out:\n    outputSource: junction_annotation/pdf\n    type: File[]\n  junction_saturation_out:\n    outputSource: junction_saturation/output\n    type: File\n  read_distribution_out:\n    outputSource: read_distribution/output\n    type: File\n  read_quality_out:\n    outputSource: read_quality/output\n    type: File[]\n\n\nsteps:\n  quantification:\n    run: ../../tools/tpmcalculator/tpmcalculator.cwl\n    label: tpmcalculator\n    in:\n      b: bam\n      g: genome_gtf\n      q: q\n      p: p\n      e: { default: true }\n      a: { default: true }\n    out: [gene_ent, gene_out, gene_uni, transcripts_ent, transcripts_out]\n  gzip_gene_ent:\n    in:\n      file: quantification/gene_ent\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_gene_out:\n    in:\n      file: quantification/gene_out\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_gene_uni:\n    in:\n      file: quantification/gene_uni\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_transcripts_ent:\n    in:\n      file: quantification/transcripts_ent\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_transcripts_out:\n    in:\n      file: quantification/transcripts_out\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  bam_stat:\n    run: ../../tools/rseqc/rseqc-bam_stat.cwl\n    in:\n      i: bam\n      q: q\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.bam_stat.txt\";}\n    out: [output]\n    doc: |\n      BAM stats\n  infer_experiment:\n    run: ../../tools/rseqc/rseqc-infer_experiment.cwl\n    in:\n      i: bam\n      q: q\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.infer_experiment.txt\";}\n    out: [output]\n    doc: |\n      Infering Experiment\n  junction_annotation:\n    run: ../../tools/rseqc/rseqc-junction_annotation.cwl\n    in:\n      i: bam\n      q: q\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}\n    out: [bed, xls, pdf]\n    doc: |\n      Junction annotation\n  gzip_junction_annotation_bed:\n    run: ../../tools/basic/gzip.cwl\n    in:\n      file: junction_annotation/bed\n    out: [output]\n    doc: |\n      Gzip Bed file\n  gzip_junction_annotation_xls:\n    run: ../../tools/basic/gzip.cwl\n    in:\n      c: { default: True}\n      file: junction_annotation/xls\n      outFileName:\n        valueFrom: ${ return inputs.file.basename + \".gz\";}\n    out: [output]\n    doc: |\n      Gzip XLS file\n  junction_saturation:\n    run: ../../tools/rseqc/rseqc-junction_saturation.cwl\n    in:\n      i: bam\n      q: q\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}\n    out: [output]\n    doc: |\n      Junction saturation\n  read_distribution:\n    run: ../../tools/rseqc/rseqc-read_distribution.cwl\n    in:\n      i: bam\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.read_distribution.txt\";}\n    out: [output]\n    doc: |\n      Read distribution\n  read_quality:\n    run: ../../tools/rseqc/rseqc-read_quality.cwl\n    in:\n      ramMax: ramMaxRSeQC\n      i: bam\n      q: q\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}\n    out: [output]\n    doc: |\n      Read quality\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'bam': {'type': 'File', 'secondaryFiles': '.bai'}, 'genome_bed': 'File', 'genome_gtf': 'File', 'q': 'int', 'p': 'boolean?', 'ramMaxRSeQC': 'int?'}",
    "cwl_outputs": "{'gzip_transcripts_out_out': {'outputSource': 'gzip_transcripts_out/output', 'type': 'File'}, 'gzip_transcripts_ent_out': {'outputSource': 'gzip_transcripts_ent/output', 'type': 'File'}, 'gzip_gene_uni_out': {'outputSource': 'gzip_gene_uni/output', 'type': 'File'}, 'gzip_gene_out_out': {'outputSource': 'gzip_gene_out/output', 'type': 'File'}, 'gzip_gene_ent_out': {'outputSource': 'gzip_gene_ent/output', 'type': 'File'}, 'bam_stat_out': {'outputSource': 'bam_stat/output', 'type': 'File'}, 'experiment_out': {'outputSource': 'infer_experiment/output', 'type': 'File'}, 'gzip_junction_annotation_bed_out': {'outputSource': 'gzip_junction_annotation_bed/output', 'type': 'File'}, 'gzip_junction_annotation_xls_out': {'outputSource': 'gzip_junction_annotation_xls/output', 'type': 'File'}, 'junction_annotation_pdf_out': {'outputSource': 'junction_annotation/pdf', 'type': 'File[]'}, 'junction_saturation_out': {'outputSource': 'junction_saturation/output', 'type': 'File'}, 'read_distribution_out': {'outputSource': 'read_distribution/output', 'type': 'File'}, 'read_quality_out': {'outputSource': 'read_quality/output', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow retrieve SRA fastqc data and execute QC, alignment and quantification from TPMCalculator",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "rnaseq-alignment-quantification",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "quantification": {
        "run": "../../tools/tpmcalculator/tpmcalculator.cwl",
        "label": "tpmcalculator",
        "in": {
          "b": "bam",
          "g": "genome_gtf",
          "q": "q",
          "p": "p",
          "e": {
            "default": true
          },
          "a": {
            "default": true
          }
        },
        "out": [
          "gene_ent",
          "gene_out",
          "gene_uni",
          "transcripts_ent",
          "transcripts_out"
        ]
      },
      "gzip_gene_ent": {
        "in": {
          "file": "quantification/gene_ent"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_gene_out": {
        "in": {
          "file": "quantification/gene_out"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_gene_uni": {
        "in": {
          "file": "quantification/gene_uni"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_transcripts_ent": {
        "in": {
          "file": "quantification/transcripts_ent"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_transcripts_out": {
        "in": {
          "file": "quantification/transcripts_out"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "bam_stat": {
        "run": "../../tools/rseqc/rseqc-bam_stat.cwl",
        "in": {
          "i": "bam",
          "q": "q",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.bam_stat.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "BAM stats\n"
      },
      "infer_experiment": {
        "run": "../../tools/rseqc/rseqc-infer_experiment.cwl",
        "in": {
          "i": "bam",
          "q": "q",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.infer_experiment.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Infering Experiment\n"
      },
      "junction_annotation": {
        "run": "../../tools/rseqc/rseqc-junction_annotation.cwl",
        "in": {
          "i": "bam",
          "q": "q",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}"
          }
        },
        "out": [
          "bed",
          "xls",
          "pdf"
        ],
        "doc": "Junction annotation\n"
      },
      "gzip_junction_annotation_bed": {
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "file": "junction_annotation/bed"
        },
        "out": [
          "output"
        ],
        "doc": "Gzip Bed file\n"
      },
      "gzip_junction_annotation_xls": {
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "c": {
            "default": true
          },
          "file": "junction_annotation/xls",
          "outFileName": {
            "valueFrom": "${ return inputs.file.basename + \".gz\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Gzip XLS file\n"
      },
      "junction_saturation": {
        "run": "../../tools/rseqc/rseqc-junction_saturation.cwl",
        "in": {
          "i": "bam",
          "q": "q",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Junction saturation\n"
      },
      "read_distribution": {
        "run": "../../tools/rseqc/rseqc-read_distribution.cwl",
        "in": {
          "i": "bam",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.read_distribution.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Read distribution\n"
      },
      "read_quality": {
        "run": "../../tools/rseqc/rseqc-read_quality.cwl",
        "in": {
          "ramMax": "ramMaxRSeQC",
          "i": "bam",
          "q": "q",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Read quality\n"
      }
    }
  },
  {
    "path": "workflows/RNA-Seq/rnaseq-tpmcalculator-noTDF.cwl",
    "sha": "9c173da3038d61c428436b24a196c46579eab621",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/RNA-Seq/rnaseq-tpmcalculator-noTDF.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\ndoc: >-\n  This workflow runs the RNA-Seq Quantification workflow calculating TPM values\n  from TPMCalculator\nlabel: RNA-Seq Quantification workflow or single-end samples\n$namespaces:\n  s: 'http://schema.org/'\n  sbg: 'https://www.sevenbridges.com/'\ninputs:\n  - id: sorted_bam\n    type: File\n  - id: gtf\n    type: File\n  - id: q\n    type: int\n  - id: r\n    type: File\n  - id: p\n    type: boolean?\noutputs:\n  - id: bam_stat_out\n    outputSource:\n      - qc_rseqc/bam_stat_out\n    type: File\n  - id: experiment_out\n    outputSource:\n      - qc_rseqc/experiment_out\n    type: File\n  - id: gzip_gene_ent_out\n    outputSource:\n      - gzip_gene_ent/output\n    type: File\n  - id: gzip_gene_out_out\n    outputSource:\n      - gzip_gene_out/output\n    type: File\n  - id: gzip_gene_uni_out\n    outputSource:\n      - gzip_gene_uni/output\n    type: File\n  - id: gzip_junction_annotation_bed_out\n    outputSource:\n      - qc_rseqc/gzip_junction_annotation_bed_out\n    type: File\n  - id: gzip_junction_annotation_xls_out\n    outputSource:\n      - qc_rseqc/gzip_junction_annotation_xls_out\n    type: File\n  - id: gzip_transcripts_ent_out\n    outputSource:\n      - gzip_transcripts_ent/output\n    type: File\n  - id: gzip_transcripts_out_out\n    outputSource:\n      - gzip_transcripts_out/output\n    type: File\n  - id: junction_annotation_pdf_out\n    outputSource:\n      - qc_rseqc/junction_annotation_pdf_out\n    type: 'File[]'\n  - id: junction_saturation_out\n    outputSource:\n      - qc_rseqc/junction_saturation_out\n    type: File\n  - id: read_distribution_out\n    outputSource:\n      - qc_rseqc/read_distribution_out\n    type: File\n  - id: read_quality_out\n    outputSource:\n      - qc_rseqc/read_quality_out\n    type: 'File[]'\nsteps:\n  - id: gzip_gene_ent\n    in:\n      - id: file\n        source: quantification/gene_ent\n    out:\n      - id: output\n    run: ../../tools/basic/gzip.cwl\n    label: gzip\n    doc: |\n      Gzip TPMCalculator gene.ent file\n  - id: gzip_gene_out\n    in:\n      - id: file\n        source: quantification/gene_out\n    out:\n      - id: output\n    run: ../../tools/basic/gzip.cwl\n    label: gzip\n    doc: |\n      Gzip TPMCalculator gene.out file\n  - id: gzip_gene_uni\n    in:\n      - id: file\n        source: quantification/gene_uni\n    out:\n      - id: output\n    run: ../../tools/basic/gzip.cwl\n    label: gzip\n    doc: |\n      Gzip TPMCalculator gene.uni file\n  - id: gzip_transcripts_ent\n    in:\n      - id: file\n        source: quantification/transcripts_ent\n    out:\n      - id: output\n    run: ../../tools/basic/gzip.cwl\n    label: gzip\n    doc: |\n      Gzip TPMCalculator transcripts.ent file\n  - id: gzip_transcripts_out\n    in:\n      - id: file\n        source: quantification/transcripts_out\n    out:\n      - id: output\n    run: ../../tools/basic/gzip.cwl\n    label: gzip\n    doc: |\n      Gzip TPMCalculator transcripts.out file\n  - id: qc_rseqc\n    in:\n      - id: i\n        source: sorted_bam\n      - id: q\n        source: q\n      - id: r\n        source: r\n    out:\n      - id: bam_stat_out\n      - id: experiment_out\n      - id: gzip_junction_annotation_bed_out\n      - id: gzip_junction_annotation_xls_out\n      - id: junction_annotation_pdf_out\n      - id: junction_saturation_out\n      - id: read_distribution_out\n      - id: read_quality_out\n    run: ../rseqc/rseqc-bam-qc-SE.cwl\n    label: RSeQC workflow or single-end samples\n    doc: |\n      Execute QC on the BAM files\n  - id: quantification\n    in:\n      - id: b\n        source: sorted_bam\n      - id: g\n        source: gtf\n      - id: q\n        source: q\n      - id: p\n        source: p\n    out:\n      - id: gene_ent\n      - id: gene_out\n      - id: gene_uni\n      - id: transcripts_ent\n      - id: transcripts_out\n    run: ../../tools/tpmcalculator/tpmcalculator.cwl\n    label: TPMCalculator\n    doc: |\n      Calculate TPM values for genes and transcripts\nrequirements:\n  - class: SubworkflowFeatureRequirement\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n$schemas:\n  - 'https://schema.org/version/latest/schemaorg-current-http.rdf'\n's:author':\n  - class: 's:Person'\n    's:email': 'mailto:r78v10a07@gmail.com'\n    's:identifier': 'https://orcid.org/0000-0002-4108-5982'\n    's:name': Roberto Vera Alvarez\n's:license': 'https://spdx.org/licenses/OPL-1.0'\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'sorted_bam', 'type': 'File'}, {'id': 'gtf', 'type': 'File'}, {'id': 'q', 'type': 'int'}, {'id': 'r', 'type': 'File'}, {'id': 'p', 'type': 'boolean?'}]",
    "cwl_outputs": "[{'id': 'bam_stat_out', 'outputSource': ['qc_rseqc/bam_stat_out'], 'type': 'File'}, {'id': 'experiment_out', 'outputSource': ['qc_rseqc/experiment_out'], 'type': 'File'}, {'id': 'gzip_gene_ent_out', 'outputSource': ['gzip_gene_ent/output'], 'type': 'File'}, {'id': 'gzip_gene_out_out', 'outputSource': ['gzip_gene_out/output'], 'type': 'File'}, {'id': 'gzip_gene_uni_out', 'outputSource': ['gzip_gene_uni/output'], 'type': 'File'}, {'id': 'gzip_junction_annotation_bed_out', 'outputSource': ['qc_rseqc/gzip_junction_annotation_bed_out'], 'type': 'File'}, {'id': 'gzip_junction_annotation_xls_out', 'outputSource': ['qc_rseqc/gzip_junction_annotation_xls_out'], 'type': 'File'}, {'id': 'gzip_transcripts_ent_out', 'outputSource': ['gzip_transcripts_ent/output'], 'type': 'File'}, {'id': 'gzip_transcripts_out_out', 'outputSource': ['gzip_transcripts_out/output'], 'type': 'File'}, {'id': 'junction_annotation_pdf_out', 'outputSource': ['qc_rseqc/junction_annotation_pdf_out'], 'type': 'File[]'}, {'id': 'junction_saturation_out', 'outputSource': ['qc_rseqc/junction_saturation_out'], 'type': 'File'}, {'id': 'read_distribution_out', 'outputSource': ['qc_rseqc/read_distribution_out'], 'type': 'File'}, {'id': 'read_quality_out', 'outputSource': ['qc_rseqc/read_quality_out'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow runs the RNA-Seq Quantification workflow calculating TPM values from TPMCalculator",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RNA-Seq Quantification workflow or single-end samples",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "workflows/RNA-Seq/rnaseq-tpmcalculator.cwl",
    "sha": "0615adcb873dc2df746979d8bba8d46948da47a3",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/RNA-Seq/rnaseq-tpmcalculator.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\ndoc: >-\n  This workflow runs the RNA-Seq Quantification workflow calculating TPM values\n  from TPMCalculator\nlabel: RNA-Seq Quantification workflow or single-end samples\n$namespaces:\n  s: 'http://schema.org/'\n  sbg: 'https://www.sevenbridges.com/'\ninputs:\n  - id: sorted_bam\n    type: File\n  - id: genome_name\n    type: string\n  - id: gtf\n    type: File\n  - id: q\n    type: int\n  - id: r\n    type: File\n  - id: p\n    type: boolean?\noutputs:\n  - id: bam_stat_out\n    outputSource:\n      - qc_rseqc/bam_stat_out\n    type: File\n  - id: bam_to_tdf_out\n    outputSource:\n      - bam_to_tdf/out_tdf\n    type: File\n  - id: experiment_out\n    outputSource:\n      - qc_rseqc/experiment_out\n    type: File\n  - id: gzip_gene_ent_out\n    outputSource:\n      - gzip_gene_ent/output\n    type: File\n  - id: gzip_gene_out_out\n    outputSource:\n      - gzip_gene_out/output\n    type: File\n  - id: gzip_gene_uni_out\n    outputSource:\n      - gzip_gene_uni/output\n    type: File\n  - id: gzip_junction_annotation_bed_out\n    outputSource:\n      - qc_rseqc/gzip_junction_annotation_bed_out\n    type: File\n  - id: gzip_junction_annotation_xls_out\n    outputSource:\n      - qc_rseqc/gzip_junction_annotation_xls_out\n    type: File\n  - id: gzip_transcripts_ent_out\n    outputSource:\n      - gzip_transcripts_ent/output\n    type: File\n  - id: gzip_transcripts_out_out\n    outputSource:\n      - gzip_transcripts_out/output\n    type: File\n  - id: junction_annotation_pdf_out\n    outputSource:\n      - qc_rseqc/junction_annotation_pdf_out\n    type: 'File[]'\n  - id: junction_saturation_out\n    outputSource:\n      - qc_rseqc/junction_saturation_out\n    type: File\n  - id: read_distribution_out\n    outputSource:\n      - qc_rseqc/read_distribution_out\n    type: File\n  - id: read_quality_out\n    outputSource:\n      - qc_rseqc/read_quality_out\n    type: 'File[]'\nsteps:\n  - id: bam_to_tdf\n    in:\n      - id: g\n        source: genome_name\n      - id: i\n        source: sorted_bam\n      - id: o\n        valueFrom: '${ return inputs.i.nameroot + \".tdf\";}'\n    out:\n      - id: out_tdf\n    run: ../../tools/igvtools/igvtools-count.cwl\n    label: igvtools-count\n    doc: Convert BAM to TDF\n  - id: gzip_gene_ent\n    in:\n      - id: file\n        source: quantification/gene_ent\n    out:\n      - id: output\n    run: ../../tools/basic/gzip.cwl\n    label: gzip\n    doc: |\n      Gzip TPMCalculator gene.ent file\n  - id: gzip_gene_out\n    in:\n      - id: file\n        source: quantification/gene_out\n    out:\n      - id: output\n    run: ../../tools/basic/gzip.cwl\n    label: gzip\n    doc: |\n      Gzip TPMCalculator gene.out file\n  - id: gzip_gene_uni\n    in:\n      - id: file\n        source: quantification/gene_uni\n    out:\n      - id: output\n    run: ../../tools/basic/gzip.cwl\n    label: gzip\n    doc: |\n      Gzip TPMCalculator gene.uni file\n  - id: gzip_transcripts_ent\n    in:\n      - id: file\n        source: quantification/transcripts_ent\n    out:\n      - id: output\n    run: ../../tools/basic/gzip.cwl\n    label: gzip\n    doc: |\n      Gzip TPMCalculator transcripts.ent file\n  - id: gzip_transcripts_out\n    in:\n      - id: file\n        source: quantification/transcripts_out\n    out:\n      - id: output\n    run: ../../tools/basic/gzip.cwl\n    label: gzip\n    doc: |\n      Gzip TPMCalculator transcripts.out file\n  - id: qc_rseqc\n    in:\n      - id: i\n        source: sorted_bam\n      - id: q\n        source: q\n      - id: r\n        source: r\n    out:\n      - id: bam_stat_out\n      - id: experiment_out\n      - id: gzip_junction_annotation_bed_out\n      - id: gzip_junction_annotation_xls_out\n      - id: junction_annotation_pdf_out\n      - id: junction_saturation_out\n      - id: read_distribution_out\n      - id: read_quality_out\n    run: ../rseqc/rseqc-bam-qc-SE.cwl\n    label: RSeQC workflow or single-end samples\n    doc: |\n      Execute QC on the BAM files\n  - id: quantification\n    in:\n      - id: b\n        source: sorted_bam\n      - id: g\n        source: gtf\n      - id: q\n        source: q\n      - id: p\n        source: p\n    out:\n      - id: gene_ent\n      - id: gene_out\n      - id: gene_uni\n      - id: transcripts_ent\n      - id: transcripts_out\n    run: ../../tools/tpmcalculator/tpmcalculator.cwl\n    label: TPMCalculator\n    doc: |\n      Calculate TPM values for genes and transcripts\nrequirements:\n  - class: SubworkflowFeatureRequirement\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n$schemas:\n  - 'https://schema.org/version/latest/schemaorg-current-http.rdf'\n's:author':\n  - class: 's:Person'\n    's:email': 'mailto:r78v10a07@gmail.com'\n    's:identifier': 'https://orcid.org/0000-0002-4108-5982'\n    's:name': Roberto Vera Alvarez\n's:license': 'https://spdx.org/licenses/OPL-1.0'\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'sorted_bam', 'type': 'File'}, {'id': 'genome_name', 'type': 'string'}, {'id': 'gtf', 'type': 'File'}, {'id': 'q', 'type': 'int'}, {'id': 'r', 'type': 'File'}, {'id': 'p', 'type': 'boolean?'}]",
    "cwl_outputs": "[{'id': 'bam_stat_out', 'outputSource': ['qc_rseqc/bam_stat_out'], 'type': 'File'}, {'id': 'bam_to_tdf_out', 'outputSource': ['bam_to_tdf/out_tdf'], 'type': 'File'}, {'id': 'experiment_out', 'outputSource': ['qc_rseqc/experiment_out'], 'type': 'File'}, {'id': 'gzip_gene_ent_out', 'outputSource': ['gzip_gene_ent/output'], 'type': 'File'}, {'id': 'gzip_gene_out_out', 'outputSource': ['gzip_gene_out/output'], 'type': 'File'}, {'id': 'gzip_gene_uni_out', 'outputSource': ['gzip_gene_uni/output'], 'type': 'File'}, {'id': 'gzip_junction_annotation_bed_out', 'outputSource': ['qc_rseqc/gzip_junction_annotation_bed_out'], 'type': 'File'}, {'id': 'gzip_junction_annotation_xls_out', 'outputSource': ['qc_rseqc/gzip_junction_annotation_xls_out'], 'type': 'File'}, {'id': 'gzip_transcripts_ent_out', 'outputSource': ['gzip_transcripts_ent/output'], 'type': 'File'}, {'id': 'gzip_transcripts_out_out', 'outputSource': ['gzip_transcripts_out/output'], 'type': 'File'}, {'id': 'junction_annotation_pdf_out', 'outputSource': ['qc_rseqc/junction_annotation_pdf_out'], 'type': 'File[]'}, {'id': 'junction_saturation_out', 'outputSource': ['qc_rseqc/junction_saturation_out'], 'type': 'File'}, {'id': 'read_distribution_out', 'outputSource': ['qc_rseqc/read_distribution_out'], 'type': 'File'}, {'id': 'read_quality_out', 'outputSource': ['qc_rseqc/read_quality_out'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow runs the RNA-Seq Quantification workflow calculating TPM values from TPMCalculator",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RNA-Seq Quantification workflow or single-end samples",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "workflows/RNA-Seq/rnaseq-trimming-alignment.cwl",
    "sha": "f45cbd696f2dc1bf02c3fa4a55eb3b87c955c29a",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/RNA-Seq/rnaseq-trimming-alignment.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: >-\n  This workflow retrieve SRA fastqc data and execute QC, alignment and\n  quantification from TPMCalculator\nlabel: rnaseq-alignment-quantification\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  reads:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  genomeDir: Directory\n  threads: int\n  genome_bed: File\n  genome_gtf: File\n  q: int\n  p: boolean?\n  ramMaxRSeQC: int?\n  ramMaxSTAR: float?\n    \noutputs:\n  indexed_bam:\n    outputSource: alignment/indexed_bam\n    type: File[]\n  sorted_bam:\n    outputSource: alignment/sorted_bam\n    type: File[]\n  star_stats:\n    outputSource: alignment/mappingstats\n    type: File[]?\n  stats_bam:\n    outputSource: alignment/stats_bam\n    type: File[]\n  readspergene:\n    outputSource: alignment/readspergene\n    type: File[]?\n  gzip_transcripts_out_out:\n    outputSource: gzip_transcripts_out/output\n    type: File[]\n  gzip_transcripts_ent_out:\n    outputSource: gzip_transcripts_ent/output\n    type: File[]\n  gzip_gene_uni_out:\n    outputSource: gzip_gene_uni/output\n    type: File[]\n  gzip_gene_out_out:\n    outputSource: gzip_gene_out/output\n    type: File[]\n  gzip_gene_ent_out:\n    outputSource: gzip_gene_ent/output\n    type: File[]\n  bam_stat_out:\n    outputSource: bam_stat/output\n    type: File[]\n  experiment_out:\n    outputSource: infer_experiment/output\n    type: File[]\n  gzip_junction_annotation_bed_out:\n    outputSource: gzip_junction_annotation_bed/output\n    type: File[]\n  gzip_junction_annotation_xls_out:\n    outputSource: gzip_junction_annotation_xls/output\n    type: File[]\n  junction_annotation_pdf_out:\n    outputSource: junction_annotation/pdf\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  junction_saturation_out:\n    outputSource: junction_saturation/output\n    type: File[]\n  read_distribution_out:\n    outputSource: read_distribution/output\n    type: File[]\n  read_quality_out:\n    outputSource: read_quality/output\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n\n\nsteps:\n  alignment:\n    run: ../Alignments/star-alignment.cwl\n    label: STAR-alingment\n    scatter: reads\n    in:\n      reads: reads\n      genomeDir: genomeDir\n      ramMaxSTAR: ramMaxSTAR\n      threads: threads\n    out: [indexed_bam, sorted_bam, star_stats, stats_bam, readspergene, mappingstats]\n  quantification:\n    run: ../../tools/tpmcalculator/tpmcalculator.cwl\n    label: tpmcalculator\n    scatter: b\n    in:\n      b: alignment/sorted_bam\n      g: genome_gtf\n      q: q\n      p: p\n      e: { default: true }\n      a: { default: true }\n    out: [gene_ent, gene_out, gene_uni, transcripts_ent, transcripts_out]\n  gzip_gene_ent:\n    scatter: file\n    in:\n      file: quantification/gene_ent\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_gene_out:\n    scatter: file\n    in:\n      file: quantification/gene_out\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_gene_uni:\n    scatter: file\n    in:\n      file: quantification/gene_uni\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_transcripts_ent:\n    scatter: file\n    in:\n      file: quantification/transcripts_ent\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  gzip_transcripts_out:\n    scatter: file\n    in:\n      file: quantification/transcripts_out\n    out: [output]\n    run: ../../tools/basic/gzip.cwl\n  bam_stat:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-bam_stat.cwl\n    in:\n      i: alignment/sorted_bam\n      q: q\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.bam_stat.txt\";}\n    out: [output]\n    doc: |\n      BAM stats\n  infer_experiment:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-infer_experiment.cwl\n    in:\n      i: alignment/sorted_bam\n      q: q\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.infer_experiment.txt\";}\n    out: [output]\n    doc: |\n      Infering Experiment\n  junction_annotation:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-junction_annotation.cwl\n    in:\n      i: alignment/sorted_bam\n      q: q\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}\n    out: [bed, xls, pdf]\n    doc: |\n      Junction annotation\n  gzip_junction_annotation_bed:\n    scatter: file\n    run: ../../tools/basic/gzip.cwl\n    in:\n      file: junction_annotation/bed\n    out: [output]\n    doc: |\n      Gzip Bed file\n  gzip_junction_annotation_xls:\n    scatter: file\n    run: ../../tools/basic/gzip.cwl\n    in:\n      c: { default: True}\n      file: junction_annotation/xls\n      outFileName:\n        valueFrom: ${ return inputs.file.basename + \".gz\";}\n    out: [output]\n    doc: |\n      Gzip XLS file\n  junction_saturation:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-junction_saturation.cwl\n    in:\n      i: alignment/sorted_bam\n      q: q\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}\n    out: [output]\n    doc: |\n      Junction saturation\n  read_distribution:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-read_distribution.cwl\n    in:\n      i: alignment/sorted_bam\n      r: genome_bed\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.read_distribution.txt\";}\n    out: [output]\n    doc: |\n      Read distribution\n  read_quality:\n    scatter: i\n    run: ../../tools/rseqc/rseqc-read_quality.cwl\n    in:\n      i: alignment/sorted_bam\n      q: q\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}\n    out: [output]\n    doc: |\n      Read quality\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'reads': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'genomeDir': 'Directory', 'threads': 'int', 'genome_bed': 'File', 'genome_gtf': 'File', 'q': 'int', 'p': 'boolean?', 'ramMaxRSeQC': 'int?', 'ramMaxSTAR': 'float?'}",
    "cwl_outputs": "{'indexed_bam': {'outputSource': 'alignment/indexed_bam', 'type': 'File[]'}, 'sorted_bam': {'outputSource': 'alignment/sorted_bam', 'type': 'File[]'}, 'star_stats': {'outputSource': 'alignment/mappingstats', 'type': 'File[]?'}, 'stats_bam': {'outputSource': 'alignment/stats_bam', 'type': 'File[]'}, 'readspergene': {'outputSource': 'alignment/readspergene', 'type': 'File[]?'}, 'gzip_transcripts_out_out': {'outputSource': 'gzip_transcripts_out/output', 'type': 'File[]'}, 'gzip_transcripts_ent_out': {'outputSource': 'gzip_transcripts_ent/output', 'type': 'File[]'}, 'gzip_gene_uni_out': {'outputSource': 'gzip_gene_uni/output', 'type': 'File[]'}, 'gzip_gene_out_out': {'outputSource': 'gzip_gene_out/output', 'type': 'File[]'}, 'gzip_gene_ent_out': {'outputSource': 'gzip_gene_ent/output', 'type': 'File[]'}, 'bam_stat_out': {'outputSource': 'bam_stat/output', 'type': 'File[]'}, 'experiment_out': {'outputSource': 'infer_experiment/output', 'type': 'File[]'}, 'gzip_junction_annotation_bed_out': {'outputSource': 'gzip_junction_annotation_bed/output', 'type': 'File[]'}, 'gzip_junction_annotation_xls_out': {'outputSource': 'gzip_junction_annotation_xls/output', 'type': 'File[]'}, 'junction_annotation_pdf_out': {'outputSource': 'junction_annotation/pdf', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'junction_saturation_out': {'outputSource': 'junction_saturation/output', 'type': 'File[]'}, 'read_distribution_out': {'outputSource': 'read_distribution/output', 'type': 'File[]'}, 'read_quality_out': {'outputSource': 'read_quality/output', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow retrieve SRA fastqc data and execute QC, alignment and quantification from TPMCalculator",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "rnaseq-alignment-quantification",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "alignment": {
        "run": "../Alignments/star-alignment.cwl",
        "label": "STAR-alingment",
        "scatter": "reads",
        "in": {
          "reads": "reads",
          "genomeDir": "genomeDir",
          "ramMaxSTAR": "ramMaxSTAR",
          "threads": "threads"
        },
        "out": [
          "indexed_bam",
          "sorted_bam",
          "star_stats",
          "stats_bam",
          "readspergene",
          "mappingstats"
        ]
      },
      "quantification": {
        "run": "../../tools/tpmcalculator/tpmcalculator.cwl",
        "label": "tpmcalculator",
        "scatter": "b",
        "in": {
          "b": "alignment/sorted_bam",
          "g": "genome_gtf",
          "q": "q",
          "p": "p",
          "e": {
            "default": true
          },
          "a": {
            "default": true
          }
        },
        "out": [
          "gene_ent",
          "gene_out",
          "gene_uni",
          "transcripts_ent",
          "transcripts_out"
        ]
      },
      "gzip_gene_ent": {
        "scatter": "file",
        "in": {
          "file": "quantification/gene_ent"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_gene_out": {
        "scatter": "file",
        "in": {
          "file": "quantification/gene_out"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_gene_uni": {
        "scatter": "file",
        "in": {
          "file": "quantification/gene_uni"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_transcripts_ent": {
        "scatter": "file",
        "in": {
          "file": "quantification/transcripts_ent"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "gzip_transcripts_out": {
        "scatter": "file",
        "in": {
          "file": "quantification/transcripts_out"
        },
        "out": [
          "output"
        ],
        "run": "../../tools/basic/gzip.cwl"
      },
      "bam_stat": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-bam_stat.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "q": "q",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.bam_stat.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "BAM stats\n"
      },
      "infer_experiment": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-infer_experiment.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "q": "q",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.infer_experiment.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Infering Experiment\n"
      },
      "junction_annotation": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-junction_annotation.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "q": "q",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}"
          }
        },
        "out": [
          "bed",
          "xls",
          "pdf"
        ],
        "doc": "Junction annotation\n"
      },
      "gzip_junction_annotation_bed": {
        "scatter": "file",
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "file": "junction_annotation/bed"
        },
        "out": [
          "output"
        ],
        "doc": "Gzip Bed file\n"
      },
      "gzip_junction_annotation_xls": {
        "scatter": "file",
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "c": {
            "default": true
          },
          "file": "junction_annotation/xls",
          "outFileName": {
            "valueFrom": "${ return inputs.file.basename + \".gz\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Gzip XLS file\n"
      },
      "junction_saturation": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-junction_saturation.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "q": "q",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Junction saturation\n"
      },
      "read_distribution": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-read_distribution.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "r": "genome_bed",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.read_distribution.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Read distribution\n"
      },
      "read_quality": {
        "scatter": "i",
        "run": "../../tools/rseqc/rseqc-read_quality.cwl",
        "in": {
          "i": "alignment/sorted_bam",
          "q": "q",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Read quality\n"
      }
    }
  },
  {
    "path": "workflows/RSeQC/rseqc-bam-qc-SE.cwl",
    "sha": "639e2656edb26bab6505eb2a100d11d478964e6f",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/RSeQC/rseqc-bam-qc-SE.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n- class: InlineJavascriptRequirement\n- class: StepInputExpressionRequirement\n\nlabel: \"RSeQC workflow or single-end samples\"\ndoc: \"This workflow runs the RSeQC quality control workflow\"\n\ninputs:\n  i: File\n  q: int\n  r: File\n\noutputs:\n  bam_stat_out:\n    outputSource: bam_stat/output\n    type: File\n  experiment_out:\n    outputSource: infer_experiment/output\n    type: File\n  gzip_junction_annotation_bed_out:\n    outputSource: gzip_junction_annotation_bed/output\n    type: File\n  gzip_junction_annotation_xls_out:\n    outputSource: gzip_junction_annotation_xls/output\n    type: File\n  junction_annotation_pdf_out:\n    outputSource: junction_annotation/pdf\n    type: File[]\n  junction_saturation_out:\n    outputSource: junction_saturation/output\n    type: File\n  read_distribution_out:\n    outputSource: read_distribution/output\n    type: File\n  read_quality_out:\n    outputSource: read_quality/output\n    type: File[]\n\nsteps:\n  bam_stat:\n    run: ../../tools/rseqc/rseqc-bam_stat.cwl\n    in:\n      i: i\n      q: q\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.bam_stat.txt\";}\n    out: [output]\n    doc: |\n      BAM stats\n  infer_experiment:\n    run: ../../tools/rseqc/rseqc-infer_experiment.cwl\n    in:\n      i: i\n      q: q\n      r: r\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.infer_experiment.txt\";}\n    out: [output]\n    doc: |\n      Infering Experiment\n  junction_annotation:\n    run: ../../tools/rseqc/rseqc-junction_annotation.cwl\n    in:\n      i: i\n      q: q\n      r: r\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}\n    out: [bed, xls, pdf]\n    doc: |\n      Junction annotation\n  gzip_junction_annotation_bed:\n    run: ../../tools/basic/gzip.cwl\n    in:\n      file: junction_annotation/bed\n    out: [output]\n    doc: |\n      Gzip Bed file\n  gzip_junction_annotation_xls:\n    run: ../../tools/basic/gzip.cwl\n    in:\n      c: { default: True}\n      file: junction_annotation/xls\n      outFileName:\n        valueFrom: ${ return inputs.file.basename + \".gz\";}\n    out: [output]\n    doc: |\n      Gzip XLS file\n  junction_saturation:\n    run: ../../tools/rseqc/rseqc-junction_saturation.cwl\n    in:\n      i: i\n      q: q\n      r: r\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}\n    out: [output]\n    doc: |\n      Junction saturation\n  read_distribution:\n    run: ../../tools/rseqc/rseqc-read_distribution.cwl\n    in:\n      i: i\n      r: r\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.read_distribution.txt\";}\n    out: [output]\n    doc: |\n      Read distribution\n  read_quality:\n    run: ../../tools/rseqc/rseqc-read_quality.cwl\n    in:\n      i: i\n      q: q\n      o:\n        valueFrom: ${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}\n    out: [output]\n    doc: |\n      Read quality\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'i': 'File', 'q': 'int', 'r': 'File'}",
    "cwl_outputs": "{'bam_stat_out': {'outputSource': 'bam_stat/output', 'type': 'File'}, 'experiment_out': {'outputSource': 'infer_experiment/output', 'type': 'File'}, 'gzip_junction_annotation_bed_out': {'outputSource': 'gzip_junction_annotation_bed/output', 'type': 'File'}, 'gzip_junction_annotation_xls_out': {'outputSource': 'gzip_junction_annotation_xls/output', 'type': 'File'}, 'junction_annotation_pdf_out': {'outputSource': 'junction_annotation/pdf', 'type': 'File[]'}, 'junction_saturation_out': {'outputSource': 'junction_saturation/output', 'type': 'File'}, 'read_distribution_out': {'outputSource': 'read_distribution/output', 'type': 'File'}, 'read_quality_out': {'outputSource': 'read_quality/output', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This workflow runs the RSeQC quality control workflow",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RSeQC workflow or single-end samples",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "bam_stat": {
        "run": "../../tools/rseqc/rseqc-bam_stat.cwl",
        "in": {
          "i": "i",
          "q": "q",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.bam_stat.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "BAM stats\n"
      },
      "infer_experiment": {
        "run": "../../tools/rseqc/rseqc-infer_experiment.cwl",
        "in": {
          "i": "i",
          "q": "q",
          "r": "r",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.infer_experiment.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Infering Experiment\n"
      },
      "junction_annotation": {
        "run": "../../tools/rseqc/rseqc-junction_annotation.cwl",
        "in": {
          "i": "i",
          "q": "q",
          "r": "r",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}"
          }
        },
        "out": [
          "bed",
          "xls",
          "pdf"
        ],
        "doc": "Junction annotation\n"
      },
      "gzip_junction_annotation_bed": {
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "file": "junction_annotation/bed"
        },
        "out": [
          "output"
        ],
        "doc": "Gzip Bed file\n"
      },
      "gzip_junction_annotation_xls": {
        "run": "../../tools/basic/gzip.cwl",
        "in": {
          "c": {
            "default": true
          },
          "file": "junction_annotation/xls",
          "outFileName": {
            "valueFrom": "${ return inputs.file.basename + \".gz\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Gzip XLS file\n"
      },
      "junction_saturation": {
        "run": "../../tools/rseqc/rseqc-junction_saturation.cwl",
        "in": {
          "i": "i",
          "q": "q",
          "r": "r",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Junction saturation\n"
      },
      "read_distribution": {
        "run": "../../tools/rseqc/rseqc-read_distribution.cwl",
        "in": {
          "i": "i",
          "r": "r",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc.read_distribution.txt\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Read distribution\n"
      },
      "read_quality": {
        "run": "../../tools/rseqc/rseqc-read_quality.cwl",
        "in": {
          "i": "i",
          "q": "q",
          "o": {
            "valueFrom": "${ return inputs.i.nameroot.replace('.bam', '') + \"_rseqc\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Read quality\n"
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Transcriptome/trinity-denovo-assembly-quantification-pe.cwl",
    "sha": "5e1d55ac110d9a4d6a1a5b78d3604459ea9ec1db",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Transcriptome/trinity-denovo-assembly-quantification-pe.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n  - class: SubworkflowFeatureRequirement\n  - class: ScatterFeatureRequirement\n\nhints:\n  cwltool:LoadListingRequirement:\n    loadListing: no_listing\n\nlabel: trinity_denovo_assembly_quantification_pe\ndoc: \"This workflow use Trinity for de novo transcriptome assembly for paired-end reads and quantification\"\n\ninputs:\n  max_memory: string\n  threads: int\n  output: string\n  seqType: string\n  left: File[]\n  right: File[]\n\noutputs:\n  trinity_output:\n    outputSource: trinity_assembly/output\n    type: Directory\n  quantifycation_kallisto_output:\n    outputSource: quantifycation_kallisto/output\n    type: Directory[]\n  quantifycation_salmon_output:\n    outputSource: quantifycation_salmon/output\n    type: Directory[]\n\nsteps:\n  trinity_assembly:\n    run: ../../tools/trinity/trinity.cwl\n    label: Trinity de Novo assembly\n    in:\n      max_memory: max_memory\n      CPU: threads\n      output: output\n      seqType: seqType\n      left: left\n      right: right\n    out: [ output ]\n  extracting_transcript_file:\n    run: ../../tools/basic/extract-file-from-dir.cwl\n    label: Extracting transcript file\n    in:\n      d: trinity_assembly/output\n      filename: {default: \"Trinity.fasta\"}\n      o: {default: \"Trinity.fasta\"}\n    out: [output]\n  quantifycation_kallisto:\n    run: ../../tools/trinity/align_and_estimate_abundance.cwl\n    label: Quantification\n    scatter: [ left, right ]\n    scatterMethod: dotproduct\n    in:\n      prep_reference: {default: True}\n      seqType: seqType\n      transcripts: extracting_transcript_file/output\n      thread_count: threads\n      est_method: {default: \"kallisto\"}\n      trinity_mode: {default: True}\n      left: left\n      right: right\n      output_dir:\n        valueFrom: '${ return inputs.left.nameroot.replace(\".fastq\",\"_kallisto\");}'\n    out: [ output ]\n  quantifycation_salmon:\n    run: ../../tools/trinity/align_and_estimate_abundance.cwl\n    label: Quantification\n    scatter: [ left, right ]\n    scatterMethod: dotproduct\n    in:\n      prep_reference: { default: True }\n      seqType: seqType\n      transcripts: extracting_transcript_file/output\n      thread_count: threads\n      est_method: { default: \"salmon\" }\n      trinity_mode: { default: True }\n      left: left\n      right: right\n      output_dir:\n        valueFrom: '${ return inputs.left.nameroot.replace(\".fastq\",\"_salmon\");}'\n    out: [ output ]\n\n$namespaces:\n  s: http://schema.org/\n  cwltool: \"http://commonwl.org/cwltool#\"\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'max_memory': 'string', 'threads': 'int', 'output': 'string', 'seqType': 'string', 'left': 'File[]', 'right': 'File[]'}",
    "cwl_outputs": "{'trinity_output': {'outputSource': 'trinity_assembly/output', 'type': 'Directory'}, 'quantifycation_kallisto_output': {'outputSource': 'quantifycation_kallisto/output', 'type': 'Directory[]'}, 'quantifycation_salmon_output': {'outputSource': 'quantifycation_salmon/output', 'type': 'Directory[]'}}",
    "cwl_hints": "{'cwltool:LoadListingRequirement': {'loadListing': 'no_listing'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'cwltool': 'http://commonwl.org/cwltool#'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow use Trinity for de novo transcriptome assembly for paired-end reads and quantification",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "trinity_denovo_assembly_quantification_pe",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "trinity_assembly": {
        "run": "../../tools/trinity/trinity.cwl",
        "label": "Trinity de Novo assembly",
        "in": {
          "max_memory": "max_memory",
          "CPU": "threads",
          "output": "output",
          "seqType": "seqType",
          "left": "left",
          "right": "right"
        },
        "out": [
          "output"
        ]
      },
      "extracting_transcript_file": {
        "run": "../../tools/basic/extract-file-from-dir.cwl",
        "label": "Extracting transcript file",
        "in": {
          "d": "trinity_assembly/output",
          "filename": {
            "default": "Trinity.fasta"
          },
          "o": {
            "default": "Trinity.fasta"
          }
        },
        "out": [
          "output"
        ]
      },
      "quantifycation_kallisto": {
        "run": "../../tools/trinity/align_and_estimate_abundance.cwl",
        "label": "Quantification",
        "scatter": [
          "left",
          "right"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "prep_reference": {
            "default": true
          },
          "seqType": "seqType",
          "transcripts": "extracting_transcript_file/output",
          "thread_count": "threads",
          "est_method": {
            "default": "kallisto"
          },
          "trinity_mode": {
            "default": true
          },
          "left": "left",
          "right": "right",
          "output_dir": {
            "valueFrom": "${ return inputs.left.nameroot.replace(\".fastq\",\"_kallisto\");}"
          }
        },
        "out": [
          "output"
        ]
      },
      "quantifycation_salmon": {
        "run": "../../tools/trinity/align_and_estimate_abundance.cwl",
        "label": "Quantification",
        "scatter": [
          "left",
          "right"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "prep_reference": {
            "default": true
          },
          "seqType": "seqType",
          "transcripts": "extracting_transcript_file/output",
          "thread_count": "threads",
          "est_method": {
            "default": "salmon"
          },
          "trinity_mode": {
            "default": true
          },
          "left": "left",
          "right": "right",
          "output_dir": {
            "valueFrom": "${ return inputs.left.nameroot.replace(\".fastq\",\"_salmon\");}"
          }
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/UCSC/bedtogtf.cwl",
    "sha": "6ad51ca32d59584d3b8257a7a7cc51ce3f8f4c09",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/UCSC/bedtogtf.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: \"USCS BED to GTF\"\ndoc: \"This workflow uses the UCSC utilities to convert BED to GTF\"\n\ninputs:\n    bed: File\n\noutputs:\n  bedtogenepred_out:\n    outputSource: bedtogenepred/output\n    type: File\n  genepredtogtf_out:\n    outputSource: genepredtogtf/output\n    type: File\n\nsteps:\n  bedtogenepred:\n    run: ../../tools/ucsc/ucsc-bedtogenepred.cwl\n    in:\n      bed: bed\n      genePred:\n        valueFrom: ${ return inputs.bed.nameroot + \".genePred\";}\n    out: [output]\n    doc: |\n      Convert BED to genePred\n  genepredtogtf:\n    run: ../../tools/ucsc/ucsc-genepredtogtf.cwl\n    in:\n      database: { default: \"file\" }\n      genePred: bedtogenepred/output\n      gtf:\n        valueFrom: ${ return inputs.genePred.nameroot + \".gtf\";}\n    out: [output]\n    doc: |\n      Convert genePred to GTF\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'bed': 'File'}",
    "cwl_outputs": "{'bedtogenepred_out': {'outputSource': 'bedtogenepred/output', 'type': 'File'}, 'genepredtogtf_out': {'outputSource': 'genepredtogtf/output', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This workflow uses the UCSC utilities to convert BED to GTF",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "USCS BED to GTF",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "bedtogenepred": {
        "run": "../../tools/ucsc/ucsc-bedtogenepred.cwl",
        "in": {
          "bed": "bed",
          "genePred": {
            "valueFrom": "${ return inputs.bed.nameroot + \".genePred\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Convert BED to genePred\n"
      },
      "genepredtogtf": {
        "run": "../../tools/ucsc/ucsc-genepredtogtf.cwl",
        "in": {
          "database": {
            "default": "file"
          },
          "genePred": "bedtogenepred/output",
          "gtf": {
            "valueFrom": "${ return inputs.genePred.nameroot + \".gtf\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Convert genePred to GTF\n"
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/UCSC/gtftobed.cwl",
    "sha": "04cac96775f18a0732bbf18585a5ad806bb457d2",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/UCSC/gtftobed.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: \"USCS GTF to Bed\"\ndoc: \"This workflow uses the UCSC utilities to convert GTF to Bed\"\n\ninputs:\n    gtf: File\n\noutputs:\n  gtftogenepred_out:\n    outputSource: gtftogenepred/output\n    type: File\n  genepredtobed_out:\n    outputSource: genepredtobed/output\n    type: File\n\nsteps:\n  gtftogenepred:\n    run: ../../tools/ucsc/ucsc-gtftogenepred.cwl\n    in:\n      gtf: gtf\n      genePred:\n        valueFrom: ${ return inputs.gtf.nameroot + \".genePred\";}\n    out: [output]\n    doc: |\n      Convert GTF to genePred\n  genepredtobed:\n    run: ../../tools/ucsc/ucsc-genepredtobed.cwl\n    in:\n      genePred: gtftogenepred/output\n      bed:\n        valueFrom: ${ return inputs.genePred.nameroot + \".bed\";}\n    out: [output]\n    doc: |\n      Convert genePred to bed\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'gtf': 'File'}",
    "cwl_outputs": "{'gtftogenepred_out': {'outputSource': 'gtftogenepred/output', 'type': 'File'}, 'genepredtobed_out': {'outputSource': 'genepredtobed/output', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This workflow uses the UCSC utilities to convert GTF to Bed",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "USCS GTF to Bed",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "gtftogenepred": {
        "run": "../../tools/ucsc/ucsc-gtftogenepred.cwl",
        "in": {
          "gtf": "gtf",
          "genePred": {
            "valueFrom": "${ return inputs.gtf.nameroot + \".genePred\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Convert GTF to genePred\n"
      },
      "genepredtobed": {
        "run": "../../tools/ucsc/ucsc-genepredtobed.cwl",
        "in": {
          "genePred": "gtftogenepred/output",
          "bed": {
            "valueFrom": "${ return inputs.genePred.nameroot + \".bed\";}"
          }
        },
        "out": [
          "output"
        ],
        "doc": "Convert genePred to bed\n"
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Variant-calling/bwa-alignment-sort.cwl",
    "sha": "b9f39d285c003f3d53fa8420070ab86cde41b067",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Variant-calling/bwa-alignment-sort.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\nid: bwa_alignment_sort\ndoc: This workflow aligns the fastq files using bwa, sort and index the BAM file\nlabel: bwa alignment workflow\n\nrequirements:\n  MultipleInputFeatureRequirement: {}\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n\ninputs:\n  reads: File[]\n  genome_index: Directory\n  genome_prefix: string\n  threads: int\n\noutputs:\n  sorted_indexed_bam:\n    outputSource: sort_and_index/sorted_indexed_bam\n    type: File\n    secondaryFiles: .bai\n  bam_flagstat_out:\n    outputSource: bam_flagstat/out_stdout\n    type: File\n  bam_stats_out:\n    outputSource: bam_stats/out_stdout\n    type: File\n\nsteps:\n  alignment:\n    run: ../../tools/bwa/bwa-mem.cwl\n    label: bwa-mem\n    in:\n      reads: reads\n      index: genome_index\n      prefix: genome_prefix\n      t: threads\n      K: { default: 100000000}\n      Y: { default: true}\n      R:\n        valueFrom: |\n          ${\n            var sample = inputs.reads[0].nameroot;\n            if (sample.endsWith(\".fastq\")){\n              sample = sample.replace(\".fastq\", \"\");\n            }else if (sample.endsWith(\".fq\")){\n              sample = sample.replace(\".fq\", \"\");\n            }\n            if (sample.endsWith(\"_1\") || sample.endsWith(\"_2\")){\n              sample = sample.slice(0, -2);\n            }else if (sample.includes(\"_R1_\")){\n              sample = sample.substring(1, sample.indexOf(\"_R1_\"))\n            }else if (sample.includes(\"_R2_\")){\n              sample = sample.substring(0, sample.indexOf(\"_R2_\"))\n            }\n            return \"@RG\\\\tID:\" + sample + \"\\\\tLB:\" + sample + \"\\\\tPL:ILLUMINA\\\\tPM:HISEQ\\\\tSM:\" + sample;\n          }\n    out: [out_stdout]\n  sam_to_bam:\n    run: ../../tools/samtools/samtools-view.cwl\n    label: Samtools-view\n    in:\n      input: alignment/out_stdout\n      isbam: {default: true}\n      output_name:\n        valueFrom: '${ return inputs.input.nameroot + \".bam\";}'\n      threads: threads\n    out: [output]\n  bam_flagstat:\n    run: ../../tools/samtools/samtools-flagstat.cwl\n    label: Samtools-flagstat\n    in:\n      in_bam: sam_to_bam/output\n      stdout:\n        valueFrom: '${ return inputs.in_bam.nameroot + \".flagstat\";}'\n    out: [out_stdout]\n  bam_stats:\n    run: ../../tools/samtools/samtools-stats.cwl\n    label: Samtools-stats\n    in:\n      in_bam: sam_to_bam/output\n      stdout:\n        valueFrom: '${ return inputs.in_bam.nameroot + \".stats\";}'\n    out: [out_stdout]\n  sort_and_index:\n    run: samtools-sort_index.cwl\n    in:\n      bam: sam_to_bam/output\n      threads: threads\n    out: [sorted_indexed_bam]\n\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": "bwa_alignment_sort",
    "cwl_inputs": "{'reads': 'File[]', 'genome_index': 'Directory', 'genome_prefix': 'string', 'threads': 'int'}",
    "cwl_outputs": "{'sorted_indexed_bam': {'outputSource': 'sort_and_index/sorted_indexed_bam', 'type': 'File', 'secondaryFiles': '.bai'}, 'bam_flagstat_out': {'outputSource': 'bam_flagstat/out_stdout', 'type': 'File'}, 'bam_stats_out': {'outputSource': 'bam_stats/out_stdout', 'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'MultipleInputFeatureRequirement': {}, 'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}}",
    "cwl_doc": "This workflow aligns the fastq files using bwa, sort and index the BAM file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "bwa alignment workflow",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "alignment": {
        "run": "../../tools/bwa/bwa-mem.cwl",
        "label": "bwa-mem",
        "in": {
          "reads": "reads",
          "index": "genome_index",
          "prefix": "genome_prefix",
          "t": "threads",
          "K": {
            "default": 100000000
          },
          "Y": {
            "default": true
          },
          "R": {
            "valueFrom": "${\n  var sample = inputs.reads[0].nameroot;\n  if (sample.endsWith(\".fastq\")){\n    sample = sample.replace(\".fastq\", \"\");\n  }else if (sample.endsWith(\".fq\")){\n    sample = sample.replace(\".fq\", \"\");\n  }\n  if (sample.endsWith(\"_1\") || sample.endsWith(\"_2\")){\n    sample = sample.slice(0, -2);\n  }else if (sample.includes(\"_R1_\")){\n    sample = sample.substring(1, sample.indexOf(\"_R1_\"))\n  }else if (sample.includes(\"_R2_\")){\n    sample = sample.substring(0, sample.indexOf(\"_R2_\"))\n  }\n  return \"@RG\\\\tID:\" + sample + \"\\\\tLB:\" + sample + \"\\\\tPL:ILLUMINA\\\\tPM:HISEQ\\\\tSM:\" + sample;\n}\n"
          }
        },
        "out": [
          "out_stdout"
        ]
      },
      "sam_to_bam": {
        "run": "../../tools/samtools/samtools-view.cwl",
        "label": "Samtools-view",
        "in": {
          "input": "alignment/out_stdout",
          "isbam": {
            "default": true
          },
          "output_name": {
            "valueFrom": "${ return inputs.input.nameroot + \".bam\";}"
          },
          "threads": "threads"
        },
        "out": [
          "output"
        ]
      },
      "bam_flagstat": {
        "run": "../../tools/samtools/samtools-flagstat.cwl",
        "label": "Samtools-flagstat",
        "in": {
          "in_bam": "sam_to_bam/output",
          "stdout": {
            "valueFrom": "${ return inputs.in_bam.nameroot + \".flagstat\";}"
          }
        },
        "out": [
          "out_stdout"
        ]
      },
      "bam_stats": {
        "run": "../../tools/samtools/samtools-stats.cwl",
        "label": "Samtools-stats",
        "in": {
          "in_bam": "sam_to_bam/output",
          "stdout": {
            "valueFrom": "${ return inputs.in_bam.nameroot + \".stats\";}"
          }
        },
        "out": [
          "out_stdout"
        ]
      },
      "sort_and_index": {
        "run": "samtools-sort_index.cwl",
        "in": {
          "bam": "sam_to_bam/output",
          "threads": "threads"
        },
        "out": [
          "sorted_indexed_bam"
        ]
      }
    }
  },
  {
    "path": "workflows/Variant-calling/extract-chrom-names-from-fasta.cwl",
    "sha": "9abf923cbeee5964ec20452206793ec0b53f23b9",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Variant-calling/extract-chrom-names-from-fasta.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\nlabel: \"Compute library complexity\"\ndoc: \"This workflow compute library complexity\"\n\ninputs:\n  file: File\n\noutputs:\n  output:\n    outputSource: chr_list/output\n    type: string[]\n\nsteps:\n  grep:\n    run: ../../tools/basic/grep.cwl\n    in:\n      outFileName:\n        valueFrom: ${ return inputs.file.nameroot;}\n      pattern: { default: '^>chr' }\n      file: file\n    out: [output]\n  awk:\n    run: ../../tools/basic/awk.cwl\n    in:\n      F: { default: \">\" }\n      outFileName:\n        valueFrom: ${ return inputs.file.nameroot + \".tagAlign\";}\n      file: grep/output\n      text: { default: '{print $2}' }\n    out: [output]\n  awk2:\n    run: ../../tools/basic/awk.cwl\n    in:\n      F: { default: \" \" }\n      outFileName:\n        valueFrom: ${ return inputs.file.nameroot + \".tagAlign\";}\n      file: awk/output\n      text: { default: '{print $1}' }\n    out: [ output ]\n  chr_list:\n    run: ../../tools/basic/lines2arraystring.cwl\n    in:\n      file: awk2/output\n    out: [output]\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'file': 'File'}",
    "cwl_outputs": "{'output': {'outputSource': 'chr_list/output', 'type': 'string[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "This workflow compute library complexity",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Compute library complexity",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "grep": {
        "run": "../../tools/basic/grep.cwl",
        "in": {
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot;}"
          },
          "pattern": {
            "default": "^>chr"
          },
          "file": "file"
        },
        "out": [
          "output"
        ]
      },
      "awk": {
        "run": "../../tools/basic/awk.cwl",
        "in": {
          "F": {
            "default": ">"
          },
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + \".tagAlign\";}"
          },
          "file": "grep/output",
          "text": {
            "default": "{print $2}"
          }
        },
        "out": [
          "output"
        ]
      },
      "awk2": {
        "run": "../../tools/basic/awk.cwl",
        "in": {
          "F": {
            "default": " "
          },
          "outFileName": {
            "valueFrom": "${ return inputs.file.nameroot + \".tagAlign\";}"
          },
          "file": "awk/output",
          "text": {
            "default": "{print $1}"
          }
        },
        "out": [
          "output"
        ]
      },
      "chr_list": {
        "run": "../../tools/basic/lines2arraystring.cwl",
        "in": {
          "file": "awk2/output"
        },
        "out": [
          "output"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "workflows/Variant-calling/gatk-variant-calling.cwl",
    "sha": "1d6824103f4dea18fdb0e75d5b98142ca2e02e32",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Variant-calling/gatk-variant-calling.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\nid: gatk-variant-calling\ndoc: |\n  Variant calling workflow using the GATK4\n  Pipeline implemented from: https://gencore.bio.nyu.edu/variant-calling-pipeline-gatk4/\n\nrequirements:\n  MultipleInputFeatureRequirement: {}\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  reads: File[]\n  genome_fasta:\n    type: File\n    secondaryFiles: [.fai, ^.dict]\n  genome_index: Directory\n  genome_prefix: string\n  total_threads: int\n  haplotype_threads: int\n  snp_filters:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"string\"}}\n  indel_filters:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"string\"}}\n\noutputs:\n  bam_flagstat_out:\n    outputSource: alignment/bam_flagstat_out\n    type: File\n  bam_stats_out:\n    outputSource: alignment/bam_stats_out\n    type: File\n  sorted_indexed_bam:\n    outputSource: recal_reads_bam_index/indexed_bam\n    type: File\n    secondaryFiles: .bai\n  mark_duplicates_metrics:\n    outputSource: mark_duplicates/metrics\n    type: File\n  snp_out:\n    outputSource: gatk_select_variants_snp_filtered_recal/output\n    type: File\n    secondaryFiles: .idx\n  indels_out:\n    outputSource: gatk_select_variants_indels_filtered_recal/output\n    type: File\n    secondaryFiles: .idx\n\nsteps:\n  get_cromosomes:\n    run: extract-chrom-names-from-fasta.cwl\n    in:\n      file: genome_fasta\n    out: [output]\n  alignment:\n    run: bwa-alignment-sort.cwl\n    in:\n      reads: reads\n      genome_index: genome_index\n      genome_prefix: genome_prefix\n      threads: total_threads\n    out: [sorted_indexed_bam, bam_flagstat_out, bam_stats_out]\n  mark_duplicates:\n    run: ../../tools/gatk/gatk-MarkDuplicates.cwl\n    in:\n      I: alignment/sorted_indexed_bam\n      O:\n        valueFrom: ${ return inputs.I.nameroot + \"_sorted_dedup_reads.bam\"; }\n      M:\n        valueFrom: ${ return inputs.I.nameroot + \"_dedup_metrics.txt\"; }\n    out: [output, metrics]\n  index_bam:\n    run: ../../tools/samtools/samtools-index-bam.cwl\n    in:\n      bam: mark_duplicates/output\n    out: [indexed_bam]\n  split_bam_chrom:\n    run: ../../tools/samtools/samtools-view-indexed.cwl\n    scatter: region\n    in:\n      isbam: {default: True }\n      input: index_bam/indexed_bam\n      threads: {default: 1 }\n      region: get_cromosomes/output\n      output_name:\n        valueFrom: ${ return inputs.input.nameroot + \"_\" + inputs.region + \".bam\"; }\n    out: [output]\n  index_split_bam:\n    run: ../../tools/gatk/gatk-CreateHadoopBamSplittingIndex.cwl\n    scatter: I\n    in:\n      I: split_bam_chrom/output\n      O:\n        valueFrom: ${ return inputs.I.basename + \".sbi\"; }\n    out: [output]\n  gatk_haplotypecaller_pre:\n    run: ../../tools/gatk/gatk-HaplotypeCaller.cwl\n    scatter: [I, intervals]\n    scatterMethod: dotproduct\n    in:\n      threads: haplotype_threads\n      R: genome_fasta\n      I: index_split_bam/output\n      intervals: get_cromosomes/output\n      O:\n        valueFrom: ${ return inputs.I.nameroot + \"_raw_variants.vcf\"; }\n    out: [output]\n  gather_vcf:\n    run: ../../tools/gatk/gatk-GatherVcfs.cwl\n    in:\n      I: gatk_haplotypecaller_pre/output\n      O:\n        valueFrom: ${ var name = inputs.I[0].nameroot; return name.substring(0, name.indexOf(\"_sorted_sorted_dedup_reads\")) + \"_haplotypecaller_1.vcf\"; }\n    out: [output]\n  gatk_select_variants_snp:\n    run: ../../tools/gatk/gatk-SelectVariants.cwl\n    in:\n      R: genome_fasta\n      V: gather_vcf/output\n      selectType: { default: \"SNP\"}\n      O:\n        valueFrom: ${ return inputs.V.nameroot.replace(\"_haplotypecaller_1\", \"_raw_snps.vcf\"); }\n    out: [output]\n  gatk_select_variants_indels:\n    run: ../../tools/gatk/gatk-SelectVariants.cwl\n    in:\n      R: genome_fasta\n      V: gather_vcf/output\n      selectType: { default: \"INDEL\"}\n      O:\n        valueFrom: ${ return inputs.V.nameroot.replace(\"_haplotypecaller_1\", \"_raw_indels.vcf\"); }\n    out: [output]\n  gatk_variant_filtration_snp:\n    run: ../../tools/gatk/gatk-VariantFiltration.cwl\n    in:\n      R: genome_fasta\n      V: gatk_select_variants_snp/output\n      O:\n        valueFrom: ${ return inputs.V.nameroot.replace(\"_raw_snps\", \"_filtered_snps.vcf\"); }\n      filters: snp_filters\n    out: [output]\n  gatk_variant_filtration_indels:\n    run: ../../tools/gatk/gatk-VariantFiltration.cwl\n    in:\n      R: genome_fasta\n      V: gatk_select_variants_indels/output\n      O:\n        valueFrom: ${ return inputs.V.nameroot.replace(\"_raw_indels\", \"_filtered_indels.vcf\"); }\n      filters: indel_filters\n    out: [output]\n  gatk_select_variants_snp_filtered:\n    run: ../../tools/gatk/gatk-SelectVariants.cwl\n    in:\n      V: gatk_variant_filtration_snp/output\n      exclude-filtered: { default: True}\n      O:\n        valueFrom: ${ return inputs.V.nameroot.replace(\"_filtered_snps\", \"_bqsr_snps.vcf\"); }\n    out: [output]\n  gatk_select_variants_indels_filtered:\n    run: ../../tools/gatk/gatk-SelectVariants.cwl\n    in:\n      V: gatk_variant_filtration_indels/output\n      exclude-filtered: { default: True}\n      O:\n        valueFrom: ${ return inputs.V.nameroot.replace(\"_filtered_indels\", \"_bqsr_indels.vcf\"); }\n    out: [output]\n  gatk_baserecalibrator_pre:\n    run: ../../tools/gatk/gatk-BaseRecalibrator.cwl\n    in:\n      R: genome_fasta\n      I: index_bam/indexed_bam\n      known_sites:\n        - gatk_select_variants_snp_filtered/output\n        - gatk_select_variants_indels_filtered/output\n      O:\n        valueFrom: ${ return inputs.I.nameroot.replace(\"_sorted_sorted_dedup_reads\", \"_recal_data.table\"); }\n    out: [output]\n  gatk_applybqsr:\n    run: ../../tools/gatk/gatk-ApplyBQSR.cwl\n    in:\n      R: genome_fasta\n      I: index_bam/indexed_bam\n      bqsr: gatk_baserecalibrator_pre/output\n      O:\n        valueFrom: ${ return inputs.I.nameroot.replace(\"_sorted_sorted_dedup_reads\", \"_recal_reads.bam\"); }\n    out: [output]\n  recal_reads_bam_index:\n    run: ../../tools/samtools/samtools-index-bam.cwl\n    label: Samtools-index\n    in:\n      bam: gatk_applybqsr/output\n    out: [indexed_bam]\n  gatk_baserecalibrator_post:\n    run: ../../tools/gatk/gatk-BaseRecalibrator.cwl\n    in:\n      R: genome_fasta\n      I: recal_reads_bam_index/indexed_bam\n      known_sites:\n        - gatk_select_variants_snp_filtered/output\n        - gatk_select_variants_indels_filtered/output\n      O:\n        valueFrom: ${ return inputs.I.nameroot.replace(\"_recal_reads\", \"_post_recal_data.table\"); }\n    out: [output]\n# This step needs Rscript\n#  gatk_analyzecovariates:\n#    run: ../../tools/gatk/gatk-AnalyzeCovariates.cwl\n#    in:\n#      before: gatk_baserecalibrator_pre/output\n#      after: gatk_baserecalibrator_post/output\n#      plots:\n#        valueFrom: ${ return inputs.before.nameroot.replace(\"_recal_data\", \"recalibration_plots.pdf\"); }\n#    out: [output]\n  # Recall steps\n  split_bam_chrom_recal:\n    run: ../../tools/samtools/samtools-view-indexed.cwl\n    scatter: region\n    in:\n      isbam: {default: True }\n      input: recal_reads_bam_index/indexed_bam\n      threads: {default: 1 }\n      region: get_cromosomes/output\n      output_name:\n        valueFrom: ${ return inputs.input.nameroot + \"_\" + inputs.region + \".bam\"; }\n    out: [output]\n  index_split_bam_recal:\n    run: ../../tools/gatk/gatk-CreateHadoopBamSplittingIndex.cwl\n    scatter: I\n    in:\n      I: split_bam_chrom_recal/output\n      O:\n        valueFrom: ${ return inputs.I.basename + \".sbi\"; }\n    out: [output]\n  gatk_haplotypecaller_recal:\n    run: ../../tools/gatk/gatk-HaplotypeCaller.cwl\n    scatter: [I, intervals]\n    scatterMethod: dotproduct\n    in:\n      threads: haplotype_threads\n      R: genome_fasta\n      I: index_split_bam_recal/output\n      intervals: get_cromosomes/output\n      O:\n        valueFrom: ${ return inputs.I.nameroot + \"_raw_variants_recal.vcf\"; }\n    out: [output]\n  gather_vcf_recal:\n    run: ../../tools/gatk/gatk-GatherVcfs.cwl\n    in:\n      I: gatk_haplotypecaller_recal/output\n      O:\n        valueFrom: ${ var name = inputs.I[0].nameroot; return name.substring(0, name.indexOf(\"_recal_reads\")) + \"_raw_variants_recal.vcf\"; }\n    out: [output]\n\n  gatk_select_variants_snp_recal:\n    run: ../../tools/gatk/gatk-SelectVariants.cwl\n    in:\n      R: genome_fasta\n      V: gather_vcf_recal/output\n      selectType: { default: \"SNP\"}\n      O:\n        valueFrom: ${ return inputs.V.nameroot.replace(\"_raw_variants_recal\", \"_raw_snps_recal.vcf\"); }\n    out: [output]\n  gatk_select_variants_indels_recal:\n    run: ../../tools/gatk/gatk-SelectVariants.cwl\n    in:\n      R: genome_fasta\n      V: gather_vcf_recal/output\n      selectType: { default: \"INDEL\"}\n      O:\n        valueFrom: ${ return inputs.V.nameroot.replace(\"_raw_variants_recal\", \"_raw_indels_recal.vcf\"); }\n    out: [output]\n  gatk_variant_filtration_snp_recal:\n    run: ../../tools/gatk/gatk-VariantFiltration.cwl\n    in:\n      R: genome_fasta\n      V: gatk_select_variants_snp_recal/output\n      O:\n        valueFrom: ${ return inputs.V.nameroot.replace(\"_raw_snps_recal\", \"_filtered_snps_recal.vcf\"); }\n      filters: snp_filters\n    out: [output]\n  gatk_variant_filtration_indels_recal:\n    run: ../../tools/gatk/gatk-VariantFiltration.cwl\n    in:\n      R: genome_fasta\n      V: gatk_select_variants_indels_recal/output\n      O:\n        valueFrom: ${ return inputs.V.nameroot.replace(\"_raw_indels_recal\", \"_filtered_indels_recal.vcf\"); }\n      filters: indel_filters\n    out: [output]\n  gatk_select_variants_snp_filtered_recal:\n    run: ../../tools/gatk/gatk-SelectVariants.cwl\n    in:\n      V: gatk_variant_filtration_snp_recal/output\n      exclude-filtered: { default: True}\n      O:\n        valueFrom: ${ return inputs.V.nameroot.replace(\"_filtered_snps_recal\", \"_snps.vcf\"); }\n    out: [output]\n  gatk_select_variants_indels_filtered_recal:\n    run: ../../tools/gatk/gatk-SelectVariants.cwl\n    in:\n      V: gatk_variant_filtration_indels_recal/output\n      exclude-filtered: { default: True}\n      O:\n        valueFrom: ${ return inputs.V.nameroot.replace(\"_filtered_indels_recal\", \"_indels.vcf\"); }\n    out: [output]\n",
    "cwl_class": "Workflow",
    "cwl_id": "gatk-variant-calling",
    "cwl_inputs": "{'reads': 'File[]', 'genome_fasta': {'type': 'File', 'secondaryFiles': ['.fai', '^.dict']}, 'genome_index': 'Directory', 'genome_prefix': 'string', 'total_threads': 'int', 'haplotype_threads': 'int', 'snp_filters': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'string'}}}, 'indel_filters': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'string'}}}}",
    "cwl_outputs": "{'bam_flagstat_out': {'outputSource': 'alignment/bam_flagstat_out', 'type': 'File'}, 'bam_stats_out': {'outputSource': 'alignment/bam_stats_out', 'type': 'File'}, 'sorted_indexed_bam': {'outputSource': 'recal_reads_bam_index/indexed_bam', 'type': 'File', 'secondaryFiles': '.bai'}, 'mark_duplicates_metrics': {'outputSource': 'mark_duplicates/metrics', 'type': 'File'}, 'snp_out': {'outputSource': 'gatk_select_variants_snp_filtered_recal/output', 'type': 'File', 'secondaryFiles': '.idx'}, 'indels_out': {'outputSource': 'gatk_select_variants_indels_filtered_recal/output', 'type': 'File', 'secondaryFiles': '.idx'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'MultipleInputFeatureRequirement': {}, 'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "Variant calling workflow using the GATK4\nPipeline implemented from: https://gencore.bio.nyu.edu/variant-calling-pipeline-gatk4/\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "get_cromosomes": {
        "run": "extract-chrom-names-from-fasta.cwl",
        "in": {
          "file": "genome_fasta"
        },
        "out": [
          "output"
        ]
      },
      "alignment": {
        "run": "bwa-alignment-sort.cwl",
        "in": {
          "reads": "reads",
          "genome_index": "genome_index",
          "genome_prefix": "genome_prefix",
          "threads": "total_threads"
        },
        "out": [
          "sorted_indexed_bam",
          "bam_flagstat_out",
          "bam_stats_out"
        ]
      },
      "mark_duplicates": {
        "run": "../../tools/gatk/gatk-MarkDuplicates.cwl",
        "in": {
          "I": "alignment/sorted_indexed_bam",
          "O": {
            "valueFrom": "${ return inputs.I.nameroot + \"_sorted_dedup_reads.bam\"; }"
          },
          "M": {
            "valueFrom": "${ return inputs.I.nameroot + \"_dedup_metrics.txt\"; }"
          }
        },
        "out": [
          "output",
          "metrics"
        ]
      },
      "index_bam": {
        "run": "../../tools/samtools/samtools-index-bam.cwl",
        "in": {
          "bam": "mark_duplicates/output"
        },
        "out": [
          "indexed_bam"
        ]
      },
      "split_bam_chrom": {
        "run": "../../tools/samtools/samtools-view-indexed.cwl",
        "scatter": "region",
        "in": {
          "isbam": {
            "default": true
          },
          "input": "index_bam/indexed_bam",
          "threads": {
            "default": 1
          },
          "region": "get_cromosomes/output",
          "output_name": {
            "valueFrom": "${ return inputs.input.nameroot + \"_\" + inputs.region + \".bam\"; }"
          }
        },
        "out": [
          "output"
        ]
      },
      "index_split_bam": {
        "run": "../../tools/gatk/gatk-CreateHadoopBamSplittingIndex.cwl",
        "scatter": "I",
        "in": {
          "I": "split_bam_chrom/output",
          "O": {
            "valueFrom": "${ return inputs.I.basename + \".sbi\"; }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gatk_haplotypecaller_pre": {
        "run": "../../tools/gatk/gatk-HaplotypeCaller.cwl",
        "scatter": [
          "I",
          "intervals"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "threads": "haplotype_threads",
          "R": "genome_fasta",
          "I": "index_split_bam/output",
          "intervals": "get_cromosomes/output",
          "O": {
            "valueFrom": "${ return inputs.I.nameroot + \"_raw_variants.vcf\"; }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gather_vcf": {
        "run": "../../tools/gatk/gatk-GatherVcfs.cwl",
        "in": {
          "I": "gatk_haplotypecaller_pre/output",
          "O": {
            "valueFrom": "${ var name = inputs.I[0].nameroot; return name.substring(0, name.indexOf(\"_sorted_sorted_dedup_reads\")) + \"_haplotypecaller_1.vcf\"; }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gatk_select_variants_snp": {
        "run": "../../tools/gatk/gatk-SelectVariants.cwl",
        "in": {
          "R": "genome_fasta",
          "V": "gather_vcf/output",
          "selectType": {
            "default": "SNP"
          },
          "O": {
            "valueFrom": "${ return inputs.V.nameroot.replace(\"_haplotypecaller_1\", \"_raw_snps.vcf\"); }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gatk_select_variants_indels": {
        "run": "../../tools/gatk/gatk-SelectVariants.cwl",
        "in": {
          "R": "genome_fasta",
          "V": "gather_vcf/output",
          "selectType": {
            "default": "INDEL"
          },
          "O": {
            "valueFrom": "${ return inputs.V.nameroot.replace(\"_haplotypecaller_1\", \"_raw_indels.vcf\"); }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gatk_variant_filtration_snp": {
        "run": "../../tools/gatk/gatk-VariantFiltration.cwl",
        "in": {
          "R": "genome_fasta",
          "V": "gatk_select_variants_snp/output",
          "O": {
            "valueFrom": "${ return inputs.V.nameroot.replace(\"_raw_snps\", \"_filtered_snps.vcf\"); }"
          },
          "filters": "snp_filters"
        },
        "out": [
          "output"
        ]
      },
      "gatk_variant_filtration_indels": {
        "run": "../../tools/gatk/gatk-VariantFiltration.cwl",
        "in": {
          "R": "genome_fasta",
          "V": "gatk_select_variants_indels/output",
          "O": {
            "valueFrom": "${ return inputs.V.nameroot.replace(\"_raw_indels\", \"_filtered_indels.vcf\"); }"
          },
          "filters": "indel_filters"
        },
        "out": [
          "output"
        ]
      },
      "gatk_select_variants_snp_filtered": {
        "run": "../../tools/gatk/gatk-SelectVariants.cwl",
        "in": {
          "V": "gatk_variant_filtration_snp/output",
          "exclude-filtered": {
            "default": true
          },
          "O": {
            "valueFrom": "${ return inputs.V.nameroot.replace(\"_filtered_snps\", \"_bqsr_snps.vcf\"); }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gatk_select_variants_indels_filtered": {
        "run": "../../tools/gatk/gatk-SelectVariants.cwl",
        "in": {
          "V": "gatk_variant_filtration_indels/output",
          "exclude-filtered": {
            "default": true
          },
          "O": {
            "valueFrom": "${ return inputs.V.nameroot.replace(\"_filtered_indels\", \"_bqsr_indels.vcf\"); }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gatk_baserecalibrator_pre": {
        "run": "../../tools/gatk/gatk-BaseRecalibrator.cwl",
        "in": {
          "R": "genome_fasta",
          "I": "index_bam/indexed_bam",
          "known_sites": [
            "gatk_select_variants_snp_filtered/output",
            "gatk_select_variants_indels_filtered/output"
          ],
          "O": {
            "valueFrom": "${ return inputs.I.nameroot.replace(\"_sorted_sorted_dedup_reads\", \"_recal_data.table\"); }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gatk_applybqsr": {
        "run": "../../tools/gatk/gatk-ApplyBQSR.cwl",
        "in": {
          "R": "genome_fasta",
          "I": "index_bam/indexed_bam",
          "bqsr": "gatk_baserecalibrator_pre/output",
          "O": {
            "valueFrom": "${ return inputs.I.nameroot.replace(\"_sorted_sorted_dedup_reads\", \"_recal_reads.bam\"); }"
          }
        },
        "out": [
          "output"
        ]
      },
      "recal_reads_bam_index": {
        "run": "../../tools/samtools/samtools-index-bam.cwl",
        "label": "Samtools-index",
        "in": {
          "bam": "gatk_applybqsr/output"
        },
        "out": [
          "indexed_bam"
        ]
      },
      "gatk_baserecalibrator_post": {
        "run": "../../tools/gatk/gatk-BaseRecalibrator.cwl",
        "in": {
          "R": "genome_fasta",
          "I": "recal_reads_bam_index/indexed_bam",
          "known_sites": [
            "gatk_select_variants_snp_filtered/output",
            "gatk_select_variants_indels_filtered/output"
          ],
          "O": {
            "valueFrom": "${ return inputs.I.nameroot.replace(\"_recal_reads\", \"_post_recal_data.table\"); }"
          }
        },
        "out": [
          "output"
        ]
      },
      "split_bam_chrom_recal": {
        "run": "../../tools/samtools/samtools-view-indexed.cwl",
        "scatter": "region",
        "in": {
          "isbam": {
            "default": true
          },
          "input": "recal_reads_bam_index/indexed_bam",
          "threads": {
            "default": 1
          },
          "region": "get_cromosomes/output",
          "output_name": {
            "valueFrom": "${ return inputs.input.nameroot + \"_\" + inputs.region + \".bam\"; }"
          }
        },
        "out": [
          "output"
        ]
      },
      "index_split_bam_recal": {
        "run": "../../tools/gatk/gatk-CreateHadoopBamSplittingIndex.cwl",
        "scatter": "I",
        "in": {
          "I": "split_bam_chrom_recal/output",
          "O": {
            "valueFrom": "${ return inputs.I.basename + \".sbi\"; }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gatk_haplotypecaller_recal": {
        "run": "../../tools/gatk/gatk-HaplotypeCaller.cwl",
        "scatter": [
          "I",
          "intervals"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "threads": "haplotype_threads",
          "R": "genome_fasta",
          "I": "index_split_bam_recal/output",
          "intervals": "get_cromosomes/output",
          "O": {
            "valueFrom": "${ return inputs.I.nameroot + \"_raw_variants_recal.vcf\"; }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gather_vcf_recal": {
        "run": "../../tools/gatk/gatk-GatherVcfs.cwl",
        "in": {
          "I": "gatk_haplotypecaller_recal/output",
          "O": {
            "valueFrom": "${ var name = inputs.I[0].nameroot; return name.substring(0, name.indexOf(\"_recal_reads\")) + \"_raw_variants_recal.vcf\"; }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gatk_select_variants_snp_recal": {
        "run": "../../tools/gatk/gatk-SelectVariants.cwl",
        "in": {
          "R": "genome_fasta",
          "V": "gather_vcf_recal/output",
          "selectType": {
            "default": "SNP"
          },
          "O": {
            "valueFrom": "${ return inputs.V.nameroot.replace(\"_raw_variants_recal\", \"_raw_snps_recal.vcf\"); }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gatk_select_variants_indels_recal": {
        "run": "../../tools/gatk/gatk-SelectVariants.cwl",
        "in": {
          "R": "genome_fasta",
          "V": "gather_vcf_recal/output",
          "selectType": {
            "default": "INDEL"
          },
          "O": {
            "valueFrom": "${ return inputs.V.nameroot.replace(\"_raw_variants_recal\", \"_raw_indels_recal.vcf\"); }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gatk_variant_filtration_snp_recal": {
        "run": "../../tools/gatk/gatk-VariantFiltration.cwl",
        "in": {
          "R": "genome_fasta",
          "V": "gatk_select_variants_snp_recal/output",
          "O": {
            "valueFrom": "${ return inputs.V.nameroot.replace(\"_raw_snps_recal\", \"_filtered_snps_recal.vcf\"); }"
          },
          "filters": "snp_filters"
        },
        "out": [
          "output"
        ]
      },
      "gatk_variant_filtration_indels_recal": {
        "run": "../../tools/gatk/gatk-VariantFiltration.cwl",
        "in": {
          "R": "genome_fasta",
          "V": "gatk_select_variants_indels_recal/output",
          "O": {
            "valueFrom": "${ return inputs.V.nameroot.replace(\"_raw_indels_recal\", \"_filtered_indels_recal.vcf\"); }"
          },
          "filters": "indel_filters"
        },
        "out": [
          "output"
        ]
      },
      "gatk_select_variants_snp_filtered_recal": {
        "run": "../../tools/gatk/gatk-SelectVariants.cwl",
        "in": {
          "V": "gatk_variant_filtration_snp_recal/output",
          "exclude-filtered": {
            "default": true
          },
          "O": {
            "valueFrom": "${ return inputs.V.nameroot.replace(\"_filtered_snps_recal\", \"_snps.vcf\"); }"
          }
        },
        "out": [
          "output"
        ]
      },
      "gatk_select_variants_indels_filtered_recal": {
        "run": "../../tools/gatk/gatk-SelectVariants.cwl",
        "in": {
          "V": "gatk_variant_filtration_indels_recal/output",
          "exclude-filtered": {
            "default": true
          },
          "O": {
            "valueFrom": "${ return inputs.V.nameroot.replace(\"_filtered_indels_recal\", \"_indels.vcf\"); }"
          }
        },
        "out": [
          "output"
        ]
      }
    }
  },
  {
    "path": "workflows/Variant-calling/samtools-sort_index.cwl",
    "sha": "c5fdbe3e6a4466c47b316e2173a4010996f8c706",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/Variant-calling/samtools-sort_index.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\nid: bwa_alignment_sort\ndoc: This workflow aligns the fastq files using bwa, sort and index the BAM file\nlabel: bwa alignment workflow\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n\ninputs:\n  bam: File\n  threads: int\n\noutputs:\n  sorted_indexed_bam:\n    outputSource: bam_index/indexed_bam\n    type: File\n    secondaryFiles: .bai\n\nsteps:\n  bam_sort:\n    run: ../../tools/samtools/samtools-sort.cwl\n    label: Samtools-sort\n    in:\n      in_bam: bam\n      out_bam:\n        valueFrom: ${ return inputs.in_bam.nameroot.replace('Aligned.out', '') + \"_sorted.bam\";}\n      threads: threads\n    out: [out_sam]\n  bam_index:\n    run: ../../tools/samtools/samtools-index-bam.cwl\n    label: Samtools-index\n    in:\n      bam: bam_sort/out_sam\n    out: [indexed_bam]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": "bwa_alignment_sort",
    "cwl_inputs": "{'bam': 'File', 'threads': 'int'}",
    "cwl_outputs": "{'sorted_indexed_bam': {'outputSource': 'bam_index/indexed_bam', 'type': 'File', 'secondaryFiles': '.bai'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}}",
    "cwl_doc": "This workflow aligns the fastq files using bwa, sort and index the BAM file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "bwa alignment workflow",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "bam_sort": {
        "run": "../../tools/samtools/samtools-sort.cwl",
        "label": "Samtools-sort",
        "in": {
          "in_bam": "bam",
          "out_bam": {
            "valueFrom": "${ return inputs.in_bam.nameroot.replace('Aligned.out', '') + \"_sorted.bam\";}"
          },
          "threads": "threads"
        },
        "out": [
          "out_sam"
        ]
      },
      "bam_index": {
        "run": "../../tools/samtools/samtools-index-bam.cwl",
        "label": "Samtools-index",
        "in": {
          "bam": "bam_sort/out_sam"
        },
        "out": [
          "indexed_bam"
        ]
      }
    }
  },
  {
    "path": "workflows/circRNA/circRNA-circexplorer2-STAR.cwl",
    "sha": "41967f4f77696c3a8bb60175e88bc004da41ff28",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/circRNA/circRNA-circexplorer2-STAR.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\ndoc: This workflow uses CIRCexplorer2 for parse and annotate circular RNA\nlabel: STAR-Alignment-PE-circRNA\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  STAR_Chimeric_junction: File[]\n  genome_ref: File\n  genome_fasta:\n    type: File\n    secondaryFiles: .fai\n\n\noutputs:\n  parse_out:\n    outputSource: parse/output\n    type: File[]\n  annotate_out:\n    outputSource: annotate/output\n    type: File[]\n\nsteps:\n  parse:\n    run: ../../tools/circexplorer/circexplorer2-parse.cwl\n    label: Parse\n    scatter: i\n    in:\n      t: { default: \"STAR\"}\n      i: STAR_Chimeric_junction\n      b:\n        valueFrom: ${ return inputs.i.nameroot + \"_back_spliced_junction.bed\";}\n    out: [output]\n  annotate:\n    run: ../../tools/circexplorer/circexplorer2-annotate.cwl\n    label: Annotate\n    scatter: b\n    in:\n      r: genome_ref\n      g: genome_fasta\n      b: parse/output\n      o:\n        valueFrom: ${ return inputs.b.nameroot + \"_circularRNA_known.txt\";}\n    out: [output]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'STAR_Chimeric_junction': 'File[]', 'genome_ref': 'File', 'genome_fasta': {'type': 'File', 'secondaryFiles': '.fai'}}",
    "cwl_outputs": "{'parse_out': {'outputSource': 'parse/output', 'type': 'File[]'}, 'annotate_out': {'outputSource': 'annotate/output', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow uses CIRCexplorer2 for parse and annotate circular RNA",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "STAR-Alignment-PE-circRNA",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "parse": {
        "run": "../../tools/circexplorer/circexplorer2-parse.cwl",
        "label": "Parse",
        "scatter": "i",
        "in": {
          "t": {
            "default": "STAR"
          },
          "i": "STAR_Chimeric_junction",
          "b": {
            "valueFrom": "${ return inputs.i.nameroot + \"_back_spliced_junction.bed\";}"
          }
        },
        "out": [
          "output"
        ]
      },
      "annotate": {
        "run": "../../tools/circexplorer/circexplorer2-annotate.cwl",
        "label": "Annotate",
        "scatter": "b",
        "in": {
          "r": "genome_ref",
          "g": "genome_fasta",
          "b": "parse/output",
          "o": {
            "valueFrom": "${ return inputs.b.nameroot + \"_circularRNA_known.txt\";}"
          }
        },
        "out": [
          "output"
        ]
      }
    }
  },
  {
    "path": "workflows/pre-processing/fastqc-parallel.cwl",
    "sha": "c5b1a8e8f1ded0820b2cfb23b1f0f4d6a21c1df5",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/pre-processing/fastqc-parallel.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\nid: parallel_fastqc\ndoc: Pre-processing fastq with FastQC in parallel\nlabel: SRA download and QC\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  fastqs: File[]\n  threads: int\n\noutputs:\n  fastqc_html:\n    outputSource: fastqc/out_html\n    type: File[]\n  fastqc_zip:\n    outputSource: fastqc/out_zip\n    type: File[]\n\nsteps:\n  fastqc:\n    label: Parallel FastQC\n    scatter: fastq\n    run:\n      class: CommandLineTool\n      label: FastQC\n      requirements:\n        InlineJavascriptRequirement: {}\n        ResourceRequirement:\n          coresMin: $(inputs.threads)\n      hints:\n        - $import: ../../tools/fastqc/fastqc-docker.yml\n        - $import: ../../tools/fastqc/fastqc-bioconda.yml\n      inputs:\n        threads:\n          type: int\n          inputBinding:\n            position: 1\n            prefix: '-t'\n        fastq:\n          type: File\n          inputBinding:\n            position: 2\n\n      outputs:\n        out_html:\n          type: 'File'\n          outputBinding:\n            glob: '*.html'\n        out_zip:\n          type: 'File'\n          outputBinding:\n            glob: '*.zip'\n\n      baseCommand: [\"fastqc\", \"--outdir\", \".\", \"--extract\"]\n    in:\n      threads: threads\n      fastq: fastqs\n    out: [out_html, out_zip]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": "parallel_fastqc",
    "cwl_inputs": "{'fastqs': 'File[]', 'threads': 'int'}",
    "cwl_outputs": "{'fastqc_html': {'outputSource': 'fastqc/out_html', 'type': 'File[]'}, 'fastqc_zip': {'outputSource': 'fastqc/out_zip', 'type': 'File[]'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "Pre-processing fastq with FastQC in parallel",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "SRA download and QC",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "fastqc": {
        "label": "Parallel FastQC",
        "scatter": "fastq",
        "run": "{'class': 'CommandLineTool', 'label': 'FastQC', 'requirements': {'InlineJavascriptRequirement': {}, 'ResourceRequirement': {'coresMin': '$(inputs.threads)'}}, 'hints': [{'$import': '../../tools/fastqc/fastqc-docker.yml'}, {'$import': '../../tools/fastqc/fastqc-bioconda.yml'}], 'inputs': {'threads': {'type': 'int', 'inputBinding': {'position': 1, 'prefix': '-t'}}, 'fastq': {'type': 'File', 'inputBinding': {'position': 2}}}, 'outputs': {'out_html': {'type': 'File', 'outputBinding': {'glob': '*.html'}}, 'out_zip': {'type': 'File', 'outputBinding': {'glob': '*.zip'}}}, 'baseCommand': ['fastqc', '--outdir', '.', '--extract']}",
        "in": {
          "threads": "threads",
          "fastq": "fastqs"
        },
        "out": [
          "out_html",
          "out_zip"
        ]
      }
    }
  },
  {
    "path": "workflows/pre-processing/trimming-qc-pe.cwl",
    "sha": "c03c6567ed86aaf2048536f951e1975f9dcff98d",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/pre-processing/trimming-qc-pe.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\nid: trimming_quality_control\nlabel: trimming_quality_control\n\nrequirements:\n  SubworkflowFeatureRequirement: {}\n  InlineJavascriptRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  input_files:\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  phred: int?\n  minlen: int?\n  leading: int?\n  illuminaClip: string?\n  headcrop: int?\n  crop: int?\n  avgqual: int?\n  maxinfo: int?\n  threads: int\n  trailing: int?\n\noutputs:\n  fastqc_html:\n    outputSource: fastqc/out_html\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  fastqc_zip:\n    outputSource: fastqc/out_zip\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  fastq:\n    outputSource: trimming/trimmed\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n\nsteps:\n  trimming:\n    label: Trimmomatic\n    run: ../../tools/trimmomatic/trimmomatic-PE.cwl\n    scatter: input_files\n    in:\n      avgqual: avgqual\n      crop: crop\n      headcrop: headcrop\n      illuminaClip: illuminaClip\n      leading: leading\n      maxinfo: maxinfo\n      minlen: minlen\n      phred: phred\n      input_files: input_files\n      threads: threads\n      trailing: trailing\n    out: [trimmed, error]\n  fastqc:\n    run: ../../tools/fastqc/fastqc.cwl\n    label: fastqc\n    scatter: fastq\n    in:\n      fastq: trimming/trimmed\n      threads: threads\n    out: [out_html, out_zip]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": "trimming_quality_control",
    "cwl_inputs": "{'input_files': {'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'phred': 'int?', 'minlen': 'int?', 'leading': 'int?', 'illuminaClip': 'string?', 'headcrop': 'int?', 'crop': 'int?', 'avgqual': 'int?', 'maxinfo': 'int?', 'threads': 'int', 'trailing': 'int?'}",
    "cwl_outputs": "{'fastqc_html': {'outputSource': 'fastqc/out_html', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'fastqc_zip': {'outputSource': 'fastqc/out_zip', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'fastq': {'outputSource': 'trimming/trimmed', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'SubworkflowFeatureRequirement': {}, 'InlineJavascriptRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "trimming_quality_control",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "trimming": {
        "label": "Trimmomatic",
        "run": "../../tools/trimmomatic/trimmomatic-PE.cwl",
        "scatter": "input_files",
        "in": {
          "avgqual": "avgqual",
          "crop": "crop",
          "headcrop": "headcrop",
          "illuminaClip": "illuminaClip",
          "leading": "leading",
          "maxinfo": "maxinfo",
          "minlen": "minlen",
          "phred": "phred",
          "input_files": "input_files",
          "threads": "threads",
          "trailing": "trailing"
        },
        "out": [
          "trimmed",
          "error"
        ]
      },
      "fastqc": {
        "run": "../../tools/fastqc/fastqc.cwl",
        "label": "fastqc",
        "scatter": "fastq",
        "in": {
          "fastq": "trimming/trimmed",
          "threads": "threads"
        },
        "out": [
          "out_html",
          "out_zip"
        ]
      }
    }
  },
  {
    "path": "workflows/pre-processing/trimming-qc-se.cwl",
    "sha": "f33794ae46acc08b482768ecfa68336959b8d642",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/pre-processing/trimming-qc-se.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\n\nid: trimming_quality_control\nlabel: trimming_quality_control\n\nrequirements:\n  SubworkflowFeatureRequirement: {}\n  InlineJavascriptRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  input_files:\n    type: {\"type\": \"array\", \"items\": \"File\"}\n  phred: int?\n  minlen: int?\n  leading: int?\n  illuminaClip: string?\n  headcrop: int?\n  crop: int?\n  avgqual: int?\n  maxinfo: int?\n  threads: int\n  trailing: int?\n\noutputs:\n  fastqc_html:\n    outputSource: fastqc/out_html\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  fastqc_zip:\n    outputSource: fastqc/out_zip\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  fastq:\n    outputSource: trimming/trimmed\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n\nsteps:\n  trimming:\n    label: Trimmomatic\n    run: ../../tools/trimmomatic/trimmomatic-SE.cwl\n    scatter: input_files\n    in:\n      avgqual: avgqual\n      crop: crop\n      headcrop: headcrop\n      illuminaClip: illuminaClip\n      leading: leading\n      maxinfo: maxinfo\n      minlen: minlen\n      phred: phred\n      input_files: input_files\n      threads: threads\n      trailing: trailing\n    out: [trimmed]\n  fastqc:\n    run: ../../tools/fastqc/fastqc.cwl\n    label: fastqc\n    scatter: fastq\n    in:\n      fastq: trimming/trimmed\n      threads: threads\n    out: [out_html, out_zip]\n\n$namespaces:\n  s: http://schema.org/\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": "trimming_quality_control",
    "cwl_inputs": "{'input_files': {'type': {'type': 'array', 'items': 'File'}}, 'phred': 'int?', 'minlen': 'int?', 'leading': 'int?', 'illuminaClip': 'string?', 'headcrop': 'int?', 'crop': 'int?', 'avgqual': 'int?', 'maxinfo': 'int?', 'threads': 'int', 'trailing': 'int?'}",
    "cwl_outputs": "{'fastqc_html': {'outputSource': 'fastqc/out_html', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'fastqc_zip': {'outputSource': 'fastqc/out_zip', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'fastq': {'outputSource': 'trimming/trimmed', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'SubworkflowFeatureRequirement': {}, 'InlineJavascriptRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "trimming_quality_control",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "trimming": {
        "label": "Trimmomatic",
        "run": "../../tools/trimmomatic/trimmomatic-SE.cwl",
        "scatter": "input_files",
        "in": {
          "avgqual": "avgqual",
          "crop": "crop",
          "headcrop": "headcrop",
          "illuminaClip": "illuminaClip",
          "leading": "leading",
          "maxinfo": "maxinfo",
          "minlen": "minlen",
          "phred": "phred",
          "input_files": "input_files",
          "threads": "threads",
          "trailing": "trailing"
        },
        "out": [
          "trimmed"
        ]
      },
      "fastqc": {
        "run": "../../tools/fastqc/fastqc.cwl",
        "label": "fastqc",
        "scatter": "fastq",
        "in": {
          "fastq": "trimming/trimmed",
          "threads": "threads"
        },
        "out": [
          "out_html",
          "out_zip"
        ]
      }
    }
  },
  {
    "path": "workflows/sra/download_quality_control.cwl",
    "sha": "a111436fcdc064b1a07164e5389fc685aac45141",
    "source": "https://api.github.com/ncbi/cwl-ngs-workflows-cbb/blob/master/workflows/sra/download_quality_control.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: download_quality_control\ndoc: >-\n  This workflow download an SRA accession and perform quality control on it\n  using FastQC\nlabel: SRA download and QC\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  accession: string[]\n  ncbi_config: Directory\n  threads: int\n  X: int?\n  split-files: boolean?\n\noutputs:\n  fastqc_html:\n    outputSource: fastqc/out_html\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  fastqc_zip:\n    outputSource: fastqc/out_zip\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n  fastq:\n    outputSource: fastq_dump/output\n    type: {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": \"File\"}}\n\nsteps:\n  fastq_dump:\n    run: ../../tools/sra-tools/fastq-dump.cwl\n    label: fastq-dump-SE\n    scatter: accession\n    in:\n      ncbi_config: ncbi_config\n      accession: accession\n      X: X\n      gzip: { default: true }\n      split-files: split-files\n    out: [output]\n  fastqc:\n    run: ../../tools/fastqc/fastqc.cwl\n    label: fastqc\n    scatter: fastq\n    in:\n      fastq: fastq_dump/output\n      threads: threads\n    out: [out_html, out_zip]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0002-4108-5982\n    s:email: mailto:r78v10a07@gmail.com\n    s:name: Roberto Vera Alvarez\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-http.rdf\n",
    "cwl_class": "Workflow",
    "cwl_id": "download_quality_control",
    "cwl_inputs": "{'accession': 'string[]', 'ncbi_config': 'Directory', 'threads': 'int', 'X': 'int?', 'split-files': 'boolean?'}",
    "cwl_outputs": "{'fastqc_html': {'outputSource': 'fastqc/out_html', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'fastqc_zip': {'outputSource': 'fastqc/out_zip', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}, 'fastq': {'outputSource': 'fastq_dump/output', 'type': {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "This workflow download an SRA accession and perform quality control on it using FastQC",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "SRA download and QC",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-4108-5982', 's:email': 'mailto:r78v10a07@gmail.com', 's:name': 'Roberto Vera Alvarez'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "fastq_dump": {
        "run": "../../tools/sra-tools/fastq-dump.cwl",
        "label": "fastq-dump-SE",
        "scatter": "accession",
        "in": {
          "ncbi_config": "ncbi_config",
          "accession": "accession",
          "X": "X",
          "gzip": {
            "default": true
          },
          "split-files": "split-files"
        },
        "out": [
          "output"
        ]
      },
      "fastqc": {
        "run": "../../tools/fastqc/fastqc.cwl",
        "label": "fastqc",
        "scatter": "fastq",
        "in": {
          "fastq": "fastq_dump/output",
          "threads": "threads"
        },
        "out": [
          "out_html",
          "out_zip"
        ]
      }
    }
  }
]