[
  {
    "path": "Assembly/spades/spades.cwl",
    "sha": "503cfe9639963ebf271f37b31d28a4a5c7b53083",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/spades/spades.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: spades\nbaseCommand:\n  - bash\n#  - cat\ninputs:\n\n##############\n\n \n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n\n\n\n      \noutputs:\n\n  - id: out_contig_stats\n    type: File\n    outputBinding:\n      glob: out_contig_stats.*\n    doc: \"contig stats, default column_names: name,length,coverage\"\n\n  - id: out_scaffold_stats\n    type: File\n    outputBinding:\n      glob: out_scaffold_stats.*\n    doc: \"scaffold stats, default column_names: name,length,coverage\"\n\n  - id: out_contigs\n    type: File\n    outputBinding:\n      glob: contigs.fasta\n    doc: \"contigs (fasta sequence)\"\n\n  - id: out_scaffolds\n    type: File\n    outputBinding:\n      glob: scaffolds.fasta\n    doc: \"scaffolds (fasta sequence)\"\n\n  - id: all_script\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.sh\"  \n    doc: \"generated script to run spades. for learning purpose\" \n\n  - id: all_log\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.log\"  \n    doc: \"spades output log and warnings\" \n\n\n\n#  - id: out_log\n#    type: File\n#    outputBinding:\n#      glob: spades.log\n#    doc: \"spades output log\"\n\n\n  - id: assembly_graph\n    type: File\n    outputBinding:\n      glob: assembly_graph.fastg\n    doc: \"assembly graph\" \n\n \n  - id: assembly_graph_with_scaffolds\n    type: File\n    outputBinding:\n      glob: assembly_graph_with_scaffolds.gfa\n    doc: \"assembly graph with scaffolds\" \n\n\n############available ouput  files:\n#assembly_graph_with_scaffolds.gfa\n#assembly_graph.fastg\n#warnings.log\n#scaffolds.paths\n#contigs.paths\n#spades_wrapper.sh\n#before_rr.fasta\n#contigs.fasta\n#dataset.info\n#input_dataset.yaml\n#out_contig_stats.tab\n#out_scaffold_stats.tab\n#params.txt\n#run_spades.sh\n#scaffolds.fasta\n#write_tsv.py\n \n\n      \n      \narguments:\n  - spades_wrapper.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n####################\n      - entryname: write_tsv.py\n        entry: |\n               #######input file here\n               #!/usr/bin/env python\n               import sys,re\n               search_str = r'^>(NODE|\\S+)_(\\d+)(?:_|\\s)length_(\\d+)_cov_(\\d+\\.*\\d*).*\\$'\n               replace_str = r'\\1_\\2\\t\\3\\t\\4'\n               cmd = re.compile(search_str)\n               sys.stdout.write('#name\\tlength\\tcoverage\\n')\n               for i,line in enumerate(sys.stdin):\n                  if cmd.match(line):\n                     sys.stdout.write(cmd.sub(replace_str,line))\n\n####################\n      - entryname: spades_wrapper.sh\n        entry: |\n               ####################spades launcher\n               #!/bin/bash\n               ## An example command looks like:\n               ## spades.py -k 21,33,55,77,99,127 --careful -1 Y.fastq.gz -2 X.fastq.gz -t 24 -o output \n               read -d '' MEMORY_GB << EOF\n               ${ \n                //compute memory limits\n                var mem=\"250\"\n                if(runtime.ram){\n                  var bt=runtime.ram * 1048576 //mebibytes to bytes               \n                  bt=bt*0.000000001 //bytes to Gigabytes \n                  mem=parseInt(bt)\n                }\n                return \"-\"+mem\n               }\n               EOF\n               #echo \"MEMORY_GB limit: \\$MEMORY_GB\"\n               read -d '' CORES << EOF\n               ${ \n                //compute core / slot\n                var cores=\"16\" \n                if(runtime.cores){\n                  cores=runtime.cores\n                }\n                return  cores\n               }\n               EOF\n               #echo \"CORES : \\$CORES\"\n               read -d '' SPADES_OPT << EOF\n               ${   \n                 var opt=\"\"\n                   if (inputs.sc==true){\n                    opt+=\" --sc \"\n                   }\n                   if (inputs.onlyassembler==true){\n                    opt+=\" --only-assembler \"\n                   }\n                   if (inputs.careful==true){\n                    opt+=\" --careful \"\n                   }\n                 return opt  \n               }\n               EOF\n\n\n               read -d '' CMD_BASE << EOF\n               spades.py -o . --disable-gzip-output  \n                 \\$SPADES_OPT \n                -t \\$CORES -m \\$MEMORY_GB\n               ${   \n                 var opt=\"\"\n                   if (inputs.auto_kmer_choice==false){\n                    opt+=\" -k \"+inputs.kmers \n                   }\n                 return opt  \n               }\n               ${\n                 var opt=\"\"\n                 if (inputs.cov_state==null || inputs.cov_state == \"auto\"){\n                      opt+=\" --cov-cutoff 'auto' \"\n                  }\n                 else if (inputs.cov_state == \"value\"){\n                      opt+=\" --cov-cutoff '\"+inputs.cov_cutoff+\"' \"\n                  }\n                 if (inputs.iontorrent==true ){\n                      opt+=\" --iontorrent \"\n                 } \n                 return opt  \n               }\n               EOF\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' CMD_READ1 << EOF\n               ${\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n                      if (lmeta.lib_type !=null && lmeta.lib_type == \"paired_end\"){\n                           prefix = 'pe'\n                       } \n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"mate_paired\"){\n                           prefix = 'mp'\n                       }\n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"nxmate_paired\"){\n                           prefix = 'nxmate'\n                       }                       \n                      else {\n                           prefix = 'hqmp'\n                       }\n                      var idx=lmeta.lib_index\n                      lib_prefix[idx]=prefix\n                      opt+=\" --\"+prefix+idx+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n\n               #########################>DEBUG\n\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' ZZDEBUG << EOF\n               ${\n               //var opt=\"inputs.libraries_metadata.length:\"+inputs.libraries_metadata.length+\" \"              \n               //var str = JSON.stringify(inputs.libraries_metadata)\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   opt+=\" not null \"\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n \n                      opt+=\" !!-AA-\"+lmeta.lib_index+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n               #########################<DEBUG\n\n\n\n\n\n\n\n\n\n\n               read -d '' CMD_READ2 << EOF\n               ${\n                 var opt=\"\"\n                 if (inputs.pacbio_reads!=null){\n                   for(var i=0; i<inputs.pacbio_reads.length;i++){\n                      var read=inputs.pacbio_reads[i]\n                      opt+=\" --pacbio fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.nanopore_reads!=null){\n                   for(var i=0; i<inputs.nanopore_reads.length;i++){\n                      var read=inputs.nanopore_reads[i]\n                      opt+=\" --nanopore fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.sanger_reads!=null){\n                   for(var i=0; i<inputs.sanger_reads.length;i++){\n                      var read=inputs.sanger_reads[i]\n                      opt+=\" --sanger fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.trusted_contigs!=null){\n                   for(var i=0; i<inputs.trusted_contigs.length;i++){\n                      var read=inputs.trusted_contigs[i]\n                      opt+=\" --trusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.untrusted_contigs!=null){\n                   for(var i=0; i<inputs.untrusted_contigs.length;i++){\n                      var read=inputs.untrusted_contigs[i]\n                      opt+=\" --untrusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 return opt  \n               }\n               EOF\n               ##########################################\n               read -d '' CMD_POST << EOF\n                 && python write_tsv.py < contigs.fasta > out_contig_stats.tab\n                 && python write_tsv.py < scaffolds.fasta > out_scaffold_stats.tab\n               EOF\n               ##########################################   \n               # echo \"CMD_BASE : \\$CMD_BASE\"  > zz.txt   \\\\\n               #        && echo \"CMD_READ1 : \\$CMD_READ1\"  >> zz.txt   \\\\\n               #        && echo \"CMD_READ2 : \\$CMD_READ2\"  >> zz.txt   \\\\\n               #        && echo \"CMD_POST : \\$CMD_POST\"   >> zz.txt\n               COMMAND=\"\\$CMD_BASE \\$CMD_READ1 \\$CMD_READ2 \\$CMD_POST\"\n               COMMAND=\\$(echo $COMMAND|tr -d '\\\\n')\n               echo \"\\$COMMAND\"  > run_spades.sh\n               bash  ./run_spades.sh\n\n \n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  example workflow for js wrapper generation\n  see  https://github.com/rrwick/Unicycler\n  outputs : all genretated files\n\n\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "spades",
    "cwl_inputs": "[{'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contig_stats', 'type': 'File', 'outputBinding': {'glob': 'out_contig_stats.*'}, 'doc': 'contig stats, default column_names: name,length,coverage'}, {'id': 'out_scaffold_stats', 'type': 'File', 'outputBinding': {'glob': 'out_scaffold_stats.*'}, 'doc': 'scaffold stats, default column_names: name,length,coverage'}, {'id': 'out_contigs', 'type': 'File', 'outputBinding': {'glob': 'contigs.fasta'}, 'doc': 'contigs (fasta sequence)'}, {'id': 'out_scaffolds', 'type': 'File', 'outputBinding': {'glob': 'scaffolds.fasta'}, 'doc': 'scaffolds (fasta sequence)'}, {'id': 'all_script', 'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.sh'}, 'doc': 'generated script to run spades. for learning purpose'}, {'id': 'all_log', 'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.log'}, 'doc': 'spades output log and warnings'}, {'id': 'assembly_graph', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph.fastg'}, 'doc': 'assembly graph'}, {'id': 'assembly_graph_with_scaffolds', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph_with_scaffolds.gfa'}, 'doc': 'assembly graph with scaffolds'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['spades_wrapper.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "example workflow for js wrapper generation\nsee  https://github.com/rrwick/Unicycler\noutputs : all genretated files\n\n\n  \n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/spades/spades_assembly_wf.cwl",
    "sha": "e5b15b5b1c8d84ea3c891776c173b350315f02ba",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/spades/spades_assembly_wf.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: spaces_assembly\nlabel: spaces_assembly\n\n\n\ninputs:\n\n##############\n\n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n \n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n \n\noutputs:\n\n  - id: out_contigs\n    outputSource:\n      - spades/out_contigs\n    type: 'File'\n\n  - id: out_scaffolds\n    outputSource:\n      - spades/out_scaffolds\n    type: 'File'\n\n  - id: out_contig_stats\n    outputSource:\n      - spades/out_contig_stats\n    type: 'File'\n\n\n  - id: out_scaffold_stats\n    outputSource:\n      - spades/out_scaffold_stats\n    type: 'File'\n\n\n  - id: assembly_graph\n    outputSource:\n      - spades/assembly_graph\n    type: 'File'\n\n  - id: assembly_graph_with_scaffolds\n    outputSource:\n      - spades/assembly_graph_with_scaffolds\n    type: 'File'\n\n  - id: all_log\n    outputSource:\n      - spades/all_log\n    type: 'File[]'\n\n#  - id: all_script\n#    outputSource:\n#      - spades/all_script\n#    type: 'File[]'\n\n\n\n\n\nsteps:\n  - id: spades\n    in:\n\n\n      - id: nanopore_reads\n        source: nanopore_reads\n      - id: pacbio_reads\n        source: pacbio_reads\n      - id: sanger_reads\n        source: sanger_reads\n      - id: libraries_metadata\n        source: libraries_metadata\n      - id: libraries_fwd_rev\n        source: libraries_fwd_rev\n      - id: libraries_mono\n        source: libraries_mono\n      - id: trusted_contigs\n        source: trusted_contigs\n      - id: untrusted_contigs\n        source: untrusted_contigs\n      - id: cov_state\n        source: cov_state\n      - id: cov_cutoff\n        source: cov_cutoff\n      - id: iontorrent\n        source: iontorrent\n      - id: sc\n        source: sc\n      - id: onlyassembler\n        source: onlyassembler\n      - id: careful\n        source: careful\n\n    out:\n\n      - id: out_contigs\n      - id: out_scaffolds\n\n      - id: out_contig_stats\n      - id: out_scaffold_stats\n\n      - id: assembly_graph\n      - id: assembly_graph_with_scaffolds\n\n      - id: all_log\n#      - id: all_script\n\n\n\n    run: ../../bio-cwl-tools/spades/spades.cwl\n\nrequirements: []\n\ndoc: |\n       assemby workflow with  SPADES assembler\n\n    \n\n",
    "cwl_class": "Workflow",
    "cwl_id": "spaces_assembly",
    "cwl_inputs": "[{'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contigs', 'outputSource': ['spades/out_contigs'], 'type': 'File'}, {'id': 'out_scaffolds', 'outputSource': ['spades/out_scaffolds'], 'type': 'File'}, {'id': 'out_contig_stats', 'outputSource': ['spades/out_contig_stats'], 'type': 'File'}, {'id': 'out_scaffold_stats', 'outputSource': ['spades/out_scaffold_stats'], 'type': 'File'}, {'id': 'assembly_graph', 'outputSource': ['spades/assembly_graph'], 'type': 'File'}, {'id': 'assembly_graph_with_scaffolds', 'outputSource': ['spades/assembly_graph_with_scaffolds'], 'type': 'File'}, {'id': 'all_log', 'outputSource': ['spades/all_log'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "spaces_assembly",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/unicycler/assembly_unicycler_only.cwl",
    "sha": "7a196007b7e242d2f54d86d8d964d94dd48cc979",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/unicycler/assembly_unicycler_only.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: assembly\nlabel: assembly\ndoc:  \"Paired data assembly with Unicycler,  non long reads in this version\"\n\ninputs:\n\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n    doc:  \"Paired and single end data\"\n  \n  \n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n\n\n\n \noutputs:\n  - id: exec_script\n    outputSource:\n      - unicycler/exec_script\n    type: File\n \n  - id: assembly_graph\n    outputSource:\n      - unicycler/assembly_graph\n    type: File\n \n  - id: assembly\n    outputSource:\n      - unicycler/assembly\n    type: File\n \nsteps:\n  - id: unicycler\n    in:\n      - id: fastq1_type\n        source: fastq1_type\n      - id: fastq1\n        source: fastq1\n      - id: fastq2_type\n        source: fastq2_type\n      - id: fastq2\n        source: fastq2\n      - id: mode\n        source: mode\n      - id: fastq_file_type\n        source: fastq_file_type\n\n\n    out:\n      - id: exec_script\n      - id: assembly_graph\n      - id: assembly\n    run: ./unicycler.cwl\n    \nrequirements: []\n\n\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "assembly",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}]",
    "cwl_outputs": "[{'id': 'exec_script', 'outputSource': ['unicycler/exec_script'], 'type': 'File'}, {'id': 'assembly_graph', 'outputSource': ['unicycler/assembly_graph'], 'type': 'File'}, {'id': 'assembly', 'outputSource': ['unicycler/assembly'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Paired data assembly with Unicycler,  non long reads in this version",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "assembly",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/unicycler/unicycler.cwl",
    "sha": "f2fc606431cac7ca1e946c161672f9e9e06e4b9e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/unicycler/unicycler.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: unicycler\nbaseCommand:\n  - bash\n#  - cat\ninputs:\n\n\n \n##tyoe selector\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n#     symbols: [paired,single,paired_collection]\n#    default: single   \n    doc:  \"Paired and single end data\"\n\n##############\n\n##input1\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n\n##input2\n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n \n\n\n\n\n\n#sequence_long (optional)\n\n  - id: sequence_long_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - fastqsanger\n          - fastqsanger.gz\n          - fasta\n    doc: \"long reads file type. If there are no long reads, leave this empty\"\n\n    \n  - id: sequence_long\n    type:  File?\n    doc: \"long reads. If there are no long reads, leave this empty\"\n#    \n  - id: compute_slots\n    type:  int\n    default: 4\n    doc: \"\"\n    \n\n\n\n##mode selector\n\n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: min_fasta_length\n    type:  int\n    default: 100\n    doc: \"Exclude contigs from the FASTA file which are shorter than this length (bp)\"\n\n\n  - id: linear_seqs\n    type:  int\n    default: 0\n    doc: \"The expected number of linear (i.e. non-circular) sequences in the assembly\"\n\n\n  - id: min_anchor_seg_len\n    type:  int\n    default: 0\n    doc: \"Unicycler will not use segments shorter than this as scaffolding anchors\"\n\n\n  - id: spades_no_correct\n    type:  boolean\n    default: false\n    doc: |\n        Unicycler uses SPAdes to construct assembly graphs.\n        You can modify some of the SPAdes settings here.\n        Use this ONLY if you know what you are doing!\n        This option turns off SPAdes error correction. \n        Generally it is highly recommended to use correction.\n\n \n  - id: spades_min_kmer_frac\n    type:  float\n    default: 0.2\n    doc: |\n         Lowest k-mer size for SPAdes assembly,\n         expressed as a fraction of the read length. \n         min 0, max 1\n\n  - id: spades_max_kmer_frac\n    type:  float\n    default: 0.95\n#    max: 1.0\n#    min: 0.0\n    doc: |\n         Highest k-mer size for SPAdes assembly,\n         expressed as a fraction of the read length. \n         min 0, max 1\n\n  \n  # check default values\n  - id: spades_kmers\n    type:  string\n    default: \"11,127\"\n    doc: |\n         Exact k-mers size to use for SPAdes assembly, comma-separated\"\n         Kmers must be comma-separated odd integers (no repitition)\n         without space in the range of 11 to 127 (inclusive)\n\n  - id: spades_kmer_count\n    type:  int\n    default: 10\n#    min: 0\n    doc: \"Number of k-mer steps to use in SPAdes assembly, min 0\"\n\n\n \n  - id: spades_depth_filter\n    type:  float\n    default: 0.25\n#    min: 0.0\n#    max: 1.0\n    doc: |\n         Filter out contigs lower than this fraction \n         of the chromosomal depth.\n         It is done if does not result in graph dead ends\n         min 0, max 1\n\n  - id: spades_largest_component\n    type:  boolean\n    default: false\n    doc: \"Only keep the largest connected component of the assembly graph if true\"\n\n\n\n  - id: rotation_no_rotate\n    type:  boolean\n    default: false\n    doc: |\n         These options control the rotation of completed circular sequence\n         near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\n         Do not rotate completed replicons to start at a standard gene.\n         Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\n         If one is found, the sequence is rotated and/or flipped so that it begins with that gene\n         encoded on the forward strand. This provides consistently oriented assemblies and reduces\n         the risk that a gene will be split across the start and end of the sequence.\n    \n  - id: rotation_start_genes\n    type:  File? \n    doc: \"FASTA file of genes for start point of rotated replicons\"\n\n\n\n  - id: rotation_start_gene_id\n    type:  float\n    default: 90.0\n    doc: \"The minimum required BLAST percent identity for a start gene search. max 100, min 0\"\n\n\n  - id: rotation_start_gene_cov\n    type:  float\n    default: 95.0\n    doc: \"The minimum required BLAST percent coverage for a start gene search. min 0, max 100\"\n\n\n  - id: pilon_no_pilon\n    type:  boolean\n    default: false\n    doc: \"Unicycler uses Pilon tool for polishing final assembly. Do not use if true\"\n\n\n  - id: graph_clean_min_component_size\n    type:  int\n    default: 1000\n    doc: \"Contigs shorter than this value (bp) will not be polished using Pilon; min 0\"\n\n    \n  - id: graph_clean_min_dead_end_size\n    type:  int\n    default: 1000\n    doc: |\n         These options control the removal of small leftover sequences after bridging is complete.\n         Unbridged graph components smaller than this size will be removed from the final graph,\n         min 0    \n\n  - id: lr_align_contamination\n    type:  File?\n    doc: |\n         FASTA file of known contamination in long reads,\n         e.g. lambda, phiXm or puc18 spike-ins. \n\n  - id: lr_align_scores\n    type:  string\n    default: \"3,-6,-5,-2\"\n    doc: |\n          Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\n\n\n  - id: lr_align_low_score\n    type:  int?\n    doc: |\n          Score threshold - alignments below this are considered poor,\n          default = set automatically\n\n\n\n \n    \noutputs:\n  - id: exec_script\n    type: File\n    outputBinding:\n      glob: \"*.sh\"  \n    doc: |\n          Launching script for learning purpose\n\n\n  - id: assembly_graph\n    type: File\n    outputBinding:\n      glob: assembly.gfa\n    doc: |\n          Assembly graph\n\n\n\n  - id: assembly\n    type: File\n    outputBinding:\n      glob: assembly.fasta\n    doc: |\n          fasta assembly output sequence\n          (main output)\n      \n      \narguments:\n  - unicycler_launch.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: unicycler_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               #      unicycler launcher\n               ###########################\n\n               ##preparing input files\n               #check permission / chmod  is issues\n               ${\n                 var fl=\"\"\n                 var lncmd=\"\" \n                 var fq1=\"\"\n                 var fq2=\"\"\n                 var lr=\"\"\n                  \n               //###################paired case              \n                     if (inputs.fastq_file_type ==\"paired\"  ){\n                      if( inputs.fastq1_type=='fastqsanger' ){\n                          fq1 = \"fq1.fastq\"\n                      }\n                      else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                           fq1 = \"fq1.fastq.gz\"\n                      }\n                      if( inputs.fastq2_type=='fastqsanger' ){\n                          fq2 = \"fq2.fastq\"\n                       }\n                       else if( inputs.fastq2_type=='fastqsanger.gz' ){\n                           fq2 = \"fq2.fastq.gz\"\n                        }\n                        lncmd+=\"fq1='\"+fq1+\"'\"\n                        lncmd+=\" && \"\n                        lncmd+=\"fq2='\"+fq2+\"'\"\n                        lncmd+=\" && \"\n                        lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                        lncmd+=\" && \"\n                        lncmd+=\" ln -s '\"+inputs.fastq2.path+\"' $fq2  \"\n        \n                     }\n                //###################single case\n                 \n                if (inputs.fastq_file_type ==\"single\"  ){\n                  if( inputs.fastq1_type=='fastqsanger' ){\n                      fq1 = \"fq1.fastq\"\n                  }\n                  else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                       fq1 = \"fq1.fastq.gz\"\n                  }\n                  lncmd+=\"fq1='\"+fq1+\"'\"\n                  lncmd+=\" && \"\n                  lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                 }\n                 //####### long reads\n                  if (  inputs.sequence_long !== null) {\n                      if (inputs.sequence_long_type=='fastqsanger'){\n                               lr = \"lr.fastq\"\n                      }\n                      else if (inputs.sequence_long_type=='fastqsanger.gz') {\n                               lr = \"lr.fastq.gz\"\n                      }\n                      else if (inputs.sequence_longg_type=='fasta') {\n                               lr = \"lr.fasta\"\n                      }\n                      lncmd+=\"lr='\"+lr+\"'\"\n                      lncmd+=\" && \"\n                      lncmd+= \" ln -s '\"+inputs.sequence_long.path+\"' '$lr' \"\n                  }\n\n\n                  return lncmd\n\n               }\n\n\n               ##general options\n\n               read -d '' GENERALOPT << EOF\n               ${\n                var opt=\"\"  \n                //## General Unicycler Options section\n                opt+=\" --mode \"+inputs.mode+\" \"\n                opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\n                opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\n\n                if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\n\n                //## Spades Options section\n                if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\n                opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\n                opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\n                if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\n                               \n                opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\n                opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\n                if (inputs.spades_largest_component){opt+=\" --largest_component \"}\n                //## Rotation Options section\n                if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\n                if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\n                opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\n                opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\n                return opt\n                }\n               EOF\n               \n               ##additionnal option\n              \n               read -d '' ADDOPT << EOF\n               ${\n\n                var opt=\"\"\n                \n                if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\n                if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\n                //## Long Read Alignment Options\n                if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\n                opt+=\" --scores \"+inputs.lr_align_scores+\" \"\n                if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\n                 return ''+ opt + ''\n               }\n               EOF\n\n               ## Get location for pilon jar file\n\n               ${\n                 var cmd=\"\"  \n                 cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\n                 return cmd\n               }   \n\n               ## Build Unicycler command\n               ${\n               \n                 var cmd_base=\"\"\n                 var opt=\"\"\n\n                 \n                 \n                 \n                 cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\n                 cmd_base+=\" -o ./  \"\n                 cmd_base+=\" --verbosity 3  \"\n                 cmd_base+=\" --pilon_path \\$PILONJAR  \"\n\n                \n                if ( inputs.fastq_file_type == \"paired\"){\n                       opt+=\" -1 $fq1 -2 $fq2  \"\n                }\n                else if ( inputs.fastq_file_type == \"paired_collection\"){\n                       opt+=\" -1 $fq1 -2 $fq2  \"\n                }  \n                else if ( inputs.fastq_file_type == \"single\"){\n                   opt+=\" -s $fq1 \"\n                }\n                if (  inputs.sequence_long !== null) {\n                  opt+=\" -l $lr \"\n                }\n\n\n                //##  Unicycler command\n                var cmdl=cmd_base+\" \"+opt+\" \\$GENERALOPT \\$ADDOPT \"\n               \n                return cmdl\n\n                }\n                \n\n \n#        writable: false\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  CWL  wrapped for Unicycler.\n  an hybrid assembly pipeline for bacterial genomes\n  see  https://github.com/rrwick/Unicycler\n  outputs\n    final assembly in FASTA format (major output)\n    final assembly grapth in graph format, visualized using tools such as  \n    Bandage  https://github.com/rrwick/Bandage      \n\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "unicycler",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}, {'id': 'sequence_long_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz', 'fasta']}], 'doc': 'long reads file type. If there are no long reads, leave this empty'}, {'id': 'sequence_long', 'type': 'File?', 'doc': 'long reads. If there are no long reads, leave this empty'}, {'id': 'compute_slots', 'type': 'int', 'default': 4, 'doc': ''}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'min_fasta_length', 'type': 'int', 'default': 100, 'doc': 'Exclude contigs from the FASTA file which are shorter than this length (bp)'}, {'id': 'linear_seqs', 'type': 'int', 'default': 0, 'doc': 'The expected number of linear (i.e. non-circular) sequences in the assembly'}, {'id': 'min_anchor_seg_len', 'type': 'int', 'default': 0, 'doc': 'Unicycler will not use segments shorter than this as scaffolding anchors'}, {'id': 'spades_no_correct', 'type': 'boolean', 'default': False, 'doc': 'Unicycler uses SPAdes to construct assembly graphs.\\nYou can modify some of the SPAdes settings here.\\nUse this ONLY if you know what you are doing!\\nThis option turns off SPAdes error correction. \\nGenerally it is highly recommended to use correction.\\n'}, {'id': 'spades_min_kmer_frac', 'type': 'float', 'default': 0.2, 'doc': 'Lowest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length. \\nmin 0, max 1\\n'}, {'id': 'spades_max_kmer_frac', 'type': 'float', 'default': 0.95, 'doc': 'Highest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length. \\nmin 0, max 1\\n'}, {'id': 'spades_kmers', 'type': 'string', 'default': '11,127', 'doc': 'Exact k-mers size to use for SPAdes assembly, comma-separated\"\\nKmers must be comma-separated odd integers (no repitition)\\nwithout space in the range of 11 to 127 (inclusive)\\n'}, {'id': 'spades_kmer_count', 'type': 'int', 'default': 10, 'doc': 'Number of k-mer steps to use in SPAdes assembly, min 0'}, {'id': 'spades_depth_filter', 'type': 'float', 'default': 0.25, 'doc': 'Filter out contigs lower than this fraction \\nof the chromosomal depth.\\nIt is done if does not result in graph dead ends\\nmin 0, max 1\\n'}, {'id': 'spades_largest_component', 'type': 'boolean', 'default': False, 'doc': 'Only keep the largest connected component of the assembly graph if true'}, {'id': 'rotation_no_rotate', 'type': 'boolean', 'default': False, 'doc': 'These options control the rotation of completed circular sequence\\nnear the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\\nDo not rotate completed replicons to start at a standard gene.\\nUnicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\\nIf one is found, the sequence is rotated and/or flipped so that it begins with that gene\\nencoded on the forward strand. This provides consistently oriented assemblies and reduces\\nthe risk that a gene will be split across the start and end of the sequence.\\n'}, {'id': 'rotation_start_genes', 'type': 'File?', 'doc': 'FASTA file of genes for start point of rotated replicons'}, {'id': 'rotation_start_gene_id', 'type': 'float', 'default': 90.0, 'doc': 'The minimum required BLAST percent identity for a start gene search. max 100, min 0'}, {'id': 'rotation_start_gene_cov', 'type': 'float', 'default': 95.0, 'doc': 'The minimum required BLAST percent coverage for a start gene search. min 0, max 100'}, {'id': 'pilon_no_pilon', 'type': 'boolean', 'default': False, 'doc': 'Unicycler uses Pilon tool for polishing final assembly. Do not use if true'}, {'id': 'graph_clean_min_component_size', 'type': 'int', 'default': 1000, 'doc': 'Contigs shorter than this value (bp) will not be polished using Pilon; min 0'}, {'id': 'graph_clean_min_dead_end_size', 'type': 'int', 'default': 1000, 'doc': 'These options control the removal of small leftover sequences after bridging is complete.\\nUnbridged graph components smaller than this size will be removed from the final graph,\\nmin 0    \\n'}, {'id': 'lr_align_contamination', 'type': 'File?', 'doc': 'FASTA file of known contamination in long reads,\\ne.g. lambda, phiXm or puc18 spike-ins. \\n'}, {'id': 'lr_align_scores', 'type': 'string', 'default': '3,-6,-5,-2', 'doc': 'Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\\n'}, {'id': 'lr_align_low_score', 'type': 'int?', 'doc': 'Score threshold - alignments below this are considered poor,\\ndefault = set automatically\\n'}]",
    "cwl_outputs": "[{'id': 'exec_script', 'type': 'File', 'outputBinding': {'glob': '*.sh'}, 'doc': 'Launching script for learning purpose\\n'}, {'id': 'assembly_graph', 'type': 'File', 'outputBinding': {'glob': 'assembly.gfa'}, 'doc': 'Assembly graph\\n'}, {'id': 'assembly', 'type': 'File', 'outputBinding': {'glob': 'assembly.fasta'}, 'doc': 'fasta assembly output sequence\\n(main output)\\n'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['unicycler_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  wrapped for Unicycler.\nan hybrid assembly pipeline for bacterial genomes\nsee  https://github.com/rrwick/Unicycler\noutputs\n  final assembly in FASTA format (major output)\n  final assembly grapth in graph format, visualized using tools such as  \n  Bandage  https://github.com/rrwick/Bandage      \n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/assembly-wf-virus.cwl",
    "sha": "9535d8401797217e2a724b1e82e239539bd69251",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/assembly-wf-virus.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: assembly_wf_virus\nlabel: assembly-wf-virus\n \ndoc:  \"Virus genome assembly with Unicycler and spades, in parallel. visualisation with bandage\"\n\n\ninputs:\n\n##############unicycler\n\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n    doc:  \"Paired and single end data\"\n  \n  \n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n\n\n\n\n##############spades\n\n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n \n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n \n\n\n\n\noutputs:\n\n  - id: out_contigs_spades\n    outputSource:\n      - spades/out_contigs\n    type: 'File'\n\n  - id: out_scaffolds_spades\n    outputSource:\n      - spades/out_scaffolds\n    type: 'File'\n\n  - id: out_contig_stats_spades\n    outputSource:\n      - spades/out_contig_stats\n    type: 'File'\n\n\n  - id: out_scaffold_stats_spades\n    outputSource:\n      - spades/out_scaffold_stats\n    type: 'File'\n\n\n  - id: assembly_graph_spades\n    outputSource:\n      - spades/assembly_graph\n    type: 'File'\n\n  - id: assembly_graph_with_scaffolds_spades\n    outputSource:\n      - spades/assembly_graph_with_scaffolds\n    type: 'File'\n\n  - id: all_log_spades\n    outputSource:\n      - spades/all_log\n    type: 'File[]'\n\n#  - id: all_script\n#    outputSource:\n#      - spades/all_script\n#    type: 'File[]'\n\n  - id: assembly_image_spades\n    outputSource:\n      - bandage_image_spades/image\n\n\n    type: File\n\n  - id: assembly_info_spades\n    outputSource:\n      - bandage_info_spades/assembly_graph_info\n    type: File\n\n\n  - id: assembly_graph_unicycler\n    outputSource:\n      - unicycler/assembly_graph\n    type: File\n \n  - id: assembly_unicycler\n    outputSource:\n      - unicycler/assembly\n    type: File\n \n\n#  - id: exec_script2\n#    outputSource:\n#      - unicycler/exec_script\n#    type: File\n\n\n  - id: assembly_image_unicycler\n    outputSource:\n      - bandage_image_unicycler/image\n    type: File\n\n  - id: assembly_info_unicycler\n    outputSource:\n      - bandage_info_unicycler/assembly_graph_info\n    type: File\n\n\n\n\n\n\n\n\n\n\nsteps:\n\n  - id: unicycler\n    in:\n      - id: fastq1_type\n        source: fastq1_type\n      - id: fastq1\n        source: fastq1\n      - id: fastq2_type\n        source: fastq2_type\n      - id: fastq2\n        source: fastq2\n      - id: mode\n        source: mode\n      - id: fastq_file_type\n        source: fastq_file_type\n\n\n    out:\n#      - id: exec_script\n      - id: assembly_graph\n      - id: assembly\n \n#    run: ../../bio-cwl-tools/unicycler/unicycler.cwl\n    run: ./tool/unicycler.cwl \n\n\n  - id: spades\n    in:\n\n      - id: nanopore_reads\n        source: nanopore_reads\n      - id: pacbio_reads\n        source: pacbio_reads\n      - id: sanger_reads\n        source: sanger_reads\n      - id: libraries_metadata\n        source: libraries_metadata\n      - id: libraries_fwd_rev\n        source: libraries_fwd_rev\n      - id: libraries_mono\n        source: libraries_mono\n      - id: trusted_contigs\n        source: trusted_contigs\n      - id: untrusted_contigs\n        source: untrusted_contigs\n      - id: cov_state\n        source: cov_state\n      - id: cov_cutoff\n        source: cov_cutoff\n      - id: iontorrent\n        source: iontorrent\n      - id: sc\n        source: sc\n      - id: onlyassembler\n        source: onlyassembler\n      - id: careful\n        source: careful\n\n      - id: auto_kmer_choice\n        source: auto_kmer_choice\n\n      - id: kmers\n        source: kmers\n \n    out:\n\n      - id: out_contigs\n      - id: out_scaffolds\n\n      - id: out_contig_stats\n      - id: out_scaffold_stats\n\n      - id: assembly_graph\n      - id: assembly_graph_with_scaffolds\n\n      - id: all_log\n#      - id: all_script\n\n#    run: ../../bio-cwl-tools/spades/spades.cwl\n    run: ./tool/spades.cwl \n \n  - id: bandage_image_unicycler\n    in:\n      - id: graph\n        source: unicycler/assembly_graph\n    out:\n      - id: image\n#    run: ../../bio-cwl-tools/bandage/bandage-image.cwl\n    run: ./tool/bandage-image.cwl\n \n  - id: bandage_info_unicycler\n    in:\n      - id: graph\n        source: unicycler/assembly_graph\n    out:\n      - id: assembly_graph_info\n#    run: ../../bio-cwl-tools/bandage/bandage-info.cwl\n    run: ./tool/bandage-info.cwl \n  - id: bandage_image_spades\n    in:\n      - id: graph\n        source: spades/assembly_graph\n    out:\n      - id: image\n#    run: ../../bio-cwl-tools/bandage/bandage-image.cwl\n    run: ./tool/bandage-image.cwl \n  - id: bandage_info_spades\n    in:\n      - id: graph\n        source: spades/assembly_graph\n    out:\n      - id: assembly_graph_info\n#    run: ../../bio-cwl-tools/bandage/bandage-info.cwl\n    run: ./tool/bandage-info.cwl\n\n\n    \nrequirements: []\n\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "assembly_wf_virus",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}, {'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contigs_spades', 'outputSource': ['spades/out_contigs'], 'type': 'File'}, {'id': 'out_scaffolds_spades', 'outputSource': ['spades/out_scaffolds'], 'type': 'File'}, {'id': 'out_contig_stats_spades', 'outputSource': ['spades/out_contig_stats'], 'type': 'File'}, {'id': 'out_scaffold_stats_spades', 'outputSource': ['spades/out_scaffold_stats'], 'type': 'File'}, {'id': 'assembly_graph_spades', 'outputSource': ['spades/assembly_graph'], 'type': 'File'}, {'id': 'assembly_graph_with_scaffolds_spades', 'outputSource': ['spades/assembly_graph_with_scaffolds'], 'type': 'File'}, {'id': 'all_log_spades', 'outputSource': ['spades/all_log'], 'type': 'File[]'}, {'id': 'assembly_image_spades', 'outputSource': ['bandage_image_spades/image'], 'type': 'File'}, {'id': 'assembly_info_spades', 'outputSource': ['bandage_info_spades/assembly_graph_info'], 'type': 'File'}, {'id': 'assembly_graph_unicycler', 'outputSource': ['unicycler/assembly_graph'], 'type': 'File'}, {'id': 'assembly_unicycler', 'outputSource': ['unicycler/assembly'], 'type': 'File'}, {'id': 'assembly_image_unicycler', 'outputSource': ['bandage_image_unicycler/image'], 'type': 'File'}, {'id': 'assembly_info_unicycler', 'outputSource': ['bandage_info_unicycler/assembly_graph_info'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Virus genome assembly with Unicycler and spades, in parallel. visualisation with bandage",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "assembly-wf-virus",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/workflow/tool/bandage-image.cwl",
    "sha": "438657f5a59b4e1df5551b01233099cfc61fb673",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/bandage-image.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nid: bandage-image\ninputs:\n\n  - id: graph\n    type: File\n    doc: |\n        Graphical Fragment Assembly\n        Supports multiple assembly graph formats: \n        LastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\n \n\n  - id: format\n    type:  string\n    default: jpg\n    doc: |\n        Produce jpg, png or svg file\n\n\n  - id: height\n    type:  int\n    default: 1000\n    doc: |\n        Image height.If only height or width is set, \n        the other will be determined automatically.\n        If both are set, the image will be exactly that size.\n\n\n  - id: width\n    type:  int?\n    doc: |\n        Image width. If only height or width is set, the other will be determined automatically.\n        If both are set, the image will be exactly that size.\n\n\n  - id: node_name\n    type:  boolean\n    default: true\n    doc: |\n        If true, define Node labels as name \n\n  - id: node_length\n    type:  boolean\n    default: true\n    doc: |\n        If true, define Node labels as length \n\n\noutputs:\n\n\n# - id: all_script\n#   type:\n#      - type: array\n#        items: File\n#   outputBinding:\n#      glob: \"*.sh\"  \n#   doc: \"generated script to run bandage. for learning purpose\" \n\n\n - id: image\n   type: File\n   outputBinding:\n      glob: \"*.$(inputs.format)\"\n   doc: \"Assembly Graph Image\"\n\n\n\n\nbaseCommand: bash\n\narguments: [bandage_image_launch.sh]\n\nhints:\n  DockerRequirement:\n    dockerPull: \"fjrmore/bandage\" \n\n\nrequirements:\n  - class:  InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: bandage_image_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               # Bandage image wrapper  \n               export QT_QPA_PLATFORM=minimal\n               TMPDIR=$PWD\"/tmp_runtime-bandage\"\n               mkdir -p $TMPDIR\n               export XDG_RUNTIME_DIR=$TMPDIR\n               GRAPH=\"$(inputs.graph.path)\"\n               IMAGE=\"$(inputs.graph.nameroot).$(inputs.format)\"\n               Bandage image $GRAPH $IMAGE  \\\\\n               ${\n                var opt=\"\"\n                if(inputs.height!=null){ \n                 opt+=\" --height \"+inputs.height+ \" \"\n                }\n                if(inputs.width!=null){ \n                 opt+=\" --width \"+inputs.width +\" \"\n                }\n                if(inputs.node_length==true){ \n                 opt+=\" --names \"\n                }\n                if(inputs.node_length==true){ \n                 opt+=\" --lengths \"\n                }\n                return opt\n               }  \n\n\ndoc: |\n  CWL  tool for Bandage-info.\n  an hybrid assembly pipeline for bacterial genomes\n  *Bandage Overview**\n  Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \n  such as Velvet, SPAdes,   MEGAHIT and others.\n  De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \n  which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \n  Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \n  with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \n  By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \n  that are not possible by looking at contigs alone. \n  Bandage works with Graphical Fragment Assembly (GFA) files. \n  For more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "bandage-image",
    "cwl_inputs": "[{'id': 'graph', 'type': 'File', 'doc': 'Graphical Fragment Assembly\\nSupports multiple assembly graph formats: \\nLastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\\n'}, {'id': 'format', 'type': 'string', 'default': 'jpg', 'doc': 'Produce jpg, png or svg file\\n'}, {'id': 'height', 'type': 'int', 'default': 1000, 'doc': 'Image height.If only height or width is set, \\nthe other will be determined automatically.\\nIf both are set, the image will be exactly that size.\\n'}, {'id': 'width', 'type': 'int?', 'doc': 'Image width. If only height or width is set, the other will be determined automatically.\\nIf both are set, the image will be exactly that size.\\n'}, {'id': 'node_name', 'type': 'boolean', 'default': True, 'doc': 'If true, define Node labels as name \\n'}, {'id': 'node_length', 'type': 'boolean', 'default': True, 'doc': 'If true, define Node labels as length \\n'}]",
    "cwl_outputs": "[{'id': 'image', 'type': 'File', 'outputBinding': {'glob': '*.$(inputs.format)'}, 'doc': 'Assembly Graph Image'}]",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'fjrmore/bandage'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['bandage_image_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  tool for Bandage-info.\nan hybrid assembly pipeline for bacterial genomes\n*Bandage Overview**\nBandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \nsuch as Velvet, SPAdes,   MEGAHIT and others.\nDe novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \nwhich were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \nNodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \nwith the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \nBy displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \nthat are not possible by looking at contigs alone. \nBandage works with Graphical Fragment Assembly (GFA) files. \nFor more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/bandage-info.cwl",
    "sha": "747073c5710648c8f2d4636df74c0cd004c42dc9",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/bandage-info.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nid: bandage-info\ninputs:\n\n  - id: graph\n    type:  File\n    doc: |\n        Graphical Fragment Assembly.\n        Supports multiple\n        assembly graph formats: \n        LastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.    \n\n\n  - id: tsv\n    type:  boolean\n    default: false\n    doc: |\n        If true, output the information in a single tab-delimited line \n        starting with the graph file\n\n\n\n\n\noutputs:\n\n# - id: all_script\n#   type:\n#      - type: array\n#        items: File\n#   outputBinding:\n#      glob: \"*.sh\"  \n#   doc: \"generated script to run bandage. for learning purpose\" \n\n - id: assembly_graph_info\n   type: File\n   outputBinding:\n      glob: \"assembly_graph_info.txt\"\n   doc: \"Assembly Graph Information\"\n\n\n\n\nbaseCommand: bash\n\narguments: [bandage_info_launch.sh]\n\nhints:\n  DockerRequirement:\n    dockerPull: \"fjrmore/bandage\" \n\n\nrequirements:\n  - class:  InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: bandage_info_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               # Bandage info wrapper  \n               export QT_QPA_PLATFORM=minimal\n               TMPDIR=$PWD\"/tmp_runtime-bandage\"\n               mkdir -p $TMPDIR\n               export XDG_RUNTIME_DIR=$TMPDIR\n               Bandage info '$(inputs.graph.path)' \\\\\n               ${\n                var opt=\"\"\n                if(inputs.tsv==true){ \n                 opt+=\" --tsv \"\n                }\n                return opt\n               } \\\\\n                > assembly_graph_info.txt\n\n\ndoc: |\n  CWL  tool for Bandage-info.\n  an hybrid assembly pipeline for bacterial genomes\n  *Bandage Overview**\n  Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \n  such as Velvet, SPAdes,   MEGAHIT and others.\n  De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \n  which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \n  Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \n  with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \n  By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \n  that are not possible by looking at contigs alone. \n  Bandage works with Graphical Fragment Assembly (GFA) files. \n  For more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "bandage-info",
    "cwl_inputs": "[{'id': 'graph', 'type': 'File', 'doc': 'Graphical Fragment Assembly.\\nSupports multiple\\nassembly graph formats: \\nLastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.    \\n'}, {'id': 'tsv', 'type': 'boolean', 'default': False, 'doc': 'If true, output the information in a single tab-delimited line \\nstarting with the graph file\\n'}]",
    "cwl_outputs": "[{'id': 'assembly_graph_info', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph_info.txt'}, 'doc': 'Assembly Graph Information'}]",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'fjrmore/bandage'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['bandage_info_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  tool for Bandage-info.\nan hybrid assembly pipeline for bacterial genomes\n*Bandage Overview**\nBandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \nsuch as Velvet, SPAdes,   MEGAHIT and others.\nDe novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \nwhich were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \nNodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \nwith the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \nBy displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \nthat are not possible by looking at contigs alone. \nBandage works with Graphical Fragment Assembly (GFA) files. \nFor more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/spades.cwl",
    "sha": "b0c592181bc514fd900beb82f0f9c63eb88e6a7d",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/spades.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand:\n  - bash\n\ninputs:\n  libraries_metadata:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             orientation: string?\n             lib_type: string? \n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n  libraries_fwd_rev:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             fwd_reads: File?\n             rev_reads: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n  libraries_mono:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             file_type: string?\n             reads: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n  pacbio_reads:\n    type: File[]?\n  nanopore_reads:\n    type: File[]?\n  sanger_reads:\n    type: File[]?\n  trusted_contigs:\n    type: File[]?\n  untrusted_contigs:\n    type: File[]?\n  auto_kmer_choice:\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n  kmers:\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n  cov_state:\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n  cov_cutoff:\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n  iontorrent:\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n  sc:\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n  onlyassembler:\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n  careful:\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\noutputs:\n  out_contig_stats:\n    type: File\n    outputBinding:\n      glob: out_contig_stats.*\n    doc: \"contig stats, default column_names: name,length,coverage\"\n  out_scaffold_stats:\n    type: File\n    outputBinding:\n      glob: out_scaffold_stats.*\n    doc: \"scaffold stats, default column_names: name,length,coverage\"\n\n  out_contigs:\n    type: File\n    outputBinding:\n      glob: contigs.fasta\n    doc: \"contigs (fasta sequence)\"\n\n  out_scaffolds:\n    type: File\n    outputBinding:\n      glob: scaffolds.fasta\n    doc: \"scaffolds (fasta sequence)\"\n#  - id: all_script\n#    type:\n#      - type: array\n#        items: File\n#    outputBinding:\n#      glob: \"*.sh\"  \n#    doc: \"generated script to run spades. for learning purpose\" \n  all_log:\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.log\"  \n    doc: \"spades output log and warnings\" \n#  - id: out_log\n#    type: File\n#    outputBinding:\n#      glob: spades.log\n#    doc: \"spades output log\"\n  assembly_graph:\n    type: File\n    outputBinding:\n      glob: assembly_graph.fastg\n    doc: \"assembly graph\" \n  assembly_graph_with_scaffolds:\n    type: File\n    outputBinding:\n      glob: assembly_graph_with_scaffolds.gfa\n    doc: \"assembly graph with scaffolds\" \n      \narguments:\n  - spades_wrapper.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n####################\n      - entryname: write_tsv.py\n        entry: |\n               #######input file here\n               #!/usr/bin/env python\n               import sys,re\n               search_str = r'^>(NODE|\\S+)_(\\d+)(?:_|\\s)length_(\\d+)_cov_(\\d+\\.*\\d*).*\\$'\n               replace_str = r'\\1_\\2\\t\\3\\t\\4'\n               cmd = re.compile(search_str)\n               sys.stdout.write('#name\\tlength\\tcoverage\\n')\n               for i,line in enumerate(sys.stdin):\n                  if cmd.match(line):\n                     sys.stdout.write(cmd.sub(replace_str,line))\n\n####################\n      - entryname: spades_wrapper.sh\n        entry: |\n               ####################spades launcher\n               #!/bin/bash\n               ## An example command looks like:\n               ## spades.py -k 21,33,55,77,99,127 --careful -1 Y.fastq.gz -2 X.fastq.gz -t 24 -o output \n               read -d '' MEMORY_GB << EOF\n               ${ \n                //compute memory limits\n                var mem=\"250\"\n                if(runtime.ram){\n                  var bt=runtime.ram * 1048576 //mebibytes to bytes               \n                  bt=bt*0.000000001 //bytes to Gigabytes \n                  mem=parseInt(bt)\n                }\n                return \"-\"+mem\n               }\n               EOF\n               #echo \"MEMORY_GB limit: \\$MEMORY_GB\"\n               read -d '' CORES << EOF\n               ${ \n                //compute core / slot\n                var cores=\"16\" \n                if(runtime.cores){\n                  cores=runtime.cores\n                }\n                return  cores\n               }\n               EOF\n               #echo \"CORES : \\$CORES\"\n               read -d '' SPADES_OPT << EOF\n               ${   \n                 var opt=\"\"\n                   if (inputs.sc==true){\n                    opt+=\" --sc \"\n                   }\n                   if (inputs.onlyassembler==true){\n                    opt+=\" --only-assembler \"\n                   }\n                   if (inputs.careful==true){\n                    opt+=\" --careful \"\n                   }\n                 return opt  \n               }\n               EOF\n\n\n               read -d '' CMD_BASE << EOF\n               spades.py -o . --disable-gzip-output  \n                 \\$SPADES_OPT \n                -t \\$CORES -m \\$MEMORY_GB\n               ${   \n                 var opt=\"\"\n                   if (inputs.auto_kmer_choice==false){\n                    opt+=\" -k \"+inputs.kmers \n                   }\n                 return opt  \n               }\n               ${\n                 var opt=\"\"\n                 if (inputs.cov_state==null || inputs.cov_state == \"auto\"){\n                      opt+=\" --cov-cutoff 'auto' \"\n                  }\n                 else if (inputs.cov_state == \"value\"){\n                      opt+=\" --cov-cutoff '\"+inputs.cov_cutoff+\"' \"\n                  }\n                 if (inputs.iontorrent==true ){\n                      opt+=\" --iontorrent \"\n                 } \n                 return opt  \n               }\n               EOF\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' CMD_READ1 << EOF\n               ${\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n                      if (lmeta.lib_type !=null && lmeta.lib_type == \"paired_end\"){\n                           prefix = 'pe'\n                       } \n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"mate_paired\"){\n                           prefix = 'mp'\n                       }\n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"nxmate_paired\"){\n                           prefix = 'nxmate'\n                       }                       \n                      else {\n                           prefix = 'hqmp'\n                       }\n                      var idx=lmeta.lib_index\n                      lib_prefix[idx]=prefix\n                      opt+=\" --\"+prefix+idx+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n\n               #########################>DEBUG\n\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' ZZDEBUG << EOF\n               ${\n               //var opt=\"inputs.libraries_metadata.length:\"+inputs.libraries_metadata.length+\" \"              \n               //var str = JSON.stringify(inputs.libraries_metadata)\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   opt+=\" not null \"\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n \n                      opt+=\" !!-AA-\"+lmeta.lib_index+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n               #########################<DEBUG\n\n\n\n\n\n\n\n\n\n\n               read -d '' CMD_READ2 << EOF\n               ${\n                 var opt=\"\"\n                 if (inputs.pacbio_reads!=null){\n                   for(var i=0; i<inputs.pacbio_reads.length;i++){\n                      var read=inputs.pacbio_reads[i]\n                      opt+=\" --pacbio fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.nanopore_reads!=null){\n                   for(var i=0; i<inputs.nanopore_reads.length;i++){\n                      var read=inputs.nanopore_reads[i]\n                      opt+=\" --nanopore fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.sanger_reads!=null){\n                   for(var i=0; i<inputs.sanger_reads.length;i++){\n                      var read=inputs.sanger_reads[i]\n                      opt+=\" --sanger fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.trusted_contigs!=null){\n                   for(var i=0; i<inputs.trusted_contigs.length;i++){\n                      var read=inputs.trusted_contigs[i]\n                      opt+=\" --trusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.untrusted_contigs!=null){\n                   for(var i=0; i<inputs.untrusted_contigs.length;i++){\n                      var read=inputs.untrusted_contigs[i]\n                      opt+=\" --untrusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 return opt  \n               }\n               EOF\n               ##########################################\n               read -d '' CMD_POST << EOF\n                 && python write_tsv.py < contigs.fasta > out_contig_stats.tab\n                 && python write_tsv.py < scaffolds.fasta > out_scaffold_stats.tab\n               EOF\n               ##########################################   \n               # echo \"CMD_BASE : \\$CMD_BASE\"  > zz.txt   \\\\\n               #        && echo \"CMD_READ1 : \\$CMD_READ1\"  >> zz.txt   \\\\\n               #        && echo \"CMD_READ2 : \\$CMD_READ2\"  >> zz.txt   \\\\\n               #        && echo \"CMD_POST : \\$CMD_POST\"   >> zz.txt\n               COMMAND=\"\\$CMD_BASE \\$CMD_READ1 \\$CMD_READ2 \\$CMD_POST\"\n               COMMAND=\\$(echo $COMMAND|tr -d '\\\\n')\n               echo \"\\$COMMAND\"  > run_spades.sh\n               bash  ./run_spades.sh\n\n \n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  example workflow for js wrapper generation\n  see  https://github.com/rrwick/Unicycler\n  outputs : all genretated files\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'libraries_metadata': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'orientation': 'string?', 'lib_type': 'string?'}}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, 'libraries_fwd_rev': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'fwd_reads': 'File?', 'rev_reads': 'File?'}}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, 'libraries_mono': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'file_type': 'string?', 'reads': 'File?'}}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, 'pacbio_reads': {'type': 'File[]?'}, 'nanopore_reads': {'type': 'File[]?'}, 'sanger_reads': {'type': 'File[]?'}, 'trusted_contigs': {'type': 'File[]?'}, 'untrusted_contigs': {'type': 'File[]?'}, 'auto_kmer_choice': {'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, 'kmers': {'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, 'cov_state': {'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, 'cov_cutoff': {'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, 'iontorrent': {'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, 'sc': {'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, 'onlyassembler': {'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, 'careful': {'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}}",
    "cwl_outputs": "{'out_contig_stats': {'type': 'File', 'outputBinding': {'glob': 'out_contig_stats.*'}, 'doc': 'contig stats, default column_names: name,length,coverage'}, 'out_scaffold_stats': {'type': 'File', 'outputBinding': {'glob': 'out_scaffold_stats.*'}, 'doc': 'scaffold stats, default column_names: name,length,coverage'}, 'out_contigs': {'type': 'File', 'outputBinding': {'glob': 'contigs.fasta'}, 'doc': 'contigs (fasta sequence)'}, 'out_scaffolds': {'type': 'File', 'outputBinding': {'glob': 'scaffolds.fasta'}, 'doc': 'scaffolds (fasta sequence)'}, 'all_log': {'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.log'}, 'doc': 'spades output log and warnings'}, 'assembly_graph': {'type': 'File', 'outputBinding': {'glob': 'assembly_graph.fastg'}, 'doc': 'assembly graph'}, 'assembly_graph_with_scaffolds': {'type': 'File', 'outputBinding': {'glob': 'assembly_graph_with_scaffolds.gfa'}, 'doc': 'assembly graph with scaffolds'}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['spades_wrapper.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "example workflow for js wrapper generation\nsee  https://github.com/rrwick/Unicycler\noutputs : all genretated files\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/unicycler.cwl",
    "sha": "6a208e40e51c5848cbda6581c448aa7a99fc7c5e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/unicycler.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  CWL  wrapped for Unicycler.\n  an hybrid assembly pipeline for bacterial genomes\n  see  https://github.com/rrwick/Unicycler\n  outputs\n    final assembly in FASTA format (major output)\n    final assembly grapth in graph format, visualized using tools such as\n    Bandage  https://github.com/rrwick/Bandage\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: unicycler_launch.sh\n        entry: |\n          #!/bin/bash\n          ###########################\n          #      unicycler launcher\n          ###########################\n\n          ##preparing input files\n          #check permission / chmod  is issues\n          ${\n            var fl=\"\"\n            var lncmd=\"\"\n            var fq1=\"\"\n            var fq2=\"\"\n            var lr=\"\"\n\n          //###################paired case\n                if (inputs.fastq_file_type ==\"paired\"  ){\n                 if( inputs.fastq1_type=='fastqsanger' ){\n                     fq1 = \"fq1.fastq\"\n                 }\n                 else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                      fq1 = \"fq1.fastq.gz\"\n                 }\n                 if( inputs.fastq2_type=='fastqsanger' ){\n                     fq2 = \"fq2.fastq\"\n                  }\n                  else if( inputs.fastq2_type=='fastqsanger.gz' ){\n                      fq2 = \"fq2.fastq.gz\"\n                   }\n                   lncmd+=\"fq1='\"+fq1+\"'\"\n                   lncmd+=\" && \"\n                   lncmd+=\"fq2='\"+fq2+\"'\"\n                   lncmd+=\" && \"\n                   lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                   lncmd+=\" && \"\n                   lncmd+=\" ln -s '\"+inputs.fastq2.path+\"' $fq2  \"\n\n                }\n           //###################single case\n \n           if (inputs.fastq_file_type ==\"single\"  ){\n             if( inputs.fastq1_type=='fastqsanger' ){\n                 fq1 = \"fq1.fastq\"\n             }\n             else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                  fq1 = \"fq1.fastq.gz\"\n             }\n             lncmd+=\"fq1='\"+fq1+\"'\"\n             lncmd+=\" && \"\n             lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n            }\n            //####### long reads\n             if (  inputs.sequence_long !== null) {\n                 if (inputs.sequence_long_type=='fastqsanger'){\n                          lr = \"lr.fastq\"\n                 }\n                 else if (inputs.sequence_long_type=='fastqsanger.gz') {\n                          lr = \"lr.fastq.gz\"\n                 }\n                 else if (inputs.sequence_longg_type=='fasta') {\n                          lr = \"lr.fasta\"\n                 }\n                 lncmd+=\"lr='\"+lr+\"'\"\n                 lncmd+=\" && \"\n                 lncmd+= \" ln -s '\"+inputs.sequence_long.path+\"' '$lr' \"\n             }\n             return lncmd\n          }\n\n          ##general options\n\n          read -d '' GENERALOPT << EOF\n          ${\n           var opt=\"\"\n           //## General Unicycler Options section\n           opt+=\" --mode \"+inputs.mode+\" \"\n           opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\n           opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\n\n           if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\n\n           //## Spades Options section\n           if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\n           opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\n           opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\n           if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\n\n           opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\n           opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\n           if (inputs.spades_largest_component){opt+=\" --largest_component \"}\n           //## Rotation Options section\n           if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\n           if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\n           opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\n           opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\n           return opt\n           }\n          EOF\n\n          ##additionnal option\n\n          read -d '' ADDOPT << EOF\n          ${\n\n           var opt=\"\"\n\n           if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\n           if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\n           //## Long Read Alignment Options\n           if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\n           opt+=\" --scores \"+inputs.lr_align_scores+\" \"\n           if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\n            return ''+ opt + ''\n          }\n          EOF\n\n          ## Get location for pilon jar file\n\n          ${\n            var cmd=\"\"\n            cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\n            return cmd\n          }\n\n          ## Build Unicycler command\n          ${\n\n            var cmd_base=\"\"\n            var opt=\"\"\n\n            cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\n            cmd_base+=\" -o ./  \"\n            cmd_base+=\" --verbosity 3  \"\n            cmd_base+=\" --pilon_path \\$PILONJAR  \"\n\n           if ( inputs.fastq_file_type == \"paired\"){\n                  opt+=\" -1 $fq1 -2 $fq2  \"\n           }\n           else if ( inputs.fastq_file_type == \"paired_collection\"){\n                  opt+=\" -1 $fq1 -2 $fq2  \"\n           }\n           else if ( inputs.fastq_file_type == \"single\"){\n              opt+=\" -s $fq1 \"\n           }\n           if (  inputs.sequence_long !== null) {\n             opt+=\" -l $lr \"\n           }\n\n           //##  Unicycler command\n           var cmdl=cmd_base+\" \"+opt+\" \\$GENERALOPT \\$ADDOPT \"\n\n           return cmdl\n\n           }\ninputs:\n  fastq_file_type:\n    doc: Paired and single end data\n    type:\n      type: enum\n      symbols:\n      - paired\n      - single\n  fastq1_type:\n    doc: Type of the First set of reads. Only when fastq_file_type = single  or  paired\n    type:\n      type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n    default: fastqsanger\n  fastq1:\n    doc: |-\n      First set of reads with forward reads. Only when fastq_file_type = single or paired\n    type: File\n  fastq2_type:\n    doc: Type of the Second set of reads. Only when fastq_file_type=paired\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n    default: 'null'\n  fastq2:\n    doc: Second set of reads with reverse reads. Only when fastq_file_type=paired\n    type: File?\n  sequence_long_type:\n    doc: long reads file type. If there are no long reads, leave this empty\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n      - fasta\n  sequence_long:\n    doc: long reads. If there are no long reads, leave this empty\n    type: File?\n  compute_slots:\n    type: int?\n    default: 4\n  mode:\n    doc: |\n      Bridging mode, values:\n      conservative (smaller contigs, lower misassembly)\n      normal (moderate contig size and misassembly rate)\n      bold  (longest contigs, higher misassembly rate)\n    type:\n      type: enum\n      symbols:\n      - conservative\n      - normal\n      - bold\n  min_fasta_length:\n    doc: Exclude contigs from the FASTA file which are shorter than this length (bp)\n    type: int?\n    default: 100\n  linear_seqs:\n    doc: The expected number of linear (i.e. non-circular) sequences in the assembly\n    type: int?\n    default: 0\n  min_anchor_seg_len:\n    doc: Unicycler will not use segments shorter than this as scaffolding anchors\n    type: int?\n    default: 0\n  spades_no_correct:\n    doc: |\n      Unicycler uses SPAdes to construct assembly graphs.\n      You can modify some of the SPAdes settings here.\n      Use this ONLY if you know what you are doing!\n      This option turns off SPAdes error correction.\n      Generally it is highly recommended to use correction.\n    type: boolean?\n    default: false\n  spades_min_kmer_frac:\n    doc: |\n      Lowest k-mer size for SPAdes assembly,\n      expressed as a fraction of the read length.\n      min 0, max 1\n    type: float?\n    default: 0.2\n  spades_max_kmer_frac:\n    doc: |\n      Highest k-mer size for SPAdes assembly,\n      expressed as a fraction of the read length.\n      min 0, max 1\n    type: float?\n    default: 0.95\n  spades_kmers:\n    doc: |\n      Exact k-mers size to use for SPAdes assembly, comma-separated\"\n      Kmers must be comma-separated odd integers (no repitition)\n      without space in the range of 11 to 127 (inclusive)\n    type: string?\n    default: 11,127\n  spades_kmer_count:\n    doc: Number of k-mer steps to use in SPAdes assembly, min 0\n    type: int?\n    default: 10\n  spades_depth_filter:\n    doc: |\n      Filter out contigs lower than this fraction\n      of the chromosomal depth.\n      It is done if does not result in graph dead ends\n      min 0, max 1\n    type: float?\n    default: 0.25\n  spades_largest_component:\n    doc: Only keep the largest connected component of the assembly graph if true\n    type: boolean?\n    default: false\n  rotation_no_rotate:\n    doc: |\n      These options control the rotation of completed circular sequence\n      near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\n      Do not rotate completed replicons to start at a standard gene.\n      Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\n      If one is found, the sequence is rotated and/or flipped so that it begins with that gene\n      encoded on the forward strand. This provides consistently oriented assemblies and reduces\n      the risk that a gene will be split across the start and end of the sequence.\n    type: boolean?\n    default: false\n  rotation_start_genes:\n    doc: FASTA file of genes for start point of rotated replicons\n    type: File?\n  rotation_start_gene_id:\n    doc: |-\n      The minimum required BLAST percent identity for a start gene search. max 100, min 0\n    type: float?\n    default: 90.0\n  rotation_start_gene_cov:\n    doc: |-\n      The minimum required BLAST percent coverage for a start gene search. min 0, max 100\n    type: float?\n    default: 95.0\n  pilon_no_pilon:\n    doc: Unicycler uses Pilon tool for polishing final assembly. Do not use if true\n    type: boolean?\n    default: false\n  graph_clean_min_component_size:\n    doc: Contigs shorter than this value (bp) will not be polished using Pilon; min 0\n    type: int?\n    default: 1000\n  graph_clean_min_dead_end_size:\n    doc: |\n      These options control the removal of small leftover sequences after bridging is complete.\n      Unbridged graph components smaller than this size will be removed from the final graph,\n      min 0\n    type: int?\n    default: 1000\n  lr_align_contamination:\n    doc: |\n      FASTA file of known contamination in long reads,\n      e.g. lambda, phiXm or puc18 spike-ins.\n    type: File?\n  lr_align_scores:\n    doc: |\n      Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\n    type: string?\n    default: 3,-6,-5,-2\n  lr_align_low_score:\n    doc: |\n      Score threshold - alignments below this are considered poor,\n      default = set automatically\n    type: int?\noutputs:\n  assembly_graph:\n    type: File\n    outputBinding:\n      glob: assembly.gfa\n  assembly:\n    doc: |\n      fasta assembly output sequence\n      (main output)\n    type: File\n    outputBinding:\n      glob: assembly.fasta\n  # exec_script:\n  #   doc: |\n  #     Launching script for learning purpose\n  #   type: File\n  #   outputBinding:\n  #     glob: '*.sh'\n\nbaseCommand: bash\n\narguments:\n- unicycler_launch.sh\n\nhints:\n  DockerRequirement:\n    dockerPull: biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fastq_file_type': {'doc': 'Paired and single end data', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}}, 'fastq1_type': {'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'default': 'fastqsanger'}, 'fastq1': {'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired', 'type': 'File'}, 'fastq2_type': {'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null'}, 'fastq2': {'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired', 'type': 'File?'}, 'sequence_long_type': {'doc': 'long reads file type. If there are no long reads, leave this empty', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz', 'fasta']}]}, 'sequence_long': {'doc': 'long reads. If there are no long reads, leave this empty', 'type': 'File?'}, 'compute_slots': {'type': 'int?', 'default': 4}, 'mode': {'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}}, 'min_fasta_length': {'doc': 'Exclude contigs from the FASTA file which are shorter than this length (bp)', 'type': 'int?', 'default': 100}, 'linear_seqs': {'doc': 'The expected number of linear (i.e. non-circular) sequences in the assembly', 'type': 'int?', 'default': 0}, 'min_anchor_seg_len': {'doc': 'Unicycler will not use segments shorter than this as scaffolding anchors', 'type': 'int?', 'default': 0}, 'spades_no_correct': {'doc': 'Unicycler uses SPAdes to construct assembly graphs.\\nYou can modify some of the SPAdes settings here.\\nUse this ONLY if you know what you are doing!\\nThis option turns off SPAdes error correction.\\nGenerally it is highly recommended to use correction.\\n', 'type': 'boolean?', 'default': False}, 'spades_min_kmer_frac': {'doc': 'Lowest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length.\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.2}, 'spades_max_kmer_frac': {'doc': 'Highest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length.\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.95}, 'spades_kmers': {'doc': 'Exact k-mers size to use for SPAdes assembly, comma-separated\"\\nKmers must be comma-separated odd integers (no repitition)\\nwithout space in the range of 11 to 127 (inclusive)\\n', 'type': 'string?', 'default': '11,127'}, 'spades_kmer_count': {'doc': 'Number of k-mer steps to use in SPAdes assembly, min 0', 'type': 'int?', 'default': 10}, 'spades_depth_filter': {'doc': 'Filter out contigs lower than this fraction\\nof the chromosomal depth.\\nIt is done if does not result in graph dead ends\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.25}, 'spades_largest_component': {'doc': 'Only keep the largest connected component of the assembly graph if true', 'type': 'boolean?', 'default': False}, 'rotation_no_rotate': {'doc': 'These options control the rotation of completed circular sequence\\nnear the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\\nDo not rotate completed replicons to start at a standard gene.\\nUnicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\\nIf one is found, the sequence is rotated and/or flipped so that it begins with that gene\\nencoded on the forward strand. This provides consistently oriented assemblies and reduces\\nthe risk that a gene will be split across the start and end of the sequence.\\n', 'type': 'boolean?', 'default': False}, 'rotation_start_genes': {'doc': 'FASTA file of genes for start point of rotated replicons', 'type': 'File?'}, 'rotation_start_gene_id': {'doc': 'The minimum required BLAST percent identity for a start gene search. max 100, min 0', 'type': 'float?', 'default': 90.0}, 'rotation_start_gene_cov': {'doc': 'The minimum required BLAST percent coverage for a start gene search. min 0, max 100', 'type': 'float?', 'default': 95.0}, 'pilon_no_pilon': {'doc': 'Unicycler uses Pilon tool for polishing final assembly. Do not use if true', 'type': 'boolean?', 'default': False}, 'graph_clean_min_component_size': {'doc': 'Contigs shorter than this value (bp) will not be polished using Pilon; min 0', 'type': 'int?', 'default': 1000}, 'graph_clean_min_dead_end_size': {'doc': 'These options control the removal of small leftover sequences after bridging is complete.\\nUnbridged graph components smaller than this size will be removed from the final graph,\\nmin 0\\n', 'type': 'int?', 'default': 1000}, 'lr_align_contamination': {'doc': 'FASTA file of known contamination in long reads,\\ne.g. lambda, phiXm or puc18 spike-ins.\\n', 'type': 'File?'}, 'lr_align_scores': {'doc': 'Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\\n', 'type': 'string?', 'default': '3,-6,-5,-2'}, 'lr_align_low_score': {'doc': 'Score threshold - alignments below this are considered poor,\\ndefault = set automatically\\n', 'type': 'int?'}}",
    "cwl_outputs": "{'assembly_graph': {'type': 'File', 'outputBinding': {'glob': 'assembly.gfa'}}, 'assembly': {'doc': 'fasta assembly output sequence\\n(main output)\\n', 'type': 'File', 'outputBinding': {'glob': 'assembly.fasta'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['unicycler_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'unicycler_launch.sh', 'entry': '#!/bin/bash\\n###########################\\n#      unicycler launcher\\n###########################\\n\\n##preparing input files\\n#check permission / chmod  is issues\\n${\\n  var fl=\"\"\\n  var lncmd=\"\"\\n  var fq1=\"\"\\n  var fq2=\"\"\\n  var lr=\"\"\\n\\n//###################paired case\\n      if (inputs.fastq_file_type ==\"paired\"  ){\\n       if( inputs.fastq1_type==\\'fastqsanger\\' ){\\n           fq1 = \"fq1.fastq\"\\n       }\\n       else if( inputs.fastq1_type==\\'fastqsanger.gz\\' ){\\n            fq1 = \"fq1.fastq.gz\"\\n       }\\n       if( inputs.fastq2_type==\\'fastqsanger\\' ){\\n           fq2 = \"fq2.fastq\"\\n        }\\n        else if( inputs.fastq2_type==\\'fastqsanger.gz\\' ){\\n            fq2 = \"fq2.fastq.gz\"\\n         }\\n         lncmd+=\"fq1=\\'\"+fq1+\"\\'\"\\n         lncmd+=\" && \"\\n         lncmd+=\"fq2=\\'\"+fq2+\"\\'\"\\n         lncmd+=\" && \"\\n         lncmd+=\" ln -s \\'\"+inputs.fastq1.path+\"\\' $fq1 \"\\n         lncmd+=\" && \"\\n         lncmd+=\" ln -s \\'\"+inputs.fastq2.path+\"\\' $fq2  \"\\n\\n      }\\n //###################single case\\n\\n if (inputs.fastq_file_type ==\"single\"  ){\\n   if( inputs.fastq1_type==\\'fastqsanger\\' ){\\n       fq1 = \"fq1.fastq\"\\n   }\\n   else if( inputs.fastq1_type==\\'fastqsanger.gz\\' ){\\n        fq1 = \"fq1.fastq.gz\"\\n   }\\n   lncmd+=\"fq1=\\'\"+fq1+\"\\'\"\\n   lncmd+=\" && \"\\n   lncmd+=\" ln -s \\'\"+inputs.fastq1.path+\"\\' $fq1 \"\\n  }\\n  //####### long reads\\n   if (  inputs.sequence_long !== null) {\\n       if (inputs.sequence_long_type==\\'fastqsanger\\'){\\n                lr = \"lr.fastq\"\\n       }\\n       else if (inputs.sequence_long_type==\\'fastqsanger.gz\\') {\\n                lr = \"lr.fastq.gz\"\\n       }\\n       else if (inputs.sequence_longg_type==\\'fasta\\') {\\n                lr = \"lr.fasta\"\\n       }\\n       lncmd+=\"lr=\\'\"+lr+\"\\'\"\\n       lncmd+=\" && \"\\n       lncmd+= \" ln -s \\'\"+inputs.sequence_long.path+\"\\' \\'$lr\\' \"\\n   }\\n   return lncmd\\n}\\n\\n##general options\\n\\nread -d \\'\\' GENERALOPT << EOF\\n${\\n var opt=\"\"\\n //## General Unicycler Options section\\n opt+=\" --mode \"+inputs.mode+\" \"\\n opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\\n opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\\n\\n if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\\n\\n //## Spades Options section\\n if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\\n opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\\n opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\\n if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\\n\\n opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\\n opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\\n if (inputs.spades_largest_component){opt+=\" --largest_component \"}\\n //## Rotation Options section\\n if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\\n if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\\n opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\\n opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\\n return opt\\n }\\nEOF\\n\\n##additionnal option\\n\\nread -d \\'\\' ADDOPT << EOF\\n${\\n\\n var opt=\"\"\\n\\n if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\\n if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\\n //## Long Read Alignment Options\\n if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\\n opt+=\" --scores \"+inputs.lr_align_scores+\" \"\\n if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\\n  return \\'\\'+ opt + \\'\\'\\n}\\nEOF\\n\\n## Get location for pilon jar file\\n\\n${\\n  var cmd=\"\"\\n  cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\\n  return cmd\\n}\\n\\n## Build Unicycler command\\n${\\n\\n  var cmd_base=\"\"\\n  var opt=\"\"\\n\\n  cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\\n  cmd_base+=\" -o ./  \"\\n  cmd_base+=\" --verbosity 3  \"\\n  cmd_base+=\" --pilon_path \\\\$PILONJAR  \"\\n\\n if ( inputs.fastq_file_type == \"paired\"){\\n        opt+=\" -1 $fq1 -2 $fq2  \"\\n }\\n else if ( inputs.fastq_file_type == \"paired_collection\"){\\n        opt+=\" -1 $fq1 -2 $fq2  \"\\n }\\n else if ( inputs.fastq_file_type == \"single\"){\\n    opt+=\" -s $fq1 \"\\n }\\n if (  inputs.sequence_long !== null) {\\n   opt+=\" -l $lr \"\\n }\\n\\n //##  Unicycler command\\n var cmdl=cmd_base+\" \"+opt+\" \\\\$GENERALOPT \\\\$ADDOPT \"\\n\\n return cmdl\\n\\n }\\n'}]}}",
    "cwl_doc": "CWL  wrapped for Unicycler.\nan hybrid assembly pipeline for bacterial genomes\nsee  https://github.com/rrwick/Unicycler\noutputs\n  final assembly in FASTA format (major output)\n  final assembly grapth in graph format, visualized using tools such as\n  Bandage  https://github.com/rrwick/Bandage\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "PreProcessing/batch-preprocess-illumina.cwl",
    "sha": "96c719397af7257aaec4c926cf84d09735bec60a",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/batch-preprocess-illumina.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accessions: string[]\n  ref_human_genome: File\n\nsteps:\n  main:\n    scatter: illumina_accession\n    in:\n      illumina_accession: illumina_accessions\n      ref_human_genome: ref_human_genome\n    out:\n      - fastp_html_report\n      - fastp_json_report\n      - multiqc_html\n      - multiqc_zip\n      - original_fastq1\n      - original_fastq2\n      - bam\n    run: ./preprocess-illumina.cwl\n\n  merge_bam:\n    in:\n      output_name:\n        valueFrom: \"merged.bam\"\n      bams: main/bam\n    out:\n      - bam_merged\n    run: ../bio-cwl-tools/samtools/samtools_merge.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: merge_bam/bam_merged\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n\noutputs:\n  original_fastq1:\n    type: File[]\n    outputSource: main/original_fastq1\n  original_fastq2:\n    type: File[]?\n    outputSource: main/original_fastq2\n\n  processed_fastq:\n    type: File\n    outputSource: samtools_fastq/fastq\n\n  fastp_html_reports:\n    type: File[]\n    outputSource: main/fastp_html_report\n  fastp_json_reports:\n    type: File[]\n    outputSource: main/fastp_json_report\n\n  multiqc_htmls:\n    type: File[]\n    outputSource: main/multiqc_html\n  multiqc_zips:\n    type: File[]\n    outputSource: main/multiqc_zip\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accessions': 'string[]', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File[]', 'outputSource': 'main/original_fastq1'}, 'original_fastq2': {'type': 'File[]?', 'outputSource': 'main/original_fastq2'}, 'processed_fastq': {'type': 'File', 'outputSource': 'samtools_fastq/fastq'}, 'fastp_html_reports': {'type': 'File[]', 'outputSource': 'main/fastp_html_report'}, 'fastp_json_reports': {'type': 'File[]', 'outputSource': 'main/fastp_json_report'}, 'multiqc_htmls': {'type': 'File[]', 'outputSource': 'main/multiqc_html'}, 'multiqc_zips': {'type': 'File[]', 'outputSource': 'main/multiqc_zip'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "main": {
        "scatter": "illumina_accession",
        "in": {
          "illumina_accession": "illumina_accessions",
          "ref_human_genome": "ref_human_genome"
        },
        "out": [
          "fastp_html_report",
          "fastp_json_report",
          "multiqc_html",
          "multiqc_zip",
          "original_fastq1",
          "original_fastq2",
          "bam"
        ],
        "run": "./preprocess-illumina.cwl"
      },
      "merge_bam": {
        "in": {
          "output_name": {
            "valueFrom": "merged.bam"
          },
          "bams": "main/bam"
        },
        "out": [
          "bam_merged"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_merge.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "merge_bam/bam_merged"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/batch-preprocess-ont.cwl",
    "sha": "d6ee102a36b9e9aedde744b626ef02501515cebe",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/batch-preprocess-ont.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accessions: string[]\n  ref_human_genome: File\n\nsteps:\n  main:\n    scatter: illumina_accession\n    in:\n      illumina_accession: illumina_accessions\n      ref_human_genome: ref_human_genome\n    out:\n      - fastqc_summary\n      - fastqc_zip\n      - multiqc_html\n      - multiqc_zip\n      - original_fastq1\n      - bam\n    run: ./preprocess-ont.cwl\n\n  merge_bam:\n    in:\n      output_name:\n        valueFrom: \"merged.bam\"\n      bams: main/bam\n    out:\n      - bam_merged\n    run: ../bio-cwl-tools/samtools/samtools_merge.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: merge_bam/bam_merged\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n\noutputs:\n  original_fastq1:\n    type: File[]\n    outputSource: main/original_fastq1\n\n  processed_fastq:\n    type: File\n    outputSource: samtools_fastq/fastq\n\n  fastqc_summary:\n    type: File[]\n    outputSource: main/fastqc_summary\n  fastqc_zip:\n    type: File[]\n    outputSource: main/fastqc_zip\n\n  multiqc_htmls:\n    type: File[]\n    outputSource: main/multiqc_html\n  multiqc_zips:\n    type: File[]\n    outputSource: main/multiqc_zip\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accessions': 'string[]', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File[]', 'outputSource': 'main/original_fastq1'}, 'processed_fastq': {'type': 'File', 'outputSource': 'samtools_fastq/fastq'}, 'fastqc_summary': {'type': 'File[]', 'outputSource': 'main/fastqc_summary'}, 'fastqc_zip': {'type': 'File[]', 'outputSource': 'main/fastqc_zip'}, 'multiqc_htmls': {'type': 'File[]', 'outputSource': 'main/multiqc_html'}, 'multiqc_zips': {'type': 'File[]', 'outputSource': 'main/multiqc_zip'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "main": {
        "scatter": "illumina_accession",
        "in": {
          "illumina_accession": "illumina_accessions",
          "ref_human_genome": "ref_human_genome"
        },
        "out": [
          "fastqc_summary",
          "fastqc_zip",
          "multiqc_html",
          "multiqc_zip",
          "original_fastq1",
          "bam"
        ],
        "run": "./preprocess-ont.cwl"
      },
      "merge_bam": {
        "in": {
          "output_name": {
            "valueFrom": "merged.bam"
          },
          "bams": "main/bam"
        },
        "out": [
          "bam_merged"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_merge.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "merge_bam/bam_merged"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/preprocess-illumina.cwl",
    "sha": "31dc07ff0b6f457bb9d5a725291ea9d2b25b5997",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/preprocess-illumina.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accession: string\n  hg38: File\n\nsteps:\n  unpack_ref_genome:\n    in:\n      file: hg38\n    out:\n      - hg_38_fa\n    run: ./tools/unpack_ref_db.cwl\n\n  fetch_fastqs:\n    in:\n      sra_accession: illumina_accession\n    out:\n      - fastq_file_1\n      - fastq_file_2\n    run: ../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl\n\n  fastp:\n    in:\n      fastq1: fetch_fastqs/fastq_file_1\n      fastq2: fetch_fastqs/fastq_file_2\n    out:\n      - out_fastq1\n      - out_fastq2\n      - html_report\n      - json_report\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  multiqc:\n    in:\n      qc_files_array: fastp/json_report\n    out:\n      - multiqc_zip\n      - multiqc_html\n    run: ../bio-cwl-tools/multiqc/multiqc.cwl\n\n  bwa_mem:\n    in:\n      Index: unpack_ref_genome/hg_38_fa\n      InputFile:\n        source: [fastp/out_fastq1, fastp/out_fastq2]\n        valueFrom: |\n          ${\n            return self.filter(function(x){return x});\n          }\n        linkMerge: merge_flattened\n      Threads:\n        valueFrom: $(1)\n    out:\n      - reads_stdout\n    run: ../bio-cwl-tools/bwa/BWA-Mem.cwl\n\n  samtools_view:\n    in:\n      sam: bwa_mem/reads_stdout\n    out:\n      - bam\n    run: ../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl\n\n  samtools_fastq:\n    in:\n     bam_sorted: samtools_view/bam\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n  rename_multiqc_html:\n    in:\n      srcfile: multiqc/multiqc_html\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_multiqc_zip:\n    in:\n      srcfile: multiqc/multiqc_zip\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastp_html:\n    in:\n      srcfile: fastp/html_report\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastp.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastp_json:\n    in:\n      srcfile: fastp/json_report\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastp.json\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_bam:\n    in:\n      srcfile: samtools_view/bam\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).bam\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\noutputs:\n  original_fastq1:\n    type: File\n    format: edam:format_1930  # FASTQ\n    outputSource: fetch_fastqs/fastq_file_1\n  original_fastq2:\n    type: File?\n    format: edam:format_1930  # FASTQ\n    outputSource: fetch_fastqs/fastq_file_2\n\n  bam:\n    type: File\n    format: edam:format_2572  # BAM\n    outputSource: rename_bam/outfile\n\n  fastp_html_report:\n    type: File\n    format: edam:format_2331  # HTML\n    outputSource: rename_fastp_html/outfile\n  fastp_json_report:\n    type: File\n    format: edam:format_3464  # JSON\n    outputSource: rename_fastp_json/outfile\n\n  multiqc_html:\n    type: File\n    format: edam:format_2331  # HTML\n    outputSource: rename_multiqc_html/outfile\n  multiqc_zip:\n    type: File\n    format: edam:format_3464  # JSON\n    outputSource: rename_multiqc_zip/outfile\n\n  mapped_fastq:\n    type: File\n    format: edam:format_1930  # FASTQ\n    outputSource: samtools_fastq/fastq\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accession': 'string', 'hg38': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File', 'format': 'edam:format_1930', 'outputSource': 'fetch_fastqs/fastq_file_1'}, 'original_fastq2': {'type': 'File?', 'format': 'edam:format_1930', 'outputSource': 'fetch_fastqs/fastq_file_2'}, 'bam': {'type': 'File', 'format': 'edam:format_2572', 'outputSource': 'rename_bam/outfile'}, 'fastp_html_report': {'type': 'File', 'format': 'edam:format_2331', 'outputSource': 'rename_fastp_html/outfile'}, 'fastp_json_report': {'type': 'File', 'format': 'edam:format_3464', 'outputSource': 'rename_fastp_json/outfile'}, 'multiqc_html': {'type': 'File', 'format': 'edam:format_2331', 'outputSource': 'rename_multiqc_html/outfile'}, 'multiqc_zip': {'type': 'File', 'format': 'edam:format_3464', 'outputSource': 'rename_multiqc_zip/outfile'}, 'mapped_fastq': {'type': 'File', 'format': 'edam:format_1930', 'outputSource': 'samtools_fastq/fastq'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "unpack_ref_genome": {
        "in": {
          "file": "hg38"
        },
        "out": [
          "hg_38_fa"
        ],
        "run": "./tools/unpack_ref_db.cwl"
      },
      "fetch_fastqs": {
        "in": {
          "sra_accession": "illumina_accession"
        },
        "out": [
          "fastq_file_1",
          "fastq_file_2"
        ],
        "run": "../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl"
      },
      "fastp": {
        "in": {
          "fastq1": "fetch_fastqs/fastq_file_1",
          "fastq2": "fetch_fastqs/fastq_file_2"
        },
        "out": [
          "out_fastq1",
          "out_fastq2",
          "html_report",
          "json_report"
        ],
        "run": "../bio-cwl-tools/fastp/fastp.cwl"
      },
      "multiqc": {
        "in": {
          "qc_files_array": "fastp/json_report"
        },
        "out": [
          "multiqc_zip",
          "multiqc_html"
        ],
        "run": "../bio-cwl-tools/multiqc/multiqc.cwl"
      },
      "bwa_mem": {
        "in": {
          "Index": "unpack_ref_genome/hg_38_fa",
          "InputFile": {
            "source": [
              "fastp/out_fastq1",
              "fastp/out_fastq2"
            ],
            "valueFrom": "${\n  return self.filter(function(x){return x});\n}\n",
            "linkMerge": "merge_flattened"
          },
          "Threads": {
            "valueFrom": "$(1)"
          }
        },
        "out": [
          "reads_stdout"
        ],
        "run": "../bio-cwl-tools/bwa/BWA-Mem.cwl"
      },
      "samtools_view": {
        "in": {
          "sam": "bwa_mem/reads_stdout"
        },
        "out": [
          "bam"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "samtools_view/bam"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      },
      "rename_multiqc_html": {
        "in": {
          "srcfile": "multiqc/multiqc_html",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_multiqc_zip": {
        "in": {
          "srcfile": "multiqc/multiqc_zip",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastp_html": {
        "in": {
          "srcfile": "fastp/html_report",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastp.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastp_json": {
        "in": {
          "srcfile": "fastp/json_report",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastp.json"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_bam": {
        "in": {
          "srcfile": "samtools_view/bam",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).bam"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/preprocess-ont.cwl",
    "sha": "4c190ef248bf9d4e313f225f3ebf510e7c42e8de",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/preprocess-ont.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accession: string\n  ref_human_genome: File\n\nsteps:\n  fetch_fastqs:\n    in:\n      sra_accession: illumina_accession\n    out:\n      - fastq_file_1\n      - fastq_files\n    run: ../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl\n\n  nanoplot:\n    in:\n      fastq_files:\n        source: fetch_fastqs/fastq_files\n      loglength:\n        valueFrom: $(true)\n      format:\n        valueFrom: \"png\"\n    out:\n      - dynamic_histogram_read_length\n      - histogram_read_length\n      - length_v_qual_scatter_plot_dot\n      - length_v_qual_scatter_plot_kde\n      - log_transformed_histogram_read_length\n      - report\n      - logfile\n      - nanostats\n      - weighted_histogram_read_length\n      - weighted_log_transform_histogram_read_length\n      - yield_by_length_img\n    run: ../bio-cwl-tools/nanoplot/nanoplot.cwl\n\n  fastqc:\n    in:\n      reads_file: fetch_fastqs/fastq_file_1\n      nogroup:\n        valueFrom: $(true)\n      kmers:\n        valueFrom: $(7)\n    out:\n      - zipped_file\n      - summary_file\n      - html_file\n    run: ../bio-cwl-tools/fastqc/fastqc_2.cwl\n\n  multiqc:\n    in:\n      qc_files_array: fastqc/zipped_file\n    out:\n      - multiqc_zip\n      - multiqc_html\n    run: ../bio-cwl-tools/multiqc/multiqc.cwl\n\n  minimap2:\n    in:\n      indexFile: ref_human_genome\n      fastqFiles: fetch_fastqs/fastq_file_1\n      samOutput:\n        valueFrom: $(true)\n    out:\n      - samfile\n    run: ../bio-cwl-tools/minimap2/minimap2.cwl\n\n  sam2bam:\n    in:\n      sam: minimap2/samfile\n    out:\n      - bam\n    run: ../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: sam2bam/bam\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n    \n  rename_multiqc_html:\n    in:\n      srcfile: multiqc/multiqc_html\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_multiqc_zip:\n    in:\n      srcfile: multiqc/multiqc_zip\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastqc_summary:\n    in:\n      srcfile: fastqc/summary_file\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastqc_zip:\n    in:\n      srcfile: fastqc/zipped_file\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastq:\n    in:\n      srcfile: samtools_fastq/fastq\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).fastq\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_bam:\n    in:\n      srcfile: sam2bam/bam\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).bam\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\noutputs:\n  original_fastq1:\n    type: File\n    outputSource: rename_fastq/outfile\n\n  fastqc_summary:\n    type: File\n    outputSource: rename_fastqc_summary/outfile\n  fastqc_zip:\n    type: File\n    outputSource: rename_fastqc_zip/outfile\n\n\n  multiqc_html:\n    type: File\n    outputSource: rename_multiqc_html/outfile\n  multiqc_zip:\n    type: File\n    outputSource: rename_multiqc_zip/outfile\n\n  bam:\n    type: File\n    outputSource: rename_bam/outfile",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accession': 'string', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File', 'outputSource': 'rename_fastq/outfile'}, 'fastqc_summary': {'type': 'File', 'outputSource': 'rename_fastqc_summary/outfile'}, 'fastqc_zip': {'type': 'File', 'outputSource': 'rename_fastqc_zip/outfile'}, 'multiqc_html': {'type': 'File', 'outputSource': 'rename_multiqc_html/outfile'}, 'multiqc_zip': {'type': 'File', 'outputSource': 'rename_multiqc_zip/outfile'}, 'bam': {'type': 'File', 'outputSource': 'rename_bam/outfile'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "fetch_fastqs": {
        "in": {
          "sra_accession": "illumina_accession"
        },
        "out": [
          "fastq_file_1",
          "fastq_files"
        ],
        "run": "../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl"
      },
      "nanoplot": {
        "in": {
          "fastq_files": {
            "source": "fetch_fastqs/fastq_files"
          },
          "loglength": {
            "valueFrom": "$(true)"
          },
          "format": {
            "valueFrom": "png"
          }
        },
        "out": [
          "dynamic_histogram_read_length",
          "histogram_read_length",
          "length_v_qual_scatter_plot_dot",
          "length_v_qual_scatter_plot_kde",
          "log_transformed_histogram_read_length",
          "report",
          "logfile",
          "nanostats",
          "weighted_histogram_read_length",
          "weighted_log_transform_histogram_read_length",
          "yield_by_length_img"
        ],
        "run": "../bio-cwl-tools/nanoplot/nanoplot.cwl"
      },
      "fastqc": {
        "in": {
          "reads_file": "fetch_fastqs/fastq_file_1",
          "nogroup": {
            "valueFrom": "$(true)"
          },
          "kmers": {
            "valueFrom": "$(7)"
          }
        },
        "out": [
          "zipped_file",
          "summary_file",
          "html_file"
        ],
        "run": "../bio-cwl-tools/fastqc/fastqc_2.cwl"
      },
      "multiqc": {
        "in": {
          "qc_files_array": "fastqc/zipped_file"
        },
        "out": [
          "multiqc_zip",
          "multiqc_html"
        ],
        "run": "../bio-cwl-tools/multiqc/multiqc.cwl"
      },
      "minimap2": {
        "in": {
          "indexFile": "ref_human_genome",
          "fastqFiles": "fetch_fastqs/fastq_file_1",
          "samOutput": {
            "valueFrom": "$(true)"
          }
        },
        "out": [
          "samfile"
        ],
        "run": "../bio-cwl-tools/minimap2/minimap2.cwl"
      },
      "sam2bam": {
        "in": {
          "sam": "minimap2/samfile"
        },
        "out": [
          "bam"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "sam2bam/bam"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      },
      "rename_multiqc_html": {
        "in": {
          "srcfile": "multiqc/multiqc_html",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_multiqc_zip": {
        "in": {
          "srcfile": "multiqc/multiqc_zip",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastqc_summary": {
        "in": {
          "srcfile": "fastqc/summary_file",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastqc_zip": {
        "in": {
          "srcfile": "fastqc/zipped_file",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastq": {
        "in": {
          "srcfile": "samtools_fastq/fastq",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).fastq"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_bam": {
        "in": {
          "srcfile": "sam2bam/bam",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).bam"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/tools/unpack_ref_db.cwl",
    "sha": "d27ed0d48f2948217d1bc95e1777de0cae34e331",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/tools/unpack_ref_db.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\ndoc: decompression tool using Lempel-Ziv coding (LZ77)\nrequirements:\n  DockerRequirement:\n    dockerPull: alpine:3.9\n\nbaseCommand: [tar, xvzf]\n\n\ninputs:\n  file:\n    type: File\n    inputBinding: {}\n\noutputs:\n  hg_38_fa:\n    type: File\n    outputBinding:\n      glob: static/hg38.fna\n    secondaryFiles:\n      - .fai\n      - .fwt\n      - .amb\n      - .ann\n      - .pac\n      - .sa\n      - .bwt\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'file': {'type': 'File', 'inputBinding': {}}}",
    "cwl_outputs": "{'hg_38_fa': {'type': 'File', 'outputBinding': {'glob': 'static/hg38.fna'}, 'secondaryFiles': ['.fai', '.fwt', '.amb', '.ann', '.pac', '.sa', '.bwt']}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['tar', 'xvzf']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'alpine:3.9'}}",
    "cwl_doc": "decompression tool using Lempel-Ziv coding (LZ77)",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/archive/bowtie2.cwl",
    "sha": "53929051232cf534b1ad450b96c0c5e10a00c0aa",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/bowtie2.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Aligns reads from ATAC-seq or ChIP-seq to an indexed reference genome\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference_index)\nhints:\n#  ResourceRequirement:\n#    coresMin: 4\n#    ramMin: 30000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/bowtie2:2.2.6-2\n  SoftwareRequirement:\n    packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\nbaseCommand: [\"bowtie2\"]\narguments:\n  - valueFrom: --very-sensitive\n    position: 1\n#  - valueFrom: $(runtime.cores) # set the number of threads\n#    prefix: \"-p\"\n#    position: 1\n  - position: 4 # prefix for fastq1, differs for paired/single end\n    valueFrom: |\n      ${\n        if ( inputs.is_paired_end ){\n           return \"-1\";\n        }\n        else {\n          return \"-U\";\n        }\n      }\n  - valueFrom: $(inputs.fastq1.nameroot).sam\n    prefix: \"-S\"\n    position: 6\n#stderr: $(inputs.fastq1.nameroot).bowtie2_stderr # log file\n  \n\ninputs:\n  reference_index:\n    doc: path to the FM-index files for the chosen reference genome\n    type: File\n    secondaryFiles:\n#      - $(self.basename).1.bt2\n      - $(self.nameroot.slice(0,-1))2.bt2\n      - $(self.nameroot.slice(0,-1))3.bt2\n      - $(self.nameroot.slice(0,-1))4.bt2\n      - $(self.nameroot.slice(0,-1))rev.1.bt2\n      - $(self.nameroot.slice(0,-1))rev.2.bt2\n    inputBinding:\n      position: 2\n      prefix: \"-x\"\n      valueFrom: $(self.nameroot.slice(0,-2))\n  fastq1:\n    type: File\n    inputBinding:\n      position: 4\n\n  is_paired_end:\n    type: boolean\n    default: false\n  fastq2:\n    type: File?\n    inputBinding:\n      valueFrom: |\n        ${\n            if ( inputs.is_paired_end ){\n                return self;\n            }\n            else {\n              return null;\n            }\n        }  \n      position: 12\n      prefix: \"-2\"\n  max_mapping_insert_length:\n    doc: usefull for very long fragments, as expected for ATAC\n    type: long?\n    default: 2000\n#    inputBinding:\n#      prefix: --maxins\n#      position: 1\n\n      \noutputs: \n  sam:\n    type: File\n    outputBinding:\n      glob: \"*.sam\"\n#  bowtie2_log:\n#    type: stderr\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference_index': {'doc': 'path to the FM-index files for the chosen reference genome', 'type': 'File', 'secondaryFiles': ['$(self.nameroot.slice(0,-1))2.bt2', '$(self.nameroot.slice(0,-1))3.bt2', '$(self.nameroot.slice(0,-1))4.bt2', '$(self.nameroot.slice(0,-1))rev.1.bt2', '$(self.nameroot.slice(0,-1))rev.2.bt2'], 'inputBinding': {'position': 2, 'prefix': '-x', 'valueFrom': '$(self.nameroot.slice(0,-2))'}}, 'fastq1': {'type': 'File', 'inputBinding': {'position': 4}}, 'is_paired_end': {'type': 'boolean', 'default': False}, 'fastq2': {'type': 'File?', 'inputBinding': {'valueFrom': '${\\n    if ( inputs.is_paired_end ){\\n        return self;\\n    }\\n    else {\\n      return null;\\n    }\\n}  \\n', 'position': 12, 'prefix': '-2'}}, 'max_mapping_insert_length': {'doc': 'usefull for very long fragments, as expected for ATAC', 'type': 'long?', 'default': 2000}}",
    "cwl_outputs": "{'sam': {'type': 'File', 'outputBinding': {'glob': '*.sam'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'kerstenbreuer/bowtie2:2.2.6-2'}, 'SoftwareRequirement': {'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": "[{'valueFrom': '--very-sensitive', 'position': 1}, {'position': 4, 'valueFrom': '${\\n  if ( inputs.is_paired_end ){\\n     return \"-1\";\\n  }\\n  else {\\n    return \"-U\";\\n  }\\n}\\n'}, {'valueFrom': '$(inputs.fastq1.nameroot).sam', 'prefix': '-S', 'position': 6}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.reference_index)']}}",
    "cwl_doc": "Aligns reads from ATAC-seq or ChIP-seq to an indexed reference genome\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/archive/draft2_variation.cwl",
    "sha": "02e59c5c25cf28d16c6f8168198077710388533a",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/draft2_variation.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: variation\nlabel: variation\n\ninputs:\n  - id: reference_in\n    type:\n      - File\n      - type: array\n        items: File\n  - id: fastq1\n    type: File\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: min_length_required\n    type: int?\noutputs:\n  - id: outFile\n    outputSource:\n      - picard_markduplicates/outFile\n    type: File\n\nsteps:\n  - id: bowtie2_build\n    in:\n      - id: reference_in\n        source:\n          - reference_in\n    out:\n      - id: indices\n      - id: output_log\n    run: ../bio-cwl-tools/bowtie2/bowtie2_build.cwl\n\n  - id: fastp\n    in:\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: fastq1\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n#      - id: out_fastq2\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  - id: bowtie2\n    in:\n      - id: fastq1\n        source: fastp/out_fastq1\n      - id: reference_index\n        source: bowtie2_build/indices\n    out:\n#      - id: bowtie2_log\n      - id: sam\n    run: ./bowtie2.cwl\n\n  - id: picard_sortsam\n    in:\n      - id: inputFile\n        source: bowtie2/sam\n    out:\n      - id: outFile\n    run: ./picard_sortsam.cwl\n\n  - id: picard_markduplicates\n    in:\n      - id: inputFile\n        source: picard_sortsam/outFile\n    out:\n      - id: outFile\n      - id: metrics_file\n    run: ./picard_markduplicates.cwl\n\nrequirements: []\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "variation",
    "cwl_inputs": "[{'id': 'reference_in', 'type': ['File', {'type': 'array', 'items': 'File'}]}, {'id': 'fastq1', 'type': 'File'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'min_length_required', 'type': 'int?'}]",
    "cwl_outputs": "[{'id': 'outFile', 'outputSource': ['picard_markduplicates/outFile'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "variation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/archive/draft_variation.cwl",
    "sha": "c1b67db373d790db5b25a8842d4655b576734fb1",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/draft_variation.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: variation\nlabel: variation\ninputs:\n  - id: reference_in\n    type:\n      - File\n      - type: array\n        items: File\n\n  - id: fastq1\n    type: File\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: min_length_required\n    type: int?\noutputs: \n  # - id: multiqc_html\n  #   outputSource:\n  #     - multiqc/multiqc_html\n  #   type: File\n  - id: sam\n    outputSource:\n      - bowtie2/sam\n    type: File\nsteps:\n  - id: bowtie2_build\n    in:\n      - id: reference_in\n        source:\n          - reference_in\n    out:\n      - id: indices\n      - id: output_log\n    run: ../bio-cwl-tools/bowtie2/bowtie2_build.cwl\n\n  - id: fastp\n    in:\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: fastq1\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n      # - id: out_fastq2\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  # - id: multiqc\n  #   in:\n  #     - id: qc_files_array\n  #       source:\n  #         - fastp/html_report\n  #   out:\n  #     - id: diree\n  #     - id: multiqc_html\n  #     - id: multiqc_zip\n  #   run: ./multiqc.cwl\n\n  - id: bowtie2\n    in:\n      - id: fastq1\n        source: fastp/out_fastq1\n      - id: reference_index\n        source: bowtie2_build/indices\n    out: \n     # - id: bowtie2_log\n      - id: sam\n    run: ./bowtie2.cwl\n\nrequirements: []\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "variation",
    "cwl_inputs": "[{'id': 'reference_in', 'type': ['File', {'type': 'array', 'items': 'File'}]}, {'id': 'fastq1', 'type': 'File'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'min_length_required', 'type': 'int?'}]",
    "cwl_outputs": "[{'id': 'sam', 'outputSource': ['bowtie2/sam'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "variation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/archive/snpeff_build.cwl",
    "sha": "6dbe2b79fd220fac08845ca0d200e2b6dc1d0062",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/snpeff_build.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nbaseCommand: [snpEff, build]\n\narguments:\n  - -v #verbose\n  - -dataDir /data\n  - -configOption $(inputs.dbname).genome=$(inputs.dbname)\ninputs:\n  - id: dbname\n    type: string\n    inputBinding:\n      prefix: -genbank\n      position: 1000\n\n  - id: bankfile\n    type: File\noutputs:  []\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: biocontainers/snpeff:v4.1k_cv3\n    dockerOutputDirectory: /data/\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: \"$({class: 'Directory', listing: []})\"\n        entryname: $(inputs.dbname)\n        writable: true\n      - entryname: $(inputs.dbname)/genes.gbk\n        entry: $(inputs.bankfile)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'dbname', 'type': 'string', 'inputBinding': {'prefix': '-genbank', 'position': 1000}}, {'id': 'bankfile', 'type': 'File'}]",
    "cwl_outputs": "[]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['snpEff', 'build']",
    "cwl_arguments": "['-v', '-dataDir /data', '-configOption $(inputs.dbname).genome=$(inputs.dbname)']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bowtie2_align.cwl",
    "sha": "964e9386bdc1c17da84ea6a6494268a3ccd78cd9",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bowtie2_align.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n- class: ShellCommandRequirement\n- class: InlineJavascriptRequirement\n  expressionLib:\n  - var default_output_filename = function() {\n        if (Array.isArray(inputs.filelist) && inputs.filelist.length > 0){\n          return inputs.filelist[0].location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n        } else\n          if (inputs.filelist != null){\n            return inputs.filelist.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n          } else\n            if (Array.isArray(inputs.filelist_mates) && inputs.filelist_mates.length > 0){\n              return inputs.filelist_mates[0].location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n            } else\n              if (inputs.filelist_mates != null){\n                return inputs.filelist_mates.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n              } else {\n                return null;\n              }\n    };\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/bowtie2:v2.3.0\n  dockerFile: >\n    $import: ./dockerfiles/bowtie2-Dockerfile\n- class: SoftwareRequirement\n  packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\ninputs:\n\n  indices_file:\n    type: File?\n    doc: File with secondaryFiles containing all the indices\n    inputBinding:\n      position: 81\n      prefix: -x\n      valueFrom: $(self.path.split('.').slice(0,-2).join('.'))\n\n  indices_folder:\n    type: Directory?\n    doc: \"Folder with indices files\"\n    inputBinding:\n      position: 81\n      prefix: '-x'\n      valueFrom: |\n        ${\n            for (var i = 0; i < self.listing.length; i++) {\n                if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2' ||\n                    self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2l'){\n                  return self.listing[i].path.split('.').slice(0,-3).join('.');\n                }\n            }\n            return null;\n        }\n\n  filelist:\n    type:\n    - \"null\"\n    - File\n    - type: array\n      items: File\n    doc: |\n      {-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\n      <m1>       Files with #1 mates, paired with files in <m2>.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n      <m2>       Files with #2 mates, paired with files in <m1>.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n      <r>        Files with unpaired reads.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n    inputBinding:\n      itemSeparator: \",\"\n      position: 83\n\n  filelist_mates:\n    type:\n    - \"null\"\n    - File\n    - type: array\n      items: File\n    inputBinding:\n      itemSeparator: \",\"\n      position: 85\n\n  output_filename:\n    type: string\n    inputBinding:\n      position: 90\n      prefix: \"-S\"\n      valueFrom: |\n        ${\n            if (self == \"\"){\n              return default_output_filename();\n            } else {\n              return self;\n            }\n        }\n    default: \"\"\n    doc: |\n      File for SAM output (default: stdout)\n\n  q:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are FASTQ .fq/.fastq (default)\"\n    inputBinding:\n      position: 1\n      prefix: '-q'\n\n  qseq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are in Illumina's qseq format\"\n    inputBinding:\n      position: 1\n      prefix: '--qseq'\n\n  f:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are (multi-)FASTA .fa/.mfa\"\n    inputBinding:\n      position: 1\n      prefix: '-f'\n\n  raw:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are raw one-sequence-per-line\"\n    inputBinding:\n      position: 1\n      prefix: '-r'\n\n  c:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"<m1>, <m2>, <r> are sequences themselves, not files\"\n    inputBinding:\n      position: 1\n      prefix: '-c'\n\n  s:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      skip the first <int> reads/pairs in the input (none)\n    inputBinding:\n      position: 2\n      prefix: '-s'\n\n  u:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      stop after first <int> reads/pairs (no limit)\n    inputBinding:\n      position: 3\n      prefix: '-u'\n\n  clip_5p_end:\n    type: int?\n    doc: |\n      trim <int> bases from 5'/left end of reads (0)\n    inputBinding:\n      position: 4\n      prefix: '-5'\n\n  clip_3p_end:\n    type: int?\n    doc: |\n      trim <int> bases from 3'/right end of reads (0)\n    inputBinding:\n      position: 5\n      prefix: '-3'\n\n  phred33_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities are Phred+33 (default)\"\n    inputBinding:\n      position: 6\n      prefix: '--phred33'\n\n  phred64_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities are Phred+64\"\n    inputBinding:\n      position: 6\n      prefix: '--phred64'\n\n  integer_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities encoded as space-delimited integers\"\n    inputBinding:\n      position: 6\n      prefix: '--int-quals'\n\n  n:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      max # mismatches in seed alignment; can be 0 or 1 (0)\n    inputBinding:\n      position: 7\n      prefix: '-N'\n\n  l:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      length of seed substrings; must be >3, <32 (22)\n    inputBinding:\n      position: 8\n      prefix: '-L'\n\n  i:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      interval between seed substrings w/r/t read len (S,1,1.15)\n    inputBinding:\n      position: 9\n      prefix: '-i'\n\n  n_ceil:\n    type:\n    - \"null\"\n    - string\n    doc: >\n      func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)\n    inputBinding:\n      position: 10\n      prefix: '--n-ceil'\n\n  dpad:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      include <int> extra ref chars on sides of DP table (15)\n    inputBinding:\n      position: 11\n      prefix: '--dpad'\n\n  gbar:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      disallow gaps within <int> nucs of read extremes (4)\n    inputBinding:\n      position: 12\n      prefix: '--gbar'\n\n  ignore_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      treat all quality values as 30 on Phred scale (off)\n    inputBinding:\n      position: 13\n      prefix: '--ignore-quals'\n\n  nofw:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not align forward (original) version of read (off)\n    inputBinding:\n      position: 14\n      prefix: '--nofw'\n\n  norc:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not align reverse-complement version of read (off)\n    inputBinding:\n      position: 15\n      prefix: '--norc'\n\n  no_1mm_upfront:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments\n    inputBinding:\n      position: 16\n      prefix: '--no-1mm-upfront'\n\n  end_to_end:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      entire read must align; no clipping (on)\n      Options:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n        --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50\n        --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\n        --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 17\n      prefix: '--end-to-end'\n\n  end_to_end_very_fast:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n    inputBinding:\n      position: 18\n      prefix: '--very-fast'\n\n  end_to_end_fast:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n    inputBinding:\n      position: 18\n      prefix: '--fast'\n\n  end_to_end_sensitive:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\n    inputBinding:\n      position: 18\n      prefix: '--sensitive'\n\n  end_to_end_very_sensitive:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 18\n      prefix: '--very-sensitive'\n\n  local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      local alignment; ends might be soft clipped (off)\n      Options:\n        --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\n        --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\n        --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\n        --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 19\n      prefix: '--local'\n\n  local_very_fast_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\n    inputBinding:\n      position: 20\n      prefix: '--very-fast-local'\n\n  local_fast_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\n    inputBinding:\n      position: 20\n      prefix: '--fast-local'\n\n  local_sensitive_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\n    inputBinding:\n      position: 20\n      prefix: '--sensitive-local'\n\n  local_very_sensitive_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 20\n      prefix: '--very-sensitive-local'\n\n  ma:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      match bonus (0 for --end-to-end, 2 for --local)\n    inputBinding:\n      position: 21\n      prefix: '--ma'\n\n  mp:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      max penalty for mismatch; lower qual = lower penalty (6)\n    inputBinding:\n      position: 22\n      prefix: '--mp'\n\n  np:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      penalty for non-A/C/G/Ts in read/ref (1)\n    inputBinding:\n      position: 23\n      prefix: '--np'\n\n  rdg:\n    type:\n    - \"null\"\n    - int[]\n    doc: |\n      read gap open, extend penalties (5,3)\n    inputBinding:\n      position: 24\n      itemSeparator: \",\"\n      prefix: '--rdg'\n\n  rfg:\n    type:\n    - \"null\"\n    - int[]\n    doc: |\n      reference gap open, extend penalties (5,3)\n    inputBinding:\n      position: 25\n      itemSeparator: \",\"\n      prefix: '--rfg'\n\n  score_min:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)\n    inputBinding:\n      position: 26\n      prefix: '--score-min'\n\n  k:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      report up to <int> alns per read; MAPQ not meaningful\n    inputBinding:\n      position: 27\n      prefix: '-k'\n\n  a:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      report all alignments; very slow, MAPQ not meaningful\n    inputBinding:\n      position: 27\n      prefix: '-a'\n\n  d:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      give up extending after <int> failed extends in a row (15)\n    inputBinding:\n      position: 28\n      prefix: '-D'\n\n  r:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      for reads w/ repetitive seeds, try <int> sets of seeds (2)\n    inputBinding:\n      position: 29\n      prefix: '-R'\n\n  minins:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      minimum fragment length (0)\n    inputBinding:\n      position: 30\n      prefix: '--minins'\n\n  maxins:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      maxins fragment length (0)\n    inputBinding:\n      position: 30\n      prefix: '--maxins'\n\n  fr:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--fr'\n\n  rf:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--rf'\n\n  ff:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--ff'\n\n  no_mixed:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      suppress unpaired alignments for paired reads\n    inputBinding:\n      position: 32\n      prefix: '--no-mixed'\n\n  no_discordant:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      suppress discordant alignments for paired reads\n    inputBinding:\n      position: 33\n      prefix: '--no-discordant'\n\n  no_dovetail:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when mates extend past each other\n    inputBinding:\n      position: 34\n      prefix: '--no-dovetail'\n\n  no_contain:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when one mate alignment contains other\n    inputBinding:\n      position: 35\n      prefix: '--no-contain'\n\n  no_overlap:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when mates overlap at all\n    inputBinding:\n      position: 36\n      prefix: '--no-overlap'\n\n  t:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      print wall-clock time taken by search phases\n    inputBinding:\n      position: 37\n      prefix: '-t'\n\n  un:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write unpaired reads that didn't align to <path>\n    inputBinding:\n      position: 38\n      prefix: '--un'\n\n  al:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write unpaired reads that aligned at least once to <path>\n    inputBinding:\n      position: 39\n      prefix: '--al'\n\n  un_conc:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write pairs that didn't align concordantly to <path>\n    inputBinding:\n      position: 40\n      prefix: '--un-conc'\n\n  al_conc:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write pairs that aligned concordantly at least once to <path>\n    inputBinding:\n      position: 41\n      prefix: '--al-conc'\n\n  quiet:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"print nothing to stderr except serious errors\"\n    inputBinding:\n      position: 42\n      prefix: '--quiet'\n\n  met_file:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      send metrics to file at <path> (off)\n    inputBinding:\n      position: 43\n      prefix: '--met-file'\n\n  met_stderr:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"send metrics to stderr (off)\"\n    inputBinding:\n      position: 44\n      prefix: '--met-stderr'\n\n  met:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      report internal counters & metrics every <int> secs (1)\n    inputBinding:\n      position: 45\n      prefix: '--met'\n\n  no_unal:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress SAM records for unaligned reads\"\n    inputBinding:\n      position: 46\n      prefix: '--no-unal'\n\n  no_head:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress header lines, i.e. lines starting with @\"\n    inputBinding:\n      position: 47\n      prefix: '--no-head'\n\n  no_sq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress @SQ header lines\"\n    inputBinding:\n      position: 48\n      prefix: '--no-sq'\n\n  rg_id:\n    type:\n    - \"null\"\n    - string\n    doc: \"set read group id, reflected in @RG line and RG:Z: opt field\"\n    inputBinding:\n      position: 49\n      prefix: '--rg-id'\n\n  rg:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      add <text> (\"lab:value\") to @RG line of SAM header.\n      Note: @RG line only printed when --rg-id is set.\n    inputBinding:\n      position: 50\n      prefix: '--rg'\n\n  omit_sec_seq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"put '*' in SEQ and QUAL fields for secondary alignments\"\n    inputBinding:\n      position: 51\n      prefix: '--omit-sec-seq'\n\n  threads:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      number of alignment threads to launch (1)\n    inputBinding:\n      position: 52\n      prefix: '-p'\n\n  reorder:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      force SAM output order to match order of input reads\n    inputBinding:\n      position: 53\n      prefix: '--reorder'\n\n  mm:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"use memory-mapped I/O for index; many 'bowtie's can share\"\n    inputBinding:\n      position: 54\n      prefix: '--mm'\n\n  qc_filter:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"filter out reads that are bad according to QSEQ filter\"\n    inputBinding:\n      position: 55\n      prefix: '--qc-filter'\n#\n  seed:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      seed for random number generator (0)\n    inputBinding:\n      position: 56\n      prefix: '--seed'\n\n  non_deterministic:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"seed rand. gen. arbitrarily instead of using read attributes\"\n    inputBinding:\n      position: 57\n      prefix: '--non-deterministic'\n\noutputs:\n\n  output:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n           if (inputs.output_filename == \"\"){\n             return default_output_filename();\n           } else {\n             return inputs.output_filename;\n           }\n        }\n\n  output_log:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n           if (inputs.output_filename == \"\"){\n             return default_output_filename().split('.').slice(0,-1).join('.') + \".log\";\n           } else {\n             return inputs.output_filename.split('.').slice(0,-1).join('.') + \".log\";\n           }\n        }\n\nbaseCommand:\n  - bowtie2\n\narguments:\n  - valueFrom: |\n      ${\n        if (inputs.filelist && inputs.filelist_mates){\n          return \"-1\";\n        } else if (inputs.filelist){\n          return \"-U\";\n        } else {\n          return null;\n        }\n      }\n    position: 82\n  - valueFrom: |\n      ${\n        if (inputs.filelist && inputs.filelist_mates){\n          return \"-2\";\n        } else if (inputs.filelist_mates){\n          return \"-U\";\n        } else {\n          return null;\n        }\n      }\n    position: 84\n  - valueFrom: |\n      ${\n        if (inputs.output_filename == \"\"){\n          return ' 2> ' + default_output_filename().split('.').slice(0,-1).join('.') + '.log';\n        } else {\n          return ' 2> ' + inputs.output_filename.split('.').slice(0,-1).join('.') + '.log';\n        }\n      }\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- http://schema.org/version/latest/schema.rdf\n\ns:name: \"bowtie2_align\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:isPartOf:\n  class: s:CreativeWork\n  s:name: Common Workflow Language\n  s:url: http://commonwl.org/\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie aligner to align input FASTQ file(s) to reference genome\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'indices_file': {'type': 'File?', 'doc': 'File with secondaryFiles containing all the indices', 'inputBinding': {'position': 81, 'prefix': '-x', 'valueFrom': \"$(self.path.split('.').slice(0,-2).join('.'))\"}}, 'indices_folder': {'type': 'Directory?', 'doc': 'Folder with indices files', 'inputBinding': {'position': 81, 'prefix': '-x', 'valueFrom': \"${\\n    for (var i = 0; i < self.listing.length; i++) {\\n        if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2' ||\\n            self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2l'){\\n          return self.listing[i].path.split('.').slice(0,-3).join('.');\\n        }\\n    }\\n    return null;\\n}\\n\"}}, 'filelist': {'type': ['null', 'File', {'type': 'array', 'items': 'File'}], 'doc': \"{-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\\n<m1>       Files with #1 mates, paired with files in <m2>.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n<m2>       Files with #2 mates, paired with files in <m1>.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n<r>        Files with unpaired reads.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n\", 'inputBinding': {'itemSeparator': ',', 'position': 83}}, 'filelist_mates': {'type': ['null', 'File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'itemSeparator': ',', 'position': 85}}, 'output_filename': {'type': 'string', 'inputBinding': {'position': 90, 'prefix': '-S', 'valueFrom': '${\\n    if (self == \"\"){\\n      return default_output_filename();\\n    } else {\\n      return self;\\n    }\\n}\\n'}, 'default': '', 'doc': 'File for SAM output (default: stdout)\\n'}, 'q': {'type': ['null', 'boolean'], 'doc': 'query input files are FASTQ .fq/.fastq (default)', 'inputBinding': {'position': 1, 'prefix': '-q'}}, 'qseq': {'type': ['null', 'boolean'], 'doc': \"query input files are in Illumina's qseq format\", 'inputBinding': {'position': 1, 'prefix': '--qseq'}}, 'f': {'type': ['null', 'boolean'], 'doc': 'query input files are (multi-)FASTA .fa/.mfa', 'inputBinding': {'position': 1, 'prefix': '-f'}}, 'raw': {'type': ['null', 'boolean'], 'doc': 'query input files are raw one-sequence-per-line', 'inputBinding': {'position': 1, 'prefix': '-r'}}, 'c': {'type': ['null', 'boolean'], 'doc': '<m1>, <m2>, <r> are sequences themselves, not files', 'inputBinding': {'position': 1, 'prefix': '-c'}}, 's': {'type': ['null', 'int'], 'doc': 'skip the first <int> reads/pairs in the input (none)\\n', 'inputBinding': {'position': 2, 'prefix': '-s'}}, 'u': {'type': ['null', 'int'], 'doc': 'stop after first <int> reads/pairs (no limit)\\n', 'inputBinding': {'position': 3, 'prefix': '-u'}}, 'clip_5p_end': {'type': 'int?', 'doc': \"trim <int> bases from 5'/left end of reads (0)\\n\", 'inputBinding': {'position': 4, 'prefix': '-5'}}, 'clip_3p_end': {'type': 'int?', 'doc': \"trim <int> bases from 3'/right end of reads (0)\\n\", 'inputBinding': {'position': 5, 'prefix': '-3'}}, 'phred33_quals': {'type': ['null', 'boolean'], 'doc': 'qualities are Phred+33 (default)', 'inputBinding': {'position': 6, 'prefix': '--phred33'}}, 'phred64_quals': {'type': ['null', 'boolean'], 'doc': 'qualities are Phred+64', 'inputBinding': {'position': 6, 'prefix': '--phred64'}}, 'integer_quals': {'type': ['null', 'boolean'], 'doc': 'qualities encoded as space-delimited integers', 'inputBinding': {'position': 6, 'prefix': '--int-quals'}}, 'n': {'type': ['null', 'int'], 'doc': 'max # mismatches in seed alignment; can be 0 or 1 (0)\\n', 'inputBinding': {'position': 7, 'prefix': '-N'}}, 'l': {'type': ['null', 'int'], 'doc': 'length of seed substrings; must be >3, <32 (22)\\n', 'inputBinding': {'position': 8, 'prefix': '-L'}}, 'i': {'type': ['null', 'int'], 'doc': 'interval between seed substrings w/r/t read len (S,1,1.15)\\n', 'inputBinding': {'position': 9, 'prefix': '-i'}}, 'n_ceil': {'type': ['null', 'string'], 'doc': 'func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)\\n', 'inputBinding': {'position': 10, 'prefix': '--n-ceil'}}, 'dpad': {'type': ['null', 'int'], 'doc': 'include <int> extra ref chars on sides of DP table (15)\\n', 'inputBinding': {'position': 11, 'prefix': '--dpad'}}, 'gbar': {'type': ['null', 'int'], 'doc': 'disallow gaps within <int> nucs of read extremes (4)\\n', 'inputBinding': {'position': 12, 'prefix': '--gbar'}}, 'ignore_quals': {'type': ['null', 'boolean'], 'doc': 'treat all quality values as 30 on Phred scale (off)\\n', 'inputBinding': {'position': 13, 'prefix': '--ignore-quals'}}, 'nofw': {'type': ['null', 'boolean'], 'doc': 'do not align forward (original) version of read (off)\\n', 'inputBinding': {'position': 14, 'prefix': '--nofw'}}, 'norc': {'type': ['null', 'boolean'], 'doc': 'do not align reverse-complement version of read (off)\\n', 'inputBinding': {'position': 15, 'prefix': '--norc'}}, 'no_1mm_upfront': {'type': ['null', 'boolean'], 'doc': 'do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments\\n', 'inputBinding': {'position': 16, 'prefix': '--no-1mm-upfront'}}, 'end_to_end': {'type': ['null', 'boolean'], 'doc': 'entire read must align; no clipping (on)\\nOptions:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n  --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50\\n  --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\\n  --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 17, 'prefix': '--end-to-end'}}, 'end_to_end_very_fast': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n', 'inputBinding': {'position': 18, 'prefix': '--very-fast'}}, 'end_to_end_fast': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n', 'inputBinding': {'position': 18, 'prefix': '--fast'}}, 'end_to_end_sensitive': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\\n', 'inputBinding': {'position': 18, 'prefix': '--sensitive'}}, 'end_to_end_very_sensitive': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 18, 'prefix': '--very-sensitive'}}, 'local': {'type': ['null', 'boolean'], 'doc': 'local alignment; ends might be soft clipped (off)\\nOptions:\\n  --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\\n  --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\\n  --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\\n  --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 19, 'prefix': '--local'}}, 'local_very_fast_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\\n', 'inputBinding': {'position': 20, 'prefix': '--very-fast-local'}}, 'local_fast_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\\n', 'inputBinding': {'position': 20, 'prefix': '--fast-local'}}, 'local_sensitive_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\\n', 'inputBinding': {'position': 20, 'prefix': '--sensitive-local'}}, 'local_very_sensitive_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 20, 'prefix': '--very-sensitive-local'}}, 'ma': {'type': ['null', 'int'], 'doc': 'match bonus (0 for --end-to-end, 2 for --local)\\n', 'inputBinding': {'position': 21, 'prefix': '--ma'}}, 'mp': {'type': ['null', 'int'], 'doc': 'max penalty for mismatch; lower qual = lower penalty (6)\\n', 'inputBinding': {'position': 22, 'prefix': '--mp'}}, 'np': {'type': ['null', 'int'], 'doc': 'penalty for non-A/C/G/Ts in read/ref (1)\\n', 'inputBinding': {'position': 23, 'prefix': '--np'}}, 'rdg': {'type': ['null', 'int[]'], 'doc': 'read gap open, extend penalties (5,3)\\n', 'inputBinding': {'position': 24, 'itemSeparator': ',', 'prefix': '--rdg'}}, 'rfg': {'type': ['null', 'int[]'], 'doc': 'reference gap open, extend penalties (5,3)\\n', 'inputBinding': {'position': 25, 'itemSeparator': ',', 'prefix': '--rfg'}}, 'score_min': {'type': ['null', 'string'], 'doc': 'min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)\\n', 'inputBinding': {'position': 26, 'prefix': '--score-min'}}, 'k': {'type': ['null', 'int'], 'doc': 'report up to <int> alns per read; MAPQ not meaningful\\n', 'inputBinding': {'position': 27, 'prefix': '-k'}}, 'a': {'type': ['null', 'boolean'], 'doc': 'report all alignments; very slow, MAPQ not meaningful\\n', 'inputBinding': {'position': 27, 'prefix': '-a'}}, 'd': {'type': ['null', 'int'], 'doc': 'give up extending after <int> failed extends in a row (15)\\n', 'inputBinding': {'position': 28, 'prefix': '-D'}}, 'r': {'type': ['null', 'int'], 'doc': 'for reads w/ repetitive seeds, try <int> sets of seeds (2)\\n', 'inputBinding': {'position': 29, 'prefix': '-R'}}, 'minins': {'type': ['null', 'int'], 'doc': 'minimum fragment length (0)\\n', 'inputBinding': {'position': 30, 'prefix': '--minins'}}, 'maxins': {'type': ['null', 'int'], 'doc': 'maxins fragment length (0)\\n', 'inputBinding': {'position': 30, 'prefix': '--maxins'}}, 'fr': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--fr'}}, 'rf': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--rf'}}, 'ff': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--ff'}}, 'no_mixed': {'type': ['null', 'boolean'], 'doc': 'suppress unpaired alignments for paired reads\\n', 'inputBinding': {'position': 32, 'prefix': '--no-mixed'}}, 'no_discordant': {'type': ['null', 'boolean'], 'doc': 'suppress discordant alignments for paired reads\\n', 'inputBinding': {'position': 33, 'prefix': '--no-discordant'}}, 'no_dovetail': {'type': ['null', 'boolean'], 'doc': 'not concordant when mates extend past each other\\n', 'inputBinding': {'position': 34, 'prefix': '--no-dovetail'}}, 'no_contain': {'type': ['null', 'boolean'], 'doc': 'not concordant when one mate alignment contains other\\n', 'inputBinding': {'position': 35, 'prefix': '--no-contain'}}, 'no_overlap': {'type': ['null', 'boolean'], 'doc': 'not concordant when mates overlap at all\\n', 'inputBinding': {'position': 36, 'prefix': '--no-overlap'}}, 't': {'type': ['null', 'boolean'], 'doc': 'print wall-clock time taken by search phases\\n', 'inputBinding': {'position': 37, 'prefix': '-t'}}, 'un': {'type': ['null', 'string'], 'doc': \"write unpaired reads that didn't align to <path>\\n\", 'inputBinding': {'position': 38, 'prefix': '--un'}}, 'al': {'type': ['null', 'string'], 'doc': 'write unpaired reads that aligned at least once to <path>\\n', 'inputBinding': {'position': 39, 'prefix': '--al'}}, 'un_conc': {'type': ['null', 'string'], 'doc': \"write pairs that didn't align concordantly to <path>\\n\", 'inputBinding': {'position': 40, 'prefix': '--un-conc'}}, 'al_conc': {'type': ['null', 'string'], 'doc': 'write pairs that aligned concordantly at least once to <path>\\n', 'inputBinding': {'position': 41, 'prefix': '--al-conc'}}, 'quiet': {'type': ['null', 'boolean'], 'doc': 'print nothing to stderr except serious errors', 'inputBinding': {'position': 42, 'prefix': '--quiet'}}, 'met_file': {'type': ['null', 'string'], 'doc': 'send metrics to file at <path> (off)\\n', 'inputBinding': {'position': 43, 'prefix': '--met-file'}}, 'met_stderr': {'type': ['null', 'boolean'], 'doc': 'send metrics to stderr (off)', 'inputBinding': {'position': 44, 'prefix': '--met-stderr'}}, 'met': {'type': ['null', 'int'], 'doc': 'report internal counters & metrics every <int> secs (1)\\n', 'inputBinding': {'position': 45, 'prefix': '--met'}}, 'no_unal': {'type': ['null', 'boolean'], 'doc': 'suppress SAM records for unaligned reads', 'inputBinding': {'position': 46, 'prefix': '--no-unal'}}, 'no_head': {'type': ['null', 'boolean'], 'doc': 'suppress header lines, i.e. lines starting with @', 'inputBinding': {'position': 47, 'prefix': '--no-head'}}, 'no_sq': {'type': ['null', 'boolean'], 'doc': 'suppress @SQ header lines', 'inputBinding': {'position': 48, 'prefix': '--no-sq'}}, 'rg_id': {'type': ['null', 'string'], 'doc': 'set read group id, reflected in @RG line and RG:Z: opt field', 'inputBinding': {'position': 49, 'prefix': '--rg-id'}}, 'rg': {'type': ['null', 'string'], 'doc': 'add <text> (\"lab:value\") to @RG line of SAM header.\\nNote: @RG line only printed when --rg-id is set.\\n', 'inputBinding': {'position': 50, 'prefix': '--rg'}}, 'omit_sec_seq': {'type': ['null', 'boolean'], 'doc': \"put '*' in SEQ and QUAL fields for secondary alignments\", 'inputBinding': {'position': 51, 'prefix': '--omit-sec-seq'}}, 'threads': {'type': ['null', 'int'], 'doc': 'number of alignment threads to launch (1)\\n', 'inputBinding': {'position': 52, 'prefix': '-p'}}, 'reorder': {'type': ['null', 'boolean'], 'doc': 'force SAM output order to match order of input reads\\n', 'inputBinding': {'position': 53, 'prefix': '--reorder'}}, 'mm': {'type': ['null', 'boolean'], 'doc': \"use memory-mapped I/O for index; many 'bowtie's can share\", 'inputBinding': {'position': 54, 'prefix': '--mm'}}, 'qc_filter': {'type': ['null', 'boolean'], 'doc': 'filter out reads that are bad according to QSEQ filter', 'inputBinding': {'position': 55, 'prefix': '--qc-filter'}}, 'seed': {'type': ['null', 'int'], 'doc': 'seed for random number generator (0)\\n', 'inputBinding': {'position': 56, 'prefix': '--seed'}}, 'non_deterministic': {'type': ['null', 'boolean'], 'doc': 'seed rand. gen. arbitrarily instead of using read attributes', 'inputBinding': {'position': 57, 'prefix': '--non-deterministic'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '${\\n   if (inputs.output_filename == \"\"){\\n     return default_output_filename();\\n   } else {\\n     return inputs.output_filename;\\n   }\\n}\\n'}}, 'output_log': {'type': 'File', 'outputBinding': {'glob': '${\\n   if (inputs.output_filename == \"\"){\\n     return default_output_filename().split(\\'.\\').slice(0,-1).join(\\'.\\') + \".log\";\\n   } else {\\n     return inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\') + \".log\";\\n   }\\n}\\n'}}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bowtie2:v2.3.0', 'dockerFile': '$import: ./dockerfiles/bowtie2-Dockerfile\\n'}, {'class': 'SoftwareRequirement', 'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": "[{'valueFrom': '${\\n  if (inputs.filelist && inputs.filelist_mates){\\n    return \"-1\";\\n  } else if (inputs.filelist){\\n    return \"-U\";\\n  } else {\\n    return null;\\n  }\\n}\\n', 'position': 82}, {'valueFrom': '${\\n  if (inputs.filelist && inputs.filelist_mates){\\n    return \"-2\";\\n  } else if (inputs.filelist_mates){\\n    return \"-U\";\\n  } else {\\n    return null;\\n  }\\n}\\n', 'position': 84}, {'valueFrom': '${\\n  if (inputs.output_filename == \"\"){\\n    return \\' 2> \\' + default_output_filename().split(\\'.\\').slice(0,-1).join(\\'.\\') + \\'.log\\';\\n  } else {\\n    return \\' 2> \\' + inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\') + \\'.log\\';\\n  }\\n}\\n', 'position': 100000, 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['http://schema.org/version/latest/schema.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs bowtie aligner to align input FASTQ file(s) to reference genome\n",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie2_align",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": "{'class': 's:CreativeWork', 's:name': 'Common Workflow Language', 's:url': 'http://commonwl.org/'}",
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bowtie2_build.cwl",
    "sha": "164fb007e96b63a6c86c6e9ad2f3ad7f1f77785b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bowtie2_build.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n- class: ShellCommandRequirement\n- class: InlineJavascriptRequirement\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/bowtie2:v2.3.0\n  dockerFile: >\n    $import: ./dockerfiles/bowtie2-Dockerfile\n- class: SoftwareRequirement\n  packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\ninputs:\n\n  reference_in:\n    type:\n      - File\n      - type: array\n        items: File\n    doc: >\n      comma-separated list of files with ref sequences\n    inputBinding:\n      itemSeparator: \",\"\n      position: 25\n\n  bt2_index_base:\n    type: string?\n    doc: |\n      write bt2 data to files with this dir/basename\n    inputBinding:\n      position: 26\n      shellQuote: false\n    default: bowtie2_indices\n\n  f:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      reference files are Fasta (default)\n    inputBinding:\n      position: 1\n      prefix: '-f'\n\n  c:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      reference sequences given on cmd line (as <reference_in>)\n    inputBinding:\n      position: 2\n      prefix: '-c'\n\n  large_index:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\n    inputBinding:\n      position: 3\n      prefix: '--large-index'\n\n  noauto:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      disable automatic -p/--bmax/--dcv memory-fitting\n    inputBinding:\n      position: 4\n      prefix: '--noauto'\n\n  packed:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      use packed strings internally; slower, less memory\n    inputBinding:\n      position: 5\n      prefix: '--packed'\n\n  bmax:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      max bucket sz for blockwise suffix-array builder\n    inputBinding:\n      position: 6\n      prefix: '--bmax'\n\n  bmaxdivn:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      max bucket sz as divisor of ref len (default: 4)\n    inputBinding:\n      position: 7\n      prefix: '--bmaxdivn'\n\n  dcv:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      diff-cover period for blockwise (default: 1024)\n    inputBinding:\n      position: 8\n      prefix: '--dcv'\n\n  nodc:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      disable diff-cover (algorithm becomes quadratic)\n    inputBinding:\n      position: 9\n      prefix: '--nodc'\n\n  noref:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      don't build .3/.4 index files\n    inputBinding:\n      position: 10\n      prefix: '--noref'\n\n  justref:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      just build .3/.4 index files\n    inputBinding:\n      position: 11\n      prefix: '--justref'\n\n  offrate:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      SA is sampled every 2^<int> BWT chars (default: 5)\n    inputBinding:\n      position: 12\n      prefix: '--offrate'\n\n  ftabchars:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      # of chars consumed in initial lookup (default: 10)\n    inputBinding:\n      position: 13\n      prefix: '--ftabchars'\n\n  threads:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      # of threads\n    inputBinding:\n      position: 14\n      prefix: '--threads'\n\n  seed:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      seed for random number generator\n    inputBinding:\n      position: 15\n      prefix: '--seed'\n\n  quiet:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      verbose output (for debugging)\n    inputBinding:\n      position: 15\n      prefix: '--quiet'\n\noutputs:\n\n  indices:\n    type: File\n    outputBinding:\n      glob: $(inputs.bt2_index_base + \".1.bt2*\")\n    secondaryFiles: |\n      ${\n        var ext = self.location.split('/').slice(-1)[0].split('.').slice(-1)[0];\n        var basename = self.location.split(\"/\").slice(-1)[0].split(\".\").slice(0, -2).join (\".\");\n        var dirname = self.location.split(\"/\").slice(0,-1).join(\"/\");\n        return [{\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".2.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".3.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".4.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.1.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.2.\" + ext}\n        ]\n      }\n\n  output_log:\n    type: File\n    outputBinding:\n      glob: $(inputs.bt2_index_base + \".log\")\n\nbaseCommand:\n  - bowtie2-build\n\narguments:\n  - valueFrom: $('2> ' + inputs.bt2_index_base + '.log')\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- http://schema.org/version/latest/schema.rdf\n\ns:name: \"bowtie2_build\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:isPartOf:\n  class: s:CreativeWork\n  s:name: Common Workflow Language\n  s:url: http://commonwl.org/\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie2-build to generate indices from input FASTA files",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference_in': {'type': ['File', {'type': 'array', 'items': 'File'}], 'doc': 'comma-separated list of files with ref sequences\\n', 'inputBinding': {'itemSeparator': ',', 'position': 25}}, 'bt2_index_base': {'type': 'string?', 'doc': 'write bt2 data to files with this dir/basename\\n', 'inputBinding': {'position': 26, 'shellQuote': False}, 'default': 'bowtie2_indices'}, 'f': {'type': ['null', 'boolean'], 'doc': 'reference files are Fasta (default)\\n', 'inputBinding': {'position': 1, 'prefix': '-f'}}, 'c': {'type': ['null', 'boolean'], 'doc': 'reference sequences given on cmd line (as <reference_in>)\\n', 'inputBinding': {'position': 2, 'prefix': '-c'}}, 'large_index': {'type': ['null', 'boolean'], 'doc': \"force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\\n\", 'inputBinding': {'position': 3, 'prefix': '--large-index'}}, 'noauto': {'type': ['null', 'boolean'], 'doc': 'disable automatic -p/--bmax/--dcv memory-fitting\\n', 'inputBinding': {'position': 4, 'prefix': '--noauto'}}, 'packed': {'type': ['null', 'boolean'], 'doc': 'use packed strings internally; slower, less memory\\n', 'inputBinding': {'position': 5, 'prefix': '--packed'}}, 'bmax': {'type': ['null', 'int'], 'doc': 'max bucket sz for blockwise suffix-array builder\\n', 'inputBinding': {'position': 6, 'prefix': '--bmax'}}, 'bmaxdivn': {'type': ['null', 'int'], 'doc': 'max bucket sz as divisor of ref len (default: 4)\\n', 'inputBinding': {'position': 7, 'prefix': '--bmaxdivn'}}, 'dcv': {'type': ['null', 'int'], 'doc': 'diff-cover period for blockwise (default: 1024)\\n', 'inputBinding': {'position': 8, 'prefix': '--dcv'}}, 'nodc': {'type': ['null', 'boolean'], 'doc': 'disable diff-cover (algorithm becomes quadratic)\\n', 'inputBinding': {'position': 9, 'prefix': '--nodc'}}, 'noref': {'type': ['null', 'boolean'], 'doc': \"don't build .3/.4 index files\\n\", 'inputBinding': {'position': 10, 'prefix': '--noref'}}, 'justref': {'type': ['null', 'boolean'], 'doc': 'just build .3/.4 index files\\n', 'inputBinding': {'position': 11, 'prefix': '--justref'}}, 'offrate': {'type': ['null', 'int'], 'doc': 'SA is sampled every 2^<int> BWT chars (default: 5)\\n', 'inputBinding': {'position': 12, 'prefix': '--offrate'}}, 'ftabchars': {'type': ['null', 'int'], 'doc': '# of chars consumed in initial lookup (default: 10)\\n', 'inputBinding': {'position': 13, 'prefix': '--ftabchars'}}, 'threads': {'type': ['null', 'int'], 'doc': '# of threads\\n', 'inputBinding': {'position': 14, 'prefix': '--threads'}}, 'seed': {'type': ['null', 'int'], 'doc': 'seed for random number generator\\n', 'inputBinding': {'position': 15, 'prefix': '--seed'}}, 'quiet': {'type': ['null', 'boolean'], 'doc': 'verbose output (for debugging)\\n', 'inputBinding': {'position': 15, 'prefix': '--quiet'}}}",
    "cwl_outputs": "{'indices': {'type': 'File', 'outputBinding': {'glob': '$(inputs.bt2_index_base + \".1.bt2*\")'}, 'secondaryFiles': '${\\n  var ext = self.location.split(\\'/\\').slice(-1)[0].split(\\'.\\').slice(-1)[0];\\n  var basename = self.location.split(\"/\").slice(-1)[0].split(\".\").slice(0, -2).join (\".\");\\n  var dirname = self.location.split(\"/\").slice(0,-1).join(\"/\");\\n  return [{\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".2.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".3.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".4.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.1.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.2.\" + ext}\\n  ]\\n}\\n'}, 'output_log': {'type': 'File', 'outputBinding': {'glob': '$(inputs.bt2_index_base + \".log\")'}}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bowtie2:v2.3.0', 'dockerFile': '$import: ./dockerfiles/bowtie2-Dockerfile\\n'}, {'class': 'SoftwareRequirement', 'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2-build']",
    "cwl_arguments": "[{'valueFrom': \"$('2> ' + inputs.bt2_index_base + '.log')\", 'position': 100000, 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['http://schema.org/version/latest/schema.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs bowtie2-build to generate indices from input FASTA files",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie2_build",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": "{'class': 's:CreativeWork', 's:name': 'Common Workflow Language', 's:url': 'http://commonwl.org/'}",
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bwa-index.cwl",
    "sha": "7d78a2916f48cfe09c5f6f17ea4b726359bacf4c",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bwa-index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  DockerRequirement:\n    dockerPull: \"quay.io/biocontainers/bwa:0.7.17--ha92aebf_3\"\n  InlineJavascriptRequirement: {}\n\ninputs:\n  InputFile:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      position: 200\n    \n  IndexName:\n    type: string\n    inputBinding:\n      prefix: \"-p\"\n      #valueFrom: $(self + \".bwt\")\n#Optional arguments\n  algoType:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n          - is\n          - bwtsw\n    inputBinding:\n      prefix: \"-a\"\n\nbaseCommand: [bwa, index]\n\noutputs: \n  index:\n    type: File\n    secondaryFiles: \n   #   - $(inputs.IndexName).bwt.bwt\n      - $(inputs.IndexName).sa\n      - $(inputs.IndexName).pac\n      - $(inputs.IndexName).ann\n      - $(inputs.IndexName).amb\n    outputBinding:\n      glob: $(inputs.IndexName).bwt\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'InputFile': {'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'position': 200}}, 'IndexName': {'type': 'string', 'inputBinding': {'prefix': '-p'}}, 'algoType': {'type': ['null', {'type': 'enum', 'symbols': ['is', 'bwtsw']}], 'inputBinding': {'prefix': '-a'}}}",
    "cwl_outputs": "{'index': {'type': 'File', 'secondaryFiles': ['$(inputs.IndexName).sa', '$(inputs.IndexName).pac', '$(inputs.IndexName).ann', '$(inputs.IndexName).amb'], 'outputBinding': {'glob': '$(inputs.IndexName).bwt'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'index']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bwa:0.7.17--ha92aebf_3'}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/bwa-mem.cwl",
    "sha": "943cb4a62734bdc5b529e2181ca0aa716fef60c7",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bwa-mem.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  DockerRequirement:\n    dockerPull: \"quay.io/biocontainers/bwa:0.7.17--ha92aebf_3\"\n\ninputs:\n  InputFile:\n    type: File[]\n    format:\n      - edam:format_1930 # FASTA\n      - edam:format_1931 # FASTQ\n    inputBinding:\n      position: 201\n    \n  Index:\n    type: File\n    inputBinding:\n      position: 200\n    secondaryFiles:\n      - .fai\n      - .amb\n      - .ann\n      - .bwt\n      - .pac\n      - .sa\n\n#Optional arguments\n\n  Threads:\n    type: int?\n    inputBinding:\n      prefix: \"-t\"\n\n  MinSeedLen:\n    type: int?\n    inputBinding:\n      prefix: \"-k\"\n  \n  BandWidth:\n    type: int?\n    inputBinding:\n      prefix: \"-w\"\n\n  ZDropoff:\n    type: int?\n    inputBinding:\n      prefix: \"-d\"\n\n  SeedSplitRatio:\n    type: float?\n    inputBinding:\n      prefix: \"-r\"\n    \n  MaxOcc:\n    type: int?\n    inputBinding:\n      prefix: \"-c\"\n\n  MatchScore:\n    type: int?\n    inputBinding:\n      prefix: \"-A\"\n\n  MmPenalty:\n    type: int?\n    inputBinding:\n      prefix: \"-B\"\n\n  GapOpenPen:\n    type: int?\n    inputBinding:\n      prefix: \"-O\"\n\n  GapExtPen:\n    type: int?\n    inputBinding:\n      prefix: \"-E\"\n\n  ClipPen:\n    type: int?\n    inputBinding:\n      prefix: \"-L\"\n\n  UnpairPen:\n    type: int?\n    inputBinding:\n      prefix: \"-U\"\n\n  RgLine:\n    type: string?\n    inputBinding:\n      prefix: \"-R\"\n\n  VerboseLevel:\n    type: int?\n    inputBinding:\n      prefix: \"-v\"\n\n  isOutSecAlign:\n    type: boolean?\n    inputBinding:\n      prefix: \"-a\"\n\n  isMarkShortSplit:\n    type: boolean?\n    inputBinding:\n      prefix: \"-M\"\n\n  isUseHardClip:\n    type: boolean?\n    inputBinding:\n      prefix: \"-H\"\n\n  isMultiplexedPair:\n    type: boolean?\n    inputBinding:\n      prefix: \"-p\"\n      \n\nbaseCommand: [bwa, mem]\n\nstdout: ${ return inputs.InputFile[1].nameroot+\"_unsorted_reads.sam\";}\n\noutputs:\n  reads_stdout:\n    type: stdout\n    format: edam:format_2572 \n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'InputFile': {'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931'], 'inputBinding': {'position': 201}}, 'Index': {'type': 'File', 'inputBinding': {'position': 200}, 'secondaryFiles': ['.fai', '.amb', '.ann', '.bwt', '.pac', '.sa']}, 'Threads': {'type': 'int?', 'inputBinding': {'prefix': '-t'}}, 'MinSeedLen': {'type': 'int?', 'inputBinding': {'prefix': '-k'}}, 'BandWidth': {'type': 'int?', 'inputBinding': {'prefix': '-w'}}, 'ZDropoff': {'type': 'int?', 'inputBinding': {'prefix': '-d'}}, 'SeedSplitRatio': {'type': 'float?', 'inputBinding': {'prefix': '-r'}}, 'MaxOcc': {'type': 'int?', 'inputBinding': {'prefix': '-c'}}, 'MatchScore': {'type': 'int?', 'inputBinding': {'prefix': '-A'}}, 'MmPenalty': {'type': 'int?', 'inputBinding': {'prefix': '-B'}}, 'GapOpenPen': {'type': 'int?', 'inputBinding': {'prefix': '-O'}}, 'GapExtPen': {'type': 'int?', 'inputBinding': {'prefix': '-E'}}, 'ClipPen': {'type': 'int?', 'inputBinding': {'prefix': '-L'}}, 'UnpairPen': {'type': 'int?', 'inputBinding': {'prefix': '-U'}}, 'RgLine': {'type': 'string?', 'inputBinding': {'prefix': '-R'}}, 'VerboseLevel': {'type': 'int?', 'inputBinding': {'prefix': '-v'}}, 'isOutSecAlign': {'type': 'boolean?', 'inputBinding': {'prefix': '-a'}}, 'isMarkShortSplit': {'type': 'boolean?', 'inputBinding': {'prefix': '-M'}}, 'isUseHardClip': {'type': 'boolean?', 'inputBinding': {'prefix': '-H'}}, 'isMultiplexedPair': {'type': 'boolean?', 'inputBinding': {'prefix': '-p'}}}",
    "cwl_outputs": "{'reads_stdout': {'type': 'stdout', 'format': 'edam:format_2572'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'mem']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bwa:0.7.17--ha92aebf_3'}}",
    "cwl_doc": null,
    "cwl_stdout": "${ return inputs.InputFile[1].nameroot+\"_unsorted_reads.sam\";}",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/fastp.cwl",
    "sha": "3cd5ae8048e83a74041b4f56efb5cc9470710df0",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/fastp.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Modified from https://github.com/nigyta/bact_genome/blob/master/cwl/tool/fastp/fastp.cwl\nrequirements:\n    InlineJavascriptRequirement: {}\nhints:\n    DockerRequirement:\n        dockerPull: quay.io/biocontainers/fastp:0.20.0--hdbcaa40_0\n\nbaseCommand: [fastp]\n\narguments:\n    - prefix: -o\n      valueFrom: $(inputs.fastq1.nameroot).fastp.fastq\n    - |\n      ${\n        if (inputs.fastq2){\n          return '-O';\n        } else {\n          return '';\n        }\n      }\n    - |\n      ${\n        if (inputs.fastq2){\n          return inputs.fastq2.nameroot + \".fastp.fastq\";\n        } else {\n          return '';\n        }\n      }\n\ninputs:\n    fastq1:\n      type: File\n      format:\n        - edam:format_1930 # FASTA\n        - edam:format_1931 # FASTQ\n      inputBinding:\n        prefix: -i\n    fastq2:\n      format:\n        - edam:format_1930 # FASTA\n        - edam:format_1931 # FASTQ\n      type: File?\n      inputBinding:\n        prefix: -I\n    threads:\n      type: int?\n      default: 1\n      inputBinding:\n        prefix: --thread\n    qualified_phred_quality:\n      type: int?\n      default: 20\n      inputBinding:\n        prefix: --qualified_quality_phred\n    unqualified_phred_quality:\n      type: int?\n      default: 20\n      inputBinding:\n        prefix: --unqualified_percent_limit\n    min_length_required:\n      type: int?\n      default: 50\n      inputBinding:\n        prefix: --length_required\n    force_polyg_tail_trimming:\n      type: boolean?\n      inputBinding:\n        prefix: --trim_poly_g\n    disable_trim_poly_g:\n      type: boolean?\n      default: true\n      inputBinding:\n        prefix: --disable_trim_poly_g\n    base_correction:\n      type: boolean?\n      default: true\n      inputBinding:\n        prefix: --correction\n    \n\n\noutputs:\n    out_fastq1:\n       type: File\n       format: $(inputs.fastq1.format)\n       outputBinding:\n           glob: $(inputs.fastq1.nameroot).fastp.fastq\n    out_fastq2:\n       type: File?\n       format: $(inputs.fastq2.format)\n       outputBinding:\n           glob: $(inputs.fastq2.nameroot).fastp.fastq\n    html_report:\n      type: File\n      outputBinding:\n        glob: fastp.html\n        outputEval: |\n           ${\n             self[0].basename = inputs.fastq1.nameroot + '_fastp.html';\n             return self[0]\n            }\n        \n    json_report:\n      type: File\n      outputBinding:\n        glob: fastp.json\n        outputEval: |\n           ${\n              self[0].basename = inputs.fastq1.nameroot + '_fastp.json';\n              return self[0]\n            }\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fastq1': {'type': 'File', 'format': ['edam:format_1930', 'edam:format_1931'], 'inputBinding': {'prefix': '-i'}}, 'fastq2': {'format': ['edam:format_1930', 'edam:format_1931'], 'type': 'File?', 'inputBinding': {'prefix': '-I'}}, 'threads': {'type': 'int?', 'default': 1, 'inputBinding': {'prefix': '--thread'}}, 'qualified_phred_quality': {'type': 'int?', 'default': 20, 'inputBinding': {'prefix': '--qualified_quality_phred'}}, 'unqualified_phred_quality': {'type': 'int?', 'default': 20, 'inputBinding': {'prefix': '--unqualified_percent_limit'}}, 'min_length_required': {'type': 'int?', 'default': 50, 'inputBinding': {'prefix': '--length_required'}}, 'force_polyg_tail_trimming': {'type': 'boolean?', 'inputBinding': {'prefix': '--trim_poly_g'}}, 'disable_trim_poly_g': {'type': 'boolean?', 'default': True, 'inputBinding': {'prefix': '--disable_trim_poly_g'}}, 'base_correction': {'type': 'boolean?', 'default': True, 'inputBinding': {'prefix': '--correction'}}}",
    "cwl_outputs": "{'out_fastq1': {'type': 'File', 'format': '$(inputs.fastq1.format)', 'outputBinding': {'glob': '$(inputs.fastq1.nameroot).fastp.fastq'}}, 'out_fastq2': {'type': 'File?', 'format': '$(inputs.fastq2.format)', 'outputBinding': {'glob': '$(inputs.fastq2.nameroot).fastp.fastq'}}, 'html_report': {'type': 'File', 'outputBinding': {'glob': 'fastp.html', 'outputEval': \"${\\n  self[0].basename = inputs.fastq1.nameroot + '_fastp.html';\\n  return self[0]\\n }\\n\"}}, 'json_report': {'type': 'File', 'outputBinding': {'glob': 'fastp.json', 'outputEval': \"${\\n   self[0].basename = inputs.fastq1.nameroot + '_fastp.json';\\n   return self[0]\\n }\\n\"}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/fastp:0.20.0--hdbcaa40_0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fastp']",
    "cwl_arguments": "[{'prefix': '-o', 'valueFrom': '$(inputs.fastq1.nameroot).fastp.fastq'}, \"${\\n  if (inputs.fastq2){\\n    return '-O';\\n  } else {\\n    return '';\\n  }\\n}\\n\", '${\\n  if (inputs.fastq2){\\n    return inputs.fastq2.nameroot + \".fastp.fastq\";\\n  } else {\\n    return \\'\\';\\n  }\\n}\\n']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Modified from https://github.com/nigyta/bact_genome/blob/master/cwl/tool/fastp/fastp.cwl\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/get_secondaryfiles.cwl",
    "sha": "94fcbddb77c76ad7bc5a064be4d4ca4fb1c54de4",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/get_secondaryfiles.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.sequence)\n      - $(inputs.bwa_index)\nbaseCommand: [ls]\ninputs:\n  sequence:\n    type: File\n    secondaryFiles: .fai\n\n  bwa_index:\n    type: File\n    secondaryFiles:\n      - $(self.nameroot).ann \n      - $(self.nameroot).amb\n      - $(self.nameroot).pac\n      - $(self.nameroot).sa\n    \noutputs:\n  sequences_with_index: \n    type: File\n    secondaryFiles: \n      - $(inputs.bwa_index.nameroot).bwt\n      - $(inputs.bwa_index.nameroot).sa\n      - $(inputs.bwa_index.nameroot).pac\n      - $(inputs.bwa_index.nameroot).ann\n      - $(inputs.bwa_index.nameroot).amb\n      - $(inputs.sequence.basename).fai\n    outputBinding:\n      glob: $(inputs.sequence.basename)\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'sequence': {'type': 'File', 'secondaryFiles': '.fai'}, 'bwa_index': {'type': 'File', 'secondaryFiles': ['$(self.nameroot).ann', '$(self.nameroot).amb', '$(self.nameroot).pac', '$(self.nameroot).sa']}}",
    "cwl_outputs": "{'sequences_with_index': {'type': 'File', 'secondaryFiles': ['$(inputs.bwa_index.nameroot).bwt', '$(inputs.bwa_index.nameroot).sa', '$(inputs.bwa_index.nameroot).pac', '$(inputs.bwa_index.nameroot).ann', '$(inputs.bwa_index.nameroot).amb', '$(inputs.sequence.basename).fai'], 'outputBinding': {'glob': '$(inputs.sequence.basename)'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ls']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.sequence)', '$(inputs.bwa_index)']}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/lofreq_call.cwl",
    "sha": "dfc8aebee10a2f6ceb89c056083e5115d02a4811",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/lofreq_call.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1\n\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - $(inputs.reference_index)\n      - $(inputs.reference_fasta)\n      - $(inputs.reads_index)\n\nbaseCommand: [lofreq, call-parallel]\n\narguments:\n  - prefix: --out\n    valueFrom: $(inputs.reads_align.nameroot)_variant.vcf\n    position: 99\n\ninputs:\n  threads:\n    type: int?\n    default: 1\n    inputBinding:\n      prefix: --pp-threads\n      position: 1\n  reference_index:\n    type: File\n  reference_fasta:\n    doc: 'fasta'\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: -f\n      position: 1000\n      valueFrom: $(self.basename)\n\n  call_indels:\n    type: boolean?\n    inputBinding:\n      prefix: --call-indels\n      position: 3\n    doc: \"Enable indel calls (note: preprocess your file to include indel alignment qualities!)\"\n\n  only_indels:\n    type: boolean?\n    inputBinding:\n      prefix: --only-indels\n      position: 4\n    doc: \"Only call indels; no SNVs\"\n\n  bed:\n    label: regions_from_bed\n    type: File?\n    doc: 'List of positions (chr pos) or regions (BED)'\n    inputBinding:\n      prefix: --bed\n\n  region:\n    type: string?\n    doc: 'Limit calls to this region (chrom:start-end)'\n    inputBinding:\n      prefix: --region\n\n  min_bq:\n    label: min_base_quality\n    type: int?\n    default: 6\n    inputBinding:\n      prefix: --min-bq\n    doc: 'Skip any base with baseQ smaller than INT [6]'\n\n  min_alt_bq:\n    label: min_alterne_base_quality\n    type: int?\n    default: 6\n    inputBinding:\n      prefix: --min-alt-bq\n    doc: 'Skip alternate bases with baseQ smaller than INT [6]'\n\n  def_alt_bq:\n    label: def_alt_base_quality\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --def-alt-bq\n    doc: 'Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]'\n\n  min_jq:\n    label: min_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix:  --min-jq\n    doc: 'Skip any base with joinedQ smaller than INT [0]'\n\n  min_alt_jq:\n    label: min_alt_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --min-alt-jq\n    doc: \"Skip alternate bases with joinedQ smaller than INT [0]\"\n\n  def_alt_jq:\n    label: def_alt_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --def-alt-jq\n    doc: \"Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]\"\n\n  no_baq:\n    label: disable_base_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --no-baq\n    doc: 'Disable use of base-alignment quality (BAQ)'\n\n  no_idaq:\n    label: disable_indel_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --no-idaq\n    doc: \"Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)\"\n\n  del_baq:\n    label: delete_base_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --del-baq\n    doc: \"Delete pre-existing BAQ values, i.e. compute even if already present in BAM\"\n\n  no_ext_base_alignment_quality:\n    type: boolean?\n    inputBinding:\n      prefix: --no-ext-baq\n    doc: \"Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)\"\n\n  min_mq:\n    label: min_mapping_quality\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --min-mq\n    doc: \"Skip reads with mapping quality smaller than INT [0]\"\n\n  max_mapping_quality:\n    type: int?\n    default: 255\n    inputBinding:\n      prefix: --max-mq\n    doc: \"Cap mapping quality at INT [255]\"\n\n  no_mapping_quality:\n    type: boolean?\n    inputBinding:\n      prefix: --no-mq\n    doc: \"Don't merge mapping quality in LoFreq's model\"\n\n  enable_source_qual:\n    type: boolean?\n    inputBinding:\n      prefix: --src-qual\n    doc: 'Enable computation of source quality'\n\n  ignore_vcf:\n    type: File[]?\n    inputBinding:\n      prefix: --ign-vcf\n    doc: \"Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas\"\n\n  replace_non_match:\n    type: int?\n    default: -1\n    inputBinding:\n      prefix: --def-nm-q\n    doc: 'If >= 0, then replace non-match base qualities with this default value [-1]'\n\n  pvalue_cutoff:\n    type: float?\n    default: 0.01\n    inputBinding:\n      prefix: --sig\n    doc: \"P-Value cutoff / significance level [0.010000]\"\n\n  bonferroni:\n    type: string?\n    default: 'dynamic'\n    inputBinding:\n      prefix: --bonf\n    doc: \"Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']\"\n\n  min_cov:\n    type: int?\n    default: 10\n    inputBinding:\n      prefix: --min-cov\n      position: 2\n    doc: \"Test only positions having at least this coverage [1] (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)\"\n\n  max_depth_cov:\n    type: int?\n    default: 1000000\n    inputBinding:\n      prefix: --max-depth\n    doc: \"Cap coverage at this depth [1000000]\"\n\n  illumina_1_3:\n    type: boolean?\n    inputBinding:\n      prefix: --illumina-1.3\n    doc: \"Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded\"\n\n  use_orphan:\n    type: boolean?\n    inputBinding:\n      prefix: --use-orphan\n    doc: \"Count anomalous read pairs (i.e. where mate is not aligned properly)\"\n\n  no_default_filter:\n    type: boolean?\n    doc: \"Don't run default lofreq filter automatically after calling variants\"\n    inputBinding:\n      prefix: --no-default-filter\n    # Other options \n    # --plp-summary-only      No variant calling. Just output pileup summary per column\n    # --force-overwrite       Overwrite any existing output\n    # --verbose               Be verbose\n    # --debug                 Enable debugging\n\n  reads_align:\n    doc: 'bam'\n    type: File\n    format: edam:format_2572  # BAM\n    inputBinding:\n      position: 1001\n      valueFrom: $(self.basename)\n\n  reads_index:\n    doc: bai\n    type: File\n\noutputs:\n  vcf:\n    type: File\n    format: edam:format_3016  # VCF\n    outputBinding:\n      glob: \"*.vcf\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'threads': {'type': 'int?', 'default': 1, 'inputBinding': {'prefix': '--pp-threads', 'position': 1}}, 'reference_index': {'type': 'File'}, 'reference_fasta': {'doc': 'fasta', 'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'prefix': '-f', 'position': 1000, 'valueFrom': '$(self.basename)'}}, 'call_indels': {'type': 'boolean?', 'inputBinding': {'prefix': '--call-indels', 'position': 3}, 'doc': 'Enable indel calls (note: preprocess your file to include indel alignment qualities!)'}, 'only_indels': {'type': 'boolean?', 'inputBinding': {'prefix': '--only-indels', 'position': 4}, 'doc': 'Only call indels; no SNVs'}, 'bed': {'label': 'regions_from_bed', 'type': 'File?', 'doc': 'List of positions (chr pos) or regions (BED)', 'inputBinding': {'prefix': '--bed'}}, 'region': {'type': 'string?', 'doc': 'Limit calls to this region (chrom:start-end)', 'inputBinding': {'prefix': '--region'}}, 'min_bq': {'label': 'min_base_quality', 'type': 'int?', 'default': 6, 'inputBinding': {'prefix': '--min-bq'}, 'doc': 'Skip any base with baseQ smaller than INT [6]'}, 'min_alt_bq': {'label': 'min_alterne_base_quality', 'type': 'int?', 'default': 6, 'inputBinding': {'prefix': '--min-alt-bq'}, 'doc': 'Skip alternate bases with baseQ smaller than INT [6]'}, 'def_alt_bq': {'label': 'def_alt_base_quality', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--def-alt-bq'}, 'doc': 'Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]'}, 'min_jq': {'label': 'min_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-jq'}, 'doc': 'Skip any base with joinedQ smaller than INT [0]'}, 'min_alt_jq': {'label': 'min_alt_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-alt-jq'}, 'doc': 'Skip alternate bases with joinedQ smaller than INT [0]'}, 'def_alt_jq': {'label': 'def_alt_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--def-alt-jq'}, 'doc': 'Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]'}, 'no_baq': {'label': 'disable_base_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--no-baq'}, 'doc': 'Disable use of base-alignment quality (BAQ)'}, 'no_idaq': {'label': 'disable_indel_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--no-idaq'}, 'doc': \"Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)\"}, 'del_baq': {'label': 'delete_base_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--del-baq'}, 'doc': 'Delete pre-existing BAQ values, i.e. compute even if already present in BAM'}, 'no_ext_base_alignment_quality': {'type': 'boolean?', 'inputBinding': {'prefix': '--no-ext-baq'}, 'doc': \"Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)\"}, 'min_mq': {'label': 'min_mapping_quality', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-mq'}, 'doc': 'Skip reads with mapping quality smaller than INT [0]'}, 'max_mapping_quality': {'type': 'int?', 'default': 255, 'inputBinding': {'prefix': '--max-mq'}, 'doc': 'Cap mapping quality at INT [255]'}, 'no_mapping_quality': {'type': 'boolean?', 'inputBinding': {'prefix': '--no-mq'}, 'doc': \"Don't merge mapping quality in LoFreq's model\"}, 'enable_source_qual': {'type': 'boolean?', 'inputBinding': {'prefix': '--src-qual'}, 'doc': 'Enable computation of source quality'}, 'ignore_vcf': {'type': 'File[]?', 'inputBinding': {'prefix': '--ign-vcf'}, 'doc': 'Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas'}, 'replace_non_match': {'type': 'int?', 'default': -1, 'inputBinding': {'prefix': '--def-nm-q'}, 'doc': 'If >= 0, then replace non-match base qualities with this default value [-1]'}, 'pvalue_cutoff': {'type': 'float?', 'default': 0.01, 'inputBinding': {'prefix': '--sig'}, 'doc': 'P-Value cutoff / significance level [0.010000]'}, 'bonferroni': {'type': 'string?', 'default': 'dynamic', 'inputBinding': {'prefix': '--bonf'}, 'doc': \"Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']\"}, 'min_cov': {'type': 'int?', 'default': 10, 'inputBinding': {'prefix': '--min-cov', 'position': 2}, 'doc': 'Test only positions having at least this coverage [1] (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)'}, 'max_depth_cov': {'type': 'int?', 'default': 1000000, 'inputBinding': {'prefix': '--max-depth'}, 'doc': 'Cap coverage at this depth [1000000]'}, 'illumina_1_3': {'type': 'boolean?', 'inputBinding': {'prefix': '--illumina-1.3'}, 'doc': 'Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded'}, 'use_orphan': {'type': 'boolean?', 'inputBinding': {'prefix': '--use-orphan'}, 'doc': 'Count anomalous read pairs (i.e. where mate is not aligned properly)'}, 'no_default_filter': {'type': 'boolean?', 'doc': \"Don't run default lofreq filter automatically after calling variants\", 'inputBinding': {'prefix': '--no-default-filter'}}, 'reads_align': {'doc': 'bam', 'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {'position': 1001, 'valueFrom': '$(self.basename)'}}, 'reads_index': {'doc': 'bai', 'type': 'File'}}",
    "cwl_outputs": "{'vcf': {'type': 'File', 'format': 'edam:format_3016', 'outputBinding': {'glob': '*.vcf'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lofreq', 'call-parallel']",
    "cwl_arguments": "[{'prefix': '--out', 'valueFrom': '$(inputs.reads_align.nameroot)_variant.vcf', 'position': 99}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/lofreq_viterbi.cwl",
    "sha": "24c212c10564e095d164ef3f9a9879a2b113df00",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/lofreq_viterbi.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: \"viterbi: Viterbi realignment\"\ndoc: |\n  Probabilistic realignment of your already mapped reads, which corrects\n  mapping errors (run right after mapping). Not recommended for non-Illumina\n  data.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference)\n    \nbaseCommand: [lofreq, viterbi]\n\narguments:\n  - prefix: --out\n    valueFrom: $(inputs.reads.nameroot)_realigned.bam\n\ninputs:\n  reference:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: --ref\n      \n  reads:  \n    type: File\n    format: edam:format_2572  # BAM\n    inputBinding: {}\n\n  keepflags:\n    type: boolean?\n    label: Don't delete flags MC, MD, NM, and A?\n    doc: |\n      These flags are all prone to getting invalidated during realignment.\n      Keep them only if you know what you are doing.\n    inputBinding:\n      prefix: --keepflags\n    default: false\n      \n  defqual:\n    type: int?\n    inputBinding:\n      prefix: --defqual\noutputs:\n  realigned:\n    type: File\n    format: edam:format_2572  # BAM\n    outputBinding:\n      glob: $(inputs.reads.nameroot)_realigned.bam\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference': {'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'prefix': '--ref'}}, 'reads': {'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {}}, 'keepflags': {'type': 'boolean?', 'label': \"Don't delete flags MC, MD, NM, and A?\", 'doc': 'These flags are all prone to getting invalidated during realignment.\\nKeep them only if you know what you are doing.\\n', 'inputBinding': {'prefix': '--keepflags'}, 'default': False}, 'defqual': {'type': 'int?', 'inputBinding': {'prefix': '--defqual'}}}",
    "cwl_outputs": "{'realigned': {'type': 'File', 'format': 'edam:format_2572', 'outputBinding': {'glob': '$(inputs.reads.nameroot)_realigned.bam'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lofreq', 'viterbi']",
    "cwl_arguments": "[{'prefix': '--out', 'valueFrom': '$(inputs.reads.nameroot)_realigned.bam'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.reference)']}}",
    "cwl_doc": "Probabilistic realignment of your already mapped reads, which corrects\nmapping errors (run right after mapping). Not recommended for non-Illumina\ndata.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "viterbi: Viterbi realignment",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/mergetab.cwl",
    "sha": "9f5853f0dc0257316b57ed0f22cd1e9ad28f7671",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/mergetab.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nrequirements:\n  InlineJavascriptRequirement: {}\nbaseCommand: [ls]\ninputs:\n  out_fastq1: File\n  out_fastq2: File\noutputs:\n  tab:\n    type: File[]\n    outputBinding:\n      outputEval: |\n              ${var tab=[]\n                tab.push(inputs.out_fastq1)\n                tab.push(inputs.out_fastq2)\n                return tab;\n               } \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'out_fastq1': 'File', 'out_fastq2': 'File'}",
    "cwl_outputs": "{'tab': {'type': 'File[]', 'outputBinding': {'outputEval': '${var tab=[]\\n  tab.push(inputs.out_fastq1)\\n  tab.push(inputs.out_fastq2)\\n  return tab;\\n } \\n'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ls']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/multiqc.cwl",
    "sha": "71e2b5a5d68dd9d5303c7dc7e44b2b1e6db81ddb",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/multiqc.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Run multiqc on log files from supported bioinformatic tools.\n  26/04/2020: Fixed output filenames, added support for a single input file in qc_files_array (Miguel Boland)\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    # This step is necessary since the input files\n    # must be loaded into the working directory as there\n    # is no way to specify the input file directly on the\n    # command line.\n    listing: |\n      ${// script merges the to input arrays\n        // into one array that fulfills the type \n        // requirement for \"listing\", which is\n        // \"{type: array, items: [File, Directory]}\"\n\n        var qc_files_array = inputs.qc_files_array;\n        var qc_files_array_of_array = inputs.qc_files_array_of_array;\n        var output_array = [];\n\n        // add items of the qc_files_array to the output_array\n        if ( qc_files_array != null ){\n          // Fix to allow single qc_file_array\n          if (qc_files_array.length === undefined){\n            output_array.push(qc_files_array)\n          } else {\n            for (var i=0; i<qc_files_array.length; i++){\n              output_array.push(qc_files_array[i])\n            }\n          }\n        }\n\n        // add items of the qc_files_array_of_array to the output_array\n        if ( qc_files_array_of_array != null ){\n          for (var i=0; i<qc_files_array_of_array.length; i++){ \n            for (var ii=0; ii<qc_files_array_of_array[i].length; ii++){\n              output_array.push(qc_files_array_of_array[i][ii])\n            }\n          }\n        }\n\n        return output_array\n      }\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/multiqc:1.7\n  \n\nbaseCommand: [\"multiqc\"]\narguments:\n  - valueFrom: --zip-data-dir\n    position: 1\n  - valueFrom: \"log_filesize_limit: 100000000\"\n    position: 1\n    prefix: --cl_config\n  - valueFrom: $(runtime.outdir)\n    position: 2\n    prefix: --outdir\n  - valueFrom: $(runtime.outdir)\n    position: 4\n  \ninputs:\n  qc_files_array:\n    doc: |\n      qc files which shall be part of the multiqc summary;\n      optional, only one of qc_files_array or qc_files_array_of_array \n      must be provided\n    type:\n      - \"null\"\n      - File\n      - type: array\n        items: File\n  qc_files_array_of_array:\n    doc: |\n      qc files which shall be part of the multiqc summary;\n      optional, only one of qc_files_array or qc_files_array_of_array \n      must be provided\n    type:\n      - \"null\"\n      - type: array\n        items: \n          type: array\n          items: File\n  report_name:\n    doc: name used for the html report and the corresponding zip file\n    type: string\n    default: multiqc\n    inputBinding:\n      prefix: --filename\n      position: 3\n      \noutputs:\n  multiqc_zip:\n    type: File\n    outputBinding:\n      glob: $(inputs.report_name)_data.zip\n  multiqc_html:\n    type: File\n    outputBinding:\n      glob: $(inputs.report_name).html\n  diree:\n    type: Directory\n    outputBinding:\n      glob: .\n#  multiqc_json:\n#    type: File\n#    outputBinding:\n#      glob: multiqc_data/$(inputs.report_name).json\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'qc_files_array': {'doc': 'qc files which shall be part of the multiqc summary;\\noptional, only one of qc_files_array or qc_files_array_of_array \\nmust be provided\\n', 'type': ['null', 'File', {'type': 'array', 'items': 'File'}]}, 'qc_files_array_of_array': {'doc': 'qc files which shall be part of the multiqc summary;\\noptional, only one of qc_files_array or qc_files_array_of_array \\nmust be provided\\n', 'type': ['null', {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}]}, 'report_name': {'doc': 'name used for the html report and the corresponding zip file', 'type': 'string', 'default': 'multiqc', 'inputBinding': {'prefix': '--filename', 'position': 3}}}",
    "cwl_outputs": "{'multiqc_zip': {'type': 'File', 'outputBinding': {'glob': '$(inputs.report_name)_data.zip'}}, 'multiqc_html': {'type': 'File', 'outputBinding': {'glob': '$(inputs.report_name).html'}}, 'diree': {'type': 'Directory', 'outputBinding': {'glob': '.'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 10000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/multiqc:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['multiqc']",
    "cwl_arguments": "[{'valueFrom': '--zip-data-dir', 'position': 1}, {'valueFrom': 'log_filesize_limit: 100000000', 'position': 1, 'prefix': '--cl_config'}, {'valueFrom': '$(runtime.outdir)', 'position': 2, 'prefix': '--outdir'}, {'valueFrom': '$(runtime.outdir)', 'position': 4}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': '${// script merges the to input arrays\\n  // into one array that fulfills the type \\n  // requirement for \"listing\", which is\\n  // \"{type: array, items: [File, Directory]}\"\\n\\n  var qc_files_array = inputs.qc_files_array;\\n  var qc_files_array_of_array = inputs.qc_files_array_of_array;\\n  var output_array = [];\\n\\n  // add items of the qc_files_array to the output_array\\n  if ( qc_files_array != null ){\\n    // Fix to allow single qc_file_array\\n    if (qc_files_array.length === undefined){\\n      output_array.push(qc_files_array)\\n    } else {\\n      for (var i=0; i<qc_files_array.length; i++){\\n        output_array.push(qc_files_array[i])\\n      }\\n    }\\n  }\\n\\n  // add items of the qc_files_array_of_array to the output_array\\n  if ( qc_files_array_of_array != null ){\\n    for (var i=0; i<qc_files_array_of_array.length; i++){ \\n      for (var ii=0; ii<qc_files_array_of_array[i].length; ii++){\\n        output_array.push(qc_files_array_of_array[i][ii])\\n      }\\n    }\\n  }\\n\\n  return output_array\\n}\\n'}}",
    "cwl_doc": "Run multiqc on log files from supported bioinformatic tools.\n26/04/2020: Fixed output filenames, added support for a single input file in qc_files_array (Miguel Boland)\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/picard_MarkDuplicates.cwl",
    "sha": "a5a26de7996a256844ffedeabce8d7cb391cc21e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/picard_MarkDuplicates.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Removal of duplicates from aligned reads.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\n \nbaseCommand: [ picard, MarkDuplicates ]\n\narguments:\n  - OUTPUT=$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)\n  - METRICS_FILE=$(inputs.alignments.nameroot)_markduplicates.metrics\n\nstderr: $(inputs.alignments.nameroot).markduplicates.log\n\ninputs:\n  alignments:\n    doc: SAM or BAM format alignment file\n    format:\n      - edam:format_2573  # SAM\n      - edam:format_2572  # BAM\n    type: File\n    inputBinding:\n      prefix: \"INPUT=\"\n      separate: false\n\n  alignments_are_sorted:\n    type: boolean\n    inputBinding:\n      prefix: ASSUME_SORTED=TRUE\n\n  remove_duplicates:\n    doc: |\n     If true do not write duplicates to the output file instead of writing them\n     with appropriate flags set.\n    type: boolean\n    inputBinding:\n      prefix: REMOVE_DUPLICATES=TRUE\n\n  validation_stringency:\n    type:\n     - 'null'\n     - type: enum\n       symbols:\n        - STRICT\n        - LENIENT\n        - SILENT\n    inputBinding:\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n\n  comment:\n    doc: Comment(s) to include in the output file's header\n    type:\n     - 'null'\n     - type: array\n       items: string\n       inputBinding:\n         prefix: COMMENT=\n         separate: false\n  duplicate_scoring_strategy:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n    inputBinding:\n      prefix: DUPLICATE_SCORING_STRATEGY=\n      separate: false\n  read_name_regex:\n    type: string?\n    inputBinding:\n      prefix: READ_NAME_REGEX=\n      separate: false\n  optical_duplicate_pixel_distance:\n    type: int?\n    default: 100\n    doc: '(0;500)'\n    inputBinding:\n      prefix: OPTICAL_DUPLICATE_PIXEL_DISTANCE=\n      separate: false\n  barcode_tag:\n    type: string?\n    inputBinding:\n      prefix: BARCODE_TAG=\n      separate: false\noutputs:\n  alignments:\n    type: File\n    format: $(inputs.alignments.format)\n    outputBinding:\n      glob: $(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)\n  log:\n    type: stderr\n  metrics:\n    type: File\n    outputBinding:\n      glob: $(inputs.alignments.nameroot)_markduplicates.metrics\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'alignments': {'doc': 'SAM or BAM format alignment file', 'format': ['edam:format_2573', 'edam:format_2572'], 'type': 'File', 'inputBinding': {'prefix': 'INPUT=', 'separate': False}}, 'alignments_are_sorted': {'type': 'boolean', 'inputBinding': {'prefix': 'ASSUME_SORTED=TRUE'}}, 'remove_duplicates': {'doc': 'If true do not write duplicates to the output file instead of writing them\\nwith appropriate flags set.\\n', 'type': 'boolean', 'inputBinding': {'prefix': 'REMOVE_DUPLICATES=TRUE'}}, 'validation_stringency': {'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}], 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}}, 'comment': {'doc': \"Comment(s) to include in the output file's header\", 'type': ['null', {'type': 'array', 'items': 'string', 'inputBinding': {'prefix': 'COMMENT=', 'separate': False}}]}, 'duplicate_scoring_strategy': {'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}], 'inputBinding': {'prefix': 'DUPLICATE_SCORING_STRATEGY=', 'separate': False}}, 'read_name_regex': {'type': 'string?', 'inputBinding': {'prefix': 'READ_NAME_REGEX=', 'separate': False}}, 'optical_duplicate_pixel_distance': {'type': 'int?', 'default': 100, 'doc': '(0;500)', 'inputBinding': {'prefix': 'OPTICAL_DUPLICATE_PIXEL_DISTANCE=', 'separate': False}}, 'barcode_tag': {'type': 'string?', 'inputBinding': {'prefix': 'BARCODE_TAG=', 'separate': False}}}",
    "cwl_outputs": "{'alignments': {'type': 'File', 'format': '$(inputs.alignments.format)', 'outputBinding': {'glob': '$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)'}}, 'log': {'type': 'stderr'}, 'metrics': {'type': 'File', 'outputBinding': {'glob': '$(inputs.alignments.nameroot)_markduplicates.metrics'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'MarkDuplicates']",
    "cwl_arguments": "['OUTPUT=$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)', 'METRICS_FILE=$(inputs.alignments.nameroot)_markduplicates.metrics']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": "Removal of duplicates from aligned reads.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "$(inputs.alignments.nameroot).markduplicates.log",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/picard_SortSam.cwl",
    "sha": "855d069305a6233c0cc1acd8eb13fb86621d600b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/picard_SortSam.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\nrequirements:\n  InlineJavascriptRequirement: {}\n\nbaseCommand: [ picard, SortSam ]\n\narguments:\n  - prefix: OUTPUT=\n    separate: false\n    valueFrom: |\n      ${ if(inputs.sort_order == \"coordinate\") { return (inputs.alignments.nameroot)+\".bam\";} else { return (inputs.alignments.nameroot)+\".sam\"; } }\n\ninputs:\n  alignments:\n    type: File\n    inputBinding:\n      prefix: INPUT=\n      separate: false\n\n  sort_order:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n    default: coordinate\n    doc: 'coordinate (bam) or queryname (sam)'\n    inputBinding:\n      prefix: SORT_ORDER=\n      separate: false\n\n  validation_stringency:\n    default: LENIENT\n    doc: Validation stringency for all SAM files read by this program.  Setting stringency\n      to SILENT can improve performance when processing a BAM file in which variable-length\n      data (read, qualities, tags) do not otherwise need to be decoded.\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - STRICT\n      - LENIENT\n      - SILENT\n    inputBinding:\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n\noutputs:\n  sorted_alignments:\n    type: File\n    format: |-\n      ${ if(inputs.sort_order == \"coordinate\") { return \"http://edamontology.org/format_2572\";} else { return \"http://edamontology.org/format_2573\"; } }\n    outputBinding:\n      glob: '*.*am'\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'alignments': {'type': 'File', 'inputBinding': {'prefix': 'INPUT=', 'separate': False}}, 'sort_order': {'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}], 'default': 'coordinate', 'doc': 'coordinate (bam) or queryname (sam)', 'inputBinding': {'prefix': 'SORT_ORDER=', 'separate': False}}, 'validation_stringency': {'default': 'LENIENT', 'doc': 'Validation stringency for all SAM files read by this program.  Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded.', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}], 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}}}",
    "cwl_outputs": "{'sorted_alignments': {'type': 'File', 'format': '${ if(inputs.sort_order == \"coordinate\") { return \"http://edamontology.org/format_2572\";} else { return \"http://edamontology.org/format_2573\"; } }', 'outputBinding': {'glob': '*.*am'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'SortSam']",
    "cwl_arguments": "[{'prefix': 'OUTPUT=', 'separate': False, 'valueFrom': '${ if(inputs.sort_order == \"coordinate\") { return (inputs.alignments.nameroot)+\".bam\";} else { return (inputs.alignments.nameroot)+\".sam\"; } }\\n'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_faidx.cwl",
    "sha": "71b673244082637c43512f8609cdb6589c656b28",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_faidx.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.2-0\nrequirements:\n  InitialWorkDirRequirement:\n    listing: [ $(inputs.sequences) ]\n\nbaseCommand: [ samtools, faidx ]\n\ninputs:\n  sequences:\n    type: File\n    doc: Input FASTA file\n    format: edam:format_1929\n\narguments:\n   - $(inputs.sequences.basename)\n\noutputs:\n  sequences_with_index:\n    type: File\n    format: $(inputs.sequences.format)\n    secondaryFiles:\n     - .fai\n    outputBinding:\n      glob: $(inputs.sequences.basename)\n  sequences_index:\n    type: File\n    outputBinding:\n      glob: $(inputs.sequences.basename).fai\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'sequences': {'type': 'File', 'doc': 'Input FASTA file', 'format': 'edam:format_1929'}}",
    "cwl_outputs": "{'sequences_with_index': {'type': 'File', 'format': '$(inputs.sequences.format)', 'secondaryFiles': ['.fai'], 'outputBinding': {'glob': '$(inputs.sequences.basename)'}}, 'sequences_index': {'type': 'File', 'outputBinding': {'glob': '$(inputs.sequences.basename).fai'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/samtools:1.2-0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'faidx']",
    "cwl_arguments": "['$(inputs.sequences.basename)']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.sequences)']}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_index.cwl",
    "sha": "40ca889caec96fa1d5a6ee7f9147cade35b9515b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Indexing BAM.\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing: \n      - $(inputs.bam_sorted)\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [\"samtools\", \"index\"]\narguments:\n  - valueFrom: -b  # specifies that index is created in bai format\n    position: 1\n\ninputs:\n  bam_sorted:\n    doc: sorted bam input file\n    type: File\n    inputBinding:\n      position: 2\n\noutputs:\n  bam_sorted_indexed:\n    type: File\n    secondaryFiles: .bai\n    outputBinding:\n      glob: $(inputs.bam_sorted.basename)\n      \n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam_sorted': {'doc': 'sorted bam input file', 'type': 'File', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'bam_sorted_indexed': {'type': 'File', 'secondaryFiles': '.bai', 'outputBinding': {'glob': '$(inputs.bam_sorted.basename)'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'index']",
    "cwl_arguments": "[{'valueFrom': '-b', 'position': 1}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.bam_sorted)']}}",
    "cwl_doc": "Indexing BAM.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_sort.cwl",
    "sha": "36f47b4a01ceff3c15f1b9a28b324fe128a520e0",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_sort.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: Sort a bam file by read names.\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 4\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [\"samtools\", \"sort\"]\narguments:\n  - valueFrom: $(runtime.cores)\n    prefix: -@\n  - prefix: -m\n    valueFrom: ${ return(parseInt(runtime.ram/runtime.cores-100).toString() + \"M\") }\n    position: 1\n    # specifies the allowed maximal memory usage per thread before\n    # samtools start to outsource memory to temporary files\n\ninputs:\n  bam_unsorted:\n    doc: aligned reads to be checked in sam or bam format\n    type: File\n    format: edam:format_2572\n    inputBinding:\n      position: 2\n  by_name:\n    doc: If true, will sort by name, otherwise will sort by genomic position\n    type: boolean\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -n\n\nstdout: $(inputs.bam_unsorted.basename)\n\noutputs:\n  bam_sorted:\n    type: stdout\n    format: edam:format_2572 \n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam_unsorted': {'doc': 'aligned reads to be checked in sam or bam format', 'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {'position': 2}}, 'by_name': {'doc': 'If true, will sort by name, otherwise will sort by genomic position', 'type': 'boolean', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-n'}}}",
    "cwl_outputs": "{'bam_sorted': {'type': 'stdout', 'format': 'edam:format_2572'}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 4, 'ramMin': 15000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'sort']",
    "cwl_arguments": "[{'valueFrom': '$(runtime.cores)', 'prefix': '-@'}, {'prefix': '-m', 'valueFrom': '${ return(parseInt(runtime.ram/runtime.cores-100).toString() + \"M\") }', 'position': 1}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Sort a bam file by read names.",
    "cwl_stdout": "$(inputs.bam_unsorted.basename)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_stats.cwl",
    "sha": "bb226314e690f8758157e4b51dac9fec54286fcd",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_stats.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand: [samtools, stats]\nrequirements:\n- class: DockerRequirement\n  dockerPull: biocontainers/samtools:v1.7.0_cv3\n\ninputs:\n  input_file:\n    type: File\n    format: \n      - edam:format_2572  # BAM\n      - edam:format_2573  # SAM\n      - edam:format_3462  # CRAM\n    inputBinding:\n      position: 100\n  coverage:\n    type:\n      - 'null'\n      - type: record\n        name: coverage_parameters\n        fields:\n          min_cov:\n            type: int\n          max_cov:\n            type: int\n          step_cov:\n            type: int\n    inputBinding:\n      prefix: --coverage\n    doc: \"Set coverage distribution to the specified range (MIN, MAX, STEP all given as integers) [1,1000,1]\"\n  remove_dups:\n    type: boolean?\n    doc: \"Exclude from statistics reads marked as duplicates\"\n    inputBinding:\n      prefix: --remove_dups\n\n  required_flag:\n    type:\n      - string\n      - int\n      - \"null\"\n    default: 0\n    doc: \" STR|INT Required flag, 0 for unset. See also `samtools flags` [0] \"\n    inputBinding:\n      prefix: -f\n\n  filtering_flag:\n    type:\n      - string\n      - int\n      - \"null\"\n    default: 0\n    doc: \"STR|INT Filtering flag, 0 for unset. See also `samtools flags` [0] \"\n    inputBinding:\n      prefix: -F\n\n  GC_depth:\n    type: float?\n    doc: \"the size of GC-depth bins (decreasing bin size increases memory requirement) [2e4] \"\n    inputBinding:\n      prefix: --GC-depth\n\n  max_insert_size:\n    type: int?\n    doc: \"Maximum insert size [8000]\"\n    inputBinding:\n      prefix: -i\n\n  listed_group:\n    type: string?\n    doc: \"Include only listed read group or sample name [] \"\n    inputBinding:\n      prefix: --id\n\n  read_length:\n    type: int?\n    doc: \"Include in the statistics only reads with the given read length [-1]\"\n    inputBinding:\n      prefix: -l\n\n  most_inserts:\n    type: float?\n    doc: \"Report only the main part of inserts [0.99] \"\n    inputBinding:\n      prefix: -m\n\n  split_prefix:\n    type: string?\n    doc:  \"A path or string prefix to prepend to filenames output when creating categorised statistics files with -S/--split. [input filename]\"\n    inputBinding:\n      prefix: -P\n\n  trim_quality:\n    type: int?\n    doc: \"The BWA trimming parameter [0] \"\n    inputBinding:\n      prefix: -q\n\n  ref_seq:\n    type: File?\n    doc: \"Reference sequence (required for GC-depth and mismatches-per-cycle calculation). [] \"\n    inputBinding:\n      prefix: -r\n\n  split:\n    type: string?\n    doc: \"In addition to the complete statistics, also output categorised statistics based on the tagged field TAG (e.g., use --split RG to split into read groups).    Categorised statistics are written to files named <prefix>_<value>.bamstat, where prefix is as given by --split-prefix (or the input filename by default) and value has been encountered as the specified tagged field's value in one or more alignment records. \"\n    inputBinding:\n      prefix: --split\n\n  target_regions:\n    type: File?\n    doc: \"Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive. []\"\n    inputBinding:\n      prefix: --target-regions\n  sparse:\n    type: boolean?\n    doc: \"Suppress outputting IS rows where there are no insertions.\"\n    inputBinding:\n      prefix: --sparse\n  remove_overlaps:\n    type: boolean?\n    doc: \"Remove overlaps of paired-end reads from coverage and base count computations. \"\n    inputBinding:\n      prefix: --remove-overlaps\n  cov_threshold:\n    type: int?\n    doc: \"Only bases with coverage above this value will be included in the target percentage computation [0] \"\n    inputBinding:\n      prefix: -g\n\narguments:\n  - prefix: --threads\n    valueFrom: $(runtime.cores)  \n    \n# -X\n#     If this option is set, it will allows user to specify customized index file location(s) if the data folder does not contain any index file. Example usage: samtools stats [options] -X /data_folder/data.bam /index_folder/data.bai chrM:1-10\n\noutputs:\n  stats:\n    type: File\n    outputBinding:\n      glob: $(inputs.input_file.nameroot).stats.txt\nstdout: $(inputs.input_file.nameroot).stats.txt\n\n$namespaces: { edam: http://edamontology.org/, iana: https://www.iana.org/assignments/media-types/ }\n$schemas:\n  - 'http://edamontology.org/EDAM_1.18.owl'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'input_file': {'type': 'File', 'format': ['edam:format_2572', 'edam:format_2573', 'edam:format_3462'], 'inputBinding': {'position': 100}}, 'coverage': {'type': ['null', {'type': 'record', 'name': 'coverage_parameters', 'fields': {'min_cov': {'type': 'int'}, 'max_cov': {'type': 'int'}, 'step_cov': {'type': 'int'}}}], 'inputBinding': {'prefix': '--coverage'}, 'doc': 'Set coverage distribution to the specified range (MIN, MAX, STEP all given as integers) [1,1000,1]'}, 'remove_dups': {'type': 'boolean?', 'doc': 'Exclude from statistics reads marked as duplicates', 'inputBinding': {'prefix': '--remove_dups'}}, 'required_flag': {'type': ['string', 'int', 'null'], 'default': 0, 'doc': ' STR|INT Required flag, 0 for unset. See also `samtools flags` [0] ', 'inputBinding': {'prefix': '-f'}}, 'filtering_flag': {'type': ['string', 'int', 'null'], 'default': 0, 'doc': 'STR|INT Filtering flag, 0 for unset. See also `samtools flags` [0] ', 'inputBinding': {'prefix': '-F'}}, 'GC_depth': {'type': 'float?', 'doc': 'the size of GC-depth bins (decreasing bin size increases memory requirement) [2e4] ', 'inputBinding': {'prefix': '--GC-depth'}}, 'max_insert_size': {'type': 'int?', 'doc': 'Maximum insert size [8000]', 'inputBinding': {'prefix': '-i'}}, 'listed_group': {'type': 'string?', 'doc': 'Include only listed read group or sample name [] ', 'inputBinding': {'prefix': '--id'}}, 'read_length': {'type': 'int?', 'doc': 'Include in the statistics only reads with the given read length [-1]', 'inputBinding': {'prefix': '-l'}}, 'most_inserts': {'type': 'float?', 'doc': 'Report only the main part of inserts [0.99] ', 'inputBinding': {'prefix': '-m'}}, 'split_prefix': {'type': 'string?', 'doc': 'A path or string prefix to prepend to filenames output when creating categorised statistics files with -S/--split. [input filename]', 'inputBinding': {'prefix': '-P'}}, 'trim_quality': {'type': 'int?', 'doc': 'The BWA trimming parameter [0] ', 'inputBinding': {'prefix': '-q'}}, 'ref_seq': {'type': 'File?', 'doc': 'Reference sequence (required for GC-depth and mismatches-per-cycle calculation). [] ', 'inputBinding': {'prefix': '-r'}}, 'split': {'type': 'string?', 'doc': \"In addition to the complete statistics, also output categorised statistics based on the tagged field TAG (e.g., use --split RG to split into read groups).    Categorised statistics are written to files named <prefix>_<value>.bamstat, where prefix is as given by --split-prefix (or the input filename by default) and value has been encountered as the specified tagged field's value in one or more alignment records. \", 'inputBinding': {'prefix': '--split'}}, 'target_regions': {'type': 'File?', 'doc': 'Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive. []', 'inputBinding': {'prefix': '--target-regions'}}, 'sparse': {'type': 'boolean?', 'doc': 'Suppress outputting IS rows where there are no insertions.', 'inputBinding': {'prefix': '--sparse'}}, 'remove_overlaps': {'type': 'boolean?', 'doc': 'Remove overlaps of paired-end reads from coverage and base count computations. ', 'inputBinding': {'prefix': '--remove-overlaps'}}, 'cov_threshold': {'type': 'int?', 'doc': 'Only bases with coverage above this value will be included in the target percentage computation [0] ', 'inputBinding': {'prefix': '-g'}}}",
    "cwl_outputs": "{'stats': {'type': 'File', 'outputBinding': {'glob': '$(inputs.input_file.nameroot).stats.txt'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'stats']",
    "cwl_arguments": "[{'prefix': '--threads', 'valueFrom': '$(runtime.cores)'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.input_file.nameroot).stats.txt",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/samtools_view_filter.cwl",
    "sha": "b6662414399cd0446c927848c423c4440b7fe224",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_view_filter.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [samtools, view]\ninputs:\n  bam:\n    format: edam:format_2572\n    doc: aligned reads to be checked in bam format\n    type: File\n    inputBinding:\n      position: 10\n\n  count:\n    type: boolean?\n    default: true\n    doc: \"Instead of printing the alignments, only count them and print the total number.\"\n    inputBinding:\n      position: 1\n      prefix: -c\n  exclude_unmapped:\n    type: boolean?\n    default: true\n    inputBinding:\n      valueFrom: \"4\"\n      prefix: -F\n      position: 1\n\n  is_paired_end:\n    doc: if paired end, only properly paired reads pass\n    type: boolean\n    default: true\n\n  min_mapping_quality:\n    doc: Reads with a mapping quality below this will be excluded\n    type: int?\n    default: 20\n    inputBinding:\n      position: 1\n      prefix: -q\n\n\n  header:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - include\n          - exclude\n          - only\n    default: include\n    inputBinding:\n        valueFrom: |\n            ${\n              if (self==\"include\"){\n                return \"-h\";\n              }\n              if (self==\"only\"){\n                return \"-H\";\n              }\n              else {\n                return null;\n              }\n            }\n\noutputs:\n  bam_filtered:\n    format: edam:format_2572\n    type: stdout\n\nstdout: $(inputs.bam.nameroot)_filt.bam\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam': {'format': 'edam:format_2572', 'doc': 'aligned reads to be checked in bam format', 'type': 'File', 'inputBinding': {'position': 10}}, 'count': {'type': 'boolean?', 'default': True, 'doc': 'Instead of printing the alignments, only count them and print the total number.', 'inputBinding': {'position': 1, 'prefix': '-c'}}, 'exclude_unmapped': {'type': 'boolean?', 'default': True, 'inputBinding': {'valueFrom': '4', 'prefix': '-F', 'position': 1}}, 'is_paired_end': {'doc': 'if paired end, only properly paired reads pass', 'type': 'boolean', 'default': True}, 'min_mapping_quality': {'doc': 'Reads with a mapping quality below this will be excluded', 'type': 'int?', 'default': 20, 'inputBinding': {'position': 1, 'prefix': '-q'}}, 'header': {'type': ['null', {'type': 'enum', 'symbols': ['include', 'exclude', 'only']}], 'default': 'include', 'inputBinding': {'valueFrom': '${\\n  if (self==\"include\"){\\n    return \"-h\";\\n  }\\n  if (self==\"only\"){\\n    return \"-H\";\\n  }\\n  else {\\n    return null;\\n  }\\n}\\n'}}}",
    "cwl_outputs": "{'bam_filtered': {'format': 'edam:format_2572', 'type': 'stdout'}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 10000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'view']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.bam.nameroot)_filt.bam",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/snpEff_build_ann.cwl",
    "sha": "5c4a9881afcb6be22f4111b1cbbff624afc7304b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/snpEff_build_ann.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nbaseCommand: [bash, commands.sh]\n\ninputs:\n  - id: importGenome\n    type: boolean\n    doc: 'import your own genome (genbank)'\n  - id: genome_reference\n    type: string\n\n  - id: bankfile\n    type: File?\n    doc: 'import your own genome'\n\n  - id: sequence\n    type: File\n\n  - id: inputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n    default: vcf\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n    default: vcf\n\n  - id: udLength\n    type: int\n    doc: 'Set upstream downstream interval length (in bases). 0 base: No upstream / downstream intervals'\n\n## reports:\n  - id: html_report\n    type: boolean?\n\n  - id: csvFile\n    type: boolean?\n  - id: noStats\n    type: boolean?\n\n## Annotations options:\n  - id: formatEff\n    type: boolean?\n    doc: \"Use 'EFF' field compatible with older versions (instead of 'ANN')\"\n  - id: classic\n    type: boolean?\n    doc: \"Use Classic Effect names and amino acid variant annotations (NON_SYNONYMOUS_CODING vs missense_variant and G180R vs p.Gly180Arg/c.538G>C)\"\n  - id: sequenceOntology\n    type: boolean?\n    doc: \"Override classic and use Sequence Ontolgy terms for effects (missense_variant vs NON_SYNONYMOUS_CODING)\"\n  - id: hgvs\n    type: boolean?\n    default: true\n    doc: \"Override classic and use HGVS annotations for amino acid annotations (p.Gly180Arg/c.538G>C vs G180R)\"\n  - id: noShiftHgvs\n    type: boolean?\n    doc: \"Do not shift variants according to HGVS notation (most 3prime end)\"\n  - id: noHgvs\n    type: boolean?\n    doc: \"Do not add HGVS annotations\"\n  - id: geneId\n    type: boolean?\n    doc: \"Use gene ID instead of gene name (VCF output). Default: false\"\n  - id: lof\n    type: boolean?\n    doc: \"Add loss of function (LOF) and nonsense mediated decay (NMD) tags\"\n  - id: noLof\n    type: boolean?\n    doc: \"Do not add LOF and NMD annotations\"\n  - id: cancer\n    type: boolean?\n    inputBinding:\n      prefix: -cancer\n    doc: \"Perform 'cancer' comparisons (somatic vs. germline)\"\n  - id: cancerSamples\n    type: File?\n    doc: \"<file> : Two column TXT file defining 'oringinal \\t derived' samples.\"\n  - id: oicr\n    type: boolean?\n    doc: \"Add OICR tag in VCF file. Default: false\"\n\n## Database options:\n\n  - id: canon\n    type: boolean?\n    doc: \"Only use canonical transcripts\"\n  - id: motif\n    type: boolean?\n    doc: \"Annotate using motifs (requires Motif database).\"\n  - id: noMotif\n    type: boolean?\n    doc: \"Disable motif annotations\"\n  - id: noNextProt\n    type: boolean?\n    doc: \"Disable NextProt annotations\"\n  - id: nextProt\n    type: boolean?\n    doc: \"Annotate using NextProt (requires NextProt database).\"\n  - id: noGenome\n    type: boolean?\n    doc: \"Do not load any genomic database (e.g. annotate using custom files).\"\n  - id: onlyProtein\n    type: boolean?\n    doc: \"Only use protein coding transcripts. Default: false\"\n  - id: transcripts\n    type: File?\n    doc: '<file.txt>   Only use the transcripts in this file. Format: One transcript ID per line.'\n\n  # \u00e0 rendre facultatif:\n  - id: interval\n    type: File[]?\n      #- type: null\n      #type: array\n      #items: File\n    doc: 'Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).'\n  - id: spliceRegionExonSize\n    type: int?\n    default: 3\n  - id: spliceRegionIntronMax\n    type: int?\n    default: 8\n  - id: spliceRegionIntronMin\n    type: int?\n    default: 8\n  - id: spliceSiteSize\n    type: int?\n    default: 2\n  - id: onlyReg\n    type: boolean?\n    doc: \"Only use regulation tracks.\"\n  - id: strict\n    type: boolean?\n    doc: \"Only use 'validated' transcripts (i.e. sequence has been checked). Default: false\"\n## Results filter options :\n\n  - id: filterInterval\n    type: File[]?\n    doc: \"Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)\"\n  - id: no_downstream\n    type: boolean?\n    doc: \" Do not show DOWNSTREAM changes\"\n  - id: no_intergenic\n    type: boolean?\n    doc: \"Do not show INTERGENIC changes\"\n  - id: no_intron\n    type: boolean?\n    doc: \"Do not show INTRON changes\"\n  - id: no_upstream\n    type: boolean?\n    doc: \"Do not show UPSTREAM changes\"\n  - id: no_utr\n    type: boolean?\n    doc: \"Do not show 5_PRIME_UTR or 3_PRIME_UTR changes\"\n  - id: no_EffectType\n    type: boolean?\n    doc: \"Do not show 'EffectType'. This option can be used several times.\"\n\noutputs:\n  - id: snpeff_output\n    type: File?\n    # format $(inputs.outputFormat)\n    outputBinding:\n      glob: \"*.$(inputs.outputFormat)\"\n  - id: statsFile\n    type: File?\n    outputBinding:\n      glob: \"*.html\"\n  - id: csvFile\n    type: File?\n    outputBinding:\n      glob: '*.csv'\n  - id: genes\n    type: File?\n    outputBinding:\n      glob: '*.txt'\nrequirements:\n  - class: DockerRequirement\n    dockerPull: biocontainers/snpeff:v4.1k_cv3\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: \"$({class: 'Directory', listing: []})\"\n        entryname: $(inputs.genome_reference)\n        writable: true\n      - entryname: $(inputs.genome_reference)/genes.gbk\n        entry: $(inputs.bankfile)\n      - entryname: commands.sh\n        entry: |-\n          #!/bin/bash\n          ###########################\n          #cd /home/biodocker/bin/snpEff\n          cp /home/biodocker/bin/snpEff/snpEff.config .\n          ls -R\n\n          if [ $(inputs.importGenome) ]\n          then\n              echo $(inputs.genome_reference).genome=$(inputs.genome_reference) >> snpEff.config\n              snpEff build -v -c snpEff.config -dataDir . -configOption $(inputs.genome_reference).genome=$(inputs.genome_reference) -genbank $(inputs.genome_reference)\n              grep covid19 snpEff.config\n          fi\n\n          ${\n          var command=\n          \"snpEff ann -v -c snpEff.config -dataDir .  -i \"+ (inputs.inputFormat)+\" -o \"+(inputs.outputFormat)+\" -upDownStreamLen \"+(inputs.udLength)+\" -spliceRegionExonSize \"+(inputs.spliceRegionExonSize)+\" -spliceRegionIntronMax  \"+(inputs.spliceRegionIntronMax)+\" -spliceRegionIntronMin \"+(inputs.spliceRegionIntronMin)+\" -spliceSiteSize \"+(inputs.spliceSiteSize)\n\n          if (inputs.csvFile){\n            command+= \" -csvFile \"\n          }\n          if (inputs.html_report){\n            command+=\" -s \"\n          }\n          if (inputs.noStats){\n            command+=\" -noStats \"\n          }\n          if (inputs.formatEff){\n            command+=\" -formatEff \"\n          }\n          if (inputs.classic){\n            command+=\" -classic \"\n          }\n          if (inputs.sequenceOntology){\n            command+=\" -sequenceOntology \"\n          }\n          if (inputs.hgvs){\n            command+=\" -hgvs \"\n          }\n          if (inputs.noShiftHgvs){\n            command+=\" -noShiftHgvs \"\n          }\n          if (inputs.noHgvs){\n            command+=\" -noHgvs \"\n          }\n          if (inputs.geneId){\n            command+= \" -geneId\"\n          }\n          if (inputs.lof){\n            command+=\" -lof \"\n          }\n          if (inputs.noLof){\n            command+=\" -noLof \"\n          }\n          if (inputs.cancer){\n            command+=\" -cancer \"\n          }\n          if (inputs.oicr){\n            command+=\" -oicr \"\n          }\n          if (inputs.cancerSamples!=null){\n            command+= \" -cancerSamples \"+(inputs.cancerSamples.path)\n          }\n          if (inputs.canon){\n            command+= \" -canon \"\n          }\n          if (inputs.motif){\n            command+= \" -motif \"\n          }\n          if (inputs.noMotif){\n            command+= \" -noMotif \"\n          }\n          if (inputs.noNextProt){\n            command+=\" -noNextProt \"\n          }\n          if (inputs.nextProt){\n            command+=\" -nextProt \"\n          }\n          if (inputs.noGenome){\n            command+=\" -noGenome \"\n          }\n          if (inputs.onlyProtein){\n            command+=\" -onlyProtein \"\n          }\n          if (inputs.onlyReg){\n            command+=\" -onlyReg \"\n          }\n          if (inputs.strict){\n            command+=\" -strict \"\n          }\n          if (inputs.no_downstream){\n            command+= \" -no-downstream \"\n          }\n          if (inputs.no_intergenic){\n            command+= \" -no-intergenic \"\n          }\n          if (inputs.no_intron){\n            command+= \" -no-intron \"\n          }\n          if (inputs.no_upstream){\n            command+= \" -no-upstream \"\n          }\n          if (inputs.no_utr){\n            command+= \" -no-utr \"\n          }\n          if (inputs.no_EffectType){\n            command+= \" -no EffectType \"\n          }\n          if (inputs.transcripts!=null){\n           for (var i=0; i< inputs.transcripts.length; i++){\n             command+= \" -onlyTr \"+inputs.transcripts[i].path\n           }\n          }\n          if (inputs.filterInterval!=null){\n           for (var i=0; i< inputs.filterInterval.length; i++){\n             command+= \" -filterInterval \"+inputs.filterInterval[i].path\n           }\n          }\n          if (inputs.interval!=null){\n           for (var i=0; i< inputs.interval.length; i++){\n             command+= \" -interval \"+inputs.interval[i].path\n           }\n          }\n          command+=(inputs.genome_reference)+\" \"+(inputs.sequence.path)+\" > \"+(inputs.sequence.nameroot)+\".ann.\"+(inputs.outputFormat)\n\n          return command;\n          }\n          ls -R\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'importGenome', 'type': 'boolean', 'doc': 'import your own genome (genbank)'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'bankfile', 'type': 'File?', 'doc': 'import your own genome'}, {'id': 'sequence', 'type': 'File'}, {'id': 'inputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed']}], 'default': 'vcf'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn']}], 'default': 'vcf'}, {'id': 'udLength', 'type': 'int', 'doc': 'Set upstream downstream interval length (in bases). 0 base: No upstream / downstream intervals'}, {'id': 'html_report', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?', 'doc': \"Use 'EFF' field compatible with older versions (instead of 'ANN')\"}, {'id': 'classic', 'type': 'boolean?', 'doc': 'Use Classic Effect names and amino acid variant annotations (NON_SYNONYMOUS_CODING vs missense_variant and G180R vs p.Gly180Arg/c.538G>C)'}, {'id': 'sequenceOntology', 'type': 'boolean?', 'doc': 'Override classic and use Sequence Ontolgy terms for effects (missense_variant vs NON_SYNONYMOUS_CODING)'}, {'id': 'hgvs', 'type': 'boolean?', 'default': True, 'doc': 'Override classic and use HGVS annotations for amino acid annotations (p.Gly180Arg/c.538G>C vs G180R)'}, {'id': 'noShiftHgvs', 'type': 'boolean?', 'doc': 'Do not shift variants according to HGVS notation (most 3prime end)'}, {'id': 'noHgvs', 'type': 'boolean?', 'doc': 'Do not add HGVS annotations'}, {'id': 'geneId', 'type': 'boolean?', 'doc': 'Use gene ID instead of gene name (VCF output). Default: false'}, {'id': 'lof', 'type': 'boolean?', 'doc': 'Add loss of function (LOF) and nonsense mediated decay (NMD) tags'}, {'id': 'noLof', 'type': 'boolean?', 'doc': 'Do not add LOF and NMD annotations'}, {'id': 'cancer', 'type': 'boolean?', 'inputBinding': {'prefix': '-cancer'}, 'doc': \"Perform 'cancer' comparisons (somatic vs. germline)\"}, {'id': 'cancerSamples', 'type': 'File?', 'doc': \"<file> : Two column TXT file defining 'oringinal \\t derived' samples.\"}, {'id': 'oicr', 'type': 'boolean?', 'doc': 'Add OICR tag in VCF file. Default: false'}, {'id': 'canon', 'type': 'boolean?', 'doc': 'Only use canonical transcripts'}, {'id': 'motif', 'type': 'boolean?', 'doc': 'Annotate using motifs (requires Motif database).'}, {'id': 'noMotif', 'type': 'boolean?', 'doc': 'Disable motif annotations'}, {'id': 'noNextProt', 'type': 'boolean?', 'doc': 'Disable NextProt annotations'}, {'id': 'nextProt', 'type': 'boolean?', 'doc': 'Annotate using NextProt (requires NextProt database).'}, {'id': 'noGenome', 'type': 'boolean?', 'doc': 'Do not load any genomic database (e.g. annotate using custom files).'}, {'id': 'onlyProtein', 'type': 'boolean?', 'doc': 'Only use protein coding transcripts. Default: false'}, {'id': 'transcripts', 'type': 'File?', 'doc': '<file.txt>   Only use the transcripts in this file. Format: One transcript ID per line.'}, {'id': 'interval', 'type': 'File[]?', 'doc': 'Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).'}, {'id': 'spliceRegionExonSize', 'type': 'int?', 'default': 3}, {'id': 'spliceRegionIntronMax', 'type': 'int?', 'default': 8}, {'id': 'spliceRegionIntronMin', 'type': 'int?', 'default': 8}, {'id': 'spliceSiteSize', 'type': 'int?', 'default': 2}, {'id': 'onlyReg', 'type': 'boolean?', 'doc': 'Only use regulation tracks.'}, {'id': 'strict', 'type': 'boolean?', 'doc': \"Only use 'validated' transcripts (i.e. sequence has been checked). Default: false\"}, {'id': 'filterInterval', 'type': 'File[]?', 'doc': 'Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)'}, {'id': 'no_downstream', 'type': 'boolean?', 'doc': ' Do not show DOWNSTREAM changes'}, {'id': 'no_intergenic', 'type': 'boolean?', 'doc': 'Do not show INTERGENIC changes'}, {'id': 'no_intron', 'type': 'boolean?', 'doc': 'Do not show INTRON changes'}, {'id': 'no_upstream', 'type': 'boolean?', 'doc': 'Do not show UPSTREAM changes'}, {'id': 'no_utr', 'type': 'boolean?', 'doc': 'Do not show 5_PRIME_UTR or 3_PRIME_UTR changes'}, {'id': 'no_EffectType', 'type': 'boolean?', 'doc': \"Do not show 'EffectType'. This option can be used several times.\"}]",
    "cwl_outputs": "[{'id': 'snpeff_output', 'type': 'File?', 'outputBinding': {'glob': '*.$(inputs.outputFormat)'}}, {'id': 'statsFile', 'type': 'File?', 'outputBinding': {'glob': '*.html'}}, {'id': 'csvFile', 'type': 'File?', 'outputBinding': {'glob': '*.csv'}}, {'id': 'genes', 'type': 'File?', 'outputBinding': {'glob': '*.txt'}}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', 'commands.sh']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/snpSift_extract.cwl",
    "sha": "1ac98a628598fb8cc3a0623632abf1d101929e55",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/snpSift_extract.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/snpsift:4.3.1t--2\n    \ndoc:   \"SnpSift Extract Fields <http://snpeff.sourceforge.net/SnpSift.html#Extract> selects columns from a VCF dataset into a Tab-delimited format.\"\n\nstdout: $(inputs.input_vcf.nameroot).tsv\nbaseCommand: [SnpSift, -Xmx6G, extractFields]\narguments: \n  - valueFrom: \\\"$(inputs.empty_text)\\\"\n    prefix: -e\n    position: 4\ninputs:\n  - id: input_vcf\n    type: File \n    inputBinding:\n      position: 1\n\n  - id: extractFields\n    #type: string?\n    type: string[]?\n    default: \"CHROM POS ID REF ALT FILTER\"\n    doc: \"Separated by spaces\"\n    inputBinding:\n      position: 2\n\n      \n  # - id: one_effect_per_line\n  #   type: boolean?\n  #   default: true\n  #   doc: \"When variants have more than one effect, lists one effect per line, while all other parameters in the line are repeated across mutiple lines\"\n\n  - id: separator\n    type: string?\n    doc: \"Separate multiple fields in one column with this character, e.g. a comma, rather than a column for each of the multiple values\"\n    inputBinding:\n      prefix: -s\n      position: 3\n      \n  - id: empty_text\n    type: string?\n    doc: \"Represent empty fields with this value, rather than leaving them blank\"\n   # inputBinding:\n   #   prefix: -e\n   #   position: 4\n\noutputs: \n  - id: out\n    type: stdout\nrequirements:\n  - class: InlineJavascriptRequirement\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'input_vcf', 'type': 'File', 'inputBinding': {'position': 1}}, {'id': 'extractFields', 'type': 'string[]?', 'default': 'CHROM POS ID REF ALT FILTER', 'doc': 'Separated by spaces', 'inputBinding': {'position': 2}}, {'id': 'separator', 'type': 'string?', 'doc': 'Separate multiple fields in one column with this character, e.g. a comma, rather than a column for each of the multiple values', 'inputBinding': {'prefix': '-s', 'position': 3}}, {'id': 'empty_text', 'type': 'string?', 'doc': 'Represent empty fields with this value, rather than leaving them blank'}]",
    "cwl_outputs": "[{'id': 'out', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/snpsift:4.3.1t--2'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['SnpSift', '-Xmx6G', 'extractFields']",
    "cwl_arguments": "[{'valueFrom': '\\\\\"$(inputs.empty_text)\\\\\"', 'prefix': '-e', 'position': 4}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "SnpSift Extract Fields <http://snpeff.sourceforge.net/SnpSift.html#Extract> selects columns from a VCF dataset into a Tab-delimited format.",
    "cwl_stdout": "$(inputs.input_vcf.nameroot).tsv",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/variation_PE.cwl",
    "sha": "d1917269980f0c3db4a4cad18fefa742082aaae8",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/variation_PE.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: var_pe\nlabel: var-PE\n$namespaces:\n  edam: 'http://edamontology.org/'\ninputs:\n  - id: reads_reverse\n    type: File[]\n    format:\n      - 'edam:format_1930'\n      - 'edam:format_1931'\n\n  - id: reads_forward\n    type: File[]\n    format:\n      - 'edam:format_1930'\n      - 'edam:format_1931'\n  - id: reference_in\n    type: File\n\n   #### 1-  fastp options:\n  - id: unqualified_phred_quality\n    type: int?\n  - id: threads\n    type: int?\n  - id: qualified_phred_quality\n    type: int?\n  - id: min_length_required\n    type: int?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: base_correction\n    type: boolean?\n\n   #### picard__sort_sam options:\n  - id: sort_order\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n  - id: validation_stringency\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n\n# samtools_view\n  - id: exclude_unmapped\n    type: boolean?\n  - id: count\n    type: boolean\n\n   #### picard__mark_duplicates options:\n  - id: alignments_are_sorted\n    type: boolean\n  - id: remove_duplicates\n    type: boolean\n  - id: validation_stringency_1\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n  - id: comment\n    type: 'string[]?'\n  - id: duplicate_scoring_strategy\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n  - id: optical_duplicate_pixel_distance\n    type: int?\n  - id: barcode_tag\n    type: string?\n\n   ####lofreq_viterbi options:\n  - id: keepflags\n    type: boolean?\n  - id: defqual\n    type: int?\n  - id: bq2_handling\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - keep\n          - dynamic\n          - fixed\n\n   #### lofreq_cal_variants options:\n  - id: bed\n    type: File?\n  - id: bonferroni\n    type: string?\n  - id: call_indels\n    type: boolean?\n  - id: def_alt_bq\n    type: int?\n  - id: def_alt_jq\n    type: int?\n  - id: del_baq\n    type: boolean?\n  - id: enable_source_qual\n    type: boolean?\n  - id: ignore_vcf\n    type: 'File[]?'\n  - id: illumina_1_3\n    type: boolean?\n  - id: max_depth_cov\n    type: int?\n  - id: max_mapping_quality\n    type: int?\n  - id: min_bq\n    type: int?\n  - id: min_cov\n    type: int?\n  - id: min_mq\n    type: int?\n  - id: use_orphan\n    type: boolean?\n  - id: threads_lf_call\n    type: int?\n  - id: replace_non_match\n    type: int?\n  - id: region\n    type: string?\n  - id: pvalue_cutoff\n    type: float?\n  - id: only_indels\n    type: boolean?\n  - id: no_idaq\n    type: boolean?\n  - id: no_default_filter\n    type: boolean?\n  - id: no_baq\n    type: boolean?\n  - id: no_mapping_quality\n    type: boolean?\n  - id: no_ext_base_alignment_quality\n    type: boolean?\n  - id: min_jq\n    type: int?\n  - id: min_alt_jq\n    type: int?\n  - id: min_alt_bq\n    type: int?\n\n   #### SnpEff build & ann:\n  - id: genome_reference\n    type: string\n  - id: udLength\n    type: int\n  - id: transcripts\n    type: File?\n  - id: strict\n    type: boolean?\n  - id: spliceSiteSize\n    type: int?\n  - id: spliceRegionIntronMin\n    type: int?\n  - id: spliceRegionIntronMax\n    type: int?\n  - id: spliceRegionExonSize\n    type: int?\n  - id: sequenceOntology\n    type: boolean?\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n  - id: onlyReg\n    type: boolean?\n  - id: onlyProtein\n    type: boolean?\n  - id: oicr\n    type: boolean?\n  - id: noStats\n    type: boolean?\n  - id: noShiftHgvs\n    type: boolean?\n  - id: noNextProt\n    type: boolean?\n  - id: noMotif\n    type: boolean?\n  - id: bankfile\n    type: File?\n  - id: cancer\n    type: boolean?\n  - id: cancerSamples\n    type: File?\n  - id: canon\n    type: boolean?\n  - id: classic\n    type: boolean?\n  - id: csvFile\n    type: boolean?\n  - id: filterInterval\n    type: 'File[]?'\n  - id: hgvs\n    type: boolean?\n  - id: formatEff\n    type: boolean?\n  - id: html_report_1\n    type: boolean?\n  - id: importGenome\n    type: boolean\n  - id: interval\n    type: 'File[]?'\n  - id: lof\n    type: boolean?\n  - id: motif\n    type: boolean?\n  - id: nextProt\n    type: boolean?\n  - id: no_downstream\n    type: boolean?\n  - id: no_EffectType\n    type: boolean?\n  - id: no_intergenic\n    type: boolean?\n  - id: no_intron\n    type: boolean?\n  - id: no_upstream\n    type: boolean?\n  - id: no_utr\n    type: boolean?\n  - id: noGenome\n    type: boolean?\n  - id: noHgvs\n    type: boolean?\n  - id: noLof\n    type: boolean?\n  - id: geneId\n    type: boolean?\n\n   #### SNPSIFT\n  - id: separator\n    type: string?\n  - id: empty_text\n    type: string?\n  - id: extractFields\n    type: 'string[]?'\n\n  - id: IndexName\n    type: string\n\noutputs:\n  - id: multiqc_fastp\n    type: File\n    outputSource:\n      - multiqc_fastp/multiqc_zip\n  - id: stats_bam\n    type: File[]\n    outputSource:\n      - samtools_stats/stats\n  - id: multiqc_markdups\n    type: File\n    outputSource:\n      - multiqc_markdups/multiqc_zip\n  - id: multiqc_samtoolsstats\n    outputSource:\n       - multiqc_stats/multiqc_zip\n    type: File\n#  - id: log\n#    outputSource:\n#      - picard__mark_duplicates/log\n#    type: File[]\n#  - id: alignments\n#    outputSource:\n#      - picard__mark_duplicates/alignments\n#    type: File[]\n#  - id: genes\n#    outputSource:\n#      - snpeff_build_ann/genes\n#    type: File[]\n  - id: statsFile_snpeff\n    outputSource:\n      - snpeff_build_ann/statsFile\n    type: File[]\n  - id: out_snpsift\n    outputSource:\n      - snpsift_extract/out\n    type: File[]\nsteps:\n  - id: fastp\n    scatter: [fastq1, fastq2]\n    scatterMethod: dotproduct\n    in:\n      - id: base_correction\n        source: base_correction\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: reads_forward\n      - id: fastq2\n        source: reads_reverse\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n      - id: qualified_phred_quality\n        source: qualified_phred_quality\n      - id: threads\n        source: threads\n      - id: unqualified_phred_quality\n        source: unqualified_phred_quality\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n      - id: out_fastq2\n    run: ./tools/fastp.cwl\n\n  - id: multiqc_fastp\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_fast'\n      - id: qc_files_array\n        source: fastp/json_report\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: samtools_view_filter\n    scatter: bam\n    in:\n      - id: bam\n        source: bwa_mem/reads_stdout\n      - id: count\n        source: count\n      - id: exclude_unmapped\n        source: exclude_unmapped\n    out:\n      - id: bam_filtered\n    run: ./tools/samtools_view_filter.cwl\n\n  - id: picard_sortsam\n    scatter: alignments\n    in: \n      - id: alignments\n        source: samtools_view_filter/bam_filtered\n      - id: sort_order\n        source: sort_order\n      - id: validation_stringency\n        source: validation_stringency\n    out:\n      - id: sorted_alignments\n    run: ./tools/picard_SortSam.cwl\n\n  - id: picard__mark_duplicates\n    scatter: alignments\n    in:\n      - id: alignments\n        source: picard_sortsam/sorted_alignments\n      - id: alignments_are_sorted\n        source: alignments_are_sorted\n      - id: barcode_tag\n        source: barcode_tag\n      - id: comment\n        source:\n          - comment\n      - id: duplicate_scoring_strategy\n        source: duplicate_scoring_strategy\n      - id: optical_duplicate_pixel_distance\n        source: optical_duplicate_pixel_distance\n      - id: remove_duplicates\n        source: remove_duplicates\n      - id: validation_stringency\n        source: validation_stringency_1\n    out:\n      - id: alignments\n      - id: log\n      - id: metrics\n    run: ./tools/picard_MarkDuplicates.cwl\n\n  - id: multiqc_markdups\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_markdups'\n      - id: qc_files_array\n        source: picard__mark_duplicates/metrics\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: lofreq_viterbi\n    scatter: reads\n    in:\n      - id: defqual\n        source: defqual\n      - id: keepflags\n        source: keepflags\n      - id: reads\n        source: picard__mark_duplicates/alignments\n      - id: reference\n        source: reference_in\n    out:\n      - id: realigned\n    run: ./tools/lofreq_viterbi.cwl\n\n  - id: samtools_sort\n    scatter: bam_unsorted\n    in:\n      - id: bam_unsorted\n        source: lofreq_viterbi/realigned\n    out:\n      - id: bam_sorted\n    run: ./tools/samtools_sort.cwl\n\n  - id: samtools_faidx\n    in:\n      - id: sequences\n        source: reference_in\n    out:\n      - id: sequences_index\n      - id: sequences_with_index\n    run: ./tools/samtools_faidx.cwl\n    \n  - id: samtool_index\n    scatter: bam_sorted\n    in:\n      - id: bam_sorted\n        source: samtools_sort/bam_sorted\n    out:\n      - id: bam_sorted_indexed\n    run: ./tools/samtools_index.cwl\n\n  - id: bwa_index_cwl\n    in:\n      - id: InputFile\n        source: reference_in\n      - id: IndexName\n        source: IndexName\n    out:\n      - id: index\n    run: ./tools/bwa-index.cwl\n    \n  - id: get_secondaryfiles\n    in:\n      - id: bwa_index\n        source: bwa_index_cwl/index\n      - id: sequence\n        source: samtools_faidx/sequences_with_index\n    out:\n      - id: sequences_with_index\n    run: ./tools/get_secondaryfiles.cwl\n  - id: get_tab\n    scatter: [out_fastq1, out_fastq2]\n    scatterMethod: dotproduct\n    in: \n      - id: out_fastq1\n        source: fastp/out_fastq1\n      - id: out_fastq2\n        source: fastp/out_fastq2\n    out:\n      - id: tab\n    run: ./tools/mergetab.cwl\n  - id: bwa_mem\n    scatter: InputFile\n    in:\n      Index:\n        source: get_secondaryfiles/sequences_with_index\n      InputFile:\n        source: get_tab/tab\n# [fastp/out_fastq1, fastp/out_fastq2]\n#        linkMerge: merge_nested #flattened\n    out:\n      - id: reads_stdout\n    run: ./tools/bwa-mem.cwl\n  - id: samtools_stats\n    scatter: input_file\n    in:\n      input_file:\n        source: samtools_view_filter/bam_filtered\n    out:\n      - id: stats\n    run: ./tools/samtools_stats.cwl\n  - id: multiqc_stats\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_stats'\n      - id: qc_files_array\n        source: samtools_stats/stats\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl \n\n  - id: lofreq_call\n    scatter: [reads_align, reads_index]\n    scatterMethod: dotproduct\n    in:\n      - id: bed\n        source: bed\n      - id: bonferroni\n        source: bonferroni\n      - id: call_indels\n        source: call_indels\n      - id: def_alt_bq\n        source: def_alt_bq\n      - id: def_alt_jq\n        source: def_alt_jq\n      - id: del_baq\n        source: del_baq\n      - id: enable_source_qual\n        source: enable_source_qual\n      - id: ignore_vcf\n        source:\n          - ignore_vcf\n      - id: illumina_1_3\n        source: illumina_1_3\n      - id: max_depth_cov\n        source: max_depth_cov\n      - id: max_mapping_quality\n        source: max_mapping_quality\n      - id: min_alt_bq\n        source: min_alt_bq\n      - id: min_alt_jq\n        source: min_alt_jq\n      - id: min_bq\n        source: min_bq\n      - id: min_cov\n        source: min_cov\n      - id: min_jq\n        source: min_jq\n      - id: min_mq\n        source: min_mq\n      - id: no_baq\n        source: no_baq\n      - id: no_default_filter\n        source: no_default_filter\n      - id: no_ext_base_alignment_quality\n        source: no_ext_base_alignment_quality\n      - id: no_idaq\n        source: no_idaq\n      - id: no_mapping_quality\n        source: no_mapping_quality\n      - id: only_indels\n        source: only_indels\n      - id: pvalue_cutoff\n        source: pvalue_cutoff\n      - id: reads_align\n        source: samtools_sort/bam_sorted\n      - id: reads_index\n        source: samtool_index/bam_sorted_indexed\n      - id: reference_fasta\n        source: samtools_faidx/sequences_with_index\n      - id: reference_index\n        source: samtools_faidx/sequences_index\n      - id: region\n        source: region\n      - id: replace_non_match\n        source: replace_non_match\n      - id: threads\n        source: threads_lf_call\n      - id: use_orphan\n        source: use_orphan\n    out:\n      - id: vcf\n    run: ./tools/lofreq_call.cwl\n    label: LoFreq Call Variants\n\n  - id: snpeff_build_ann\n    scatter: sequence\n    in:\n      - id: importGenome\n        source: importGenome\n      - id: genome_reference\n        source: genome_reference\n      - id: bankfile\n        source: bankfile\n      - id: sequence\n        source: lofreq_call/vcf\n      - id: outputFormat\n        source: outputFormat\n      - id: udLength\n        source: udLength\n      - id: html_report\n        source: html_report_1\n      - id: csvFile\n        source: csvFile\n      - id: noStats\n        source: noStats\n      - id: formatEff\n        source: formatEff\n      - id: classic\n        source: classic\n      - id: sequenceOntology\n        source: sequenceOntology\n      - id: hgvs\n        source: hgvs\n      - id: noShiftHgvs\n        source: noShiftHgvs\n      - id: noHgvs\n        source: noHgvs\n      - id: geneId\n        source: geneId\n      - id: lof\n        source: lof\n      - id: noLof\n        source: noLof\n      - id: cancer\n        source: cancer\n      - id: cancerSamples\n        source: cancerSamples\n      - id: oicr\n        source: oicr\n      - id: canon\n        source: canon\n      - id: motif\n        source: motif\n      - id: noMotif\n        source: noMotif\n      - id: noNextProt\n        source: noNextProt\n      - id: nextProt\n        source: nextProt\n      - id: noGenome\n        source: noGenome\n      - id: onlyProtein\n        source: onlyProtein\n      - id: transcripts\n        source: transcripts\n      - id: interval\n        source:\n          - interval\n      - id: spliceRegionExonSize\n        source: spliceRegionExonSize\n      - id: spliceRegionIntronMax\n        source: spliceRegionIntronMax\n      - id: spliceRegionIntronMin\n        source: spliceRegionIntronMin\n      - id: spliceSiteSize\n        source: spliceSiteSize\n      - id: onlyReg\n        source: onlyReg\n      - id: strict\n        source: strict\n      - id: filterInterval\n        source:\n          - filterInterval\n      - id: no_downstream\n        source: no_downstream\n      - id: no_intergenic\n        source: no_intergenic\n      - id: no_intron\n        source: no_intron\n      - id: no_upstream\n        source: no_upstream\n      - id: no_utr\n        source: no_utr\n      - id: no_EffectType\n        source: no_EffectType\n    out:\n      - id: snpeff_output\n      - id: statsFile\n      - id: csvFile\n      - id: genes\n    run: ./tools/snpEff_build_ann.cwl\n\n  - id: snpsift_extract\n    scatter: input_vcf\n    in:\n      - id: input_vcf\n        source: snpeff_build_ann/snpeff_output\n      - id: extractFields\n        source:\n          - extractFields\n      - id: separator\n        source: separator\n      - id: empty_text\n        source: empty_text\n    out:\n      - id: out\n    run: ./tools/snpSift_extract.cwl\n\nrequirements:\n  - class: ScatterFeatureRequirement\n  - class: SubworkflowFeatureRequirement\n  - class: MultipleInputFeatureRequirement\n  - class: StepInputExpressionRequirement\n  - class: InlineJavascriptRequirement\n\n$schemas:\n  - 'http://edamontology.org/EDAM_1.18.owl'\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "var_pe",
    "cwl_inputs": "[{'id': 'reads_reverse', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reads_forward', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reference_in', 'type': 'File'}, {'id': 'unqualified_phred_quality', 'type': 'int?'}, {'id': 'threads', 'type': 'int?'}, {'id': 'qualified_phred_quality', 'type': 'int?'}, {'id': 'min_length_required', 'type': 'int?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'base_correction', 'type': 'boolean?'}, {'id': 'sort_order', 'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}]}, {'id': 'validation_stringency', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'exclude_unmapped', 'type': 'boolean?'}, {'id': 'count', 'type': 'boolean'}, {'id': 'alignments_are_sorted', 'type': 'boolean'}, {'id': 'remove_duplicates', 'type': 'boolean'}, {'id': 'validation_stringency_1', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'comment', 'type': 'string[]?'}, {'id': 'duplicate_scoring_strategy', 'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}]}, {'id': 'optical_duplicate_pixel_distance', 'type': 'int?'}, {'id': 'barcode_tag', 'type': 'string?'}, {'id': 'keepflags', 'type': 'boolean?'}, {'id': 'defqual', 'type': 'int?'}, {'id': 'bq2_handling', 'type': ['null', {'type': 'enum', 'symbols': ['keep', 'dynamic', 'fixed']}]}, {'id': 'bed', 'type': 'File?'}, {'id': 'bonferroni', 'type': 'string?'}, {'id': 'call_indels', 'type': 'boolean?'}, {'id': 'def_alt_bq', 'type': 'int?'}, {'id': 'def_alt_jq', 'type': 'int?'}, {'id': 'del_baq', 'type': 'boolean?'}, {'id': 'enable_source_qual', 'type': 'boolean?'}, {'id': 'ignore_vcf', 'type': 'File[]?'}, {'id': 'illumina_1_3', 'type': 'boolean?'}, {'id': 'max_depth_cov', 'type': 'int?'}, {'id': 'max_mapping_quality', 'type': 'int?'}, {'id': 'min_bq', 'type': 'int?'}, {'id': 'min_cov', 'type': 'int?'}, {'id': 'min_mq', 'type': 'int?'}, {'id': 'use_orphan', 'type': 'boolean?'}, {'id': 'threads_lf_call', 'type': 'int?'}, {'id': 'replace_non_match', 'type': 'int?'}, {'id': 'region', 'type': 'string?'}, {'id': 'pvalue_cutoff', 'type': 'float?'}, {'id': 'only_indels', 'type': 'boolean?'}, {'id': 'no_idaq', 'type': 'boolean?'}, {'id': 'no_default_filter', 'type': 'boolean?'}, {'id': 'no_baq', 'type': 'boolean?'}, {'id': 'no_mapping_quality', 'type': 'boolean?'}, {'id': 'no_ext_base_alignment_quality', 'type': 'boolean?'}, {'id': 'min_jq', 'type': 'int?'}, {'id': 'min_alt_jq', 'type': 'int?'}, {'id': 'min_alt_bq', 'type': 'int?'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'udLength', 'type': 'int'}, {'id': 'transcripts', 'type': 'File?'}, {'id': 'strict', 'type': 'boolean?'}, {'id': 'spliceSiteSize', 'type': 'int?'}, {'id': 'spliceRegionIntronMin', 'type': 'int?'}, {'id': 'spliceRegionIntronMax', 'type': 'int?'}, {'id': 'spliceRegionExonSize', 'type': 'int?'}, {'id': 'sequenceOntology', 'type': 'boolean?'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn']}]}, {'id': 'onlyReg', 'type': 'boolean?'}, {'id': 'onlyProtein', 'type': 'boolean?'}, {'id': 'oicr', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'noShiftHgvs', 'type': 'boolean?'}, {'id': 'noNextProt', 'type': 'boolean?'}, {'id': 'noMotif', 'type': 'boolean?'}, {'id': 'bankfile', 'type': 'File?'}, {'id': 'cancer', 'type': 'boolean?'}, {'id': 'cancerSamples', 'type': 'File?'}, {'id': 'canon', 'type': 'boolean?'}, {'id': 'classic', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'filterInterval', 'type': 'File[]?'}, {'id': 'hgvs', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?'}, {'id': 'html_report_1', 'type': 'boolean?'}, {'id': 'importGenome', 'type': 'boolean'}, {'id': 'interval', 'type': 'File[]?'}, {'id': 'lof', 'type': 'boolean?'}, {'id': 'motif', 'type': 'boolean?'}, {'id': 'nextProt', 'type': 'boolean?'}, {'id': 'no_downstream', 'type': 'boolean?'}, {'id': 'no_EffectType', 'type': 'boolean?'}, {'id': 'no_intergenic', 'type': 'boolean?'}, {'id': 'no_intron', 'type': 'boolean?'}, {'id': 'no_upstream', 'type': 'boolean?'}, {'id': 'no_utr', 'type': 'boolean?'}, {'id': 'noGenome', 'type': 'boolean?'}, {'id': 'noHgvs', 'type': 'boolean?'}, {'id': 'noLof', 'type': 'boolean?'}, {'id': 'geneId', 'type': 'boolean?'}, {'id': 'separator', 'type': 'string?'}, {'id': 'empty_text', 'type': 'string?'}, {'id': 'extractFields', 'type': 'string[]?'}, {'id': 'IndexName', 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'multiqc_fastp', 'type': 'File', 'outputSource': ['multiqc_fastp/multiqc_zip']}, {'id': 'stats_bam', 'type': 'File[]', 'outputSource': ['samtools_stats/stats']}, {'id': 'multiqc_markdups', 'type': 'File', 'outputSource': ['multiqc_markdups/multiqc_zip']}, {'id': 'multiqc_samtoolsstats', 'outputSource': ['multiqc_stats/multiqc_zip'], 'type': 'File'}, {'id': 'statsFile_snpeff', 'outputSource': ['snpeff_build_ann/statsFile'], 'type': 'File[]'}, {'id': 'out_snpsift', 'outputSource': ['snpsift_extract/out'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "var-PE",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/variation_SE.cwl",
    "sha": "f46dede9819f524eccffa848948de3a554d8515b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/variation_SE.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: var\nlabel: var\n\ninputs:\n  # read(s):\n  - id: reads\n    type: File[]\n    format:\n      - edam:format_1930 # FASTA\n      - edam:format_1931 # FASTQ\n\n  # reference genome:\n  - id: reference_in\n    type: File\n\n  #### 1-  fastp options:\n  - id: unqualified_phred_quality\n    type: int?\n  - id: threads\n    type: int?\n  - id: qualified_phred_quality\n    type: int?\n  - id: min_length_required\n    type: int?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: base_correction\n    type: boolean?\n\n#### bowtie2_build options:\n  - id: bmax\n    type: int?\n  - id: bmaxdivn\n    type: int?\n  - id: bt2_index_base\n    type: string?\n  - id: c\n    type: boolean?\n  - id: dcv\n    type: int?\n  - id: f\n    type: boolean?\n  - id: ftabchars\n    type: int?\n  - id: justref\n    type: boolean?\n  - id: large_index\n    type: boolean?\n  - id: noauto\n    type: boolean?\n  - id: nodc\n    type: boolean?\n  - id: noref\n    type: boolean?\n  - id: offrate\n    type: int?\n  - id: packed\n    type: boolean?\n  - id: quiet\n    type: boolean?\n  - id: seed\n    type: int?\n  - id: threads_bowtie2\n    type: int?\n#### bowtie2_align options: (many others)\n  - id: end_to_end_very_sensitive\n    type: boolean?\n\n#### picard__sort_sam options:\n  - id: sort_order\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n  - id: validation_stringency\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n#### picard__mark_duplicates options:\n  - id: alignments_are_sorted\n    type: boolean\n  - id: remove_duplicates\n    type: boolean\n  - id: validation_stringency_1\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n  - id: comment\n    type: string[]?\n  - id: duplicate_scoring_strategy\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n  - id: read_name_regex\n    type: string?\n  - id: optical_duplicate_pixel_distance\n    type: int?\n  - id: barcode_tag\n    type: string?\n####lofreq_viterbi options:\n  - id: keepflags\n    type: boolean?\n  - id: defqual\n    type: int?\n  - id: bq2_handling\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - keep\n          - dynamic\n          - fixed\n        name: bq2_handling\n\n#### lofreq_cal_variants options:\n  - id: bed\n    type: File?\n  - id: bonferroni\n    type: string?\n  - id: call_indels\n    type: boolean?\n  - id: def_alt_bq\n    type: int?\n  - id: def_alt_jq\n    type: int?\n  - id: del_baq\n    type: boolean?\n  - id: enable_source_qual\n    type: boolean?\n  - id: ignore_vcf\n    type: 'File[]?'\n  - id: illumina_1_3\n    type: boolean?\n  - id: max_depth_cov\n    type: int?\n  - id: max_mapping_quality\n    type: int?\n  - id: min_bq\n    type: int?\n  - id: min_cov\n    type: int?\n  - id: min_mq\n    type: int?\n  - id: use_orphan\n    type: boolean?\n  - id: threads_lf_call\n    type: int?\n  - id: replace_non_match\n    type: int?\n  - id: region\n    type: string?\n  - id: pvalue_cutoff\n    type: float?\n  - id: only_indels\n    type: boolean?\n  - id: no_idaq\n    type: boolean?\n  - id: no_default_filter\n    type: boolean?\n  - id: no_baq\n    type: boolean?\n  - id: no_mapping_quality\n    type: boolean?\n  - id: no_ext_base_alignment_quality\n    type: boolean?\n  - id: min_jq\n    type: int?\n  - id: min_alt_jq\n    type: int?\n  - id: min_alt_bq\n    type: int?\n\n#### SnpEff buiild & ann:\n  - id: genome_reference\n    type: string\n  - id: udLength\n    type: int\n  - id: transcripts\n    type: File?\n  - id: strict\n    type: boolean?\n  - id: spliceSiteSize\n    type: int?\n  - id: spliceRegionIntronMin\n    type: int?\n  - id: spliceRegionIntronMax\n    type: int?\n  - id: spliceRegionExonSize\n    type: int?\n  - id: sequenceOntology\n    type: boolean?\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n        name: outputFormat\n  - id: onlyReg\n    type: boolean?\n  - id: onlyProtein\n    type: boolean?\n  - id: oicr\n    type: boolean?\n  - id: noStats\n    type: boolean?\n  - id: noShiftHgvs\n    type: boolean?\n  - id: noNextProt\n    type: boolean?\n  - id: noMotif\n    type: boolean?\n  - id: bankfile\n    type: File?\n  - id: cancer\n    type: boolean?\n  - id: cancerSamples\n    type: File?\n  - id: canon\n    type: boolean?\n  - id: classic\n    type: boolean?\n  - id: csvFile\n    type: boolean?\n  - id: filterInterval\n    type: 'File[]?'\n  - id: hgvs\n    type: boolean?\n  - id: formatEff\n    type: boolean?\n  - id: html_report_1\n    type: boolean?\n  - id: importGenome\n    type: boolean\n  - id: interval\n    type: 'File[]?'\n  - id: lof\n    type: boolean?\n  - id: motif\n    type: boolean?\n  - id: nextProt\n    type: boolean?\n  - id: no_downstream\n    type: boolean?\n  - id: no_EffectType\n    type: boolean?\n  - id: no_intergenic\n    type: boolean?\n  - id: no_intron\n    type: boolean?\n  - id: no_upstream\n    type: boolean?\n  - id: no_utr\n    type: boolean?\n  - id: noGenome\n    type: boolean?\n  - id: noHgvs\n    type: boolean?\n  - id: noLof\n    type: boolean?\n  - id: geneId\n    type: boolean?\n\n#### SNPSIFT\n  - id: separator\n    type: string?\n  - id: empty_text\n    type: string?\n  - id: extractFields\n    type: 'string[]?'\n\noutputs:\n#FASTP:\n#  - id: html_report\n#    outputSource:\n#      - fastp/html_report\n#    type: File[]\n  - id: multiqc_fastp\n    outputSource:\n      - multiqc_fastp/multiqc_zip\n#  - id: json_report\n#    outputSource:\n#      - fastp/json_report\n#    type: File[]\n#  - id: out_fastq1\n#    outputSource:\n#      - fastp/out_fastq1\n#    type: File[]\n\n#BOWTIE2_BUILD:\n#  - id: indices\n#    outputSource:\n#      - bowtie2_build/indices\n#    type: File\n\n#BOWTIE2_ALIGN:\n#  - id: output\n#    outputSource:\n#      - bowtie2_align/output\n#    type: File[]\n  - id: output_log\n    outputSource:\n      - bowtie2_align/output_log\n    type: File[]\n#picard_sortsam:\n#  - id: outFile\n#    outputSource:\n#      - picard__sort_sam/sorted_alignments\n#    type: File[]\n\n#picard_markduplicates\n  - id: metrics\n    outputSource:\n      - picard__mark_duplicates/metrics\n    type: File[]\n  - id: log\n    outputSource:\n      - picard__mark_duplicates/log\n    type: File[]\n  - id: alignments\n    outputSource:\n      - picard__mark_duplicates/alignments\n    type: File[]\n\n#lofreq_viterbi:\n#  - id: realigned\n#    outputSource:\n#      - lofreq_viterbi/realigned\n#    type: File[]\n#samtools_sort\n#  - id: bam_sorted\n#    outputSource:\n#      - samtools_sort/bam_sorted\n#    type: File[]\n#lofreq_call:\n#  - id: vcf\n#    outputSource:\n#      - lofreq_call/vcf\n#    type: File[]\n#SNPEFF:\n  - id: csvFile\n    outputSource:\n      - snpeff_build_ann/csvFile\n    type: File[]?\n  - id: genes\n    outputSource:\n      - snpeff_build_ann/genes\n    type: File[]?\n#  - id: snpeff_output\n#    outputSource:\n#      - snpeff_build_ann/snpeff_output\n#    type: File[]?\n  - id: statsFile\n    outputSource:\n      - snpeff_build_ann/statsFile\n    type: File[]?\n#SNPSIFT:\n  - id: out\n    outputSource:\n      - snpsift_extract/out\n    type: File[]\n\nsteps:\n  - id: fastp\n    scatter: fastq1\n    in:\n      - id: base_correction\n        source: base_correction\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: reads\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n      - id: qualified_phred_quality\n        source: qualified_phred_quality\n      - id: threads\n        source: threads\n      - id: unqualified_phred_quality\n        source: unqualified_phred_quality\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n    run: ./tools/fastp.cwl\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_fast'\n      - id: qc_files_array\n        source: fastp/json_report\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: bowtie2_build\n    in:\n      - id: bmax\n        source: bmax\n      - id: bmaxdivn\n        source: bmaxdivn\n      - id: bt2_index_base\n        source: bt2_index_base\n      - id: c\n        source: c\n      - id: dcv\n        source: dcv\n      - id: f\n        source: f\n      - id: ftabchars\n        source: ftabchars\n      - id: justref\n        source: justref\n      - id: large_index\n        source: large_index\n      - id: noauto\n        source: noauto\n      - id: nodc\n        source: nodc\n      - id: noref\n        source: noref\n      - id: offrate\n        source: offrate\n      - id: packed\n        source: packed\n      - id: quiet\n        source: quiet\n      - id: reference_in\n        source:\n          - reference_in\n      - id: seed\n        source: seed\n      - id: threads\n        source: threads_bowtie2\n    out:\n      - id: indices\n      - id: output_log\n    run: ./tools/bowtie2_build.cwl\n\n  - id: bowtie2_align\n    scatter: filelist\n    in:\n      - id: filelist\n        source: fastp/out_fastq1\n      - id: indices_file\n        source: bowtie2_build/indices\n      - id: end_to_end_very_sensitive\n        source: end_to_end_very_sensitive\n    out:\n      - id: output\n      - id: output_log\n    run: ./tools/bowtie2_align.cwl\n  - id: picard__sort_sam\n    scatter: alignments\n    in:\n      - id: alignments\n        source: bowtie2_align/output\n      - id: sort_order\n        source: sort_order\n      - id: validation_stringency\n        source: validation_stringency\n    out:\n      - id: sorted_alignments\n    run: ./tools/picard_SortSam.cwl\n\n  - id: picard__mark_duplicates\n    scatter: alignments\n    in:\n      - id: alignments_are_sorted\n        source: alignments_are_sorted\n      - id: alignments\n        source: picard__sort_sam/sorted_alignments\n      - id: barcode_tag\n        source: barcode_tag\n      - id: comment\n        source:\n          - comment\n      - id: duplicate_scoring_strategy\n        source: duplicate_scoring_strategy\n      - id: optical_duplicate_pixel_distance\n        source: optical_duplicate_pixel_distance\n      - id: remove_duplicates\n        source: remove_duplicates\n      - id: validation_stringency\n        source: validation_stringency_1\n    out:\n      - id: alignments\n      - id: log\n      - id: metrics\n    run: ./tools/picard_MarkDuplicates.cwl\n\n  - id: lofreq_viterbi\n    scatter: reads\n    in:\n      - id: bq2_handling\n        source: bq2_handling\n      - id: defqual\n        source: defqual\n      - id: keepflags\n        source: keepflags\n      - id: reads\n        source: picard__mark_duplicates/alignments\n      - id: reference\n        source: reference_in\n    out:\n      - id: realigned\n    run: ./tools/lofreq_viterbi.cwl\n  - id: samtools_sort\n    scatter: bam_unsorted\n    in:\n      - id: bam_unsorted\n        source: lofreq_viterbi/realigned\n    out:\n      - id: bam_sorted\n    run: ./tools/samtools_sort.cwl\n\n  - id: samtools_faidx\n    in:\n      - id: sequences\n        source: reference_in\n    out:\n      - id: sequences_index\n      - id: sequences_with_index\n    run: ./tools/samtools_faidx.cwl\n\n  - id: samtool_index\n    scatter: bam_sorted\n    in:\n      - id: bam_sorted\n        source: samtools_sort/bam_sorted\n    out:\n      - id: bam_sorted_indexed\n    run: ./tools/samtools_index.cwl\n\n\n  - id: lofreq_call\n    scatter: [reads_align, reads_index]\n    scatterMethod: \"dotproduct\"\n    in:\n      - id: threads\n        source: threads_lf_call\n      - id: reference_index\n        source: samtools_faidx/sequences_index\n      - id: reference_fasta\n        source: samtools_faidx/sequences_with_index\n      - id: call_indels\n        source: call_indels\n      - id: only_indels\n        source: only_indels\n      - id: bed\n        source: bed\n      - id: region\n        source: region\n      - id: min_bq\n        source: min_bq\n      - id: min_alt_bq\n        source: min_alt_bq\n      - id: def_alt_bq\n        source: def_alt_bq\n      - id: min_jq\n        source: min_jq\n      - id: min_alt_jq\n        source: min_alt_jq\n      - id: def_alt_jq\n        source: def_alt_jq\n      - id: no_baq\n        source: no_baq\n      - id: no_idaq\n        source: no_idaq\n      - id: del_baq\n        source: del_baq\n      - id: no_ext_base_alignment_quality\n        source: no_ext_base_alignment_quality\n      - id: min_mq\n        source: min_mq\n      - id: max_mapping_quality\n        source: max_mapping_quality\n      - id: no_mapping_quality\n        source: no_mapping_quality\n      - id: enable_source_qual\n        source: enable_source_qual\n      - id: ignore_vcf\n        source:\n          - ignore_vcf\n      - id: replace_non_match\n        source: replace_non_match\n      - id: pvalue_cutoff\n        source: pvalue_cutoff\n      - id: bonferroni\n        source: bonferroni\n      - id: min_cov\n        source: min_cov\n      - id: max_depth_cov\n        source: max_depth_cov\n      - id: illumina_1_3\n        source: illumina_1_3\n      - id: use_orphan\n        source: use_orphan\n      - id: no_default_filter\n        source: no_default_filter\n      - id: reads_align\n        source: samtools_sort/bam_sorted\n      - id: reads_index\n        source: samtool_index/bam_sorted_indexed\n    out:\n      - id: vcf\n    run: ./tools/lofreq_call.cwl\n    label: LoFreq Call Variants\n\n  - id: snpeff_build_ann\n    scatter: sequence\n    in: \n      - id: importGenome\n        source: importGenome\n      - id: genome_reference\n        source: genome_reference\n      - id: bankfile\n        source: bankfile\n      - id: sequence\n        source: lofreq_call/vcf\n      - id: outputFormat\n        source: outputFormat\n      - id: udLength\n        source: udLength\n      - id: html_report\n        source: html_report_1\n      - id: csvFile\n        source: csvFile\n      - id: noStats\n        source: noStats\n      - id: formatEff\n        source: formatEff\n      - id: classic\n        source: classic\n      - id: sequenceOntology\n        source: sequenceOntology\n      - id: hgvs\n        source: hgvs\n      - id: noShiftHgvs\n        source: noShiftHgvs\n      - id: noHgvs\n        source: noHgvs\n      - id: geneId\n        source: geneId\n      - id: lof\n        source: lof\n      - id: noLof\n        source: noLof\n      - id: cancer\n        source: cancer\n      - id: cancerSamples\n        source: cancerSamples\n      - id: oicr\n        source: oicr\n      - id: canon\n        source: canon\n      - id: motif\n        source: motif\n      - id: noMotif\n        source: noMotif\n      - id: noNextProt\n        source: noNextProt\n      - id: nextProt\n        source: nextProt\n      - id: noGenome\n        source: noGenome\n      - id: onlyProtein\n        source: onlyProtein\n      - id: transcripts\n        source: transcripts\n      - id: interval\n        source:\n          - interval\n      - id: spliceRegionExonSize\n        source: spliceRegionExonSize\n      - id: spliceRegionIntronMax\n        source: spliceRegionIntronMax\n      - id: spliceRegionIntronMin\n        source: spliceRegionIntronMin\n      - id: spliceSiteSize\n        source: spliceSiteSize\n      - id: onlyReg\n        source: onlyReg\n      - id: strict\n        source: strict\n      - id: filterInterval\n        source:\n          - filterInterval\n      - id: no_downstream\n        source: no_downstream\n      - id: no_intergenic\n        source: no_intergenic\n      - id: no_intron\n        source: no_intron\n      - id: no_upstream\n        source: no_upstream\n      - id: no_utr\n        source: no_utr\n      - id: no_EffectType\n        source: no_EffectType\n    out:\n      - id: snpeff_output\n      - id: statsFile\n      - id: csvFile\n      - id: genes\n    run: ./tools/snpEff_build_ann.cwl\n\n  - id: snpsift_extract\n    scatter: input_vcf\n    in:\n      - id: input_vcf\n        source: snpeff_build_ann/snpeff_output\n      - id: extractFields\n        source:\n          - extractFields\n      - id: separator\n        source: separator\n      - id: empty_text\n        source: empty_text\n    out:\n      - id: out\n    run: ./tools/snpSift_extract.cwl\n\nrequirements:\n  ScatterFeatureRequirement: {}\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "Workflow",
    "cwl_id": "var",
    "cwl_inputs": "[{'id': 'reads', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reference_in', 'type': 'File'}, {'id': 'unqualified_phred_quality', 'type': 'int?'}, {'id': 'threads', 'type': 'int?'}, {'id': 'qualified_phred_quality', 'type': 'int?'}, {'id': 'min_length_required', 'type': 'int?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'base_correction', 'type': 'boolean?'}, {'id': 'bmax', 'type': 'int?'}, {'id': 'bmaxdivn', 'type': 'int?'}, {'id': 'bt2_index_base', 'type': 'string?'}, {'id': 'c', 'type': 'boolean?'}, {'id': 'dcv', 'type': 'int?'}, {'id': 'f', 'type': 'boolean?'}, {'id': 'ftabchars', 'type': 'int?'}, {'id': 'justref', 'type': 'boolean?'}, {'id': 'large_index', 'type': 'boolean?'}, {'id': 'noauto', 'type': 'boolean?'}, {'id': 'nodc', 'type': 'boolean?'}, {'id': 'noref', 'type': 'boolean?'}, {'id': 'offrate', 'type': 'int?'}, {'id': 'packed', 'type': 'boolean?'}, {'id': 'quiet', 'type': 'boolean?'}, {'id': 'seed', 'type': 'int?'}, {'id': 'threads_bowtie2', 'type': 'int?'}, {'id': 'end_to_end_very_sensitive', 'type': 'boolean?'}, {'id': 'sort_order', 'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}]}, {'id': 'validation_stringency', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'alignments_are_sorted', 'type': 'boolean'}, {'id': 'remove_duplicates', 'type': 'boolean'}, {'id': 'validation_stringency_1', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'comment', 'type': 'string[]?'}, {'id': 'duplicate_scoring_strategy', 'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}]}, {'id': 'read_name_regex', 'type': 'string?'}, {'id': 'optical_duplicate_pixel_distance', 'type': 'int?'}, {'id': 'barcode_tag', 'type': 'string?'}, {'id': 'keepflags', 'type': 'boolean?'}, {'id': 'defqual', 'type': 'int?'}, {'id': 'bq2_handling', 'type': ['null', {'type': 'enum', 'symbols': ['keep', 'dynamic', 'fixed'], 'name': 'bq2_handling'}]}, {'id': 'bed', 'type': 'File?'}, {'id': 'bonferroni', 'type': 'string?'}, {'id': 'call_indels', 'type': 'boolean?'}, {'id': 'def_alt_bq', 'type': 'int?'}, {'id': 'def_alt_jq', 'type': 'int?'}, {'id': 'del_baq', 'type': 'boolean?'}, {'id': 'enable_source_qual', 'type': 'boolean?'}, {'id': 'ignore_vcf', 'type': 'File[]?'}, {'id': 'illumina_1_3', 'type': 'boolean?'}, {'id': 'max_depth_cov', 'type': 'int?'}, {'id': 'max_mapping_quality', 'type': 'int?'}, {'id': 'min_bq', 'type': 'int?'}, {'id': 'min_cov', 'type': 'int?'}, {'id': 'min_mq', 'type': 'int?'}, {'id': 'use_orphan', 'type': 'boolean?'}, {'id': 'threads_lf_call', 'type': 'int?'}, {'id': 'replace_non_match', 'type': 'int?'}, {'id': 'region', 'type': 'string?'}, {'id': 'pvalue_cutoff', 'type': 'float?'}, {'id': 'only_indels', 'type': 'boolean?'}, {'id': 'no_idaq', 'type': 'boolean?'}, {'id': 'no_default_filter', 'type': 'boolean?'}, {'id': 'no_baq', 'type': 'boolean?'}, {'id': 'no_mapping_quality', 'type': 'boolean?'}, {'id': 'no_ext_base_alignment_quality', 'type': 'boolean?'}, {'id': 'min_jq', 'type': 'int?'}, {'id': 'min_alt_jq', 'type': 'int?'}, {'id': 'min_alt_bq', 'type': 'int?'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'udLength', 'type': 'int'}, {'id': 'transcripts', 'type': 'File?'}, {'id': 'strict', 'type': 'boolean?'}, {'id': 'spliceSiteSize', 'type': 'int?'}, {'id': 'spliceRegionIntronMin', 'type': 'int?'}, {'id': 'spliceRegionIntronMax', 'type': 'int?'}, {'id': 'spliceRegionExonSize', 'type': 'int?'}, {'id': 'sequenceOntology', 'type': 'boolean?'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn'], 'name': 'outputFormat'}]}, {'id': 'onlyReg', 'type': 'boolean?'}, {'id': 'onlyProtein', 'type': 'boolean?'}, {'id': 'oicr', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'noShiftHgvs', 'type': 'boolean?'}, {'id': 'noNextProt', 'type': 'boolean?'}, {'id': 'noMotif', 'type': 'boolean?'}, {'id': 'bankfile', 'type': 'File?'}, {'id': 'cancer', 'type': 'boolean?'}, {'id': 'cancerSamples', 'type': 'File?'}, {'id': 'canon', 'type': 'boolean?'}, {'id': 'classic', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'filterInterval', 'type': 'File[]?'}, {'id': 'hgvs', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?'}, {'id': 'html_report_1', 'type': 'boolean?'}, {'id': 'importGenome', 'type': 'boolean'}, {'id': 'interval', 'type': 'File[]?'}, {'id': 'lof', 'type': 'boolean?'}, {'id': 'motif', 'type': 'boolean?'}, {'id': 'nextProt', 'type': 'boolean?'}, {'id': 'no_downstream', 'type': 'boolean?'}, {'id': 'no_EffectType', 'type': 'boolean?'}, {'id': 'no_intergenic', 'type': 'boolean?'}, {'id': 'no_intron', 'type': 'boolean?'}, {'id': 'no_upstream', 'type': 'boolean?'}, {'id': 'no_utr', 'type': 'boolean?'}, {'id': 'noGenome', 'type': 'boolean?'}, {'id': 'noHgvs', 'type': 'boolean?'}, {'id': 'noLof', 'type': 'boolean?'}, {'id': 'geneId', 'type': 'boolean?'}, {'id': 'separator', 'type': 'string?'}, {'id': 'empty_text', 'type': 'string?'}, {'id': 'extractFields', 'type': 'string[]?'}]",
    "cwl_outputs": "[{'id': 'multiqc_fastp', 'outputSource': ['multiqc_fastp/multiqc_zip']}, {'id': 'output_log', 'outputSource': ['bowtie2_align/output_log'], 'type': 'File[]'}, {'id': 'metrics', 'outputSource': ['picard__mark_duplicates/metrics'], 'type': 'File[]'}, {'id': 'log', 'outputSource': ['picard__mark_duplicates/log'], 'type': 'File[]'}, {'id': 'alignments', 'outputSource': ['picard__mark_duplicates/alignments'], 'type': 'File[]'}, {'id': 'csvFile', 'outputSource': ['snpeff_build_ann/csvFile'], 'type': 'File[]?'}, {'id': 'genes', 'outputSource': ['snpeff_build_ann/genes'], 'type': 'File[]?'}, {'id': 'statsFile', 'outputSource': ['snpeff_build_ann/statsFile'], 'type': 'File[]?'}, {'id': 'out', 'outputSource': ['snpsift_extract/out'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "var",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/spades/spades.cwl",
    "sha": "503cfe9639963ebf271f37b31d28a4a5c7b53083",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/spades/spades.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: spades\nbaseCommand:\n  - bash\n#  - cat\ninputs:\n\n##############\n\n \n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n\n\n\n      \noutputs:\n\n  - id: out_contig_stats\n    type: File\n    outputBinding:\n      glob: out_contig_stats.*\n    doc: \"contig stats, default column_names: name,length,coverage\"\n\n  - id: out_scaffold_stats\n    type: File\n    outputBinding:\n      glob: out_scaffold_stats.*\n    doc: \"scaffold stats, default column_names: name,length,coverage\"\n\n  - id: out_contigs\n    type: File\n    outputBinding:\n      glob: contigs.fasta\n    doc: \"contigs (fasta sequence)\"\n\n  - id: out_scaffolds\n    type: File\n    outputBinding:\n      glob: scaffolds.fasta\n    doc: \"scaffolds (fasta sequence)\"\n\n  - id: all_script\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.sh\"  \n    doc: \"generated script to run spades. for learning purpose\" \n\n  - id: all_log\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.log\"  \n    doc: \"spades output log and warnings\" \n\n\n\n#  - id: out_log\n#    type: File\n#    outputBinding:\n#      glob: spades.log\n#    doc: \"spades output log\"\n\n\n  - id: assembly_graph\n    type: File\n    outputBinding:\n      glob: assembly_graph.fastg\n    doc: \"assembly graph\" \n\n \n  - id: assembly_graph_with_scaffolds\n    type: File\n    outputBinding:\n      glob: assembly_graph_with_scaffolds.gfa\n    doc: \"assembly graph with scaffolds\" \n\n\n############available ouput  files:\n#assembly_graph_with_scaffolds.gfa\n#assembly_graph.fastg\n#warnings.log\n#scaffolds.paths\n#contigs.paths\n#spades_wrapper.sh\n#before_rr.fasta\n#contigs.fasta\n#dataset.info\n#input_dataset.yaml\n#out_contig_stats.tab\n#out_scaffold_stats.tab\n#params.txt\n#run_spades.sh\n#scaffolds.fasta\n#write_tsv.py\n \n\n      \n      \narguments:\n  - spades_wrapper.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n####################\n      - entryname: write_tsv.py\n        entry: |\n               #######input file here\n               #!/usr/bin/env python\n               import sys,re\n               search_str = r'^>(NODE|\\S+)_(\\d+)(?:_|\\s)length_(\\d+)_cov_(\\d+\\.*\\d*).*\\$'\n               replace_str = r'\\1_\\2\\t\\3\\t\\4'\n               cmd = re.compile(search_str)\n               sys.stdout.write('#name\\tlength\\tcoverage\\n')\n               for i,line in enumerate(sys.stdin):\n                  if cmd.match(line):\n                     sys.stdout.write(cmd.sub(replace_str,line))\n\n####################\n      - entryname: spades_wrapper.sh\n        entry: |\n               ####################spades launcher\n               #!/bin/bash\n               ## An example command looks like:\n               ## spades.py -k 21,33,55,77,99,127 --careful -1 Y.fastq.gz -2 X.fastq.gz -t 24 -o output \n               read -d '' MEMORY_GB << EOF\n               ${ \n                //compute memory limits\n                var mem=\"250\"\n                if(runtime.ram){\n                  var bt=runtime.ram * 1048576 //mebibytes to bytes               \n                  bt=bt*0.000000001 //bytes to Gigabytes \n                  mem=parseInt(bt)\n                }\n                return \"-\"+mem\n               }\n               EOF\n               #echo \"MEMORY_GB limit: \\$MEMORY_GB\"\n               read -d '' CORES << EOF\n               ${ \n                //compute core / slot\n                var cores=\"16\" \n                if(runtime.cores){\n                  cores=runtime.cores\n                }\n                return  cores\n               }\n               EOF\n               #echo \"CORES : \\$CORES\"\n               read -d '' SPADES_OPT << EOF\n               ${   \n                 var opt=\"\"\n                   if (inputs.sc==true){\n                    opt+=\" --sc \"\n                   }\n                   if (inputs.onlyassembler==true){\n                    opt+=\" --only-assembler \"\n                   }\n                   if (inputs.careful==true){\n                    opt+=\" --careful \"\n                   }\n                 return opt  \n               }\n               EOF\n\n\n               read -d '' CMD_BASE << EOF\n               spades.py -o . --disable-gzip-output  \n                 \\$SPADES_OPT \n                -t \\$CORES -m \\$MEMORY_GB\n               ${   \n                 var opt=\"\"\n                   if (inputs.auto_kmer_choice==false){\n                    opt+=\" -k \"+inputs.kmers \n                   }\n                 return opt  \n               }\n               ${\n                 var opt=\"\"\n                 if (inputs.cov_state==null || inputs.cov_state == \"auto\"){\n                      opt+=\" --cov-cutoff 'auto' \"\n                  }\n                 else if (inputs.cov_state == \"value\"){\n                      opt+=\" --cov-cutoff '\"+inputs.cov_cutoff+\"' \"\n                  }\n                 if (inputs.iontorrent==true ){\n                      opt+=\" --iontorrent \"\n                 } \n                 return opt  \n               }\n               EOF\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' CMD_READ1 << EOF\n               ${\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n                      if (lmeta.lib_type !=null && lmeta.lib_type == \"paired_end\"){\n                           prefix = 'pe'\n                       } \n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"mate_paired\"){\n                           prefix = 'mp'\n                       }\n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"nxmate_paired\"){\n                           prefix = 'nxmate'\n                       }                       \n                      else {\n                           prefix = 'hqmp'\n                       }\n                      var idx=lmeta.lib_index\n                      lib_prefix[idx]=prefix\n                      opt+=\" --\"+prefix+idx+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n\n               #########################>DEBUG\n\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' ZZDEBUG << EOF\n               ${\n               //var opt=\"inputs.libraries_metadata.length:\"+inputs.libraries_metadata.length+\" \"              \n               //var str = JSON.stringify(inputs.libraries_metadata)\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   opt+=\" not null \"\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n \n                      opt+=\" !!-AA-\"+lmeta.lib_index+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n               #########################<DEBUG\n\n\n\n\n\n\n\n\n\n\n               read -d '' CMD_READ2 << EOF\n               ${\n                 var opt=\"\"\n                 if (inputs.pacbio_reads!=null){\n                   for(var i=0; i<inputs.pacbio_reads.length;i++){\n                      var read=inputs.pacbio_reads[i]\n                      opt+=\" --pacbio fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.nanopore_reads!=null){\n                   for(var i=0; i<inputs.nanopore_reads.length;i++){\n                      var read=inputs.nanopore_reads[i]\n                      opt+=\" --nanopore fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.sanger_reads!=null){\n                   for(var i=0; i<inputs.sanger_reads.length;i++){\n                      var read=inputs.sanger_reads[i]\n                      opt+=\" --sanger fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.trusted_contigs!=null){\n                   for(var i=0; i<inputs.trusted_contigs.length;i++){\n                      var read=inputs.trusted_contigs[i]\n                      opt+=\" --trusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.untrusted_contigs!=null){\n                   for(var i=0; i<inputs.untrusted_contigs.length;i++){\n                      var read=inputs.untrusted_contigs[i]\n                      opt+=\" --untrusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 return opt  \n               }\n               EOF\n               ##########################################\n               read -d '' CMD_POST << EOF\n                 && python write_tsv.py < contigs.fasta > out_contig_stats.tab\n                 && python write_tsv.py < scaffolds.fasta > out_scaffold_stats.tab\n               EOF\n               ##########################################   \n               # echo \"CMD_BASE : \\$CMD_BASE\"  > zz.txt   \\\\\n               #        && echo \"CMD_READ1 : \\$CMD_READ1\"  >> zz.txt   \\\\\n               #        && echo \"CMD_READ2 : \\$CMD_READ2\"  >> zz.txt   \\\\\n               #        && echo \"CMD_POST : \\$CMD_POST\"   >> zz.txt\n               COMMAND=\"\\$CMD_BASE \\$CMD_READ1 \\$CMD_READ2 \\$CMD_POST\"\n               COMMAND=\\$(echo $COMMAND|tr -d '\\\\n')\n               echo \"\\$COMMAND\"  > run_spades.sh\n               bash  ./run_spades.sh\n\n \n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  example workflow for js wrapper generation\n  see  https://github.com/rrwick/Unicycler\n  outputs : all genretated files\n\n\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "spades",
    "cwl_inputs": "[{'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contig_stats', 'type': 'File', 'outputBinding': {'glob': 'out_contig_stats.*'}, 'doc': 'contig stats, default column_names: name,length,coverage'}, {'id': 'out_scaffold_stats', 'type': 'File', 'outputBinding': {'glob': 'out_scaffold_stats.*'}, 'doc': 'scaffold stats, default column_names: name,length,coverage'}, {'id': 'out_contigs', 'type': 'File', 'outputBinding': {'glob': 'contigs.fasta'}, 'doc': 'contigs (fasta sequence)'}, {'id': 'out_scaffolds', 'type': 'File', 'outputBinding': {'glob': 'scaffolds.fasta'}, 'doc': 'scaffolds (fasta sequence)'}, {'id': 'all_script', 'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.sh'}, 'doc': 'generated script to run spades. for learning purpose'}, {'id': 'all_log', 'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.log'}, 'doc': 'spades output log and warnings'}, {'id': 'assembly_graph', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph.fastg'}, 'doc': 'assembly graph'}, {'id': 'assembly_graph_with_scaffolds', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph_with_scaffolds.gfa'}, 'doc': 'assembly graph with scaffolds'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['spades_wrapper.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "example workflow for js wrapper generation\nsee  https://github.com/rrwick/Unicycler\noutputs : all genretated files\n\n\n  \n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/spades/spades_assembly_wf.cwl",
    "sha": "e5b15b5b1c8d84ea3c891776c173b350315f02ba",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/spades/spades_assembly_wf.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: spaces_assembly\nlabel: spaces_assembly\n\n\n\ninputs:\n\n##############\n\n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n \n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n \n\noutputs:\n\n  - id: out_contigs\n    outputSource:\n      - spades/out_contigs\n    type: 'File'\n\n  - id: out_scaffolds\n    outputSource:\n      - spades/out_scaffolds\n    type: 'File'\n\n  - id: out_contig_stats\n    outputSource:\n      - spades/out_contig_stats\n    type: 'File'\n\n\n  - id: out_scaffold_stats\n    outputSource:\n      - spades/out_scaffold_stats\n    type: 'File'\n\n\n  - id: assembly_graph\n    outputSource:\n      - spades/assembly_graph\n    type: 'File'\n\n  - id: assembly_graph_with_scaffolds\n    outputSource:\n      - spades/assembly_graph_with_scaffolds\n    type: 'File'\n\n  - id: all_log\n    outputSource:\n      - spades/all_log\n    type: 'File[]'\n\n#  - id: all_script\n#    outputSource:\n#      - spades/all_script\n#    type: 'File[]'\n\n\n\n\n\nsteps:\n  - id: spades\n    in:\n\n\n      - id: nanopore_reads\n        source: nanopore_reads\n      - id: pacbio_reads\n        source: pacbio_reads\n      - id: sanger_reads\n        source: sanger_reads\n      - id: libraries_metadata\n        source: libraries_metadata\n      - id: libraries_fwd_rev\n        source: libraries_fwd_rev\n      - id: libraries_mono\n        source: libraries_mono\n      - id: trusted_contigs\n        source: trusted_contigs\n      - id: untrusted_contigs\n        source: untrusted_contigs\n      - id: cov_state\n        source: cov_state\n      - id: cov_cutoff\n        source: cov_cutoff\n      - id: iontorrent\n        source: iontorrent\n      - id: sc\n        source: sc\n      - id: onlyassembler\n        source: onlyassembler\n      - id: careful\n        source: careful\n\n    out:\n\n      - id: out_contigs\n      - id: out_scaffolds\n\n      - id: out_contig_stats\n      - id: out_scaffold_stats\n\n      - id: assembly_graph\n      - id: assembly_graph_with_scaffolds\n\n      - id: all_log\n#      - id: all_script\n\n\n\n    run: ../../bio-cwl-tools/spades/spades.cwl\n\nrequirements: []\n\ndoc: |\n       assemby workflow with  SPADES assembler\n\n    \n\n",
    "cwl_class": "Workflow",
    "cwl_id": "spaces_assembly",
    "cwl_inputs": "[{'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contigs', 'outputSource': ['spades/out_contigs'], 'type': 'File'}, {'id': 'out_scaffolds', 'outputSource': ['spades/out_scaffolds'], 'type': 'File'}, {'id': 'out_contig_stats', 'outputSource': ['spades/out_contig_stats'], 'type': 'File'}, {'id': 'out_scaffold_stats', 'outputSource': ['spades/out_scaffold_stats'], 'type': 'File'}, {'id': 'assembly_graph', 'outputSource': ['spades/assembly_graph'], 'type': 'File'}, {'id': 'assembly_graph_with_scaffolds', 'outputSource': ['spades/assembly_graph_with_scaffolds'], 'type': 'File'}, {'id': 'all_log', 'outputSource': ['spades/all_log'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "spaces_assembly",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/unicycler/assembly_unicycler_only.cwl",
    "sha": "7a196007b7e242d2f54d86d8d964d94dd48cc979",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/unicycler/assembly_unicycler_only.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: assembly\nlabel: assembly\ndoc:  \"Paired data assembly with Unicycler,  non long reads in this version\"\n\ninputs:\n\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n    doc:  \"Paired and single end data\"\n  \n  \n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n\n\n\n \noutputs:\n  - id: exec_script\n    outputSource:\n      - unicycler/exec_script\n    type: File\n \n  - id: assembly_graph\n    outputSource:\n      - unicycler/assembly_graph\n    type: File\n \n  - id: assembly\n    outputSource:\n      - unicycler/assembly\n    type: File\n \nsteps:\n  - id: unicycler\n    in:\n      - id: fastq1_type\n        source: fastq1_type\n      - id: fastq1\n        source: fastq1\n      - id: fastq2_type\n        source: fastq2_type\n      - id: fastq2\n        source: fastq2\n      - id: mode\n        source: mode\n      - id: fastq_file_type\n        source: fastq_file_type\n\n\n    out:\n      - id: exec_script\n      - id: assembly_graph\n      - id: assembly\n    run: ./unicycler.cwl\n    \nrequirements: []\n\n\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "assembly",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}]",
    "cwl_outputs": "[{'id': 'exec_script', 'outputSource': ['unicycler/exec_script'], 'type': 'File'}, {'id': 'assembly_graph', 'outputSource': ['unicycler/assembly_graph'], 'type': 'File'}, {'id': 'assembly', 'outputSource': ['unicycler/assembly'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Paired data assembly with Unicycler,  non long reads in this version",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "assembly",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/unicycler/unicycler.cwl",
    "sha": "f2fc606431cac7ca1e946c161672f9e9e06e4b9e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/unicycler/unicycler.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: unicycler\nbaseCommand:\n  - bash\n#  - cat\ninputs:\n\n\n \n##tyoe selector\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n#     symbols: [paired,single,paired_collection]\n#    default: single   \n    doc:  \"Paired and single end data\"\n\n##############\n\n##input1\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n\n##input2\n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n \n\n\n\n\n\n#sequence_long (optional)\n\n  - id: sequence_long_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - fastqsanger\n          - fastqsanger.gz\n          - fasta\n    doc: \"long reads file type. If there are no long reads, leave this empty\"\n\n    \n  - id: sequence_long\n    type:  File?\n    doc: \"long reads. If there are no long reads, leave this empty\"\n#    \n  - id: compute_slots\n    type:  int\n    default: 4\n    doc: \"\"\n    \n\n\n\n##mode selector\n\n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: min_fasta_length\n    type:  int\n    default: 100\n    doc: \"Exclude contigs from the FASTA file which are shorter than this length (bp)\"\n\n\n  - id: linear_seqs\n    type:  int\n    default: 0\n    doc: \"The expected number of linear (i.e. non-circular) sequences in the assembly\"\n\n\n  - id: min_anchor_seg_len\n    type:  int\n    default: 0\n    doc: \"Unicycler will not use segments shorter than this as scaffolding anchors\"\n\n\n  - id: spades_no_correct\n    type:  boolean\n    default: false\n    doc: |\n        Unicycler uses SPAdes to construct assembly graphs.\n        You can modify some of the SPAdes settings here.\n        Use this ONLY if you know what you are doing!\n        This option turns off SPAdes error correction. \n        Generally it is highly recommended to use correction.\n\n \n  - id: spades_min_kmer_frac\n    type:  float\n    default: 0.2\n    doc: |\n         Lowest k-mer size for SPAdes assembly,\n         expressed as a fraction of the read length. \n         min 0, max 1\n\n  - id: spades_max_kmer_frac\n    type:  float\n    default: 0.95\n#    max: 1.0\n#    min: 0.0\n    doc: |\n         Highest k-mer size for SPAdes assembly,\n         expressed as a fraction of the read length. \n         min 0, max 1\n\n  \n  # check default values\n  - id: spades_kmers\n    type:  string\n    default: \"11,127\"\n    doc: |\n         Exact k-mers size to use for SPAdes assembly, comma-separated\"\n         Kmers must be comma-separated odd integers (no repitition)\n         without space in the range of 11 to 127 (inclusive)\n\n  - id: spades_kmer_count\n    type:  int\n    default: 10\n#    min: 0\n    doc: \"Number of k-mer steps to use in SPAdes assembly, min 0\"\n\n\n \n  - id: spades_depth_filter\n    type:  float\n    default: 0.25\n#    min: 0.0\n#    max: 1.0\n    doc: |\n         Filter out contigs lower than this fraction \n         of the chromosomal depth.\n         It is done if does not result in graph dead ends\n         min 0, max 1\n\n  - id: spades_largest_component\n    type:  boolean\n    default: false\n    doc: \"Only keep the largest connected component of the assembly graph if true\"\n\n\n\n  - id: rotation_no_rotate\n    type:  boolean\n    default: false\n    doc: |\n         These options control the rotation of completed circular sequence\n         near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\n         Do not rotate completed replicons to start at a standard gene.\n         Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\n         If one is found, the sequence is rotated and/or flipped so that it begins with that gene\n         encoded on the forward strand. This provides consistently oriented assemblies and reduces\n         the risk that a gene will be split across the start and end of the sequence.\n    \n  - id: rotation_start_genes\n    type:  File? \n    doc: \"FASTA file of genes for start point of rotated replicons\"\n\n\n\n  - id: rotation_start_gene_id\n    type:  float\n    default: 90.0\n    doc: \"The minimum required BLAST percent identity for a start gene search. max 100, min 0\"\n\n\n  - id: rotation_start_gene_cov\n    type:  float\n    default: 95.0\n    doc: \"The minimum required BLAST percent coverage for a start gene search. min 0, max 100\"\n\n\n  - id: pilon_no_pilon\n    type:  boolean\n    default: false\n    doc: \"Unicycler uses Pilon tool for polishing final assembly. Do not use if true\"\n\n\n  - id: graph_clean_min_component_size\n    type:  int\n    default: 1000\n    doc: \"Contigs shorter than this value (bp) will not be polished using Pilon; min 0\"\n\n    \n  - id: graph_clean_min_dead_end_size\n    type:  int\n    default: 1000\n    doc: |\n         These options control the removal of small leftover sequences after bridging is complete.\n         Unbridged graph components smaller than this size will be removed from the final graph,\n         min 0    \n\n  - id: lr_align_contamination\n    type:  File?\n    doc: |\n         FASTA file of known contamination in long reads,\n         e.g. lambda, phiXm or puc18 spike-ins. \n\n  - id: lr_align_scores\n    type:  string\n    default: \"3,-6,-5,-2\"\n    doc: |\n          Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\n\n\n  - id: lr_align_low_score\n    type:  int?\n    doc: |\n          Score threshold - alignments below this are considered poor,\n          default = set automatically\n\n\n\n \n    \noutputs:\n  - id: exec_script\n    type: File\n    outputBinding:\n      glob: \"*.sh\"  \n    doc: |\n          Launching script for learning purpose\n\n\n  - id: assembly_graph\n    type: File\n    outputBinding:\n      glob: assembly.gfa\n    doc: |\n          Assembly graph\n\n\n\n  - id: assembly\n    type: File\n    outputBinding:\n      glob: assembly.fasta\n    doc: |\n          fasta assembly output sequence\n          (main output)\n      \n      \narguments:\n  - unicycler_launch.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: unicycler_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               #      unicycler launcher\n               ###########################\n\n               ##preparing input files\n               #check permission / chmod  is issues\n               ${\n                 var fl=\"\"\n                 var lncmd=\"\" \n                 var fq1=\"\"\n                 var fq2=\"\"\n                 var lr=\"\"\n                  \n               //###################paired case              \n                     if (inputs.fastq_file_type ==\"paired\"  ){\n                      if( inputs.fastq1_type=='fastqsanger' ){\n                          fq1 = \"fq1.fastq\"\n                      }\n                      else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                           fq1 = \"fq1.fastq.gz\"\n                      }\n                      if( inputs.fastq2_type=='fastqsanger' ){\n                          fq2 = \"fq2.fastq\"\n                       }\n                       else if( inputs.fastq2_type=='fastqsanger.gz' ){\n                           fq2 = \"fq2.fastq.gz\"\n                        }\n                        lncmd+=\"fq1='\"+fq1+\"'\"\n                        lncmd+=\" && \"\n                        lncmd+=\"fq2='\"+fq2+\"'\"\n                        lncmd+=\" && \"\n                        lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                        lncmd+=\" && \"\n                        lncmd+=\" ln -s '\"+inputs.fastq2.path+\"' $fq2  \"\n        \n                     }\n                //###################single case\n                 \n                if (inputs.fastq_file_type ==\"single\"  ){\n                  if( inputs.fastq1_type=='fastqsanger' ){\n                      fq1 = \"fq1.fastq\"\n                  }\n                  else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                       fq1 = \"fq1.fastq.gz\"\n                  }\n                  lncmd+=\"fq1='\"+fq1+\"'\"\n                  lncmd+=\" && \"\n                  lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                 }\n                 //####### long reads\n                  if (  inputs.sequence_long !== null) {\n                      if (inputs.sequence_long_type=='fastqsanger'){\n                               lr = \"lr.fastq\"\n                      }\n                      else if (inputs.sequence_long_type=='fastqsanger.gz') {\n                               lr = \"lr.fastq.gz\"\n                      }\n                      else if (inputs.sequence_longg_type=='fasta') {\n                               lr = \"lr.fasta\"\n                      }\n                      lncmd+=\"lr='\"+lr+\"'\"\n                      lncmd+=\" && \"\n                      lncmd+= \" ln -s '\"+inputs.sequence_long.path+\"' '$lr' \"\n                  }\n\n\n                  return lncmd\n\n               }\n\n\n               ##general options\n\n               read -d '' GENERALOPT << EOF\n               ${\n                var opt=\"\"  \n                //## General Unicycler Options section\n                opt+=\" --mode \"+inputs.mode+\" \"\n                opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\n                opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\n\n                if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\n\n                //## Spades Options section\n                if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\n                opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\n                opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\n                if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\n                               \n                opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\n                opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\n                if (inputs.spades_largest_component){opt+=\" --largest_component \"}\n                //## Rotation Options section\n                if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\n                if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\n                opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\n                opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\n                return opt\n                }\n               EOF\n               \n               ##additionnal option\n              \n               read -d '' ADDOPT << EOF\n               ${\n\n                var opt=\"\"\n                \n                if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\n                if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\n                //## Long Read Alignment Options\n                if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\n                opt+=\" --scores \"+inputs.lr_align_scores+\" \"\n                if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\n                 return ''+ opt + ''\n               }\n               EOF\n\n               ## Get location for pilon jar file\n\n               ${\n                 var cmd=\"\"  \n                 cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\n                 return cmd\n               }   \n\n               ## Build Unicycler command\n               ${\n               \n                 var cmd_base=\"\"\n                 var opt=\"\"\n\n                 \n                 \n                 \n                 cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\n                 cmd_base+=\" -o ./  \"\n                 cmd_base+=\" --verbosity 3  \"\n                 cmd_base+=\" --pilon_path \\$PILONJAR  \"\n\n                \n                if ( inputs.fastq_file_type == \"paired\"){\n                       opt+=\" -1 $fq1 -2 $fq2  \"\n                }\n                else if ( inputs.fastq_file_type == \"paired_collection\"){\n                       opt+=\" -1 $fq1 -2 $fq2  \"\n                }  \n                else if ( inputs.fastq_file_type == \"single\"){\n                   opt+=\" -s $fq1 \"\n                }\n                if (  inputs.sequence_long !== null) {\n                  opt+=\" -l $lr \"\n                }\n\n\n                //##  Unicycler command\n                var cmdl=cmd_base+\" \"+opt+\" \\$GENERALOPT \\$ADDOPT \"\n               \n                return cmdl\n\n                }\n                \n\n \n#        writable: false\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  CWL  wrapped for Unicycler.\n  an hybrid assembly pipeline for bacterial genomes\n  see  https://github.com/rrwick/Unicycler\n  outputs\n    final assembly in FASTA format (major output)\n    final assembly grapth in graph format, visualized using tools such as  \n    Bandage  https://github.com/rrwick/Bandage      \n\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "unicycler",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}, {'id': 'sequence_long_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz', 'fasta']}], 'doc': 'long reads file type. If there are no long reads, leave this empty'}, {'id': 'sequence_long', 'type': 'File?', 'doc': 'long reads. If there are no long reads, leave this empty'}, {'id': 'compute_slots', 'type': 'int', 'default': 4, 'doc': ''}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'min_fasta_length', 'type': 'int', 'default': 100, 'doc': 'Exclude contigs from the FASTA file which are shorter than this length (bp)'}, {'id': 'linear_seqs', 'type': 'int', 'default': 0, 'doc': 'The expected number of linear (i.e. non-circular) sequences in the assembly'}, {'id': 'min_anchor_seg_len', 'type': 'int', 'default': 0, 'doc': 'Unicycler will not use segments shorter than this as scaffolding anchors'}, {'id': 'spades_no_correct', 'type': 'boolean', 'default': False, 'doc': 'Unicycler uses SPAdes to construct assembly graphs.\\nYou can modify some of the SPAdes settings here.\\nUse this ONLY if you know what you are doing!\\nThis option turns off SPAdes error correction. \\nGenerally it is highly recommended to use correction.\\n'}, {'id': 'spades_min_kmer_frac', 'type': 'float', 'default': 0.2, 'doc': 'Lowest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length. \\nmin 0, max 1\\n'}, {'id': 'spades_max_kmer_frac', 'type': 'float', 'default': 0.95, 'doc': 'Highest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length. \\nmin 0, max 1\\n'}, {'id': 'spades_kmers', 'type': 'string', 'default': '11,127', 'doc': 'Exact k-mers size to use for SPAdes assembly, comma-separated\"\\nKmers must be comma-separated odd integers (no repitition)\\nwithout space in the range of 11 to 127 (inclusive)\\n'}, {'id': 'spades_kmer_count', 'type': 'int', 'default': 10, 'doc': 'Number of k-mer steps to use in SPAdes assembly, min 0'}, {'id': 'spades_depth_filter', 'type': 'float', 'default': 0.25, 'doc': 'Filter out contigs lower than this fraction \\nof the chromosomal depth.\\nIt is done if does not result in graph dead ends\\nmin 0, max 1\\n'}, {'id': 'spades_largest_component', 'type': 'boolean', 'default': False, 'doc': 'Only keep the largest connected component of the assembly graph if true'}, {'id': 'rotation_no_rotate', 'type': 'boolean', 'default': False, 'doc': 'These options control the rotation of completed circular sequence\\nnear the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\\nDo not rotate completed replicons to start at a standard gene.\\nUnicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\\nIf one is found, the sequence is rotated and/or flipped so that it begins with that gene\\nencoded on the forward strand. This provides consistently oriented assemblies and reduces\\nthe risk that a gene will be split across the start and end of the sequence.\\n'}, {'id': 'rotation_start_genes', 'type': 'File?', 'doc': 'FASTA file of genes for start point of rotated replicons'}, {'id': 'rotation_start_gene_id', 'type': 'float', 'default': 90.0, 'doc': 'The minimum required BLAST percent identity for a start gene search. max 100, min 0'}, {'id': 'rotation_start_gene_cov', 'type': 'float', 'default': 95.0, 'doc': 'The minimum required BLAST percent coverage for a start gene search. min 0, max 100'}, {'id': 'pilon_no_pilon', 'type': 'boolean', 'default': False, 'doc': 'Unicycler uses Pilon tool for polishing final assembly. Do not use if true'}, {'id': 'graph_clean_min_component_size', 'type': 'int', 'default': 1000, 'doc': 'Contigs shorter than this value (bp) will not be polished using Pilon; min 0'}, {'id': 'graph_clean_min_dead_end_size', 'type': 'int', 'default': 1000, 'doc': 'These options control the removal of small leftover sequences after bridging is complete.\\nUnbridged graph components smaller than this size will be removed from the final graph,\\nmin 0    \\n'}, {'id': 'lr_align_contamination', 'type': 'File?', 'doc': 'FASTA file of known contamination in long reads,\\ne.g. lambda, phiXm or puc18 spike-ins. \\n'}, {'id': 'lr_align_scores', 'type': 'string', 'default': '3,-6,-5,-2', 'doc': 'Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\\n'}, {'id': 'lr_align_low_score', 'type': 'int?', 'doc': 'Score threshold - alignments below this are considered poor,\\ndefault = set automatically\\n'}]",
    "cwl_outputs": "[{'id': 'exec_script', 'type': 'File', 'outputBinding': {'glob': '*.sh'}, 'doc': 'Launching script for learning purpose\\n'}, {'id': 'assembly_graph', 'type': 'File', 'outputBinding': {'glob': 'assembly.gfa'}, 'doc': 'Assembly graph\\n'}, {'id': 'assembly', 'type': 'File', 'outputBinding': {'glob': 'assembly.fasta'}, 'doc': 'fasta assembly output sequence\\n(main output)\\n'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['unicycler_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  wrapped for Unicycler.\nan hybrid assembly pipeline for bacterial genomes\nsee  https://github.com/rrwick/Unicycler\noutputs\n  final assembly in FASTA format (major output)\n  final assembly grapth in graph format, visualized using tools such as  \n  Bandage  https://github.com/rrwick/Bandage      \n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/assembly-wf-virus.cwl",
    "sha": "9535d8401797217e2a724b1e82e239539bd69251",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/assembly-wf-virus.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: assembly_wf_virus\nlabel: assembly-wf-virus\n \ndoc:  \"Virus genome assembly with Unicycler and spades, in parallel. visualisation with bandage\"\n\n\ninputs:\n\n##############unicycler\n\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n    doc:  \"Paired and single end data\"\n  \n  \n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n\n\n\n\n##############spades\n\n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n \n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n \n\n\n\n\noutputs:\n\n  - id: out_contigs_spades\n    outputSource:\n      - spades/out_contigs\n    type: 'File'\n\n  - id: out_scaffolds_spades\n    outputSource:\n      - spades/out_scaffolds\n    type: 'File'\n\n  - id: out_contig_stats_spades\n    outputSource:\n      - spades/out_contig_stats\n    type: 'File'\n\n\n  - id: out_scaffold_stats_spades\n    outputSource:\n      - spades/out_scaffold_stats\n    type: 'File'\n\n\n  - id: assembly_graph_spades\n    outputSource:\n      - spades/assembly_graph\n    type: 'File'\n\n  - id: assembly_graph_with_scaffolds_spades\n    outputSource:\n      - spades/assembly_graph_with_scaffolds\n    type: 'File'\n\n  - id: all_log_spades\n    outputSource:\n      - spades/all_log\n    type: 'File[]'\n\n#  - id: all_script\n#    outputSource:\n#      - spades/all_script\n#    type: 'File[]'\n\n  - id: assembly_image_spades\n    outputSource:\n      - bandage_image_spades/image\n\n\n    type: File\n\n  - id: assembly_info_spades\n    outputSource:\n      - bandage_info_spades/assembly_graph_info\n    type: File\n\n\n  - id: assembly_graph_unicycler\n    outputSource:\n      - unicycler/assembly_graph\n    type: File\n \n  - id: assembly_unicycler\n    outputSource:\n      - unicycler/assembly\n    type: File\n \n\n#  - id: exec_script2\n#    outputSource:\n#      - unicycler/exec_script\n#    type: File\n\n\n  - id: assembly_image_unicycler\n    outputSource:\n      - bandage_image_unicycler/image\n    type: File\n\n  - id: assembly_info_unicycler\n    outputSource:\n      - bandage_info_unicycler/assembly_graph_info\n    type: File\n\n\n\n\n\n\n\n\n\n\nsteps:\n\n  - id: unicycler\n    in:\n      - id: fastq1_type\n        source: fastq1_type\n      - id: fastq1\n        source: fastq1\n      - id: fastq2_type\n        source: fastq2_type\n      - id: fastq2\n        source: fastq2\n      - id: mode\n        source: mode\n      - id: fastq_file_type\n        source: fastq_file_type\n\n\n    out:\n#      - id: exec_script\n      - id: assembly_graph\n      - id: assembly\n \n#    run: ../../bio-cwl-tools/unicycler/unicycler.cwl\n    run: ./tool/unicycler.cwl \n\n\n  - id: spades\n    in:\n\n      - id: nanopore_reads\n        source: nanopore_reads\n      - id: pacbio_reads\n        source: pacbio_reads\n      - id: sanger_reads\n        source: sanger_reads\n      - id: libraries_metadata\n        source: libraries_metadata\n      - id: libraries_fwd_rev\n        source: libraries_fwd_rev\n      - id: libraries_mono\n        source: libraries_mono\n      - id: trusted_contigs\n        source: trusted_contigs\n      - id: untrusted_contigs\n        source: untrusted_contigs\n      - id: cov_state\n        source: cov_state\n      - id: cov_cutoff\n        source: cov_cutoff\n      - id: iontorrent\n        source: iontorrent\n      - id: sc\n        source: sc\n      - id: onlyassembler\n        source: onlyassembler\n      - id: careful\n        source: careful\n\n      - id: auto_kmer_choice\n        source: auto_kmer_choice\n\n      - id: kmers\n        source: kmers\n \n    out:\n\n      - id: out_contigs\n      - id: out_scaffolds\n\n      - id: out_contig_stats\n      - id: out_scaffold_stats\n\n      - id: assembly_graph\n      - id: assembly_graph_with_scaffolds\n\n      - id: all_log\n#      - id: all_script\n\n#    run: ../../bio-cwl-tools/spades/spades.cwl\n    run: ./tool/spades.cwl \n \n  - id: bandage_image_unicycler\n    in:\n      - id: graph\n        source: unicycler/assembly_graph\n    out:\n      - id: image\n#    run: ../../bio-cwl-tools/bandage/bandage-image.cwl\n    run: ./tool/bandage-image.cwl\n \n  - id: bandage_info_unicycler\n    in:\n      - id: graph\n        source: unicycler/assembly_graph\n    out:\n      - id: assembly_graph_info\n#    run: ../../bio-cwl-tools/bandage/bandage-info.cwl\n    run: ./tool/bandage-info.cwl \n  - id: bandage_image_spades\n    in:\n      - id: graph\n        source: spades/assembly_graph\n    out:\n      - id: image\n#    run: ../../bio-cwl-tools/bandage/bandage-image.cwl\n    run: ./tool/bandage-image.cwl \n  - id: bandage_info_spades\n    in:\n      - id: graph\n        source: spades/assembly_graph\n    out:\n      - id: assembly_graph_info\n#    run: ../../bio-cwl-tools/bandage/bandage-info.cwl\n    run: ./tool/bandage-info.cwl\n\n\n    \nrequirements: []\n\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "assembly_wf_virus",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}, {'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contigs_spades', 'outputSource': ['spades/out_contigs'], 'type': 'File'}, {'id': 'out_scaffolds_spades', 'outputSource': ['spades/out_scaffolds'], 'type': 'File'}, {'id': 'out_contig_stats_spades', 'outputSource': ['spades/out_contig_stats'], 'type': 'File'}, {'id': 'out_scaffold_stats_spades', 'outputSource': ['spades/out_scaffold_stats'], 'type': 'File'}, {'id': 'assembly_graph_spades', 'outputSource': ['spades/assembly_graph'], 'type': 'File'}, {'id': 'assembly_graph_with_scaffolds_spades', 'outputSource': ['spades/assembly_graph_with_scaffolds'], 'type': 'File'}, {'id': 'all_log_spades', 'outputSource': ['spades/all_log'], 'type': 'File[]'}, {'id': 'assembly_image_spades', 'outputSource': ['bandage_image_spades/image'], 'type': 'File'}, {'id': 'assembly_info_spades', 'outputSource': ['bandage_info_spades/assembly_graph_info'], 'type': 'File'}, {'id': 'assembly_graph_unicycler', 'outputSource': ['unicycler/assembly_graph'], 'type': 'File'}, {'id': 'assembly_unicycler', 'outputSource': ['unicycler/assembly'], 'type': 'File'}, {'id': 'assembly_image_unicycler', 'outputSource': ['bandage_image_unicycler/image'], 'type': 'File'}, {'id': 'assembly_info_unicycler', 'outputSource': ['bandage_info_unicycler/assembly_graph_info'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Virus genome assembly with Unicycler and spades, in parallel. visualisation with bandage",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "assembly-wf-virus",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/workflow/tool/bandage-image.cwl",
    "sha": "438657f5a59b4e1df5551b01233099cfc61fb673",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/bandage-image.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nid: bandage-image\ninputs:\n\n  - id: graph\n    type: File\n    doc: |\n        Graphical Fragment Assembly\n        Supports multiple assembly graph formats: \n        LastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\n \n\n  - id: format\n    type:  string\n    default: jpg\n    doc: |\n        Produce jpg, png or svg file\n\n\n  - id: height\n    type:  int\n    default: 1000\n    doc: |\n        Image height.If only height or width is set, \n        the other will be determined automatically.\n        If both are set, the image will be exactly that size.\n\n\n  - id: width\n    type:  int?\n    doc: |\n        Image width. If only height or width is set, the other will be determined automatically.\n        If both are set, the image will be exactly that size.\n\n\n  - id: node_name\n    type:  boolean\n    default: true\n    doc: |\n        If true, define Node labels as name \n\n  - id: node_length\n    type:  boolean\n    default: true\n    doc: |\n        If true, define Node labels as length \n\n\noutputs:\n\n\n# - id: all_script\n#   type:\n#      - type: array\n#        items: File\n#   outputBinding:\n#      glob: \"*.sh\"  \n#   doc: \"generated script to run bandage. for learning purpose\" \n\n\n - id: image\n   type: File\n   outputBinding:\n      glob: \"*.$(inputs.format)\"\n   doc: \"Assembly Graph Image\"\n\n\n\n\nbaseCommand: bash\n\narguments: [bandage_image_launch.sh]\n\nhints:\n  DockerRequirement:\n    dockerPull: \"fjrmore/bandage\" \n\n\nrequirements:\n  - class:  InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: bandage_image_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               # Bandage image wrapper  \n               export QT_QPA_PLATFORM=minimal\n               TMPDIR=$PWD\"/tmp_runtime-bandage\"\n               mkdir -p $TMPDIR\n               export XDG_RUNTIME_DIR=$TMPDIR\n               GRAPH=\"$(inputs.graph.path)\"\n               IMAGE=\"$(inputs.graph.nameroot).$(inputs.format)\"\n               Bandage image $GRAPH $IMAGE  \\\\\n               ${\n                var opt=\"\"\n                if(inputs.height!=null){ \n                 opt+=\" --height \"+inputs.height+ \" \"\n                }\n                if(inputs.width!=null){ \n                 opt+=\" --width \"+inputs.width +\" \"\n                }\n                if(inputs.node_length==true){ \n                 opt+=\" --names \"\n                }\n                if(inputs.node_length==true){ \n                 opt+=\" --lengths \"\n                }\n                return opt\n               }  \n\n\ndoc: |\n  CWL  tool for Bandage-info.\n  an hybrid assembly pipeline for bacterial genomes\n  *Bandage Overview**\n  Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \n  such as Velvet, SPAdes,   MEGAHIT and others.\n  De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \n  which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \n  Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \n  with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \n  By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \n  that are not possible by looking at contigs alone. \n  Bandage works with Graphical Fragment Assembly (GFA) files. \n  For more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "bandage-image",
    "cwl_inputs": "[{'id': 'graph', 'type': 'File', 'doc': 'Graphical Fragment Assembly\\nSupports multiple assembly graph formats: \\nLastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\\n'}, {'id': 'format', 'type': 'string', 'default': 'jpg', 'doc': 'Produce jpg, png or svg file\\n'}, {'id': 'height', 'type': 'int', 'default': 1000, 'doc': 'Image height.If only height or width is set, \\nthe other will be determined automatically.\\nIf both are set, the image will be exactly that size.\\n'}, {'id': 'width', 'type': 'int?', 'doc': 'Image width. If only height or width is set, the other will be determined automatically.\\nIf both are set, the image will be exactly that size.\\n'}, {'id': 'node_name', 'type': 'boolean', 'default': True, 'doc': 'If true, define Node labels as name \\n'}, {'id': 'node_length', 'type': 'boolean', 'default': True, 'doc': 'If true, define Node labels as length \\n'}]",
    "cwl_outputs": "[{'id': 'image', 'type': 'File', 'outputBinding': {'glob': '*.$(inputs.format)'}, 'doc': 'Assembly Graph Image'}]",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'fjrmore/bandage'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['bandage_image_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  tool for Bandage-info.\nan hybrid assembly pipeline for bacterial genomes\n*Bandage Overview**\nBandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \nsuch as Velvet, SPAdes,   MEGAHIT and others.\nDe novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \nwhich were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \nNodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \nwith the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \nBy displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \nthat are not possible by looking at contigs alone. \nBandage works with Graphical Fragment Assembly (GFA) files. \nFor more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/bandage-info.cwl",
    "sha": "747073c5710648c8f2d4636df74c0cd004c42dc9",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/bandage-info.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nid: bandage-info\ninputs:\n\n  - id: graph\n    type:  File\n    doc: |\n        Graphical Fragment Assembly.\n        Supports multiple\n        assembly graph formats: \n        LastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.    \n\n\n  - id: tsv\n    type:  boolean\n    default: false\n    doc: |\n        If true, output the information in a single tab-delimited line \n        starting with the graph file\n\n\n\n\n\noutputs:\n\n# - id: all_script\n#   type:\n#      - type: array\n#        items: File\n#   outputBinding:\n#      glob: \"*.sh\"  \n#   doc: \"generated script to run bandage. for learning purpose\" \n\n - id: assembly_graph_info\n   type: File\n   outputBinding:\n      glob: \"assembly_graph_info.txt\"\n   doc: \"Assembly Graph Information\"\n\n\n\n\nbaseCommand: bash\n\narguments: [bandage_info_launch.sh]\n\nhints:\n  DockerRequirement:\n    dockerPull: \"fjrmore/bandage\" \n\n\nrequirements:\n  - class:  InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: bandage_info_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               # Bandage info wrapper  \n               export QT_QPA_PLATFORM=minimal\n               TMPDIR=$PWD\"/tmp_runtime-bandage\"\n               mkdir -p $TMPDIR\n               export XDG_RUNTIME_DIR=$TMPDIR\n               Bandage info '$(inputs.graph.path)' \\\\\n               ${\n                var opt=\"\"\n                if(inputs.tsv==true){ \n                 opt+=\" --tsv \"\n                }\n                return opt\n               } \\\\\n                > assembly_graph_info.txt\n\n\ndoc: |\n  CWL  tool for Bandage-info.\n  an hybrid assembly pipeline for bacterial genomes\n  *Bandage Overview**\n  Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \n  such as Velvet, SPAdes,   MEGAHIT and others.\n  De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \n  which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \n  Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \n  with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \n  By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \n  that are not possible by looking at contigs alone. \n  Bandage works with Graphical Fragment Assembly (GFA) files. \n  For more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "bandage-info",
    "cwl_inputs": "[{'id': 'graph', 'type': 'File', 'doc': 'Graphical Fragment Assembly.\\nSupports multiple\\nassembly graph formats: \\nLastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.    \\n'}, {'id': 'tsv', 'type': 'boolean', 'default': False, 'doc': 'If true, output the information in a single tab-delimited line \\nstarting with the graph file\\n'}]",
    "cwl_outputs": "[{'id': 'assembly_graph_info', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph_info.txt'}, 'doc': 'Assembly Graph Information'}]",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'fjrmore/bandage'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['bandage_info_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  tool for Bandage-info.\nan hybrid assembly pipeline for bacterial genomes\n*Bandage Overview**\nBandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \nsuch as Velvet, SPAdes,   MEGAHIT and others.\nDe novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \nwhich were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \nNodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \nwith the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \nBy displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \nthat are not possible by looking at contigs alone. \nBandage works with Graphical Fragment Assembly (GFA) files. \nFor more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/spades.cwl",
    "sha": "b0c592181bc514fd900beb82f0f9c63eb88e6a7d",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/spades.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand:\n  - bash\n\ninputs:\n  libraries_metadata:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             orientation: string?\n             lib_type: string? \n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n  libraries_fwd_rev:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             fwd_reads: File?\n             rev_reads: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n  libraries_mono:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             file_type: string?\n             reads: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n  pacbio_reads:\n    type: File[]?\n  nanopore_reads:\n    type: File[]?\n  sanger_reads:\n    type: File[]?\n  trusted_contigs:\n    type: File[]?\n  untrusted_contigs:\n    type: File[]?\n  auto_kmer_choice:\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n  kmers:\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n  cov_state:\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n  cov_cutoff:\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n  iontorrent:\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n  sc:\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n  onlyassembler:\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n  careful:\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\noutputs:\n  out_contig_stats:\n    type: File\n    outputBinding:\n      glob: out_contig_stats.*\n    doc: \"contig stats, default column_names: name,length,coverage\"\n  out_scaffold_stats:\n    type: File\n    outputBinding:\n      glob: out_scaffold_stats.*\n    doc: \"scaffold stats, default column_names: name,length,coverage\"\n\n  out_contigs:\n    type: File\n    outputBinding:\n      glob: contigs.fasta\n    doc: \"contigs (fasta sequence)\"\n\n  out_scaffolds:\n    type: File\n    outputBinding:\n      glob: scaffolds.fasta\n    doc: \"scaffolds (fasta sequence)\"\n#  - id: all_script\n#    type:\n#      - type: array\n#        items: File\n#    outputBinding:\n#      glob: \"*.sh\"  \n#    doc: \"generated script to run spades. for learning purpose\" \n  all_log:\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.log\"  \n    doc: \"spades output log and warnings\" \n#  - id: out_log\n#    type: File\n#    outputBinding:\n#      glob: spades.log\n#    doc: \"spades output log\"\n  assembly_graph:\n    type: File\n    outputBinding:\n      glob: assembly_graph.fastg\n    doc: \"assembly graph\" \n  assembly_graph_with_scaffolds:\n    type: File\n    outputBinding:\n      glob: assembly_graph_with_scaffolds.gfa\n    doc: \"assembly graph with scaffolds\" \n      \narguments:\n  - spades_wrapper.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n####################\n      - entryname: write_tsv.py\n        entry: |\n               #######input file here\n               #!/usr/bin/env python\n               import sys,re\n               search_str = r'^>(NODE|\\S+)_(\\d+)(?:_|\\s)length_(\\d+)_cov_(\\d+\\.*\\d*).*\\$'\n               replace_str = r'\\1_\\2\\t\\3\\t\\4'\n               cmd = re.compile(search_str)\n               sys.stdout.write('#name\\tlength\\tcoverage\\n')\n               for i,line in enumerate(sys.stdin):\n                  if cmd.match(line):\n                     sys.stdout.write(cmd.sub(replace_str,line))\n\n####################\n      - entryname: spades_wrapper.sh\n        entry: |\n               ####################spades launcher\n               #!/bin/bash\n               ## An example command looks like:\n               ## spades.py -k 21,33,55,77,99,127 --careful -1 Y.fastq.gz -2 X.fastq.gz -t 24 -o output \n               read -d '' MEMORY_GB << EOF\n               ${ \n                //compute memory limits\n                var mem=\"250\"\n                if(runtime.ram){\n                  var bt=runtime.ram * 1048576 //mebibytes to bytes               \n                  bt=bt*0.000000001 //bytes to Gigabytes \n                  mem=parseInt(bt)\n                }\n                return \"-\"+mem\n               }\n               EOF\n               #echo \"MEMORY_GB limit: \\$MEMORY_GB\"\n               read -d '' CORES << EOF\n               ${ \n                //compute core / slot\n                var cores=\"16\" \n                if(runtime.cores){\n                  cores=runtime.cores\n                }\n                return  cores\n               }\n               EOF\n               #echo \"CORES : \\$CORES\"\n               read -d '' SPADES_OPT << EOF\n               ${   \n                 var opt=\"\"\n                   if (inputs.sc==true){\n                    opt+=\" --sc \"\n                   }\n                   if (inputs.onlyassembler==true){\n                    opt+=\" --only-assembler \"\n                   }\n                   if (inputs.careful==true){\n                    opt+=\" --careful \"\n                   }\n                 return opt  \n               }\n               EOF\n\n\n               read -d '' CMD_BASE << EOF\n               spades.py -o . --disable-gzip-output  \n                 \\$SPADES_OPT \n                -t \\$CORES -m \\$MEMORY_GB\n               ${   \n                 var opt=\"\"\n                   if (inputs.auto_kmer_choice==false){\n                    opt+=\" -k \"+inputs.kmers \n                   }\n                 return opt  \n               }\n               ${\n                 var opt=\"\"\n                 if (inputs.cov_state==null || inputs.cov_state == \"auto\"){\n                      opt+=\" --cov-cutoff 'auto' \"\n                  }\n                 else if (inputs.cov_state == \"value\"){\n                      opt+=\" --cov-cutoff '\"+inputs.cov_cutoff+\"' \"\n                  }\n                 if (inputs.iontorrent==true ){\n                      opt+=\" --iontorrent \"\n                 } \n                 return opt  \n               }\n               EOF\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' CMD_READ1 << EOF\n               ${\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n                      if (lmeta.lib_type !=null && lmeta.lib_type == \"paired_end\"){\n                           prefix = 'pe'\n                       } \n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"mate_paired\"){\n                           prefix = 'mp'\n                       }\n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"nxmate_paired\"){\n                           prefix = 'nxmate'\n                       }                       \n                      else {\n                           prefix = 'hqmp'\n                       }\n                      var idx=lmeta.lib_index\n                      lib_prefix[idx]=prefix\n                      opt+=\" --\"+prefix+idx+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n\n               #########################>DEBUG\n\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' ZZDEBUG << EOF\n               ${\n               //var opt=\"inputs.libraries_metadata.length:\"+inputs.libraries_metadata.length+\" \"              \n               //var str = JSON.stringify(inputs.libraries_metadata)\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   opt+=\" not null \"\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n \n                      opt+=\" !!-AA-\"+lmeta.lib_index+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n               #########################<DEBUG\n\n\n\n\n\n\n\n\n\n\n               read -d '' CMD_READ2 << EOF\n               ${\n                 var opt=\"\"\n                 if (inputs.pacbio_reads!=null){\n                   for(var i=0; i<inputs.pacbio_reads.length;i++){\n                      var read=inputs.pacbio_reads[i]\n                      opt+=\" --pacbio fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.nanopore_reads!=null){\n                   for(var i=0; i<inputs.nanopore_reads.length;i++){\n                      var read=inputs.nanopore_reads[i]\n                      opt+=\" --nanopore fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.sanger_reads!=null){\n                   for(var i=0; i<inputs.sanger_reads.length;i++){\n                      var read=inputs.sanger_reads[i]\n                      opt+=\" --sanger fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.trusted_contigs!=null){\n                   for(var i=0; i<inputs.trusted_contigs.length;i++){\n                      var read=inputs.trusted_contigs[i]\n                      opt+=\" --trusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.untrusted_contigs!=null){\n                   for(var i=0; i<inputs.untrusted_contigs.length;i++){\n                      var read=inputs.untrusted_contigs[i]\n                      opt+=\" --untrusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 return opt  \n               }\n               EOF\n               ##########################################\n               read -d '' CMD_POST << EOF\n                 && python write_tsv.py < contigs.fasta > out_contig_stats.tab\n                 && python write_tsv.py < scaffolds.fasta > out_scaffold_stats.tab\n               EOF\n               ##########################################   \n               # echo \"CMD_BASE : \\$CMD_BASE\"  > zz.txt   \\\\\n               #        && echo \"CMD_READ1 : \\$CMD_READ1\"  >> zz.txt   \\\\\n               #        && echo \"CMD_READ2 : \\$CMD_READ2\"  >> zz.txt   \\\\\n               #        && echo \"CMD_POST : \\$CMD_POST\"   >> zz.txt\n               COMMAND=\"\\$CMD_BASE \\$CMD_READ1 \\$CMD_READ2 \\$CMD_POST\"\n               COMMAND=\\$(echo $COMMAND|tr -d '\\\\n')\n               echo \"\\$COMMAND\"  > run_spades.sh\n               bash  ./run_spades.sh\n\n \n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  example workflow for js wrapper generation\n  see  https://github.com/rrwick/Unicycler\n  outputs : all genretated files\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'libraries_metadata': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'orientation': 'string?', 'lib_type': 'string?'}}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, 'libraries_fwd_rev': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'fwd_reads': 'File?', 'rev_reads': 'File?'}}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, 'libraries_mono': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'file_type': 'string?', 'reads': 'File?'}}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, 'pacbio_reads': {'type': 'File[]?'}, 'nanopore_reads': {'type': 'File[]?'}, 'sanger_reads': {'type': 'File[]?'}, 'trusted_contigs': {'type': 'File[]?'}, 'untrusted_contigs': {'type': 'File[]?'}, 'auto_kmer_choice': {'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, 'kmers': {'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, 'cov_state': {'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, 'cov_cutoff': {'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, 'iontorrent': {'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, 'sc': {'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, 'onlyassembler': {'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, 'careful': {'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}}",
    "cwl_outputs": "{'out_contig_stats': {'type': 'File', 'outputBinding': {'glob': 'out_contig_stats.*'}, 'doc': 'contig stats, default column_names: name,length,coverage'}, 'out_scaffold_stats': {'type': 'File', 'outputBinding': {'glob': 'out_scaffold_stats.*'}, 'doc': 'scaffold stats, default column_names: name,length,coverage'}, 'out_contigs': {'type': 'File', 'outputBinding': {'glob': 'contigs.fasta'}, 'doc': 'contigs (fasta sequence)'}, 'out_scaffolds': {'type': 'File', 'outputBinding': {'glob': 'scaffolds.fasta'}, 'doc': 'scaffolds (fasta sequence)'}, 'all_log': {'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.log'}, 'doc': 'spades output log and warnings'}, 'assembly_graph': {'type': 'File', 'outputBinding': {'glob': 'assembly_graph.fastg'}, 'doc': 'assembly graph'}, 'assembly_graph_with_scaffolds': {'type': 'File', 'outputBinding': {'glob': 'assembly_graph_with_scaffolds.gfa'}, 'doc': 'assembly graph with scaffolds'}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['spades_wrapper.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "example workflow for js wrapper generation\nsee  https://github.com/rrwick/Unicycler\noutputs : all genretated files\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/unicycler.cwl",
    "sha": "6a208e40e51c5848cbda6581c448aa7a99fc7c5e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/unicycler.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  CWL  wrapped for Unicycler.\n  an hybrid assembly pipeline for bacterial genomes\n  see  https://github.com/rrwick/Unicycler\n  outputs\n    final assembly in FASTA format (major output)\n    final assembly grapth in graph format, visualized using tools such as\n    Bandage  https://github.com/rrwick/Bandage\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: unicycler_launch.sh\n        entry: |\n          #!/bin/bash\n          ###########################\n          #      unicycler launcher\n          ###########################\n\n          ##preparing input files\n          #check permission / chmod  is issues\n          ${\n            var fl=\"\"\n            var lncmd=\"\"\n            var fq1=\"\"\n            var fq2=\"\"\n            var lr=\"\"\n\n          //###################paired case\n                if (inputs.fastq_file_type ==\"paired\"  ){\n                 if( inputs.fastq1_type=='fastqsanger' ){\n                     fq1 = \"fq1.fastq\"\n                 }\n                 else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                      fq1 = \"fq1.fastq.gz\"\n                 }\n                 if( inputs.fastq2_type=='fastqsanger' ){\n                     fq2 = \"fq2.fastq\"\n                  }\n                  else if( inputs.fastq2_type=='fastqsanger.gz' ){\n                      fq2 = \"fq2.fastq.gz\"\n                   }\n                   lncmd+=\"fq1='\"+fq1+\"'\"\n                   lncmd+=\" && \"\n                   lncmd+=\"fq2='\"+fq2+\"'\"\n                   lncmd+=\" && \"\n                   lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                   lncmd+=\" && \"\n                   lncmd+=\" ln -s '\"+inputs.fastq2.path+\"' $fq2  \"\n\n                }\n           //###################single case\n \n           if (inputs.fastq_file_type ==\"single\"  ){\n             if( inputs.fastq1_type=='fastqsanger' ){\n                 fq1 = \"fq1.fastq\"\n             }\n             else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                  fq1 = \"fq1.fastq.gz\"\n             }\n             lncmd+=\"fq1='\"+fq1+\"'\"\n             lncmd+=\" && \"\n             lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n            }\n            //####### long reads\n             if (  inputs.sequence_long !== null) {\n                 if (inputs.sequence_long_type=='fastqsanger'){\n                          lr = \"lr.fastq\"\n                 }\n                 else if (inputs.sequence_long_type=='fastqsanger.gz') {\n                          lr = \"lr.fastq.gz\"\n                 }\n                 else if (inputs.sequence_longg_type=='fasta') {\n                          lr = \"lr.fasta\"\n                 }\n                 lncmd+=\"lr='\"+lr+\"'\"\n                 lncmd+=\" && \"\n                 lncmd+= \" ln -s '\"+inputs.sequence_long.path+\"' '$lr' \"\n             }\n             return lncmd\n          }\n\n          ##general options\n\n          read -d '' GENERALOPT << EOF\n          ${\n           var opt=\"\"\n           //## General Unicycler Options section\n           opt+=\" --mode \"+inputs.mode+\" \"\n           opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\n           opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\n\n           if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\n\n           //## Spades Options section\n           if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\n           opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\n           opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\n           if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\n\n           opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\n           opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\n           if (inputs.spades_largest_component){opt+=\" --largest_component \"}\n           //## Rotation Options section\n           if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\n           if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\n           opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\n           opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\n           return opt\n           }\n          EOF\n\n          ##additionnal option\n\n          read -d '' ADDOPT << EOF\n          ${\n\n           var opt=\"\"\n\n           if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\n           if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\n           //## Long Read Alignment Options\n           if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\n           opt+=\" --scores \"+inputs.lr_align_scores+\" \"\n           if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\n            return ''+ opt + ''\n          }\n          EOF\n\n          ## Get location for pilon jar file\n\n          ${\n            var cmd=\"\"\n            cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\n            return cmd\n          }\n\n          ## Build Unicycler command\n          ${\n\n            var cmd_base=\"\"\n            var opt=\"\"\n\n            cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\n            cmd_base+=\" -o ./  \"\n            cmd_base+=\" --verbosity 3  \"\n            cmd_base+=\" --pilon_path \\$PILONJAR  \"\n\n           if ( inputs.fastq_file_type == \"paired\"){\n                  opt+=\" -1 $fq1 -2 $fq2  \"\n           }\n           else if ( inputs.fastq_file_type == \"paired_collection\"){\n                  opt+=\" -1 $fq1 -2 $fq2  \"\n           }\n           else if ( inputs.fastq_file_type == \"single\"){\n              opt+=\" -s $fq1 \"\n           }\n           if (  inputs.sequence_long !== null) {\n             opt+=\" -l $lr \"\n           }\n\n           //##  Unicycler command\n           var cmdl=cmd_base+\" \"+opt+\" \\$GENERALOPT \\$ADDOPT \"\n\n           return cmdl\n\n           }\ninputs:\n  fastq_file_type:\n    doc: Paired and single end data\n    type:\n      type: enum\n      symbols:\n      - paired\n      - single\n  fastq1_type:\n    doc: Type of the First set of reads. Only when fastq_file_type = single  or  paired\n    type:\n      type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n    default: fastqsanger\n  fastq1:\n    doc: |-\n      First set of reads with forward reads. Only when fastq_file_type = single or paired\n    type: File\n  fastq2_type:\n    doc: Type of the Second set of reads. Only when fastq_file_type=paired\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n    default: 'null'\n  fastq2:\n    doc: Second set of reads with reverse reads. Only when fastq_file_type=paired\n    type: File?\n  sequence_long_type:\n    doc: long reads file type. If there are no long reads, leave this empty\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n      - fasta\n  sequence_long:\n    doc: long reads. If there are no long reads, leave this empty\n    type: File?\n  compute_slots:\n    type: int?\n    default: 4\n  mode:\n    doc: |\n      Bridging mode, values:\n      conservative (smaller contigs, lower misassembly)\n      normal (moderate contig size and misassembly rate)\n      bold  (longest contigs, higher misassembly rate)\n    type:\n      type: enum\n      symbols:\n      - conservative\n      - normal\n      - bold\n  min_fasta_length:\n    doc: Exclude contigs from the FASTA file which are shorter than this length (bp)\n    type: int?\n    default: 100\n  linear_seqs:\n    doc: The expected number of linear (i.e. non-circular) sequences in the assembly\n    type: int?\n    default: 0\n  min_anchor_seg_len:\n    doc: Unicycler will not use segments shorter than this as scaffolding anchors\n    type: int?\n    default: 0\n  spades_no_correct:\n    doc: |\n      Unicycler uses SPAdes to construct assembly graphs.\n      You can modify some of the SPAdes settings here.\n      Use this ONLY if you know what you are doing!\n      This option turns off SPAdes error correction.\n      Generally it is highly recommended to use correction.\n    type: boolean?\n    default: false\n  spades_min_kmer_frac:\n    doc: |\n      Lowest k-mer size for SPAdes assembly,\n      expressed as a fraction of the read length.\n      min 0, max 1\n    type: float?\n    default: 0.2\n  spades_max_kmer_frac:\n    doc: |\n      Highest k-mer size for SPAdes assembly,\n      expressed as a fraction of the read length.\n      min 0, max 1\n    type: float?\n    default: 0.95\n  spades_kmers:\n    doc: |\n      Exact k-mers size to use for SPAdes assembly, comma-separated\"\n      Kmers must be comma-separated odd integers (no repitition)\n      without space in the range of 11 to 127 (inclusive)\n    type: string?\n    default: 11,127\n  spades_kmer_count:\n    doc: Number of k-mer steps to use in SPAdes assembly, min 0\n    type: int?\n    default: 10\n  spades_depth_filter:\n    doc: |\n      Filter out contigs lower than this fraction\n      of the chromosomal depth.\n      It is done if does not result in graph dead ends\n      min 0, max 1\n    type: float?\n    default: 0.25\n  spades_largest_component:\n    doc: Only keep the largest connected component of the assembly graph if true\n    type: boolean?\n    default: false\n  rotation_no_rotate:\n    doc: |\n      These options control the rotation of completed circular sequence\n      near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\n      Do not rotate completed replicons to start at a standard gene.\n      Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\n      If one is found, the sequence is rotated and/or flipped so that it begins with that gene\n      encoded on the forward strand. This provides consistently oriented assemblies and reduces\n      the risk that a gene will be split across the start and end of the sequence.\n    type: boolean?\n    default: false\n  rotation_start_genes:\n    doc: FASTA file of genes for start point of rotated replicons\n    type: File?\n  rotation_start_gene_id:\n    doc: |-\n      The minimum required BLAST percent identity for a start gene search. max 100, min 0\n    type: float?\n    default: 90.0\n  rotation_start_gene_cov:\n    doc: |-\n      The minimum required BLAST percent coverage for a start gene search. min 0, max 100\n    type: float?\n    default: 95.0\n  pilon_no_pilon:\n    doc: Unicycler uses Pilon tool for polishing final assembly. Do not use if true\n    type: boolean?\n    default: false\n  graph_clean_min_component_size:\n    doc: Contigs shorter than this value (bp) will not be polished using Pilon; min 0\n    type: int?\n    default: 1000\n  graph_clean_min_dead_end_size:\n    doc: |\n      These options control the removal of small leftover sequences after bridging is complete.\n      Unbridged graph components smaller than this size will be removed from the final graph,\n      min 0\n    type: int?\n    default: 1000\n  lr_align_contamination:\n    doc: |\n      FASTA file of known contamination in long reads,\n      e.g. lambda, phiXm or puc18 spike-ins.\n    type: File?\n  lr_align_scores:\n    doc: |\n      Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\n    type: string?\n    default: 3,-6,-5,-2\n  lr_align_low_score:\n    doc: |\n      Score threshold - alignments below this are considered poor,\n      default = set automatically\n    type: int?\noutputs:\n  assembly_graph:\n    type: File\n    outputBinding:\n      glob: assembly.gfa\n  assembly:\n    doc: |\n      fasta assembly output sequence\n      (main output)\n    type: File\n    outputBinding:\n      glob: assembly.fasta\n  # exec_script:\n  #   doc: |\n  #     Launching script for learning purpose\n  #   type: File\n  #   outputBinding:\n  #     glob: '*.sh'\n\nbaseCommand: bash\n\narguments:\n- unicycler_launch.sh\n\nhints:\n  DockerRequirement:\n    dockerPull: biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fastq_file_type': {'doc': 'Paired and single end data', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}}, 'fastq1_type': {'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'default': 'fastqsanger'}, 'fastq1': {'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired', 'type': 'File'}, 'fastq2_type': {'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null'}, 'fastq2': {'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired', 'type': 'File?'}, 'sequence_long_type': {'doc': 'long reads file type. If there are no long reads, leave this empty', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz', 'fasta']}]}, 'sequence_long': {'doc': 'long reads. If there are no long reads, leave this empty', 'type': 'File?'}, 'compute_slots': {'type': 'int?', 'default': 4}, 'mode': {'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}}, 'min_fasta_length': {'doc': 'Exclude contigs from the FASTA file which are shorter than this length (bp)', 'type': 'int?', 'default': 100}, 'linear_seqs': {'doc': 'The expected number of linear (i.e. non-circular) sequences in the assembly', 'type': 'int?', 'default': 0}, 'min_anchor_seg_len': {'doc': 'Unicycler will not use segments shorter than this as scaffolding anchors', 'type': 'int?', 'default': 0}, 'spades_no_correct': {'doc': 'Unicycler uses SPAdes to construct assembly graphs.\\nYou can modify some of the SPAdes settings here.\\nUse this ONLY if you know what you are doing!\\nThis option turns off SPAdes error correction.\\nGenerally it is highly recommended to use correction.\\n', 'type': 'boolean?', 'default': False}, 'spades_min_kmer_frac': {'doc': 'Lowest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length.\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.2}, 'spades_max_kmer_frac': {'doc': 'Highest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length.\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.95}, 'spades_kmers': {'doc': 'Exact k-mers size to use for SPAdes assembly, comma-separated\"\\nKmers must be comma-separated odd integers (no repitition)\\nwithout space in the range of 11 to 127 (inclusive)\\n', 'type': 'string?', 'default': '11,127'}, 'spades_kmer_count': {'doc': 'Number of k-mer steps to use in SPAdes assembly, min 0', 'type': 'int?', 'default': 10}, 'spades_depth_filter': {'doc': 'Filter out contigs lower than this fraction\\nof the chromosomal depth.\\nIt is done if does not result in graph dead ends\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.25}, 'spades_largest_component': {'doc': 'Only keep the largest connected component of the assembly graph if true', 'type': 'boolean?', 'default': False}, 'rotation_no_rotate': {'doc': 'These options control the rotation of completed circular sequence\\nnear the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\\nDo not rotate completed replicons to start at a standard gene.\\nUnicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\\nIf one is found, the sequence is rotated and/or flipped so that it begins with that gene\\nencoded on the forward strand. This provides consistently oriented assemblies and reduces\\nthe risk that a gene will be split across the start and end of the sequence.\\n', 'type': 'boolean?', 'default': False}, 'rotation_start_genes': {'doc': 'FASTA file of genes for start point of rotated replicons', 'type': 'File?'}, 'rotation_start_gene_id': {'doc': 'The minimum required BLAST percent identity for a start gene search. max 100, min 0', 'type': 'float?', 'default': 90.0}, 'rotation_start_gene_cov': {'doc': 'The minimum required BLAST percent coverage for a start gene search. min 0, max 100', 'type': 'float?', 'default': 95.0}, 'pilon_no_pilon': {'doc': 'Unicycler uses Pilon tool for polishing final assembly. Do not use if true', 'type': 'boolean?', 'default': False}, 'graph_clean_min_component_size': {'doc': 'Contigs shorter than this value (bp) will not be polished using Pilon; min 0', 'type': 'int?', 'default': 1000}, 'graph_clean_min_dead_end_size': {'doc': 'These options control the removal of small leftover sequences after bridging is complete.\\nUnbridged graph components smaller than this size will be removed from the final graph,\\nmin 0\\n', 'type': 'int?', 'default': 1000}, 'lr_align_contamination': {'doc': 'FASTA file of known contamination in long reads,\\ne.g. lambda, phiXm or puc18 spike-ins.\\n', 'type': 'File?'}, 'lr_align_scores': {'doc': 'Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\\n', 'type': 'string?', 'default': '3,-6,-5,-2'}, 'lr_align_low_score': {'doc': 'Score threshold - alignments below this are considered poor,\\ndefault = set automatically\\n', 'type': 'int?'}}",
    "cwl_outputs": "{'assembly_graph': {'type': 'File', 'outputBinding': {'glob': 'assembly.gfa'}}, 'assembly': {'doc': 'fasta assembly output sequence\\n(main output)\\n', 'type': 'File', 'outputBinding': {'glob': 'assembly.fasta'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['unicycler_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'unicycler_launch.sh', 'entry': '#!/bin/bash\\n###########################\\n#      unicycler launcher\\n###########################\\n\\n##preparing input files\\n#check permission / chmod  is issues\\n${\\n  var fl=\"\"\\n  var lncmd=\"\"\\n  var fq1=\"\"\\n  var fq2=\"\"\\n  var lr=\"\"\\n\\n//###################paired case\\n      if (inputs.fastq_file_type ==\"paired\"  ){\\n       if( inputs.fastq1_type==\\'fastqsanger\\' ){\\n           fq1 = \"fq1.fastq\"\\n       }\\n       else if( inputs.fastq1_type==\\'fastqsanger.gz\\' ){\\n            fq1 = \"fq1.fastq.gz\"\\n       }\\n       if( inputs.fastq2_type==\\'fastqsanger\\' ){\\n           fq2 = \"fq2.fastq\"\\n        }\\n        else if( inputs.fastq2_type==\\'fastqsanger.gz\\' ){\\n            fq2 = \"fq2.fastq.gz\"\\n         }\\n         lncmd+=\"fq1=\\'\"+fq1+\"\\'\"\\n         lncmd+=\" && \"\\n         lncmd+=\"fq2=\\'\"+fq2+\"\\'\"\\n         lncmd+=\" && \"\\n         lncmd+=\" ln -s \\'\"+inputs.fastq1.path+\"\\' $fq1 \"\\n         lncmd+=\" && \"\\n         lncmd+=\" ln -s \\'\"+inputs.fastq2.path+\"\\' $fq2  \"\\n\\n      }\\n //###################single case\\n\\n if (inputs.fastq_file_type ==\"single\"  ){\\n   if( inputs.fastq1_type==\\'fastqsanger\\' ){\\n       fq1 = \"fq1.fastq\"\\n   }\\n   else if( inputs.fastq1_type==\\'fastqsanger.gz\\' ){\\n        fq1 = \"fq1.fastq.gz\"\\n   }\\n   lncmd+=\"fq1=\\'\"+fq1+\"\\'\"\\n   lncmd+=\" && \"\\n   lncmd+=\" ln -s \\'\"+inputs.fastq1.path+\"\\' $fq1 \"\\n  }\\n  //####### long reads\\n   if (  inputs.sequence_long !== null) {\\n       if (inputs.sequence_long_type==\\'fastqsanger\\'){\\n                lr = \"lr.fastq\"\\n       }\\n       else if (inputs.sequence_long_type==\\'fastqsanger.gz\\') {\\n                lr = \"lr.fastq.gz\"\\n       }\\n       else if (inputs.sequence_longg_type==\\'fasta\\') {\\n                lr = \"lr.fasta\"\\n       }\\n       lncmd+=\"lr=\\'\"+lr+\"\\'\"\\n       lncmd+=\" && \"\\n       lncmd+= \" ln -s \\'\"+inputs.sequence_long.path+\"\\' \\'$lr\\' \"\\n   }\\n   return lncmd\\n}\\n\\n##general options\\n\\nread -d \\'\\' GENERALOPT << EOF\\n${\\n var opt=\"\"\\n //## General Unicycler Options section\\n opt+=\" --mode \"+inputs.mode+\" \"\\n opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\\n opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\\n\\n if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\\n\\n //## Spades Options section\\n if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\\n opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\\n opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\\n if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\\n\\n opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\\n opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\\n if (inputs.spades_largest_component){opt+=\" --largest_component \"}\\n //## Rotation Options section\\n if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\\n if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\\n opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\\n opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\\n return opt\\n }\\nEOF\\n\\n##additionnal option\\n\\nread -d \\'\\' ADDOPT << EOF\\n${\\n\\n var opt=\"\"\\n\\n if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\\n if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\\n //## Long Read Alignment Options\\n if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\\n opt+=\" --scores \"+inputs.lr_align_scores+\" \"\\n if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\\n  return \\'\\'+ opt + \\'\\'\\n}\\nEOF\\n\\n## Get location for pilon jar file\\n\\n${\\n  var cmd=\"\"\\n  cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\\n  return cmd\\n}\\n\\n## Build Unicycler command\\n${\\n\\n  var cmd_base=\"\"\\n  var opt=\"\"\\n\\n  cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\\n  cmd_base+=\" -o ./  \"\\n  cmd_base+=\" --verbosity 3  \"\\n  cmd_base+=\" --pilon_path \\\\$PILONJAR  \"\\n\\n if ( inputs.fastq_file_type == \"paired\"){\\n        opt+=\" -1 $fq1 -2 $fq2  \"\\n }\\n else if ( inputs.fastq_file_type == \"paired_collection\"){\\n        opt+=\" -1 $fq1 -2 $fq2  \"\\n }\\n else if ( inputs.fastq_file_type == \"single\"){\\n    opt+=\" -s $fq1 \"\\n }\\n if (  inputs.sequence_long !== null) {\\n   opt+=\" -l $lr \"\\n }\\n\\n //##  Unicycler command\\n var cmdl=cmd_base+\" \"+opt+\" \\\\$GENERALOPT \\\\$ADDOPT \"\\n\\n return cmdl\\n\\n }\\n'}]}}",
    "cwl_doc": "CWL  wrapped for Unicycler.\nan hybrid assembly pipeline for bacterial genomes\nsee  https://github.com/rrwick/Unicycler\noutputs\n  final assembly in FASTA format (major output)\n  final assembly grapth in graph format, visualized using tools such as\n  Bandage  https://github.com/rrwick/Bandage\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "PreProcessing/batch-preprocess-illumina.cwl",
    "sha": "96c719397af7257aaec4c926cf84d09735bec60a",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/batch-preprocess-illumina.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accessions: string[]\n  ref_human_genome: File\n\nsteps:\n  main:\n    scatter: illumina_accession\n    in:\n      illumina_accession: illumina_accessions\n      ref_human_genome: ref_human_genome\n    out:\n      - fastp_html_report\n      - fastp_json_report\n      - multiqc_html\n      - multiqc_zip\n      - original_fastq1\n      - original_fastq2\n      - bam\n    run: ./preprocess-illumina.cwl\n\n  merge_bam:\n    in:\n      output_name:\n        valueFrom: \"merged.bam\"\n      bams: main/bam\n    out:\n      - bam_merged\n    run: ../bio-cwl-tools/samtools/samtools_merge.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: merge_bam/bam_merged\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n\noutputs:\n  original_fastq1:\n    type: File[]\n    outputSource: main/original_fastq1\n  original_fastq2:\n    type: File[]?\n    outputSource: main/original_fastq2\n\n  processed_fastq:\n    type: File\n    outputSource: samtools_fastq/fastq\n\n  fastp_html_reports:\n    type: File[]\n    outputSource: main/fastp_html_report\n  fastp_json_reports:\n    type: File[]\n    outputSource: main/fastp_json_report\n\n  multiqc_htmls:\n    type: File[]\n    outputSource: main/multiqc_html\n  multiqc_zips:\n    type: File[]\n    outputSource: main/multiqc_zip\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accessions': 'string[]', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File[]', 'outputSource': 'main/original_fastq1'}, 'original_fastq2': {'type': 'File[]?', 'outputSource': 'main/original_fastq2'}, 'processed_fastq': {'type': 'File', 'outputSource': 'samtools_fastq/fastq'}, 'fastp_html_reports': {'type': 'File[]', 'outputSource': 'main/fastp_html_report'}, 'fastp_json_reports': {'type': 'File[]', 'outputSource': 'main/fastp_json_report'}, 'multiqc_htmls': {'type': 'File[]', 'outputSource': 'main/multiqc_html'}, 'multiqc_zips': {'type': 'File[]', 'outputSource': 'main/multiqc_zip'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "main": {
        "scatter": "illumina_accession",
        "in": {
          "illumina_accession": "illumina_accessions",
          "ref_human_genome": "ref_human_genome"
        },
        "out": [
          "fastp_html_report",
          "fastp_json_report",
          "multiqc_html",
          "multiqc_zip",
          "original_fastq1",
          "original_fastq2",
          "bam"
        ],
        "run": "./preprocess-illumina.cwl"
      },
      "merge_bam": {
        "in": {
          "output_name": {
            "valueFrom": "merged.bam"
          },
          "bams": "main/bam"
        },
        "out": [
          "bam_merged"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_merge.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "merge_bam/bam_merged"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/batch-preprocess-ont.cwl",
    "sha": "d6ee102a36b9e9aedde744b626ef02501515cebe",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/batch-preprocess-ont.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accessions: string[]\n  ref_human_genome: File\n\nsteps:\n  main:\n    scatter: illumina_accession\n    in:\n      illumina_accession: illumina_accessions\n      ref_human_genome: ref_human_genome\n    out:\n      - fastqc_summary\n      - fastqc_zip\n      - multiqc_html\n      - multiqc_zip\n      - original_fastq1\n      - bam\n    run: ./preprocess-ont.cwl\n\n  merge_bam:\n    in:\n      output_name:\n        valueFrom: \"merged.bam\"\n      bams: main/bam\n    out:\n      - bam_merged\n    run: ../bio-cwl-tools/samtools/samtools_merge.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: merge_bam/bam_merged\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n\noutputs:\n  original_fastq1:\n    type: File[]\n    outputSource: main/original_fastq1\n\n  processed_fastq:\n    type: File\n    outputSource: samtools_fastq/fastq\n\n  fastqc_summary:\n    type: File[]\n    outputSource: main/fastqc_summary\n  fastqc_zip:\n    type: File[]\n    outputSource: main/fastqc_zip\n\n  multiqc_htmls:\n    type: File[]\n    outputSource: main/multiqc_html\n  multiqc_zips:\n    type: File[]\n    outputSource: main/multiqc_zip\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accessions': 'string[]', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File[]', 'outputSource': 'main/original_fastq1'}, 'processed_fastq': {'type': 'File', 'outputSource': 'samtools_fastq/fastq'}, 'fastqc_summary': {'type': 'File[]', 'outputSource': 'main/fastqc_summary'}, 'fastqc_zip': {'type': 'File[]', 'outputSource': 'main/fastqc_zip'}, 'multiqc_htmls': {'type': 'File[]', 'outputSource': 'main/multiqc_html'}, 'multiqc_zips': {'type': 'File[]', 'outputSource': 'main/multiqc_zip'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "main": {
        "scatter": "illumina_accession",
        "in": {
          "illumina_accession": "illumina_accessions",
          "ref_human_genome": "ref_human_genome"
        },
        "out": [
          "fastqc_summary",
          "fastqc_zip",
          "multiqc_html",
          "multiqc_zip",
          "original_fastq1",
          "bam"
        ],
        "run": "./preprocess-ont.cwl"
      },
      "merge_bam": {
        "in": {
          "output_name": {
            "valueFrom": "merged.bam"
          },
          "bams": "main/bam"
        },
        "out": [
          "bam_merged"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_merge.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "merge_bam/bam_merged"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/preprocess-illumina.cwl",
    "sha": "31dc07ff0b6f457bb9d5a725291ea9d2b25b5997",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/preprocess-illumina.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accession: string\n  hg38: File\n\nsteps:\n  unpack_ref_genome:\n    in:\n      file: hg38\n    out:\n      - hg_38_fa\n    run: ./tools/unpack_ref_db.cwl\n\n  fetch_fastqs:\n    in:\n      sra_accession: illumina_accession\n    out:\n      - fastq_file_1\n      - fastq_file_2\n    run: ../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl\n\n  fastp:\n    in:\n      fastq1: fetch_fastqs/fastq_file_1\n      fastq2: fetch_fastqs/fastq_file_2\n    out:\n      - out_fastq1\n      - out_fastq2\n      - html_report\n      - json_report\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  multiqc:\n    in:\n      qc_files_array: fastp/json_report\n    out:\n      - multiqc_zip\n      - multiqc_html\n    run: ../bio-cwl-tools/multiqc/multiqc.cwl\n\n  bwa_mem:\n    in:\n      Index: unpack_ref_genome/hg_38_fa\n      InputFile:\n        source: [fastp/out_fastq1, fastp/out_fastq2]\n        valueFrom: |\n          ${\n            return self.filter(function(x){return x});\n          }\n        linkMerge: merge_flattened\n      Threads:\n        valueFrom: $(1)\n    out:\n      - reads_stdout\n    run: ../bio-cwl-tools/bwa/BWA-Mem.cwl\n\n  samtools_view:\n    in:\n      sam: bwa_mem/reads_stdout\n    out:\n      - bam\n    run: ../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl\n\n  samtools_fastq:\n    in:\n     bam_sorted: samtools_view/bam\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n  rename_multiqc_html:\n    in:\n      srcfile: multiqc/multiqc_html\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_multiqc_zip:\n    in:\n      srcfile: multiqc/multiqc_zip\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastp_html:\n    in:\n      srcfile: fastp/html_report\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastp.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastp_json:\n    in:\n      srcfile: fastp/json_report\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastp.json\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_bam:\n    in:\n      srcfile: samtools_view/bam\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).bam\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\noutputs:\n  original_fastq1:\n    type: File\n    format: edam:format_1930  # FASTQ\n    outputSource: fetch_fastqs/fastq_file_1\n  original_fastq2:\n    type: File?\n    format: edam:format_1930  # FASTQ\n    outputSource: fetch_fastqs/fastq_file_2\n\n  bam:\n    type: File\n    format: edam:format_2572  # BAM\n    outputSource: rename_bam/outfile\n\n  fastp_html_report:\n    type: File\n    format: edam:format_2331  # HTML\n    outputSource: rename_fastp_html/outfile\n  fastp_json_report:\n    type: File\n    format: edam:format_3464  # JSON\n    outputSource: rename_fastp_json/outfile\n\n  multiqc_html:\n    type: File\n    format: edam:format_2331  # HTML\n    outputSource: rename_multiqc_html/outfile\n  multiqc_zip:\n    type: File\n    format: edam:format_3464  # JSON\n    outputSource: rename_multiqc_zip/outfile\n\n  mapped_fastq:\n    type: File\n    format: edam:format_1930  # FASTQ\n    outputSource: samtools_fastq/fastq\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accession': 'string', 'hg38': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File', 'format': 'edam:format_1930', 'outputSource': 'fetch_fastqs/fastq_file_1'}, 'original_fastq2': {'type': 'File?', 'format': 'edam:format_1930', 'outputSource': 'fetch_fastqs/fastq_file_2'}, 'bam': {'type': 'File', 'format': 'edam:format_2572', 'outputSource': 'rename_bam/outfile'}, 'fastp_html_report': {'type': 'File', 'format': 'edam:format_2331', 'outputSource': 'rename_fastp_html/outfile'}, 'fastp_json_report': {'type': 'File', 'format': 'edam:format_3464', 'outputSource': 'rename_fastp_json/outfile'}, 'multiqc_html': {'type': 'File', 'format': 'edam:format_2331', 'outputSource': 'rename_multiqc_html/outfile'}, 'multiqc_zip': {'type': 'File', 'format': 'edam:format_3464', 'outputSource': 'rename_multiqc_zip/outfile'}, 'mapped_fastq': {'type': 'File', 'format': 'edam:format_1930', 'outputSource': 'samtools_fastq/fastq'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "unpack_ref_genome": {
        "in": {
          "file": "hg38"
        },
        "out": [
          "hg_38_fa"
        ],
        "run": "./tools/unpack_ref_db.cwl"
      },
      "fetch_fastqs": {
        "in": {
          "sra_accession": "illumina_accession"
        },
        "out": [
          "fastq_file_1",
          "fastq_file_2"
        ],
        "run": "../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl"
      },
      "fastp": {
        "in": {
          "fastq1": "fetch_fastqs/fastq_file_1",
          "fastq2": "fetch_fastqs/fastq_file_2"
        },
        "out": [
          "out_fastq1",
          "out_fastq2",
          "html_report",
          "json_report"
        ],
        "run": "../bio-cwl-tools/fastp/fastp.cwl"
      },
      "multiqc": {
        "in": {
          "qc_files_array": "fastp/json_report"
        },
        "out": [
          "multiqc_zip",
          "multiqc_html"
        ],
        "run": "../bio-cwl-tools/multiqc/multiqc.cwl"
      },
      "bwa_mem": {
        "in": {
          "Index": "unpack_ref_genome/hg_38_fa",
          "InputFile": {
            "source": [
              "fastp/out_fastq1",
              "fastp/out_fastq2"
            ],
            "valueFrom": "${\n  return self.filter(function(x){return x});\n}\n",
            "linkMerge": "merge_flattened"
          },
          "Threads": {
            "valueFrom": "$(1)"
          }
        },
        "out": [
          "reads_stdout"
        ],
        "run": "../bio-cwl-tools/bwa/BWA-Mem.cwl"
      },
      "samtools_view": {
        "in": {
          "sam": "bwa_mem/reads_stdout"
        },
        "out": [
          "bam"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "samtools_view/bam"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      },
      "rename_multiqc_html": {
        "in": {
          "srcfile": "multiqc/multiqc_html",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_multiqc_zip": {
        "in": {
          "srcfile": "multiqc/multiqc_zip",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastp_html": {
        "in": {
          "srcfile": "fastp/html_report",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastp.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastp_json": {
        "in": {
          "srcfile": "fastp/json_report",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastp.json"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_bam": {
        "in": {
          "srcfile": "samtools_view/bam",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).bam"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/preprocess-ont.cwl",
    "sha": "4c190ef248bf9d4e313f225f3ebf510e7c42e8de",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/preprocess-ont.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accession: string\n  ref_human_genome: File\n\nsteps:\n  fetch_fastqs:\n    in:\n      sra_accession: illumina_accession\n    out:\n      - fastq_file_1\n      - fastq_files\n    run: ../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl\n\n  nanoplot:\n    in:\n      fastq_files:\n        source: fetch_fastqs/fastq_files\n      loglength:\n        valueFrom: $(true)\n      format:\n        valueFrom: \"png\"\n    out:\n      - dynamic_histogram_read_length\n      - histogram_read_length\n      - length_v_qual_scatter_plot_dot\n      - length_v_qual_scatter_plot_kde\n      - log_transformed_histogram_read_length\n      - report\n      - logfile\n      - nanostats\n      - weighted_histogram_read_length\n      - weighted_log_transform_histogram_read_length\n      - yield_by_length_img\n    run: ../bio-cwl-tools/nanoplot/nanoplot.cwl\n\n  fastqc:\n    in:\n      reads_file: fetch_fastqs/fastq_file_1\n      nogroup:\n        valueFrom: $(true)\n      kmers:\n        valueFrom: $(7)\n    out:\n      - zipped_file\n      - summary_file\n      - html_file\n    run: ../bio-cwl-tools/fastqc/fastqc_2.cwl\n\n  multiqc:\n    in:\n      qc_files_array: fastqc/zipped_file\n    out:\n      - multiqc_zip\n      - multiqc_html\n    run: ../bio-cwl-tools/multiqc/multiqc.cwl\n\n  minimap2:\n    in:\n      indexFile: ref_human_genome\n      fastqFiles: fetch_fastqs/fastq_file_1\n      samOutput:\n        valueFrom: $(true)\n    out:\n      - samfile\n    run: ../bio-cwl-tools/minimap2/minimap2.cwl\n\n  sam2bam:\n    in:\n      sam: minimap2/samfile\n    out:\n      - bam\n    run: ../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: sam2bam/bam\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n    \n  rename_multiqc_html:\n    in:\n      srcfile: multiqc/multiqc_html\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_multiqc_zip:\n    in:\n      srcfile: multiqc/multiqc_zip\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastqc_summary:\n    in:\n      srcfile: fastqc/summary_file\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastqc_zip:\n    in:\n      srcfile: fastqc/zipped_file\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastq:\n    in:\n      srcfile: samtools_fastq/fastq\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).fastq\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_bam:\n    in:\n      srcfile: sam2bam/bam\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).bam\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\noutputs:\n  original_fastq1:\n    type: File\n    outputSource: rename_fastq/outfile\n\n  fastqc_summary:\n    type: File\n    outputSource: rename_fastqc_summary/outfile\n  fastqc_zip:\n    type: File\n    outputSource: rename_fastqc_zip/outfile\n\n\n  multiqc_html:\n    type: File\n    outputSource: rename_multiqc_html/outfile\n  multiqc_zip:\n    type: File\n    outputSource: rename_multiqc_zip/outfile\n\n  bam:\n    type: File\n    outputSource: rename_bam/outfile",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accession': 'string', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File', 'outputSource': 'rename_fastq/outfile'}, 'fastqc_summary': {'type': 'File', 'outputSource': 'rename_fastqc_summary/outfile'}, 'fastqc_zip': {'type': 'File', 'outputSource': 'rename_fastqc_zip/outfile'}, 'multiqc_html': {'type': 'File', 'outputSource': 'rename_multiqc_html/outfile'}, 'multiqc_zip': {'type': 'File', 'outputSource': 'rename_multiqc_zip/outfile'}, 'bam': {'type': 'File', 'outputSource': 'rename_bam/outfile'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "fetch_fastqs": {
        "in": {
          "sra_accession": "illumina_accession"
        },
        "out": [
          "fastq_file_1",
          "fastq_files"
        ],
        "run": "../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl"
      },
      "nanoplot": {
        "in": {
          "fastq_files": {
            "source": "fetch_fastqs/fastq_files"
          },
          "loglength": {
            "valueFrom": "$(true)"
          },
          "format": {
            "valueFrom": "png"
          }
        },
        "out": [
          "dynamic_histogram_read_length",
          "histogram_read_length",
          "length_v_qual_scatter_plot_dot",
          "length_v_qual_scatter_plot_kde",
          "log_transformed_histogram_read_length",
          "report",
          "logfile",
          "nanostats",
          "weighted_histogram_read_length",
          "weighted_log_transform_histogram_read_length",
          "yield_by_length_img"
        ],
        "run": "../bio-cwl-tools/nanoplot/nanoplot.cwl"
      },
      "fastqc": {
        "in": {
          "reads_file": "fetch_fastqs/fastq_file_1",
          "nogroup": {
            "valueFrom": "$(true)"
          },
          "kmers": {
            "valueFrom": "$(7)"
          }
        },
        "out": [
          "zipped_file",
          "summary_file",
          "html_file"
        ],
        "run": "../bio-cwl-tools/fastqc/fastqc_2.cwl"
      },
      "multiqc": {
        "in": {
          "qc_files_array": "fastqc/zipped_file"
        },
        "out": [
          "multiqc_zip",
          "multiqc_html"
        ],
        "run": "../bio-cwl-tools/multiqc/multiqc.cwl"
      },
      "minimap2": {
        "in": {
          "indexFile": "ref_human_genome",
          "fastqFiles": "fetch_fastqs/fastq_file_1",
          "samOutput": {
            "valueFrom": "$(true)"
          }
        },
        "out": [
          "samfile"
        ],
        "run": "../bio-cwl-tools/minimap2/minimap2.cwl"
      },
      "sam2bam": {
        "in": {
          "sam": "minimap2/samfile"
        },
        "out": [
          "bam"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "sam2bam/bam"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      },
      "rename_multiqc_html": {
        "in": {
          "srcfile": "multiqc/multiqc_html",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_multiqc_zip": {
        "in": {
          "srcfile": "multiqc/multiqc_zip",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastqc_summary": {
        "in": {
          "srcfile": "fastqc/summary_file",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastqc_zip": {
        "in": {
          "srcfile": "fastqc/zipped_file",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastq": {
        "in": {
          "srcfile": "samtools_fastq/fastq",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).fastq"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_bam": {
        "in": {
          "srcfile": "sam2bam/bam",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).bam"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/tools/unpack_ref_db.cwl",
    "sha": "d27ed0d48f2948217d1bc95e1777de0cae34e331",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/tools/unpack_ref_db.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\ndoc: decompression tool using Lempel-Ziv coding (LZ77)\nrequirements:\n  DockerRequirement:\n    dockerPull: alpine:3.9\n\nbaseCommand: [tar, xvzf]\n\n\ninputs:\n  file:\n    type: File\n    inputBinding: {}\n\noutputs:\n  hg_38_fa:\n    type: File\n    outputBinding:\n      glob: static/hg38.fna\n    secondaryFiles:\n      - .fai\n      - .fwt\n      - .amb\n      - .ann\n      - .pac\n      - .sa\n      - .bwt\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'file': {'type': 'File', 'inputBinding': {}}}",
    "cwl_outputs": "{'hg_38_fa': {'type': 'File', 'outputBinding': {'glob': 'static/hg38.fna'}, 'secondaryFiles': ['.fai', '.fwt', '.amb', '.ann', '.pac', '.sa', '.bwt']}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['tar', 'xvzf']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'alpine:3.9'}}",
    "cwl_doc": "decompression tool using Lempel-Ziv coding (LZ77)",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/archive/bowtie2.cwl",
    "sha": "53929051232cf534b1ad450b96c0c5e10a00c0aa",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/bowtie2.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Aligns reads from ATAC-seq or ChIP-seq to an indexed reference genome\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference_index)\nhints:\n#  ResourceRequirement:\n#    coresMin: 4\n#    ramMin: 30000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/bowtie2:2.2.6-2\n  SoftwareRequirement:\n    packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\nbaseCommand: [\"bowtie2\"]\narguments:\n  - valueFrom: --very-sensitive\n    position: 1\n#  - valueFrom: $(runtime.cores) # set the number of threads\n#    prefix: \"-p\"\n#    position: 1\n  - position: 4 # prefix for fastq1, differs for paired/single end\n    valueFrom: |\n      ${\n        if ( inputs.is_paired_end ){\n           return \"-1\";\n        }\n        else {\n          return \"-U\";\n        }\n      }\n  - valueFrom: $(inputs.fastq1.nameroot).sam\n    prefix: \"-S\"\n    position: 6\n#stderr: $(inputs.fastq1.nameroot).bowtie2_stderr # log file\n  \n\ninputs:\n  reference_index:\n    doc: path to the FM-index files for the chosen reference genome\n    type: File\n    secondaryFiles:\n#      - $(self.basename).1.bt2\n      - $(self.nameroot.slice(0,-1))2.bt2\n      - $(self.nameroot.slice(0,-1))3.bt2\n      - $(self.nameroot.slice(0,-1))4.bt2\n      - $(self.nameroot.slice(0,-1))rev.1.bt2\n      - $(self.nameroot.slice(0,-1))rev.2.bt2\n    inputBinding:\n      position: 2\n      prefix: \"-x\"\n      valueFrom: $(self.nameroot.slice(0,-2))\n  fastq1:\n    type: File\n    inputBinding:\n      position: 4\n\n  is_paired_end:\n    type: boolean\n    default: false\n  fastq2:\n    type: File?\n    inputBinding:\n      valueFrom: |\n        ${\n            if ( inputs.is_paired_end ){\n                return self;\n            }\n            else {\n              return null;\n            }\n        }  \n      position: 12\n      prefix: \"-2\"\n  max_mapping_insert_length:\n    doc: usefull for very long fragments, as expected for ATAC\n    type: long?\n    default: 2000\n#    inputBinding:\n#      prefix: --maxins\n#      position: 1\n\n      \noutputs: \n  sam:\n    type: File\n    outputBinding:\n      glob: \"*.sam\"\n#  bowtie2_log:\n#    type: stderr\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference_index': {'doc': 'path to the FM-index files for the chosen reference genome', 'type': 'File', 'secondaryFiles': ['$(self.nameroot.slice(0,-1))2.bt2', '$(self.nameroot.slice(0,-1))3.bt2', '$(self.nameroot.slice(0,-1))4.bt2', '$(self.nameroot.slice(0,-1))rev.1.bt2', '$(self.nameroot.slice(0,-1))rev.2.bt2'], 'inputBinding': {'position': 2, 'prefix': '-x', 'valueFrom': '$(self.nameroot.slice(0,-2))'}}, 'fastq1': {'type': 'File', 'inputBinding': {'position': 4}}, 'is_paired_end': {'type': 'boolean', 'default': False}, 'fastq2': {'type': 'File?', 'inputBinding': {'valueFrom': '${\\n    if ( inputs.is_paired_end ){\\n        return self;\\n    }\\n    else {\\n      return null;\\n    }\\n}  \\n', 'position': 12, 'prefix': '-2'}}, 'max_mapping_insert_length': {'doc': 'usefull for very long fragments, as expected for ATAC', 'type': 'long?', 'default': 2000}}",
    "cwl_outputs": "{'sam': {'type': 'File', 'outputBinding': {'glob': '*.sam'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'kerstenbreuer/bowtie2:2.2.6-2'}, 'SoftwareRequirement': {'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": "[{'valueFrom': '--very-sensitive', 'position': 1}, {'position': 4, 'valueFrom': '${\\n  if ( inputs.is_paired_end ){\\n     return \"-1\";\\n  }\\n  else {\\n    return \"-U\";\\n  }\\n}\\n'}, {'valueFrom': '$(inputs.fastq1.nameroot).sam', 'prefix': '-S', 'position': 6}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.reference_index)']}}",
    "cwl_doc": "Aligns reads from ATAC-seq or ChIP-seq to an indexed reference genome\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/archive/draft2_variation.cwl",
    "sha": "02e59c5c25cf28d16c6f8168198077710388533a",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/draft2_variation.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: variation\nlabel: variation\n\ninputs:\n  - id: reference_in\n    type:\n      - File\n      - type: array\n        items: File\n  - id: fastq1\n    type: File\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: min_length_required\n    type: int?\noutputs:\n  - id: outFile\n    outputSource:\n      - picard_markduplicates/outFile\n    type: File\n\nsteps:\n  - id: bowtie2_build\n    in:\n      - id: reference_in\n        source:\n          - reference_in\n    out:\n      - id: indices\n      - id: output_log\n    run: ../bio-cwl-tools/bowtie2/bowtie2_build.cwl\n\n  - id: fastp\n    in:\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: fastq1\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n#      - id: out_fastq2\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  - id: bowtie2\n    in:\n      - id: fastq1\n        source: fastp/out_fastq1\n      - id: reference_index\n        source: bowtie2_build/indices\n    out:\n#      - id: bowtie2_log\n      - id: sam\n    run: ./bowtie2.cwl\n\n  - id: picard_sortsam\n    in:\n      - id: inputFile\n        source: bowtie2/sam\n    out:\n      - id: outFile\n    run: ./picard_sortsam.cwl\n\n  - id: picard_markduplicates\n    in:\n      - id: inputFile\n        source: picard_sortsam/outFile\n    out:\n      - id: outFile\n      - id: metrics_file\n    run: ./picard_markduplicates.cwl\n\nrequirements: []\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "variation",
    "cwl_inputs": "[{'id': 'reference_in', 'type': ['File', {'type': 'array', 'items': 'File'}]}, {'id': 'fastq1', 'type': 'File'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'min_length_required', 'type': 'int?'}]",
    "cwl_outputs": "[{'id': 'outFile', 'outputSource': ['picard_markduplicates/outFile'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "variation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/archive/draft_variation.cwl",
    "sha": "c1b67db373d790db5b25a8842d4655b576734fb1",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/draft_variation.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: variation\nlabel: variation\ninputs:\n  - id: reference_in\n    type:\n      - File\n      - type: array\n        items: File\n\n  - id: fastq1\n    type: File\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: min_length_required\n    type: int?\noutputs: \n  # - id: multiqc_html\n  #   outputSource:\n  #     - multiqc/multiqc_html\n  #   type: File\n  - id: sam\n    outputSource:\n      - bowtie2/sam\n    type: File\nsteps:\n  - id: bowtie2_build\n    in:\n      - id: reference_in\n        source:\n          - reference_in\n    out:\n      - id: indices\n      - id: output_log\n    run: ../bio-cwl-tools/bowtie2/bowtie2_build.cwl\n\n  - id: fastp\n    in:\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: fastq1\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n      # - id: out_fastq2\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  # - id: multiqc\n  #   in:\n  #     - id: qc_files_array\n  #       source:\n  #         - fastp/html_report\n  #   out:\n  #     - id: diree\n  #     - id: multiqc_html\n  #     - id: multiqc_zip\n  #   run: ./multiqc.cwl\n\n  - id: bowtie2\n    in:\n      - id: fastq1\n        source: fastp/out_fastq1\n      - id: reference_index\n        source: bowtie2_build/indices\n    out: \n     # - id: bowtie2_log\n      - id: sam\n    run: ./bowtie2.cwl\n\nrequirements: []\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "variation",
    "cwl_inputs": "[{'id': 'reference_in', 'type': ['File', {'type': 'array', 'items': 'File'}]}, {'id': 'fastq1', 'type': 'File'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'min_length_required', 'type': 'int?'}]",
    "cwl_outputs": "[{'id': 'sam', 'outputSource': ['bowtie2/sam'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "variation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/archive/snpeff_build.cwl",
    "sha": "6dbe2b79fd220fac08845ca0d200e2b6dc1d0062",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/snpeff_build.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nbaseCommand: [snpEff, build]\n\narguments:\n  - -v #verbose\n  - -dataDir /data\n  - -configOption $(inputs.dbname).genome=$(inputs.dbname)\ninputs:\n  - id: dbname\n    type: string\n    inputBinding:\n      prefix: -genbank\n      position: 1000\n\n  - id: bankfile\n    type: File\noutputs:  []\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: biocontainers/snpeff:v4.1k_cv3\n    dockerOutputDirectory: /data/\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: \"$({class: 'Directory', listing: []})\"\n        entryname: $(inputs.dbname)\n        writable: true\n      - entryname: $(inputs.dbname)/genes.gbk\n        entry: $(inputs.bankfile)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'dbname', 'type': 'string', 'inputBinding': {'prefix': '-genbank', 'position': 1000}}, {'id': 'bankfile', 'type': 'File'}]",
    "cwl_outputs": "[]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['snpEff', 'build']",
    "cwl_arguments": "['-v', '-dataDir /data', '-configOption $(inputs.dbname).genome=$(inputs.dbname)']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bowtie2_align.cwl",
    "sha": "964e9386bdc1c17da84ea6a6494268a3ccd78cd9",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bowtie2_align.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n- class: ShellCommandRequirement\n- class: InlineJavascriptRequirement\n  expressionLib:\n  - var default_output_filename = function() {\n        if (Array.isArray(inputs.filelist) && inputs.filelist.length > 0){\n          return inputs.filelist[0].location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n        } else\n          if (inputs.filelist != null){\n            return inputs.filelist.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n          } else\n            if (Array.isArray(inputs.filelist_mates) && inputs.filelist_mates.length > 0){\n              return inputs.filelist_mates[0].location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n            } else\n              if (inputs.filelist_mates != null){\n                return inputs.filelist_mates.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n              } else {\n                return null;\n              }\n    };\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/bowtie2:v2.3.0\n  dockerFile: >\n    $import: ./dockerfiles/bowtie2-Dockerfile\n- class: SoftwareRequirement\n  packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\ninputs:\n\n  indices_file:\n    type: File?\n    doc: File with secondaryFiles containing all the indices\n    inputBinding:\n      position: 81\n      prefix: -x\n      valueFrom: $(self.path.split('.').slice(0,-2).join('.'))\n\n  indices_folder:\n    type: Directory?\n    doc: \"Folder with indices files\"\n    inputBinding:\n      position: 81\n      prefix: '-x'\n      valueFrom: |\n        ${\n            for (var i = 0; i < self.listing.length; i++) {\n                if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2' ||\n                    self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2l'){\n                  return self.listing[i].path.split('.').slice(0,-3).join('.');\n                }\n            }\n            return null;\n        }\n\n  filelist:\n    type:\n    - \"null\"\n    - File\n    - type: array\n      items: File\n    doc: |\n      {-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\n      <m1>       Files with #1 mates, paired with files in <m2>.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n      <m2>       Files with #2 mates, paired with files in <m1>.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n      <r>        Files with unpaired reads.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n    inputBinding:\n      itemSeparator: \",\"\n      position: 83\n\n  filelist_mates:\n    type:\n    - \"null\"\n    - File\n    - type: array\n      items: File\n    inputBinding:\n      itemSeparator: \",\"\n      position: 85\n\n  output_filename:\n    type: string\n    inputBinding:\n      position: 90\n      prefix: \"-S\"\n      valueFrom: |\n        ${\n            if (self == \"\"){\n              return default_output_filename();\n            } else {\n              return self;\n            }\n        }\n    default: \"\"\n    doc: |\n      File for SAM output (default: stdout)\n\n  q:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are FASTQ .fq/.fastq (default)\"\n    inputBinding:\n      position: 1\n      prefix: '-q'\n\n  qseq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are in Illumina's qseq format\"\n    inputBinding:\n      position: 1\n      prefix: '--qseq'\n\n  f:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are (multi-)FASTA .fa/.mfa\"\n    inputBinding:\n      position: 1\n      prefix: '-f'\n\n  raw:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are raw one-sequence-per-line\"\n    inputBinding:\n      position: 1\n      prefix: '-r'\n\n  c:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"<m1>, <m2>, <r> are sequences themselves, not files\"\n    inputBinding:\n      position: 1\n      prefix: '-c'\n\n  s:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      skip the first <int> reads/pairs in the input (none)\n    inputBinding:\n      position: 2\n      prefix: '-s'\n\n  u:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      stop after first <int> reads/pairs (no limit)\n    inputBinding:\n      position: 3\n      prefix: '-u'\n\n  clip_5p_end:\n    type: int?\n    doc: |\n      trim <int> bases from 5'/left end of reads (0)\n    inputBinding:\n      position: 4\n      prefix: '-5'\n\n  clip_3p_end:\n    type: int?\n    doc: |\n      trim <int> bases from 3'/right end of reads (0)\n    inputBinding:\n      position: 5\n      prefix: '-3'\n\n  phred33_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities are Phred+33 (default)\"\n    inputBinding:\n      position: 6\n      prefix: '--phred33'\n\n  phred64_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities are Phred+64\"\n    inputBinding:\n      position: 6\n      prefix: '--phred64'\n\n  integer_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities encoded as space-delimited integers\"\n    inputBinding:\n      position: 6\n      prefix: '--int-quals'\n\n  n:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      max # mismatches in seed alignment; can be 0 or 1 (0)\n    inputBinding:\n      position: 7\n      prefix: '-N'\n\n  l:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      length of seed substrings; must be >3, <32 (22)\n    inputBinding:\n      position: 8\n      prefix: '-L'\n\n  i:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      interval between seed substrings w/r/t read len (S,1,1.15)\n    inputBinding:\n      position: 9\n      prefix: '-i'\n\n  n_ceil:\n    type:\n    - \"null\"\n    - string\n    doc: >\n      func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)\n    inputBinding:\n      position: 10\n      prefix: '--n-ceil'\n\n  dpad:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      include <int> extra ref chars on sides of DP table (15)\n    inputBinding:\n      position: 11\n      prefix: '--dpad'\n\n  gbar:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      disallow gaps within <int> nucs of read extremes (4)\n    inputBinding:\n      position: 12\n      prefix: '--gbar'\n\n  ignore_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      treat all quality values as 30 on Phred scale (off)\n    inputBinding:\n      position: 13\n      prefix: '--ignore-quals'\n\n  nofw:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not align forward (original) version of read (off)\n    inputBinding:\n      position: 14\n      prefix: '--nofw'\n\n  norc:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not align reverse-complement version of read (off)\n    inputBinding:\n      position: 15\n      prefix: '--norc'\n\n  no_1mm_upfront:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments\n    inputBinding:\n      position: 16\n      prefix: '--no-1mm-upfront'\n\n  end_to_end:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      entire read must align; no clipping (on)\n      Options:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n        --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50\n        --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\n        --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 17\n      prefix: '--end-to-end'\n\n  end_to_end_very_fast:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n    inputBinding:\n      position: 18\n      prefix: '--very-fast'\n\n  end_to_end_fast:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n    inputBinding:\n      position: 18\n      prefix: '--fast'\n\n  end_to_end_sensitive:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\n    inputBinding:\n      position: 18\n      prefix: '--sensitive'\n\n  end_to_end_very_sensitive:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 18\n      prefix: '--very-sensitive'\n\n  local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      local alignment; ends might be soft clipped (off)\n      Options:\n        --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\n        --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\n        --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\n        --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 19\n      prefix: '--local'\n\n  local_very_fast_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\n    inputBinding:\n      position: 20\n      prefix: '--very-fast-local'\n\n  local_fast_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\n    inputBinding:\n      position: 20\n      prefix: '--fast-local'\n\n  local_sensitive_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\n    inputBinding:\n      position: 20\n      prefix: '--sensitive-local'\n\n  local_very_sensitive_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 20\n      prefix: '--very-sensitive-local'\n\n  ma:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      match bonus (0 for --end-to-end, 2 for --local)\n    inputBinding:\n      position: 21\n      prefix: '--ma'\n\n  mp:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      max penalty for mismatch; lower qual = lower penalty (6)\n    inputBinding:\n      position: 22\n      prefix: '--mp'\n\n  np:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      penalty for non-A/C/G/Ts in read/ref (1)\n    inputBinding:\n      position: 23\n      prefix: '--np'\n\n  rdg:\n    type:\n    - \"null\"\n    - int[]\n    doc: |\n      read gap open, extend penalties (5,3)\n    inputBinding:\n      position: 24\n      itemSeparator: \",\"\n      prefix: '--rdg'\n\n  rfg:\n    type:\n    - \"null\"\n    - int[]\n    doc: |\n      reference gap open, extend penalties (5,3)\n    inputBinding:\n      position: 25\n      itemSeparator: \",\"\n      prefix: '--rfg'\n\n  score_min:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)\n    inputBinding:\n      position: 26\n      prefix: '--score-min'\n\n  k:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      report up to <int> alns per read; MAPQ not meaningful\n    inputBinding:\n      position: 27\n      prefix: '-k'\n\n  a:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      report all alignments; very slow, MAPQ not meaningful\n    inputBinding:\n      position: 27\n      prefix: '-a'\n\n  d:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      give up extending after <int> failed extends in a row (15)\n    inputBinding:\n      position: 28\n      prefix: '-D'\n\n  r:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      for reads w/ repetitive seeds, try <int> sets of seeds (2)\n    inputBinding:\n      position: 29\n      prefix: '-R'\n\n  minins:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      minimum fragment length (0)\n    inputBinding:\n      position: 30\n      prefix: '--minins'\n\n  maxins:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      maxins fragment length (0)\n    inputBinding:\n      position: 30\n      prefix: '--maxins'\n\n  fr:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--fr'\n\n  rf:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--rf'\n\n  ff:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--ff'\n\n  no_mixed:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      suppress unpaired alignments for paired reads\n    inputBinding:\n      position: 32\n      prefix: '--no-mixed'\n\n  no_discordant:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      suppress discordant alignments for paired reads\n    inputBinding:\n      position: 33\n      prefix: '--no-discordant'\n\n  no_dovetail:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when mates extend past each other\n    inputBinding:\n      position: 34\n      prefix: '--no-dovetail'\n\n  no_contain:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when one mate alignment contains other\n    inputBinding:\n      position: 35\n      prefix: '--no-contain'\n\n  no_overlap:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when mates overlap at all\n    inputBinding:\n      position: 36\n      prefix: '--no-overlap'\n\n  t:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      print wall-clock time taken by search phases\n    inputBinding:\n      position: 37\n      prefix: '-t'\n\n  un:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write unpaired reads that didn't align to <path>\n    inputBinding:\n      position: 38\n      prefix: '--un'\n\n  al:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write unpaired reads that aligned at least once to <path>\n    inputBinding:\n      position: 39\n      prefix: '--al'\n\n  un_conc:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write pairs that didn't align concordantly to <path>\n    inputBinding:\n      position: 40\n      prefix: '--un-conc'\n\n  al_conc:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write pairs that aligned concordantly at least once to <path>\n    inputBinding:\n      position: 41\n      prefix: '--al-conc'\n\n  quiet:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"print nothing to stderr except serious errors\"\n    inputBinding:\n      position: 42\n      prefix: '--quiet'\n\n  met_file:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      send metrics to file at <path> (off)\n    inputBinding:\n      position: 43\n      prefix: '--met-file'\n\n  met_stderr:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"send metrics to stderr (off)\"\n    inputBinding:\n      position: 44\n      prefix: '--met-stderr'\n\n  met:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      report internal counters & metrics every <int> secs (1)\n    inputBinding:\n      position: 45\n      prefix: '--met'\n\n  no_unal:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress SAM records for unaligned reads\"\n    inputBinding:\n      position: 46\n      prefix: '--no-unal'\n\n  no_head:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress header lines, i.e. lines starting with @\"\n    inputBinding:\n      position: 47\n      prefix: '--no-head'\n\n  no_sq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress @SQ header lines\"\n    inputBinding:\n      position: 48\n      prefix: '--no-sq'\n\n  rg_id:\n    type:\n    - \"null\"\n    - string\n    doc: \"set read group id, reflected in @RG line and RG:Z: opt field\"\n    inputBinding:\n      position: 49\n      prefix: '--rg-id'\n\n  rg:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      add <text> (\"lab:value\") to @RG line of SAM header.\n      Note: @RG line only printed when --rg-id is set.\n    inputBinding:\n      position: 50\n      prefix: '--rg'\n\n  omit_sec_seq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"put '*' in SEQ and QUAL fields for secondary alignments\"\n    inputBinding:\n      position: 51\n      prefix: '--omit-sec-seq'\n\n  threads:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      number of alignment threads to launch (1)\n    inputBinding:\n      position: 52\n      prefix: '-p'\n\n  reorder:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      force SAM output order to match order of input reads\n    inputBinding:\n      position: 53\n      prefix: '--reorder'\n\n  mm:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"use memory-mapped I/O for index; many 'bowtie's can share\"\n    inputBinding:\n      position: 54\n      prefix: '--mm'\n\n  qc_filter:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"filter out reads that are bad according to QSEQ filter\"\n    inputBinding:\n      position: 55\n      prefix: '--qc-filter'\n#\n  seed:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      seed for random number generator (0)\n    inputBinding:\n      position: 56\n      prefix: '--seed'\n\n  non_deterministic:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"seed rand. gen. arbitrarily instead of using read attributes\"\n    inputBinding:\n      position: 57\n      prefix: '--non-deterministic'\n\noutputs:\n\n  output:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n           if (inputs.output_filename == \"\"){\n             return default_output_filename();\n           } else {\n             return inputs.output_filename;\n           }\n        }\n\n  output_log:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n           if (inputs.output_filename == \"\"){\n             return default_output_filename().split('.').slice(0,-1).join('.') + \".log\";\n           } else {\n             return inputs.output_filename.split('.').slice(0,-1).join('.') + \".log\";\n           }\n        }\n\nbaseCommand:\n  - bowtie2\n\narguments:\n  - valueFrom: |\n      ${\n        if (inputs.filelist && inputs.filelist_mates){\n          return \"-1\";\n        } else if (inputs.filelist){\n          return \"-U\";\n        } else {\n          return null;\n        }\n      }\n    position: 82\n  - valueFrom: |\n      ${\n        if (inputs.filelist && inputs.filelist_mates){\n          return \"-2\";\n        } else if (inputs.filelist_mates){\n          return \"-U\";\n        } else {\n          return null;\n        }\n      }\n    position: 84\n  - valueFrom: |\n      ${\n        if (inputs.output_filename == \"\"){\n          return ' 2> ' + default_output_filename().split('.').slice(0,-1).join('.') + '.log';\n        } else {\n          return ' 2> ' + inputs.output_filename.split('.').slice(0,-1).join('.') + '.log';\n        }\n      }\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- http://schema.org/version/latest/schema.rdf\n\ns:name: \"bowtie2_align\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:isPartOf:\n  class: s:CreativeWork\n  s:name: Common Workflow Language\n  s:url: http://commonwl.org/\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie aligner to align input FASTQ file(s) to reference genome\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'indices_file': {'type': 'File?', 'doc': 'File with secondaryFiles containing all the indices', 'inputBinding': {'position': 81, 'prefix': '-x', 'valueFrom': \"$(self.path.split('.').slice(0,-2).join('.'))\"}}, 'indices_folder': {'type': 'Directory?', 'doc': 'Folder with indices files', 'inputBinding': {'position': 81, 'prefix': '-x', 'valueFrom': \"${\\n    for (var i = 0; i < self.listing.length; i++) {\\n        if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2' ||\\n            self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2l'){\\n          return self.listing[i].path.split('.').slice(0,-3).join('.');\\n        }\\n    }\\n    return null;\\n}\\n\"}}, 'filelist': {'type': ['null', 'File', {'type': 'array', 'items': 'File'}], 'doc': \"{-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\\n<m1>       Files with #1 mates, paired with files in <m2>.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n<m2>       Files with #2 mates, paired with files in <m1>.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n<r>        Files with unpaired reads.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n\", 'inputBinding': {'itemSeparator': ',', 'position': 83}}, 'filelist_mates': {'type': ['null', 'File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'itemSeparator': ',', 'position': 85}}, 'output_filename': {'type': 'string', 'inputBinding': {'position': 90, 'prefix': '-S', 'valueFrom': '${\\n    if (self == \"\"){\\n      return default_output_filename();\\n    } else {\\n      return self;\\n    }\\n}\\n'}, 'default': '', 'doc': 'File for SAM output (default: stdout)\\n'}, 'q': {'type': ['null', 'boolean'], 'doc': 'query input files are FASTQ .fq/.fastq (default)', 'inputBinding': {'position': 1, 'prefix': '-q'}}, 'qseq': {'type': ['null', 'boolean'], 'doc': \"query input files are in Illumina's qseq format\", 'inputBinding': {'position': 1, 'prefix': '--qseq'}}, 'f': {'type': ['null', 'boolean'], 'doc': 'query input files are (multi-)FASTA .fa/.mfa', 'inputBinding': {'position': 1, 'prefix': '-f'}}, 'raw': {'type': ['null', 'boolean'], 'doc': 'query input files are raw one-sequence-per-line', 'inputBinding': {'position': 1, 'prefix': '-r'}}, 'c': {'type': ['null', 'boolean'], 'doc': '<m1>, <m2>, <r> are sequences themselves, not files', 'inputBinding': {'position': 1, 'prefix': '-c'}}, 's': {'type': ['null', 'int'], 'doc': 'skip the first <int> reads/pairs in the input (none)\\n', 'inputBinding': {'position': 2, 'prefix': '-s'}}, 'u': {'type': ['null', 'int'], 'doc': 'stop after first <int> reads/pairs (no limit)\\n', 'inputBinding': {'position': 3, 'prefix': '-u'}}, 'clip_5p_end': {'type': 'int?', 'doc': \"trim <int> bases from 5'/left end of reads (0)\\n\", 'inputBinding': {'position': 4, 'prefix': '-5'}}, 'clip_3p_end': {'type': 'int?', 'doc': \"trim <int> bases from 3'/right end of reads (0)\\n\", 'inputBinding': {'position': 5, 'prefix': '-3'}}, 'phred33_quals': {'type': ['null', 'boolean'], 'doc': 'qualities are Phred+33 (default)', 'inputBinding': {'position': 6, 'prefix': '--phred33'}}, 'phred64_quals': {'type': ['null', 'boolean'], 'doc': 'qualities are Phred+64', 'inputBinding': {'position': 6, 'prefix': '--phred64'}}, 'integer_quals': {'type': ['null', 'boolean'], 'doc': 'qualities encoded as space-delimited integers', 'inputBinding': {'position': 6, 'prefix': '--int-quals'}}, 'n': {'type': ['null', 'int'], 'doc': 'max # mismatches in seed alignment; can be 0 or 1 (0)\\n', 'inputBinding': {'position': 7, 'prefix': '-N'}}, 'l': {'type': ['null', 'int'], 'doc': 'length of seed substrings; must be >3, <32 (22)\\n', 'inputBinding': {'position': 8, 'prefix': '-L'}}, 'i': {'type': ['null', 'int'], 'doc': 'interval between seed substrings w/r/t read len (S,1,1.15)\\n', 'inputBinding': {'position': 9, 'prefix': '-i'}}, 'n_ceil': {'type': ['null', 'string'], 'doc': 'func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)\\n', 'inputBinding': {'position': 10, 'prefix': '--n-ceil'}}, 'dpad': {'type': ['null', 'int'], 'doc': 'include <int> extra ref chars on sides of DP table (15)\\n', 'inputBinding': {'position': 11, 'prefix': '--dpad'}}, 'gbar': {'type': ['null', 'int'], 'doc': 'disallow gaps within <int> nucs of read extremes (4)\\n', 'inputBinding': {'position': 12, 'prefix': '--gbar'}}, 'ignore_quals': {'type': ['null', 'boolean'], 'doc': 'treat all quality values as 30 on Phred scale (off)\\n', 'inputBinding': {'position': 13, 'prefix': '--ignore-quals'}}, 'nofw': {'type': ['null', 'boolean'], 'doc': 'do not align forward (original) version of read (off)\\n', 'inputBinding': {'position': 14, 'prefix': '--nofw'}}, 'norc': {'type': ['null', 'boolean'], 'doc': 'do not align reverse-complement version of read (off)\\n', 'inputBinding': {'position': 15, 'prefix': '--norc'}}, 'no_1mm_upfront': {'type': ['null', 'boolean'], 'doc': 'do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments\\n', 'inputBinding': {'position': 16, 'prefix': '--no-1mm-upfront'}}, 'end_to_end': {'type': ['null', 'boolean'], 'doc': 'entire read must align; no clipping (on)\\nOptions:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n  --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50\\n  --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\\n  --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 17, 'prefix': '--end-to-end'}}, 'end_to_end_very_fast': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n', 'inputBinding': {'position': 18, 'prefix': '--very-fast'}}, 'end_to_end_fast': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n', 'inputBinding': {'position': 18, 'prefix': '--fast'}}, 'end_to_end_sensitive': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\\n', 'inputBinding': {'position': 18, 'prefix': '--sensitive'}}, 'end_to_end_very_sensitive': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 18, 'prefix': '--very-sensitive'}}, 'local': {'type': ['null', 'boolean'], 'doc': 'local alignment; ends might be soft clipped (off)\\nOptions:\\n  --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\\n  --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\\n  --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\\n  --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 19, 'prefix': '--local'}}, 'local_very_fast_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\\n', 'inputBinding': {'position': 20, 'prefix': '--very-fast-local'}}, 'local_fast_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\\n', 'inputBinding': {'position': 20, 'prefix': '--fast-local'}}, 'local_sensitive_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\\n', 'inputBinding': {'position': 20, 'prefix': '--sensitive-local'}}, 'local_very_sensitive_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 20, 'prefix': '--very-sensitive-local'}}, 'ma': {'type': ['null', 'int'], 'doc': 'match bonus (0 for --end-to-end, 2 for --local)\\n', 'inputBinding': {'position': 21, 'prefix': '--ma'}}, 'mp': {'type': ['null', 'int'], 'doc': 'max penalty for mismatch; lower qual = lower penalty (6)\\n', 'inputBinding': {'position': 22, 'prefix': '--mp'}}, 'np': {'type': ['null', 'int'], 'doc': 'penalty for non-A/C/G/Ts in read/ref (1)\\n', 'inputBinding': {'position': 23, 'prefix': '--np'}}, 'rdg': {'type': ['null', 'int[]'], 'doc': 'read gap open, extend penalties (5,3)\\n', 'inputBinding': {'position': 24, 'itemSeparator': ',', 'prefix': '--rdg'}}, 'rfg': {'type': ['null', 'int[]'], 'doc': 'reference gap open, extend penalties (5,3)\\n', 'inputBinding': {'position': 25, 'itemSeparator': ',', 'prefix': '--rfg'}}, 'score_min': {'type': ['null', 'string'], 'doc': 'min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)\\n', 'inputBinding': {'position': 26, 'prefix': '--score-min'}}, 'k': {'type': ['null', 'int'], 'doc': 'report up to <int> alns per read; MAPQ not meaningful\\n', 'inputBinding': {'position': 27, 'prefix': '-k'}}, 'a': {'type': ['null', 'boolean'], 'doc': 'report all alignments; very slow, MAPQ not meaningful\\n', 'inputBinding': {'position': 27, 'prefix': '-a'}}, 'd': {'type': ['null', 'int'], 'doc': 'give up extending after <int> failed extends in a row (15)\\n', 'inputBinding': {'position': 28, 'prefix': '-D'}}, 'r': {'type': ['null', 'int'], 'doc': 'for reads w/ repetitive seeds, try <int> sets of seeds (2)\\n', 'inputBinding': {'position': 29, 'prefix': '-R'}}, 'minins': {'type': ['null', 'int'], 'doc': 'minimum fragment length (0)\\n', 'inputBinding': {'position': 30, 'prefix': '--minins'}}, 'maxins': {'type': ['null', 'int'], 'doc': 'maxins fragment length (0)\\n', 'inputBinding': {'position': 30, 'prefix': '--maxins'}}, 'fr': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--fr'}}, 'rf': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--rf'}}, 'ff': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--ff'}}, 'no_mixed': {'type': ['null', 'boolean'], 'doc': 'suppress unpaired alignments for paired reads\\n', 'inputBinding': {'position': 32, 'prefix': '--no-mixed'}}, 'no_discordant': {'type': ['null', 'boolean'], 'doc': 'suppress discordant alignments for paired reads\\n', 'inputBinding': {'position': 33, 'prefix': '--no-discordant'}}, 'no_dovetail': {'type': ['null', 'boolean'], 'doc': 'not concordant when mates extend past each other\\n', 'inputBinding': {'position': 34, 'prefix': '--no-dovetail'}}, 'no_contain': {'type': ['null', 'boolean'], 'doc': 'not concordant when one mate alignment contains other\\n', 'inputBinding': {'position': 35, 'prefix': '--no-contain'}}, 'no_overlap': {'type': ['null', 'boolean'], 'doc': 'not concordant when mates overlap at all\\n', 'inputBinding': {'position': 36, 'prefix': '--no-overlap'}}, 't': {'type': ['null', 'boolean'], 'doc': 'print wall-clock time taken by search phases\\n', 'inputBinding': {'position': 37, 'prefix': '-t'}}, 'un': {'type': ['null', 'string'], 'doc': \"write unpaired reads that didn't align to <path>\\n\", 'inputBinding': {'position': 38, 'prefix': '--un'}}, 'al': {'type': ['null', 'string'], 'doc': 'write unpaired reads that aligned at least once to <path>\\n', 'inputBinding': {'position': 39, 'prefix': '--al'}}, 'un_conc': {'type': ['null', 'string'], 'doc': \"write pairs that didn't align concordantly to <path>\\n\", 'inputBinding': {'position': 40, 'prefix': '--un-conc'}}, 'al_conc': {'type': ['null', 'string'], 'doc': 'write pairs that aligned concordantly at least once to <path>\\n', 'inputBinding': {'position': 41, 'prefix': '--al-conc'}}, 'quiet': {'type': ['null', 'boolean'], 'doc': 'print nothing to stderr except serious errors', 'inputBinding': {'position': 42, 'prefix': '--quiet'}}, 'met_file': {'type': ['null', 'string'], 'doc': 'send metrics to file at <path> (off)\\n', 'inputBinding': {'position': 43, 'prefix': '--met-file'}}, 'met_stderr': {'type': ['null', 'boolean'], 'doc': 'send metrics to stderr (off)', 'inputBinding': {'position': 44, 'prefix': '--met-stderr'}}, 'met': {'type': ['null', 'int'], 'doc': 'report internal counters & metrics every <int> secs (1)\\n', 'inputBinding': {'position': 45, 'prefix': '--met'}}, 'no_unal': {'type': ['null', 'boolean'], 'doc': 'suppress SAM records for unaligned reads', 'inputBinding': {'position': 46, 'prefix': '--no-unal'}}, 'no_head': {'type': ['null', 'boolean'], 'doc': 'suppress header lines, i.e. lines starting with @', 'inputBinding': {'position': 47, 'prefix': '--no-head'}}, 'no_sq': {'type': ['null', 'boolean'], 'doc': 'suppress @SQ header lines', 'inputBinding': {'position': 48, 'prefix': '--no-sq'}}, 'rg_id': {'type': ['null', 'string'], 'doc': 'set read group id, reflected in @RG line and RG:Z: opt field', 'inputBinding': {'position': 49, 'prefix': '--rg-id'}}, 'rg': {'type': ['null', 'string'], 'doc': 'add <text> (\"lab:value\") to @RG line of SAM header.\\nNote: @RG line only printed when --rg-id is set.\\n', 'inputBinding': {'position': 50, 'prefix': '--rg'}}, 'omit_sec_seq': {'type': ['null', 'boolean'], 'doc': \"put '*' in SEQ and QUAL fields for secondary alignments\", 'inputBinding': {'position': 51, 'prefix': '--omit-sec-seq'}}, 'threads': {'type': ['null', 'int'], 'doc': 'number of alignment threads to launch (1)\\n', 'inputBinding': {'position': 52, 'prefix': '-p'}}, 'reorder': {'type': ['null', 'boolean'], 'doc': 'force SAM output order to match order of input reads\\n', 'inputBinding': {'position': 53, 'prefix': '--reorder'}}, 'mm': {'type': ['null', 'boolean'], 'doc': \"use memory-mapped I/O for index; many 'bowtie's can share\", 'inputBinding': {'position': 54, 'prefix': '--mm'}}, 'qc_filter': {'type': ['null', 'boolean'], 'doc': 'filter out reads that are bad according to QSEQ filter', 'inputBinding': {'position': 55, 'prefix': '--qc-filter'}}, 'seed': {'type': ['null', 'int'], 'doc': 'seed for random number generator (0)\\n', 'inputBinding': {'position': 56, 'prefix': '--seed'}}, 'non_deterministic': {'type': ['null', 'boolean'], 'doc': 'seed rand. gen. arbitrarily instead of using read attributes', 'inputBinding': {'position': 57, 'prefix': '--non-deterministic'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '${\\n   if (inputs.output_filename == \"\"){\\n     return default_output_filename();\\n   } else {\\n     return inputs.output_filename;\\n   }\\n}\\n'}}, 'output_log': {'type': 'File', 'outputBinding': {'glob': '${\\n   if (inputs.output_filename == \"\"){\\n     return default_output_filename().split(\\'.\\').slice(0,-1).join(\\'.\\') + \".log\";\\n   } else {\\n     return inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\') + \".log\";\\n   }\\n}\\n'}}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bowtie2:v2.3.0', 'dockerFile': '$import: ./dockerfiles/bowtie2-Dockerfile\\n'}, {'class': 'SoftwareRequirement', 'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": "[{'valueFrom': '${\\n  if (inputs.filelist && inputs.filelist_mates){\\n    return \"-1\";\\n  } else if (inputs.filelist){\\n    return \"-U\";\\n  } else {\\n    return null;\\n  }\\n}\\n', 'position': 82}, {'valueFrom': '${\\n  if (inputs.filelist && inputs.filelist_mates){\\n    return \"-2\";\\n  } else if (inputs.filelist_mates){\\n    return \"-U\";\\n  } else {\\n    return null;\\n  }\\n}\\n', 'position': 84}, {'valueFrom': '${\\n  if (inputs.output_filename == \"\"){\\n    return \\' 2> \\' + default_output_filename().split(\\'.\\').slice(0,-1).join(\\'.\\') + \\'.log\\';\\n  } else {\\n    return \\' 2> \\' + inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\') + \\'.log\\';\\n  }\\n}\\n', 'position': 100000, 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['http://schema.org/version/latest/schema.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs bowtie aligner to align input FASTQ file(s) to reference genome\n",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie2_align",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": "{'class': 's:CreativeWork', 's:name': 'Common Workflow Language', 's:url': 'http://commonwl.org/'}",
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bowtie2_build.cwl",
    "sha": "164fb007e96b63a6c86c6e9ad2f3ad7f1f77785b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bowtie2_build.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n- class: ShellCommandRequirement\n- class: InlineJavascriptRequirement\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/bowtie2:v2.3.0\n  dockerFile: >\n    $import: ./dockerfiles/bowtie2-Dockerfile\n- class: SoftwareRequirement\n  packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\ninputs:\n\n  reference_in:\n    type:\n      - File\n      - type: array\n        items: File\n    doc: >\n      comma-separated list of files with ref sequences\n    inputBinding:\n      itemSeparator: \",\"\n      position: 25\n\n  bt2_index_base:\n    type: string?\n    doc: |\n      write bt2 data to files with this dir/basename\n    inputBinding:\n      position: 26\n      shellQuote: false\n    default: bowtie2_indices\n\n  f:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      reference files are Fasta (default)\n    inputBinding:\n      position: 1\n      prefix: '-f'\n\n  c:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      reference sequences given on cmd line (as <reference_in>)\n    inputBinding:\n      position: 2\n      prefix: '-c'\n\n  large_index:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\n    inputBinding:\n      position: 3\n      prefix: '--large-index'\n\n  noauto:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      disable automatic -p/--bmax/--dcv memory-fitting\n    inputBinding:\n      position: 4\n      prefix: '--noauto'\n\n  packed:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      use packed strings internally; slower, less memory\n    inputBinding:\n      position: 5\n      prefix: '--packed'\n\n  bmax:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      max bucket sz for blockwise suffix-array builder\n    inputBinding:\n      position: 6\n      prefix: '--bmax'\n\n  bmaxdivn:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      max bucket sz as divisor of ref len (default: 4)\n    inputBinding:\n      position: 7\n      prefix: '--bmaxdivn'\n\n  dcv:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      diff-cover period for blockwise (default: 1024)\n    inputBinding:\n      position: 8\n      prefix: '--dcv'\n\n  nodc:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      disable diff-cover (algorithm becomes quadratic)\n    inputBinding:\n      position: 9\n      prefix: '--nodc'\n\n  noref:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      don't build .3/.4 index files\n    inputBinding:\n      position: 10\n      prefix: '--noref'\n\n  justref:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      just build .3/.4 index files\n    inputBinding:\n      position: 11\n      prefix: '--justref'\n\n  offrate:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      SA is sampled every 2^<int> BWT chars (default: 5)\n    inputBinding:\n      position: 12\n      prefix: '--offrate'\n\n  ftabchars:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      # of chars consumed in initial lookup (default: 10)\n    inputBinding:\n      position: 13\n      prefix: '--ftabchars'\n\n  threads:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      # of threads\n    inputBinding:\n      position: 14\n      prefix: '--threads'\n\n  seed:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      seed for random number generator\n    inputBinding:\n      position: 15\n      prefix: '--seed'\n\n  quiet:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      verbose output (for debugging)\n    inputBinding:\n      position: 15\n      prefix: '--quiet'\n\noutputs:\n\n  indices:\n    type: File\n    outputBinding:\n      glob: $(inputs.bt2_index_base + \".1.bt2*\")\n    secondaryFiles: |\n      ${\n        var ext = self.location.split('/').slice(-1)[0].split('.').slice(-1)[0];\n        var basename = self.location.split(\"/\").slice(-1)[0].split(\".\").slice(0, -2).join (\".\");\n        var dirname = self.location.split(\"/\").slice(0,-1).join(\"/\");\n        return [{\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".2.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".3.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".4.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.1.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.2.\" + ext}\n        ]\n      }\n\n  output_log:\n    type: File\n    outputBinding:\n      glob: $(inputs.bt2_index_base + \".log\")\n\nbaseCommand:\n  - bowtie2-build\n\narguments:\n  - valueFrom: $('2> ' + inputs.bt2_index_base + '.log')\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- http://schema.org/version/latest/schema.rdf\n\ns:name: \"bowtie2_build\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:isPartOf:\n  class: s:CreativeWork\n  s:name: Common Workflow Language\n  s:url: http://commonwl.org/\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie2-build to generate indices from input FASTA files",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference_in': {'type': ['File', {'type': 'array', 'items': 'File'}], 'doc': 'comma-separated list of files with ref sequences\\n', 'inputBinding': {'itemSeparator': ',', 'position': 25}}, 'bt2_index_base': {'type': 'string?', 'doc': 'write bt2 data to files with this dir/basename\\n', 'inputBinding': {'position': 26, 'shellQuote': False}, 'default': 'bowtie2_indices'}, 'f': {'type': ['null', 'boolean'], 'doc': 'reference files are Fasta (default)\\n', 'inputBinding': {'position': 1, 'prefix': '-f'}}, 'c': {'type': ['null', 'boolean'], 'doc': 'reference sequences given on cmd line (as <reference_in>)\\n', 'inputBinding': {'position': 2, 'prefix': '-c'}}, 'large_index': {'type': ['null', 'boolean'], 'doc': \"force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\\n\", 'inputBinding': {'position': 3, 'prefix': '--large-index'}}, 'noauto': {'type': ['null', 'boolean'], 'doc': 'disable automatic -p/--bmax/--dcv memory-fitting\\n', 'inputBinding': {'position': 4, 'prefix': '--noauto'}}, 'packed': {'type': ['null', 'boolean'], 'doc': 'use packed strings internally; slower, less memory\\n', 'inputBinding': {'position': 5, 'prefix': '--packed'}}, 'bmax': {'type': ['null', 'int'], 'doc': 'max bucket sz for blockwise suffix-array builder\\n', 'inputBinding': {'position': 6, 'prefix': '--bmax'}}, 'bmaxdivn': {'type': ['null', 'int'], 'doc': 'max bucket sz as divisor of ref len (default: 4)\\n', 'inputBinding': {'position': 7, 'prefix': '--bmaxdivn'}}, 'dcv': {'type': ['null', 'int'], 'doc': 'diff-cover period for blockwise (default: 1024)\\n', 'inputBinding': {'position': 8, 'prefix': '--dcv'}}, 'nodc': {'type': ['null', 'boolean'], 'doc': 'disable diff-cover (algorithm becomes quadratic)\\n', 'inputBinding': {'position': 9, 'prefix': '--nodc'}}, 'noref': {'type': ['null', 'boolean'], 'doc': \"don't build .3/.4 index files\\n\", 'inputBinding': {'position': 10, 'prefix': '--noref'}}, 'justref': {'type': ['null', 'boolean'], 'doc': 'just build .3/.4 index files\\n', 'inputBinding': {'position': 11, 'prefix': '--justref'}}, 'offrate': {'type': ['null', 'int'], 'doc': 'SA is sampled every 2^<int> BWT chars (default: 5)\\n', 'inputBinding': {'position': 12, 'prefix': '--offrate'}}, 'ftabchars': {'type': ['null', 'int'], 'doc': '# of chars consumed in initial lookup (default: 10)\\n', 'inputBinding': {'position': 13, 'prefix': '--ftabchars'}}, 'threads': {'type': ['null', 'int'], 'doc': '# of threads\\n', 'inputBinding': {'position': 14, 'prefix': '--threads'}}, 'seed': {'type': ['null', 'int'], 'doc': 'seed for random number generator\\n', 'inputBinding': {'position': 15, 'prefix': '--seed'}}, 'quiet': {'type': ['null', 'boolean'], 'doc': 'verbose output (for debugging)\\n', 'inputBinding': {'position': 15, 'prefix': '--quiet'}}}",
    "cwl_outputs": "{'indices': {'type': 'File', 'outputBinding': {'glob': '$(inputs.bt2_index_base + \".1.bt2*\")'}, 'secondaryFiles': '${\\n  var ext = self.location.split(\\'/\\').slice(-1)[0].split(\\'.\\').slice(-1)[0];\\n  var basename = self.location.split(\"/\").slice(-1)[0].split(\".\").slice(0, -2).join (\".\");\\n  var dirname = self.location.split(\"/\").slice(0,-1).join(\"/\");\\n  return [{\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".2.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".3.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".4.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.1.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.2.\" + ext}\\n  ]\\n}\\n'}, 'output_log': {'type': 'File', 'outputBinding': {'glob': '$(inputs.bt2_index_base + \".log\")'}}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bowtie2:v2.3.0', 'dockerFile': '$import: ./dockerfiles/bowtie2-Dockerfile\\n'}, {'class': 'SoftwareRequirement', 'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2-build']",
    "cwl_arguments": "[{'valueFrom': \"$('2> ' + inputs.bt2_index_base + '.log')\", 'position': 100000, 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['http://schema.org/version/latest/schema.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs bowtie2-build to generate indices from input FASTA files",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie2_build",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": "{'class': 's:CreativeWork', 's:name': 'Common Workflow Language', 's:url': 'http://commonwl.org/'}",
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bwa-index.cwl",
    "sha": "7d78a2916f48cfe09c5f6f17ea4b726359bacf4c",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bwa-index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  DockerRequirement:\n    dockerPull: \"quay.io/biocontainers/bwa:0.7.17--ha92aebf_3\"\n  InlineJavascriptRequirement: {}\n\ninputs:\n  InputFile:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      position: 200\n    \n  IndexName:\n    type: string\n    inputBinding:\n      prefix: \"-p\"\n      #valueFrom: $(self + \".bwt\")\n#Optional arguments\n  algoType:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n          - is\n          - bwtsw\n    inputBinding:\n      prefix: \"-a\"\n\nbaseCommand: [bwa, index]\n\noutputs: \n  index:\n    type: File\n    secondaryFiles: \n   #   - $(inputs.IndexName).bwt.bwt\n      - $(inputs.IndexName).sa\n      - $(inputs.IndexName).pac\n      - $(inputs.IndexName).ann\n      - $(inputs.IndexName).amb\n    outputBinding:\n      glob: $(inputs.IndexName).bwt\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'InputFile': {'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'position': 200}}, 'IndexName': {'type': 'string', 'inputBinding': {'prefix': '-p'}}, 'algoType': {'type': ['null', {'type': 'enum', 'symbols': ['is', 'bwtsw']}], 'inputBinding': {'prefix': '-a'}}}",
    "cwl_outputs": "{'index': {'type': 'File', 'secondaryFiles': ['$(inputs.IndexName).sa', '$(inputs.IndexName).pac', '$(inputs.IndexName).ann', '$(inputs.IndexName).amb'], 'outputBinding': {'glob': '$(inputs.IndexName).bwt'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'index']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bwa:0.7.17--ha92aebf_3'}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/bwa-mem.cwl",
    "sha": "943cb4a62734bdc5b529e2181ca0aa716fef60c7",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bwa-mem.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  DockerRequirement:\n    dockerPull: \"quay.io/biocontainers/bwa:0.7.17--ha92aebf_3\"\n\ninputs:\n  InputFile:\n    type: File[]\n    format:\n      - edam:format_1930 # FASTA\n      - edam:format_1931 # FASTQ\n    inputBinding:\n      position: 201\n    \n  Index:\n    type: File\n    inputBinding:\n      position: 200\n    secondaryFiles:\n      - .fai\n      - .amb\n      - .ann\n      - .bwt\n      - .pac\n      - .sa\n\n#Optional arguments\n\n  Threads:\n    type: int?\n    inputBinding:\n      prefix: \"-t\"\n\n  MinSeedLen:\n    type: int?\n    inputBinding:\n      prefix: \"-k\"\n  \n  BandWidth:\n    type: int?\n    inputBinding:\n      prefix: \"-w\"\n\n  ZDropoff:\n    type: int?\n    inputBinding:\n      prefix: \"-d\"\n\n  SeedSplitRatio:\n    type: float?\n    inputBinding:\n      prefix: \"-r\"\n    \n  MaxOcc:\n    type: int?\n    inputBinding:\n      prefix: \"-c\"\n\n  MatchScore:\n    type: int?\n    inputBinding:\n      prefix: \"-A\"\n\n  MmPenalty:\n    type: int?\n    inputBinding:\n      prefix: \"-B\"\n\n  GapOpenPen:\n    type: int?\n    inputBinding:\n      prefix: \"-O\"\n\n  GapExtPen:\n    type: int?\n    inputBinding:\n      prefix: \"-E\"\n\n  ClipPen:\n    type: int?\n    inputBinding:\n      prefix: \"-L\"\n\n  UnpairPen:\n    type: int?\n    inputBinding:\n      prefix: \"-U\"\n\n  RgLine:\n    type: string?\n    inputBinding:\n      prefix: \"-R\"\n\n  VerboseLevel:\n    type: int?\n    inputBinding:\n      prefix: \"-v\"\n\n  isOutSecAlign:\n    type: boolean?\n    inputBinding:\n      prefix: \"-a\"\n\n  isMarkShortSplit:\n    type: boolean?\n    inputBinding:\n      prefix: \"-M\"\n\n  isUseHardClip:\n    type: boolean?\n    inputBinding:\n      prefix: \"-H\"\n\n  isMultiplexedPair:\n    type: boolean?\n    inputBinding:\n      prefix: \"-p\"\n      \n\nbaseCommand: [bwa, mem]\n\nstdout: ${ return inputs.InputFile[1].nameroot+\"_unsorted_reads.sam\";}\n\noutputs:\n  reads_stdout:\n    type: stdout\n    format: edam:format_2572 \n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'InputFile': {'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931'], 'inputBinding': {'position': 201}}, 'Index': {'type': 'File', 'inputBinding': {'position': 200}, 'secondaryFiles': ['.fai', '.amb', '.ann', '.bwt', '.pac', '.sa']}, 'Threads': {'type': 'int?', 'inputBinding': {'prefix': '-t'}}, 'MinSeedLen': {'type': 'int?', 'inputBinding': {'prefix': '-k'}}, 'BandWidth': {'type': 'int?', 'inputBinding': {'prefix': '-w'}}, 'ZDropoff': {'type': 'int?', 'inputBinding': {'prefix': '-d'}}, 'SeedSplitRatio': {'type': 'float?', 'inputBinding': {'prefix': '-r'}}, 'MaxOcc': {'type': 'int?', 'inputBinding': {'prefix': '-c'}}, 'MatchScore': {'type': 'int?', 'inputBinding': {'prefix': '-A'}}, 'MmPenalty': {'type': 'int?', 'inputBinding': {'prefix': '-B'}}, 'GapOpenPen': {'type': 'int?', 'inputBinding': {'prefix': '-O'}}, 'GapExtPen': {'type': 'int?', 'inputBinding': {'prefix': '-E'}}, 'ClipPen': {'type': 'int?', 'inputBinding': {'prefix': '-L'}}, 'UnpairPen': {'type': 'int?', 'inputBinding': {'prefix': '-U'}}, 'RgLine': {'type': 'string?', 'inputBinding': {'prefix': '-R'}}, 'VerboseLevel': {'type': 'int?', 'inputBinding': {'prefix': '-v'}}, 'isOutSecAlign': {'type': 'boolean?', 'inputBinding': {'prefix': '-a'}}, 'isMarkShortSplit': {'type': 'boolean?', 'inputBinding': {'prefix': '-M'}}, 'isUseHardClip': {'type': 'boolean?', 'inputBinding': {'prefix': '-H'}}, 'isMultiplexedPair': {'type': 'boolean?', 'inputBinding': {'prefix': '-p'}}}",
    "cwl_outputs": "{'reads_stdout': {'type': 'stdout', 'format': 'edam:format_2572'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'mem']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bwa:0.7.17--ha92aebf_3'}}",
    "cwl_doc": null,
    "cwl_stdout": "${ return inputs.InputFile[1].nameroot+\"_unsorted_reads.sam\";}",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/fastp.cwl",
    "sha": "3cd5ae8048e83a74041b4f56efb5cc9470710df0",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/fastp.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Modified from https://github.com/nigyta/bact_genome/blob/master/cwl/tool/fastp/fastp.cwl\nrequirements:\n    InlineJavascriptRequirement: {}\nhints:\n    DockerRequirement:\n        dockerPull: quay.io/biocontainers/fastp:0.20.0--hdbcaa40_0\n\nbaseCommand: [fastp]\n\narguments:\n    - prefix: -o\n      valueFrom: $(inputs.fastq1.nameroot).fastp.fastq\n    - |\n      ${\n        if (inputs.fastq2){\n          return '-O';\n        } else {\n          return '';\n        }\n      }\n    - |\n      ${\n        if (inputs.fastq2){\n          return inputs.fastq2.nameroot + \".fastp.fastq\";\n        } else {\n          return '';\n        }\n      }\n\ninputs:\n    fastq1:\n      type: File\n      format:\n        - edam:format_1930 # FASTA\n        - edam:format_1931 # FASTQ\n      inputBinding:\n        prefix: -i\n    fastq2:\n      format:\n        - edam:format_1930 # FASTA\n        - edam:format_1931 # FASTQ\n      type: File?\n      inputBinding:\n        prefix: -I\n    threads:\n      type: int?\n      default: 1\n      inputBinding:\n        prefix: --thread\n    qualified_phred_quality:\n      type: int?\n      default: 20\n      inputBinding:\n        prefix: --qualified_quality_phred\n    unqualified_phred_quality:\n      type: int?\n      default: 20\n      inputBinding:\n        prefix: --unqualified_percent_limit\n    min_length_required:\n      type: int?\n      default: 50\n      inputBinding:\n        prefix: --length_required\n    force_polyg_tail_trimming:\n      type: boolean?\n      inputBinding:\n        prefix: --trim_poly_g\n    disable_trim_poly_g:\n      type: boolean?\n      default: true\n      inputBinding:\n        prefix: --disable_trim_poly_g\n    base_correction:\n      type: boolean?\n      default: true\n      inputBinding:\n        prefix: --correction\n    \n\n\noutputs:\n    out_fastq1:\n       type: File\n       format: $(inputs.fastq1.format)\n       outputBinding:\n           glob: $(inputs.fastq1.nameroot).fastp.fastq\n    out_fastq2:\n       type: File?\n       format: $(inputs.fastq2.format)\n       outputBinding:\n           glob: $(inputs.fastq2.nameroot).fastp.fastq\n    html_report:\n      type: File\n      outputBinding:\n        glob: fastp.html\n        outputEval: |\n           ${\n             self[0].basename = inputs.fastq1.nameroot + '_fastp.html';\n             return self[0]\n            }\n        \n    json_report:\n      type: File\n      outputBinding:\n        glob: fastp.json\n        outputEval: |\n           ${\n              self[0].basename = inputs.fastq1.nameroot + '_fastp.json';\n              return self[0]\n            }\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fastq1': {'type': 'File', 'format': ['edam:format_1930', 'edam:format_1931'], 'inputBinding': {'prefix': '-i'}}, 'fastq2': {'format': ['edam:format_1930', 'edam:format_1931'], 'type': 'File?', 'inputBinding': {'prefix': '-I'}}, 'threads': {'type': 'int?', 'default': 1, 'inputBinding': {'prefix': '--thread'}}, 'qualified_phred_quality': {'type': 'int?', 'default': 20, 'inputBinding': {'prefix': '--qualified_quality_phred'}}, 'unqualified_phred_quality': {'type': 'int?', 'default': 20, 'inputBinding': {'prefix': '--unqualified_percent_limit'}}, 'min_length_required': {'type': 'int?', 'default': 50, 'inputBinding': {'prefix': '--length_required'}}, 'force_polyg_tail_trimming': {'type': 'boolean?', 'inputBinding': {'prefix': '--trim_poly_g'}}, 'disable_trim_poly_g': {'type': 'boolean?', 'default': True, 'inputBinding': {'prefix': '--disable_trim_poly_g'}}, 'base_correction': {'type': 'boolean?', 'default': True, 'inputBinding': {'prefix': '--correction'}}}",
    "cwl_outputs": "{'out_fastq1': {'type': 'File', 'format': '$(inputs.fastq1.format)', 'outputBinding': {'glob': '$(inputs.fastq1.nameroot).fastp.fastq'}}, 'out_fastq2': {'type': 'File?', 'format': '$(inputs.fastq2.format)', 'outputBinding': {'glob': '$(inputs.fastq2.nameroot).fastp.fastq'}}, 'html_report': {'type': 'File', 'outputBinding': {'glob': 'fastp.html', 'outputEval': \"${\\n  self[0].basename = inputs.fastq1.nameroot + '_fastp.html';\\n  return self[0]\\n }\\n\"}}, 'json_report': {'type': 'File', 'outputBinding': {'glob': 'fastp.json', 'outputEval': \"${\\n   self[0].basename = inputs.fastq1.nameroot + '_fastp.json';\\n   return self[0]\\n }\\n\"}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/fastp:0.20.0--hdbcaa40_0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fastp']",
    "cwl_arguments": "[{'prefix': '-o', 'valueFrom': '$(inputs.fastq1.nameroot).fastp.fastq'}, \"${\\n  if (inputs.fastq2){\\n    return '-O';\\n  } else {\\n    return '';\\n  }\\n}\\n\", '${\\n  if (inputs.fastq2){\\n    return inputs.fastq2.nameroot + \".fastp.fastq\";\\n  } else {\\n    return \\'\\';\\n  }\\n}\\n']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Modified from https://github.com/nigyta/bact_genome/blob/master/cwl/tool/fastp/fastp.cwl\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/get_secondaryfiles.cwl",
    "sha": "94fcbddb77c76ad7bc5a064be4d4ca4fb1c54de4",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/get_secondaryfiles.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.sequence)\n      - $(inputs.bwa_index)\nbaseCommand: [ls]\ninputs:\n  sequence:\n    type: File\n    secondaryFiles: .fai\n\n  bwa_index:\n    type: File\n    secondaryFiles:\n      - $(self.nameroot).ann \n      - $(self.nameroot).amb\n      - $(self.nameroot).pac\n      - $(self.nameroot).sa\n    \noutputs:\n  sequences_with_index: \n    type: File\n    secondaryFiles: \n      - $(inputs.bwa_index.nameroot).bwt\n      - $(inputs.bwa_index.nameroot).sa\n      - $(inputs.bwa_index.nameroot).pac\n      - $(inputs.bwa_index.nameroot).ann\n      - $(inputs.bwa_index.nameroot).amb\n      - $(inputs.sequence.basename).fai\n    outputBinding:\n      glob: $(inputs.sequence.basename)\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'sequence': {'type': 'File', 'secondaryFiles': '.fai'}, 'bwa_index': {'type': 'File', 'secondaryFiles': ['$(self.nameroot).ann', '$(self.nameroot).amb', '$(self.nameroot).pac', '$(self.nameroot).sa']}}",
    "cwl_outputs": "{'sequences_with_index': {'type': 'File', 'secondaryFiles': ['$(inputs.bwa_index.nameroot).bwt', '$(inputs.bwa_index.nameroot).sa', '$(inputs.bwa_index.nameroot).pac', '$(inputs.bwa_index.nameroot).ann', '$(inputs.bwa_index.nameroot).amb', '$(inputs.sequence.basename).fai'], 'outputBinding': {'glob': '$(inputs.sequence.basename)'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ls']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.sequence)', '$(inputs.bwa_index)']}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/lofreq_call.cwl",
    "sha": "dfc8aebee10a2f6ceb89c056083e5115d02a4811",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/lofreq_call.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1\n\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - $(inputs.reference_index)\n      - $(inputs.reference_fasta)\n      - $(inputs.reads_index)\n\nbaseCommand: [lofreq, call-parallel]\n\narguments:\n  - prefix: --out\n    valueFrom: $(inputs.reads_align.nameroot)_variant.vcf\n    position: 99\n\ninputs:\n  threads:\n    type: int?\n    default: 1\n    inputBinding:\n      prefix: --pp-threads\n      position: 1\n  reference_index:\n    type: File\n  reference_fasta:\n    doc: 'fasta'\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: -f\n      position: 1000\n      valueFrom: $(self.basename)\n\n  call_indels:\n    type: boolean?\n    inputBinding:\n      prefix: --call-indels\n      position: 3\n    doc: \"Enable indel calls (note: preprocess your file to include indel alignment qualities!)\"\n\n  only_indels:\n    type: boolean?\n    inputBinding:\n      prefix: --only-indels\n      position: 4\n    doc: \"Only call indels; no SNVs\"\n\n  bed:\n    label: regions_from_bed\n    type: File?\n    doc: 'List of positions (chr pos) or regions (BED)'\n    inputBinding:\n      prefix: --bed\n\n  region:\n    type: string?\n    doc: 'Limit calls to this region (chrom:start-end)'\n    inputBinding:\n      prefix: --region\n\n  min_bq:\n    label: min_base_quality\n    type: int?\n    default: 6\n    inputBinding:\n      prefix: --min-bq\n    doc: 'Skip any base with baseQ smaller than INT [6]'\n\n  min_alt_bq:\n    label: min_alterne_base_quality\n    type: int?\n    default: 6\n    inputBinding:\n      prefix: --min-alt-bq\n    doc: 'Skip alternate bases with baseQ smaller than INT [6]'\n\n  def_alt_bq:\n    label: def_alt_base_quality\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --def-alt-bq\n    doc: 'Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]'\n\n  min_jq:\n    label: min_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix:  --min-jq\n    doc: 'Skip any base with joinedQ smaller than INT [0]'\n\n  min_alt_jq:\n    label: min_alt_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --min-alt-jq\n    doc: \"Skip alternate bases with joinedQ smaller than INT [0]\"\n\n  def_alt_jq:\n    label: def_alt_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --def-alt-jq\n    doc: \"Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]\"\n\n  no_baq:\n    label: disable_base_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --no-baq\n    doc: 'Disable use of base-alignment quality (BAQ)'\n\n  no_idaq:\n    label: disable_indel_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --no-idaq\n    doc: \"Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)\"\n\n  del_baq:\n    label: delete_base_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --del-baq\n    doc: \"Delete pre-existing BAQ values, i.e. compute even if already present in BAM\"\n\n  no_ext_base_alignment_quality:\n    type: boolean?\n    inputBinding:\n      prefix: --no-ext-baq\n    doc: \"Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)\"\n\n  min_mq:\n    label: min_mapping_quality\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --min-mq\n    doc: \"Skip reads with mapping quality smaller than INT [0]\"\n\n  max_mapping_quality:\n    type: int?\n    default: 255\n    inputBinding:\n      prefix: --max-mq\n    doc: \"Cap mapping quality at INT [255]\"\n\n  no_mapping_quality:\n    type: boolean?\n    inputBinding:\n      prefix: --no-mq\n    doc: \"Don't merge mapping quality in LoFreq's model\"\n\n  enable_source_qual:\n    type: boolean?\n    inputBinding:\n      prefix: --src-qual\n    doc: 'Enable computation of source quality'\n\n  ignore_vcf:\n    type: File[]?\n    inputBinding:\n      prefix: --ign-vcf\n    doc: \"Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas\"\n\n  replace_non_match:\n    type: int?\n    default: -1\n    inputBinding:\n      prefix: --def-nm-q\n    doc: 'If >= 0, then replace non-match base qualities with this default value [-1]'\n\n  pvalue_cutoff:\n    type: float?\n    default: 0.01\n    inputBinding:\n      prefix: --sig\n    doc: \"P-Value cutoff / significance level [0.010000]\"\n\n  bonferroni:\n    type: string?\n    default: 'dynamic'\n    inputBinding:\n      prefix: --bonf\n    doc: \"Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']\"\n\n  min_cov:\n    type: int?\n    default: 10\n    inputBinding:\n      prefix: --min-cov\n      position: 2\n    doc: \"Test only positions having at least this coverage [1] (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)\"\n\n  max_depth_cov:\n    type: int?\n    default: 1000000\n    inputBinding:\n      prefix: --max-depth\n    doc: \"Cap coverage at this depth [1000000]\"\n\n  illumina_1_3:\n    type: boolean?\n    inputBinding:\n      prefix: --illumina-1.3\n    doc: \"Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded\"\n\n  use_orphan:\n    type: boolean?\n    inputBinding:\n      prefix: --use-orphan\n    doc: \"Count anomalous read pairs (i.e. where mate is not aligned properly)\"\n\n  no_default_filter:\n    type: boolean?\n    doc: \"Don't run default lofreq filter automatically after calling variants\"\n    inputBinding:\n      prefix: --no-default-filter\n    # Other options \n    # --plp-summary-only      No variant calling. Just output pileup summary per column\n    # --force-overwrite       Overwrite any existing output\n    # --verbose               Be verbose\n    # --debug                 Enable debugging\n\n  reads_align:\n    doc: 'bam'\n    type: File\n    format: edam:format_2572  # BAM\n    inputBinding:\n      position: 1001\n      valueFrom: $(self.basename)\n\n  reads_index:\n    doc: bai\n    type: File\n\noutputs:\n  vcf:\n    type: File\n    format: edam:format_3016  # VCF\n    outputBinding:\n      glob: \"*.vcf\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'threads': {'type': 'int?', 'default': 1, 'inputBinding': {'prefix': '--pp-threads', 'position': 1}}, 'reference_index': {'type': 'File'}, 'reference_fasta': {'doc': 'fasta', 'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'prefix': '-f', 'position': 1000, 'valueFrom': '$(self.basename)'}}, 'call_indels': {'type': 'boolean?', 'inputBinding': {'prefix': '--call-indels', 'position': 3}, 'doc': 'Enable indel calls (note: preprocess your file to include indel alignment qualities!)'}, 'only_indels': {'type': 'boolean?', 'inputBinding': {'prefix': '--only-indels', 'position': 4}, 'doc': 'Only call indels; no SNVs'}, 'bed': {'label': 'regions_from_bed', 'type': 'File?', 'doc': 'List of positions (chr pos) or regions (BED)', 'inputBinding': {'prefix': '--bed'}}, 'region': {'type': 'string?', 'doc': 'Limit calls to this region (chrom:start-end)', 'inputBinding': {'prefix': '--region'}}, 'min_bq': {'label': 'min_base_quality', 'type': 'int?', 'default': 6, 'inputBinding': {'prefix': '--min-bq'}, 'doc': 'Skip any base with baseQ smaller than INT [6]'}, 'min_alt_bq': {'label': 'min_alterne_base_quality', 'type': 'int?', 'default': 6, 'inputBinding': {'prefix': '--min-alt-bq'}, 'doc': 'Skip alternate bases with baseQ smaller than INT [6]'}, 'def_alt_bq': {'label': 'def_alt_base_quality', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--def-alt-bq'}, 'doc': 'Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]'}, 'min_jq': {'label': 'min_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-jq'}, 'doc': 'Skip any base with joinedQ smaller than INT [0]'}, 'min_alt_jq': {'label': 'min_alt_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-alt-jq'}, 'doc': 'Skip alternate bases with joinedQ smaller than INT [0]'}, 'def_alt_jq': {'label': 'def_alt_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--def-alt-jq'}, 'doc': 'Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]'}, 'no_baq': {'label': 'disable_base_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--no-baq'}, 'doc': 'Disable use of base-alignment quality (BAQ)'}, 'no_idaq': {'label': 'disable_indel_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--no-idaq'}, 'doc': \"Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)\"}, 'del_baq': {'label': 'delete_base_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--del-baq'}, 'doc': 'Delete pre-existing BAQ values, i.e. compute even if already present in BAM'}, 'no_ext_base_alignment_quality': {'type': 'boolean?', 'inputBinding': {'prefix': '--no-ext-baq'}, 'doc': \"Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)\"}, 'min_mq': {'label': 'min_mapping_quality', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-mq'}, 'doc': 'Skip reads with mapping quality smaller than INT [0]'}, 'max_mapping_quality': {'type': 'int?', 'default': 255, 'inputBinding': {'prefix': '--max-mq'}, 'doc': 'Cap mapping quality at INT [255]'}, 'no_mapping_quality': {'type': 'boolean?', 'inputBinding': {'prefix': '--no-mq'}, 'doc': \"Don't merge mapping quality in LoFreq's model\"}, 'enable_source_qual': {'type': 'boolean?', 'inputBinding': {'prefix': '--src-qual'}, 'doc': 'Enable computation of source quality'}, 'ignore_vcf': {'type': 'File[]?', 'inputBinding': {'prefix': '--ign-vcf'}, 'doc': 'Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas'}, 'replace_non_match': {'type': 'int?', 'default': -1, 'inputBinding': {'prefix': '--def-nm-q'}, 'doc': 'If >= 0, then replace non-match base qualities with this default value [-1]'}, 'pvalue_cutoff': {'type': 'float?', 'default': 0.01, 'inputBinding': {'prefix': '--sig'}, 'doc': 'P-Value cutoff / significance level [0.010000]'}, 'bonferroni': {'type': 'string?', 'default': 'dynamic', 'inputBinding': {'prefix': '--bonf'}, 'doc': \"Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']\"}, 'min_cov': {'type': 'int?', 'default': 10, 'inputBinding': {'prefix': '--min-cov', 'position': 2}, 'doc': 'Test only positions having at least this coverage [1] (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)'}, 'max_depth_cov': {'type': 'int?', 'default': 1000000, 'inputBinding': {'prefix': '--max-depth'}, 'doc': 'Cap coverage at this depth [1000000]'}, 'illumina_1_3': {'type': 'boolean?', 'inputBinding': {'prefix': '--illumina-1.3'}, 'doc': 'Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded'}, 'use_orphan': {'type': 'boolean?', 'inputBinding': {'prefix': '--use-orphan'}, 'doc': 'Count anomalous read pairs (i.e. where mate is not aligned properly)'}, 'no_default_filter': {'type': 'boolean?', 'doc': \"Don't run default lofreq filter automatically after calling variants\", 'inputBinding': {'prefix': '--no-default-filter'}}, 'reads_align': {'doc': 'bam', 'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {'position': 1001, 'valueFrom': '$(self.basename)'}}, 'reads_index': {'doc': 'bai', 'type': 'File'}}",
    "cwl_outputs": "{'vcf': {'type': 'File', 'format': 'edam:format_3016', 'outputBinding': {'glob': '*.vcf'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lofreq', 'call-parallel']",
    "cwl_arguments": "[{'prefix': '--out', 'valueFrom': '$(inputs.reads_align.nameroot)_variant.vcf', 'position': 99}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/lofreq_viterbi.cwl",
    "sha": "24c212c10564e095d164ef3f9a9879a2b113df00",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/lofreq_viterbi.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: \"viterbi: Viterbi realignment\"\ndoc: |\n  Probabilistic realignment of your already mapped reads, which corrects\n  mapping errors (run right after mapping). Not recommended for non-Illumina\n  data.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference)\n    \nbaseCommand: [lofreq, viterbi]\n\narguments:\n  - prefix: --out\n    valueFrom: $(inputs.reads.nameroot)_realigned.bam\n\ninputs:\n  reference:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: --ref\n      \n  reads:  \n    type: File\n    format: edam:format_2572  # BAM\n    inputBinding: {}\n\n  keepflags:\n    type: boolean?\n    label: Don't delete flags MC, MD, NM, and A?\n    doc: |\n      These flags are all prone to getting invalidated during realignment.\n      Keep them only if you know what you are doing.\n    inputBinding:\n      prefix: --keepflags\n    default: false\n      \n  defqual:\n    type: int?\n    inputBinding:\n      prefix: --defqual\noutputs:\n  realigned:\n    type: File\n    format: edam:format_2572  # BAM\n    outputBinding:\n      glob: $(inputs.reads.nameroot)_realigned.bam\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference': {'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'prefix': '--ref'}}, 'reads': {'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {}}, 'keepflags': {'type': 'boolean?', 'label': \"Don't delete flags MC, MD, NM, and A?\", 'doc': 'These flags are all prone to getting invalidated during realignment.\\nKeep them only if you know what you are doing.\\n', 'inputBinding': {'prefix': '--keepflags'}, 'default': False}, 'defqual': {'type': 'int?', 'inputBinding': {'prefix': '--defqual'}}}",
    "cwl_outputs": "{'realigned': {'type': 'File', 'format': 'edam:format_2572', 'outputBinding': {'glob': '$(inputs.reads.nameroot)_realigned.bam'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lofreq', 'viterbi']",
    "cwl_arguments": "[{'prefix': '--out', 'valueFrom': '$(inputs.reads.nameroot)_realigned.bam'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.reference)']}}",
    "cwl_doc": "Probabilistic realignment of your already mapped reads, which corrects\nmapping errors (run right after mapping). Not recommended for non-Illumina\ndata.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "viterbi: Viterbi realignment",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/mergetab.cwl",
    "sha": "9f5853f0dc0257316b57ed0f22cd1e9ad28f7671",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/mergetab.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nrequirements:\n  InlineJavascriptRequirement: {}\nbaseCommand: [ls]\ninputs:\n  out_fastq1: File\n  out_fastq2: File\noutputs:\n  tab:\n    type: File[]\n    outputBinding:\n      outputEval: |\n              ${var tab=[]\n                tab.push(inputs.out_fastq1)\n                tab.push(inputs.out_fastq2)\n                return tab;\n               } \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'out_fastq1': 'File', 'out_fastq2': 'File'}",
    "cwl_outputs": "{'tab': {'type': 'File[]', 'outputBinding': {'outputEval': '${var tab=[]\\n  tab.push(inputs.out_fastq1)\\n  tab.push(inputs.out_fastq2)\\n  return tab;\\n } \\n'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ls']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/multiqc.cwl",
    "sha": "71e2b5a5d68dd9d5303c7dc7e44b2b1e6db81ddb",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/multiqc.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Run multiqc on log files from supported bioinformatic tools.\n  26/04/2020: Fixed output filenames, added support for a single input file in qc_files_array (Miguel Boland)\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    # This step is necessary since the input files\n    # must be loaded into the working directory as there\n    # is no way to specify the input file directly on the\n    # command line.\n    listing: |\n      ${// script merges the to input arrays\n        // into one array that fulfills the type \n        // requirement for \"listing\", which is\n        // \"{type: array, items: [File, Directory]}\"\n\n        var qc_files_array = inputs.qc_files_array;\n        var qc_files_array_of_array = inputs.qc_files_array_of_array;\n        var output_array = [];\n\n        // add items of the qc_files_array to the output_array\n        if ( qc_files_array != null ){\n          // Fix to allow single qc_file_array\n          if (qc_files_array.length === undefined){\n            output_array.push(qc_files_array)\n          } else {\n            for (var i=0; i<qc_files_array.length; i++){\n              output_array.push(qc_files_array[i])\n            }\n          }\n        }\n\n        // add items of the qc_files_array_of_array to the output_array\n        if ( qc_files_array_of_array != null ){\n          for (var i=0; i<qc_files_array_of_array.length; i++){ \n            for (var ii=0; ii<qc_files_array_of_array[i].length; ii++){\n              output_array.push(qc_files_array_of_array[i][ii])\n            }\n          }\n        }\n\n        return output_array\n      }\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/multiqc:1.7\n  \n\nbaseCommand: [\"multiqc\"]\narguments:\n  - valueFrom: --zip-data-dir\n    position: 1\n  - valueFrom: \"log_filesize_limit: 100000000\"\n    position: 1\n    prefix: --cl_config\n  - valueFrom: $(runtime.outdir)\n    position: 2\n    prefix: --outdir\n  - valueFrom: $(runtime.outdir)\n    position: 4\n  \ninputs:\n  qc_files_array:\n    doc: |\n      qc files which shall be part of the multiqc summary;\n      optional, only one of qc_files_array or qc_files_array_of_array \n      must be provided\n    type:\n      - \"null\"\n      - File\n      - type: array\n        items: File\n  qc_files_array_of_array:\n    doc: |\n      qc files which shall be part of the multiqc summary;\n      optional, only one of qc_files_array or qc_files_array_of_array \n      must be provided\n    type:\n      - \"null\"\n      - type: array\n        items: \n          type: array\n          items: File\n  report_name:\n    doc: name used for the html report and the corresponding zip file\n    type: string\n    default: multiqc\n    inputBinding:\n      prefix: --filename\n      position: 3\n      \noutputs:\n  multiqc_zip:\n    type: File\n    outputBinding:\n      glob: $(inputs.report_name)_data.zip\n  multiqc_html:\n    type: File\n    outputBinding:\n      glob: $(inputs.report_name).html\n  diree:\n    type: Directory\n    outputBinding:\n      glob: .\n#  multiqc_json:\n#    type: File\n#    outputBinding:\n#      glob: multiqc_data/$(inputs.report_name).json\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'qc_files_array': {'doc': 'qc files which shall be part of the multiqc summary;\\noptional, only one of qc_files_array or qc_files_array_of_array \\nmust be provided\\n', 'type': ['null', 'File', {'type': 'array', 'items': 'File'}]}, 'qc_files_array_of_array': {'doc': 'qc files which shall be part of the multiqc summary;\\noptional, only one of qc_files_array or qc_files_array_of_array \\nmust be provided\\n', 'type': ['null', {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}]}, 'report_name': {'doc': 'name used for the html report and the corresponding zip file', 'type': 'string', 'default': 'multiqc', 'inputBinding': {'prefix': '--filename', 'position': 3}}}",
    "cwl_outputs": "{'multiqc_zip': {'type': 'File', 'outputBinding': {'glob': '$(inputs.report_name)_data.zip'}}, 'multiqc_html': {'type': 'File', 'outputBinding': {'glob': '$(inputs.report_name).html'}}, 'diree': {'type': 'Directory', 'outputBinding': {'glob': '.'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 10000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/multiqc:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['multiqc']",
    "cwl_arguments": "[{'valueFrom': '--zip-data-dir', 'position': 1}, {'valueFrom': 'log_filesize_limit: 100000000', 'position': 1, 'prefix': '--cl_config'}, {'valueFrom': '$(runtime.outdir)', 'position': 2, 'prefix': '--outdir'}, {'valueFrom': '$(runtime.outdir)', 'position': 4}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': '${// script merges the to input arrays\\n  // into one array that fulfills the type \\n  // requirement for \"listing\", which is\\n  // \"{type: array, items: [File, Directory]}\"\\n\\n  var qc_files_array = inputs.qc_files_array;\\n  var qc_files_array_of_array = inputs.qc_files_array_of_array;\\n  var output_array = [];\\n\\n  // add items of the qc_files_array to the output_array\\n  if ( qc_files_array != null ){\\n    // Fix to allow single qc_file_array\\n    if (qc_files_array.length === undefined){\\n      output_array.push(qc_files_array)\\n    } else {\\n      for (var i=0; i<qc_files_array.length; i++){\\n        output_array.push(qc_files_array[i])\\n      }\\n    }\\n  }\\n\\n  // add items of the qc_files_array_of_array to the output_array\\n  if ( qc_files_array_of_array != null ){\\n    for (var i=0; i<qc_files_array_of_array.length; i++){ \\n      for (var ii=0; ii<qc_files_array_of_array[i].length; ii++){\\n        output_array.push(qc_files_array_of_array[i][ii])\\n      }\\n    }\\n  }\\n\\n  return output_array\\n}\\n'}}",
    "cwl_doc": "Run multiqc on log files from supported bioinformatic tools.\n26/04/2020: Fixed output filenames, added support for a single input file in qc_files_array (Miguel Boland)\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/picard_MarkDuplicates.cwl",
    "sha": "a5a26de7996a256844ffedeabce8d7cb391cc21e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/picard_MarkDuplicates.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Removal of duplicates from aligned reads.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\n \nbaseCommand: [ picard, MarkDuplicates ]\n\narguments:\n  - OUTPUT=$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)\n  - METRICS_FILE=$(inputs.alignments.nameroot)_markduplicates.metrics\n\nstderr: $(inputs.alignments.nameroot).markduplicates.log\n\ninputs:\n  alignments:\n    doc: SAM or BAM format alignment file\n    format:\n      - edam:format_2573  # SAM\n      - edam:format_2572  # BAM\n    type: File\n    inputBinding:\n      prefix: \"INPUT=\"\n      separate: false\n\n  alignments_are_sorted:\n    type: boolean\n    inputBinding:\n      prefix: ASSUME_SORTED=TRUE\n\n  remove_duplicates:\n    doc: |\n     If true do not write duplicates to the output file instead of writing them\n     with appropriate flags set.\n    type: boolean\n    inputBinding:\n      prefix: REMOVE_DUPLICATES=TRUE\n\n  validation_stringency:\n    type:\n     - 'null'\n     - type: enum\n       symbols:\n        - STRICT\n        - LENIENT\n        - SILENT\n    inputBinding:\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n\n  comment:\n    doc: Comment(s) to include in the output file's header\n    type:\n     - 'null'\n     - type: array\n       items: string\n       inputBinding:\n         prefix: COMMENT=\n         separate: false\n  duplicate_scoring_strategy:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n    inputBinding:\n      prefix: DUPLICATE_SCORING_STRATEGY=\n      separate: false\n  read_name_regex:\n    type: string?\n    inputBinding:\n      prefix: READ_NAME_REGEX=\n      separate: false\n  optical_duplicate_pixel_distance:\n    type: int?\n    default: 100\n    doc: '(0;500)'\n    inputBinding:\n      prefix: OPTICAL_DUPLICATE_PIXEL_DISTANCE=\n      separate: false\n  barcode_tag:\n    type: string?\n    inputBinding:\n      prefix: BARCODE_TAG=\n      separate: false\noutputs:\n  alignments:\n    type: File\n    format: $(inputs.alignments.format)\n    outputBinding:\n      glob: $(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)\n  log:\n    type: stderr\n  metrics:\n    type: File\n    outputBinding:\n      glob: $(inputs.alignments.nameroot)_markduplicates.metrics\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'alignments': {'doc': 'SAM or BAM format alignment file', 'format': ['edam:format_2573', 'edam:format_2572'], 'type': 'File', 'inputBinding': {'prefix': 'INPUT=', 'separate': False}}, 'alignments_are_sorted': {'type': 'boolean', 'inputBinding': {'prefix': 'ASSUME_SORTED=TRUE'}}, 'remove_duplicates': {'doc': 'If true do not write duplicates to the output file instead of writing them\\nwith appropriate flags set.\\n', 'type': 'boolean', 'inputBinding': {'prefix': 'REMOVE_DUPLICATES=TRUE'}}, 'validation_stringency': {'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}], 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}}, 'comment': {'doc': \"Comment(s) to include in the output file's header\", 'type': ['null', {'type': 'array', 'items': 'string', 'inputBinding': {'prefix': 'COMMENT=', 'separate': False}}]}, 'duplicate_scoring_strategy': {'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}], 'inputBinding': {'prefix': 'DUPLICATE_SCORING_STRATEGY=', 'separate': False}}, 'read_name_regex': {'type': 'string?', 'inputBinding': {'prefix': 'READ_NAME_REGEX=', 'separate': False}}, 'optical_duplicate_pixel_distance': {'type': 'int?', 'default': 100, 'doc': '(0;500)', 'inputBinding': {'prefix': 'OPTICAL_DUPLICATE_PIXEL_DISTANCE=', 'separate': False}}, 'barcode_tag': {'type': 'string?', 'inputBinding': {'prefix': 'BARCODE_TAG=', 'separate': False}}}",
    "cwl_outputs": "{'alignments': {'type': 'File', 'format': '$(inputs.alignments.format)', 'outputBinding': {'glob': '$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)'}}, 'log': {'type': 'stderr'}, 'metrics': {'type': 'File', 'outputBinding': {'glob': '$(inputs.alignments.nameroot)_markduplicates.metrics'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'MarkDuplicates']",
    "cwl_arguments": "['OUTPUT=$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)', 'METRICS_FILE=$(inputs.alignments.nameroot)_markduplicates.metrics']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": "Removal of duplicates from aligned reads.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "$(inputs.alignments.nameroot).markduplicates.log",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/picard_SortSam.cwl",
    "sha": "855d069305a6233c0cc1acd8eb13fb86621d600b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/picard_SortSam.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\nrequirements:\n  InlineJavascriptRequirement: {}\n\nbaseCommand: [ picard, SortSam ]\n\narguments:\n  - prefix: OUTPUT=\n    separate: false\n    valueFrom: |\n      ${ if(inputs.sort_order == \"coordinate\") { return (inputs.alignments.nameroot)+\".bam\";} else { return (inputs.alignments.nameroot)+\".sam\"; } }\n\ninputs:\n  alignments:\n    type: File\n    inputBinding:\n      prefix: INPUT=\n      separate: false\n\n  sort_order:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n    default: coordinate\n    doc: 'coordinate (bam) or queryname (sam)'\n    inputBinding:\n      prefix: SORT_ORDER=\n      separate: false\n\n  validation_stringency:\n    default: LENIENT\n    doc: Validation stringency for all SAM files read by this program.  Setting stringency\n      to SILENT can improve performance when processing a BAM file in which variable-length\n      data (read, qualities, tags) do not otherwise need to be decoded.\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - STRICT\n      - LENIENT\n      - SILENT\n    inputBinding:\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n\noutputs:\n  sorted_alignments:\n    type: File\n    format: |-\n      ${ if(inputs.sort_order == \"coordinate\") { return \"http://edamontology.org/format_2572\";} else { return \"http://edamontology.org/format_2573\"; } }\n    outputBinding:\n      glob: '*.*am'\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'alignments': {'type': 'File', 'inputBinding': {'prefix': 'INPUT=', 'separate': False}}, 'sort_order': {'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}], 'default': 'coordinate', 'doc': 'coordinate (bam) or queryname (sam)', 'inputBinding': {'prefix': 'SORT_ORDER=', 'separate': False}}, 'validation_stringency': {'default': 'LENIENT', 'doc': 'Validation stringency for all SAM files read by this program.  Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded.', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}], 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}}}",
    "cwl_outputs": "{'sorted_alignments': {'type': 'File', 'format': '${ if(inputs.sort_order == \"coordinate\") { return \"http://edamontology.org/format_2572\";} else { return \"http://edamontology.org/format_2573\"; } }', 'outputBinding': {'glob': '*.*am'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'SortSam']",
    "cwl_arguments": "[{'prefix': 'OUTPUT=', 'separate': False, 'valueFrom': '${ if(inputs.sort_order == \"coordinate\") { return (inputs.alignments.nameroot)+\".bam\";} else { return (inputs.alignments.nameroot)+\".sam\"; } }\\n'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_faidx.cwl",
    "sha": "71b673244082637c43512f8609cdb6589c656b28",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_faidx.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.2-0\nrequirements:\n  InitialWorkDirRequirement:\n    listing: [ $(inputs.sequences) ]\n\nbaseCommand: [ samtools, faidx ]\n\ninputs:\n  sequences:\n    type: File\n    doc: Input FASTA file\n    format: edam:format_1929\n\narguments:\n   - $(inputs.sequences.basename)\n\noutputs:\n  sequences_with_index:\n    type: File\n    format: $(inputs.sequences.format)\n    secondaryFiles:\n     - .fai\n    outputBinding:\n      glob: $(inputs.sequences.basename)\n  sequences_index:\n    type: File\n    outputBinding:\n      glob: $(inputs.sequences.basename).fai\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'sequences': {'type': 'File', 'doc': 'Input FASTA file', 'format': 'edam:format_1929'}}",
    "cwl_outputs": "{'sequences_with_index': {'type': 'File', 'format': '$(inputs.sequences.format)', 'secondaryFiles': ['.fai'], 'outputBinding': {'glob': '$(inputs.sequences.basename)'}}, 'sequences_index': {'type': 'File', 'outputBinding': {'glob': '$(inputs.sequences.basename).fai'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/samtools:1.2-0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'faidx']",
    "cwl_arguments": "['$(inputs.sequences.basename)']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.sequences)']}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_index.cwl",
    "sha": "40ca889caec96fa1d5a6ee7f9147cade35b9515b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Indexing BAM.\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing: \n      - $(inputs.bam_sorted)\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [\"samtools\", \"index\"]\narguments:\n  - valueFrom: -b  # specifies that index is created in bai format\n    position: 1\n\ninputs:\n  bam_sorted:\n    doc: sorted bam input file\n    type: File\n    inputBinding:\n      position: 2\n\noutputs:\n  bam_sorted_indexed:\n    type: File\n    secondaryFiles: .bai\n    outputBinding:\n      glob: $(inputs.bam_sorted.basename)\n      \n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam_sorted': {'doc': 'sorted bam input file', 'type': 'File', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'bam_sorted_indexed': {'type': 'File', 'secondaryFiles': '.bai', 'outputBinding': {'glob': '$(inputs.bam_sorted.basename)'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'index']",
    "cwl_arguments": "[{'valueFrom': '-b', 'position': 1}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.bam_sorted)']}}",
    "cwl_doc": "Indexing BAM.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_sort.cwl",
    "sha": "36f47b4a01ceff3c15f1b9a28b324fe128a520e0",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_sort.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: Sort a bam file by read names.\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 4\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [\"samtools\", \"sort\"]\narguments:\n  - valueFrom: $(runtime.cores)\n    prefix: -@\n  - prefix: -m\n    valueFrom: ${ return(parseInt(runtime.ram/runtime.cores-100).toString() + \"M\") }\n    position: 1\n    # specifies the allowed maximal memory usage per thread before\n    # samtools start to outsource memory to temporary files\n\ninputs:\n  bam_unsorted:\n    doc: aligned reads to be checked in sam or bam format\n    type: File\n    format: edam:format_2572\n    inputBinding:\n      position: 2\n  by_name:\n    doc: If true, will sort by name, otherwise will sort by genomic position\n    type: boolean\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -n\n\nstdout: $(inputs.bam_unsorted.basename)\n\noutputs:\n  bam_sorted:\n    type: stdout\n    format: edam:format_2572 \n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam_unsorted': {'doc': 'aligned reads to be checked in sam or bam format', 'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {'position': 2}}, 'by_name': {'doc': 'If true, will sort by name, otherwise will sort by genomic position', 'type': 'boolean', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-n'}}}",
    "cwl_outputs": "{'bam_sorted': {'type': 'stdout', 'format': 'edam:format_2572'}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 4, 'ramMin': 15000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'sort']",
    "cwl_arguments": "[{'valueFrom': '$(runtime.cores)', 'prefix': '-@'}, {'prefix': '-m', 'valueFrom': '${ return(parseInt(runtime.ram/runtime.cores-100).toString() + \"M\") }', 'position': 1}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Sort a bam file by read names.",
    "cwl_stdout": "$(inputs.bam_unsorted.basename)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_stats.cwl",
    "sha": "bb226314e690f8758157e4b51dac9fec54286fcd",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_stats.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand: [samtools, stats]\nrequirements:\n- class: DockerRequirement\n  dockerPull: biocontainers/samtools:v1.7.0_cv3\n\ninputs:\n  input_file:\n    type: File\n    format: \n      - edam:format_2572  # BAM\n      - edam:format_2573  # SAM\n      - edam:format_3462  # CRAM\n    inputBinding:\n      position: 100\n  coverage:\n    type:\n      - 'null'\n      - type: record\n        name: coverage_parameters\n        fields:\n          min_cov:\n            type: int\n          max_cov:\n            type: int\n          step_cov:\n            type: int\n    inputBinding:\n      prefix: --coverage\n    doc: \"Set coverage distribution to the specified range (MIN, MAX, STEP all given as integers) [1,1000,1]\"\n  remove_dups:\n    type: boolean?\n    doc: \"Exclude from statistics reads marked as duplicates\"\n    inputBinding:\n      prefix: --remove_dups\n\n  required_flag:\n    type:\n      - string\n      - int\n      - \"null\"\n    default: 0\n    doc: \" STR|INT Required flag, 0 for unset. See also `samtools flags` [0] \"\n    inputBinding:\n      prefix: -f\n\n  filtering_flag:\n    type:\n      - string\n      - int\n      - \"null\"\n    default: 0\n    doc: \"STR|INT Filtering flag, 0 for unset. See also `samtools flags` [0] \"\n    inputBinding:\n      prefix: -F\n\n  GC_depth:\n    type: float?\n    doc: \"the size of GC-depth bins (decreasing bin size increases memory requirement) [2e4] \"\n    inputBinding:\n      prefix: --GC-depth\n\n  max_insert_size:\n    type: int?\n    doc: \"Maximum insert size [8000]\"\n    inputBinding:\n      prefix: -i\n\n  listed_group:\n    type: string?\n    doc: \"Include only listed read group or sample name [] \"\n    inputBinding:\n      prefix: --id\n\n  read_length:\n    type: int?\n    doc: \"Include in the statistics only reads with the given read length [-1]\"\n    inputBinding:\n      prefix: -l\n\n  most_inserts:\n    type: float?\n    doc: \"Report only the main part of inserts [0.99] \"\n    inputBinding:\n      prefix: -m\n\n  split_prefix:\n    type: string?\n    doc:  \"A path or string prefix to prepend to filenames output when creating categorised statistics files with -S/--split. [input filename]\"\n    inputBinding:\n      prefix: -P\n\n  trim_quality:\n    type: int?\n    doc: \"The BWA trimming parameter [0] \"\n    inputBinding:\n      prefix: -q\n\n  ref_seq:\n    type: File?\n    doc: \"Reference sequence (required for GC-depth and mismatches-per-cycle calculation). [] \"\n    inputBinding:\n      prefix: -r\n\n  split:\n    type: string?\n    doc: \"In addition to the complete statistics, also output categorised statistics based on the tagged field TAG (e.g., use --split RG to split into read groups).    Categorised statistics are written to files named <prefix>_<value>.bamstat, where prefix is as given by --split-prefix (or the input filename by default) and value has been encountered as the specified tagged field's value in one or more alignment records. \"\n    inputBinding:\n      prefix: --split\n\n  target_regions:\n    type: File?\n    doc: \"Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive. []\"\n    inputBinding:\n      prefix: --target-regions\n  sparse:\n    type: boolean?\n    doc: \"Suppress outputting IS rows where there are no insertions.\"\n    inputBinding:\n      prefix: --sparse\n  remove_overlaps:\n    type: boolean?\n    doc: \"Remove overlaps of paired-end reads from coverage and base count computations. \"\n    inputBinding:\n      prefix: --remove-overlaps\n  cov_threshold:\n    type: int?\n    doc: \"Only bases with coverage above this value will be included in the target percentage computation [0] \"\n    inputBinding:\n      prefix: -g\n\narguments:\n  - prefix: --threads\n    valueFrom: $(runtime.cores)  \n    \n# -X\n#     If this option is set, it will allows user to specify customized index file location(s) if the data folder does not contain any index file. Example usage: samtools stats [options] -X /data_folder/data.bam /index_folder/data.bai chrM:1-10\n\noutputs:\n  stats:\n    type: File\n    outputBinding:\n      glob: $(inputs.input_file.nameroot).stats.txt\nstdout: $(inputs.input_file.nameroot).stats.txt\n\n$namespaces: { edam: http://edamontology.org/, iana: https://www.iana.org/assignments/media-types/ }\n$schemas:\n  - 'http://edamontology.org/EDAM_1.18.owl'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'input_file': {'type': 'File', 'format': ['edam:format_2572', 'edam:format_2573', 'edam:format_3462'], 'inputBinding': {'position': 100}}, 'coverage': {'type': ['null', {'type': 'record', 'name': 'coverage_parameters', 'fields': {'min_cov': {'type': 'int'}, 'max_cov': {'type': 'int'}, 'step_cov': {'type': 'int'}}}], 'inputBinding': {'prefix': '--coverage'}, 'doc': 'Set coverage distribution to the specified range (MIN, MAX, STEP all given as integers) [1,1000,1]'}, 'remove_dups': {'type': 'boolean?', 'doc': 'Exclude from statistics reads marked as duplicates', 'inputBinding': {'prefix': '--remove_dups'}}, 'required_flag': {'type': ['string', 'int', 'null'], 'default': 0, 'doc': ' STR|INT Required flag, 0 for unset. See also `samtools flags` [0] ', 'inputBinding': {'prefix': '-f'}}, 'filtering_flag': {'type': ['string', 'int', 'null'], 'default': 0, 'doc': 'STR|INT Filtering flag, 0 for unset. See also `samtools flags` [0] ', 'inputBinding': {'prefix': '-F'}}, 'GC_depth': {'type': 'float?', 'doc': 'the size of GC-depth bins (decreasing bin size increases memory requirement) [2e4] ', 'inputBinding': {'prefix': '--GC-depth'}}, 'max_insert_size': {'type': 'int?', 'doc': 'Maximum insert size [8000]', 'inputBinding': {'prefix': '-i'}}, 'listed_group': {'type': 'string?', 'doc': 'Include only listed read group or sample name [] ', 'inputBinding': {'prefix': '--id'}}, 'read_length': {'type': 'int?', 'doc': 'Include in the statistics only reads with the given read length [-1]', 'inputBinding': {'prefix': '-l'}}, 'most_inserts': {'type': 'float?', 'doc': 'Report only the main part of inserts [0.99] ', 'inputBinding': {'prefix': '-m'}}, 'split_prefix': {'type': 'string?', 'doc': 'A path or string prefix to prepend to filenames output when creating categorised statistics files with -S/--split. [input filename]', 'inputBinding': {'prefix': '-P'}}, 'trim_quality': {'type': 'int?', 'doc': 'The BWA trimming parameter [0] ', 'inputBinding': {'prefix': '-q'}}, 'ref_seq': {'type': 'File?', 'doc': 'Reference sequence (required for GC-depth and mismatches-per-cycle calculation). [] ', 'inputBinding': {'prefix': '-r'}}, 'split': {'type': 'string?', 'doc': \"In addition to the complete statistics, also output categorised statistics based on the tagged field TAG (e.g., use --split RG to split into read groups).    Categorised statistics are written to files named <prefix>_<value>.bamstat, where prefix is as given by --split-prefix (or the input filename by default) and value has been encountered as the specified tagged field's value in one or more alignment records. \", 'inputBinding': {'prefix': '--split'}}, 'target_regions': {'type': 'File?', 'doc': 'Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive. []', 'inputBinding': {'prefix': '--target-regions'}}, 'sparse': {'type': 'boolean?', 'doc': 'Suppress outputting IS rows where there are no insertions.', 'inputBinding': {'prefix': '--sparse'}}, 'remove_overlaps': {'type': 'boolean?', 'doc': 'Remove overlaps of paired-end reads from coverage and base count computations. ', 'inputBinding': {'prefix': '--remove-overlaps'}}, 'cov_threshold': {'type': 'int?', 'doc': 'Only bases with coverage above this value will be included in the target percentage computation [0] ', 'inputBinding': {'prefix': '-g'}}}",
    "cwl_outputs": "{'stats': {'type': 'File', 'outputBinding': {'glob': '$(inputs.input_file.nameroot).stats.txt'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'stats']",
    "cwl_arguments": "[{'prefix': '--threads', 'valueFrom': '$(runtime.cores)'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.input_file.nameroot).stats.txt",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/samtools_view_filter.cwl",
    "sha": "b6662414399cd0446c927848c423c4440b7fe224",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_view_filter.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [samtools, view]\ninputs:\n  bam:\n    format: edam:format_2572\n    doc: aligned reads to be checked in bam format\n    type: File\n    inputBinding:\n      position: 10\n\n  count:\n    type: boolean?\n    default: true\n    doc: \"Instead of printing the alignments, only count them and print the total number.\"\n    inputBinding:\n      position: 1\n      prefix: -c\n  exclude_unmapped:\n    type: boolean?\n    default: true\n    inputBinding:\n      valueFrom: \"4\"\n      prefix: -F\n      position: 1\n\n  is_paired_end:\n    doc: if paired end, only properly paired reads pass\n    type: boolean\n    default: true\n\n  min_mapping_quality:\n    doc: Reads with a mapping quality below this will be excluded\n    type: int?\n    default: 20\n    inputBinding:\n      position: 1\n      prefix: -q\n\n\n  header:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - include\n          - exclude\n          - only\n    default: include\n    inputBinding:\n        valueFrom: |\n            ${\n              if (self==\"include\"){\n                return \"-h\";\n              }\n              if (self==\"only\"){\n                return \"-H\";\n              }\n              else {\n                return null;\n              }\n            }\n\noutputs:\n  bam_filtered:\n    format: edam:format_2572\n    type: stdout\n\nstdout: $(inputs.bam.nameroot)_filt.bam\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam': {'format': 'edam:format_2572', 'doc': 'aligned reads to be checked in bam format', 'type': 'File', 'inputBinding': {'position': 10}}, 'count': {'type': 'boolean?', 'default': True, 'doc': 'Instead of printing the alignments, only count them and print the total number.', 'inputBinding': {'position': 1, 'prefix': '-c'}}, 'exclude_unmapped': {'type': 'boolean?', 'default': True, 'inputBinding': {'valueFrom': '4', 'prefix': '-F', 'position': 1}}, 'is_paired_end': {'doc': 'if paired end, only properly paired reads pass', 'type': 'boolean', 'default': True}, 'min_mapping_quality': {'doc': 'Reads with a mapping quality below this will be excluded', 'type': 'int?', 'default': 20, 'inputBinding': {'position': 1, 'prefix': '-q'}}, 'header': {'type': ['null', {'type': 'enum', 'symbols': ['include', 'exclude', 'only']}], 'default': 'include', 'inputBinding': {'valueFrom': '${\\n  if (self==\"include\"){\\n    return \"-h\";\\n  }\\n  if (self==\"only\"){\\n    return \"-H\";\\n  }\\n  else {\\n    return null;\\n  }\\n}\\n'}}}",
    "cwl_outputs": "{'bam_filtered': {'format': 'edam:format_2572', 'type': 'stdout'}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 10000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'view']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.bam.nameroot)_filt.bam",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/snpEff_build_ann.cwl",
    "sha": "5c4a9881afcb6be22f4111b1cbbff624afc7304b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/snpEff_build_ann.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nbaseCommand: [bash, commands.sh]\n\ninputs:\n  - id: importGenome\n    type: boolean\n    doc: 'import your own genome (genbank)'\n  - id: genome_reference\n    type: string\n\n  - id: bankfile\n    type: File?\n    doc: 'import your own genome'\n\n  - id: sequence\n    type: File\n\n  - id: inputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n    default: vcf\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n    default: vcf\n\n  - id: udLength\n    type: int\n    doc: 'Set upstream downstream interval length (in bases). 0 base: No upstream / downstream intervals'\n\n## reports:\n  - id: html_report\n    type: boolean?\n\n  - id: csvFile\n    type: boolean?\n  - id: noStats\n    type: boolean?\n\n## Annotations options:\n  - id: formatEff\n    type: boolean?\n    doc: \"Use 'EFF' field compatible with older versions (instead of 'ANN')\"\n  - id: classic\n    type: boolean?\n    doc: \"Use Classic Effect names and amino acid variant annotations (NON_SYNONYMOUS_CODING vs missense_variant and G180R vs p.Gly180Arg/c.538G>C)\"\n  - id: sequenceOntology\n    type: boolean?\n    doc: \"Override classic and use Sequence Ontolgy terms for effects (missense_variant vs NON_SYNONYMOUS_CODING)\"\n  - id: hgvs\n    type: boolean?\n    default: true\n    doc: \"Override classic and use HGVS annotations for amino acid annotations (p.Gly180Arg/c.538G>C vs G180R)\"\n  - id: noShiftHgvs\n    type: boolean?\n    doc: \"Do not shift variants according to HGVS notation (most 3prime end)\"\n  - id: noHgvs\n    type: boolean?\n    doc: \"Do not add HGVS annotations\"\n  - id: geneId\n    type: boolean?\n    doc: \"Use gene ID instead of gene name (VCF output). Default: false\"\n  - id: lof\n    type: boolean?\n    doc: \"Add loss of function (LOF) and nonsense mediated decay (NMD) tags\"\n  - id: noLof\n    type: boolean?\n    doc: \"Do not add LOF and NMD annotations\"\n  - id: cancer\n    type: boolean?\n    inputBinding:\n      prefix: -cancer\n    doc: \"Perform 'cancer' comparisons (somatic vs. germline)\"\n  - id: cancerSamples\n    type: File?\n    doc: \"<file> : Two column TXT file defining 'oringinal \\t derived' samples.\"\n  - id: oicr\n    type: boolean?\n    doc: \"Add OICR tag in VCF file. Default: false\"\n\n## Database options:\n\n  - id: canon\n    type: boolean?\n    doc: \"Only use canonical transcripts\"\n  - id: motif\n    type: boolean?\n    doc: \"Annotate using motifs (requires Motif database).\"\n  - id: noMotif\n    type: boolean?\n    doc: \"Disable motif annotations\"\n  - id: noNextProt\n    type: boolean?\n    doc: \"Disable NextProt annotations\"\n  - id: nextProt\n    type: boolean?\n    doc: \"Annotate using NextProt (requires NextProt database).\"\n  - id: noGenome\n    type: boolean?\n    doc: \"Do not load any genomic database (e.g. annotate using custom files).\"\n  - id: onlyProtein\n    type: boolean?\n    doc: \"Only use protein coding transcripts. Default: false\"\n  - id: transcripts\n    type: File?\n    doc: '<file.txt>   Only use the transcripts in this file. Format: One transcript ID per line.'\n\n  # \u00e0 rendre facultatif:\n  - id: interval\n    type: File[]?\n      #- type: null\n      #type: array\n      #items: File\n    doc: 'Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).'\n  - id: spliceRegionExonSize\n    type: int?\n    default: 3\n  - id: spliceRegionIntronMax\n    type: int?\n    default: 8\n  - id: spliceRegionIntronMin\n    type: int?\n    default: 8\n  - id: spliceSiteSize\n    type: int?\n    default: 2\n  - id: onlyReg\n    type: boolean?\n    doc: \"Only use regulation tracks.\"\n  - id: strict\n    type: boolean?\n    doc: \"Only use 'validated' transcripts (i.e. sequence has been checked). Default: false\"\n## Results filter options :\n\n  - id: filterInterval\n    type: File[]?\n    doc: \"Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)\"\n  - id: no_downstream\n    type: boolean?\n    doc: \" Do not show DOWNSTREAM changes\"\n  - id: no_intergenic\n    type: boolean?\n    doc: \"Do not show INTERGENIC changes\"\n  - id: no_intron\n    type: boolean?\n    doc: \"Do not show INTRON changes\"\n  - id: no_upstream\n    type: boolean?\n    doc: \"Do not show UPSTREAM changes\"\n  - id: no_utr\n    type: boolean?\n    doc: \"Do not show 5_PRIME_UTR or 3_PRIME_UTR changes\"\n  - id: no_EffectType\n    type: boolean?\n    doc: \"Do not show 'EffectType'. This option can be used several times.\"\n\noutputs:\n  - id: snpeff_output\n    type: File?\n    # format $(inputs.outputFormat)\n    outputBinding:\n      glob: \"*.$(inputs.outputFormat)\"\n  - id: statsFile\n    type: File?\n    outputBinding:\n      glob: \"*.html\"\n  - id: csvFile\n    type: File?\n    outputBinding:\n      glob: '*.csv'\n  - id: genes\n    type: File?\n    outputBinding:\n      glob: '*.txt'\nrequirements:\n  - class: DockerRequirement\n    dockerPull: biocontainers/snpeff:v4.1k_cv3\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: \"$({class: 'Directory', listing: []})\"\n        entryname: $(inputs.genome_reference)\n        writable: true\n      - entryname: $(inputs.genome_reference)/genes.gbk\n        entry: $(inputs.bankfile)\n      - entryname: commands.sh\n        entry: |-\n          #!/bin/bash\n          ###########################\n          #cd /home/biodocker/bin/snpEff\n          cp /home/biodocker/bin/snpEff/snpEff.config .\n          ls -R\n\n          if [ $(inputs.importGenome) ]\n          then\n              echo $(inputs.genome_reference).genome=$(inputs.genome_reference) >> snpEff.config\n              snpEff build -v -c snpEff.config -dataDir . -configOption $(inputs.genome_reference).genome=$(inputs.genome_reference) -genbank $(inputs.genome_reference)\n              grep covid19 snpEff.config\n          fi\n\n          ${\n          var command=\n          \"snpEff ann -v -c snpEff.config -dataDir .  -i \"+ (inputs.inputFormat)+\" -o \"+(inputs.outputFormat)+\" -upDownStreamLen \"+(inputs.udLength)+\" -spliceRegionExonSize \"+(inputs.spliceRegionExonSize)+\" -spliceRegionIntronMax  \"+(inputs.spliceRegionIntronMax)+\" -spliceRegionIntronMin \"+(inputs.spliceRegionIntronMin)+\" -spliceSiteSize \"+(inputs.spliceSiteSize)\n\n          if (inputs.csvFile){\n            command+= \" -csvFile \"\n          }\n          if (inputs.html_report){\n            command+=\" -s \"\n          }\n          if (inputs.noStats){\n            command+=\" -noStats \"\n          }\n          if (inputs.formatEff){\n            command+=\" -formatEff \"\n          }\n          if (inputs.classic){\n            command+=\" -classic \"\n          }\n          if (inputs.sequenceOntology){\n            command+=\" -sequenceOntology \"\n          }\n          if (inputs.hgvs){\n            command+=\" -hgvs \"\n          }\n          if (inputs.noShiftHgvs){\n            command+=\" -noShiftHgvs \"\n          }\n          if (inputs.noHgvs){\n            command+=\" -noHgvs \"\n          }\n          if (inputs.geneId){\n            command+= \" -geneId\"\n          }\n          if (inputs.lof){\n            command+=\" -lof \"\n          }\n          if (inputs.noLof){\n            command+=\" -noLof \"\n          }\n          if (inputs.cancer){\n            command+=\" -cancer \"\n          }\n          if (inputs.oicr){\n            command+=\" -oicr \"\n          }\n          if (inputs.cancerSamples!=null){\n            command+= \" -cancerSamples \"+(inputs.cancerSamples.path)\n          }\n          if (inputs.canon){\n            command+= \" -canon \"\n          }\n          if (inputs.motif){\n            command+= \" -motif \"\n          }\n          if (inputs.noMotif){\n            command+= \" -noMotif \"\n          }\n          if (inputs.noNextProt){\n            command+=\" -noNextProt \"\n          }\n          if (inputs.nextProt){\n            command+=\" -nextProt \"\n          }\n          if (inputs.noGenome){\n            command+=\" -noGenome \"\n          }\n          if (inputs.onlyProtein){\n            command+=\" -onlyProtein \"\n          }\n          if (inputs.onlyReg){\n            command+=\" -onlyReg \"\n          }\n          if (inputs.strict){\n            command+=\" -strict \"\n          }\n          if (inputs.no_downstream){\n            command+= \" -no-downstream \"\n          }\n          if (inputs.no_intergenic){\n            command+= \" -no-intergenic \"\n          }\n          if (inputs.no_intron){\n            command+= \" -no-intron \"\n          }\n          if (inputs.no_upstream){\n            command+= \" -no-upstream \"\n          }\n          if (inputs.no_utr){\n            command+= \" -no-utr \"\n          }\n          if (inputs.no_EffectType){\n            command+= \" -no EffectType \"\n          }\n          if (inputs.transcripts!=null){\n           for (var i=0; i< inputs.transcripts.length; i++){\n             command+= \" -onlyTr \"+inputs.transcripts[i].path\n           }\n          }\n          if (inputs.filterInterval!=null){\n           for (var i=0; i< inputs.filterInterval.length; i++){\n             command+= \" -filterInterval \"+inputs.filterInterval[i].path\n           }\n          }\n          if (inputs.interval!=null){\n           for (var i=0; i< inputs.interval.length; i++){\n             command+= \" -interval \"+inputs.interval[i].path\n           }\n          }\n          command+=(inputs.genome_reference)+\" \"+(inputs.sequence.path)+\" > \"+(inputs.sequence.nameroot)+\".ann.\"+(inputs.outputFormat)\n\n          return command;\n          }\n          ls -R\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'importGenome', 'type': 'boolean', 'doc': 'import your own genome (genbank)'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'bankfile', 'type': 'File?', 'doc': 'import your own genome'}, {'id': 'sequence', 'type': 'File'}, {'id': 'inputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed']}], 'default': 'vcf'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn']}], 'default': 'vcf'}, {'id': 'udLength', 'type': 'int', 'doc': 'Set upstream downstream interval length (in bases). 0 base: No upstream / downstream intervals'}, {'id': 'html_report', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?', 'doc': \"Use 'EFF' field compatible with older versions (instead of 'ANN')\"}, {'id': 'classic', 'type': 'boolean?', 'doc': 'Use Classic Effect names and amino acid variant annotations (NON_SYNONYMOUS_CODING vs missense_variant and G180R vs p.Gly180Arg/c.538G>C)'}, {'id': 'sequenceOntology', 'type': 'boolean?', 'doc': 'Override classic and use Sequence Ontolgy terms for effects (missense_variant vs NON_SYNONYMOUS_CODING)'}, {'id': 'hgvs', 'type': 'boolean?', 'default': True, 'doc': 'Override classic and use HGVS annotations for amino acid annotations (p.Gly180Arg/c.538G>C vs G180R)'}, {'id': 'noShiftHgvs', 'type': 'boolean?', 'doc': 'Do not shift variants according to HGVS notation (most 3prime end)'}, {'id': 'noHgvs', 'type': 'boolean?', 'doc': 'Do not add HGVS annotations'}, {'id': 'geneId', 'type': 'boolean?', 'doc': 'Use gene ID instead of gene name (VCF output). Default: false'}, {'id': 'lof', 'type': 'boolean?', 'doc': 'Add loss of function (LOF) and nonsense mediated decay (NMD) tags'}, {'id': 'noLof', 'type': 'boolean?', 'doc': 'Do not add LOF and NMD annotations'}, {'id': 'cancer', 'type': 'boolean?', 'inputBinding': {'prefix': '-cancer'}, 'doc': \"Perform 'cancer' comparisons (somatic vs. germline)\"}, {'id': 'cancerSamples', 'type': 'File?', 'doc': \"<file> : Two column TXT file defining 'oringinal \\t derived' samples.\"}, {'id': 'oicr', 'type': 'boolean?', 'doc': 'Add OICR tag in VCF file. Default: false'}, {'id': 'canon', 'type': 'boolean?', 'doc': 'Only use canonical transcripts'}, {'id': 'motif', 'type': 'boolean?', 'doc': 'Annotate using motifs (requires Motif database).'}, {'id': 'noMotif', 'type': 'boolean?', 'doc': 'Disable motif annotations'}, {'id': 'noNextProt', 'type': 'boolean?', 'doc': 'Disable NextProt annotations'}, {'id': 'nextProt', 'type': 'boolean?', 'doc': 'Annotate using NextProt (requires NextProt database).'}, {'id': 'noGenome', 'type': 'boolean?', 'doc': 'Do not load any genomic database (e.g. annotate using custom files).'}, {'id': 'onlyProtein', 'type': 'boolean?', 'doc': 'Only use protein coding transcripts. Default: false'}, {'id': 'transcripts', 'type': 'File?', 'doc': '<file.txt>   Only use the transcripts in this file. Format: One transcript ID per line.'}, {'id': 'interval', 'type': 'File[]?', 'doc': 'Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).'}, {'id': 'spliceRegionExonSize', 'type': 'int?', 'default': 3}, {'id': 'spliceRegionIntronMax', 'type': 'int?', 'default': 8}, {'id': 'spliceRegionIntronMin', 'type': 'int?', 'default': 8}, {'id': 'spliceSiteSize', 'type': 'int?', 'default': 2}, {'id': 'onlyReg', 'type': 'boolean?', 'doc': 'Only use regulation tracks.'}, {'id': 'strict', 'type': 'boolean?', 'doc': \"Only use 'validated' transcripts (i.e. sequence has been checked). Default: false\"}, {'id': 'filterInterval', 'type': 'File[]?', 'doc': 'Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)'}, {'id': 'no_downstream', 'type': 'boolean?', 'doc': ' Do not show DOWNSTREAM changes'}, {'id': 'no_intergenic', 'type': 'boolean?', 'doc': 'Do not show INTERGENIC changes'}, {'id': 'no_intron', 'type': 'boolean?', 'doc': 'Do not show INTRON changes'}, {'id': 'no_upstream', 'type': 'boolean?', 'doc': 'Do not show UPSTREAM changes'}, {'id': 'no_utr', 'type': 'boolean?', 'doc': 'Do not show 5_PRIME_UTR or 3_PRIME_UTR changes'}, {'id': 'no_EffectType', 'type': 'boolean?', 'doc': \"Do not show 'EffectType'. This option can be used several times.\"}]",
    "cwl_outputs": "[{'id': 'snpeff_output', 'type': 'File?', 'outputBinding': {'glob': '*.$(inputs.outputFormat)'}}, {'id': 'statsFile', 'type': 'File?', 'outputBinding': {'glob': '*.html'}}, {'id': 'csvFile', 'type': 'File?', 'outputBinding': {'glob': '*.csv'}}, {'id': 'genes', 'type': 'File?', 'outputBinding': {'glob': '*.txt'}}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', 'commands.sh']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/snpSift_extract.cwl",
    "sha": "1ac98a628598fb8cc3a0623632abf1d101929e55",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/snpSift_extract.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/snpsift:4.3.1t--2\n    \ndoc:   \"SnpSift Extract Fields <http://snpeff.sourceforge.net/SnpSift.html#Extract> selects columns from a VCF dataset into a Tab-delimited format.\"\n\nstdout: $(inputs.input_vcf.nameroot).tsv\nbaseCommand: [SnpSift, -Xmx6G, extractFields]\narguments: \n  - valueFrom: \\\"$(inputs.empty_text)\\\"\n    prefix: -e\n    position: 4\ninputs:\n  - id: input_vcf\n    type: File \n    inputBinding:\n      position: 1\n\n  - id: extractFields\n    #type: string?\n    type: string[]?\n    default: \"CHROM POS ID REF ALT FILTER\"\n    doc: \"Separated by spaces\"\n    inputBinding:\n      position: 2\n\n      \n  # - id: one_effect_per_line\n  #   type: boolean?\n  #   default: true\n  #   doc: \"When variants have more than one effect, lists one effect per line, while all other parameters in the line are repeated across mutiple lines\"\n\n  - id: separator\n    type: string?\n    doc: \"Separate multiple fields in one column with this character, e.g. a comma, rather than a column for each of the multiple values\"\n    inputBinding:\n      prefix: -s\n      position: 3\n      \n  - id: empty_text\n    type: string?\n    doc: \"Represent empty fields with this value, rather than leaving them blank\"\n   # inputBinding:\n   #   prefix: -e\n   #   position: 4\n\noutputs: \n  - id: out\n    type: stdout\nrequirements:\n  - class: InlineJavascriptRequirement\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'input_vcf', 'type': 'File', 'inputBinding': {'position': 1}}, {'id': 'extractFields', 'type': 'string[]?', 'default': 'CHROM POS ID REF ALT FILTER', 'doc': 'Separated by spaces', 'inputBinding': {'position': 2}}, {'id': 'separator', 'type': 'string?', 'doc': 'Separate multiple fields in one column with this character, e.g. a comma, rather than a column for each of the multiple values', 'inputBinding': {'prefix': '-s', 'position': 3}}, {'id': 'empty_text', 'type': 'string?', 'doc': 'Represent empty fields with this value, rather than leaving them blank'}]",
    "cwl_outputs": "[{'id': 'out', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/snpsift:4.3.1t--2'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['SnpSift', '-Xmx6G', 'extractFields']",
    "cwl_arguments": "[{'valueFrom': '\\\\\"$(inputs.empty_text)\\\\\"', 'prefix': '-e', 'position': 4}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "SnpSift Extract Fields <http://snpeff.sourceforge.net/SnpSift.html#Extract> selects columns from a VCF dataset into a Tab-delimited format.",
    "cwl_stdout": "$(inputs.input_vcf.nameroot).tsv",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/variation_PE.cwl",
    "sha": "d1917269980f0c3db4a4cad18fefa742082aaae8",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/variation_PE.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: var_pe\nlabel: var-PE\n$namespaces:\n  edam: 'http://edamontology.org/'\ninputs:\n  - id: reads_reverse\n    type: File[]\n    format:\n      - 'edam:format_1930'\n      - 'edam:format_1931'\n\n  - id: reads_forward\n    type: File[]\n    format:\n      - 'edam:format_1930'\n      - 'edam:format_1931'\n  - id: reference_in\n    type: File\n\n   #### 1-  fastp options:\n  - id: unqualified_phred_quality\n    type: int?\n  - id: threads\n    type: int?\n  - id: qualified_phred_quality\n    type: int?\n  - id: min_length_required\n    type: int?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: base_correction\n    type: boolean?\n\n   #### picard__sort_sam options:\n  - id: sort_order\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n  - id: validation_stringency\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n\n# samtools_view\n  - id: exclude_unmapped\n    type: boolean?\n  - id: count\n    type: boolean\n\n   #### picard__mark_duplicates options:\n  - id: alignments_are_sorted\n    type: boolean\n  - id: remove_duplicates\n    type: boolean\n  - id: validation_stringency_1\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n  - id: comment\n    type: 'string[]?'\n  - id: duplicate_scoring_strategy\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n  - id: optical_duplicate_pixel_distance\n    type: int?\n  - id: barcode_tag\n    type: string?\n\n   ####lofreq_viterbi options:\n  - id: keepflags\n    type: boolean?\n  - id: defqual\n    type: int?\n  - id: bq2_handling\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - keep\n          - dynamic\n          - fixed\n\n   #### lofreq_cal_variants options:\n  - id: bed\n    type: File?\n  - id: bonferroni\n    type: string?\n  - id: call_indels\n    type: boolean?\n  - id: def_alt_bq\n    type: int?\n  - id: def_alt_jq\n    type: int?\n  - id: del_baq\n    type: boolean?\n  - id: enable_source_qual\n    type: boolean?\n  - id: ignore_vcf\n    type: 'File[]?'\n  - id: illumina_1_3\n    type: boolean?\n  - id: max_depth_cov\n    type: int?\n  - id: max_mapping_quality\n    type: int?\n  - id: min_bq\n    type: int?\n  - id: min_cov\n    type: int?\n  - id: min_mq\n    type: int?\n  - id: use_orphan\n    type: boolean?\n  - id: threads_lf_call\n    type: int?\n  - id: replace_non_match\n    type: int?\n  - id: region\n    type: string?\n  - id: pvalue_cutoff\n    type: float?\n  - id: only_indels\n    type: boolean?\n  - id: no_idaq\n    type: boolean?\n  - id: no_default_filter\n    type: boolean?\n  - id: no_baq\n    type: boolean?\n  - id: no_mapping_quality\n    type: boolean?\n  - id: no_ext_base_alignment_quality\n    type: boolean?\n  - id: min_jq\n    type: int?\n  - id: min_alt_jq\n    type: int?\n  - id: min_alt_bq\n    type: int?\n\n   #### SnpEff build & ann:\n  - id: genome_reference\n    type: string\n  - id: udLength\n    type: int\n  - id: transcripts\n    type: File?\n  - id: strict\n    type: boolean?\n  - id: spliceSiteSize\n    type: int?\n  - id: spliceRegionIntronMin\n    type: int?\n  - id: spliceRegionIntronMax\n    type: int?\n  - id: spliceRegionExonSize\n    type: int?\n  - id: sequenceOntology\n    type: boolean?\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n  - id: onlyReg\n    type: boolean?\n  - id: onlyProtein\n    type: boolean?\n  - id: oicr\n    type: boolean?\n  - id: noStats\n    type: boolean?\n  - id: noShiftHgvs\n    type: boolean?\n  - id: noNextProt\n    type: boolean?\n  - id: noMotif\n    type: boolean?\n  - id: bankfile\n    type: File?\n  - id: cancer\n    type: boolean?\n  - id: cancerSamples\n    type: File?\n  - id: canon\n    type: boolean?\n  - id: classic\n    type: boolean?\n  - id: csvFile\n    type: boolean?\n  - id: filterInterval\n    type: 'File[]?'\n  - id: hgvs\n    type: boolean?\n  - id: formatEff\n    type: boolean?\n  - id: html_report_1\n    type: boolean?\n  - id: importGenome\n    type: boolean\n  - id: interval\n    type: 'File[]?'\n  - id: lof\n    type: boolean?\n  - id: motif\n    type: boolean?\n  - id: nextProt\n    type: boolean?\n  - id: no_downstream\n    type: boolean?\n  - id: no_EffectType\n    type: boolean?\n  - id: no_intergenic\n    type: boolean?\n  - id: no_intron\n    type: boolean?\n  - id: no_upstream\n    type: boolean?\n  - id: no_utr\n    type: boolean?\n  - id: noGenome\n    type: boolean?\n  - id: noHgvs\n    type: boolean?\n  - id: noLof\n    type: boolean?\n  - id: geneId\n    type: boolean?\n\n   #### SNPSIFT\n  - id: separator\n    type: string?\n  - id: empty_text\n    type: string?\n  - id: extractFields\n    type: 'string[]?'\n\n  - id: IndexName\n    type: string\n\noutputs:\n  - id: multiqc_fastp\n    type: File\n    outputSource:\n      - multiqc_fastp/multiqc_zip\n  - id: stats_bam\n    type: File[]\n    outputSource:\n      - samtools_stats/stats\n  - id: multiqc_markdups\n    type: File\n    outputSource:\n      - multiqc_markdups/multiqc_zip\n  - id: multiqc_samtoolsstats\n    outputSource:\n       - multiqc_stats/multiqc_zip\n    type: File\n#  - id: log\n#    outputSource:\n#      - picard__mark_duplicates/log\n#    type: File[]\n#  - id: alignments\n#    outputSource:\n#      - picard__mark_duplicates/alignments\n#    type: File[]\n#  - id: genes\n#    outputSource:\n#      - snpeff_build_ann/genes\n#    type: File[]\n  - id: statsFile_snpeff\n    outputSource:\n      - snpeff_build_ann/statsFile\n    type: File[]\n  - id: out_snpsift\n    outputSource:\n      - snpsift_extract/out\n    type: File[]\nsteps:\n  - id: fastp\n    scatter: [fastq1, fastq2]\n    scatterMethod: dotproduct\n    in:\n      - id: base_correction\n        source: base_correction\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: reads_forward\n      - id: fastq2\n        source: reads_reverse\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n      - id: qualified_phred_quality\n        source: qualified_phred_quality\n      - id: threads\n        source: threads\n      - id: unqualified_phred_quality\n        source: unqualified_phred_quality\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n      - id: out_fastq2\n    run: ./tools/fastp.cwl\n\n  - id: multiqc_fastp\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_fast'\n      - id: qc_files_array\n        source: fastp/json_report\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: samtools_view_filter\n    scatter: bam\n    in:\n      - id: bam\n        source: bwa_mem/reads_stdout\n      - id: count\n        source: count\n      - id: exclude_unmapped\n        source: exclude_unmapped\n    out:\n      - id: bam_filtered\n    run: ./tools/samtools_view_filter.cwl\n\n  - id: picard_sortsam\n    scatter: alignments\n    in: \n      - id: alignments\n        source: samtools_view_filter/bam_filtered\n      - id: sort_order\n        source: sort_order\n      - id: validation_stringency\n        source: validation_stringency\n    out:\n      - id: sorted_alignments\n    run: ./tools/picard_SortSam.cwl\n\n  - id: picard__mark_duplicates\n    scatter: alignments\n    in:\n      - id: alignments\n        source: picard_sortsam/sorted_alignments\n      - id: alignments_are_sorted\n        source: alignments_are_sorted\n      - id: barcode_tag\n        source: barcode_tag\n      - id: comment\n        source:\n          - comment\n      - id: duplicate_scoring_strategy\n        source: duplicate_scoring_strategy\n      - id: optical_duplicate_pixel_distance\n        source: optical_duplicate_pixel_distance\n      - id: remove_duplicates\n        source: remove_duplicates\n      - id: validation_stringency\n        source: validation_stringency_1\n    out:\n      - id: alignments\n      - id: log\n      - id: metrics\n    run: ./tools/picard_MarkDuplicates.cwl\n\n  - id: multiqc_markdups\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_markdups'\n      - id: qc_files_array\n        source: picard__mark_duplicates/metrics\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: lofreq_viterbi\n    scatter: reads\n    in:\n      - id: defqual\n        source: defqual\n      - id: keepflags\n        source: keepflags\n      - id: reads\n        source: picard__mark_duplicates/alignments\n      - id: reference\n        source: reference_in\n    out:\n      - id: realigned\n    run: ./tools/lofreq_viterbi.cwl\n\n  - id: samtools_sort\n    scatter: bam_unsorted\n    in:\n      - id: bam_unsorted\n        source: lofreq_viterbi/realigned\n    out:\n      - id: bam_sorted\n    run: ./tools/samtools_sort.cwl\n\n  - id: samtools_faidx\n    in:\n      - id: sequences\n        source: reference_in\n    out:\n      - id: sequences_index\n      - id: sequences_with_index\n    run: ./tools/samtools_faidx.cwl\n    \n  - id: samtool_index\n    scatter: bam_sorted\n    in:\n      - id: bam_sorted\n        source: samtools_sort/bam_sorted\n    out:\n      - id: bam_sorted_indexed\n    run: ./tools/samtools_index.cwl\n\n  - id: bwa_index_cwl\n    in:\n      - id: InputFile\n        source: reference_in\n      - id: IndexName\n        source: IndexName\n    out:\n      - id: index\n    run: ./tools/bwa-index.cwl\n    \n  - id: get_secondaryfiles\n    in:\n      - id: bwa_index\n        source: bwa_index_cwl/index\n      - id: sequence\n        source: samtools_faidx/sequences_with_index\n    out:\n      - id: sequences_with_index\n    run: ./tools/get_secondaryfiles.cwl\n  - id: get_tab\n    scatter: [out_fastq1, out_fastq2]\n    scatterMethod: dotproduct\n    in: \n      - id: out_fastq1\n        source: fastp/out_fastq1\n      - id: out_fastq2\n        source: fastp/out_fastq2\n    out:\n      - id: tab\n    run: ./tools/mergetab.cwl\n  - id: bwa_mem\n    scatter: InputFile\n    in:\n      Index:\n        source: get_secondaryfiles/sequences_with_index\n      InputFile:\n        source: get_tab/tab\n# [fastp/out_fastq1, fastp/out_fastq2]\n#        linkMerge: merge_nested #flattened\n    out:\n      - id: reads_stdout\n    run: ./tools/bwa-mem.cwl\n  - id: samtools_stats\n    scatter: input_file\n    in:\n      input_file:\n        source: samtools_view_filter/bam_filtered\n    out:\n      - id: stats\n    run: ./tools/samtools_stats.cwl\n  - id: multiqc_stats\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_stats'\n      - id: qc_files_array\n        source: samtools_stats/stats\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl \n\n  - id: lofreq_call\n    scatter: [reads_align, reads_index]\n    scatterMethod: dotproduct\n    in:\n      - id: bed\n        source: bed\n      - id: bonferroni\n        source: bonferroni\n      - id: call_indels\n        source: call_indels\n      - id: def_alt_bq\n        source: def_alt_bq\n      - id: def_alt_jq\n        source: def_alt_jq\n      - id: del_baq\n        source: del_baq\n      - id: enable_source_qual\n        source: enable_source_qual\n      - id: ignore_vcf\n        source:\n          - ignore_vcf\n      - id: illumina_1_3\n        source: illumina_1_3\n      - id: max_depth_cov\n        source: max_depth_cov\n      - id: max_mapping_quality\n        source: max_mapping_quality\n      - id: min_alt_bq\n        source: min_alt_bq\n      - id: min_alt_jq\n        source: min_alt_jq\n      - id: min_bq\n        source: min_bq\n      - id: min_cov\n        source: min_cov\n      - id: min_jq\n        source: min_jq\n      - id: min_mq\n        source: min_mq\n      - id: no_baq\n        source: no_baq\n      - id: no_default_filter\n        source: no_default_filter\n      - id: no_ext_base_alignment_quality\n        source: no_ext_base_alignment_quality\n      - id: no_idaq\n        source: no_idaq\n      - id: no_mapping_quality\n        source: no_mapping_quality\n      - id: only_indels\n        source: only_indels\n      - id: pvalue_cutoff\n        source: pvalue_cutoff\n      - id: reads_align\n        source: samtools_sort/bam_sorted\n      - id: reads_index\n        source: samtool_index/bam_sorted_indexed\n      - id: reference_fasta\n        source: samtools_faidx/sequences_with_index\n      - id: reference_index\n        source: samtools_faidx/sequences_index\n      - id: region\n        source: region\n      - id: replace_non_match\n        source: replace_non_match\n      - id: threads\n        source: threads_lf_call\n      - id: use_orphan\n        source: use_orphan\n    out:\n      - id: vcf\n    run: ./tools/lofreq_call.cwl\n    label: LoFreq Call Variants\n\n  - id: snpeff_build_ann\n    scatter: sequence\n    in:\n      - id: importGenome\n        source: importGenome\n      - id: genome_reference\n        source: genome_reference\n      - id: bankfile\n        source: bankfile\n      - id: sequence\n        source: lofreq_call/vcf\n      - id: outputFormat\n        source: outputFormat\n      - id: udLength\n        source: udLength\n      - id: html_report\n        source: html_report_1\n      - id: csvFile\n        source: csvFile\n      - id: noStats\n        source: noStats\n      - id: formatEff\n        source: formatEff\n      - id: classic\n        source: classic\n      - id: sequenceOntology\n        source: sequenceOntology\n      - id: hgvs\n        source: hgvs\n      - id: noShiftHgvs\n        source: noShiftHgvs\n      - id: noHgvs\n        source: noHgvs\n      - id: geneId\n        source: geneId\n      - id: lof\n        source: lof\n      - id: noLof\n        source: noLof\n      - id: cancer\n        source: cancer\n      - id: cancerSamples\n        source: cancerSamples\n      - id: oicr\n        source: oicr\n      - id: canon\n        source: canon\n      - id: motif\n        source: motif\n      - id: noMotif\n        source: noMotif\n      - id: noNextProt\n        source: noNextProt\n      - id: nextProt\n        source: nextProt\n      - id: noGenome\n        source: noGenome\n      - id: onlyProtein\n        source: onlyProtein\n      - id: transcripts\n        source: transcripts\n      - id: interval\n        source:\n          - interval\n      - id: spliceRegionExonSize\n        source: spliceRegionExonSize\n      - id: spliceRegionIntronMax\n        source: spliceRegionIntronMax\n      - id: spliceRegionIntronMin\n        source: spliceRegionIntronMin\n      - id: spliceSiteSize\n        source: spliceSiteSize\n      - id: onlyReg\n        source: onlyReg\n      - id: strict\n        source: strict\n      - id: filterInterval\n        source:\n          - filterInterval\n      - id: no_downstream\n        source: no_downstream\n      - id: no_intergenic\n        source: no_intergenic\n      - id: no_intron\n        source: no_intron\n      - id: no_upstream\n        source: no_upstream\n      - id: no_utr\n        source: no_utr\n      - id: no_EffectType\n        source: no_EffectType\n    out:\n      - id: snpeff_output\n      - id: statsFile\n      - id: csvFile\n      - id: genes\n    run: ./tools/snpEff_build_ann.cwl\n\n  - id: snpsift_extract\n    scatter: input_vcf\n    in:\n      - id: input_vcf\n        source: snpeff_build_ann/snpeff_output\n      - id: extractFields\n        source:\n          - extractFields\n      - id: separator\n        source: separator\n      - id: empty_text\n        source: empty_text\n    out:\n      - id: out\n    run: ./tools/snpSift_extract.cwl\n\nrequirements:\n  - class: ScatterFeatureRequirement\n  - class: SubworkflowFeatureRequirement\n  - class: MultipleInputFeatureRequirement\n  - class: StepInputExpressionRequirement\n  - class: InlineJavascriptRequirement\n\n$schemas:\n  - 'http://edamontology.org/EDAM_1.18.owl'\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "var_pe",
    "cwl_inputs": "[{'id': 'reads_reverse', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reads_forward', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reference_in', 'type': 'File'}, {'id': 'unqualified_phred_quality', 'type': 'int?'}, {'id': 'threads', 'type': 'int?'}, {'id': 'qualified_phred_quality', 'type': 'int?'}, {'id': 'min_length_required', 'type': 'int?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'base_correction', 'type': 'boolean?'}, {'id': 'sort_order', 'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}]}, {'id': 'validation_stringency', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'exclude_unmapped', 'type': 'boolean?'}, {'id': 'count', 'type': 'boolean'}, {'id': 'alignments_are_sorted', 'type': 'boolean'}, {'id': 'remove_duplicates', 'type': 'boolean'}, {'id': 'validation_stringency_1', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'comment', 'type': 'string[]?'}, {'id': 'duplicate_scoring_strategy', 'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}]}, {'id': 'optical_duplicate_pixel_distance', 'type': 'int?'}, {'id': 'barcode_tag', 'type': 'string?'}, {'id': 'keepflags', 'type': 'boolean?'}, {'id': 'defqual', 'type': 'int?'}, {'id': 'bq2_handling', 'type': ['null', {'type': 'enum', 'symbols': ['keep', 'dynamic', 'fixed']}]}, {'id': 'bed', 'type': 'File?'}, {'id': 'bonferroni', 'type': 'string?'}, {'id': 'call_indels', 'type': 'boolean?'}, {'id': 'def_alt_bq', 'type': 'int?'}, {'id': 'def_alt_jq', 'type': 'int?'}, {'id': 'del_baq', 'type': 'boolean?'}, {'id': 'enable_source_qual', 'type': 'boolean?'}, {'id': 'ignore_vcf', 'type': 'File[]?'}, {'id': 'illumina_1_3', 'type': 'boolean?'}, {'id': 'max_depth_cov', 'type': 'int?'}, {'id': 'max_mapping_quality', 'type': 'int?'}, {'id': 'min_bq', 'type': 'int?'}, {'id': 'min_cov', 'type': 'int?'}, {'id': 'min_mq', 'type': 'int?'}, {'id': 'use_orphan', 'type': 'boolean?'}, {'id': 'threads_lf_call', 'type': 'int?'}, {'id': 'replace_non_match', 'type': 'int?'}, {'id': 'region', 'type': 'string?'}, {'id': 'pvalue_cutoff', 'type': 'float?'}, {'id': 'only_indels', 'type': 'boolean?'}, {'id': 'no_idaq', 'type': 'boolean?'}, {'id': 'no_default_filter', 'type': 'boolean?'}, {'id': 'no_baq', 'type': 'boolean?'}, {'id': 'no_mapping_quality', 'type': 'boolean?'}, {'id': 'no_ext_base_alignment_quality', 'type': 'boolean?'}, {'id': 'min_jq', 'type': 'int?'}, {'id': 'min_alt_jq', 'type': 'int?'}, {'id': 'min_alt_bq', 'type': 'int?'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'udLength', 'type': 'int'}, {'id': 'transcripts', 'type': 'File?'}, {'id': 'strict', 'type': 'boolean?'}, {'id': 'spliceSiteSize', 'type': 'int?'}, {'id': 'spliceRegionIntronMin', 'type': 'int?'}, {'id': 'spliceRegionIntronMax', 'type': 'int?'}, {'id': 'spliceRegionExonSize', 'type': 'int?'}, {'id': 'sequenceOntology', 'type': 'boolean?'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn']}]}, {'id': 'onlyReg', 'type': 'boolean?'}, {'id': 'onlyProtein', 'type': 'boolean?'}, {'id': 'oicr', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'noShiftHgvs', 'type': 'boolean?'}, {'id': 'noNextProt', 'type': 'boolean?'}, {'id': 'noMotif', 'type': 'boolean?'}, {'id': 'bankfile', 'type': 'File?'}, {'id': 'cancer', 'type': 'boolean?'}, {'id': 'cancerSamples', 'type': 'File?'}, {'id': 'canon', 'type': 'boolean?'}, {'id': 'classic', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'filterInterval', 'type': 'File[]?'}, {'id': 'hgvs', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?'}, {'id': 'html_report_1', 'type': 'boolean?'}, {'id': 'importGenome', 'type': 'boolean'}, {'id': 'interval', 'type': 'File[]?'}, {'id': 'lof', 'type': 'boolean?'}, {'id': 'motif', 'type': 'boolean?'}, {'id': 'nextProt', 'type': 'boolean?'}, {'id': 'no_downstream', 'type': 'boolean?'}, {'id': 'no_EffectType', 'type': 'boolean?'}, {'id': 'no_intergenic', 'type': 'boolean?'}, {'id': 'no_intron', 'type': 'boolean?'}, {'id': 'no_upstream', 'type': 'boolean?'}, {'id': 'no_utr', 'type': 'boolean?'}, {'id': 'noGenome', 'type': 'boolean?'}, {'id': 'noHgvs', 'type': 'boolean?'}, {'id': 'noLof', 'type': 'boolean?'}, {'id': 'geneId', 'type': 'boolean?'}, {'id': 'separator', 'type': 'string?'}, {'id': 'empty_text', 'type': 'string?'}, {'id': 'extractFields', 'type': 'string[]?'}, {'id': 'IndexName', 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'multiqc_fastp', 'type': 'File', 'outputSource': ['multiqc_fastp/multiqc_zip']}, {'id': 'stats_bam', 'type': 'File[]', 'outputSource': ['samtools_stats/stats']}, {'id': 'multiqc_markdups', 'type': 'File', 'outputSource': ['multiqc_markdups/multiqc_zip']}, {'id': 'multiqc_samtoolsstats', 'outputSource': ['multiqc_stats/multiqc_zip'], 'type': 'File'}, {'id': 'statsFile_snpeff', 'outputSource': ['snpeff_build_ann/statsFile'], 'type': 'File[]'}, {'id': 'out_snpsift', 'outputSource': ['snpsift_extract/out'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "var-PE",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/variation_SE.cwl",
    "sha": "f46dede9819f524eccffa848948de3a554d8515b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/variation_SE.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: var\nlabel: var\n\ninputs:\n  # read(s):\n  - id: reads\n    type: File[]\n    format:\n      - edam:format_1930 # FASTA\n      - edam:format_1931 # FASTQ\n\n  # reference genome:\n  - id: reference_in\n    type: File\n\n  #### 1-  fastp options:\n  - id: unqualified_phred_quality\n    type: int?\n  - id: threads\n    type: int?\n  - id: qualified_phred_quality\n    type: int?\n  - id: min_length_required\n    type: int?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: base_correction\n    type: boolean?\n\n#### bowtie2_build options:\n  - id: bmax\n    type: int?\n  - id: bmaxdivn\n    type: int?\n  - id: bt2_index_base\n    type: string?\n  - id: c\n    type: boolean?\n  - id: dcv\n    type: int?\n  - id: f\n    type: boolean?\n  - id: ftabchars\n    type: int?\n  - id: justref\n    type: boolean?\n  - id: large_index\n    type: boolean?\n  - id: noauto\n    type: boolean?\n  - id: nodc\n    type: boolean?\n  - id: noref\n    type: boolean?\n  - id: offrate\n    type: int?\n  - id: packed\n    type: boolean?\n  - id: quiet\n    type: boolean?\n  - id: seed\n    type: int?\n  - id: threads_bowtie2\n    type: int?\n#### bowtie2_align options: (many others)\n  - id: end_to_end_very_sensitive\n    type: boolean?\n\n#### picard__sort_sam options:\n  - id: sort_order\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n  - id: validation_stringency\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n#### picard__mark_duplicates options:\n  - id: alignments_are_sorted\n    type: boolean\n  - id: remove_duplicates\n    type: boolean\n  - id: validation_stringency_1\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n  - id: comment\n    type: string[]?\n  - id: duplicate_scoring_strategy\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n  - id: read_name_regex\n    type: string?\n  - id: optical_duplicate_pixel_distance\n    type: int?\n  - id: barcode_tag\n    type: string?\n####lofreq_viterbi options:\n  - id: keepflags\n    type: boolean?\n  - id: defqual\n    type: int?\n  - id: bq2_handling\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - keep\n          - dynamic\n          - fixed\n        name: bq2_handling\n\n#### lofreq_cal_variants options:\n  - id: bed\n    type: File?\n  - id: bonferroni\n    type: string?\n  - id: call_indels\n    type: boolean?\n  - id: def_alt_bq\n    type: int?\n  - id: def_alt_jq\n    type: int?\n  - id: del_baq\n    type: boolean?\n  - id: enable_source_qual\n    type: boolean?\n  - id: ignore_vcf\n    type: 'File[]?'\n  - id: illumina_1_3\n    type: boolean?\n  - id: max_depth_cov\n    type: int?\n  - id: max_mapping_quality\n    type: int?\n  - id: min_bq\n    type: int?\n  - id: min_cov\n    type: int?\n  - id: min_mq\n    type: int?\n  - id: use_orphan\n    type: boolean?\n  - id: threads_lf_call\n    type: int?\n  - id: replace_non_match\n    type: int?\n  - id: region\n    type: string?\n  - id: pvalue_cutoff\n    type: float?\n  - id: only_indels\n    type: boolean?\n  - id: no_idaq\n    type: boolean?\n  - id: no_default_filter\n    type: boolean?\n  - id: no_baq\n    type: boolean?\n  - id: no_mapping_quality\n    type: boolean?\n  - id: no_ext_base_alignment_quality\n    type: boolean?\n  - id: min_jq\n    type: int?\n  - id: min_alt_jq\n    type: int?\n  - id: min_alt_bq\n    type: int?\n\n#### SnpEff buiild & ann:\n  - id: genome_reference\n    type: string\n  - id: udLength\n    type: int\n  - id: transcripts\n    type: File?\n  - id: strict\n    type: boolean?\n  - id: spliceSiteSize\n    type: int?\n  - id: spliceRegionIntronMin\n    type: int?\n  - id: spliceRegionIntronMax\n    type: int?\n  - id: spliceRegionExonSize\n    type: int?\n  - id: sequenceOntology\n    type: boolean?\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n        name: outputFormat\n  - id: onlyReg\n    type: boolean?\n  - id: onlyProtein\n    type: boolean?\n  - id: oicr\n    type: boolean?\n  - id: noStats\n    type: boolean?\n  - id: noShiftHgvs\n    type: boolean?\n  - id: noNextProt\n    type: boolean?\n  - id: noMotif\n    type: boolean?\n  - id: bankfile\n    type: File?\n  - id: cancer\n    type: boolean?\n  - id: cancerSamples\n    type: File?\n  - id: canon\n    type: boolean?\n  - id: classic\n    type: boolean?\n  - id: csvFile\n    type: boolean?\n  - id: filterInterval\n    type: 'File[]?'\n  - id: hgvs\n    type: boolean?\n  - id: formatEff\n    type: boolean?\n  - id: html_report_1\n    type: boolean?\n  - id: importGenome\n    type: boolean\n  - id: interval\n    type: 'File[]?'\n  - id: lof\n    type: boolean?\n  - id: motif\n    type: boolean?\n  - id: nextProt\n    type: boolean?\n  - id: no_downstream\n    type: boolean?\n  - id: no_EffectType\n    type: boolean?\n  - id: no_intergenic\n    type: boolean?\n  - id: no_intron\n    type: boolean?\n  - id: no_upstream\n    type: boolean?\n  - id: no_utr\n    type: boolean?\n  - id: noGenome\n    type: boolean?\n  - id: noHgvs\n    type: boolean?\n  - id: noLof\n    type: boolean?\n  - id: geneId\n    type: boolean?\n\n#### SNPSIFT\n  - id: separator\n    type: string?\n  - id: empty_text\n    type: string?\n  - id: extractFields\n    type: 'string[]?'\n\noutputs:\n#FASTP:\n#  - id: html_report\n#    outputSource:\n#      - fastp/html_report\n#    type: File[]\n  - id: multiqc_fastp\n    outputSource:\n      - multiqc_fastp/multiqc_zip\n#  - id: json_report\n#    outputSource:\n#      - fastp/json_report\n#    type: File[]\n#  - id: out_fastq1\n#    outputSource:\n#      - fastp/out_fastq1\n#    type: File[]\n\n#BOWTIE2_BUILD:\n#  - id: indices\n#    outputSource:\n#      - bowtie2_build/indices\n#    type: File\n\n#BOWTIE2_ALIGN:\n#  - id: output\n#    outputSource:\n#      - bowtie2_align/output\n#    type: File[]\n  - id: output_log\n    outputSource:\n      - bowtie2_align/output_log\n    type: File[]\n#picard_sortsam:\n#  - id: outFile\n#    outputSource:\n#      - picard__sort_sam/sorted_alignments\n#    type: File[]\n\n#picard_markduplicates\n  - id: metrics\n    outputSource:\n      - picard__mark_duplicates/metrics\n    type: File[]\n  - id: log\n    outputSource:\n      - picard__mark_duplicates/log\n    type: File[]\n  - id: alignments\n    outputSource:\n      - picard__mark_duplicates/alignments\n    type: File[]\n\n#lofreq_viterbi:\n#  - id: realigned\n#    outputSource:\n#      - lofreq_viterbi/realigned\n#    type: File[]\n#samtools_sort\n#  - id: bam_sorted\n#    outputSource:\n#      - samtools_sort/bam_sorted\n#    type: File[]\n#lofreq_call:\n#  - id: vcf\n#    outputSource:\n#      - lofreq_call/vcf\n#    type: File[]\n#SNPEFF:\n  - id: csvFile\n    outputSource:\n      - snpeff_build_ann/csvFile\n    type: File[]?\n  - id: genes\n    outputSource:\n      - snpeff_build_ann/genes\n    type: File[]?\n#  - id: snpeff_output\n#    outputSource:\n#      - snpeff_build_ann/snpeff_output\n#    type: File[]?\n  - id: statsFile\n    outputSource:\n      - snpeff_build_ann/statsFile\n    type: File[]?\n#SNPSIFT:\n  - id: out\n    outputSource:\n      - snpsift_extract/out\n    type: File[]\n\nsteps:\n  - id: fastp\n    scatter: fastq1\n    in:\n      - id: base_correction\n        source: base_correction\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: reads\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n      - id: qualified_phred_quality\n        source: qualified_phred_quality\n      - id: threads\n        source: threads\n      - id: unqualified_phred_quality\n        source: unqualified_phred_quality\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n    run: ./tools/fastp.cwl\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_fast'\n      - id: qc_files_array\n        source: fastp/json_report\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: bowtie2_build\n    in:\n      - id: bmax\n        source: bmax\n      - id: bmaxdivn\n        source: bmaxdivn\n      - id: bt2_index_base\n        source: bt2_index_base\n      - id: c\n        source: c\n      - id: dcv\n        source: dcv\n      - id: f\n        source: f\n      - id: ftabchars\n        source: ftabchars\n      - id: justref\n        source: justref\n      - id: large_index\n        source: large_index\n      - id: noauto\n        source: noauto\n      - id: nodc\n        source: nodc\n      - id: noref\n        source: noref\n      - id: offrate\n        source: offrate\n      - id: packed\n        source: packed\n      - id: quiet\n        source: quiet\n      - id: reference_in\n        source:\n          - reference_in\n      - id: seed\n        source: seed\n      - id: threads\n        source: threads_bowtie2\n    out:\n      - id: indices\n      - id: output_log\n    run: ./tools/bowtie2_build.cwl\n\n  - id: bowtie2_align\n    scatter: filelist\n    in:\n      - id: filelist\n        source: fastp/out_fastq1\n      - id: indices_file\n        source: bowtie2_build/indices\n      - id: end_to_end_very_sensitive\n        source: end_to_end_very_sensitive\n    out:\n      - id: output\n      - id: output_log\n    run: ./tools/bowtie2_align.cwl\n  - id: picard__sort_sam\n    scatter: alignments\n    in:\n      - id: alignments\n        source: bowtie2_align/output\n      - id: sort_order\n        source: sort_order\n      - id: validation_stringency\n        source: validation_stringency\n    out:\n      - id: sorted_alignments\n    run: ./tools/picard_SortSam.cwl\n\n  - id: picard__mark_duplicates\n    scatter: alignments\n    in:\n      - id: alignments_are_sorted\n        source: alignments_are_sorted\n      - id: alignments\n        source: picard__sort_sam/sorted_alignments\n      - id: barcode_tag\n        source: barcode_tag\n      - id: comment\n        source:\n          - comment\n      - id: duplicate_scoring_strategy\n        source: duplicate_scoring_strategy\n      - id: optical_duplicate_pixel_distance\n        source: optical_duplicate_pixel_distance\n      - id: remove_duplicates\n        source: remove_duplicates\n      - id: validation_stringency\n        source: validation_stringency_1\n    out:\n      - id: alignments\n      - id: log\n      - id: metrics\n    run: ./tools/picard_MarkDuplicates.cwl\n\n  - id: lofreq_viterbi\n    scatter: reads\n    in:\n      - id: bq2_handling\n        source: bq2_handling\n      - id: defqual\n        source: defqual\n      - id: keepflags\n        source: keepflags\n      - id: reads\n        source: picard__mark_duplicates/alignments\n      - id: reference\n        source: reference_in\n    out:\n      - id: realigned\n    run: ./tools/lofreq_viterbi.cwl\n  - id: samtools_sort\n    scatter: bam_unsorted\n    in:\n      - id: bam_unsorted\n        source: lofreq_viterbi/realigned\n    out:\n      - id: bam_sorted\n    run: ./tools/samtools_sort.cwl\n\n  - id: samtools_faidx\n    in:\n      - id: sequences\n        source: reference_in\n    out:\n      - id: sequences_index\n      - id: sequences_with_index\n    run: ./tools/samtools_faidx.cwl\n\n  - id: samtool_index\n    scatter: bam_sorted\n    in:\n      - id: bam_sorted\n        source: samtools_sort/bam_sorted\n    out:\n      - id: bam_sorted_indexed\n    run: ./tools/samtools_index.cwl\n\n\n  - id: lofreq_call\n    scatter: [reads_align, reads_index]\n    scatterMethod: \"dotproduct\"\n    in:\n      - id: threads\n        source: threads_lf_call\n      - id: reference_index\n        source: samtools_faidx/sequences_index\n      - id: reference_fasta\n        source: samtools_faidx/sequences_with_index\n      - id: call_indels\n        source: call_indels\n      - id: only_indels\n        source: only_indels\n      - id: bed\n        source: bed\n      - id: region\n        source: region\n      - id: min_bq\n        source: min_bq\n      - id: min_alt_bq\n        source: min_alt_bq\n      - id: def_alt_bq\n        source: def_alt_bq\n      - id: min_jq\n        source: min_jq\n      - id: min_alt_jq\n        source: min_alt_jq\n      - id: def_alt_jq\n        source: def_alt_jq\n      - id: no_baq\n        source: no_baq\n      - id: no_idaq\n        source: no_idaq\n      - id: del_baq\n        source: del_baq\n      - id: no_ext_base_alignment_quality\n        source: no_ext_base_alignment_quality\n      - id: min_mq\n        source: min_mq\n      - id: max_mapping_quality\n        source: max_mapping_quality\n      - id: no_mapping_quality\n        source: no_mapping_quality\n      - id: enable_source_qual\n        source: enable_source_qual\n      - id: ignore_vcf\n        source:\n          - ignore_vcf\n      - id: replace_non_match\n        source: replace_non_match\n      - id: pvalue_cutoff\n        source: pvalue_cutoff\n      - id: bonferroni\n        source: bonferroni\n      - id: min_cov\n        source: min_cov\n      - id: max_depth_cov\n        source: max_depth_cov\n      - id: illumina_1_3\n        source: illumina_1_3\n      - id: use_orphan\n        source: use_orphan\n      - id: no_default_filter\n        source: no_default_filter\n      - id: reads_align\n        source: samtools_sort/bam_sorted\n      - id: reads_index\n        source: samtool_index/bam_sorted_indexed\n    out:\n      - id: vcf\n    run: ./tools/lofreq_call.cwl\n    label: LoFreq Call Variants\n\n  - id: snpeff_build_ann\n    scatter: sequence\n    in: \n      - id: importGenome\n        source: importGenome\n      - id: genome_reference\n        source: genome_reference\n      - id: bankfile\n        source: bankfile\n      - id: sequence\n        source: lofreq_call/vcf\n      - id: outputFormat\n        source: outputFormat\n      - id: udLength\n        source: udLength\n      - id: html_report\n        source: html_report_1\n      - id: csvFile\n        source: csvFile\n      - id: noStats\n        source: noStats\n      - id: formatEff\n        source: formatEff\n      - id: classic\n        source: classic\n      - id: sequenceOntology\n        source: sequenceOntology\n      - id: hgvs\n        source: hgvs\n      - id: noShiftHgvs\n        source: noShiftHgvs\n      - id: noHgvs\n        source: noHgvs\n      - id: geneId\n        source: geneId\n      - id: lof\n        source: lof\n      - id: noLof\n        source: noLof\n      - id: cancer\n        source: cancer\n      - id: cancerSamples\n        source: cancerSamples\n      - id: oicr\n        source: oicr\n      - id: canon\n        source: canon\n      - id: motif\n        source: motif\n      - id: noMotif\n        source: noMotif\n      - id: noNextProt\n        source: noNextProt\n      - id: nextProt\n        source: nextProt\n      - id: noGenome\n        source: noGenome\n      - id: onlyProtein\n        source: onlyProtein\n      - id: transcripts\n        source: transcripts\n      - id: interval\n        source:\n          - interval\n      - id: spliceRegionExonSize\n        source: spliceRegionExonSize\n      - id: spliceRegionIntronMax\n        source: spliceRegionIntronMax\n      - id: spliceRegionIntronMin\n        source: spliceRegionIntronMin\n      - id: spliceSiteSize\n        source: spliceSiteSize\n      - id: onlyReg\n        source: onlyReg\n      - id: strict\n        source: strict\n      - id: filterInterval\n        source:\n          - filterInterval\n      - id: no_downstream\n        source: no_downstream\n      - id: no_intergenic\n        source: no_intergenic\n      - id: no_intron\n        source: no_intron\n      - id: no_upstream\n        source: no_upstream\n      - id: no_utr\n        source: no_utr\n      - id: no_EffectType\n        source: no_EffectType\n    out:\n      - id: snpeff_output\n      - id: statsFile\n      - id: csvFile\n      - id: genes\n    run: ./tools/snpEff_build_ann.cwl\n\n  - id: snpsift_extract\n    scatter: input_vcf\n    in:\n      - id: input_vcf\n        source: snpeff_build_ann/snpeff_output\n      - id: extractFields\n        source:\n          - extractFields\n      - id: separator\n        source: separator\n      - id: empty_text\n        source: empty_text\n    out:\n      - id: out\n    run: ./tools/snpSift_extract.cwl\n\nrequirements:\n  ScatterFeatureRequirement: {}\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "Workflow",
    "cwl_id": "var",
    "cwl_inputs": "[{'id': 'reads', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reference_in', 'type': 'File'}, {'id': 'unqualified_phred_quality', 'type': 'int?'}, {'id': 'threads', 'type': 'int?'}, {'id': 'qualified_phred_quality', 'type': 'int?'}, {'id': 'min_length_required', 'type': 'int?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'base_correction', 'type': 'boolean?'}, {'id': 'bmax', 'type': 'int?'}, {'id': 'bmaxdivn', 'type': 'int?'}, {'id': 'bt2_index_base', 'type': 'string?'}, {'id': 'c', 'type': 'boolean?'}, {'id': 'dcv', 'type': 'int?'}, {'id': 'f', 'type': 'boolean?'}, {'id': 'ftabchars', 'type': 'int?'}, {'id': 'justref', 'type': 'boolean?'}, {'id': 'large_index', 'type': 'boolean?'}, {'id': 'noauto', 'type': 'boolean?'}, {'id': 'nodc', 'type': 'boolean?'}, {'id': 'noref', 'type': 'boolean?'}, {'id': 'offrate', 'type': 'int?'}, {'id': 'packed', 'type': 'boolean?'}, {'id': 'quiet', 'type': 'boolean?'}, {'id': 'seed', 'type': 'int?'}, {'id': 'threads_bowtie2', 'type': 'int?'}, {'id': 'end_to_end_very_sensitive', 'type': 'boolean?'}, {'id': 'sort_order', 'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}]}, {'id': 'validation_stringency', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'alignments_are_sorted', 'type': 'boolean'}, {'id': 'remove_duplicates', 'type': 'boolean'}, {'id': 'validation_stringency_1', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'comment', 'type': 'string[]?'}, {'id': 'duplicate_scoring_strategy', 'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}]}, {'id': 'read_name_regex', 'type': 'string?'}, {'id': 'optical_duplicate_pixel_distance', 'type': 'int?'}, {'id': 'barcode_tag', 'type': 'string?'}, {'id': 'keepflags', 'type': 'boolean?'}, {'id': 'defqual', 'type': 'int?'}, {'id': 'bq2_handling', 'type': ['null', {'type': 'enum', 'symbols': ['keep', 'dynamic', 'fixed'], 'name': 'bq2_handling'}]}, {'id': 'bed', 'type': 'File?'}, {'id': 'bonferroni', 'type': 'string?'}, {'id': 'call_indels', 'type': 'boolean?'}, {'id': 'def_alt_bq', 'type': 'int?'}, {'id': 'def_alt_jq', 'type': 'int?'}, {'id': 'del_baq', 'type': 'boolean?'}, {'id': 'enable_source_qual', 'type': 'boolean?'}, {'id': 'ignore_vcf', 'type': 'File[]?'}, {'id': 'illumina_1_3', 'type': 'boolean?'}, {'id': 'max_depth_cov', 'type': 'int?'}, {'id': 'max_mapping_quality', 'type': 'int?'}, {'id': 'min_bq', 'type': 'int?'}, {'id': 'min_cov', 'type': 'int?'}, {'id': 'min_mq', 'type': 'int?'}, {'id': 'use_orphan', 'type': 'boolean?'}, {'id': 'threads_lf_call', 'type': 'int?'}, {'id': 'replace_non_match', 'type': 'int?'}, {'id': 'region', 'type': 'string?'}, {'id': 'pvalue_cutoff', 'type': 'float?'}, {'id': 'only_indels', 'type': 'boolean?'}, {'id': 'no_idaq', 'type': 'boolean?'}, {'id': 'no_default_filter', 'type': 'boolean?'}, {'id': 'no_baq', 'type': 'boolean?'}, {'id': 'no_mapping_quality', 'type': 'boolean?'}, {'id': 'no_ext_base_alignment_quality', 'type': 'boolean?'}, {'id': 'min_jq', 'type': 'int?'}, {'id': 'min_alt_jq', 'type': 'int?'}, {'id': 'min_alt_bq', 'type': 'int?'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'udLength', 'type': 'int'}, {'id': 'transcripts', 'type': 'File?'}, {'id': 'strict', 'type': 'boolean?'}, {'id': 'spliceSiteSize', 'type': 'int?'}, {'id': 'spliceRegionIntronMin', 'type': 'int?'}, {'id': 'spliceRegionIntronMax', 'type': 'int?'}, {'id': 'spliceRegionExonSize', 'type': 'int?'}, {'id': 'sequenceOntology', 'type': 'boolean?'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn'], 'name': 'outputFormat'}]}, {'id': 'onlyReg', 'type': 'boolean?'}, {'id': 'onlyProtein', 'type': 'boolean?'}, {'id': 'oicr', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'noShiftHgvs', 'type': 'boolean?'}, {'id': 'noNextProt', 'type': 'boolean?'}, {'id': 'noMotif', 'type': 'boolean?'}, {'id': 'bankfile', 'type': 'File?'}, {'id': 'cancer', 'type': 'boolean?'}, {'id': 'cancerSamples', 'type': 'File?'}, {'id': 'canon', 'type': 'boolean?'}, {'id': 'classic', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'filterInterval', 'type': 'File[]?'}, {'id': 'hgvs', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?'}, {'id': 'html_report_1', 'type': 'boolean?'}, {'id': 'importGenome', 'type': 'boolean'}, {'id': 'interval', 'type': 'File[]?'}, {'id': 'lof', 'type': 'boolean?'}, {'id': 'motif', 'type': 'boolean?'}, {'id': 'nextProt', 'type': 'boolean?'}, {'id': 'no_downstream', 'type': 'boolean?'}, {'id': 'no_EffectType', 'type': 'boolean?'}, {'id': 'no_intergenic', 'type': 'boolean?'}, {'id': 'no_intron', 'type': 'boolean?'}, {'id': 'no_upstream', 'type': 'boolean?'}, {'id': 'no_utr', 'type': 'boolean?'}, {'id': 'noGenome', 'type': 'boolean?'}, {'id': 'noHgvs', 'type': 'boolean?'}, {'id': 'noLof', 'type': 'boolean?'}, {'id': 'geneId', 'type': 'boolean?'}, {'id': 'separator', 'type': 'string?'}, {'id': 'empty_text', 'type': 'string?'}, {'id': 'extractFields', 'type': 'string[]?'}]",
    "cwl_outputs": "[{'id': 'multiqc_fastp', 'outputSource': ['multiqc_fastp/multiqc_zip']}, {'id': 'output_log', 'outputSource': ['bowtie2_align/output_log'], 'type': 'File[]'}, {'id': 'metrics', 'outputSource': ['picard__mark_duplicates/metrics'], 'type': 'File[]'}, {'id': 'log', 'outputSource': ['picard__mark_duplicates/log'], 'type': 'File[]'}, {'id': 'alignments', 'outputSource': ['picard__mark_duplicates/alignments'], 'type': 'File[]'}, {'id': 'csvFile', 'outputSource': ['snpeff_build_ann/csvFile'], 'type': 'File[]?'}, {'id': 'genes', 'outputSource': ['snpeff_build_ann/genes'], 'type': 'File[]?'}, {'id': 'statsFile', 'outputSource': ['snpeff_build_ann/statsFile'], 'type': 'File[]?'}, {'id': 'out', 'outputSource': ['snpsift_extract/out'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "var",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/spades/spades.cwl",
    "sha": "503cfe9639963ebf271f37b31d28a4a5c7b53083",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/spades/spades.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: spades\nbaseCommand:\n  - bash\n#  - cat\ninputs:\n\n##############\n\n \n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n\n\n\n      \noutputs:\n\n  - id: out_contig_stats\n    type: File\n    outputBinding:\n      glob: out_contig_stats.*\n    doc: \"contig stats, default column_names: name,length,coverage\"\n\n  - id: out_scaffold_stats\n    type: File\n    outputBinding:\n      glob: out_scaffold_stats.*\n    doc: \"scaffold stats, default column_names: name,length,coverage\"\n\n  - id: out_contigs\n    type: File\n    outputBinding:\n      glob: contigs.fasta\n    doc: \"contigs (fasta sequence)\"\n\n  - id: out_scaffolds\n    type: File\n    outputBinding:\n      glob: scaffolds.fasta\n    doc: \"scaffolds (fasta sequence)\"\n\n  - id: all_script\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.sh\"  \n    doc: \"generated script to run spades. for learning purpose\" \n\n  - id: all_log\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.log\"  \n    doc: \"spades output log and warnings\" \n\n\n\n#  - id: out_log\n#    type: File\n#    outputBinding:\n#      glob: spades.log\n#    doc: \"spades output log\"\n\n\n  - id: assembly_graph\n    type: File\n    outputBinding:\n      glob: assembly_graph.fastg\n    doc: \"assembly graph\" \n\n \n  - id: assembly_graph_with_scaffolds\n    type: File\n    outputBinding:\n      glob: assembly_graph_with_scaffolds.gfa\n    doc: \"assembly graph with scaffolds\" \n\n\n############available ouput  files:\n#assembly_graph_with_scaffolds.gfa\n#assembly_graph.fastg\n#warnings.log\n#scaffolds.paths\n#contigs.paths\n#spades_wrapper.sh\n#before_rr.fasta\n#contigs.fasta\n#dataset.info\n#input_dataset.yaml\n#out_contig_stats.tab\n#out_scaffold_stats.tab\n#params.txt\n#run_spades.sh\n#scaffolds.fasta\n#write_tsv.py\n \n\n      \n      \narguments:\n  - spades_wrapper.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n####################\n      - entryname: write_tsv.py\n        entry: |\n               #######input file here\n               #!/usr/bin/env python\n               import sys,re\n               search_str = r'^>(NODE|\\S+)_(\\d+)(?:_|\\s)length_(\\d+)_cov_(\\d+\\.*\\d*).*\\$'\n               replace_str = r'\\1_\\2\\t\\3\\t\\4'\n               cmd = re.compile(search_str)\n               sys.stdout.write('#name\\tlength\\tcoverage\\n')\n               for i,line in enumerate(sys.stdin):\n                  if cmd.match(line):\n                     sys.stdout.write(cmd.sub(replace_str,line))\n\n####################\n      - entryname: spades_wrapper.sh\n        entry: |\n               ####################spades launcher\n               #!/bin/bash\n               ## An example command looks like:\n               ## spades.py -k 21,33,55,77,99,127 --careful -1 Y.fastq.gz -2 X.fastq.gz -t 24 -o output \n               read -d '' MEMORY_GB << EOF\n               ${ \n                //compute memory limits\n                var mem=\"250\"\n                if(runtime.ram){\n                  var bt=runtime.ram * 1048576 //mebibytes to bytes               \n                  bt=bt*0.000000001 //bytes to Gigabytes \n                  mem=parseInt(bt)\n                }\n                return \"-\"+mem\n               }\n               EOF\n               #echo \"MEMORY_GB limit: \\$MEMORY_GB\"\n               read -d '' CORES << EOF\n               ${ \n                //compute core / slot\n                var cores=\"16\" \n                if(runtime.cores){\n                  cores=runtime.cores\n                }\n                return  cores\n               }\n               EOF\n               #echo \"CORES : \\$CORES\"\n               read -d '' SPADES_OPT << EOF\n               ${   \n                 var opt=\"\"\n                   if (inputs.sc==true){\n                    opt+=\" --sc \"\n                   }\n                   if (inputs.onlyassembler==true){\n                    opt+=\" --only-assembler \"\n                   }\n                   if (inputs.careful==true){\n                    opt+=\" --careful \"\n                   }\n                 return opt  \n               }\n               EOF\n\n\n               read -d '' CMD_BASE << EOF\n               spades.py -o . --disable-gzip-output  \n                 \\$SPADES_OPT \n                -t \\$CORES -m \\$MEMORY_GB\n               ${   \n                 var opt=\"\"\n                   if (inputs.auto_kmer_choice==false){\n                    opt+=\" -k \"+inputs.kmers \n                   }\n                 return opt  \n               }\n               ${\n                 var opt=\"\"\n                 if (inputs.cov_state==null || inputs.cov_state == \"auto\"){\n                      opt+=\" --cov-cutoff 'auto' \"\n                  }\n                 else if (inputs.cov_state == \"value\"){\n                      opt+=\" --cov-cutoff '\"+inputs.cov_cutoff+\"' \"\n                  }\n                 if (inputs.iontorrent==true ){\n                      opt+=\" --iontorrent \"\n                 } \n                 return opt  \n               }\n               EOF\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' CMD_READ1 << EOF\n               ${\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n                      if (lmeta.lib_type !=null && lmeta.lib_type == \"paired_end\"){\n                           prefix = 'pe'\n                       } \n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"mate_paired\"){\n                           prefix = 'mp'\n                       }\n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"nxmate_paired\"){\n                           prefix = 'nxmate'\n                       }                       \n                      else {\n                           prefix = 'hqmp'\n                       }\n                      var idx=lmeta.lib_index\n                      lib_prefix[idx]=prefix\n                      opt+=\" --\"+prefix+idx+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n\n               #########################>DEBUG\n\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' ZZDEBUG << EOF\n               ${\n               //var opt=\"inputs.libraries_metadata.length:\"+inputs.libraries_metadata.length+\" \"              \n               //var str = JSON.stringify(inputs.libraries_metadata)\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   opt+=\" not null \"\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n \n                      opt+=\" !!-AA-\"+lmeta.lib_index+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n               #########################<DEBUG\n\n\n\n\n\n\n\n\n\n\n               read -d '' CMD_READ2 << EOF\n               ${\n                 var opt=\"\"\n                 if (inputs.pacbio_reads!=null){\n                   for(var i=0; i<inputs.pacbio_reads.length;i++){\n                      var read=inputs.pacbio_reads[i]\n                      opt+=\" --pacbio fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.nanopore_reads!=null){\n                   for(var i=0; i<inputs.nanopore_reads.length;i++){\n                      var read=inputs.nanopore_reads[i]\n                      opt+=\" --nanopore fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.sanger_reads!=null){\n                   for(var i=0; i<inputs.sanger_reads.length;i++){\n                      var read=inputs.sanger_reads[i]\n                      opt+=\" --sanger fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.trusted_contigs!=null){\n                   for(var i=0; i<inputs.trusted_contigs.length;i++){\n                      var read=inputs.trusted_contigs[i]\n                      opt+=\" --trusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.untrusted_contigs!=null){\n                   for(var i=0; i<inputs.untrusted_contigs.length;i++){\n                      var read=inputs.untrusted_contigs[i]\n                      opt+=\" --untrusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 return opt  \n               }\n               EOF\n               ##########################################\n               read -d '' CMD_POST << EOF\n                 && python write_tsv.py < contigs.fasta > out_contig_stats.tab\n                 && python write_tsv.py < scaffolds.fasta > out_scaffold_stats.tab\n               EOF\n               ##########################################   \n               # echo \"CMD_BASE : \\$CMD_BASE\"  > zz.txt   \\\\\n               #        && echo \"CMD_READ1 : \\$CMD_READ1\"  >> zz.txt   \\\\\n               #        && echo \"CMD_READ2 : \\$CMD_READ2\"  >> zz.txt   \\\\\n               #        && echo \"CMD_POST : \\$CMD_POST\"   >> zz.txt\n               COMMAND=\"\\$CMD_BASE \\$CMD_READ1 \\$CMD_READ2 \\$CMD_POST\"\n               COMMAND=\\$(echo $COMMAND|tr -d '\\\\n')\n               echo \"\\$COMMAND\"  > run_spades.sh\n               bash  ./run_spades.sh\n\n \n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  example workflow for js wrapper generation\n  see  https://github.com/rrwick/Unicycler\n  outputs : all genretated files\n\n\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "spades",
    "cwl_inputs": "[{'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contig_stats', 'type': 'File', 'outputBinding': {'glob': 'out_contig_stats.*'}, 'doc': 'contig stats, default column_names: name,length,coverage'}, {'id': 'out_scaffold_stats', 'type': 'File', 'outputBinding': {'glob': 'out_scaffold_stats.*'}, 'doc': 'scaffold stats, default column_names: name,length,coverage'}, {'id': 'out_contigs', 'type': 'File', 'outputBinding': {'glob': 'contigs.fasta'}, 'doc': 'contigs (fasta sequence)'}, {'id': 'out_scaffolds', 'type': 'File', 'outputBinding': {'glob': 'scaffolds.fasta'}, 'doc': 'scaffolds (fasta sequence)'}, {'id': 'all_script', 'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.sh'}, 'doc': 'generated script to run spades. for learning purpose'}, {'id': 'all_log', 'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.log'}, 'doc': 'spades output log and warnings'}, {'id': 'assembly_graph', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph.fastg'}, 'doc': 'assembly graph'}, {'id': 'assembly_graph_with_scaffolds', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph_with_scaffolds.gfa'}, 'doc': 'assembly graph with scaffolds'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['spades_wrapper.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "example workflow for js wrapper generation\nsee  https://github.com/rrwick/Unicycler\noutputs : all genretated files\n\n\n  \n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/spades/spades_assembly_wf.cwl",
    "sha": "e5b15b5b1c8d84ea3c891776c173b350315f02ba",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/spades/spades_assembly_wf.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: spaces_assembly\nlabel: spaces_assembly\n\n\n\ninputs:\n\n##############\n\n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n \n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n \n\noutputs:\n\n  - id: out_contigs\n    outputSource:\n      - spades/out_contigs\n    type: 'File'\n\n  - id: out_scaffolds\n    outputSource:\n      - spades/out_scaffolds\n    type: 'File'\n\n  - id: out_contig_stats\n    outputSource:\n      - spades/out_contig_stats\n    type: 'File'\n\n\n  - id: out_scaffold_stats\n    outputSource:\n      - spades/out_scaffold_stats\n    type: 'File'\n\n\n  - id: assembly_graph\n    outputSource:\n      - spades/assembly_graph\n    type: 'File'\n\n  - id: assembly_graph_with_scaffolds\n    outputSource:\n      - spades/assembly_graph_with_scaffolds\n    type: 'File'\n\n  - id: all_log\n    outputSource:\n      - spades/all_log\n    type: 'File[]'\n\n#  - id: all_script\n#    outputSource:\n#      - spades/all_script\n#    type: 'File[]'\n\n\n\n\n\nsteps:\n  - id: spades\n    in:\n\n\n      - id: nanopore_reads\n        source: nanopore_reads\n      - id: pacbio_reads\n        source: pacbio_reads\n      - id: sanger_reads\n        source: sanger_reads\n      - id: libraries_metadata\n        source: libraries_metadata\n      - id: libraries_fwd_rev\n        source: libraries_fwd_rev\n      - id: libraries_mono\n        source: libraries_mono\n      - id: trusted_contigs\n        source: trusted_contigs\n      - id: untrusted_contigs\n        source: untrusted_contigs\n      - id: cov_state\n        source: cov_state\n      - id: cov_cutoff\n        source: cov_cutoff\n      - id: iontorrent\n        source: iontorrent\n      - id: sc\n        source: sc\n      - id: onlyassembler\n        source: onlyassembler\n      - id: careful\n        source: careful\n\n    out:\n\n      - id: out_contigs\n      - id: out_scaffolds\n\n      - id: out_contig_stats\n      - id: out_scaffold_stats\n\n      - id: assembly_graph\n      - id: assembly_graph_with_scaffolds\n\n      - id: all_log\n#      - id: all_script\n\n\n\n    run: ../../bio-cwl-tools/spades/spades.cwl\n\nrequirements: []\n\ndoc: |\n       assemby workflow with  SPADES assembler\n\n    \n\n",
    "cwl_class": "Workflow",
    "cwl_id": "spaces_assembly",
    "cwl_inputs": "[{'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contigs', 'outputSource': ['spades/out_contigs'], 'type': 'File'}, {'id': 'out_scaffolds', 'outputSource': ['spades/out_scaffolds'], 'type': 'File'}, {'id': 'out_contig_stats', 'outputSource': ['spades/out_contig_stats'], 'type': 'File'}, {'id': 'out_scaffold_stats', 'outputSource': ['spades/out_scaffold_stats'], 'type': 'File'}, {'id': 'assembly_graph', 'outputSource': ['spades/assembly_graph'], 'type': 'File'}, {'id': 'assembly_graph_with_scaffolds', 'outputSource': ['spades/assembly_graph_with_scaffolds'], 'type': 'File'}, {'id': 'all_log', 'outputSource': ['spades/all_log'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "spaces_assembly",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/unicycler/assembly_unicycler_only.cwl",
    "sha": "7a196007b7e242d2f54d86d8d964d94dd48cc979",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/unicycler/assembly_unicycler_only.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: assembly\nlabel: assembly\ndoc:  \"Paired data assembly with Unicycler,  non long reads in this version\"\n\ninputs:\n\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n    doc:  \"Paired and single end data\"\n  \n  \n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n\n\n\n \noutputs:\n  - id: exec_script\n    outputSource:\n      - unicycler/exec_script\n    type: File\n \n  - id: assembly_graph\n    outputSource:\n      - unicycler/assembly_graph\n    type: File\n \n  - id: assembly\n    outputSource:\n      - unicycler/assembly\n    type: File\n \nsteps:\n  - id: unicycler\n    in:\n      - id: fastq1_type\n        source: fastq1_type\n      - id: fastq1\n        source: fastq1\n      - id: fastq2_type\n        source: fastq2_type\n      - id: fastq2\n        source: fastq2\n      - id: mode\n        source: mode\n      - id: fastq_file_type\n        source: fastq_file_type\n\n\n    out:\n      - id: exec_script\n      - id: assembly_graph\n      - id: assembly\n    run: ./unicycler.cwl\n    \nrequirements: []\n\n\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "assembly",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}]",
    "cwl_outputs": "[{'id': 'exec_script', 'outputSource': ['unicycler/exec_script'], 'type': 'File'}, {'id': 'assembly_graph', 'outputSource': ['unicycler/assembly_graph'], 'type': 'File'}, {'id': 'assembly', 'outputSource': ['unicycler/assembly'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Paired data assembly with Unicycler,  non long reads in this version",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "assembly",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/unicycler/unicycler.cwl",
    "sha": "f2fc606431cac7ca1e946c161672f9e9e06e4b9e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/unicycler/unicycler.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: unicycler\nbaseCommand:\n  - bash\n#  - cat\ninputs:\n\n\n \n##tyoe selector\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n#     symbols: [paired,single,paired_collection]\n#    default: single   \n    doc:  \"Paired and single end data\"\n\n##############\n\n##input1\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n\n##input2\n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n \n\n\n\n\n\n#sequence_long (optional)\n\n  - id: sequence_long_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - fastqsanger\n          - fastqsanger.gz\n          - fasta\n    doc: \"long reads file type. If there are no long reads, leave this empty\"\n\n    \n  - id: sequence_long\n    type:  File?\n    doc: \"long reads. If there are no long reads, leave this empty\"\n#    \n  - id: compute_slots\n    type:  int\n    default: 4\n    doc: \"\"\n    \n\n\n\n##mode selector\n\n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: min_fasta_length\n    type:  int\n    default: 100\n    doc: \"Exclude contigs from the FASTA file which are shorter than this length (bp)\"\n\n\n  - id: linear_seqs\n    type:  int\n    default: 0\n    doc: \"The expected number of linear (i.e. non-circular) sequences in the assembly\"\n\n\n  - id: min_anchor_seg_len\n    type:  int\n    default: 0\n    doc: \"Unicycler will not use segments shorter than this as scaffolding anchors\"\n\n\n  - id: spades_no_correct\n    type:  boolean\n    default: false\n    doc: |\n        Unicycler uses SPAdes to construct assembly graphs.\n        You can modify some of the SPAdes settings here.\n        Use this ONLY if you know what you are doing!\n        This option turns off SPAdes error correction. \n        Generally it is highly recommended to use correction.\n\n \n  - id: spades_min_kmer_frac\n    type:  float\n    default: 0.2\n    doc: |\n         Lowest k-mer size for SPAdes assembly,\n         expressed as a fraction of the read length. \n         min 0, max 1\n\n  - id: spades_max_kmer_frac\n    type:  float\n    default: 0.95\n#    max: 1.0\n#    min: 0.0\n    doc: |\n         Highest k-mer size for SPAdes assembly,\n         expressed as a fraction of the read length. \n         min 0, max 1\n\n  \n  # check default values\n  - id: spades_kmers\n    type:  string\n    default: \"11,127\"\n    doc: |\n         Exact k-mers size to use for SPAdes assembly, comma-separated\"\n         Kmers must be comma-separated odd integers (no repitition)\n         without space in the range of 11 to 127 (inclusive)\n\n  - id: spades_kmer_count\n    type:  int\n    default: 10\n#    min: 0\n    doc: \"Number of k-mer steps to use in SPAdes assembly, min 0\"\n\n\n \n  - id: spades_depth_filter\n    type:  float\n    default: 0.25\n#    min: 0.0\n#    max: 1.0\n    doc: |\n         Filter out contigs lower than this fraction \n         of the chromosomal depth.\n         It is done if does not result in graph dead ends\n         min 0, max 1\n\n  - id: spades_largest_component\n    type:  boolean\n    default: false\n    doc: \"Only keep the largest connected component of the assembly graph if true\"\n\n\n\n  - id: rotation_no_rotate\n    type:  boolean\n    default: false\n    doc: |\n         These options control the rotation of completed circular sequence\n         near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\n         Do not rotate completed replicons to start at a standard gene.\n         Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\n         If one is found, the sequence is rotated and/or flipped so that it begins with that gene\n         encoded on the forward strand. This provides consistently oriented assemblies and reduces\n         the risk that a gene will be split across the start and end of the sequence.\n    \n  - id: rotation_start_genes\n    type:  File? \n    doc: \"FASTA file of genes for start point of rotated replicons\"\n\n\n\n  - id: rotation_start_gene_id\n    type:  float\n    default: 90.0\n    doc: \"The minimum required BLAST percent identity for a start gene search. max 100, min 0\"\n\n\n  - id: rotation_start_gene_cov\n    type:  float\n    default: 95.0\n    doc: \"The minimum required BLAST percent coverage for a start gene search. min 0, max 100\"\n\n\n  - id: pilon_no_pilon\n    type:  boolean\n    default: false\n    doc: \"Unicycler uses Pilon tool for polishing final assembly. Do not use if true\"\n\n\n  - id: graph_clean_min_component_size\n    type:  int\n    default: 1000\n    doc: \"Contigs shorter than this value (bp) will not be polished using Pilon; min 0\"\n\n    \n  - id: graph_clean_min_dead_end_size\n    type:  int\n    default: 1000\n    doc: |\n         These options control the removal of small leftover sequences after bridging is complete.\n         Unbridged graph components smaller than this size will be removed from the final graph,\n         min 0    \n\n  - id: lr_align_contamination\n    type:  File?\n    doc: |\n         FASTA file of known contamination in long reads,\n         e.g. lambda, phiXm or puc18 spike-ins. \n\n  - id: lr_align_scores\n    type:  string\n    default: \"3,-6,-5,-2\"\n    doc: |\n          Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\n\n\n  - id: lr_align_low_score\n    type:  int?\n    doc: |\n          Score threshold - alignments below this are considered poor,\n          default = set automatically\n\n\n\n \n    \noutputs:\n  - id: exec_script\n    type: File\n    outputBinding:\n      glob: \"*.sh\"  \n    doc: |\n          Launching script for learning purpose\n\n\n  - id: assembly_graph\n    type: File\n    outputBinding:\n      glob: assembly.gfa\n    doc: |\n          Assembly graph\n\n\n\n  - id: assembly\n    type: File\n    outputBinding:\n      glob: assembly.fasta\n    doc: |\n          fasta assembly output sequence\n          (main output)\n      \n      \narguments:\n  - unicycler_launch.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: unicycler_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               #      unicycler launcher\n               ###########################\n\n               ##preparing input files\n               #check permission / chmod  is issues\n               ${\n                 var fl=\"\"\n                 var lncmd=\"\" \n                 var fq1=\"\"\n                 var fq2=\"\"\n                 var lr=\"\"\n                  \n               //###################paired case              \n                     if (inputs.fastq_file_type ==\"paired\"  ){\n                      if( inputs.fastq1_type=='fastqsanger' ){\n                          fq1 = \"fq1.fastq\"\n                      }\n                      else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                           fq1 = \"fq1.fastq.gz\"\n                      }\n                      if( inputs.fastq2_type=='fastqsanger' ){\n                          fq2 = \"fq2.fastq\"\n                       }\n                       else if( inputs.fastq2_type=='fastqsanger.gz' ){\n                           fq2 = \"fq2.fastq.gz\"\n                        }\n                        lncmd+=\"fq1='\"+fq1+\"'\"\n                        lncmd+=\" && \"\n                        lncmd+=\"fq2='\"+fq2+\"'\"\n                        lncmd+=\" && \"\n                        lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                        lncmd+=\" && \"\n                        lncmd+=\" ln -s '\"+inputs.fastq2.path+\"' $fq2  \"\n        \n                     }\n                //###################single case\n                 \n                if (inputs.fastq_file_type ==\"single\"  ){\n                  if( inputs.fastq1_type=='fastqsanger' ){\n                      fq1 = \"fq1.fastq\"\n                  }\n                  else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                       fq1 = \"fq1.fastq.gz\"\n                  }\n                  lncmd+=\"fq1='\"+fq1+\"'\"\n                  lncmd+=\" && \"\n                  lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                 }\n                 //####### long reads\n                  if (  inputs.sequence_long !== null) {\n                      if (inputs.sequence_long_type=='fastqsanger'){\n                               lr = \"lr.fastq\"\n                      }\n                      else if (inputs.sequence_long_type=='fastqsanger.gz') {\n                               lr = \"lr.fastq.gz\"\n                      }\n                      else if (inputs.sequence_longg_type=='fasta') {\n                               lr = \"lr.fasta\"\n                      }\n                      lncmd+=\"lr='\"+lr+\"'\"\n                      lncmd+=\" && \"\n                      lncmd+= \" ln -s '\"+inputs.sequence_long.path+\"' '$lr' \"\n                  }\n\n\n                  return lncmd\n\n               }\n\n\n               ##general options\n\n               read -d '' GENERALOPT << EOF\n               ${\n                var opt=\"\"  \n                //## General Unicycler Options section\n                opt+=\" --mode \"+inputs.mode+\" \"\n                opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\n                opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\n\n                if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\n\n                //## Spades Options section\n                if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\n                opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\n                opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\n                if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\n                               \n                opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\n                opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\n                if (inputs.spades_largest_component){opt+=\" --largest_component \"}\n                //## Rotation Options section\n                if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\n                if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\n                opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\n                opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\n                return opt\n                }\n               EOF\n               \n               ##additionnal option\n              \n               read -d '' ADDOPT << EOF\n               ${\n\n                var opt=\"\"\n                \n                if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\n                if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\n                //## Long Read Alignment Options\n                if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\n                opt+=\" --scores \"+inputs.lr_align_scores+\" \"\n                if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\n                 return ''+ opt + ''\n               }\n               EOF\n\n               ## Get location for pilon jar file\n\n               ${\n                 var cmd=\"\"  \n                 cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\n                 return cmd\n               }   \n\n               ## Build Unicycler command\n               ${\n               \n                 var cmd_base=\"\"\n                 var opt=\"\"\n\n                 \n                 \n                 \n                 cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\n                 cmd_base+=\" -o ./  \"\n                 cmd_base+=\" --verbosity 3  \"\n                 cmd_base+=\" --pilon_path \\$PILONJAR  \"\n\n                \n                if ( inputs.fastq_file_type == \"paired\"){\n                       opt+=\" -1 $fq1 -2 $fq2  \"\n                }\n                else if ( inputs.fastq_file_type == \"paired_collection\"){\n                       opt+=\" -1 $fq1 -2 $fq2  \"\n                }  \n                else if ( inputs.fastq_file_type == \"single\"){\n                   opt+=\" -s $fq1 \"\n                }\n                if (  inputs.sequence_long !== null) {\n                  opt+=\" -l $lr \"\n                }\n\n\n                //##  Unicycler command\n                var cmdl=cmd_base+\" \"+opt+\" \\$GENERALOPT \\$ADDOPT \"\n               \n                return cmdl\n\n                }\n                \n\n \n#        writable: false\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  CWL  wrapped for Unicycler.\n  an hybrid assembly pipeline for bacterial genomes\n  see  https://github.com/rrwick/Unicycler\n  outputs\n    final assembly in FASTA format (major output)\n    final assembly grapth in graph format, visualized using tools such as  \n    Bandage  https://github.com/rrwick/Bandage      \n\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "unicycler",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}, {'id': 'sequence_long_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz', 'fasta']}], 'doc': 'long reads file type. If there are no long reads, leave this empty'}, {'id': 'sequence_long', 'type': 'File?', 'doc': 'long reads. If there are no long reads, leave this empty'}, {'id': 'compute_slots', 'type': 'int', 'default': 4, 'doc': ''}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'min_fasta_length', 'type': 'int', 'default': 100, 'doc': 'Exclude contigs from the FASTA file which are shorter than this length (bp)'}, {'id': 'linear_seqs', 'type': 'int', 'default': 0, 'doc': 'The expected number of linear (i.e. non-circular) sequences in the assembly'}, {'id': 'min_anchor_seg_len', 'type': 'int', 'default': 0, 'doc': 'Unicycler will not use segments shorter than this as scaffolding anchors'}, {'id': 'spades_no_correct', 'type': 'boolean', 'default': False, 'doc': 'Unicycler uses SPAdes to construct assembly graphs.\\nYou can modify some of the SPAdes settings here.\\nUse this ONLY if you know what you are doing!\\nThis option turns off SPAdes error correction. \\nGenerally it is highly recommended to use correction.\\n'}, {'id': 'spades_min_kmer_frac', 'type': 'float', 'default': 0.2, 'doc': 'Lowest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length. \\nmin 0, max 1\\n'}, {'id': 'spades_max_kmer_frac', 'type': 'float', 'default': 0.95, 'doc': 'Highest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length. \\nmin 0, max 1\\n'}, {'id': 'spades_kmers', 'type': 'string', 'default': '11,127', 'doc': 'Exact k-mers size to use for SPAdes assembly, comma-separated\"\\nKmers must be comma-separated odd integers (no repitition)\\nwithout space in the range of 11 to 127 (inclusive)\\n'}, {'id': 'spades_kmer_count', 'type': 'int', 'default': 10, 'doc': 'Number of k-mer steps to use in SPAdes assembly, min 0'}, {'id': 'spades_depth_filter', 'type': 'float', 'default': 0.25, 'doc': 'Filter out contigs lower than this fraction \\nof the chromosomal depth.\\nIt is done if does not result in graph dead ends\\nmin 0, max 1\\n'}, {'id': 'spades_largest_component', 'type': 'boolean', 'default': False, 'doc': 'Only keep the largest connected component of the assembly graph if true'}, {'id': 'rotation_no_rotate', 'type': 'boolean', 'default': False, 'doc': 'These options control the rotation of completed circular sequence\\nnear the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\\nDo not rotate completed replicons to start at a standard gene.\\nUnicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\\nIf one is found, the sequence is rotated and/or flipped so that it begins with that gene\\nencoded on the forward strand. This provides consistently oriented assemblies and reduces\\nthe risk that a gene will be split across the start and end of the sequence.\\n'}, {'id': 'rotation_start_genes', 'type': 'File?', 'doc': 'FASTA file of genes for start point of rotated replicons'}, {'id': 'rotation_start_gene_id', 'type': 'float', 'default': 90.0, 'doc': 'The minimum required BLAST percent identity for a start gene search. max 100, min 0'}, {'id': 'rotation_start_gene_cov', 'type': 'float', 'default': 95.0, 'doc': 'The minimum required BLAST percent coverage for a start gene search. min 0, max 100'}, {'id': 'pilon_no_pilon', 'type': 'boolean', 'default': False, 'doc': 'Unicycler uses Pilon tool for polishing final assembly. Do not use if true'}, {'id': 'graph_clean_min_component_size', 'type': 'int', 'default': 1000, 'doc': 'Contigs shorter than this value (bp) will not be polished using Pilon; min 0'}, {'id': 'graph_clean_min_dead_end_size', 'type': 'int', 'default': 1000, 'doc': 'These options control the removal of small leftover sequences after bridging is complete.\\nUnbridged graph components smaller than this size will be removed from the final graph,\\nmin 0    \\n'}, {'id': 'lr_align_contamination', 'type': 'File?', 'doc': 'FASTA file of known contamination in long reads,\\ne.g. lambda, phiXm or puc18 spike-ins. \\n'}, {'id': 'lr_align_scores', 'type': 'string', 'default': '3,-6,-5,-2', 'doc': 'Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\\n'}, {'id': 'lr_align_low_score', 'type': 'int?', 'doc': 'Score threshold - alignments below this are considered poor,\\ndefault = set automatically\\n'}]",
    "cwl_outputs": "[{'id': 'exec_script', 'type': 'File', 'outputBinding': {'glob': '*.sh'}, 'doc': 'Launching script for learning purpose\\n'}, {'id': 'assembly_graph', 'type': 'File', 'outputBinding': {'glob': 'assembly.gfa'}, 'doc': 'Assembly graph\\n'}, {'id': 'assembly', 'type': 'File', 'outputBinding': {'glob': 'assembly.fasta'}, 'doc': 'fasta assembly output sequence\\n(main output)\\n'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['unicycler_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  wrapped for Unicycler.\nan hybrid assembly pipeline for bacterial genomes\nsee  https://github.com/rrwick/Unicycler\noutputs\n  final assembly in FASTA format (major output)\n  final assembly grapth in graph format, visualized using tools such as  \n  Bandage  https://github.com/rrwick/Bandage      \n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/assembly-wf-virus.cwl",
    "sha": "9535d8401797217e2a724b1e82e239539bd69251",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/assembly-wf-virus.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: assembly_wf_virus\nlabel: assembly-wf-virus\n \ndoc:  \"Virus genome assembly with Unicycler and spades, in parallel. visualisation with bandage\"\n\n\ninputs:\n\n##############unicycler\n\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n    doc:  \"Paired and single end data\"\n  \n  \n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n\n\n\n\n##############spades\n\n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n \n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n \n\n\n\n\noutputs:\n\n  - id: out_contigs_spades\n    outputSource:\n      - spades/out_contigs\n    type: 'File'\n\n  - id: out_scaffolds_spades\n    outputSource:\n      - spades/out_scaffolds\n    type: 'File'\n\n  - id: out_contig_stats_spades\n    outputSource:\n      - spades/out_contig_stats\n    type: 'File'\n\n\n  - id: out_scaffold_stats_spades\n    outputSource:\n      - spades/out_scaffold_stats\n    type: 'File'\n\n\n  - id: assembly_graph_spades\n    outputSource:\n      - spades/assembly_graph\n    type: 'File'\n\n  - id: assembly_graph_with_scaffolds_spades\n    outputSource:\n      - spades/assembly_graph_with_scaffolds\n    type: 'File'\n\n  - id: all_log_spades\n    outputSource:\n      - spades/all_log\n    type: 'File[]'\n\n#  - id: all_script\n#    outputSource:\n#      - spades/all_script\n#    type: 'File[]'\n\n  - id: assembly_image_spades\n    outputSource:\n      - bandage_image_spades/image\n\n\n    type: File\n\n  - id: assembly_info_spades\n    outputSource:\n      - bandage_info_spades/assembly_graph_info\n    type: File\n\n\n  - id: assembly_graph_unicycler\n    outputSource:\n      - unicycler/assembly_graph\n    type: File\n \n  - id: assembly_unicycler\n    outputSource:\n      - unicycler/assembly\n    type: File\n \n\n#  - id: exec_script2\n#    outputSource:\n#      - unicycler/exec_script\n#    type: File\n\n\n  - id: assembly_image_unicycler\n    outputSource:\n      - bandage_image_unicycler/image\n    type: File\n\n  - id: assembly_info_unicycler\n    outputSource:\n      - bandage_info_unicycler/assembly_graph_info\n    type: File\n\n\n\n\n\n\n\n\n\n\nsteps:\n\n  - id: unicycler\n    in:\n      - id: fastq1_type\n        source: fastq1_type\n      - id: fastq1\n        source: fastq1\n      - id: fastq2_type\n        source: fastq2_type\n      - id: fastq2\n        source: fastq2\n      - id: mode\n        source: mode\n      - id: fastq_file_type\n        source: fastq_file_type\n\n\n    out:\n#      - id: exec_script\n      - id: assembly_graph\n      - id: assembly\n \n#    run: ../../bio-cwl-tools/unicycler/unicycler.cwl\n    run: ./tool/unicycler.cwl \n\n\n  - id: spades\n    in:\n\n      - id: nanopore_reads\n        source: nanopore_reads\n      - id: pacbio_reads\n        source: pacbio_reads\n      - id: sanger_reads\n        source: sanger_reads\n      - id: libraries_metadata\n        source: libraries_metadata\n      - id: libraries_fwd_rev\n        source: libraries_fwd_rev\n      - id: libraries_mono\n        source: libraries_mono\n      - id: trusted_contigs\n        source: trusted_contigs\n      - id: untrusted_contigs\n        source: untrusted_contigs\n      - id: cov_state\n        source: cov_state\n      - id: cov_cutoff\n        source: cov_cutoff\n      - id: iontorrent\n        source: iontorrent\n      - id: sc\n        source: sc\n      - id: onlyassembler\n        source: onlyassembler\n      - id: careful\n        source: careful\n\n      - id: auto_kmer_choice\n        source: auto_kmer_choice\n\n      - id: kmers\n        source: kmers\n \n    out:\n\n      - id: out_contigs\n      - id: out_scaffolds\n\n      - id: out_contig_stats\n      - id: out_scaffold_stats\n\n      - id: assembly_graph\n      - id: assembly_graph_with_scaffolds\n\n      - id: all_log\n#      - id: all_script\n\n#    run: ../../bio-cwl-tools/spades/spades.cwl\n    run: ./tool/spades.cwl \n \n  - id: bandage_image_unicycler\n    in:\n      - id: graph\n        source: unicycler/assembly_graph\n    out:\n      - id: image\n#    run: ../../bio-cwl-tools/bandage/bandage-image.cwl\n    run: ./tool/bandage-image.cwl\n \n  - id: bandage_info_unicycler\n    in:\n      - id: graph\n        source: unicycler/assembly_graph\n    out:\n      - id: assembly_graph_info\n#    run: ../../bio-cwl-tools/bandage/bandage-info.cwl\n    run: ./tool/bandage-info.cwl \n  - id: bandage_image_spades\n    in:\n      - id: graph\n        source: spades/assembly_graph\n    out:\n      - id: image\n#    run: ../../bio-cwl-tools/bandage/bandage-image.cwl\n    run: ./tool/bandage-image.cwl \n  - id: bandage_info_spades\n    in:\n      - id: graph\n        source: spades/assembly_graph\n    out:\n      - id: assembly_graph_info\n#    run: ../../bio-cwl-tools/bandage/bandage-info.cwl\n    run: ./tool/bandage-info.cwl\n\n\n    \nrequirements: []\n\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "assembly_wf_virus",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}, {'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contigs_spades', 'outputSource': ['spades/out_contigs'], 'type': 'File'}, {'id': 'out_scaffolds_spades', 'outputSource': ['spades/out_scaffolds'], 'type': 'File'}, {'id': 'out_contig_stats_spades', 'outputSource': ['spades/out_contig_stats'], 'type': 'File'}, {'id': 'out_scaffold_stats_spades', 'outputSource': ['spades/out_scaffold_stats'], 'type': 'File'}, {'id': 'assembly_graph_spades', 'outputSource': ['spades/assembly_graph'], 'type': 'File'}, {'id': 'assembly_graph_with_scaffolds_spades', 'outputSource': ['spades/assembly_graph_with_scaffolds'], 'type': 'File'}, {'id': 'all_log_spades', 'outputSource': ['spades/all_log'], 'type': 'File[]'}, {'id': 'assembly_image_spades', 'outputSource': ['bandage_image_spades/image'], 'type': 'File'}, {'id': 'assembly_info_spades', 'outputSource': ['bandage_info_spades/assembly_graph_info'], 'type': 'File'}, {'id': 'assembly_graph_unicycler', 'outputSource': ['unicycler/assembly_graph'], 'type': 'File'}, {'id': 'assembly_unicycler', 'outputSource': ['unicycler/assembly'], 'type': 'File'}, {'id': 'assembly_image_unicycler', 'outputSource': ['bandage_image_unicycler/image'], 'type': 'File'}, {'id': 'assembly_info_unicycler', 'outputSource': ['bandage_info_unicycler/assembly_graph_info'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Virus genome assembly with Unicycler and spades, in parallel. visualisation with bandage",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "assembly-wf-virus",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/workflow/tool/bandage-image.cwl",
    "sha": "438657f5a59b4e1df5551b01233099cfc61fb673",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/bandage-image.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nid: bandage-image\ninputs:\n\n  - id: graph\n    type: File\n    doc: |\n        Graphical Fragment Assembly\n        Supports multiple assembly graph formats: \n        LastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\n \n\n  - id: format\n    type:  string\n    default: jpg\n    doc: |\n        Produce jpg, png or svg file\n\n\n  - id: height\n    type:  int\n    default: 1000\n    doc: |\n        Image height.If only height or width is set, \n        the other will be determined automatically.\n        If both are set, the image will be exactly that size.\n\n\n  - id: width\n    type:  int?\n    doc: |\n        Image width. If only height or width is set, the other will be determined automatically.\n        If both are set, the image will be exactly that size.\n\n\n  - id: node_name\n    type:  boolean\n    default: true\n    doc: |\n        If true, define Node labels as name \n\n  - id: node_length\n    type:  boolean\n    default: true\n    doc: |\n        If true, define Node labels as length \n\n\noutputs:\n\n\n# - id: all_script\n#   type:\n#      - type: array\n#        items: File\n#   outputBinding:\n#      glob: \"*.sh\"  \n#   doc: \"generated script to run bandage. for learning purpose\" \n\n\n - id: image\n   type: File\n   outputBinding:\n      glob: \"*.$(inputs.format)\"\n   doc: \"Assembly Graph Image\"\n\n\n\n\nbaseCommand: bash\n\narguments: [bandage_image_launch.sh]\n\nhints:\n  DockerRequirement:\n    dockerPull: \"fjrmore/bandage\" \n\n\nrequirements:\n  - class:  InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: bandage_image_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               # Bandage image wrapper  \n               export QT_QPA_PLATFORM=minimal\n               TMPDIR=$PWD\"/tmp_runtime-bandage\"\n               mkdir -p $TMPDIR\n               export XDG_RUNTIME_DIR=$TMPDIR\n               GRAPH=\"$(inputs.graph.path)\"\n               IMAGE=\"$(inputs.graph.nameroot).$(inputs.format)\"\n               Bandage image $GRAPH $IMAGE  \\\\\n               ${\n                var opt=\"\"\n                if(inputs.height!=null){ \n                 opt+=\" --height \"+inputs.height+ \" \"\n                }\n                if(inputs.width!=null){ \n                 opt+=\" --width \"+inputs.width +\" \"\n                }\n                if(inputs.node_length==true){ \n                 opt+=\" --names \"\n                }\n                if(inputs.node_length==true){ \n                 opt+=\" --lengths \"\n                }\n                return opt\n               }  \n\n\ndoc: |\n  CWL  tool for Bandage-info.\n  an hybrid assembly pipeline for bacterial genomes\n  *Bandage Overview**\n  Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \n  such as Velvet, SPAdes,   MEGAHIT and others.\n  De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \n  which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \n  Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \n  with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \n  By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \n  that are not possible by looking at contigs alone. \n  Bandage works with Graphical Fragment Assembly (GFA) files. \n  For more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "bandage-image",
    "cwl_inputs": "[{'id': 'graph', 'type': 'File', 'doc': 'Graphical Fragment Assembly\\nSupports multiple assembly graph formats: \\nLastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\\n'}, {'id': 'format', 'type': 'string', 'default': 'jpg', 'doc': 'Produce jpg, png or svg file\\n'}, {'id': 'height', 'type': 'int', 'default': 1000, 'doc': 'Image height.If only height or width is set, \\nthe other will be determined automatically.\\nIf both are set, the image will be exactly that size.\\n'}, {'id': 'width', 'type': 'int?', 'doc': 'Image width. If only height or width is set, the other will be determined automatically.\\nIf both are set, the image will be exactly that size.\\n'}, {'id': 'node_name', 'type': 'boolean', 'default': True, 'doc': 'If true, define Node labels as name \\n'}, {'id': 'node_length', 'type': 'boolean', 'default': True, 'doc': 'If true, define Node labels as length \\n'}]",
    "cwl_outputs": "[{'id': 'image', 'type': 'File', 'outputBinding': {'glob': '*.$(inputs.format)'}, 'doc': 'Assembly Graph Image'}]",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'fjrmore/bandage'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['bandage_image_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  tool for Bandage-info.\nan hybrid assembly pipeline for bacterial genomes\n*Bandage Overview**\nBandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \nsuch as Velvet, SPAdes,   MEGAHIT and others.\nDe novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \nwhich were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \nNodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \nwith the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \nBy displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \nthat are not possible by looking at contigs alone. \nBandage works with Graphical Fragment Assembly (GFA) files. \nFor more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/bandage-info.cwl",
    "sha": "747073c5710648c8f2d4636df74c0cd004c42dc9",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/bandage-info.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nid: bandage-info\ninputs:\n\n  - id: graph\n    type:  File\n    doc: |\n        Graphical Fragment Assembly.\n        Supports multiple\n        assembly graph formats: \n        LastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.    \n\n\n  - id: tsv\n    type:  boolean\n    default: false\n    doc: |\n        If true, output the information in a single tab-delimited line \n        starting with the graph file\n\n\n\n\n\noutputs:\n\n# - id: all_script\n#   type:\n#      - type: array\n#        items: File\n#   outputBinding:\n#      glob: \"*.sh\"  \n#   doc: \"generated script to run bandage. for learning purpose\" \n\n - id: assembly_graph_info\n   type: File\n   outputBinding:\n      glob: \"assembly_graph_info.txt\"\n   doc: \"Assembly Graph Information\"\n\n\n\n\nbaseCommand: bash\n\narguments: [bandage_info_launch.sh]\n\nhints:\n  DockerRequirement:\n    dockerPull: \"fjrmore/bandage\" \n\n\nrequirements:\n  - class:  InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: bandage_info_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               # Bandage info wrapper  \n               export QT_QPA_PLATFORM=minimal\n               TMPDIR=$PWD\"/tmp_runtime-bandage\"\n               mkdir -p $TMPDIR\n               export XDG_RUNTIME_DIR=$TMPDIR\n               Bandage info '$(inputs.graph.path)' \\\\\n               ${\n                var opt=\"\"\n                if(inputs.tsv==true){ \n                 opt+=\" --tsv \"\n                }\n                return opt\n               } \\\\\n                > assembly_graph_info.txt\n\n\ndoc: |\n  CWL  tool for Bandage-info.\n  an hybrid assembly pipeline for bacterial genomes\n  *Bandage Overview**\n  Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \n  such as Velvet, SPAdes,   MEGAHIT and others.\n  De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \n  which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \n  Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \n  with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \n  By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \n  that are not possible by looking at contigs alone. \n  Bandage works with Graphical Fragment Assembly (GFA) files. \n  For more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "bandage-info",
    "cwl_inputs": "[{'id': 'graph', 'type': 'File', 'doc': 'Graphical Fragment Assembly.\\nSupports multiple\\nassembly graph formats: \\nLastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.    \\n'}, {'id': 'tsv', 'type': 'boolean', 'default': False, 'doc': 'If true, output the information in a single tab-delimited line \\nstarting with the graph file\\n'}]",
    "cwl_outputs": "[{'id': 'assembly_graph_info', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph_info.txt'}, 'doc': 'Assembly Graph Information'}]",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'fjrmore/bandage'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['bandage_info_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  tool for Bandage-info.\nan hybrid assembly pipeline for bacterial genomes\n*Bandage Overview**\nBandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \nsuch as Velvet, SPAdes,   MEGAHIT and others.\nDe novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \nwhich were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \nNodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \nwith the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \nBy displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \nthat are not possible by looking at contigs alone. \nBandage works with Graphical Fragment Assembly (GFA) files. \nFor more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/spades.cwl",
    "sha": "b0c592181bc514fd900beb82f0f9c63eb88e6a7d",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/spades.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand:\n  - bash\n\ninputs:\n  libraries_metadata:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             orientation: string?\n             lib_type: string? \n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n  libraries_fwd_rev:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             fwd_reads: File?\n             rev_reads: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n  libraries_mono:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             file_type: string?\n             reads: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n  pacbio_reads:\n    type: File[]?\n  nanopore_reads:\n    type: File[]?\n  sanger_reads:\n    type: File[]?\n  trusted_contigs:\n    type: File[]?\n  untrusted_contigs:\n    type: File[]?\n  auto_kmer_choice:\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n  kmers:\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n  cov_state:\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n  cov_cutoff:\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n  iontorrent:\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n  sc:\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n  onlyassembler:\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n  careful:\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\noutputs:\n  out_contig_stats:\n    type: File\n    outputBinding:\n      glob: out_contig_stats.*\n    doc: \"contig stats, default column_names: name,length,coverage\"\n  out_scaffold_stats:\n    type: File\n    outputBinding:\n      glob: out_scaffold_stats.*\n    doc: \"scaffold stats, default column_names: name,length,coverage\"\n\n  out_contigs:\n    type: File\n    outputBinding:\n      glob: contigs.fasta\n    doc: \"contigs (fasta sequence)\"\n\n  out_scaffolds:\n    type: File\n    outputBinding:\n      glob: scaffolds.fasta\n    doc: \"scaffolds (fasta sequence)\"\n#  - id: all_script\n#    type:\n#      - type: array\n#        items: File\n#    outputBinding:\n#      glob: \"*.sh\"  \n#    doc: \"generated script to run spades. for learning purpose\" \n  all_log:\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.log\"  \n    doc: \"spades output log and warnings\" \n#  - id: out_log\n#    type: File\n#    outputBinding:\n#      glob: spades.log\n#    doc: \"spades output log\"\n  assembly_graph:\n    type: File\n    outputBinding:\n      glob: assembly_graph.fastg\n    doc: \"assembly graph\" \n  assembly_graph_with_scaffolds:\n    type: File\n    outputBinding:\n      glob: assembly_graph_with_scaffolds.gfa\n    doc: \"assembly graph with scaffolds\" \n      \narguments:\n  - spades_wrapper.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n####################\n      - entryname: write_tsv.py\n        entry: |\n               #######input file here\n               #!/usr/bin/env python\n               import sys,re\n               search_str = r'^>(NODE|\\S+)_(\\d+)(?:_|\\s)length_(\\d+)_cov_(\\d+\\.*\\d*).*\\$'\n               replace_str = r'\\1_\\2\\t\\3\\t\\4'\n               cmd = re.compile(search_str)\n               sys.stdout.write('#name\\tlength\\tcoverage\\n')\n               for i,line in enumerate(sys.stdin):\n                  if cmd.match(line):\n                     sys.stdout.write(cmd.sub(replace_str,line))\n\n####################\n      - entryname: spades_wrapper.sh\n        entry: |\n               ####################spades launcher\n               #!/bin/bash\n               ## An example command looks like:\n               ## spades.py -k 21,33,55,77,99,127 --careful -1 Y.fastq.gz -2 X.fastq.gz -t 24 -o output \n               read -d '' MEMORY_GB << EOF\n               ${ \n                //compute memory limits\n                var mem=\"250\"\n                if(runtime.ram){\n                  var bt=runtime.ram * 1048576 //mebibytes to bytes               \n                  bt=bt*0.000000001 //bytes to Gigabytes \n                  mem=parseInt(bt)\n                }\n                return \"-\"+mem\n               }\n               EOF\n               #echo \"MEMORY_GB limit: \\$MEMORY_GB\"\n               read -d '' CORES << EOF\n               ${ \n                //compute core / slot\n                var cores=\"16\" \n                if(runtime.cores){\n                  cores=runtime.cores\n                }\n                return  cores\n               }\n               EOF\n               #echo \"CORES : \\$CORES\"\n               read -d '' SPADES_OPT << EOF\n               ${   \n                 var opt=\"\"\n                   if (inputs.sc==true){\n                    opt+=\" --sc \"\n                   }\n                   if (inputs.onlyassembler==true){\n                    opt+=\" --only-assembler \"\n                   }\n                   if (inputs.careful==true){\n                    opt+=\" --careful \"\n                   }\n                 return opt  \n               }\n               EOF\n\n\n               read -d '' CMD_BASE << EOF\n               spades.py -o . --disable-gzip-output  \n                 \\$SPADES_OPT \n                -t \\$CORES -m \\$MEMORY_GB\n               ${   \n                 var opt=\"\"\n                   if (inputs.auto_kmer_choice==false){\n                    opt+=\" -k \"+inputs.kmers \n                   }\n                 return opt  \n               }\n               ${\n                 var opt=\"\"\n                 if (inputs.cov_state==null || inputs.cov_state == \"auto\"){\n                      opt+=\" --cov-cutoff 'auto' \"\n                  }\n                 else if (inputs.cov_state == \"value\"){\n                      opt+=\" --cov-cutoff '\"+inputs.cov_cutoff+\"' \"\n                  }\n                 if (inputs.iontorrent==true ){\n                      opt+=\" --iontorrent \"\n                 } \n                 return opt  \n               }\n               EOF\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' CMD_READ1 << EOF\n               ${\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n                      if (lmeta.lib_type !=null && lmeta.lib_type == \"paired_end\"){\n                           prefix = 'pe'\n                       } \n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"mate_paired\"){\n                           prefix = 'mp'\n                       }\n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"nxmate_paired\"){\n                           prefix = 'nxmate'\n                       }                       \n                      else {\n                           prefix = 'hqmp'\n                       }\n                      var idx=lmeta.lib_index\n                      lib_prefix[idx]=prefix\n                      opt+=\" --\"+prefix+idx+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n\n               #########################>DEBUG\n\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' ZZDEBUG << EOF\n               ${\n               //var opt=\"inputs.libraries_metadata.length:\"+inputs.libraries_metadata.length+\" \"              \n               //var str = JSON.stringify(inputs.libraries_metadata)\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   opt+=\" not null \"\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n \n                      opt+=\" !!-AA-\"+lmeta.lib_index+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n               #########################<DEBUG\n\n\n\n\n\n\n\n\n\n\n               read -d '' CMD_READ2 << EOF\n               ${\n                 var opt=\"\"\n                 if (inputs.pacbio_reads!=null){\n                   for(var i=0; i<inputs.pacbio_reads.length;i++){\n                      var read=inputs.pacbio_reads[i]\n                      opt+=\" --pacbio fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.nanopore_reads!=null){\n                   for(var i=0; i<inputs.nanopore_reads.length;i++){\n                      var read=inputs.nanopore_reads[i]\n                      opt+=\" --nanopore fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.sanger_reads!=null){\n                   for(var i=0; i<inputs.sanger_reads.length;i++){\n                      var read=inputs.sanger_reads[i]\n                      opt+=\" --sanger fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.trusted_contigs!=null){\n                   for(var i=0; i<inputs.trusted_contigs.length;i++){\n                      var read=inputs.trusted_contigs[i]\n                      opt+=\" --trusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.untrusted_contigs!=null){\n                   for(var i=0; i<inputs.untrusted_contigs.length;i++){\n                      var read=inputs.untrusted_contigs[i]\n                      opt+=\" --untrusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 return opt  \n               }\n               EOF\n               ##########################################\n               read -d '' CMD_POST << EOF\n                 && python write_tsv.py < contigs.fasta > out_contig_stats.tab\n                 && python write_tsv.py < scaffolds.fasta > out_scaffold_stats.tab\n               EOF\n               ##########################################   \n               # echo \"CMD_BASE : \\$CMD_BASE\"  > zz.txt   \\\\\n               #        && echo \"CMD_READ1 : \\$CMD_READ1\"  >> zz.txt   \\\\\n               #        && echo \"CMD_READ2 : \\$CMD_READ2\"  >> zz.txt   \\\\\n               #        && echo \"CMD_POST : \\$CMD_POST\"   >> zz.txt\n               COMMAND=\"\\$CMD_BASE \\$CMD_READ1 \\$CMD_READ2 \\$CMD_POST\"\n               COMMAND=\\$(echo $COMMAND|tr -d '\\\\n')\n               echo \"\\$COMMAND\"  > run_spades.sh\n               bash  ./run_spades.sh\n\n \n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  example workflow for js wrapper generation\n  see  https://github.com/rrwick/Unicycler\n  outputs : all genretated files\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'libraries_metadata': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'orientation': 'string?', 'lib_type': 'string?'}}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, 'libraries_fwd_rev': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'fwd_reads': 'File?', 'rev_reads': 'File?'}}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, 'libraries_mono': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'file_type': 'string?', 'reads': 'File?'}}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, 'pacbio_reads': {'type': 'File[]?'}, 'nanopore_reads': {'type': 'File[]?'}, 'sanger_reads': {'type': 'File[]?'}, 'trusted_contigs': {'type': 'File[]?'}, 'untrusted_contigs': {'type': 'File[]?'}, 'auto_kmer_choice': {'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, 'kmers': {'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, 'cov_state': {'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, 'cov_cutoff': {'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, 'iontorrent': {'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, 'sc': {'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, 'onlyassembler': {'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, 'careful': {'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}}",
    "cwl_outputs": "{'out_contig_stats': {'type': 'File', 'outputBinding': {'glob': 'out_contig_stats.*'}, 'doc': 'contig stats, default column_names: name,length,coverage'}, 'out_scaffold_stats': {'type': 'File', 'outputBinding': {'glob': 'out_scaffold_stats.*'}, 'doc': 'scaffold stats, default column_names: name,length,coverage'}, 'out_contigs': {'type': 'File', 'outputBinding': {'glob': 'contigs.fasta'}, 'doc': 'contigs (fasta sequence)'}, 'out_scaffolds': {'type': 'File', 'outputBinding': {'glob': 'scaffolds.fasta'}, 'doc': 'scaffolds (fasta sequence)'}, 'all_log': {'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.log'}, 'doc': 'spades output log and warnings'}, 'assembly_graph': {'type': 'File', 'outputBinding': {'glob': 'assembly_graph.fastg'}, 'doc': 'assembly graph'}, 'assembly_graph_with_scaffolds': {'type': 'File', 'outputBinding': {'glob': 'assembly_graph_with_scaffolds.gfa'}, 'doc': 'assembly graph with scaffolds'}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['spades_wrapper.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "example workflow for js wrapper generation\nsee  https://github.com/rrwick/Unicycler\noutputs : all genretated files\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/unicycler.cwl",
    "sha": "6a208e40e51c5848cbda6581c448aa7a99fc7c5e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/unicycler.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  CWL  wrapped for Unicycler.\n  an hybrid assembly pipeline for bacterial genomes\n  see  https://github.com/rrwick/Unicycler\n  outputs\n    final assembly in FASTA format (major output)\n    final assembly grapth in graph format, visualized using tools such as\n    Bandage  https://github.com/rrwick/Bandage\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: unicycler_launch.sh\n        entry: |\n          #!/bin/bash\n          ###########################\n          #      unicycler launcher\n          ###########################\n\n          ##preparing input files\n          #check permission / chmod  is issues\n          ${\n            var fl=\"\"\n            var lncmd=\"\"\n            var fq1=\"\"\n            var fq2=\"\"\n            var lr=\"\"\n\n          //###################paired case\n                if (inputs.fastq_file_type ==\"paired\"  ){\n                 if( inputs.fastq1_type=='fastqsanger' ){\n                     fq1 = \"fq1.fastq\"\n                 }\n                 else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                      fq1 = \"fq1.fastq.gz\"\n                 }\n                 if( inputs.fastq2_type=='fastqsanger' ){\n                     fq2 = \"fq2.fastq\"\n                  }\n                  else if( inputs.fastq2_type=='fastqsanger.gz' ){\n                      fq2 = \"fq2.fastq.gz\"\n                   }\n                   lncmd+=\"fq1='\"+fq1+\"'\"\n                   lncmd+=\" && \"\n                   lncmd+=\"fq2='\"+fq2+\"'\"\n                   lncmd+=\" && \"\n                   lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                   lncmd+=\" && \"\n                   lncmd+=\" ln -s '\"+inputs.fastq2.path+\"' $fq2  \"\n\n                }\n           //###################single case\n \n           if (inputs.fastq_file_type ==\"single\"  ){\n             if( inputs.fastq1_type=='fastqsanger' ){\n                 fq1 = \"fq1.fastq\"\n             }\n             else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                  fq1 = \"fq1.fastq.gz\"\n             }\n             lncmd+=\"fq1='\"+fq1+\"'\"\n             lncmd+=\" && \"\n             lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n            }\n            //####### long reads\n             if (  inputs.sequence_long !== null) {\n                 if (inputs.sequence_long_type=='fastqsanger'){\n                          lr = \"lr.fastq\"\n                 }\n                 else if (inputs.sequence_long_type=='fastqsanger.gz') {\n                          lr = \"lr.fastq.gz\"\n                 }\n                 else if (inputs.sequence_longg_type=='fasta') {\n                          lr = \"lr.fasta\"\n                 }\n                 lncmd+=\"lr='\"+lr+\"'\"\n                 lncmd+=\" && \"\n                 lncmd+= \" ln -s '\"+inputs.sequence_long.path+\"' '$lr' \"\n             }\n             return lncmd\n          }\n\n          ##general options\n\n          read -d '' GENERALOPT << EOF\n          ${\n           var opt=\"\"\n           //## General Unicycler Options section\n           opt+=\" --mode \"+inputs.mode+\" \"\n           opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\n           opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\n\n           if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\n\n           //## Spades Options section\n           if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\n           opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\n           opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\n           if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\n\n           opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\n           opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\n           if (inputs.spades_largest_component){opt+=\" --largest_component \"}\n           //## Rotation Options section\n           if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\n           if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\n           opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\n           opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\n           return opt\n           }\n          EOF\n\n          ##additionnal option\n\n          read -d '' ADDOPT << EOF\n          ${\n\n           var opt=\"\"\n\n           if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\n           if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\n           //## Long Read Alignment Options\n           if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\n           opt+=\" --scores \"+inputs.lr_align_scores+\" \"\n           if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\n            return ''+ opt + ''\n          }\n          EOF\n\n          ## Get location for pilon jar file\n\n          ${\n            var cmd=\"\"\n            cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\n            return cmd\n          }\n\n          ## Build Unicycler command\n          ${\n\n            var cmd_base=\"\"\n            var opt=\"\"\n\n            cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\n            cmd_base+=\" -o ./  \"\n            cmd_base+=\" --verbosity 3  \"\n            cmd_base+=\" --pilon_path \\$PILONJAR  \"\n\n           if ( inputs.fastq_file_type == \"paired\"){\n                  opt+=\" -1 $fq1 -2 $fq2  \"\n           }\n           else if ( inputs.fastq_file_type == \"paired_collection\"){\n                  opt+=\" -1 $fq1 -2 $fq2  \"\n           }\n           else if ( inputs.fastq_file_type == \"single\"){\n              opt+=\" -s $fq1 \"\n           }\n           if (  inputs.sequence_long !== null) {\n             opt+=\" -l $lr \"\n           }\n\n           //##  Unicycler command\n           var cmdl=cmd_base+\" \"+opt+\" \\$GENERALOPT \\$ADDOPT \"\n\n           return cmdl\n\n           }\ninputs:\n  fastq_file_type:\n    doc: Paired and single end data\n    type:\n      type: enum\n      symbols:\n      - paired\n      - single\n  fastq1_type:\n    doc: Type of the First set of reads. Only when fastq_file_type = single  or  paired\n    type:\n      type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n    default: fastqsanger\n  fastq1:\n    doc: |-\n      First set of reads with forward reads. Only when fastq_file_type = single or paired\n    type: File\n  fastq2_type:\n    doc: Type of the Second set of reads. Only when fastq_file_type=paired\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n    default: 'null'\n  fastq2:\n    doc: Second set of reads with reverse reads. Only when fastq_file_type=paired\n    type: File?\n  sequence_long_type:\n    doc: long reads file type. If there are no long reads, leave this empty\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n      - fasta\n  sequence_long:\n    doc: long reads. If there are no long reads, leave this empty\n    type: File?\n  compute_slots:\n    type: int?\n    default: 4\n  mode:\n    doc: |\n      Bridging mode, values:\n      conservative (smaller contigs, lower misassembly)\n      normal (moderate contig size and misassembly rate)\n      bold  (longest contigs, higher misassembly rate)\n    type:\n      type: enum\n      symbols:\n      - conservative\n      - normal\n      - bold\n  min_fasta_length:\n    doc: Exclude contigs from the FASTA file which are shorter than this length (bp)\n    type: int?\n    default: 100\n  linear_seqs:\n    doc: The expected number of linear (i.e. non-circular) sequences in the assembly\n    type: int?\n    default: 0\n  min_anchor_seg_len:\n    doc: Unicycler will not use segments shorter than this as scaffolding anchors\n    type: int?\n    default: 0\n  spades_no_correct:\n    doc: |\n      Unicycler uses SPAdes to construct assembly graphs.\n      You can modify some of the SPAdes settings here.\n      Use this ONLY if you know what you are doing!\n      This option turns off SPAdes error correction.\n      Generally it is highly recommended to use correction.\n    type: boolean?\n    default: false\n  spades_min_kmer_frac:\n    doc: |\n      Lowest k-mer size for SPAdes assembly,\n      expressed as a fraction of the read length.\n      min 0, max 1\n    type: float?\n    default: 0.2\n  spades_max_kmer_frac:\n    doc: |\n      Highest k-mer size for SPAdes assembly,\n      expressed as a fraction of the read length.\n      min 0, max 1\n    type: float?\n    default: 0.95\n  spades_kmers:\n    doc: |\n      Exact k-mers size to use for SPAdes assembly, comma-separated\"\n      Kmers must be comma-separated odd integers (no repitition)\n      without space in the range of 11 to 127 (inclusive)\n    type: string?\n    default: 11,127\n  spades_kmer_count:\n    doc: Number of k-mer steps to use in SPAdes assembly, min 0\n    type: int?\n    default: 10\n  spades_depth_filter:\n    doc: |\n      Filter out contigs lower than this fraction\n      of the chromosomal depth.\n      It is done if does not result in graph dead ends\n      min 0, max 1\n    type: float?\n    default: 0.25\n  spades_largest_component:\n    doc: Only keep the largest connected component of the assembly graph if true\n    type: boolean?\n    default: false\n  rotation_no_rotate:\n    doc: |\n      These options control the rotation of completed circular sequence\n      near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\n      Do not rotate completed replicons to start at a standard gene.\n      Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\n      If one is found, the sequence is rotated and/or flipped so that it begins with that gene\n      encoded on the forward strand. This provides consistently oriented assemblies and reduces\n      the risk that a gene will be split across the start and end of the sequence.\n    type: boolean?\n    default: false\n  rotation_start_genes:\n    doc: FASTA file of genes for start point of rotated replicons\n    type: File?\n  rotation_start_gene_id:\n    doc: |-\n      The minimum required BLAST percent identity for a start gene search. max 100, min 0\n    type: float?\n    default: 90.0\n  rotation_start_gene_cov:\n    doc: |-\n      The minimum required BLAST percent coverage for a start gene search. min 0, max 100\n    type: float?\n    default: 95.0\n  pilon_no_pilon:\n    doc: Unicycler uses Pilon tool for polishing final assembly. Do not use if true\n    type: boolean?\n    default: false\n  graph_clean_min_component_size:\n    doc: Contigs shorter than this value (bp) will not be polished using Pilon; min 0\n    type: int?\n    default: 1000\n  graph_clean_min_dead_end_size:\n    doc: |\n      These options control the removal of small leftover sequences after bridging is complete.\n      Unbridged graph components smaller than this size will be removed from the final graph,\n      min 0\n    type: int?\n    default: 1000\n  lr_align_contamination:\n    doc: |\n      FASTA file of known contamination in long reads,\n      e.g. lambda, phiXm or puc18 spike-ins.\n    type: File?\n  lr_align_scores:\n    doc: |\n      Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\n    type: string?\n    default: 3,-6,-5,-2\n  lr_align_low_score:\n    doc: |\n      Score threshold - alignments below this are considered poor,\n      default = set automatically\n    type: int?\noutputs:\n  assembly_graph:\n    type: File\n    outputBinding:\n      glob: assembly.gfa\n  assembly:\n    doc: |\n      fasta assembly output sequence\n      (main output)\n    type: File\n    outputBinding:\n      glob: assembly.fasta\n  # exec_script:\n  #   doc: |\n  #     Launching script for learning purpose\n  #   type: File\n  #   outputBinding:\n  #     glob: '*.sh'\n\nbaseCommand: bash\n\narguments:\n- unicycler_launch.sh\n\nhints:\n  DockerRequirement:\n    dockerPull: biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fastq_file_type': {'doc': 'Paired and single end data', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}}, 'fastq1_type': {'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'default': 'fastqsanger'}, 'fastq1': {'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired', 'type': 'File'}, 'fastq2_type': {'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null'}, 'fastq2': {'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired', 'type': 'File?'}, 'sequence_long_type': {'doc': 'long reads file type. If there are no long reads, leave this empty', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz', 'fasta']}]}, 'sequence_long': {'doc': 'long reads. If there are no long reads, leave this empty', 'type': 'File?'}, 'compute_slots': {'type': 'int?', 'default': 4}, 'mode': {'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}}, 'min_fasta_length': {'doc': 'Exclude contigs from the FASTA file which are shorter than this length (bp)', 'type': 'int?', 'default': 100}, 'linear_seqs': {'doc': 'The expected number of linear (i.e. non-circular) sequences in the assembly', 'type': 'int?', 'default': 0}, 'min_anchor_seg_len': {'doc': 'Unicycler will not use segments shorter than this as scaffolding anchors', 'type': 'int?', 'default': 0}, 'spades_no_correct': {'doc': 'Unicycler uses SPAdes to construct assembly graphs.\\nYou can modify some of the SPAdes settings here.\\nUse this ONLY if you know what you are doing!\\nThis option turns off SPAdes error correction.\\nGenerally it is highly recommended to use correction.\\n', 'type': 'boolean?', 'default': False}, 'spades_min_kmer_frac': {'doc': 'Lowest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length.\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.2}, 'spades_max_kmer_frac': {'doc': 'Highest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length.\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.95}, 'spades_kmers': {'doc': 'Exact k-mers size to use for SPAdes assembly, comma-separated\"\\nKmers must be comma-separated odd integers (no repitition)\\nwithout space in the range of 11 to 127 (inclusive)\\n', 'type': 'string?', 'default': '11,127'}, 'spades_kmer_count': {'doc': 'Number of k-mer steps to use in SPAdes assembly, min 0', 'type': 'int?', 'default': 10}, 'spades_depth_filter': {'doc': 'Filter out contigs lower than this fraction\\nof the chromosomal depth.\\nIt is done if does not result in graph dead ends\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.25}, 'spades_largest_component': {'doc': 'Only keep the largest connected component of the assembly graph if true', 'type': 'boolean?', 'default': False}, 'rotation_no_rotate': {'doc': 'These options control the rotation of completed circular sequence\\nnear the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\\nDo not rotate completed replicons to start at a standard gene.\\nUnicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\\nIf one is found, the sequence is rotated and/or flipped so that it begins with that gene\\nencoded on the forward strand. This provides consistently oriented assemblies and reduces\\nthe risk that a gene will be split across the start and end of the sequence.\\n', 'type': 'boolean?', 'default': False}, 'rotation_start_genes': {'doc': 'FASTA file of genes for start point of rotated replicons', 'type': 'File?'}, 'rotation_start_gene_id': {'doc': 'The minimum required BLAST percent identity for a start gene search. max 100, min 0', 'type': 'float?', 'default': 90.0}, 'rotation_start_gene_cov': {'doc': 'The minimum required BLAST percent coverage for a start gene search. min 0, max 100', 'type': 'float?', 'default': 95.0}, 'pilon_no_pilon': {'doc': 'Unicycler uses Pilon tool for polishing final assembly. Do not use if true', 'type': 'boolean?', 'default': False}, 'graph_clean_min_component_size': {'doc': 'Contigs shorter than this value (bp) will not be polished using Pilon; min 0', 'type': 'int?', 'default': 1000}, 'graph_clean_min_dead_end_size': {'doc': 'These options control the removal of small leftover sequences after bridging is complete.\\nUnbridged graph components smaller than this size will be removed from the final graph,\\nmin 0\\n', 'type': 'int?', 'default': 1000}, 'lr_align_contamination': {'doc': 'FASTA file of known contamination in long reads,\\ne.g. lambda, phiXm or puc18 spike-ins.\\n', 'type': 'File?'}, 'lr_align_scores': {'doc': 'Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\\n', 'type': 'string?', 'default': '3,-6,-5,-2'}, 'lr_align_low_score': {'doc': 'Score threshold - alignments below this are considered poor,\\ndefault = set automatically\\n', 'type': 'int?'}}",
    "cwl_outputs": "{'assembly_graph': {'type': 'File', 'outputBinding': {'glob': 'assembly.gfa'}}, 'assembly': {'doc': 'fasta assembly output sequence\\n(main output)\\n', 'type': 'File', 'outputBinding': {'glob': 'assembly.fasta'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['unicycler_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'unicycler_launch.sh', 'entry': '#!/bin/bash\\n###########################\\n#      unicycler launcher\\n###########################\\n\\n##preparing input files\\n#check permission / chmod  is issues\\n${\\n  var fl=\"\"\\n  var lncmd=\"\"\\n  var fq1=\"\"\\n  var fq2=\"\"\\n  var lr=\"\"\\n\\n//###################paired case\\n      if (inputs.fastq_file_type ==\"paired\"  ){\\n       if( inputs.fastq1_type==\\'fastqsanger\\' ){\\n           fq1 = \"fq1.fastq\"\\n       }\\n       else if( inputs.fastq1_type==\\'fastqsanger.gz\\' ){\\n            fq1 = \"fq1.fastq.gz\"\\n       }\\n       if( inputs.fastq2_type==\\'fastqsanger\\' ){\\n           fq2 = \"fq2.fastq\"\\n        }\\n        else if( inputs.fastq2_type==\\'fastqsanger.gz\\' ){\\n            fq2 = \"fq2.fastq.gz\"\\n         }\\n         lncmd+=\"fq1=\\'\"+fq1+\"\\'\"\\n         lncmd+=\" && \"\\n         lncmd+=\"fq2=\\'\"+fq2+\"\\'\"\\n         lncmd+=\" && \"\\n         lncmd+=\" ln -s \\'\"+inputs.fastq1.path+\"\\' $fq1 \"\\n         lncmd+=\" && \"\\n         lncmd+=\" ln -s \\'\"+inputs.fastq2.path+\"\\' $fq2  \"\\n\\n      }\\n //###################single case\\n\\n if (inputs.fastq_file_type ==\"single\"  ){\\n   if( inputs.fastq1_type==\\'fastqsanger\\' ){\\n       fq1 = \"fq1.fastq\"\\n   }\\n   else if( inputs.fastq1_type==\\'fastqsanger.gz\\' ){\\n        fq1 = \"fq1.fastq.gz\"\\n   }\\n   lncmd+=\"fq1=\\'\"+fq1+\"\\'\"\\n   lncmd+=\" && \"\\n   lncmd+=\" ln -s \\'\"+inputs.fastq1.path+\"\\' $fq1 \"\\n  }\\n  //####### long reads\\n   if (  inputs.sequence_long !== null) {\\n       if (inputs.sequence_long_type==\\'fastqsanger\\'){\\n                lr = \"lr.fastq\"\\n       }\\n       else if (inputs.sequence_long_type==\\'fastqsanger.gz\\') {\\n                lr = \"lr.fastq.gz\"\\n       }\\n       else if (inputs.sequence_longg_type==\\'fasta\\') {\\n                lr = \"lr.fasta\"\\n       }\\n       lncmd+=\"lr=\\'\"+lr+\"\\'\"\\n       lncmd+=\" && \"\\n       lncmd+= \" ln -s \\'\"+inputs.sequence_long.path+\"\\' \\'$lr\\' \"\\n   }\\n   return lncmd\\n}\\n\\n##general options\\n\\nread -d \\'\\' GENERALOPT << EOF\\n${\\n var opt=\"\"\\n //## General Unicycler Options section\\n opt+=\" --mode \"+inputs.mode+\" \"\\n opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\\n opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\\n\\n if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\\n\\n //## Spades Options section\\n if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\\n opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\\n opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\\n if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\\n\\n opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\\n opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\\n if (inputs.spades_largest_component){opt+=\" --largest_component \"}\\n //## Rotation Options section\\n if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\\n if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\\n opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\\n opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\\n return opt\\n }\\nEOF\\n\\n##additionnal option\\n\\nread -d \\'\\' ADDOPT << EOF\\n${\\n\\n var opt=\"\"\\n\\n if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\\n if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\\n //## Long Read Alignment Options\\n if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\\n opt+=\" --scores \"+inputs.lr_align_scores+\" \"\\n if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\\n  return \\'\\'+ opt + \\'\\'\\n}\\nEOF\\n\\n## Get location for pilon jar file\\n\\n${\\n  var cmd=\"\"\\n  cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\\n  return cmd\\n}\\n\\n## Build Unicycler command\\n${\\n\\n  var cmd_base=\"\"\\n  var opt=\"\"\\n\\n  cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\\n  cmd_base+=\" -o ./  \"\\n  cmd_base+=\" --verbosity 3  \"\\n  cmd_base+=\" --pilon_path \\\\$PILONJAR  \"\\n\\n if ( inputs.fastq_file_type == \"paired\"){\\n        opt+=\" -1 $fq1 -2 $fq2  \"\\n }\\n else if ( inputs.fastq_file_type == \"paired_collection\"){\\n        opt+=\" -1 $fq1 -2 $fq2  \"\\n }\\n else if ( inputs.fastq_file_type == \"single\"){\\n    opt+=\" -s $fq1 \"\\n }\\n if (  inputs.sequence_long !== null) {\\n   opt+=\" -l $lr \"\\n }\\n\\n //##  Unicycler command\\n var cmdl=cmd_base+\" \"+opt+\" \\\\$GENERALOPT \\\\$ADDOPT \"\\n\\n return cmdl\\n\\n }\\n'}]}}",
    "cwl_doc": "CWL  wrapped for Unicycler.\nan hybrid assembly pipeline for bacterial genomes\nsee  https://github.com/rrwick/Unicycler\noutputs\n  final assembly in FASTA format (major output)\n  final assembly grapth in graph format, visualized using tools such as\n  Bandage  https://github.com/rrwick/Bandage\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "PreProcessing/batch-preprocess-illumina.cwl",
    "sha": "96c719397af7257aaec4c926cf84d09735bec60a",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/batch-preprocess-illumina.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accessions: string[]\n  ref_human_genome: File\n\nsteps:\n  main:\n    scatter: illumina_accession\n    in:\n      illumina_accession: illumina_accessions\n      ref_human_genome: ref_human_genome\n    out:\n      - fastp_html_report\n      - fastp_json_report\n      - multiqc_html\n      - multiqc_zip\n      - original_fastq1\n      - original_fastq2\n      - bam\n    run: ./preprocess-illumina.cwl\n\n  merge_bam:\n    in:\n      output_name:\n        valueFrom: \"merged.bam\"\n      bams: main/bam\n    out:\n      - bam_merged\n    run: ../bio-cwl-tools/samtools/samtools_merge.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: merge_bam/bam_merged\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n\noutputs:\n  original_fastq1:\n    type: File[]\n    outputSource: main/original_fastq1\n  original_fastq2:\n    type: File[]?\n    outputSource: main/original_fastq2\n\n  processed_fastq:\n    type: File\n    outputSource: samtools_fastq/fastq\n\n  fastp_html_reports:\n    type: File[]\n    outputSource: main/fastp_html_report\n  fastp_json_reports:\n    type: File[]\n    outputSource: main/fastp_json_report\n\n  multiqc_htmls:\n    type: File[]\n    outputSource: main/multiqc_html\n  multiqc_zips:\n    type: File[]\n    outputSource: main/multiqc_zip\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accessions': 'string[]', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File[]', 'outputSource': 'main/original_fastq1'}, 'original_fastq2': {'type': 'File[]?', 'outputSource': 'main/original_fastq2'}, 'processed_fastq': {'type': 'File', 'outputSource': 'samtools_fastq/fastq'}, 'fastp_html_reports': {'type': 'File[]', 'outputSource': 'main/fastp_html_report'}, 'fastp_json_reports': {'type': 'File[]', 'outputSource': 'main/fastp_json_report'}, 'multiqc_htmls': {'type': 'File[]', 'outputSource': 'main/multiqc_html'}, 'multiqc_zips': {'type': 'File[]', 'outputSource': 'main/multiqc_zip'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "main": {
        "scatter": "illumina_accession",
        "in": {
          "illumina_accession": "illumina_accessions",
          "ref_human_genome": "ref_human_genome"
        },
        "out": [
          "fastp_html_report",
          "fastp_json_report",
          "multiqc_html",
          "multiqc_zip",
          "original_fastq1",
          "original_fastq2",
          "bam"
        ],
        "run": "./preprocess-illumina.cwl"
      },
      "merge_bam": {
        "in": {
          "output_name": {
            "valueFrom": "merged.bam"
          },
          "bams": "main/bam"
        },
        "out": [
          "bam_merged"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_merge.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "merge_bam/bam_merged"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/batch-preprocess-ont.cwl",
    "sha": "d6ee102a36b9e9aedde744b626ef02501515cebe",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/batch-preprocess-ont.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accessions: string[]\n  ref_human_genome: File\n\nsteps:\n  main:\n    scatter: illumina_accession\n    in:\n      illumina_accession: illumina_accessions\n      ref_human_genome: ref_human_genome\n    out:\n      - fastqc_summary\n      - fastqc_zip\n      - multiqc_html\n      - multiqc_zip\n      - original_fastq1\n      - bam\n    run: ./preprocess-ont.cwl\n\n  merge_bam:\n    in:\n      output_name:\n        valueFrom: \"merged.bam\"\n      bams: main/bam\n    out:\n      - bam_merged\n    run: ../bio-cwl-tools/samtools/samtools_merge.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: merge_bam/bam_merged\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n\noutputs:\n  original_fastq1:\n    type: File[]\n    outputSource: main/original_fastq1\n\n  processed_fastq:\n    type: File\n    outputSource: samtools_fastq/fastq\n\n  fastqc_summary:\n    type: File[]\n    outputSource: main/fastqc_summary\n  fastqc_zip:\n    type: File[]\n    outputSource: main/fastqc_zip\n\n  multiqc_htmls:\n    type: File[]\n    outputSource: main/multiqc_html\n  multiqc_zips:\n    type: File[]\n    outputSource: main/multiqc_zip\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accessions': 'string[]', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File[]', 'outputSource': 'main/original_fastq1'}, 'processed_fastq': {'type': 'File', 'outputSource': 'samtools_fastq/fastq'}, 'fastqc_summary': {'type': 'File[]', 'outputSource': 'main/fastqc_summary'}, 'fastqc_zip': {'type': 'File[]', 'outputSource': 'main/fastqc_zip'}, 'multiqc_htmls': {'type': 'File[]', 'outputSource': 'main/multiqc_html'}, 'multiqc_zips': {'type': 'File[]', 'outputSource': 'main/multiqc_zip'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "main": {
        "scatter": "illumina_accession",
        "in": {
          "illumina_accession": "illumina_accessions",
          "ref_human_genome": "ref_human_genome"
        },
        "out": [
          "fastqc_summary",
          "fastqc_zip",
          "multiqc_html",
          "multiqc_zip",
          "original_fastq1",
          "bam"
        ],
        "run": "./preprocess-ont.cwl"
      },
      "merge_bam": {
        "in": {
          "output_name": {
            "valueFrom": "merged.bam"
          },
          "bams": "main/bam"
        },
        "out": [
          "bam_merged"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_merge.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "merge_bam/bam_merged"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/preprocess-illumina.cwl",
    "sha": "31dc07ff0b6f457bb9d5a725291ea9d2b25b5997",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/preprocess-illumina.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accession: string\n  hg38: File\n\nsteps:\n  unpack_ref_genome:\n    in:\n      file: hg38\n    out:\n      - hg_38_fa\n    run: ./tools/unpack_ref_db.cwl\n\n  fetch_fastqs:\n    in:\n      sra_accession: illumina_accession\n    out:\n      - fastq_file_1\n      - fastq_file_2\n    run: ../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl\n\n  fastp:\n    in:\n      fastq1: fetch_fastqs/fastq_file_1\n      fastq2: fetch_fastqs/fastq_file_2\n    out:\n      - out_fastq1\n      - out_fastq2\n      - html_report\n      - json_report\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  multiqc:\n    in:\n      qc_files_array: fastp/json_report\n    out:\n      - multiqc_zip\n      - multiqc_html\n    run: ../bio-cwl-tools/multiqc/multiqc.cwl\n\n  bwa_mem:\n    in:\n      Index: unpack_ref_genome/hg_38_fa\n      InputFile:\n        source: [fastp/out_fastq1, fastp/out_fastq2]\n        valueFrom: |\n          ${\n            return self.filter(function(x){return x});\n          }\n        linkMerge: merge_flattened\n      Threads:\n        valueFrom: $(1)\n    out:\n      - reads_stdout\n    run: ../bio-cwl-tools/bwa/BWA-Mem.cwl\n\n  samtools_view:\n    in:\n      sam: bwa_mem/reads_stdout\n    out:\n      - bam\n    run: ../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl\n\n  samtools_fastq:\n    in:\n     bam_sorted: samtools_view/bam\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n  rename_multiqc_html:\n    in:\n      srcfile: multiqc/multiqc_html\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_multiqc_zip:\n    in:\n      srcfile: multiqc/multiqc_zip\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastp_html:\n    in:\n      srcfile: fastp/html_report\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastp.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastp_json:\n    in:\n      srcfile: fastp/json_report\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastp.json\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_bam:\n    in:\n      srcfile: samtools_view/bam\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).bam\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\noutputs:\n  original_fastq1:\n    type: File\n    format: edam:format_1930  # FASTQ\n    outputSource: fetch_fastqs/fastq_file_1\n  original_fastq2:\n    type: File?\n    format: edam:format_1930  # FASTQ\n    outputSource: fetch_fastqs/fastq_file_2\n\n  bam:\n    type: File\n    format: edam:format_2572  # BAM\n    outputSource: rename_bam/outfile\n\n  fastp_html_report:\n    type: File\n    format: edam:format_2331  # HTML\n    outputSource: rename_fastp_html/outfile\n  fastp_json_report:\n    type: File\n    format: edam:format_3464  # JSON\n    outputSource: rename_fastp_json/outfile\n\n  multiqc_html:\n    type: File\n    format: edam:format_2331  # HTML\n    outputSource: rename_multiqc_html/outfile\n  multiqc_zip:\n    type: File\n    format: edam:format_3464  # JSON\n    outputSource: rename_multiqc_zip/outfile\n\n  mapped_fastq:\n    type: File\n    format: edam:format_1930  # FASTQ\n    outputSource: samtools_fastq/fastq\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accession': 'string', 'hg38': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File', 'format': 'edam:format_1930', 'outputSource': 'fetch_fastqs/fastq_file_1'}, 'original_fastq2': {'type': 'File?', 'format': 'edam:format_1930', 'outputSource': 'fetch_fastqs/fastq_file_2'}, 'bam': {'type': 'File', 'format': 'edam:format_2572', 'outputSource': 'rename_bam/outfile'}, 'fastp_html_report': {'type': 'File', 'format': 'edam:format_2331', 'outputSource': 'rename_fastp_html/outfile'}, 'fastp_json_report': {'type': 'File', 'format': 'edam:format_3464', 'outputSource': 'rename_fastp_json/outfile'}, 'multiqc_html': {'type': 'File', 'format': 'edam:format_2331', 'outputSource': 'rename_multiqc_html/outfile'}, 'multiqc_zip': {'type': 'File', 'format': 'edam:format_3464', 'outputSource': 'rename_multiqc_zip/outfile'}, 'mapped_fastq': {'type': 'File', 'format': 'edam:format_1930', 'outputSource': 'samtools_fastq/fastq'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "unpack_ref_genome": {
        "in": {
          "file": "hg38"
        },
        "out": [
          "hg_38_fa"
        ],
        "run": "./tools/unpack_ref_db.cwl"
      },
      "fetch_fastqs": {
        "in": {
          "sra_accession": "illumina_accession"
        },
        "out": [
          "fastq_file_1",
          "fastq_file_2"
        ],
        "run": "../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl"
      },
      "fastp": {
        "in": {
          "fastq1": "fetch_fastqs/fastq_file_1",
          "fastq2": "fetch_fastqs/fastq_file_2"
        },
        "out": [
          "out_fastq1",
          "out_fastq2",
          "html_report",
          "json_report"
        ],
        "run": "../bio-cwl-tools/fastp/fastp.cwl"
      },
      "multiqc": {
        "in": {
          "qc_files_array": "fastp/json_report"
        },
        "out": [
          "multiqc_zip",
          "multiqc_html"
        ],
        "run": "../bio-cwl-tools/multiqc/multiqc.cwl"
      },
      "bwa_mem": {
        "in": {
          "Index": "unpack_ref_genome/hg_38_fa",
          "InputFile": {
            "source": [
              "fastp/out_fastq1",
              "fastp/out_fastq2"
            ],
            "valueFrom": "${\n  return self.filter(function(x){return x});\n}\n",
            "linkMerge": "merge_flattened"
          },
          "Threads": {
            "valueFrom": "$(1)"
          }
        },
        "out": [
          "reads_stdout"
        ],
        "run": "../bio-cwl-tools/bwa/BWA-Mem.cwl"
      },
      "samtools_view": {
        "in": {
          "sam": "bwa_mem/reads_stdout"
        },
        "out": [
          "bam"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "samtools_view/bam"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      },
      "rename_multiqc_html": {
        "in": {
          "srcfile": "multiqc/multiqc_html",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_multiqc_zip": {
        "in": {
          "srcfile": "multiqc/multiqc_zip",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastp_html": {
        "in": {
          "srcfile": "fastp/html_report",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastp.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastp_json": {
        "in": {
          "srcfile": "fastp/json_report",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastp.json"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_bam": {
        "in": {
          "srcfile": "samtools_view/bam",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).bam"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/preprocess-ont.cwl",
    "sha": "4c190ef248bf9d4e313f225f3ebf510e7c42e8de",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/preprocess-ont.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accession: string\n  ref_human_genome: File\n\nsteps:\n  fetch_fastqs:\n    in:\n      sra_accession: illumina_accession\n    out:\n      - fastq_file_1\n      - fastq_files\n    run: ../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl\n\n  nanoplot:\n    in:\n      fastq_files:\n        source: fetch_fastqs/fastq_files\n      loglength:\n        valueFrom: $(true)\n      format:\n        valueFrom: \"png\"\n    out:\n      - dynamic_histogram_read_length\n      - histogram_read_length\n      - length_v_qual_scatter_plot_dot\n      - length_v_qual_scatter_plot_kde\n      - log_transformed_histogram_read_length\n      - report\n      - logfile\n      - nanostats\n      - weighted_histogram_read_length\n      - weighted_log_transform_histogram_read_length\n      - yield_by_length_img\n    run: ../bio-cwl-tools/nanoplot/nanoplot.cwl\n\n  fastqc:\n    in:\n      reads_file: fetch_fastqs/fastq_file_1\n      nogroup:\n        valueFrom: $(true)\n      kmers:\n        valueFrom: $(7)\n    out:\n      - zipped_file\n      - summary_file\n      - html_file\n    run: ../bio-cwl-tools/fastqc/fastqc_2.cwl\n\n  multiqc:\n    in:\n      qc_files_array: fastqc/zipped_file\n    out:\n      - multiqc_zip\n      - multiqc_html\n    run: ../bio-cwl-tools/multiqc/multiqc.cwl\n\n  minimap2:\n    in:\n      indexFile: ref_human_genome\n      fastqFiles: fetch_fastqs/fastq_file_1\n      samOutput:\n        valueFrom: $(true)\n    out:\n      - samfile\n    run: ../bio-cwl-tools/minimap2/minimap2.cwl\n\n  sam2bam:\n    in:\n      sam: minimap2/samfile\n    out:\n      - bam\n    run: ../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: sam2bam/bam\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n    \n  rename_multiqc_html:\n    in:\n      srcfile: multiqc/multiqc_html\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_multiqc_zip:\n    in:\n      srcfile: multiqc/multiqc_zip\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastqc_summary:\n    in:\n      srcfile: fastqc/summary_file\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastqc_zip:\n    in:\n      srcfile: fastqc/zipped_file\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastq:\n    in:\n      srcfile: samtools_fastq/fastq\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).fastq\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_bam:\n    in:\n      srcfile: sam2bam/bam\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).bam\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\noutputs:\n  original_fastq1:\n    type: File\n    outputSource: rename_fastq/outfile\n\n  fastqc_summary:\n    type: File\n    outputSource: rename_fastqc_summary/outfile\n  fastqc_zip:\n    type: File\n    outputSource: rename_fastqc_zip/outfile\n\n\n  multiqc_html:\n    type: File\n    outputSource: rename_multiqc_html/outfile\n  multiqc_zip:\n    type: File\n    outputSource: rename_multiqc_zip/outfile\n\n  bam:\n    type: File\n    outputSource: rename_bam/outfile",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accession': 'string', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File', 'outputSource': 'rename_fastq/outfile'}, 'fastqc_summary': {'type': 'File', 'outputSource': 'rename_fastqc_summary/outfile'}, 'fastqc_zip': {'type': 'File', 'outputSource': 'rename_fastqc_zip/outfile'}, 'multiqc_html': {'type': 'File', 'outputSource': 'rename_multiqc_html/outfile'}, 'multiqc_zip': {'type': 'File', 'outputSource': 'rename_multiqc_zip/outfile'}, 'bam': {'type': 'File', 'outputSource': 'rename_bam/outfile'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "fetch_fastqs": {
        "in": {
          "sra_accession": "illumina_accession"
        },
        "out": [
          "fastq_file_1",
          "fastq_files"
        ],
        "run": "../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl"
      },
      "nanoplot": {
        "in": {
          "fastq_files": {
            "source": "fetch_fastqs/fastq_files"
          },
          "loglength": {
            "valueFrom": "$(true)"
          },
          "format": {
            "valueFrom": "png"
          }
        },
        "out": [
          "dynamic_histogram_read_length",
          "histogram_read_length",
          "length_v_qual_scatter_plot_dot",
          "length_v_qual_scatter_plot_kde",
          "log_transformed_histogram_read_length",
          "report",
          "logfile",
          "nanostats",
          "weighted_histogram_read_length",
          "weighted_log_transform_histogram_read_length",
          "yield_by_length_img"
        ],
        "run": "../bio-cwl-tools/nanoplot/nanoplot.cwl"
      },
      "fastqc": {
        "in": {
          "reads_file": "fetch_fastqs/fastq_file_1",
          "nogroup": {
            "valueFrom": "$(true)"
          },
          "kmers": {
            "valueFrom": "$(7)"
          }
        },
        "out": [
          "zipped_file",
          "summary_file",
          "html_file"
        ],
        "run": "../bio-cwl-tools/fastqc/fastqc_2.cwl"
      },
      "multiqc": {
        "in": {
          "qc_files_array": "fastqc/zipped_file"
        },
        "out": [
          "multiqc_zip",
          "multiqc_html"
        ],
        "run": "../bio-cwl-tools/multiqc/multiqc.cwl"
      },
      "minimap2": {
        "in": {
          "indexFile": "ref_human_genome",
          "fastqFiles": "fetch_fastqs/fastq_file_1",
          "samOutput": {
            "valueFrom": "$(true)"
          }
        },
        "out": [
          "samfile"
        ],
        "run": "../bio-cwl-tools/minimap2/minimap2.cwl"
      },
      "sam2bam": {
        "in": {
          "sam": "minimap2/samfile"
        },
        "out": [
          "bam"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "sam2bam/bam"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      },
      "rename_multiqc_html": {
        "in": {
          "srcfile": "multiqc/multiqc_html",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_multiqc_zip": {
        "in": {
          "srcfile": "multiqc/multiqc_zip",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastqc_summary": {
        "in": {
          "srcfile": "fastqc/summary_file",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastqc_zip": {
        "in": {
          "srcfile": "fastqc/zipped_file",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastq": {
        "in": {
          "srcfile": "samtools_fastq/fastq",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).fastq"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_bam": {
        "in": {
          "srcfile": "sam2bam/bam",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).bam"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/tools/unpack_ref_db.cwl",
    "sha": "d27ed0d48f2948217d1bc95e1777de0cae34e331",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/tools/unpack_ref_db.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\ndoc: decompression tool using Lempel-Ziv coding (LZ77)\nrequirements:\n  DockerRequirement:\n    dockerPull: alpine:3.9\n\nbaseCommand: [tar, xvzf]\n\n\ninputs:\n  file:\n    type: File\n    inputBinding: {}\n\noutputs:\n  hg_38_fa:\n    type: File\n    outputBinding:\n      glob: static/hg38.fna\n    secondaryFiles:\n      - .fai\n      - .fwt\n      - .amb\n      - .ann\n      - .pac\n      - .sa\n      - .bwt\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'file': {'type': 'File', 'inputBinding': {}}}",
    "cwl_outputs": "{'hg_38_fa': {'type': 'File', 'outputBinding': {'glob': 'static/hg38.fna'}, 'secondaryFiles': ['.fai', '.fwt', '.amb', '.ann', '.pac', '.sa', '.bwt']}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['tar', 'xvzf']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'alpine:3.9'}}",
    "cwl_doc": "decompression tool using Lempel-Ziv coding (LZ77)",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/archive/bowtie2.cwl",
    "sha": "53929051232cf534b1ad450b96c0c5e10a00c0aa",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/bowtie2.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Aligns reads from ATAC-seq or ChIP-seq to an indexed reference genome\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference_index)\nhints:\n#  ResourceRequirement:\n#    coresMin: 4\n#    ramMin: 30000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/bowtie2:2.2.6-2\n  SoftwareRequirement:\n    packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\nbaseCommand: [\"bowtie2\"]\narguments:\n  - valueFrom: --very-sensitive\n    position: 1\n#  - valueFrom: $(runtime.cores) # set the number of threads\n#    prefix: \"-p\"\n#    position: 1\n  - position: 4 # prefix for fastq1, differs for paired/single end\n    valueFrom: |\n      ${\n        if ( inputs.is_paired_end ){\n           return \"-1\";\n        }\n        else {\n          return \"-U\";\n        }\n      }\n  - valueFrom: $(inputs.fastq1.nameroot).sam\n    prefix: \"-S\"\n    position: 6\n#stderr: $(inputs.fastq1.nameroot).bowtie2_stderr # log file\n  \n\ninputs:\n  reference_index:\n    doc: path to the FM-index files for the chosen reference genome\n    type: File\n    secondaryFiles:\n#      - $(self.basename).1.bt2\n      - $(self.nameroot.slice(0,-1))2.bt2\n      - $(self.nameroot.slice(0,-1))3.bt2\n      - $(self.nameroot.slice(0,-1))4.bt2\n      - $(self.nameroot.slice(0,-1))rev.1.bt2\n      - $(self.nameroot.slice(0,-1))rev.2.bt2\n    inputBinding:\n      position: 2\n      prefix: \"-x\"\n      valueFrom: $(self.nameroot.slice(0,-2))\n  fastq1:\n    type: File\n    inputBinding:\n      position: 4\n\n  is_paired_end:\n    type: boolean\n    default: false\n  fastq2:\n    type: File?\n    inputBinding:\n      valueFrom: |\n        ${\n            if ( inputs.is_paired_end ){\n                return self;\n            }\n            else {\n              return null;\n            }\n        }  \n      position: 12\n      prefix: \"-2\"\n  max_mapping_insert_length:\n    doc: usefull for very long fragments, as expected for ATAC\n    type: long?\n    default: 2000\n#    inputBinding:\n#      prefix: --maxins\n#      position: 1\n\n      \noutputs: \n  sam:\n    type: File\n    outputBinding:\n      glob: \"*.sam\"\n#  bowtie2_log:\n#    type: stderr\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference_index': {'doc': 'path to the FM-index files for the chosen reference genome', 'type': 'File', 'secondaryFiles': ['$(self.nameroot.slice(0,-1))2.bt2', '$(self.nameroot.slice(0,-1))3.bt2', '$(self.nameroot.slice(0,-1))4.bt2', '$(self.nameroot.slice(0,-1))rev.1.bt2', '$(self.nameroot.slice(0,-1))rev.2.bt2'], 'inputBinding': {'position': 2, 'prefix': '-x', 'valueFrom': '$(self.nameroot.slice(0,-2))'}}, 'fastq1': {'type': 'File', 'inputBinding': {'position': 4}}, 'is_paired_end': {'type': 'boolean', 'default': False}, 'fastq2': {'type': 'File?', 'inputBinding': {'valueFrom': '${\\n    if ( inputs.is_paired_end ){\\n        return self;\\n    }\\n    else {\\n      return null;\\n    }\\n}  \\n', 'position': 12, 'prefix': '-2'}}, 'max_mapping_insert_length': {'doc': 'usefull for very long fragments, as expected for ATAC', 'type': 'long?', 'default': 2000}}",
    "cwl_outputs": "{'sam': {'type': 'File', 'outputBinding': {'glob': '*.sam'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'kerstenbreuer/bowtie2:2.2.6-2'}, 'SoftwareRequirement': {'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": "[{'valueFrom': '--very-sensitive', 'position': 1}, {'position': 4, 'valueFrom': '${\\n  if ( inputs.is_paired_end ){\\n     return \"-1\";\\n  }\\n  else {\\n    return \"-U\";\\n  }\\n}\\n'}, {'valueFrom': '$(inputs.fastq1.nameroot).sam', 'prefix': '-S', 'position': 6}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.reference_index)']}}",
    "cwl_doc": "Aligns reads from ATAC-seq or ChIP-seq to an indexed reference genome\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/archive/draft2_variation.cwl",
    "sha": "02e59c5c25cf28d16c6f8168198077710388533a",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/draft2_variation.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: variation\nlabel: variation\n\ninputs:\n  - id: reference_in\n    type:\n      - File\n      - type: array\n        items: File\n  - id: fastq1\n    type: File\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: min_length_required\n    type: int?\noutputs:\n  - id: outFile\n    outputSource:\n      - picard_markduplicates/outFile\n    type: File\n\nsteps:\n  - id: bowtie2_build\n    in:\n      - id: reference_in\n        source:\n          - reference_in\n    out:\n      - id: indices\n      - id: output_log\n    run: ../bio-cwl-tools/bowtie2/bowtie2_build.cwl\n\n  - id: fastp\n    in:\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: fastq1\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n#      - id: out_fastq2\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  - id: bowtie2\n    in:\n      - id: fastq1\n        source: fastp/out_fastq1\n      - id: reference_index\n        source: bowtie2_build/indices\n    out:\n#      - id: bowtie2_log\n      - id: sam\n    run: ./bowtie2.cwl\n\n  - id: picard_sortsam\n    in:\n      - id: inputFile\n        source: bowtie2/sam\n    out:\n      - id: outFile\n    run: ./picard_sortsam.cwl\n\n  - id: picard_markduplicates\n    in:\n      - id: inputFile\n        source: picard_sortsam/outFile\n    out:\n      - id: outFile\n      - id: metrics_file\n    run: ./picard_markduplicates.cwl\n\nrequirements: []\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "variation",
    "cwl_inputs": "[{'id': 'reference_in', 'type': ['File', {'type': 'array', 'items': 'File'}]}, {'id': 'fastq1', 'type': 'File'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'min_length_required', 'type': 'int?'}]",
    "cwl_outputs": "[{'id': 'outFile', 'outputSource': ['picard_markduplicates/outFile'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "variation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/archive/draft_variation.cwl",
    "sha": "c1b67db373d790db5b25a8842d4655b576734fb1",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/draft_variation.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: variation\nlabel: variation\ninputs:\n  - id: reference_in\n    type:\n      - File\n      - type: array\n        items: File\n\n  - id: fastq1\n    type: File\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: min_length_required\n    type: int?\noutputs: \n  # - id: multiqc_html\n  #   outputSource:\n  #     - multiqc/multiqc_html\n  #   type: File\n  - id: sam\n    outputSource:\n      - bowtie2/sam\n    type: File\nsteps:\n  - id: bowtie2_build\n    in:\n      - id: reference_in\n        source:\n          - reference_in\n    out:\n      - id: indices\n      - id: output_log\n    run: ../bio-cwl-tools/bowtie2/bowtie2_build.cwl\n\n  - id: fastp\n    in:\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: fastq1\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n      # - id: out_fastq2\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  # - id: multiqc\n  #   in:\n  #     - id: qc_files_array\n  #       source:\n  #         - fastp/html_report\n  #   out:\n  #     - id: diree\n  #     - id: multiqc_html\n  #     - id: multiqc_zip\n  #   run: ./multiqc.cwl\n\n  - id: bowtie2\n    in:\n      - id: fastq1\n        source: fastp/out_fastq1\n      - id: reference_index\n        source: bowtie2_build/indices\n    out: \n     # - id: bowtie2_log\n      - id: sam\n    run: ./bowtie2.cwl\n\nrequirements: []\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "variation",
    "cwl_inputs": "[{'id': 'reference_in', 'type': ['File', {'type': 'array', 'items': 'File'}]}, {'id': 'fastq1', 'type': 'File'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'min_length_required', 'type': 'int?'}]",
    "cwl_outputs": "[{'id': 'sam', 'outputSource': ['bowtie2/sam'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "variation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/archive/snpeff_build.cwl",
    "sha": "6dbe2b79fd220fac08845ca0d200e2b6dc1d0062",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/snpeff_build.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nbaseCommand: [snpEff, build]\n\narguments:\n  - -v #verbose\n  - -dataDir /data\n  - -configOption $(inputs.dbname).genome=$(inputs.dbname)\ninputs:\n  - id: dbname\n    type: string\n    inputBinding:\n      prefix: -genbank\n      position: 1000\n\n  - id: bankfile\n    type: File\noutputs:  []\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: biocontainers/snpeff:v4.1k_cv3\n    dockerOutputDirectory: /data/\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: \"$({class: 'Directory', listing: []})\"\n        entryname: $(inputs.dbname)\n        writable: true\n      - entryname: $(inputs.dbname)/genes.gbk\n        entry: $(inputs.bankfile)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'dbname', 'type': 'string', 'inputBinding': {'prefix': '-genbank', 'position': 1000}}, {'id': 'bankfile', 'type': 'File'}]",
    "cwl_outputs": "[]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['snpEff', 'build']",
    "cwl_arguments": "['-v', '-dataDir /data', '-configOption $(inputs.dbname).genome=$(inputs.dbname)']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bowtie2_align.cwl",
    "sha": "964e9386bdc1c17da84ea6a6494268a3ccd78cd9",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bowtie2_align.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n- class: ShellCommandRequirement\n- class: InlineJavascriptRequirement\n  expressionLib:\n  - var default_output_filename = function() {\n        if (Array.isArray(inputs.filelist) && inputs.filelist.length > 0){\n          return inputs.filelist[0].location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n        } else\n          if (inputs.filelist != null){\n            return inputs.filelist.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n          } else\n            if (Array.isArray(inputs.filelist_mates) && inputs.filelist_mates.length > 0){\n              return inputs.filelist_mates[0].location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n            } else\n              if (inputs.filelist_mates != null){\n                return inputs.filelist_mates.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n              } else {\n                return null;\n              }\n    };\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/bowtie2:v2.3.0\n  dockerFile: >\n    $import: ./dockerfiles/bowtie2-Dockerfile\n- class: SoftwareRequirement\n  packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\ninputs:\n\n  indices_file:\n    type: File?\n    doc: File with secondaryFiles containing all the indices\n    inputBinding:\n      position: 81\n      prefix: -x\n      valueFrom: $(self.path.split('.').slice(0,-2).join('.'))\n\n  indices_folder:\n    type: Directory?\n    doc: \"Folder with indices files\"\n    inputBinding:\n      position: 81\n      prefix: '-x'\n      valueFrom: |\n        ${\n            for (var i = 0; i < self.listing.length; i++) {\n                if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2' ||\n                    self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2l'){\n                  return self.listing[i].path.split('.').slice(0,-3).join('.');\n                }\n            }\n            return null;\n        }\n\n  filelist:\n    type:\n    - \"null\"\n    - File\n    - type: array\n      items: File\n    doc: |\n      {-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\n      <m1>       Files with #1 mates, paired with files in <m2>.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n      <m2>       Files with #2 mates, paired with files in <m1>.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n      <r>        Files with unpaired reads.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n    inputBinding:\n      itemSeparator: \",\"\n      position: 83\n\n  filelist_mates:\n    type:\n    - \"null\"\n    - File\n    - type: array\n      items: File\n    inputBinding:\n      itemSeparator: \",\"\n      position: 85\n\n  output_filename:\n    type: string\n    inputBinding:\n      position: 90\n      prefix: \"-S\"\n      valueFrom: |\n        ${\n            if (self == \"\"){\n              return default_output_filename();\n            } else {\n              return self;\n            }\n        }\n    default: \"\"\n    doc: |\n      File for SAM output (default: stdout)\n\n  q:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are FASTQ .fq/.fastq (default)\"\n    inputBinding:\n      position: 1\n      prefix: '-q'\n\n  qseq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are in Illumina's qseq format\"\n    inputBinding:\n      position: 1\n      prefix: '--qseq'\n\n  f:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are (multi-)FASTA .fa/.mfa\"\n    inputBinding:\n      position: 1\n      prefix: '-f'\n\n  raw:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are raw one-sequence-per-line\"\n    inputBinding:\n      position: 1\n      prefix: '-r'\n\n  c:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"<m1>, <m2>, <r> are sequences themselves, not files\"\n    inputBinding:\n      position: 1\n      prefix: '-c'\n\n  s:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      skip the first <int> reads/pairs in the input (none)\n    inputBinding:\n      position: 2\n      prefix: '-s'\n\n  u:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      stop after first <int> reads/pairs (no limit)\n    inputBinding:\n      position: 3\n      prefix: '-u'\n\n  clip_5p_end:\n    type: int?\n    doc: |\n      trim <int> bases from 5'/left end of reads (0)\n    inputBinding:\n      position: 4\n      prefix: '-5'\n\n  clip_3p_end:\n    type: int?\n    doc: |\n      trim <int> bases from 3'/right end of reads (0)\n    inputBinding:\n      position: 5\n      prefix: '-3'\n\n  phred33_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities are Phred+33 (default)\"\n    inputBinding:\n      position: 6\n      prefix: '--phred33'\n\n  phred64_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities are Phred+64\"\n    inputBinding:\n      position: 6\n      prefix: '--phred64'\n\n  integer_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities encoded as space-delimited integers\"\n    inputBinding:\n      position: 6\n      prefix: '--int-quals'\n\n  n:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      max # mismatches in seed alignment; can be 0 or 1 (0)\n    inputBinding:\n      position: 7\n      prefix: '-N'\n\n  l:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      length of seed substrings; must be >3, <32 (22)\n    inputBinding:\n      position: 8\n      prefix: '-L'\n\n  i:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      interval between seed substrings w/r/t read len (S,1,1.15)\n    inputBinding:\n      position: 9\n      prefix: '-i'\n\n  n_ceil:\n    type:\n    - \"null\"\n    - string\n    doc: >\n      func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)\n    inputBinding:\n      position: 10\n      prefix: '--n-ceil'\n\n  dpad:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      include <int> extra ref chars on sides of DP table (15)\n    inputBinding:\n      position: 11\n      prefix: '--dpad'\n\n  gbar:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      disallow gaps within <int> nucs of read extremes (4)\n    inputBinding:\n      position: 12\n      prefix: '--gbar'\n\n  ignore_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      treat all quality values as 30 on Phred scale (off)\n    inputBinding:\n      position: 13\n      prefix: '--ignore-quals'\n\n  nofw:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not align forward (original) version of read (off)\n    inputBinding:\n      position: 14\n      prefix: '--nofw'\n\n  norc:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not align reverse-complement version of read (off)\n    inputBinding:\n      position: 15\n      prefix: '--norc'\n\n  no_1mm_upfront:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments\n    inputBinding:\n      position: 16\n      prefix: '--no-1mm-upfront'\n\n  end_to_end:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      entire read must align; no clipping (on)\n      Options:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n        --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50\n        --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\n        --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 17\n      prefix: '--end-to-end'\n\n  end_to_end_very_fast:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n    inputBinding:\n      position: 18\n      prefix: '--very-fast'\n\n  end_to_end_fast:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n    inputBinding:\n      position: 18\n      prefix: '--fast'\n\n  end_to_end_sensitive:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\n    inputBinding:\n      position: 18\n      prefix: '--sensitive'\n\n  end_to_end_very_sensitive:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 18\n      prefix: '--very-sensitive'\n\n  local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      local alignment; ends might be soft clipped (off)\n      Options:\n        --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\n        --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\n        --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\n        --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 19\n      prefix: '--local'\n\n  local_very_fast_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\n    inputBinding:\n      position: 20\n      prefix: '--very-fast-local'\n\n  local_fast_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\n    inputBinding:\n      position: 20\n      prefix: '--fast-local'\n\n  local_sensitive_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\n    inputBinding:\n      position: 20\n      prefix: '--sensitive-local'\n\n  local_very_sensitive_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 20\n      prefix: '--very-sensitive-local'\n\n  ma:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      match bonus (0 for --end-to-end, 2 for --local)\n    inputBinding:\n      position: 21\n      prefix: '--ma'\n\n  mp:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      max penalty for mismatch; lower qual = lower penalty (6)\n    inputBinding:\n      position: 22\n      prefix: '--mp'\n\n  np:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      penalty for non-A/C/G/Ts in read/ref (1)\n    inputBinding:\n      position: 23\n      prefix: '--np'\n\n  rdg:\n    type:\n    - \"null\"\n    - int[]\n    doc: |\n      read gap open, extend penalties (5,3)\n    inputBinding:\n      position: 24\n      itemSeparator: \",\"\n      prefix: '--rdg'\n\n  rfg:\n    type:\n    - \"null\"\n    - int[]\n    doc: |\n      reference gap open, extend penalties (5,3)\n    inputBinding:\n      position: 25\n      itemSeparator: \",\"\n      prefix: '--rfg'\n\n  score_min:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)\n    inputBinding:\n      position: 26\n      prefix: '--score-min'\n\n  k:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      report up to <int> alns per read; MAPQ not meaningful\n    inputBinding:\n      position: 27\n      prefix: '-k'\n\n  a:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      report all alignments; very slow, MAPQ not meaningful\n    inputBinding:\n      position: 27\n      prefix: '-a'\n\n  d:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      give up extending after <int> failed extends in a row (15)\n    inputBinding:\n      position: 28\n      prefix: '-D'\n\n  r:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      for reads w/ repetitive seeds, try <int> sets of seeds (2)\n    inputBinding:\n      position: 29\n      prefix: '-R'\n\n  minins:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      minimum fragment length (0)\n    inputBinding:\n      position: 30\n      prefix: '--minins'\n\n  maxins:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      maxins fragment length (0)\n    inputBinding:\n      position: 30\n      prefix: '--maxins'\n\n  fr:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--fr'\n\n  rf:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--rf'\n\n  ff:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--ff'\n\n  no_mixed:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      suppress unpaired alignments for paired reads\n    inputBinding:\n      position: 32\n      prefix: '--no-mixed'\n\n  no_discordant:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      suppress discordant alignments for paired reads\n    inputBinding:\n      position: 33\n      prefix: '--no-discordant'\n\n  no_dovetail:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when mates extend past each other\n    inputBinding:\n      position: 34\n      prefix: '--no-dovetail'\n\n  no_contain:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when one mate alignment contains other\n    inputBinding:\n      position: 35\n      prefix: '--no-contain'\n\n  no_overlap:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when mates overlap at all\n    inputBinding:\n      position: 36\n      prefix: '--no-overlap'\n\n  t:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      print wall-clock time taken by search phases\n    inputBinding:\n      position: 37\n      prefix: '-t'\n\n  un:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write unpaired reads that didn't align to <path>\n    inputBinding:\n      position: 38\n      prefix: '--un'\n\n  al:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write unpaired reads that aligned at least once to <path>\n    inputBinding:\n      position: 39\n      prefix: '--al'\n\n  un_conc:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write pairs that didn't align concordantly to <path>\n    inputBinding:\n      position: 40\n      prefix: '--un-conc'\n\n  al_conc:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write pairs that aligned concordantly at least once to <path>\n    inputBinding:\n      position: 41\n      prefix: '--al-conc'\n\n  quiet:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"print nothing to stderr except serious errors\"\n    inputBinding:\n      position: 42\n      prefix: '--quiet'\n\n  met_file:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      send metrics to file at <path> (off)\n    inputBinding:\n      position: 43\n      prefix: '--met-file'\n\n  met_stderr:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"send metrics to stderr (off)\"\n    inputBinding:\n      position: 44\n      prefix: '--met-stderr'\n\n  met:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      report internal counters & metrics every <int> secs (1)\n    inputBinding:\n      position: 45\n      prefix: '--met'\n\n  no_unal:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress SAM records for unaligned reads\"\n    inputBinding:\n      position: 46\n      prefix: '--no-unal'\n\n  no_head:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress header lines, i.e. lines starting with @\"\n    inputBinding:\n      position: 47\n      prefix: '--no-head'\n\n  no_sq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress @SQ header lines\"\n    inputBinding:\n      position: 48\n      prefix: '--no-sq'\n\n  rg_id:\n    type:\n    - \"null\"\n    - string\n    doc: \"set read group id, reflected in @RG line and RG:Z: opt field\"\n    inputBinding:\n      position: 49\n      prefix: '--rg-id'\n\n  rg:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      add <text> (\"lab:value\") to @RG line of SAM header.\n      Note: @RG line only printed when --rg-id is set.\n    inputBinding:\n      position: 50\n      prefix: '--rg'\n\n  omit_sec_seq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"put '*' in SEQ and QUAL fields for secondary alignments\"\n    inputBinding:\n      position: 51\n      prefix: '--omit-sec-seq'\n\n  threads:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      number of alignment threads to launch (1)\n    inputBinding:\n      position: 52\n      prefix: '-p'\n\n  reorder:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      force SAM output order to match order of input reads\n    inputBinding:\n      position: 53\n      prefix: '--reorder'\n\n  mm:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"use memory-mapped I/O for index; many 'bowtie's can share\"\n    inputBinding:\n      position: 54\n      prefix: '--mm'\n\n  qc_filter:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"filter out reads that are bad according to QSEQ filter\"\n    inputBinding:\n      position: 55\n      prefix: '--qc-filter'\n#\n  seed:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      seed for random number generator (0)\n    inputBinding:\n      position: 56\n      prefix: '--seed'\n\n  non_deterministic:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"seed rand. gen. arbitrarily instead of using read attributes\"\n    inputBinding:\n      position: 57\n      prefix: '--non-deterministic'\n\noutputs:\n\n  output:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n           if (inputs.output_filename == \"\"){\n             return default_output_filename();\n           } else {\n             return inputs.output_filename;\n           }\n        }\n\n  output_log:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n           if (inputs.output_filename == \"\"){\n             return default_output_filename().split('.').slice(0,-1).join('.') + \".log\";\n           } else {\n             return inputs.output_filename.split('.').slice(0,-1).join('.') + \".log\";\n           }\n        }\n\nbaseCommand:\n  - bowtie2\n\narguments:\n  - valueFrom: |\n      ${\n        if (inputs.filelist && inputs.filelist_mates){\n          return \"-1\";\n        } else if (inputs.filelist){\n          return \"-U\";\n        } else {\n          return null;\n        }\n      }\n    position: 82\n  - valueFrom: |\n      ${\n        if (inputs.filelist && inputs.filelist_mates){\n          return \"-2\";\n        } else if (inputs.filelist_mates){\n          return \"-U\";\n        } else {\n          return null;\n        }\n      }\n    position: 84\n  - valueFrom: |\n      ${\n        if (inputs.output_filename == \"\"){\n          return ' 2> ' + default_output_filename().split('.').slice(0,-1).join('.') + '.log';\n        } else {\n          return ' 2> ' + inputs.output_filename.split('.').slice(0,-1).join('.') + '.log';\n        }\n      }\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- http://schema.org/version/latest/schema.rdf\n\ns:name: \"bowtie2_align\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:isPartOf:\n  class: s:CreativeWork\n  s:name: Common Workflow Language\n  s:url: http://commonwl.org/\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie aligner to align input FASTQ file(s) to reference genome\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'indices_file': {'type': 'File?', 'doc': 'File with secondaryFiles containing all the indices', 'inputBinding': {'position': 81, 'prefix': '-x', 'valueFrom': \"$(self.path.split('.').slice(0,-2).join('.'))\"}}, 'indices_folder': {'type': 'Directory?', 'doc': 'Folder with indices files', 'inputBinding': {'position': 81, 'prefix': '-x', 'valueFrom': \"${\\n    for (var i = 0; i < self.listing.length; i++) {\\n        if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2' ||\\n            self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2l'){\\n          return self.listing[i].path.split('.').slice(0,-3).join('.');\\n        }\\n    }\\n    return null;\\n}\\n\"}}, 'filelist': {'type': ['null', 'File', {'type': 'array', 'items': 'File'}], 'doc': \"{-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\\n<m1>       Files with #1 mates, paired with files in <m2>.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n<m2>       Files with #2 mates, paired with files in <m1>.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n<r>        Files with unpaired reads.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n\", 'inputBinding': {'itemSeparator': ',', 'position': 83}}, 'filelist_mates': {'type': ['null', 'File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'itemSeparator': ',', 'position': 85}}, 'output_filename': {'type': 'string', 'inputBinding': {'position': 90, 'prefix': '-S', 'valueFrom': '${\\n    if (self == \"\"){\\n      return default_output_filename();\\n    } else {\\n      return self;\\n    }\\n}\\n'}, 'default': '', 'doc': 'File for SAM output (default: stdout)\\n'}, 'q': {'type': ['null', 'boolean'], 'doc': 'query input files are FASTQ .fq/.fastq (default)', 'inputBinding': {'position': 1, 'prefix': '-q'}}, 'qseq': {'type': ['null', 'boolean'], 'doc': \"query input files are in Illumina's qseq format\", 'inputBinding': {'position': 1, 'prefix': '--qseq'}}, 'f': {'type': ['null', 'boolean'], 'doc': 'query input files are (multi-)FASTA .fa/.mfa', 'inputBinding': {'position': 1, 'prefix': '-f'}}, 'raw': {'type': ['null', 'boolean'], 'doc': 'query input files are raw one-sequence-per-line', 'inputBinding': {'position': 1, 'prefix': '-r'}}, 'c': {'type': ['null', 'boolean'], 'doc': '<m1>, <m2>, <r> are sequences themselves, not files', 'inputBinding': {'position': 1, 'prefix': '-c'}}, 's': {'type': ['null', 'int'], 'doc': 'skip the first <int> reads/pairs in the input (none)\\n', 'inputBinding': {'position': 2, 'prefix': '-s'}}, 'u': {'type': ['null', 'int'], 'doc': 'stop after first <int> reads/pairs (no limit)\\n', 'inputBinding': {'position': 3, 'prefix': '-u'}}, 'clip_5p_end': {'type': 'int?', 'doc': \"trim <int> bases from 5'/left end of reads (0)\\n\", 'inputBinding': {'position': 4, 'prefix': '-5'}}, 'clip_3p_end': {'type': 'int?', 'doc': \"trim <int> bases from 3'/right end of reads (0)\\n\", 'inputBinding': {'position': 5, 'prefix': '-3'}}, 'phred33_quals': {'type': ['null', 'boolean'], 'doc': 'qualities are Phred+33 (default)', 'inputBinding': {'position': 6, 'prefix': '--phred33'}}, 'phred64_quals': {'type': ['null', 'boolean'], 'doc': 'qualities are Phred+64', 'inputBinding': {'position': 6, 'prefix': '--phred64'}}, 'integer_quals': {'type': ['null', 'boolean'], 'doc': 'qualities encoded as space-delimited integers', 'inputBinding': {'position': 6, 'prefix': '--int-quals'}}, 'n': {'type': ['null', 'int'], 'doc': 'max # mismatches in seed alignment; can be 0 or 1 (0)\\n', 'inputBinding': {'position': 7, 'prefix': '-N'}}, 'l': {'type': ['null', 'int'], 'doc': 'length of seed substrings; must be >3, <32 (22)\\n', 'inputBinding': {'position': 8, 'prefix': '-L'}}, 'i': {'type': ['null', 'int'], 'doc': 'interval between seed substrings w/r/t read len (S,1,1.15)\\n', 'inputBinding': {'position': 9, 'prefix': '-i'}}, 'n_ceil': {'type': ['null', 'string'], 'doc': 'func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)\\n', 'inputBinding': {'position': 10, 'prefix': '--n-ceil'}}, 'dpad': {'type': ['null', 'int'], 'doc': 'include <int> extra ref chars on sides of DP table (15)\\n', 'inputBinding': {'position': 11, 'prefix': '--dpad'}}, 'gbar': {'type': ['null', 'int'], 'doc': 'disallow gaps within <int> nucs of read extremes (4)\\n', 'inputBinding': {'position': 12, 'prefix': '--gbar'}}, 'ignore_quals': {'type': ['null', 'boolean'], 'doc': 'treat all quality values as 30 on Phred scale (off)\\n', 'inputBinding': {'position': 13, 'prefix': '--ignore-quals'}}, 'nofw': {'type': ['null', 'boolean'], 'doc': 'do not align forward (original) version of read (off)\\n', 'inputBinding': {'position': 14, 'prefix': '--nofw'}}, 'norc': {'type': ['null', 'boolean'], 'doc': 'do not align reverse-complement version of read (off)\\n', 'inputBinding': {'position': 15, 'prefix': '--norc'}}, 'no_1mm_upfront': {'type': ['null', 'boolean'], 'doc': 'do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments\\n', 'inputBinding': {'position': 16, 'prefix': '--no-1mm-upfront'}}, 'end_to_end': {'type': ['null', 'boolean'], 'doc': 'entire read must align; no clipping (on)\\nOptions:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n  --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50\\n  --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\\n  --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 17, 'prefix': '--end-to-end'}}, 'end_to_end_very_fast': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n', 'inputBinding': {'position': 18, 'prefix': '--very-fast'}}, 'end_to_end_fast': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n', 'inputBinding': {'position': 18, 'prefix': '--fast'}}, 'end_to_end_sensitive': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\\n', 'inputBinding': {'position': 18, 'prefix': '--sensitive'}}, 'end_to_end_very_sensitive': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 18, 'prefix': '--very-sensitive'}}, 'local': {'type': ['null', 'boolean'], 'doc': 'local alignment; ends might be soft clipped (off)\\nOptions:\\n  --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\\n  --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\\n  --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\\n  --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 19, 'prefix': '--local'}}, 'local_very_fast_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\\n', 'inputBinding': {'position': 20, 'prefix': '--very-fast-local'}}, 'local_fast_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\\n', 'inputBinding': {'position': 20, 'prefix': '--fast-local'}}, 'local_sensitive_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\\n', 'inputBinding': {'position': 20, 'prefix': '--sensitive-local'}}, 'local_very_sensitive_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 20, 'prefix': '--very-sensitive-local'}}, 'ma': {'type': ['null', 'int'], 'doc': 'match bonus (0 for --end-to-end, 2 for --local)\\n', 'inputBinding': {'position': 21, 'prefix': '--ma'}}, 'mp': {'type': ['null', 'int'], 'doc': 'max penalty for mismatch; lower qual = lower penalty (6)\\n', 'inputBinding': {'position': 22, 'prefix': '--mp'}}, 'np': {'type': ['null', 'int'], 'doc': 'penalty for non-A/C/G/Ts in read/ref (1)\\n', 'inputBinding': {'position': 23, 'prefix': '--np'}}, 'rdg': {'type': ['null', 'int[]'], 'doc': 'read gap open, extend penalties (5,3)\\n', 'inputBinding': {'position': 24, 'itemSeparator': ',', 'prefix': '--rdg'}}, 'rfg': {'type': ['null', 'int[]'], 'doc': 'reference gap open, extend penalties (5,3)\\n', 'inputBinding': {'position': 25, 'itemSeparator': ',', 'prefix': '--rfg'}}, 'score_min': {'type': ['null', 'string'], 'doc': 'min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)\\n', 'inputBinding': {'position': 26, 'prefix': '--score-min'}}, 'k': {'type': ['null', 'int'], 'doc': 'report up to <int> alns per read; MAPQ not meaningful\\n', 'inputBinding': {'position': 27, 'prefix': '-k'}}, 'a': {'type': ['null', 'boolean'], 'doc': 'report all alignments; very slow, MAPQ not meaningful\\n', 'inputBinding': {'position': 27, 'prefix': '-a'}}, 'd': {'type': ['null', 'int'], 'doc': 'give up extending after <int> failed extends in a row (15)\\n', 'inputBinding': {'position': 28, 'prefix': '-D'}}, 'r': {'type': ['null', 'int'], 'doc': 'for reads w/ repetitive seeds, try <int> sets of seeds (2)\\n', 'inputBinding': {'position': 29, 'prefix': '-R'}}, 'minins': {'type': ['null', 'int'], 'doc': 'minimum fragment length (0)\\n', 'inputBinding': {'position': 30, 'prefix': '--minins'}}, 'maxins': {'type': ['null', 'int'], 'doc': 'maxins fragment length (0)\\n', 'inputBinding': {'position': 30, 'prefix': '--maxins'}}, 'fr': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--fr'}}, 'rf': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--rf'}}, 'ff': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--ff'}}, 'no_mixed': {'type': ['null', 'boolean'], 'doc': 'suppress unpaired alignments for paired reads\\n', 'inputBinding': {'position': 32, 'prefix': '--no-mixed'}}, 'no_discordant': {'type': ['null', 'boolean'], 'doc': 'suppress discordant alignments for paired reads\\n', 'inputBinding': {'position': 33, 'prefix': '--no-discordant'}}, 'no_dovetail': {'type': ['null', 'boolean'], 'doc': 'not concordant when mates extend past each other\\n', 'inputBinding': {'position': 34, 'prefix': '--no-dovetail'}}, 'no_contain': {'type': ['null', 'boolean'], 'doc': 'not concordant when one mate alignment contains other\\n', 'inputBinding': {'position': 35, 'prefix': '--no-contain'}}, 'no_overlap': {'type': ['null', 'boolean'], 'doc': 'not concordant when mates overlap at all\\n', 'inputBinding': {'position': 36, 'prefix': '--no-overlap'}}, 't': {'type': ['null', 'boolean'], 'doc': 'print wall-clock time taken by search phases\\n', 'inputBinding': {'position': 37, 'prefix': '-t'}}, 'un': {'type': ['null', 'string'], 'doc': \"write unpaired reads that didn't align to <path>\\n\", 'inputBinding': {'position': 38, 'prefix': '--un'}}, 'al': {'type': ['null', 'string'], 'doc': 'write unpaired reads that aligned at least once to <path>\\n', 'inputBinding': {'position': 39, 'prefix': '--al'}}, 'un_conc': {'type': ['null', 'string'], 'doc': \"write pairs that didn't align concordantly to <path>\\n\", 'inputBinding': {'position': 40, 'prefix': '--un-conc'}}, 'al_conc': {'type': ['null', 'string'], 'doc': 'write pairs that aligned concordantly at least once to <path>\\n', 'inputBinding': {'position': 41, 'prefix': '--al-conc'}}, 'quiet': {'type': ['null', 'boolean'], 'doc': 'print nothing to stderr except serious errors', 'inputBinding': {'position': 42, 'prefix': '--quiet'}}, 'met_file': {'type': ['null', 'string'], 'doc': 'send metrics to file at <path> (off)\\n', 'inputBinding': {'position': 43, 'prefix': '--met-file'}}, 'met_stderr': {'type': ['null', 'boolean'], 'doc': 'send metrics to stderr (off)', 'inputBinding': {'position': 44, 'prefix': '--met-stderr'}}, 'met': {'type': ['null', 'int'], 'doc': 'report internal counters & metrics every <int> secs (1)\\n', 'inputBinding': {'position': 45, 'prefix': '--met'}}, 'no_unal': {'type': ['null', 'boolean'], 'doc': 'suppress SAM records for unaligned reads', 'inputBinding': {'position': 46, 'prefix': '--no-unal'}}, 'no_head': {'type': ['null', 'boolean'], 'doc': 'suppress header lines, i.e. lines starting with @', 'inputBinding': {'position': 47, 'prefix': '--no-head'}}, 'no_sq': {'type': ['null', 'boolean'], 'doc': 'suppress @SQ header lines', 'inputBinding': {'position': 48, 'prefix': '--no-sq'}}, 'rg_id': {'type': ['null', 'string'], 'doc': 'set read group id, reflected in @RG line and RG:Z: opt field', 'inputBinding': {'position': 49, 'prefix': '--rg-id'}}, 'rg': {'type': ['null', 'string'], 'doc': 'add <text> (\"lab:value\") to @RG line of SAM header.\\nNote: @RG line only printed when --rg-id is set.\\n', 'inputBinding': {'position': 50, 'prefix': '--rg'}}, 'omit_sec_seq': {'type': ['null', 'boolean'], 'doc': \"put '*' in SEQ and QUAL fields for secondary alignments\", 'inputBinding': {'position': 51, 'prefix': '--omit-sec-seq'}}, 'threads': {'type': ['null', 'int'], 'doc': 'number of alignment threads to launch (1)\\n', 'inputBinding': {'position': 52, 'prefix': '-p'}}, 'reorder': {'type': ['null', 'boolean'], 'doc': 'force SAM output order to match order of input reads\\n', 'inputBinding': {'position': 53, 'prefix': '--reorder'}}, 'mm': {'type': ['null', 'boolean'], 'doc': \"use memory-mapped I/O for index; many 'bowtie's can share\", 'inputBinding': {'position': 54, 'prefix': '--mm'}}, 'qc_filter': {'type': ['null', 'boolean'], 'doc': 'filter out reads that are bad according to QSEQ filter', 'inputBinding': {'position': 55, 'prefix': '--qc-filter'}}, 'seed': {'type': ['null', 'int'], 'doc': 'seed for random number generator (0)\\n', 'inputBinding': {'position': 56, 'prefix': '--seed'}}, 'non_deterministic': {'type': ['null', 'boolean'], 'doc': 'seed rand. gen. arbitrarily instead of using read attributes', 'inputBinding': {'position': 57, 'prefix': '--non-deterministic'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '${\\n   if (inputs.output_filename == \"\"){\\n     return default_output_filename();\\n   } else {\\n     return inputs.output_filename;\\n   }\\n}\\n'}}, 'output_log': {'type': 'File', 'outputBinding': {'glob': '${\\n   if (inputs.output_filename == \"\"){\\n     return default_output_filename().split(\\'.\\').slice(0,-1).join(\\'.\\') + \".log\";\\n   } else {\\n     return inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\') + \".log\";\\n   }\\n}\\n'}}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bowtie2:v2.3.0', 'dockerFile': '$import: ./dockerfiles/bowtie2-Dockerfile\\n'}, {'class': 'SoftwareRequirement', 'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": "[{'valueFrom': '${\\n  if (inputs.filelist && inputs.filelist_mates){\\n    return \"-1\";\\n  } else if (inputs.filelist){\\n    return \"-U\";\\n  } else {\\n    return null;\\n  }\\n}\\n', 'position': 82}, {'valueFrom': '${\\n  if (inputs.filelist && inputs.filelist_mates){\\n    return \"-2\";\\n  } else if (inputs.filelist_mates){\\n    return \"-U\";\\n  } else {\\n    return null;\\n  }\\n}\\n', 'position': 84}, {'valueFrom': '${\\n  if (inputs.output_filename == \"\"){\\n    return \\' 2> \\' + default_output_filename().split(\\'.\\').slice(0,-1).join(\\'.\\') + \\'.log\\';\\n  } else {\\n    return \\' 2> \\' + inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\') + \\'.log\\';\\n  }\\n}\\n', 'position': 100000, 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['http://schema.org/version/latest/schema.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs bowtie aligner to align input FASTQ file(s) to reference genome\n",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie2_align",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": "{'class': 's:CreativeWork', 's:name': 'Common Workflow Language', 's:url': 'http://commonwl.org/'}",
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bowtie2_build.cwl",
    "sha": "164fb007e96b63a6c86c6e9ad2f3ad7f1f77785b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bowtie2_build.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n- class: ShellCommandRequirement\n- class: InlineJavascriptRequirement\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/bowtie2:v2.3.0\n  dockerFile: >\n    $import: ./dockerfiles/bowtie2-Dockerfile\n- class: SoftwareRequirement\n  packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\ninputs:\n\n  reference_in:\n    type:\n      - File\n      - type: array\n        items: File\n    doc: >\n      comma-separated list of files with ref sequences\n    inputBinding:\n      itemSeparator: \",\"\n      position: 25\n\n  bt2_index_base:\n    type: string?\n    doc: |\n      write bt2 data to files with this dir/basename\n    inputBinding:\n      position: 26\n      shellQuote: false\n    default: bowtie2_indices\n\n  f:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      reference files are Fasta (default)\n    inputBinding:\n      position: 1\n      prefix: '-f'\n\n  c:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      reference sequences given on cmd line (as <reference_in>)\n    inputBinding:\n      position: 2\n      prefix: '-c'\n\n  large_index:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\n    inputBinding:\n      position: 3\n      prefix: '--large-index'\n\n  noauto:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      disable automatic -p/--bmax/--dcv memory-fitting\n    inputBinding:\n      position: 4\n      prefix: '--noauto'\n\n  packed:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      use packed strings internally; slower, less memory\n    inputBinding:\n      position: 5\n      prefix: '--packed'\n\n  bmax:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      max bucket sz for blockwise suffix-array builder\n    inputBinding:\n      position: 6\n      prefix: '--bmax'\n\n  bmaxdivn:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      max bucket sz as divisor of ref len (default: 4)\n    inputBinding:\n      position: 7\n      prefix: '--bmaxdivn'\n\n  dcv:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      diff-cover period for blockwise (default: 1024)\n    inputBinding:\n      position: 8\n      prefix: '--dcv'\n\n  nodc:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      disable diff-cover (algorithm becomes quadratic)\n    inputBinding:\n      position: 9\n      prefix: '--nodc'\n\n  noref:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      don't build .3/.4 index files\n    inputBinding:\n      position: 10\n      prefix: '--noref'\n\n  justref:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      just build .3/.4 index files\n    inputBinding:\n      position: 11\n      prefix: '--justref'\n\n  offrate:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      SA is sampled every 2^<int> BWT chars (default: 5)\n    inputBinding:\n      position: 12\n      prefix: '--offrate'\n\n  ftabchars:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      # of chars consumed in initial lookup (default: 10)\n    inputBinding:\n      position: 13\n      prefix: '--ftabchars'\n\n  threads:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      # of threads\n    inputBinding:\n      position: 14\n      prefix: '--threads'\n\n  seed:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      seed for random number generator\n    inputBinding:\n      position: 15\n      prefix: '--seed'\n\n  quiet:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      verbose output (for debugging)\n    inputBinding:\n      position: 15\n      prefix: '--quiet'\n\noutputs:\n\n  indices:\n    type: File\n    outputBinding:\n      glob: $(inputs.bt2_index_base + \".1.bt2*\")\n    secondaryFiles: |\n      ${\n        var ext = self.location.split('/').slice(-1)[0].split('.').slice(-1)[0];\n        var basename = self.location.split(\"/\").slice(-1)[0].split(\".\").slice(0, -2).join (\".\");\n        var dirname = self.location.split(\"/\").slice(0,-1).join(\"/\");\n        return [{\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".2.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".3.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".4.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.1.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.2.\" + ext}\n        ]\n      }\n\n  output_log:\n    type: File\n    outputBinding:\n      glob: $(inputs.bt2_index_base + \".log\")\n\nbaseCommand:\n  - bowtie2-build\n\narguments:\n  - valueFrom: $('2> ' + inputs.bt2_index_base + '.log')\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- http://schema.org/version/latest/schema.rdf\n\ns:name: \"bowtie2_build\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:isPartOf:\n  class: s:CreativeWork\n  s:name: Common Workflow Language\n  s:url: http://commonwl.org/\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie2-build to generate indices from input FASTA files",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference_in': {'type': ['File', {'type': 'array', 'items': 'File'}], 'doc': 'comma-separated list of files with ref sequences\\n', 'inputBinding': {'itemSeparator': ',', 'position': 25}}, 'bt2_index_base': {'type': 'string?', 'doc': 'write bt2 data to files with this dir/basename\\n', 'inputBinding': {'position': 26, 'shellQuote': False}, 'default': 'bowtie2_indices'}, 'f': {'type': ['null', 'boolean'], 'doc': 'reference files are Fasta (default)\\n', 'inputBinding': {'position': 1, 'prefix': '-f'}}, 'c': {'type': ['null', 'boolean'], 'doc': 'reference sequences given on cmd line (as <reference_in>)\\n', 'inputBinding': {'position': 2, 'prefix': '-c'}}, 'large_index': {'type': ['null', 'boolean'], 'doc': \"force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\\n\", 'inputBinding': {'position': 3, 'prefix': '--large-index'}}, 'noauto': {'type': ['null', 'boolean'], 'doc': 'disable automatic -p/--bmax/--dcv memory-fitting\\n', 'inputBinding': {'position': 4, 'prefix': '--noauto'}}, 'packed': {'type': ['null', 'boolean'], 'doc': 'use packed strings internally; slower, less memory\\n', 'inputBinding': {'position': 5, 'prefix': '--packed'}}, 'bmax': {'type': ['null', 'int'], 'doc': 'max bucket sz for blockwise suffix-array builder\\n', 'inputBinding': {'position': 6, 'prefix': '--bmax'}}, 'bmaxdivn': {'type': ['null', 'int'], 'doc': 'max bucket sz as divisor of ref len (default: 4)\\n', 'inputBinding': {'position': 7, 'prefix': '--bmaxdivn'}}, 'dcv': {'type': ['null', 'int'], 'doc': 'diff-cover period for blockwise (default: 1024)\\n', 'inputBinding': {'position': 8, 'prefix': '--dcv'}}, 'nodc': {'type': ['null', 'boolean'], 'doc': 'disable diff-cover (algorithm becomes quadratic)\\n', 'inputBinding': {'position': 9, 'prefix': '--nodc'}}, 'noref': {'type': ['null', 'boolean'], 'doc': \"don't build .3/.4 index files\\n\", 'inputBinding': {'position': 10, 'prefix': '--noref'}}, 'justref': {'type': ['null', 'boolean'], 'doc': 'just build .3/.4 index files\\n', 'inputBinding': {'position': 11, 'prefix': '--justref'}}, 'offrate': {'type': ['null', 'int'], 'doc': 'SA is sampled every 2^<int> BWT chars (default: 5)\\n', 'inputBinding': {'position': 12, 'prefix': '--offrate'}}, 'ftabchars': {'type': ['null', 'int'], 'doc': '# of chars consumed in initial lookup (default: 10)\\n', 'inputBinding': {'position': 13, 'prefix': '--ftabchars'}}, 'threads': {'type': ['null', 'int'], 'doc': '# of threads\\n', 'inputBinding': {'position': 14, 'prefix': '--threads'}}, 'seed': {'type': ['null', 'int'], 'doc': 'seed for random number generator\\n', 'inputBinding': {'position': 15, 'prefix': '--seed'}}, 'quiet': {'type': ['null', 'boolean'], 'doc': 'verbose output (for debugging)\\n', 'inputBinding': {'position': 15, 'prefix': '--quiet'}}}",
    "cwl_outputs": "{'indices': {'type': 'File', 'outputBinding': {'glob': '$(inputs.bt2_index_base + \".1.bt2*\")'}, 'secondaryFiles': '${\\n  var ext = self.location.split(\\'/\\').slice(-1)[0].split(\\'.\\').slice(-1)[0];\\n  var basename = self.location.split(\"/\").slice(-1)[0].split(\".\").slice(0, -2).join (\".\");\\n  var dirname = self.location.split(\"/\").slice(0,-1).join(\"/\");\\n  return [{\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".2.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".3.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".4.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.1.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.2.\" + ext}\\n  ]\\n}\\n'}, 'output_log': {'type': 'File', 'outputBinding': {'glob': '$(inputs.bt2_index_base + \".log\")'}}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bowtie2:v2.3.0', 'dockerFile': '$import: ./dockerfiles/bowtie2-Dockerfile\\n'}, {'class': 'SoftwareRequirement', 'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2-build']",
    "cwl_arguments": "[{'valueFrom': \"$('2> ' + inputs.bt2_index_base + '.log')\", 'position': 100000, 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['http://schema.org/version/latest/schema.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs bowtie2-build to generate indices from input FASTA files",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie2_build",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": "{'class': 's:CreativeWork', 's:name': 'Common Workflow Language', 's:url': 'http://commonwl.org/'}",
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bwa-index.cwl",
    "sha": "7d78a2916f48cfe09c5f6f17ea4b726359bacf4c",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bwa-index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  DockerRequirement:\n    dockerPull: \"quay.io/biocontainers/bwa:0.7.17--ha92aebf_3\"\n  InlineJavascriptRequirement: {}\n\ninputs:\n  InputFile:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      position: 200\n    \n  IndexName:\n    type: string\n    inputBinding:\n      prefix: \"-p\"\n      #valueFrom: $(self + \".bwt\")\n#Optional arguments\n  algoType:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n          - is\n          - bwtsw\n    inputBinding:\n      prefix: \"-a\"\n\nbaseCommand: [bwa, index]\n\noutputs: \n  index:\n    type: File\n    secondaryFiles: \n   #   - $(inputs.IndexName).bwt.bwt\n      - $(inputs.IndexName).sa\n      - $(inputs.IndexName).pac\n      - $(inputs.IndexName).ann\n      - $(inputs.IndexName).amb\n    outputBinding:\n      glob: $(inputs.IndexName).bwt\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'InputFile': {'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'position': 200}}, 'IndexName': {'type': 'string', 'inputBinding': {'prefix': '-p'}}, 'algoType': {'type': ['null', {'type': 'enum', 'symbols': ['is', 'bwtsw']}], 'inputBinding': {'prefix': '-a'}}}",
    "cwl_outputs": "{'index': {'type': 'File', 'secondaryFiles': ['$(inputs.IndexName).sa', '$(inputs.IndexName).pac', '$(inputs.IndexName).ann', '$(inputs.IndexName).amb'], 'outputBinding': {'glob': '$(inputs.IndexName).bwt'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'index']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bwa:0.7.17--ha92aebf_3'}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/bwa-mem.cwl",
    "sha": "943cb4a62734bdc5b529e2181ca0aa716fef60c7",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bwa-mem.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  DockerRequirement:\n    dockerPull: \"quay.io/biocontainers/bwa:0.7.17--ha92aebf_3\"\n\ninputs:\n  InputFile:\n    type: File[]\n    format:\n      - edam:format_1930 # FASTA\n      - edam:format_1931 # FASTQ\n    inputBinding:\n      position: 201\n    \n  Index:\n    type: File\n    inputBinding:\n      position: 200\n    secondaryFiles:\n      - .fai\n      - .amb\n      - .ann\n      - .bwt\n      - .pac\n      - .sa\n\n#Optional arguments\n\n  Threads:\n    type: int?\n    inputBinding:\n      prefix: \"-t\"\n\n  MinSeedLen:\n    type: int?\n    inputBinding:\n      prefix: \"-k\"\n  \n  BandWidth:\n    type: int?\n    inputBinding:\n      prefix: \"-w\"\n\n  ZDropoff:\n    type: int?\n    inputBinding:\n      prefix: \"-d\"\n\n  SeedSplitRatio:\n    type: float?\n    inputBinding:\n      prefix: \"-r\"\n    \n  MaxOcc:\n    type: int?\n    inputBinding:\n      prefix: \"-c\"\n\n  MatchScore:\n    type: int?\n    inputBinding:\n      prefix: \"-A\"\n\n  MmPenalty:\n    type: int?\n    inputBinding:\n      prefix: \"-B\"\n\n  GapOpenPen:\n    type: int?\n    inputBinding:\n      prefix: \"-O\"\n\n  GapExtPen:\n    type: int?\n    inputBinding:\n      prefix: \"-E\"\n\n  ClipPen:\n    type: int?\n    inputBinding:\n      prefix: \"-L\"\n\n  UnpairPen:\n    type: int?\n    inputBinding:\n      prefix: \"-U\"\n\n  RgLine:\n    type: string?\n    inputBinding:\n      prefix: \"-R\"\n\n  VerboseLevel:\n    type: int?\n    inputBinding:\n      prefix: \"-v\"\n\n  isOutSecAlign:\n    type: boolean?\n    inputBinding:\n      prefix: \"-a\"\n\n  isMarkShortSplit:\n    type: boolean?\n    inputBinding:\n      prefix: \"-M\"\n\n  isUseHardClip:\n    type: boolean?\n    inputBinding:\n      prefix: \"-H\"\n\n  isMultiplexedPair:\n    type: boolean?\n    inputBinding:\n      prefix: \"-p\"\n      \n\nbaseCommand: [bwa, mem]\n\nstdout: ${ return inputs.InputFile[1].nameroot+\"_unsorted_reads.sam\";}\n\noutputs:\n  reads_stdout:\n    type: stdout\n    format: edam:format_2572 \n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'InputFile': {'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931'], 'inputBinding': {'position': 201}}, 'Index': {'type': 'File', 'inputBinding': {'position': 200}, 'secondaryFiles': ['.fai', '.amb', '.ann', '.bwt', '.pac', '.sa']}, 'Threads': {'type': 'int?', 'inputBinding': {'prefix': '-t'}}, 'MinSeedLen': {'type': 'int?', 'inputBinding': {'prefix': '-k'}}, 'BandWidth': {'type': 'int?', 'inputBinding': {'prefix': '-w'}}, 'ZDropoff': {'type': 'int?', 'inputBinding': {'prefix': '-d'}}, 'SeedSplitRatio': {'type': 'float?', 'inputBinding': {'prefix': '-r'}}, 'MaxOcc': {'type': 'int?', 'inputBinding': {'prefix': '-c'}}, 'MatchScore': {'type': 'int?', 'inputBinding': {'prefix': '-A'}}, 'MmPenalty': {'type': 'int?', 'inputBinding': {'prefix': '-B'}}, 'GapOpenPen': {'type': 'int?', 'inputBinding': {'prefix': '-O'}}, 'GapExtPen': {'type': 'int?', 'inputBinding': {'prefix': '-E'}}, 'ClipPen': {'type': 'int?', 'inputBinding': {'prefix': '-L'}}, 'UnpairPen': {'type': 'int?', 'inputBinding': {'prefix': '-U'}}, 'RgLine': {'type': 'string?', 'inputBinding': {'prefix': '-R'}}, 'VerboseLevel': {'type': 'int?', 'inputBinding': {'prefix': '-v'}}, 'isOutSecAlign': {'type': 'boolean?', 'inputBinding': {'prefix': '-a'}}, 'isMarkShortSplit': {'type': 'boolean?', 'inputBinding': {'prefix': '-M'}}, 'isUseHardClip': {'type': 'boolean?', 'inputBinding': {'prefix': '-H'}}, 'isMultiplexedPair': {'type': 'boolean?', 'inputBinding': {'prefix': '-p'}}}",
    "cwl_outputs": "{'reads_stdout': {'type': 'stdout', 'format': 'edam:format_2572'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'mem']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bwa:0.7.17--ha92aebf_3'}}",
    "cwl_doc": null,
    "cwl_stdout": "${ return inputs.InputFile[1].nameroot+\"_unsorted_reads.sam\";}",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/fastp.cwl",
    "sha": "3cd5ae8048e83a74041b4f56efb5cc9470710df0",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/fastp.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Modified from https://github.com/nigyta/bact_genome/blob/master/cwl/tool/fastp/fastp.cwl\nrequirements:\n    InlineJavascriptRequirement: {}\nhints:\n    DockerRequirement:\n        dockerPull: quay.io/biocontainers/fastp:0.20.0--hdbcaa40_0\n\nbaseCommand: [fastp]\n\narguments:\n    - prefix: -o\n      valueFrom: $(inputs.fastq1.nameroot).fastp.fastq\n    - |\n      ${\n        if (inputs.fastq2){\n          return '-O';\n        } else {\n          return '';\n        }\n      }\n    - |\n      ${\n        if (inputs.fastq2){\n          return inputs.fastq2.nameroot + \".fastp.fastq\";\n        } else {\n          return '';\n        }\n      }\n\ninputs:\n    fastq1:\n      type: File\n      format:\n        - edam:format_1930 # FASTA\n        - edam:format_1931 # FASTQ\n      inputBinding:\n        prefix: -i\n    fastq2:\n      format:\n        - edam:format_1930 # FASTA\n        - edam:format_1931 # FASTQ\n      type: File?\n      inputBinding:\n        prefix: -I\n    threads:\n      type: int?\n      default: 1\n      inputBinding:\n        prefix: --thread\n    qualified_phred_quality:\n      type: int?\n      default: 20\n      inputBinding:\n        prefix: --qualified_quality_phred\n    unqualified_phred_quality:\n      type: int?\n      default: 20\n      inputBinding:\n        prefix: --unqualified_percent_limit\n    min_length_required:\n      type: int?\n      default: 50\n      inputBinding:\n        prefix: --length_required\n    force_polyg_tail_trimming:\n      type: boolean?\n      inputBinding:\n        prefix: --trim_poly_g\n    disable_trim_poly_g:\n      type: boolean?\n      default: true\n      inputBinding:\n        prefix: --disable_trim_poly_g\n    base_correction:\n      type: boolean?\n      default: true\n      inputBinding:\n        prefix: --correction\n    \n\n\noutputs:\n    out_fastq1:\n       type: File\n       format: $(inputs.fastq1.format)\n       outputBinding:\n           glob: $(inputs.fastq1.nameroot).fastp.fastq\n    out_fastq2:\n       type: File?\n       format: $(inputs.fastq2.format)\n       outputBinding:\n           glob: $(inputs.fastq2.nameroot).fastp.fastq\n    html_report:\n      type: File\n      outputBinding:\n        glob: fastp.html\n        outputEval: |\n           ${\n             self[0].basename = inputs.fastq1.nameroot + '_fastp.html';\n             return self[0]\n            }\n        \n    json_report:\n      type: File\n      outputBinding:\n        glob: fastp.json\n        outputEval: |\n           ${\n              self[0].basename = inputs.fastq1.nameroot + '_fastp.json';\n              return self[0]\n            }\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fastq1': {'type': 'File', 'format': ['edam:format_1930', 'edam:format_1931'], 'inputBinding': {'prefix': '-i'}}, 'fastq2': {'format': ['edam:format_1930', 'edam:format_1931'], 'type': 'File?', 'inputBinding': {'prefix': '-I'}}, 'threads': {'type': 'int?', 'default': 1, 'inputBinding': {'prefix': '--thread'}}, 'qualified_phred_quality': {'type': 'int?', 'default': 20, 'inputBinding': {'prefix': '--qualified_quality_phred'}}, 'unqualified_phred_quality': {'type': 'int?', 'default': 20, 'inputBinding': {'prefix': '--unqualified_percent_limit'}}, 'min_length_required': {'type': 'int?', 'default': 50, 'inputBinding': {'prefix': '--length_required'}}, 'force_polyg_tail_trimming': {'type': 'boolean?', 'inputBinding': {'prefix': '--trim_poly_g'}}, 'disable_trim_poly_g': {'type': 'boolean?', 'default': True, 'inputBinding': {'prefix': '--disable_trim_poly_g'}}, 'base_correction': {'type': 'boolean?', 'default': True, 'inputBinding': {'prefix': '--correction'}}}",
    "cwl_outputs": "{'out_fastq1': {'type': 'File', 'format': '$(inputs.fastq1.format)', 'outputBinding': {'glob': '$(inputs.fastq1.nameroot).fastp.fastq'}}, 'out_fastq2': {'type': 'File?', 'format': '$(inputs.fastq2.format)', 'outputBinding': {'glob': '$(inputs.fastq2.nameroot).fastp.fastq'}}, 'html_report': {'type': 'File', 'outputBinding': {'glob': 'fastp.html', 'outputEval': \"${\\n  self[0].basename = inputs.fastq1.nameroot + '_fastp.html';\\n  return self[0]\\n }\\n\"}}, 'json_report': {'type': 'File', 'outputBinding': {'glob': 'fastp.json', 'outputEval': \"${\\n   self[0].basename = inputs.fastq1.nameroot + '_fastp.json';\\n   return self[0]\\n }\\n\"}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/fastp:0.20.0--hdbcaa40_0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fastp']",
    "cwl_arguments": "[{'prefix': '-o', 'valueFrom': '$(inputs.fastq1.nameroot).fastp.fastq'}, \"${\\n  if (inputs.fastq2){\\n    return '-O';\\n  } else {\\n    return '';\\n  }\\n}\\n\", '${\\n  if (inputs.fastq2){\\n    return inputs.fastq2.nameroot + \".fastp.fastq\";\\n  } else {\\n    return \\'\\';\\n  }\\n}\\n']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Modified from https://github.com/nigyta/bact_genome/blob/master/cwl/tool/fastp/fastp.cwl\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/get_secondaryfiles.cwl",
    "sha": "94fcbddb77c76ad7bc5a064be4d4ca4fb1c54de4",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/get_secondaryfiles.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.sequence)\n      - $(inputs.bwa_index)\nbaseCommand: [ls]\ninputs:\n  sequence:\n    type: File\n    secondaryFiles: .fai\n\n  bwa_index:\n    type: File\n    secondaryFiles:\n      - $(self.nameroot).ann \n      - $(self.nameroot).amb\n      - $(self.nameroot).pac\n      - $(self.nameroot).sa\n    \noutputs:\n  sequences_with_index: \n    type: File\n    secondaryFiles: \n      - $(inputs.bwa_index.nameroot).bwt\n      - $(inputs.bwa_index.nameroot).sa\n      - $(inputs.bwa_index.nameroot).pac\n      - $(inputs.bwa_index.nameroot).ann\n      - $(inputs.bwa_index.nameroot).amb\n      - $(inputs.sequence.basename).fai\n    outputBinding:\n      glob: $(inputs.sequence.basename)\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'sequence': {'type': 'File', 'secondaryFiles': '.fai'}, 'bwa_index': {'type': 'File', 'secondaryFiles': ['$(self.nameroot).ann', '$(self.nameroot).amb', '$(self.nameroot).pac', '$(self.nameroot).sa']}}",
    "cwl_outputs": "{'sequences_with_index': {'type': 'File', 'secondaryFiles': ['$(inputs.bwa_index.nameroot).bwt', '$(inputs.bwa_index.nameroot).sa', '$(inputs.bwa_index.nameroot).pac', '$(inputs.bwa_index.nameroot).ann', '$(inputs.bwa_index.nameroot).amb', '$(inputs.sequence.basename).fai'], 'outputBinding': {'glob': '$(inputs.sequence.basename)'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ls']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.sequence)', '$(inputs.bwa_index)']}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/lofreq_call.cwl",
    "sha": "dfc8aebee10a2f6ceb89c056083e5115d02a4811",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/lofreq_call.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1\n\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - $(inputs.reference_index)\n      - $(inputs.reference_fasta)\n      - $(inputs.reads_index)\n\nbaseCommand: [lofreq, call-parallel]\n\narguments:\n  - prefix: --out\n    valueFrom: $(inputs.reads_align.nameroot)_variant.vcf\n    position: 99\n\ninputs:\n  threads:\n    type: int?\n    default: 1\n    inputBinding:\n      prefix: --pp-threads\n      position: 1\n  reference_index:\n    type: File\n  reference_fasta:\n    doc: 'fasta'\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: -f\n      position: 1000\n      valueFrom: $(self.basename)\n\n  call_indels:\n    type: boolean?\n    inputBinding:\n      prefix: --call-indels\n      position: 3\n    doc: \"Enable indel calls (note: preprocess your file to include indel alignment qualities!)\"\n\n  only_indels:\n    type: boolean?\n    inputBinding:\n      prefix: --only-indels\n      position: 4\n    doc: \"Only call indels; no SNVs\"\n\n  bed:\n    label: regions_from_bed\n    type: File?\n    doc: 'List of positions (chr pos) or regions (BED)'\n    inputBinding:\n      prefix: --bed\n\n  region:\n    type: string?\n    doc: 'Limit calls to this region (chrom:start-end)'\n    inputBinding:\n      prefix: --region\n\n  min_bq:\n    label: min_base_quality\n    type: int?\n    default: 6\n    inputBinding:\n      prefix: --min-bq\n    doc: 'Skip any base with baseQ smaller than INT [6]'\n\n  min_alt_bq:\n    label: min_alterne_base_quality\n    type: int?\n    default: 6\n    inputBinding:\n      prefix: --min-alt-bq\n    doc: 'Skip alternate bases with baseQ smaller than INT [6]'\n\n  def_alt_bq:\n    label: def_alt_base_quality\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --def-alt-bq\n    doc: 'Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]'\n\n  min_jq:\n    label: min_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix:  --min-jq\n    doc: 'Skip any base with joinedQ smaller than INT [0]'\n\n  min_alt_jq:\n    label: min_alt_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --min-alt-jq\n    doc: \"Skip alternate bases with joinedQ smaller than INT [0]\"\n\n  def_alt_jq:\n    label: def_alt_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --def-alt-jq\n    doc: \"Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]\"\n\n  no_baq:\n    label: disable_base_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --no-baq\n    doc: 'Disable use of base-alignment quality (BAQ)'\n\n  no_idaq:\n    label: disable_indel_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --no-idaq\n    doc: \"Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)\"\n\n  del_baq:\n    label: delete_base_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --del-baq\n    doc: \"Delete pre-existing BAQ values, i.e. compute even if already present in BAM\"\n\n  no_ext_base_alignment_quality:\n    type: boolean?\n    inputBinding:\n      prefix: --no-ext-baq\n    doc: \"Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)\"\n\n  min_mq:\n    label: min_mapping_quality\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --min-mq\n    doc: \"Skip reads with mapping quality smaller than INT [0]\"\n\n  max_mapping_quality:\n    type: int?\n    default: 255\n    inputBinding:\n      prefix: --max-mq\n    doc: \"Cap mapping quality at INT [255]\"\n\n  no_mapping_quality:\n    type: boolean?\n    inputBinding:\n      prefix: --no-mq\n    doc: \"Don't merge mapping quality in LoFreq's model\"\n\n  enable_source_qual:\n    type: boolean?\n    inputBinding:\n      prefix: --src-qual\n    doc: 'Enable computation of source quality'\n\n  ignore_vcf:\n    type: File[]?\n    inputBinding:\n      prefix: --ign-vcf\n    doc: \"Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas\"\n\n  replace_non_match:\n    type: int?\n    default: -1\n    inputBinding:\n      prefix: --def-nm-q\n    doc: 'If >= 0, then replace non-match base qualities with this default value [-1]'\n\n  pvalue_cutoff:\n    type: float?\n    default: 0.01\n    inputBinding:\n      prefix: --sig\n    doc: \"P-Value cutoff / significance level [0.010000]\"\n\n  bonferroni:\n    type: string?\n    default: 'dynamic'\n    inputBinding:\n      prefix: --bonf\n    doc: \"Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']\"\n\n  min_cov:\n    type: int?\n    default: 10\n    inputBinding:\n      prefix: --min-cov\n      position: 2\n    doc: \"Test only positions having at least this coverage [1] (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)\"\n\n  max_depth_cov:\n    type: int?\n    default: 1000000\n    inputBinding:\n      prefix: --max-depth\n    doc: \"Cap coverage at this depth [1000000]\"\n\n  illumina_1_3:\n    type: boolean?\n    inputBinding:\n      prefix: --illumina-1.3\n    doc: \"Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded\"\n\n  use_orphan:\n    type: boolean?\n    inputBinding:\n      prefix: --use-orphan\n    doc: \"Count anomalous read pairs (i.e. where mate is not aligned properly)\"\n\n  no_default_filter:\n    type: boolean?\n    doc: \"Don't run default lofreq filter automatically after calling variants\"\n    inputBinding:\n      prefix: --no-default-filter\n    # Other options \n    # --plp-summary-only      No variant calling. Just output pileup summary per column\n    # --force-overwrite       Overwrite any existing output\n    # --verbose               Be verbose\n    # --debug                 Enable debugging\n\n  reads_align:\n    doc: 'bam'\n    type: File\n    format: edam:format_2572  # BAM\n    inputBinding:\n      position: 1001\n      valueFrom: $(self.basename)\n\n  reads_index:\n    doc: bai\n    type: File\n\noutputs:\n  vcf:\n    type: File\n    format: edam:format_3016  # VCF\n    outputBinding:\n      glob: \"*.vcf\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'threads': {'type': 'int?', 'default': 1, 'inputBinding': {'prefix': '--pp-threads', 'position': 1}}, 'reference_index': {'type': 'File'}, 'reference_fasta': {'doc': 'fasta', 'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'prefix': '-f', 'position': 1000, 'valueFrom': '$(self.basename)'}}, 'call_indels': {'type': 'boolean?', 'inputBinding': {'prefix': '--call-indels', 'position': 3}, 'doc': 'Enable indel calls (note: preprocess your file to include indel alignment qualities!)'}, 'only_indels': {'type': 'boolean?', 'inputBinding': {'prefix': '--only-indels', 'position': 4}, 'doc': 'Only call indels; no SNVs'}, 'bed': {'label': 'regions_from_bed', 'type': 'File?', 'doc': 'List of positions (chr pos) or regions (BED)', 'inputBinding': {'prefix': '--bed'}}, 'region': {'type': 'string?', 'doc': 'Limit calls to this region (chrom:start-end)', 'inputBinding': {'prefix': '--region'}}, 'min_bq': {'label': 'min_base_quality', 'type': 'int?', 'default': 6, 'inputBinding': {'prefix': '--min-bq'}, 'doc': 'Skip any base with baseQ smaller than INT [6]'}, 'min_alt_bq': {'label': 'min_alterne_base_quality', 'type': 'int?', 'default': 6, 'inputBinding': {'prefix': '--min-alt-bq'}, 'doc': 'Skip alternate bases with baseQ smaller than INT [6]'}, 'def_alt_bq': {'label': 'def_alt_base_quality', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--def-alt-bq'}, 'doc': 'Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]'}, 'min_jq': {'label': 'min_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-jq'}, 'doc': 'Skip any base with joinedQ smaller than INT [0]'}, 'min_alt_jq': {'label': 'min_alt_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-alt-jq'}, 'doc': 'Skip alternate bases with joinedQ smaller than INT [0]'}, 'def_alt_jq': {'label': 'def_alt_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--def-alt-jq'}, 'doc': 'Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]'}, 'no_baq': {'label': 'disable_base_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--no-baq'}, 'doc': 'Disable use of base-alignment quality (BAQ)'}, 'no_idaq': {'label': 'disable_indel_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--no-idaq'}, 'doc': \"Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)\"}, 'del_baq': {'label': 'delete_base_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--del-baq'}, 'doc': 'Delete pre-existing BAQ values, i.e. compute even if already present in BAM'}, 'no_ext_base_alignment_quality': {'type': 'boolean?', 'inputBinding': {'prefix': '--no-ext-baq'}, 'doc': \"Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)\"}, 'min_mq': {'label': 'min_mapping_quality', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-mq'}, 'doc': 'Skip reads with mapping quality smaller than INT [0]'}, 'max_mapping_quality': {'type': 'int?', 'default': 255, 'inputBinding': {'prefix': '--max-mq'}, 'doc': 'Cap mapping quality at INT [255]'}, 'no_mapping_quality': {'type': 'boolean?', 'inputBinding': {'prefix': '--no-mq'}, 'doc': \"Don't merge mapping quality in LoFreq's model\"}, 'enable_source_qual': {'type': 'boolean?', 'inputBinding': {'prefix': '--src-qual'}, 'doc': 'Enable computation of source quality'}, 'ignore_vcf': {'type': 'File[]?', 'inputBinding': {'prefix': '--ign-vcf'}, 'doc': 'Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas'}, 'replace_non_match': {'type': 'int?', 'default': -1, 'inputBinding': {'prefix': '--def-nm-q'}, 'doc': 'If >= 0, then replace non-match base qualities with this default value [-1]'}, 'pvalue_cutoff': {'type': 'float?', 'default': 0.01, 'inputBinding': {'prefix': '--sig'}, 'doc': 'P-Value cutoff / significance level [0.010000]'}, 'bonferroni': {'type': 'string?', 'default': 'dynamic', 'inputBinding': {'prefix': '--bonf'}, 'doc': \"Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']\"}, 'min_cov': {'type': 'int?', 'default': 10, 'inputBinding': {'prefix': '--min-cov', 'position': 2}, 'doc': 'Test only positions having at least this coverage [1] (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)'}, 'max_depth_cov': {'type': 'int?', 'default': 1000000, 'inputBinding': {'prefix': '--max-depth'}, 'doc': 'Cap coverage at this depth [1000000]'}, 'illumina_1_3': {'type': 'boolean?', 'inputBinding': {'prefix': '--illumina-1.3'}, 'doc': 'Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded'}, 'use_orphan': {'type': 'boolean?', 'inputBinding': {'prefix': '--use-orphan'}, 'doc': 'Count anomalous read pairs (i.e. where mate is not aligned properly)'}, 'no_default_filter': {'type': 'boolean?', 'doc': \"Don't run default lofreq filter automatically after calling variants\", 'inputBinding': {'prefix': '--no-default-filter'}}, 'reads_align': {'doc': 'bam', 'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {'position': 1001, 'valueFrom': '$(self.basename)'}}, 'reads_index': {'doc': 'bai', 'type': 'File'}}",
    "cwl_outputs": "{'vcf': {'type': 'File', 'format': 'edam:format_3016', 'outputBinding': {'glob': '*.vcf'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lofreq', 'call-parallel']",
    "cwl_arguments": "[{'prefix': '--out', 'valueFrom': '$(inputs.reads_align.nameroot)_variant.vcf', 'position': 99}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/lofreq_viterbi.cwl",
    "sha": "24c212c10564e095d164ef3f9a9879a2b113df00",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/lofreq_viterbi.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: \"viterbi: Viterbi realignment\"\ndoc: |\n  Probabilistic realignment of your already mapped reads, which corrects\n  mapping errors (run right after mapping). Not recommended for non-Illumina\n  data.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference)\n    \nbaseCommand: [lofreq, viterbi]\n\narguments:\n  - prefix: --out\n    valueFrom: $(inputs.reads.nameroot)_realigned.bam\n\ninputs:\n  reference:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: --ref\n      \n  reads:  \n    type: File\n    format: edam:format_2572  # BAM\n    inputBinding: {}\n\n  keepflags:\n    type: boolean?\n    label: Don't delete flags MC, MD, NM, and A?\n    doc: |\n      These flags are all prone to getting invalidated during realignment.\n      Keep them only if you know what you are doing.\n    inputBinding:\n      prefix: --keepflags\n    default: false\n      \n  defqual:\n    type: int?\n    inputBinding:\n      prefix: --defqual\noutputs:\n  realigned:\n    type: File\n    format: edam:format_2572  # BAM\n    outputBinding:\n      glob: $(inputs.reads.nameroot)_realigned.bam\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference': {'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'prefix': '--ref'}}, 'reads': {'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {}}, 'keepflags': {'type': 'boolean?', 'label': \"Don't delete flags MC, MD, NM, and A?\", 'doc': 'These flags are all prone to getting invalidated during realignment.\\nKeep them only if you know what you are doing.\\n', 'inputBinding': {'prefix': '--keepflags'}, 'default': False}, 'defqual': {'type': 'int?', 'inputBinding': {'prefix': '--defqual'}}}",
    "cwl_outputs": "{'realigned': {'type': 'File', 'format': 'edam:format_2572', 'outputBinding': {'glob': '$(inputs.reads.nameroot)_realigned.bam'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lofreq', 'viterbi']",
    "cwl_arguments": "[{'prefix': '--out', 'valueFrom': '$(inputs.reads.nameroot)_realigned.bam'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.reference)']}}",
    "cwl_doc": "Probabilistic realignment of your already mapped reads, which corrects\nmapping errors (run right after mapping). Not recommended for non-Illumina\ndata.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "viterbi: Viterbi realignment",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/mergetab.cwl",
    "sha": "9f5853f0dc0257316b57ed0f22cd1e9ad28f7671",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/mergetab.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nrequirements:\n  InlineJavascriptRequirement: {}\nbaseCommand: [ls]\ninputs:\n  out_fastq1: File\n  out_fastq2: File\noutputs:\n  tab:\n    type: File[]\n    outputBinding:\n      outputEval: |\n              ${var tab=[]\n                tab.push(inputs.out_fastq1)\n                tab.push(inputs.out_fastq2)\n                return tab;\n               } \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'out_fastq1': 'File', 'out_fastq2': 'File'}",
    "cwl_outputs": "{'tab': {'type': 'File[]', 'outputBinding': {'outputEval': '${var tab=[]\\n  tab.push(inputs.out_fastq1)\\n  tab.push(inputs.out_fastq2)\\n  return tab;\\n } \\n'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ls']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/multiqc.cwl",
    "sha": "71e2b5a5d68dd9d5303c7dc7e44b2b1e6db81ddb",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/multiqc.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Run multiqc on log files from supported bioinformatic tools.\n  26/04/2020: Fixed output filenames, added support for a single input file in qc_files_array (Miguel Boland)\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    # This step is necessary since the input files\n    # must be loaded into the working directory as there\n    # is no way to specify the input file directly on the\n    # command line.\n    listing: |\n      ${// script merges the to input arrays\n        // into one array that fulfills the type \n        // requirement for \"listing\", which is\n        // \"{type: array, items: [File, Directory]}\"\n\n        var qc_files_array = inputs.qc_files_array;\n        var qc_files_array_of_array = inputs.qc_files_array_of_array;\n        var output_array = [];\n\n        // add items of the qc_files_array to the output_array\n        if ( qc_files_array != null ){\n          // Fix to allow single qc_file_array\n          if (qc_files_array.length === undefined){\n            output_array.push(qc_files_array)\n          } else {\n            for (var i=0; i<qc_files_array.length; i++){\n              output_array.push(qc_files_array[i])\n            }\n          }\n        }\n\n        // add items of the qc_files_array_of_array to the output_array\n        if ( qc_files_array_of_array != null ){\n          for (var i=0; i<qc_files_array_of_array.length; i++){ \n            for (var ii=0; ii<qc_files_array_of_array[i].length; ii++){\n              output_array.push(qc_files_array_of_array[i][ii])\n            }\n          }\n        }\n\n        return output_array\n      }\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/multiqc:1.7\n  \n\nbaseCommand: [\"multiqc\"]\narguments:\n  - valueFrom: --zip-data-dir\n    position: 1\n  - valueFrom: \"log_filesize_limit: 100000000\"\n    position: 1\n    prefix: --cl_config\n  - valueFrom: $(runtime.outdir)\n    position: 2\n    prefix: --outdir\n  - valueFrom: $(runtime.outdir)\n    position: 4\n  \ninputs:\n  qc_files_array:\n    doc: |\n      qc files which shall be part of the multiqc summary;\n      optional, only one of qc_files_array or qc_files_array_of_array \n      must be provided\n    type:\n      - \"null\"\n      - File\n      - type: array\n        items: File\n  qc_files_array_of_array:\n    doc: |\n      qc files which shall be part of the multiqc summary;\n      optional, only one of qc_files_array or qc_files_array_of_array \n      must be provided\n    type:\n      - \"null\"\n      - type: array\n        items: \n          type: array\n          items: File\n  report_name:\n    doc: name used for the html report and the corresponding zip file\n    type: string\n    default: multiqc\n    inputBinding:\n      prefix: --filename\n      position: 3\n      \noutputs:\n  multiqc_zip:\n    type: File\n    outputBinding:\n      glob: $(inputs.report_name)_data.zip\n  multiqc_html:\n    type: File\n    outputBinding:\n      glob: $(inputs.report_name).html\n  diree:\n    type: Directory\n    outputBinding:\n      glob: .\n#  multiqc_json:\n#    type: File\n#    outputBinding:\n#      glob: multiqc_data/$(inputs.report_name).json\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'qc_files_array': {'doc': 'qc files which shall be part of the multiqc summary;\\noptional, only one of qc_files_array or qc_files_array_of_array \\nmust be provided\\n', 'type': ['null', 'File', {'type': 'array', 'items': 'File'}]}, 'qc_files_array_of_array': {'doc': 'qc files which shall be part of the multiqc summary;\\noptional, only one of qc_files_array or qc_files_array_of_array \\nmust be provided\\n', 'type': ['null', {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}]}, 'report_name': {'doc': 'name used for the html report and the corresponding zip file', 'type': 'string', 'default': 'multiqc', 'inputBinding': {'prefix': '--filename', 'position': 3}}}",
    "cwl_outputs": "{'multiqc_zip': {'type': 'File', 'outputBinding': {'glob': '$(inputs.report_name)_data.zip'}}, 'multiqc_html': {'type': 'File', 'outputBinding': {'glob': '$(inputs.report_name).html'}}, 'diree': {'type': 'Directory', 'outputBinding': {'glob': '.'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 10000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/multiqc:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['multiqc']",
    "cwl_arguments": "[{'valueFrom': '--zip-data-dir', 'position': 1}, {'valueFrom': 'log_filesize_limit: 100000000', 'position': 1, 'prefix': '--cl_config'}, {'valueFrom': '$(runtime.outdir)', 'position': 2, 'prefix': '--outdir'}, {'valueFrom': '$(runtime.outdir)', 'position': 4}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': '${// script merges the to input arrays\\n  // into one array that fulfills the type \\n  // requirement for \"listing\", which is\\n  // \"{type: array, items: [File, Directory]}\"\\n\\n  var qc_files_array = inputs.qc_files_array;\\n  var qc_files_array_of_array = inputs.qc_files_array_of_array;\\n  var output_array = [];\\n\\n  // add items of the qc_files_array to the output_array\\n  if ( qc_files_array != null ){\\n    // Fix to allow single qc_file_array\\n    if (qc_files_array.length === undefined){\\n      output_array.push(qc_files_array)\\n    } else {\\n      for (var i=0; i<qc_files_array.length; i++){\\n        output_array.push(qc_files_array[i])\\n      }\\n    }\\n  }\\n\\n  // add items of the qc_files_array_of_array to the output_array\\n  if ( qc_files_array_of_array != null ){\\n    for (var i=0; i<qc_files_array_of_array.length; i++){ \\n      for (var ii=0; ii<qc_files_array_of_array[i].length; ii++){\\n        output_array.push(qc_files_array_of_array[i][ii])\\n      }\\n    }\\n  }\\n\\n  return output_array\\n}\\n'}}",
    "cwl_doc": "Run multiqc on log files from supported bioinformatic tools.\n26/04/2020: Fixed output filenames, added support for a single input file in qc_files_array (Miguel Boland)\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/picard_MarkDuplicates.cwl",
    "sha": "a5a26de7996a256844ffedeabce8d7cb391cc21e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/picard_MarkDuplicates.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Removal of duplicates from aligned reads.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\n \nbaseCommand: [ picard, MarkDuplicates ]\n\narguments:\n  - OUTPUT=$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)\n  - METRICS_FILE=$(inputs.alignments.nameroot)_markduplicates.metrics\n\nstderr: $(inputs.alignments.nameroot).markduplicates.log\n\ninputs:\n  alignments:\n    doc: SAM or BAM format alignment file\n    format:\n      - edam:format_2573  # SAM\n      - edam:format_2572  # BAM\n    type: File\n    inputBinding:\n      prefix: \"INPUT=\"\n      separate: false\n\n  alignments_are_sorted:\n    type: boolean\n    inputBinding:\n      prefix: ASSUME_SORTED=TRUE\n\n  remove_duplicates:\n    doc: |\n     If true do not write duplicates to the output file instead of writing them\n     with appropriate flags set.\n    type: boolean\n    inputBinding:\n      prefix: REMOVE_DUPLICATES=TRUE\n\n  validation_stringency:\n    type:\n     - 'null'\n     - type: enum\n       symbols:\n        - STRICT\n        - LENIENT\n        - SILENT\n    inputBinding:\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n\n  comment:\n    doc: Comment(s) to include in the output file's header\n    type:\n     - 'null'\n     - type: array\n       items: string\n       inputBinding:\n         prefix: COMMENT=\n         separate: false\n  duplicate_scoring_strategy:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n    inputBinding:\n      prefix: DUPLICATE_SCORING_STRATEGY=\n      separate: false\n  read_name_regex:\n    type: string?\n    inputBinding:\n      prefix: READ_NAME_REGEX=\n      separate: false\n  optical_duplicate_pixel_distance:\n    type: int?\n    default: 100\n    doc: '(0;500)'\n    inputBinding:\n      prefix: OPTICAL_DUPLICATE_PIXEL_DISTANCE=\n      separate: false\n  barcode_tag:\n    type: string?\n    inputBinding:\n      prefix: BARCODE_TAG=\n      separate: false\noutputs:\n  alignments:\n    type: File\n    format: $(inputs.alignments.format)\n    outputBinding:\n      glob: $(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)\n  log:\n    type: stderr\n  metrics:\n    type: File\n    outputBinding:\n      glob: $(inputs.alignments.nameroot)_markduplicates.metrics\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'alignments': {'doc': 'SAM or BAM format alignment file', 'format': ['edam:format_2573', 'edam:format_2572'], 'type': 'File', 'inputBinding': {'prefix': 'INPUT=', 'separate': False}}, 'alignments_are_sorted': {'type': 'boolean', 'inputBinding': {'prefix': 'ASSUME_SORTED=TRUE'}}, 'remove_duplicates': {'doc': 'If true do not write duplicates to the output file instead of writing them\\nwith appropriate flags set.\\n', 'type': 'boolean', 'inputBinding': {'prefix': 'REMOVE_DUPLICATES=TRUE'}}, 'validation_stringency': {'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}], 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}}, 'comment': {'doc': \"Comment(s) to include in the output file's header\", 'type': ['null', {'type': 'array', 'items': 'string', 'inputBinding': {'prefix': 'COMMENT=', 'separate': False}}]}, 'duplicate_scoring_strategy': {'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}], 'inputBinding': {'prefix': 'DUPLICATE_SCORING_STRATEGY=', 'separate': False}}, 'read_name_regex': {'type': 'string?', 'inputBinding': {'prefix': 'READ_NAME_REGEX=', 'separate': False}}, 'optical_duplicate_pixel_distance': {'type': 'int?', 'default': 100, 'doc': '(0;500)', 'inputBinding': {'prefix': 'OPTICAL_DUPLICATE_PIXEL_DISTANCE=', 'separate': False}}, 'barcode_tag': {'type': 'string?', 'inputBinding': {'prefix': 'BARCODE_TAG=', 'separate': False}}}",
    "cwl_outputs": "{'alignments': {'type': 'File', 'format': '$(inputs.alignments.format)', 'outputBinding': {'glob': '$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)'}}, 'log': {'type': 'stderr'}, 'metrics': {'type': 'File', 'outputBinding': {'glob': '$(inputs.alignments.nameroot)_markduplicates.metrics'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'MarkDuplicates']",
    "cwl_arguments": "['OUTPUT=$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)', 'METRICS_FILE=$(inputs.alignments.nameroot)_markduplicates.metrics']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": "Removal of duplicates from aligned reads.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "$(inputs.alignments.nameroot).markduplicates.log",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/picard_SortSam.cwl",
    "sha": "855d069305a6233c0cc1acd8eb13fb86621d600b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/picard_SortSam.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\nrequirements:\n  InlineJavascriptRequirement: {}\n\nbaseCommand: [ picard, SortSam ]\n\narguments:\n  - prefix: OUTPUT=\n    separate: false\n    valueFrom: |\n      ${ if(inputs.sort_order == \"coordinate\") { return (inputs.alignments.nameroot)+\".bam\";} else { return (inputs.alignments.nameroot)+\".sam\"; } }\n\ninputs:\n  alignments:\n    type: File\n    inputBinding:\n      prefix: INPUT=\n      separate: false\n\n  sort_order:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n    default: coordinate\n    doc: 'coordinate (bam) or queryname (sam)'\n    inputBinding:\n      prefix: SORT_ORDER=\n      separate: false\n\n  validation_stringency:\n    default: LENIENT\n    doc: Validation stringency for all SAM files read by this program.  Setting stringency\n      to SILENT can improve performance when processing a BAM file in which variable-length\n      data (read, qualities, tags) do not otherwise need to be decoded.\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - STRICT\n      - LENIENT\n      - SILENT\n    inputBinding:\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n\noutputs:\n  sorted_alignments:\n    type: File\n    format: |-\n      ${ if(inputs.sort_order == \"coordinate\") { return \"http://edamontology.org/format_2572\";} else { return \"http://edamontology.org/format_2573\"; } }\n    outputBinding:\n      glob: '*.*am'\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'alignments': {'type': 'File', 'inputBinding': {'prefix': 'INPUT=', 'separate': False}}, 'sort_order': {'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}], 'default': 'coordinate', 'doc': 'coordinate (bam) or queryname (sam)', 'inputBinding': {'prefix': 'SORT_ORDER=', 'separate': False}}, 'validation_stringency': {'default': 'LENIENT', 'doc': 'Validation stringency for all SAM files read by this program.  Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded.', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}], 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}}}",
    "cwl_outputs": "{'sorted_alignments': {'type': 'File', 'format': '${ if(inputs.sort_order == \"coordinate\") { return \"http://edamontology.org/format_2572\";} else { return \"http://edamontology.org/format_2573\"; } }', 'outputBinding': {'glob': '*.*am'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'SortSam']",
    "cwl_arguments": "[{'prefix': 'OUTPUT=', 'separate': False, 'valueFrom': '${ if(inputs.sort_order == \"coordinate\") { return (inputs.alignments.nameroot)+\".bam\";} else { return (inputs.alignments.nameroot)+\".sam\"; } }\\n'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_faidx.cwl",
    "sha": "71b673244082637c43512f8609cdb6589c656b28",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_faidx.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.2-0\nrequirements:\n  InitialWorkDirRequirement:\n    listing: [ $(inputs.sequences) ]\n\nbaseCommand: [ samtools, faidx ]\n\ninputs:\n  sequences:\n    type: File\n    doc: Input FASTA file\n    format: edam:format_1929\n\narguments:\n   - $(inputs.sequences.basename)\n\noutputs:\n  sequences_with_index:\n    type: File\n    format: $(inputs.sequences.format)\n    secondaryFiles:\n     - .fai\n    outputBinding:\n      glob: $(inputs.sequences.basename)\n  sequences_index:\n    type: File\n    outputBinding:\n      glob: $(inputs.sequences.basename).fai\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'sequences': {'type': 'File', 'doc': 'Input FASTA file', 'format': 'edam:format_1929'}}",
    "cwl_outputs": "{'sequences_with_index': {'type': 'File', 'format': '$(inputs.sequences.format)', 'secondaryFiles': ['.fai'], 'outputBinding': {'glob': '$(inputs.sequences.basename)'}}, 'sequences_index': {'type': 'File', 'outputBinding': {'glob': '$(inputs.sequences.basename).fai'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/samtools:1.2-0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'faidx']",
    "cwl_arguments": "['$(inputs.sequences.basename)']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.sequences)']}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_index.cwl",
    "sha": "40ca889caec96fa1d5a6ee7f9147cade35b9515b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Indexing BAM.\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing: \n      - $(inputs.bam_sorted)\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [\"samtools\", \"index\"]\narguments:\n  - valueFrom: -b  # specifies that index is created in bai format\n    position: 1\n\ninputs:\n  bam_sorted:\n    doc: sorted bam input file\n    type: File\n    inputBinding:\n      position: 2\n\noutputs:\n  bam_sorted_indexed:\n    type: File\n    secondaryFiles: .bai\n    outputBinding:\n      glob: $(inputs.bam_sorted.basename)\n      \n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam_sorted': {'doc': 'sorted bam input file', 'type': 'File', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'bam_sorted_indexed': {'type': 'File', 'secondaryFiles': '.bai', 'outputBinding': {'glob': '$(inputs.bam_sorted.basename)'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'index']",
    "cwl_arguments": "[{'valueFrom': '-b', 'position': 1}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.bam_sorted)']}}",
    "cwl_doc": "Indexing BAM.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_sort.cwl",
    "sha": "36f47b4a01ceff3c15f1b9a28b324fe128a520e0",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_sort.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: Sort a bam file by read names.\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 4\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [\"samtools\", \"sort\"]\narguments:\n  - valueFrom: $(runtime.cores)\n    prefix: -@\n  - prefix: -m\n    valueFrom: ${ return(parseInt(runtime.ram/runtime.cores-100).toString() + \"M\") }\n    position: 1\n    # specifies the allowed maximal memory usage per thread before\n    # samtools start to outsource memory to temporary files\n\ninputs:\n  bam_unsorted:\n    doc: aligned reads to be checked in sam or bam format\n    type: File\n    format: edam:format_2572\n    inputBinding:\n      position: 2\n  by_name:\n    doc: If true, will sort by name, otherwise will sort by genomic position\n    type: boolean\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -n\n\nstdout: $(inputs.bam_unsorted.basename)\n\noutputs:\n  bam_sorted:\n    type: stdout\n    format: edam:format_2572 \n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam_unsorted': {'doc': 'aligned reads to be checked in sam or bam format', 'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {'position': 2}}, 'by_name': {'doc': 'If true, will sort by name, otherwise will sort by genomic position', 'type': 'boolean', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-n'}}}",
    "cwl_outputs": "{'bam_sorted': {'type': 'stdout', 'format': 'edam:format_2572'}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 4, 'ramMin': 15000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'sort']",
    "cwl_arguments": "[{'valueFrom': '$(runtime.cores)', 'prefix': '-@'}, {'prefix': '-m', 'valueFrom': '${ return(parseInt(runtime.ram/runtime.cores-100).toString() + \"M\") }', 'position': 1}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Sort a bam file by read names.",
    "cwl_stdout": "$(inputs.bam_unsorted.basename)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_stats.cwl",
    "sha": "bb226314e690f8758157e4b51dac9fec54286fcd",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_stats.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand: [samtools, stats]\nrequirements:\n- class: DockerRequirement\n  dockerPull: biocontainers/samtools:v1.7.0_cv3\n\ninputs:\n  input_file:\n    type: File\n    format: \n      - edam:format_2572  # BAM\n      - edam:format_2573  # SAM\n      - edam:format_3462  # CRAM\n    inputBinding:\n      position: 100\n  coverage:\n    type:\n      - 'null'\n      - type: record\n        name: coverage_parameters\n        fields:\n          min_cov:\n            type: int\n          max_cov:\n            type: int\n          step_cov:\n            type: int\n    inputBinding:\n      prefix: --coverage\n    doc: \"Set coverage distribution to the specified range (MIN, MAX, STEP all given as integers) [1,1000,1]\"\n  remove_dups:\n    type: boolean?\n    doc: \"Exclude from statistics reads marked as duplicates\"\n    inputBinding:\n      prefix: --remove_dups\n\n  required_flag:\n    type:\n      - string\n      - int\n      - \"null\"\n    default: 0\n    doc: \" STR|INT Required flag, 0 for unset. See also `samtools flags` [0] \"\n    inputBinding:\n      prefix: -f\n\n  filtering_flag:\n    type:\n      - string\n      - int\n      - \"null\"\n    default: 0\n    doc: \"STR|INT Filtering flag, 0 for unset. See also `samtools flags` [0] \"\n    inputBinding:\n      prefix: -F\n\n  GC_depth:\n    type: float?\n    doc: \"the size of GC-depth bins (decreasing bin size increases memory requirement) [2e4] \"\n    inputBinding:\n      prefix: --GC-depth\n\n  max_insert_size:\n    type: int?\n    doc: \"Maximum insert size [8000]\"\n    inputBinding:\n      prefix: -i\n\n  listed_group:\n    type: string?\n    doc: \"Include only listed read group or sample name [] \"\n    inputBinding:\n      prefix: --id\n\n  read_length:\n    type: int?\n    doc: \"Include in the statistics only reads with the given read length [-1]\"\n    inputBinding:\n      prefix: -l\n\n  most_inserts:\n    type: float?\n    doc: \"Report only the main part of inserts [0.99] \"\n    inputBinding:\n      prefix: -m\n\n  split_prefix:\n    type: string?\n    doc:  \"A path or string prefix to prepend to filenames output when creating categorised statistics files with -S/--split. [input filename]\"\n    inputBinding:\n      prefix: -P\n\n  trim_quality:\n    type: int?\n    doc: \"The BWA trimming parameter [0] \"\n    inputBinding:\n      prefix: -q\n\n  ref_seq:\n    type: File?\n    doc: \"Reference sequence (required for GC-depth and mismatches-per-cycle calculation). [] \"\n    inputBinding:\n      prefix: -r\n\n  split:\n    type: string?\n    doc: \"In addition to the complete statistics, also output categorised statistics based on the tagged field TAG (e.g., use --split RG to split into read groups).    Categorised statistics are written to files named <prefix>_<value>.bamstat, where prefix is as given by --split-prefix (or the input filename by default) and value has been encountered as the specified tagged field's value in one or more alignment records. \"\n    inputBinding:\n      prefix: --split\n\n  target_regions:\n    type: File?\n    doc: \"Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive. []\"\n    inputBinding:\n      prefix: --target-regions\n  sparse:\n    type: boolean?\n    doc: \"Suppress outputting IS rows where there are no insertions.\"\n    inputBinding:\n      prefix: --sparse\n  remove_overlaps:\n    type: boolean?\n    doc: \"Remove overlaps of paired-end reads from coverage and base count computations. \"\n    inputBinding:\n      prefix: --remove-overlaps\n  cov_threshold:\n    type: int?\n    doc: \"Only bases with coverage above this value will be included in the target percentage computation [0] \"\n    inputBinding:\n      prefix: -g\n\narguments:\n  - prefix: --threads\n    valueFrom: $(runtime.cores)  \n    \n# -X\n#     If this option is set, it will allows user to specify customized index file location(s) if the data folder does not contain any index file. Example usage: samtools stats [options] -X /data_folder/data.bam /index_folder/data.bai chrM:1-10\n\noutputs:\n  stats:\n    type: File\n    outputBinding:\n      glob: $(inputs.input_file.nameroot).stats.txt\nstdout: $(inputs.input_file.nameroot).stats.txt\n\n$namespaces: { edam: http://edamontology.org/, iana: https://www.iana.org/assignments/media-types/ }\n$schemas:\n  - 'http://edamontology.org/EDAM_1.18.owl'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'input_file': {'type': 'File', 'format': ['edam:format_2572', 'edam:format_2573', 'edam:format_3462'], 'inputBinding': {'position': 100}}, 'coverage': {'type': ['null', {'type': 'record', 'name': 'coverage_parameters', 'fields': {'min_cov': {'type': 'int'}, 'max_cov': {'type': 'int'}, 'step_cov': {'type': 'int'}}}], 'inputBinding': {'prefix': '--coverage'}, 'doc': 'Set coverage distribution to the specified range (MIN, MAX, STEP all given as integers) [1,1000,1]'}, 'remove_dups': {'type': 'boolean?', 'doc': 'Exclude from statistics reads marked as duplicates', 'inputBinding': {'prefix': '--remove_dups'}}, 'required_flag': {'type': ['string', 'int', 'null'], 'default': 0, 'doc': ' STR|INT Required flag, 0 for unset. See also `samtools flags` [0] ', 'inputBinding': {'prefix': '-f'}}, 'filtering_flag': {'type': ['string', 'int', 'null'], 'default': 0, 'doc': 'STR|INT Filtering flag, 0 for unset. See also `samtools flags` [0] ', 'inputBinding': {'prefix': '-F'}}, 'GC_depth': {'type': 'float?', 'doc': 'the size of GC-depth bins (decreasing bin size increases memory requirement) [2e4] ', 'inputBinding': {'prefix': '--GC-depth'}}, 'max_insert_size': {'type': 'int?', 'doc': 'Maximum insert size [8000]', 'inputBinding': {'prefix': '-i'}}, 'listed_group': {'type': 'string?', 'doc': 'Include only listed read group or sample name [] ', 'inputBinding': {'prefix': '--id'}}, 'read_length': {'type': 'int?', 'doc': 'Include in the statistics only reads with the given read length [-1]', 'inputBinding': {'prefix': '-l'}}, 'most_inserts': {'type': 'float?', 'doc': 'Report only the main part of inserts [0.99] ', 'inputBinding': {'prefix': '-m'}}, 'split_prefix': {'type': 'string?', 'doc': 'A path or string prefix to prepend to filenames output when creating categorised statistics files with -S/--split. [input filename]', 'inputBinding': {'prefix': '-P'}}, 'trim_quality': {'type': 'int?', 'doc': 'The BWA trimming parameter [0] ', 'inputBinding': {'prefix': '-q'}}, 'ref_seq': {'type': 'File?', 'doc': 'Reference sequence (required for GC-depth and mismatches-per-cycle calculation). [] ', 'inputBinding': {'prefix': '-r'}}, 'split': {'type': 'string?', 'doc': \"In addition to the complete statistics, also output categorised statistics based on the tagged field TAG (e.g., use --split RG to split into read groups).    Categorised statistics are written to files named <prefix>_<value>.bamstat, where prefix is as given by --split-prefix (or the input filename by default) and value has been encountered as the specified tagged field's value in one or more alignment records. \", 'inputBinding': {'prefix': '--split'}}, 'target_regions': {'type': 'File?', 'doc': 'Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive. []', 'inputBinding': {'prefix': '--target-regions'}}, 'sparse': {'type': 'boolean?', 'doc': 'Suppress outputting IS rows where there are no insertions.', 'inputBinding': {'prefix': '--sparse'}}, 'remove_overlaps': {'type': 'boolean?', 'doc': 'Remove overlaps of paired-end reads from coverage and base count computations. ', 'inputBinding': {'prefix': '--remove-overlaps'}}, 'cov_threshold': {'type': 'int?', 'doc': 'Only bases with coverage above this value will be included in the target percentage computation [0] ', 'inputBinding': {'prefix': '-g'}}}",
    "cwl_outputs": "{'stats': {'type': 'File', 'outputBinding': {'glob': '$(inputs.input_file.nameroot).stats.txt'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'stats']",
    "cwl_arguments": "[{'prefix': '--threads', 'valueFrom': '$(runtime.cores)'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.input_file.nameroot).stats.txt",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/samtools_view_filter.cwl",
    "sha": "b6662414399cd0446c927848c423c4440b7fe224",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_view_filter.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [samtools, view]\ninputs:\n  bam:\n    format: edam:format_2572\n    doc: aligned reads to be checked in bam format\n    type: File\n    inputBinding:\n      position: 10\n\n  count:\n    type: boolean?\n    default: true\n    doc: \"Instead of printing the alignments, only count them and print the total number.\"\n    inputBinding:\n      position: 1\n      prefix: -c\n  exclude_unmapped:\n    type: boolean?\n    default: true\n    inputBinding:\n      valueFrom: \"4\"\n      prefix: -F\n      position: 1\n\n  is_paired_end:\n    doc: if paired end, only properly paired reads pass\n    type: boolean\n    default: true\n\n  min_mapping_quality:\n    doc: Reads with a mapping quality below this will be excluded\n    type: int?\n    default: 20\n    inputBinding:\n      position: 1\n      prefix: -q\n\n\n  header:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - include\n          - exclude\n          - only\n    default: include\n    inputBinding:\n        valueFrom: |\n            ${\n              if (self==\"include\"){\n                return \"-h\";\n              }\n              if (self==\"only\"){\n                return \"-H\";\n              }\n              else {\n                return null;\n              }\n            }\n\noutputs:\n  bam_filtered:\n    format: edam:format_2572\n    type: stdout\n\nstdout: $(inputs.bam.nameroot)_filt.bam\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam': {'format': 'edam:format_2572', 'doc': 'aligned reads to be checked in bam format', 'type': 'File', 'inputBinding': {'position': 10}}, 'count': {'type': 'boolean?', 'default': True, 'doc': 'Instead of printing the alignments, only count them and print the total number.', 'inputBinding': {'position': 1, 'prefix': '-c'}}, 'exclude_unmapped': {'type': 'boolean?', 'default': True, 'inputBinding': {'valueFrom': '4', 'prefix': '-F', 'position': 1}}, 'is_paired_end': {'doc': 'if paired end, only properly paired reads pass', 'type': 'boolean', 'default': True}, 'min_mapping_quality': {'doc': 'Reads with a mapping quality below this will be excluded', 'type': 'int?', 'default': 20, 'inputBinding': {'position': 1, 'prefix': '-q'}}, 'header': {'type': ['null', {'type': 'enum', 'symbols': ['include', 'exclude', 'only']}], 'default': 'include', 'inputBinding': {'valueFrom': '${\\n  if (self==\"include\"){\\n    return \"-h\";\\n  }\\n  if (self==\"only\"){\\n    return \"-H\";\\n  }\\n  else {\\n    return null;\\n  }\\n}\\n'}}}",
    "cwl_outputs": "{'bam_filtered': {'format': 'edam:format_2572', 'type': 'stdout'}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 10000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'view']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.bam.nameroot)_filt.bam",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/snpEff_build_ann.cwl",
    "sha": "5c4a9881afcb6be22f4111b1cbbff624afc7304b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/snpEff_build_ann.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nbaseCommand: [bash, commands.sh]\n\ninputs:\n  - id: importGenome\n    type: boolean\n    doc: 'import your own genome (genbank)'\n  - id: genome_reference\n    type: string\n\n  - id: bankfile\n    type: File?\n    doc: 'import your own genome'\n\n  - id: sequence\n    type: File\n\n  - id: inputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n    default: vcf\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n    default: vcf\n\n  - id: udLength\n    type: int\n    doc: 'Set upstream downstream interval length (in bases). 0 base: No upstream / downstream intervals'\n\n## reports:\n  - id: html_report\n    type: boolean?\n\n  - id: csvFile\n    type: boolean?\n  - id: noStats\n    type: boolean?\n\n## Annotations options:\n  - id: formatEff\n    type: boolean?\n    doc: \"Use 'EFF' field compatible with older versions (instead of 'ANN')\"\n  - id: classic\n    type: boolean?\n    doc: \"Use Classic Effect names and amino acid variant annotations (NON_SYNONYMOUS_CODING vs missense_variant and G180R vs p.Gly180Arg/c.538G>C)\"\n  - id: sequenceOntology\n    type: boolean?\n    doc: \"Override classic and use Sequence Ontolgy terms for effects (missense_variant vs NON_SYNONYMOUS_CODING)\"\n  - id: hgvs\n    type: boolean?\n    default: true\n    doc: \"Override classic and use HGVS annotations for amino acid annotations (p.Gly180Arg/c.538G>C vs G180R)\"\n  - id: noShiftHgvs\n    type: boolean?\n    doc: \"Do not shift variants according to HGVS notation (most 3prime end)\"\n  - id: noHgvs\n    type: boolean?\n    doc: \"Do not add HGVS annotations\"\n  - id: geneId\n    type: boolean?\n    doc: \"Use gene ID instead of gene name (VCF output). Default: false\"\n  - id: lof\n    type: boolean?\n    doc: \"Add loss of function (LOF) and nonsense mediated decay (NMD) tags\"\n  - id: noLof\n    type: boolean?\n    doc: \"Do not add LOF and NMD annotations\"\n  - id: cancer\n    type: boolean?\n    inputBinding:\n      prefix: -cancer\n    doc: \"Perform 'cancer' comparisons (somatic vs. germline)\"\n  - id: cancerSamples\n    type: File?\n    doc: \"<file> : Two column TXT file defining 'oringinal \\t derived' samples.\"\n  - id: oicr\n    type: boolean?\n    doc: \"Add OICR tag in VCF file. Default: false\"\n\n## Database options:\n\n  - id: canon\n    type: boolean?\n    doc: \"Only use canonical transcripts\"\n  - id: motif\n    type: boolean?\n    doc: \"Annotate using motifs (requires Motif database).\"\n  - id: noMotif\n    type: boolean?\n    doc: \"Disable motif annotations\"\n  - id: noNextProt\n    type: boolean?\n    doc: \"Disable NextProt annotations\"\n  - id: nextProt\n    type: boolean?\n    doc: \"Annotate using NextProt (requires NextProt database).\"\n  - id: noGenome\n    type: boolean?\n    doc: \"Do not load any genomic database (e.g. annotate using custom files).\"\n  - id: onlyProtein\n    type: boolean?\n    doc: \"Only use protein coding transcripts. Default: false\"\n  - id: transcripts\n    type: File?\n    doc: '<file.txt>   Only use the transcripts in this file. Format: One transcript ID per line.'\n\n  # \u00e0 rendre facultatif:\n  - id: interval\n    type: File[]?\n      #- type: null\n      #type: array\n      #items: File\n    doc: 'Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).'\n  - id: spliceRegionExonSize\n    type: int?\n    default: 3\n  - id: spliceRegionIntronMax\n    type: int?\n    default: 8\n  - id: spliceRegionIntronMin\n    type: int?\n    default: 8\n  - id: spliceSiteSize\n    type: int?\n    default: 2\n  - id: onlyReg\n    type: boolean?\n    doc: \"Only use regulation tracks.\"\n  - id: strict\n    type: boolean?\n    doc: \"Only use 'validated' transcripts (i.e. sequence has been checked). Default: false\"\n## Results filter options :\n\n  - id: filterInterval\n    type: File[]?\n    doc: \"Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)\"\n  - id: no_downstream\n    type: boolean?\n    doc: \" Do not show DOWNSTREAM changes\"\n  - id: no_intergenic\n    type: boolean?\n    doc: \"Do not show INTERGENIC changes\"\n  - id: no_intron\n    type: boolean?\n    doc: \"Do not show INTRON changes\"\n  - id: no_upstream\n    type: boolean?\n    doc: \"Do not show UPSTREAM changes\"\n  - id: no_utr\n    type: boolean?\n    doc: \"Do not show 5_PRIME_UTR or 3_PRIME_UTR changes\"\n  - id: no_EffectType\n    type: boolean?\n    doc: \"Do not show 'EffectType'. This option can be used several times.\"\n\noutputs:\n  - id: snpeff_output\n    type: File?\n    # format $(inputs.outputFormat)\n    outputBinding:\n      glob: \"*.$(inputs.outputFormat)\"\n  - id: statsFile\n    type: File?\n    outputBinding:\n      glob: \"*.html\"\n  - id: csvFile\n    type: File?\n    outputBinding:\n      glob: '*.csv'\n  - id: genes\n    type: File?\n    outputBinding:\n      glob: '*.txt'\nrequirements:\n  - class: DockerRequirement\n    dockerPull: biocontainers/snpeff:v4.1k_cv3\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: \"$({class: 'Directory', listing: []})\"\n        entryname: $(inputs.genome_reference)\n        writable: true\n      - entryname: $(inputs.genome_reference)/genes.gbk\n        entry: $(inputs.bankfile)\n      - entryname: commands.sh\n        entry: |-\n          #!/bin/bash\n          ###########################\n          #cd /home/biodocker/bin/snpEff\n          cp /home/biodocker/bin/snpEff/snpEff.config .\n          ls -R\n\n          if [ $(inputs.importGenome) ]\n          then\n              echo $(inputs.genome_reference).genome=$(inputs.genome_reference) >> snpEff.config\n              snpEff build -v -c snpEff.config -dataDir . -configOption $(inputs.genome_reference).genome=$(inputs.genome_reference) -genbank $(inputs.genome_reference)\n              grep covid19 snpEff.config\n          fi\n\n          ${\n          var command=\n          \"snpEff ann -v -c snpEff.config -dataDir .  -i \"+ (inputs.inputFormat)+\" -o \"+(inputs.outputFormat)+\" -upDownStreamLen \"+(inputs.udLength)+\" -spliceRegionExonSize \"+(inputs.spliceRegionExonSize)+\" -spliceRegionIntronMax  \"+(inputs.spliceRegionIntronMax)+\" -spliceRegionIntronMin \"+(inputs.spliceRegionIntronMin)+\" -spliceSiteSize \"+(inputs.spliceSiteSize)\n\n          if (inputs.csvFile){\n            command+= \" -csvFile \"\n          }\n          if (inputs.html_report){\n            command+=\" -s \"\n          }\n          if (inputs.noStats){\n            command+=\" -noStats \"\n          }\n          if (inputs.formatEff){\n            command+=\" -formatEff \"\n          }\n          if (inputs.classic){\n            command+=\" -classic \"\n          }\n          if (inputs.sequenceOntology){\n            command+=\" -sequenceOntology \"\n          }\n          if (inputs.hgvs){\n            command+=\" -hgvs \"\n          }\n          if (inputs.noShiftHgvs){\n            command+=\" -noShiftHgvs \"\n          }\n          if (inputs.noHgvs){\n            command+=\" -noHgvs \"\n          }\n          if (inputs.geneId){\n            command+= \" -geneId\"\n          }\n          if (inputs.lof){\n            command+=\" -lof \"\n          }\n          if (inputs.noLof){\n            command+=\" -noLof \"\n          }\n          if (inputs.cancer){\n            command+=\" -cancer \"\n          }\n          if (inputs.oicr){\n            command+=\" -oicr \"\n          }\n          if (inputs.cancerSamples!=null){\n            command+= \" -cancerSamples \"+(inputs.cancerSamples.path)\n          }\n          if (inputs.canon){\n            command+= \" -canon \"\n          }\n          if (inputs.motif){\n            command+= \" -motif \"\n          }\n          if (inputs.noMotif){\n            command+= \" -noMotif \"\n          }\n          if (inputs.noNextProt){\n            command+=\" -noNextProt \"\n          }\n          if (inputs.nextProt){\n            command+=\" -nextProt \"\n          }\n          if (inputs.noGenome){\n            command+=\" -noGenome \"\n          }\n          if (inputs.onlyProtein){\n            command+=\" -onlyProtein \"\n          }\n          if (inputs.onlyReg){\n            command+=\" -onlyReg \"\n          }\n          if (inputs.strict){\n            command+=\" -strict \"\n          }\n          if (inputs.no_downstream){\n            command+= \" -no-downstream \"\n          }\n          if (inputs.no_intergenic){\n            command+= \" -no-intergenic \"\n          }\n          if (inputs.no_intron){\n            command+= \" -no-intron \"\n          }\n          if (inputs.no_upstream){\n            command+= \" -no-upstream \"\n          }\n          if (inputs.no_utr){\n            command+= \" -no-utr \"\n          }\n          if (inputs.no_EffectType){\n            command+= \" -no EffectType \"\n          }\n          if (inputs.transcripts!=null){\n           for (var i=0; i< inputs.transcripts.length; i++){\n             command+= \" -onlyTr \"+inputs.transcripts[i].path\n           }\n          }\n          if (inputs.filterInterval!=null){\n           for (var i=0; i< inputs.filterInterval.length; i++){\n             command+= \" -filterInterval \"+inputs.filterInterval[i].path\n           }\n          }\n          if (inputs.interval!=null){\n           for (var i=0; i< inputs.interval.length; i++){\n             command+= \" -interval \"+inputs.interval[i].path\n           }\n          }\n          command+=(inputs.genome_reference)+\" \"+(inputs.sequence.path)+\" > \"+(inputs.sequence.nameroot)+\".ann.\"+(inputs.outputFormat)\n\n          return command;\n          }\n          ls -R\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'importGenome', 'type': 'boolean', 'doc': 'import your own genome (genbank)'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'bankfile', 'type': 'File?', 'doc': 'import your own genome'}, {'id': 'sequence', 'type': 'File'}, {'id': 'inputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed']}], 'default': 'vcf'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn']}], 'default': 'vcf'}, {'id': 'udLength', 'type': 'int', 'doc': 'Set upstream downstream interval length (in bases). 0 base: No upstream / downstream intervals'}, {'id': 'html_report', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?', 'doc': \"Use 'EFF' field compatible with older versions (instead of 'ANN')\"}, {'id': 'classic', 'type': 'boolean?', 'doc': 'Use Classic Effect names and amino acid variant annotations (NON_SYNONYMOUS_CODING vs missense_variant and G180R vs p.Gly180Arg/c.538G>C)'}, {'id': 'sequenceOntology', 'type': 'boolean?', 'doc': 'Override classic and use Sequence Ontolgy terms for effects (missense_variant vs NON_SYNONYMOUS_CODING)'}, {'id': 'hgvs', 'type': 'boolean?', 'default': True, 'doc': 'Override classic and use HGVS annotations for amino acid annotations (p.Gly180Arg/c.538G>C vs G180R)'}, {'id': 'noShiftHgvs', 'type': 'boolean?', 'doc': 'Do not shift variants according to HGVS notation (most 3prime end)'}, {'id': 'noHgvs', 'type': 'boolean?', 'doc': 'Do not add HGVS annotations'}, {'id': 'geneId', 'type': 'boolean?', 'doc': 'Use gene ID instead of gene name (VCF output). Default: false'}, {'id': 'lof', 'type': 'boolean?', 'doc': 'Add loss of function (LOF) and nonsense mediated decay (NMD) tags'}, {'id': 'noLof', 'type': 'boolean?', 'doc': 'Do not add LOF and NMD annotations'}, {'id': 'cancer', 'type': 'boolean?', 'inputBinding': {'prefix': '-cancer'}, 'doc': \"Perform 'cancer' comparisons (somatic vs. germline)\"}, {'id': 'cancerSamples', 'type': 'File?', 'doc': \"<file> : Two column TXT file defining 'oringinal \\t derived' samples.\"}, {'id': 'oicr', 'type': 'boolean?', 'doc': 'Add OICR tag in VCF file. Default: false'}, {'id': 'canon', 'type': 'boolean?', 'doc': 'Only use canonical transcripts'}, {'id': 'motif', 'type': 'boolean?', 'doc': 'Annotate using motifs (requires Motif database).'}, {'id': 'noMotif', 'type': 'boolean?', 'doc': 'Disable motif annotations'}, {'id': 'noNextProt', 'type': 'boolean?', 'doc': 'Disable NextProt annotations'}, {'id': 'nextProt', 'type': 'boolean?', 'doc': 'Annotate using NextProt (requires NextProt database).'}, {'id': 'noGenome', 'type': 'boolean?', 'doc': 'Do not load any genomic database (e.g. annotate using custom files).'}, {'id': 'onlyProtein', 'type': 'boolean?', 'doc': 'Only use protein coding transcripts. Default: false'}, {'id': 'transcripts', 'type': 'File?', 'doc': '<file.txt>   Only use the transcripts in this file. Format: One transcript ID per line.'}, {'id': 'interval', 'type': 'File[]?', 'doc': 'Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).'}, {'id': 'spliceRegionExonSize', 'type': 'int?', 'default': 3}, {'id': 'spliceRegionIntronMax', 'type': 'int?', 'default': 8}, {'id': 'spliceRegionIntronMin', 'type': 'int?', 'default': 8}, {'id': 'spliceSiteSize', 'type': 'int?', 'default': 2}, {'id': 'onlyReg', 'type': 'boolean?', 'doc': 'Only use regulation tracks.'}, {'id': 'strict', 'type': 'boolean?', 'doc': \"Only use 'validated' transcripts (i.e. sequence has been checked). Default: false\"}, {'id': 'filterInterval', 'type': 'File[]?', 'doc': 'Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)'}, {'id': 'no_downstream', 'type': 'boolean?', 'doc': ' Do not show DOWNSTREAM changes'}, {'id': 'no_intergenic', 'type': 'boolean?', 'doc': 'Do not show INTERGENIC changes'}, {'id': 'no_intron', 'type': 'boolean?', 'doc': 'Do not show INTRON changes'}, {'id': 'no_upstream', 'type': 'boolean?', 'doc': 'Do not show UPSTREAM changes'}, {'id': 'no_utr', 'type': 'boolean?', 'doc': 'Do not show 5_PRIME_UTR or 3_PRIME_UTR changes'}, {'id': 'no_EffectType', 'type': 'boolean?', 'doc': \"Do not show 'EffectType'. This option can be used several times.\"}]",
    "cwl_outputs": "[{'id': 'snpeff_output', 'type': 'File?', 'outputBinding': {'glob': '*.$(inputs.outputFormat)'}}, {'id': 'statsFile', 'type': 'File?', 'outputBinding': {'glob': '*.html'}}, {'id': 'csvFile', 'type': 'File?', 'outputBinding': {'glob': '*.csv'}}, {'id': 'genes', 'type': 'File?', 'outputBinding': {'glob': '*.txt'}}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', 'commands.sh']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/snpSift_extract.cwl",
    "sha": "1ac98a628598fb8cc3a0623632abf1d101929e55",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/snpSift_extract.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/snpsift:4.3.1t--2\n    \ndoc:   \"SnpSift Extract Fields <http://snpeff.sourceforge.net/SnpSift.html#Extract> selects columns from a VCF dataset into a Tab-delimited format.\"\n\nstdout: $(inputs.input_vcf.nameroot).tsv\nbaseCommand: [SnpSift, -Xmx6G, extractFields]\narguments: \n  - valueFrom: \\\"$(inputs.empty_text)\\\"\n    prefix: -e\n    position: 4\ninputs:\n  - id: input_vcf\n    type: File \n    inputBinding:\n      position: 1\n\n  - id: extractFields\n    #type: string?\n    type: string[]?\n    default: \"CHROM POS ID REF ALT FILTER\"\n    doc: \"Separated by spaces\"\n    inputBinding:\n      position: 2\n\n      \n  # - id: one_effect_per_line\n  #   type: boolean?\n  #   default: true\n  #   doc: \"When variants have more than one effect, lists one effect per line, while all other parameters in the line are repeated across mutiple lines\"\n\n  - id: separator\n    type: string?\n    doc: \"Separate multiple fields in one column with this character, e.g. a comma, rather than a column for each of the multiple values\"\n    inputBinding:\n      prefix: -s\n      position: 3\n      \n  - id: empty_text\n    type: string?\n    doc: \"Represent empty fields with this value, rather than leaving them blank\"\n   # inputBinding:\n   #   prefix: -e\n   #   position: 4\n\noutputs: \n  - id: out\n    type: stdout\nrequirements:\n  - class: InlineJavascriptRequirement\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'input_vcf', 'type': 'File', 'inputBinding': {'position': 1}}, {'id': 'extractFields', 'type': 'string[]?', 'default': 'CHROM POS ID REF ALT FILTER', 'doc': 'Separated by spaces', 'inputBinding': {'position': 2}}, {'id': 'separator', 'type': 'string?', 'doc': 'Separate multiple fields in one column with this character, e.g. a comma, rather than a column for each of the multiple values', 'inputBinding': {'prefix': '-s', 'position': 3}}, {'id': 'empty_text', 'type': 'string?', 'doc': 'Represent empty fields with this value, rather than leaving them blank'}]",
    "cwl_outputs": "[{'id': 'out', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/snpsift:4.3.1t--2'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['SnpSift', '-Xmx6G', 'extractFields']",
    "cwl_arguments": "[{'valueFrom': '\\\\\"$(inputs.empty_text)\\\\\"', 'prefix': '-e', 'position': 4}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "SnpSift Extract Fields <http://snpeff.sourceforge.net/SnpSift.html#Extract> selects columns from a VCF dataset into a Tab-delimited format.",
    "cwl_stdout": "$(inputs.input_vcf.nameroot).tsv",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/variation_PE.cwl",
    "sha": "d1917269980f0c3db4a4cad18fefa742082aaae8",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/variation_PE.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: var_pe\nlabel: var-PE\n$namespaces:\n  edam: 'http://edamontology.org/'\ninputs:\n  - id: reads_reverse\n    type: File[]\n    format:\n      - 'edam:format_1930'\n      - 'edam:format_1931'\n\n  - id: reads_forward\n    type: File[]\n    format:\n      - 'edam:format_1930'\n      - 'edam:format_1931'\n  - id: reference_in\n    type: File\n\n   #### 1-  fastp options:\n  - id: unqualified_phred_quality\n    type: int?\n  - id: threads\n    type: int?\n  - id: qualified_phred_quality\n    type: int?\n  - id: min_length_required\n    type: int?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: base_correction\n    type: boolean?\n\n   #### picard__sort_sam options:\n  - id: sort_order\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n  - id: validation_stringency\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n\n# samtools_view\n  - id: exclude_unmapped\n    type: boolean?\n  - id: count\n    type: boolean\n\n   #### picard__mark_duplicates options:\n  - id: alignments_are_sorted\n    type: boolean\n  - id: remove_duplicates\n    type: boolean\n  - id: validation_stringency_1\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n  - id: comment\n    type: 'string[]?'\n  - id: duplicate_scoring_strategy\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n  - id: optical_duplicate_pixel_distance\n    type: int?\n  - id: barcode_tag\n    type: string?\n\n   ####lofreq_viterbi options:\n  - id: keepflags\n    type: boolean?\n  - id: defqual\n    type: int?\n  - id: bq2_handling\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - keep\n          - dynamic\n          - fixed\n\n   #### lofreq_cal_variants options:\n  - id: bed\n    type: File?\n  - id: bonferroni\n    type: string?\n  - id: call_indels\n    type: boolean?\n  - id: def_alt_bq\n    type: int?\n  - id: def_alt_jq\n    type: int?\n  - id: del_baq\n    type: boolean?\n  - id: enable_source_qual\n    type: boolean?\n  - id: ignore_vcf\n    type: 'File[]?'\n  - id: illumina_1_3\n    type: boolean?\n  - id: max_depth_cov\n    type: int?\n  - id: max_mapping_quality\n    type: int?\n  - id: min_bq\n    type: int?\n  - id: min_cov\n    type: int?\n  - id: min_mq\n    type: int?\n  - id: use_orphan\n    type: boolean?\n  - id: threads_lf_call\n    type: int?\n  - id: replace_non_match\n    type: int?\n  - id: region\n    type: string?\n  - id: pvalue_cutoff\n    type: float?\n  - id: only_indels\n    type: boolean?\n  - id: no_idaq\n    type: boolean?\n  - id: no_default_filter\n    type: boolean?\n  - id: no_baq\n    type: boolean?\n  - id: no_mapping_quality\n    type: boolean?\n  - id: no_ext_base_alignment_quality\n    type: boolean?\n  - id: min_jq\n    type: int?\n  - id: min_alt_jq\n    type: int?\n  - id: min_alt_bq\n    type: int?\n\n   #### SnpEff build & ann:\n  - id: genome_reference\n    type: string\n  - id: udLength\n    type: int\n  - id: transcripts\n    type: File?\n  - id: strict\n    type: boolean?\n  - id: spliceSiteSize\n    type: int?\n  - id: spliceRegionIntronMin\n    type: int?\n  - id: spliceRegionIntronMax\n    type: int?\n  - id: spliceRegionExonSize\n    type: int?\n  - id: sequenceOntology\n    type: boolean?\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n  - id: onlyReg\n    type: boolean?\n  - id: onlyProtein\n    type: boolean?\n  - id: oicr\n    type: boolean?\n  - id: noStats\n    type: boolean?\n  - id: noShiftHgvs\n    type: boolean?\n  - id: noNextProt\n    type: boolean?\n  - id: noMotif\n    type: boolean?\n  - id: bankfile\n    type: File?\n  - id: cancer\n    type: boolean?\n  - id: cancerSamples\n    type: File?\n  - id: canon\n    type: boolean?\n  - id: classic\n    type: boolean?\n  - id: csvFile\n    type: boolean?\n  - id: filterInterval\n    type: 'File[]?'\n  - id: hgvs\n    type: boolean?\n  - id: formatEff\n    type: boolean?\n  - id: html_report_1\n    type: boolean?\n  - id: importGenome\n    type: boolean\n  - id: interval\n    type: 'File[]?'\n  - id: lof\n    type: boolean?\n  - id: motif\n    type: boolean?\n  - id: nextProt\n    type: boolean?\n  - id: no_downstream\n    type: boolean?\n  - id: no_EffectType\n    type: boolean?\n  - id: no_intergenic\n    type: boolean?\n  - id: no_intron\n    type: boolean?\n  - id: no_upstream\n    type: boolean?\n  - id: no_utr\n    type: boolean?\n  - id: noGenome\n    type: boolean?\n  - id: noHgvs\n    type: boolean?\n  - id: noLof\n    type: boolean?\n  - id: geneId\n    type: boolean?\n\n   #### SNPSIFT\n  - id: separator\n    type: string?\n  - id: empty_text\n    type: string?\n  - id: extractFields\n    type: 'string[]?'\n\n  - id: IndexName\n    type: string\n\noutputs:\n  - id: multiqc_fastp\n    type: File\n    outputSource:\n      - multiqc_fastp/multiqc_zip\n  - id: stats_bam\n    type: File[]\n    outputSource:\n      - samtools_stats/stats\n  - id: multiqc_markdups\n    type: File\n    outputSource:\n      - multiqc_markdups/multiqc_zip\n  - id: multiqc_samtoolsstats\n    outputSource:\n       - multiqc_stats/multiqc_zip\n    type: File\n#  - id: log\n#    outputSource:\n#      - picard__mark_duplicates/log\n#    type: File[]\n#  - id: alignments\n#    outputSource:\n#      - picard__mark_duplicates/alignments\n#    type: File[]\n#  - id: genes\n#    outputSource:\n#      - snpeff_build_ann/genes\n#    type: File[]\n  - id: statsFile_snpeff\n    outputSource:\n      - snpeff_build_ann/statsFile\n    type: File[]\n  - id: out_snpsift\n    outputSource:\n      - snpsift_extract/out\n    type: File[]\nsteps:\n  - id: fastp\n    scatter: [fastq1, fastq2]\n    scatterMethod: dotproduct\n    in:\n      - id: base_correction\n        source: base_correction\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: reads_forward\n      - id: fastq2\n        source: reads_reverse\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n      - id: qualified_phred_quality\n        source: qualified_phred_quality\n      - id: threads\n        source: threads\n      - id: unqualified_phred_quality\n        source: unqualified_phred_quality\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n      - id: out_fastq2\n    run: ./tools/fastp.cwl\n\n  - id: multiqc_fastp\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_fast'\n      - id: qc_files_array\n        source: fastp/json_report\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: samtools_view_filter\n    scatter: bam\n    in:\n      - id: bam\n        source: bwa_mem/reads_stdout\n      - id: count\n        source: count\n      - id: exclude_unmapped\n        source: exclude_unmapped\n    out:\n      - id: bam_filtered\n    run: ./tools/samtools_view_filter.cwl\n\n  - id: picard_sortsam\n    scatter: alignments\n    in: \n      - id: alignments\n        source: samtools_view_filter/bam_filtered\n      - id: sort_order\n        source: sort_order\n      - id: validation_stringency\n        source: validation_stringency\n    out:\n      - id: sorted_alignments\n    run: ./tools/picard_SortSam.cwl\n\n  - id: picard__mark_duplicates\n    scatter: alignments\n    in:\n      - id: alignments\n        source: picard_sortsam/sorted_alignments\n      - id: alignments_are_sorted\n        source: alignments_are_sorted\n      - id: barcode_tag\n        source: barcode_tag\n      - id: comment\n        source:\n          - comment\n      - id: duplicate_scoring_strategy\n        source: duplicate_scoring_strategy\n      - id: optical_duplicate_pixel_distance\n        source: optical_duplicate_pixel_distance\n      - id: remove_duplicates\n        source: remove_duplicates\n      - id: validation_stringency\n        source: validation_stringency_1\n    out:\n      - id: alignments\n      - id: log\n      - id: metrics\n    run: ./tools/picard_MarkDuplicates.cwl\n\n  - id: multiqc_markdups\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_markdups'\n      - id: qc_files_array\n        source: picard__mark_duplicates/metrics\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: lofreq_viterbi\n    scatter: reads\n    in:\n      - id: defqual\n        source: defqual\n      - id: keepflags\n        source: keepflags\n      - id: reads\n        source: picard__mark_duplicates/alignments\n      - id: reference\n        source: reference_in\n    out:\n      - id: realigned\n    run: ./tools/lofreq_viterbi.cwl\n\n  - id: samtools_sort\n    scatter: bam_unsorted\n    in:\n      - id: bam_unsorted\n        source: lofreq_viterbi/realigned\n    out:\n      - id: bam_sorted\n    run: ./tools/samtools_sort.cwl\n\n  - id: samtools_faidx\n    in:\n      - id: sequences\n        source: reference_in\n    out:\n      - id: sequences_index\n      - id: sequences_with_index\n    run: ./tools/samtools_faidx.cwl\n    \n  - id: samtool_index\n    scatter: bam_sorted\n    in:\n      - id: bam_sorted\n        source: samtools_sort/bam_sorted\n    out:\n      - id: bam_sorted_indexed\n    run: ./tools/samtools_index.cwl\n\n  - id: bwa_index_cwl\n    in:\n      - id: InputFile\n        source: reference_in\n      - id: IndexName\n        source: IndexName\n    out:\n      - id: index\n    run: ./tools/bwa-index.cwl\n    \n  - id: get_secondaryfiles\n    in:\n      - id: bwa_index\n        source: bwa_index_cwl/index\n      - id: sequence\n        source: samtools_faidx/sequences_with_index\n    out:\n      - id: sequences_with_index\n    run: ./tools/get_secondaryfiles.cwl\n  - id: get_tab\n    scatter: [out_fastq1, out_fastq2]\n    scatterMethod: dotproduct\n    in: \n      - id: out_fastq1\n        source: fastp/out_fastq1\n      - id: out_fastq2\n        source: fastp/out_fastq2\n    out:\n      - id: tab\n    run: ./tools/mergetab.cwl\n  - id: bwa_mem\n    scatter: InputFile\n    in:\n      Index:\n        source: get_secondaryfiles/sequences_with_index\n      InputFile:\n        source: get_tab/tab\n# [fastp/out_fastq1, fastp/out_fastq2]\n#        linkMerge: merge_nested #flattened\n    out:\n      - id: reads_stdout\n    run: ./tools/bwa-mem.cwl\n  - id: samtools_stats\n    scatter: input_file\n    in:\n      input_file:\n        source: samtools_view_filter/bam_filtered\n    out:\n      - id: stats\n    run: ./tools/samtools_stats.cwl\n  - id: multiqc_stats\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_stats'\n      - id: qc_files_array\n        source: samtools_stats/stats\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl \n\n  - id: lofreq_call\n    scatter: [reads_align, reads_index]\n    scatterMethod: dotproduct\n    in:\n      - id: bed\n        source: bed\n      - id: bonferroni\n        source: bonferroni\n      - id: call_indels\n        source: call_indels\n      - id: def_alt_bq\n        source: def_alt_bq\n      - id: def_alt_jq\n        source: def_alt_jq\n      - id: del_baq\n        source: del_baq\n      - id: enable_source_qual\n        source: enable_source_qual\n      - id: ignore_vcf\n        source:\n          - ignore_vcf\n      - id: illumina_1_3\n        source: illumina_1_3\n      - id: max_depth_cov\n        source: max_depth_cov\n      - id: max_mapping_quality\n        source: max_mapping_quality\n      - id: min_alt_bq\n        source: min_alt_bq\n      - id: min_alt_jq\n        source: min_alt_jq\n      - id: min_bq\n        source: min_bq\n      - id: min_cov\n        source: min_cov\n      - id: min_jq\n        source: min_jq\n      - id: min_mq\n        source: min_mq\n      - id: no_baq\n        source: no_baq\n      - id: no_default_filter\n        source: no_default_filter\n      - id: no_ext_base_alignment_quality\n        source: no_ext_base_alignment_quality\n      - id: no_idaq\n        source: no_idaq\n      - id: no_mapping_quality\n        source: no_mapping_quality\n      - id: only_indels\n        source: only_indels\n      - id: pvalue_cutoff\n        source: pvalue_cutoff\n      - id: reads_align\n        source: samtools_sort/bam_sorted\n      - id: reads_index\n        source: samtool_index/bam_sorted_indexed\n      - id: reference_fasta\n        source: samtools_faidx/sequences_with_index\n      - id: reference_index\n        source: samtools_faidx/sequences_index\n      - id: region\n        source: region\n      - id: replace_non_match\n        source: replace_non_match\n      - id: threads\n        source: threads_lf_call\n      - id: use_orphan\n        source: use_orphan\n    out:\n      - id: vcf\n    run: ./tools/lofreq_call.cwl\n    label: LoFreq Call Variants\n\n  - id: snpeff_build_ann\n    scatter: sequence\n    in:\n      - id: importGenome\n        source: importGenome\n      - id: genome_reference\n        source: genome_reference\n      - id: bankfile\n        source: bankfile\n      - id: sequence\n        source: lofreq_call/vcf\n      - id: outputFormat\n        source: outputFormat\n      - id: udLength\n        source: udLength\n      - id: html_report\n        source: html_report_1\n      - id: csvFile\n        source: csvFile\n      - id: noStats\n        source: noStats\n      - id: formatEff\n        source: formatEff\n      - id: classic\n        source: classic\n      - id: sequenceOntology\n        source: sequenceOntology\n      - id: hgvs\n        source: hgvs\n      - id: noShiftHgvs\n        source: noShiftHgvs\n      - id: noHgvs\n        source: noHgvs\n      - id: geneId\n        source: geneId\n      - id: lof\n        source: lof\n      - id: noLof\n        source: noLof\n      - id: cancer\n        source: cancer\n      - id: cancerSamples\n        source: cancerSamples\n      - id: oicr\n        source: oicr\n      - id: canon\n        source: canon\n      - id: motif\n        source: motif\n      - id: noMotif\n        source: noMotif\n      - id: noNextProt\n        source: noNextProt\n      - id: nextProt\n        source: nextProt\n      - id: noGenome\n        source: noGenome\n      - id: onlyProtein\n        source: onlyProtein\n      - id: transcripts\n        source: transcripts\n      - id: interval\n        source:\n          - interval\n      - id: spliceRegionExonSize\n        source: spliceRegionExonSize\n      - id: spliceRegionIntronMax\n        source: spliceRegionIntronMax\n      - id: spliceRegionIntronMin\n        source: spliceRegionIntronMin\n      - id: spliceSiteSize\n        source: spliceSiteSize\n      - id: onlyReg\n        source: onlyReg\n      - id: strict\n        source: strict\n      - id: filterInterval\n        source:\n          - filterInterval\n      - id: no_downstream\n        source: no_downstream\n      - id: no_intergenic\n        source: no_intergenic\n      - id: no_intron\n        source: no_intron\n      - id: no_upstream\n        source: no_upstream\n      - id: no_utr\n        source: no_utr\n      - id: no_EffectType\n        source: no_EffectType\n    out:\n      - id: snpeff_output\n      - id: statsFile\n      - id: csvFile\n      - id: genes\n    run: ./tools/snpEff_build_ann.cwl\n\n  - id: snpsift_extract\n    scatter: input_vcf\n    in:\n      - id: input_vcf\n        source: snpeff_build_ann/snpeff_output\n      - id: extractFields\n        source:\n          - extractFields\n      - id: separator\n        source: separator\n      - id: empty_text\n        source: empty_text\n    out:\n      - id: out\n    run: ./tools/snpSift_extract.cwl\n\nrequirements:\n  - class: ScatterFeatureRequirement\n  - class: SubworkflowFeatureRequirement\n  - class: MultipleInputFeatureRequirement\n  - class: StepInputExpressionRequirement\n  - class: InlineJavascriptRequirement\n\n$schemas:\n  - 'http://edamontology.org/EDAM_1.18.owl'\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "var_pe",
    "cwl_inputs": "[{'id': 'reads_reverse', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reads_forward', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reference_in', 'type': 'File'}, {'id': 'unqualified_phred_quality', 'type': 'int?'}, {'id': 'threads', 'type': 'int?'}, {'id': 'qualified_phred_quality', 'type': 'int?'}, {'id': 'min_length_required', 'type': 'int?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'base_correction', 'type': 'boolean?'}, {'id': 'sort_order', 'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}]}, {'id': 'validation_stringency', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'exclude_unmapped', 'type': 'boolean?'}, {'id': 'count', 'type': 'boolean'}, {'id': 'alignments_are_sorted', 'type': 'boolean'}, {'id': 'remove_duplicates', 'type': 'boolean'}, {'id': 'validation_stringency_1', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'comment', 'type': 'string[]?'}, {'id': 'duplicate_scoring_strategy', 'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}]}, {'id': 'optical_duplicate_pixel_distance', 'type': 'int?'}, {'id': 'barcode_tag', 'type': 'string?'}, {'id': 'keepflags', 'type': 'boolean?'}, {'id': 'defqual', 'type': 'int?'}, {'id': 'bq2_handling', 'type': ['null', {'type': 'enum', 'symbols': ['keep', 'dynamic', 'fixed']}]}, {'id': 'bed', 'type': 'File?'}, {'id': 'bonferroni', 'type': 'string?'}, {'id': 'call_indels', 'type': 'boolean?'}, {'id': 'def_alt_bq', 'type': 'int?'}, {'id': 'def_alt_jq', 'type': 'int?'}, {'id': 'del_baq', 'type': 'boolean?'}, {'id': 'enable_source_qual', 'type': 'boolean?'}, {'id': 'ignore_vcf', 'type': 'File[]?'}, {'id': 'illumina_1_3', 'type': 'boolean?'}, {'id': 'max_depth_cov', 'type': 'int?'}, {'id': 'max_mapping_quality', 'type': 'int?'}, {'id': 'min_bq', 'type': 'int?'}, {'id': 'min_cov', 'type': 'int?'}, {'id': 'min_mq', 'type': 'int?'}, {'id': 'use_orphan', 'type': 'boolean?'}, {'id': 'threads_lf_call', 'type': 'int?'}, {'id': 'replace_non_match', 'type': 'int?'}, {'id': 'region', 'type': 'string?'}, {'id': 'pvalue_cutoff', 'type': 'float?'}, {'id': 'only_indels', 'type': 'boolean?'}, {'id': 'no_idaq', 'type': 'boolean?'}, {'id': 'no_default_filter', 'type': 'boolean?'}, {'id': 'no_baq', 'type': 'boolean?'}, {'id': 'no_mapping_quality', 'type': 'boolean?'}, {'id': 'no_ext_base_alignment_quality', 'type': 'boolean?'}, {'id': 'min_jq', 'type': 'int?'}, {'id': 'min_alt_jq', 'type': 'int?'}, {'id': 'min_alt_bq', 'type': 'int?'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'udLength', 'type': 'int'}, {'id': 'transcripts', 'type': 'File?'}, {'id': 'strict', 'type': 'boolean?'}, {'id': 'spliceSiteSize', 'type': 'int?'}, {'id': 'spliceRegionIntronMin', 'type': 'int?'}, {'id': 'spliceRegionIntronMax', 'type': 'int?'}, {'id': 'spliceRegionExonSize', 'type': 'int?'}, {'id': 'sequenceOntology', 'type': 'boolean?'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn']}]}, {'id': 'onlyReg', 'type': 'boolean?'}, {'id': 'onlyProtein', 'type': 'boolean?'}, {'id': 'oicr', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'noShiftHgvs', 'type': 'boolean?'}, {'id': 'noNextProt', 'type': 'boolean?'}, {'id': 'noMotif', 'type': 'boolean?'}, {'id': 'bankfile', 'type': 'File?'}, {'id': 'cancer', 'type': 'boolean?'}, {'id': 'cancerSamples', 'type': 'File?'}, {'id': 'canon', 'type': 'boolean?'}, {'id': 'classic', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'filterInterval', 'type': 'File[]?'}, {'id': 'hgvs', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?'}, {'id': 'html_report_1', 'type': 'boolean?'}, {'id': 'importGenome', 'type': 'boolean'}, {'id': 'interval', 'type': 'File[]?'}, {'id': 'lof', 'type': 'boolean?'}, {'id': 'motif', 'type': 'boolean?'}, {'id': 'nextProt', 'type': 'boolean?'}, {'id': 'no_downstream', 'type': 'boolean?'}, {'id': 'no_EffectType', 'type': 'boolean?'}, {'id': 'no_intergenic', 'type': 'boolean?'}, {'id': 'no_intron', 'type': 'boolean?'}, {'id': 'no_upstream', 'type': 'boolean?'}, {'id': 'no_utr', 'type': 'boolean?'}, {'id': 'noGenome', 'type': 'boolean?'}, {'id': 'noHgvs', 'type': 'boolean?'}, {'id': 'noLof', 'type': 'boolean?'}, {'id': 'geneId', 'type': 'boolean?'}, {'id': 'separator', 'type': 'string?'}, {'id': 'empty_text', 'type': 'string?'}, {'id': 'extractFields', 'type': 'string[]?'}, {'id': 'IndexName', 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'multiqc_fastp', 'type': 'File', 'outputSource': ['multiqc_fastp/multiqc_zip']}, {'id': 'stats_bam', 'type': 'File[]', 'outputSource': ['samtools_stats/stats']}, {'id': 'multiqc_markdups', 'type': 'File', 'outputSource': ['multiqc_markdups/multiqc_zip']}, {'id': 'multiqc_samtoolsstats', 'outputSource': ['multiqc_stats/multiqc_zip'], 'type': 'File'}, {'id': 'statsFile_snpeff', 'outputSource': ['snpeff_build_ann/statsFile'], 'type': 'File[]'}, {'id': 'out_snpsift', 'outputSource': ['snpsift_extract/out'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "var-PE",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/variation_SE.cwl",
    "sha": "f46dede9819f524eccffa848948de3a554d8515b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/variation_SE.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: var\nlabel: var\n\ninputs:\n  # read(s):\n  - id: reads\n    type: File[]\n    format:\n      - edam:format_1930 # FASTA\n      - edam:format_1931 # FASTQ\n\n  # reference genome:\n  - id: reference_in\n    type: File\n\n  #### 1-  fastp options:\n  - id: unqualified_phred_quality\n    type: int?\n  - id: threads\n    type: int?\n  - id: qualified_phred_quality\n    type: int?\n  - id: min_length_required\n    type: int?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: base_correction\n    type: boolean?\n\n#### bowtie2_build options:\n  - id: bmax\n    type: int?\n  - id: bmaxdivn\n    type: int?\n  - id: bt2_index_base\n    type: string?\n  - id: c\n    type: boolean?\n  - id: dcv\n    type: int?\n  - id: f\n    type: boolean?\n  - id: ftabchars\n    type: int?\n  - id: justref\n    type: boolean?\n  - id: large_index\n    type: boolean?\n  - id: noauto\n    type: boolean?\n  - id: nodc\n    type: boolean?\n  - id: noref\n    type: boolean?\n  - id: offrate\n    type: int?\n  - id: packed\n    type: boolean?\n  - id: quiet\n    type: boolean?\n  - id: seed\n    type: int?\n  - id: threads_bowtie2\n    type: int?\n#### bowtie2_align options: (many others)\n  - id: end_to_end_very_sensitive\n    type: boolean?\n\n#### picard__sort_sam options:\n  - id: sort_order\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n  - id: validation_stringency\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n#### picard__mark_duplicates options:\n  - id: alignments_are_sorted\n    type: boolean\n  - id: remove_duplicates\n    type: boolean\n  - id: validation_stringency_1\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n  - id: comment\n    type: string[]?\n  - id: duplicate_scoring_strategy\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n  - id: read_name_regex\n    type: string?\n  - id: optical_duplicate_pixel_distance\n    type: int?\n  - id: barcode_tag\n    type: string?\n####lofreq_viterbi options:\n  - id: keepflags\n    type: boolean?\n  - id: defqual\n    type: int?\n  - id: bq2_handling\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - keep\n          - dynamic\n          - fixed\n        name: bq2_handling\n\n#### lofreq_cal_variants options:\n  - id: bed\n    type: File?\n  - id: bonferroni\n    type: string?\n  - id: call_indels\n    type: boolean?\n  - id: def_alt_bq\n    type: int?\n  - id: def_alt_jq\n    type: int?\n  - id: del_baq\n    type: boolean?\n  - id: enable_source_qual\n    type: boolean?\n  - id: ignore_vcf\n    type: 'File[]?'\n  - id: illumina_1_3\n    type: boolean?\n  - id: max_depth_cov\n    type: int?\n  - id: max_mapping_quality\n    type: int?\n  - id: min_bq\n    type: int?\n  - id: min_cov\n    type: int?\n  - id: min_mq\n    type: int?\n  - id: use_orphan\n    type: boolean?\n  - id: threads_lf_call\n    type: int?\n  - id: replace_non_match\n    type: int?\n  - id: region\n    type: string?\n  - id: pvalue_cutoff\n    type: float?\n  - id: only_indels\n    type: boolean?\n  - id: no_idaq\n    type: boolean?\n  - id: no_default_filter\n    type: boolean?\n  - id: no_baq\n    type: boolean?\n  - id: no_mapping_quality\n    type: boolean?\n  - id: no_ext_base_alignment_quality\n    type: boolean?\n  - id: min_jq\n    type: int?\n  - id: min_alt_jq\n    type: int?\n  - id: min_alt_bq\n    type: int?\n\n#### SnpEff buiild & ann:\n  - id: genome_reference\n    type: string\n  - id: udLength\n    type: int\n  - id: transcripts\n    type: File?\n  - id: strict\n    type: boolean?\n  - id: spliceSiteSize\n    type: int?\n  - id: spliceRegionIntronMin\n    type: int?\n  - id: spliceRegionIntronMax\n    type: int?\n  - id: spliceRegionExonSize\n    type: int?\n  - id: sequenceOntology\n    type: boolean?\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n        name: outputFormat\n  - id: onlyReg\n    type: boolean?\n  - id: onlyProtein\n    type: boolean?\n  - id: oicr\n    type: boolean?\n  - id: noStats\n    type: boolean?\n  - id: noShiftHgvs\n    type: boolean?\n  - id: noNextProt\n    type: boolean?\n  - id: noMotif\n    type: boolean?\n  - id: bankfile\n    type: File?\n  - id: cancer\n    type: boolean?\n  - id: cancerSamples\n    type: File?\n  - id: canon\n    type: boolean?\n  - id: classic\n    type: boolean?\n  - id: csvFile\n    type: boolean?\n  - id: filterInterval\n    type: 'File[]?'\n  - id: hgvs\n    type: boolean?\n  - id: formatEff\n    type: boolean?\n  - id: html_report_1\n    type: boolean?\n  - id: importGenome\n    type: boolean\n  - id: interval\n    type: 'File[]?'\n  - id: lof\n    type: boolean?\n  - id: motif\n    type: boolean?\n  - id: nextProt\n    type: boolean?\n  - id: no_downstream\n    type: boolean?\n  - id: no_EffectType\n    type: boolean?\n  - id: no_intergenic\n    type: boolean?\n  - id: no_intron\n    type: boolean?\n  - id: no_upstream\n    type: boolean?\n  - id: no_utr\n    type: boolean?\n  - id: noGenome\n    type: boolean?\n  - id: noHgvs\n    type: boolean?\n  - id: noLof\n    type: boolean?\n  - id: geneId\n    type: boolean?\n\n#### SNPSIFT\n  - id: separator\n    type: string?\n  - id: empty_text\n    type: string?\n  - id: extractFields\n    type: 'string[]?'\n\noutputs:\n#FASTP:\n#  - id: html_report\n#    outputSource:\n#      - fastp/html_report\n#    type: File[]\n  - id: multiqc_fastp\n    outputSource:\n      - multiqc_fastp/multiqc_zip\n#  - id: json_report\n#    outputSource:\n#      - fastp/json_report\n#    type: File[]\n#  - id: out_fastq1\n#    outputSource:\n#      - fastp/out_fastq1\n#    type: File[]\n\n#BOWTIE2_BUILD:\n#  - id: indices\n#    outputSource:\n#      - bowtie2_build/indices\n#    type: File\n\n#BOWTIE2_ALIGN:\n#  - id: output\n#    outputSource:\n#      - bowtie2_align/output\n#    type: File[]\n  - id: output_log\n    outputSource:\n      - bowtie2_align/output_log\n    type: File[]\n#picard_sortsam:\n#  - id: outFile\n#    outputSource:\n#      - picard__sort_sam/sorted_alignments\n#    type: File[]\n\n#picard_markduplicates\n  - id: metrics\n    outputSource:\n      - picard__mark_duplicates/metrics\n    type: File[]\n  - id: log\n    outputSource:\n      - picard__mark_duplicates/log\n    type: File[]\n  - id: alignments\n    outputSource:\n      - picard__mark_duplicates/alignments\n    type: File[]\n\n#lofreq_viterbi:\n#  - id: realigned\n#    outputSource:\n#      - lofreq_viterbi/realigned\n#    type: File[]\n#samtools_sort\n#  - id: bam_sorted\n#    outputSource:\n#      - samtools_sort/bam_sorted\n#    type: File[]\n#lofreq_call:\n#  - id: vcf\n#    outputSource:\n#      - lofreq_call/vcf\n#    type: File[]\n#SNPEFF:\n  - id: csvFile\n    outputSource:\n      - snpeff_build_ann/csvFile\n    type: File[]?\n  - id: genes\n    outputSource:\n      - snpeff_build_ann/genes\n    type: File[]?\n#  - id: snpeff_output\n#    outputSource:\n#      - snpeff_build_ann/snpeff_output\n#    type: File[]?\n  - id: statsFile\n    outputSource:\n      - snpeff_build_ann/statsFile\n    type: File[]?\n#SNPSIFT:\n  - id: out\n    outputSource:\n      - snpsift_extract/out\n    type: File[]\n\nsteps:\n  - id: fastp\n    scatter: fastq1\n    in:\n      - id: base_correction\n        source: base_correction\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: reads\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n      - id: qualified_phred_quality\n        source: qualified_phred_quality\n      - id: threads\n        source: threads\n      - id: unqualified_phred_quality\n        source: unqualified_phred_quality\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n    run: ./tools/fastp.cwl\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_fast'\n      - id: qc_files_array\n        source: fastp/json_report\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: bowtie2_build\n    in:\n      - id: bmax\n        source: bmax\n      - id: bmaxdivn\n        source: bmaxdivn\n      - id: bt2_index_base\n        source: bt2_index_base\n      - id: c\n        source: c\n      - id: dcv\n        source: dcv\n      - id: f\n        source: f\n      - id: ftabchars\n        source: ftabchars\n      - id: justref\n        source: justref\n      - id: large_index\n        source: large_index\n      - id: noauto\n        source: noauto\n      - id: nodc\n        source: nodc\n      - id: noref\n        source: noref\n      - id: offrate\n        source: offrate\n      - id: packed\n        source: packed\n      - id: quiet\n        source: quiet\n      - id: reference_in\n        source:\n          - reference_in\n      - id: seed\n        source: seed\n      - id: threads\n        source: threads_bowtie2\n    out:\n      - id: indices\n      - id: output_log\n    run: ./tools/bowtie2_build.cwl\n\n  - id: bowtie2_align\n    scatter: filelist\n    in:\n      - id: filelist\n        source: fastp/out_fastq1\n      - id: indices_file\n        source: bowtie2_build/indices\n      - id: end_to_end_very_sensitive\n        source: end_to_end_very_sensitive\n    out:\n      - id: output\n      - id: output_log\n    run: ./tools/bowtie2_align.cwl\n  - id: picard__sort_sam\n    scatter: alignments\n    in:\n      - id: alignments\n        source: bowtie2_align/output\n      - id: sort_order\n        source: sort_order\n      - id: validation_stringency\n        source: validation_stringency\n    out:\n      - id: sorted_alignments\n    run: ./tools/picard_SortSam.cwl\n\n  - id: picard__mark_duplicates\n    scatter: alignments\n    in:\n      - id: alignments_are_sorted\n        source: alignments_are_sorted\n      - id: alignments\n        source: picard__sort_sam/sorted_alignments\n      - id: barcode_tag\n        source: barcode_tag\n      - id: comment\n        source:\n          - comment\n      - id: duplicate_scoring_strategy\n        source: duplicate_scoring_strategy\n      - id: optical_duplicate_pixel_distance\n        source: optical_duplicate_pixel_distance\n      - id: remove_duplicates\n        source: remove_duplicates\n      - id: validation_stringency\n        source: validation_stringency_1\n    out:\n      - id: alignments\n      - id: log\n      - id: metrics\n    run: ./tools/picard_MarkDuplicates.cwl\n\n  - id: lofreq_viterbi\n    scatter: reads\n    in:\n      - id: bq2_handling\n        source: bq2_handling\n      - id: defqual\n        source: defqual\n      - id: keepflags\n        source: keepflags\n      - id: reads\n        source: picard__mark_duplicates/alignments\n      - id: reference\n        source: reference_in\n    out:\n      - id: realigned\n    run: ./tools/lofreq_viterbi.cwl\n  - id: samtools_sort\n    scatter: bam_unsorted\n    in:\n      - id: bam_unsorted\n        source: lofreq_viterbi/realigned\n    out:\n      - id: bam_sorted\n    run: ./tools/samtools_sort.cwl\n\n  - id: samtools_faidx\n    in:\n      - id: sequences\n        source: reference_in\n    out:\n      - id: sequences_index\n      - id: sequences_with_index\n    run: ./tools/samtools_faidx.cwl\n\n  - id: samtool_index\n    scatter: bam_sorted\n    in:\n      - id: bam_sorted\n        source: samtools_sort/bam_sorted\n    out:\n      - id: bam_sorted_indexed\n    run: ./tools/samtools_index.cwl\n\n\n  - id: lofreq_call\n    scatter: [reads_align, reads_index]\n    scatterMethod: \"dotproduct\"\n    in:\n      - id: threads\n        source: threads_lf_call\n      - id: reference_index\n        source: samtools_faidx/sequences_index\n      - id: reference_fasta\n        source: samtools_faidx/sequences_with_index\n      - id: call_indels\n        source: call_indels\n      - id: only_indels\n        source: only_indels\n      - id: bed\n        source: bed\n      - id: region\n        source: region\n      - id: min_bq\n        source: min_bq\n      - id: min_alt_bq\n        source: min_alt_bq\n      - id: def_alt_bq\n        source: def_alt_bq\n      - id: min_jq\n        source: min_jq\n      - id: min_alt_jq\n        source: min_alt_jq\n      - id: def_alt_jq\n        source: def_alt_jq\n      - id: no_baq\n        source: no_baq\n      - id: no_idaq\n        source: no_idaq\n      - id: del_baq\n        source: del_baq\n      - id: no_ext_base_alignment_quality\n        source: no_ext_base_alignment_quality\n      - id: min_mq\n        source: min_mq\n      - id: max_mapping_quality\n        source: max_mapping_quality\n      - id: no_mapping_quality\n        source: no_mapping_quality\n      - id: enable_source_qual\n        source: enable_source_qual\n      - id: ignore_vcf\n        source:\n          - ignore_vcf\n      - id: replace_non_match\n        source: replace_non_match\n      - id: pvalue_cutoff\n        source: pvalue_cutoff\n      - id: bonferroni\n        source: bonferroni\n      - id: min_cov\n        source: min_cov\n      - id: max_depth_cov\n        source: max_depth_cov\n      - id: illumina_1_3\n        source: illumina_1_3\n      - id: use_orphan\n        source: use_orphan\n      - id: no_default_filter\n        source: no_default_filter\n      - id: reads_align\n        source: samtools_sort/bam_sorted\n      - id: reads_index\n        source: samtool_index/bam_sorted_indexed\n    out:\n      - id: vcf\n    run: ./tools/lofreq_call.cwl\n    label: LoFreq Call Variants\n\n  - id: snpeff_build_ann\n    scatter: sequence\n    in: \n      - id: importGenome\n        source: importGenome\n      - id: genome_reference\n        source: genome_reference\n      - id: bankfile\n        source: bankfile\n      - id: sequence\n        source: lofreq_call/vcf\n      - id: outputFormat\n        source: outputFormat\n      - id: udLength\n        source: udLength\n      - id: html_report\n        source: html_report_1\n      - id: csvFile\n        source: csvFile\n      - id: noStats\n        source: noStats\n      - id: formatEff\n        source: formatEff\n      - id: classic\n        source: classic\n      - id: sequenceOntology\n        source: sequenceOntology\n      - id: hgvs\n        source: hgvs\n      - id: noShiftHgvs\n        source: noShiftHgvs\n      - id: noHgvs\n        source: noHgvs\n      - id: geneId\n        source: geneId\n      - id: lof\n        source: lof\n      - id: noLof\n        source: noLof\n      - id: cancer\n        source: cancer\n      - id: cancerSamples\n        source: cancerSamples\n      - id: oicr\n        source: oicr\n      - id: canon\n        source: canon\n      - id: motif\n        source: motif\n      - id: noMotif\n        source: noMotif\n      - id: noNextProt\n        source: noNextProt\n      - id: nextProt\n        source: nextProt\n      - id: noGenome\n        source: noGenome\n      - id: onlyProtein\n        source: onlyProtein\n      - id: transcripts\n        source: transcripts\n      - id: interval\n        source:\n          - interval\n      - id: spliceRegionExonSize\n        source: spliceRegionExonSize\n      - id: spliceRegionIntronMax\n        source: spliceRegionIntronMax\n      - id: spliceRegionIntronMin\n        source: spliceRegionIntronMin\n      - id: spliceSiteSize\n        source: spliceSiteSize\n      - id: onlyReg\n        source: onlyReg\n      - id: strict\n        source: strict\n      - id: filterInterval\n        source:\n          - filterInterval\n      - id: no_downstream\n        source: no_downstream\n      - id: no_intergenic\n        source: no_intergenic\n      - id: no_intron\n        source: no_intron\n      - id: no_upstream\n        source: no_upstream\n      - id: no_utr\n        source: no_utr\n      - id: no_EffectType\n        source: no_EffectType\n    out:\n      - id: snpeff_output\n      - id: statsFile\n      - id: csvFile\n      - id: genes\n    run: ./tools/snpEff_build_ann.cwl\n\n  - id: snpsift_extract\n    scatter: input_vcf\n    in:\n      - id: input_vcf\n        source: snpeff_build_ann/snpeff_output\n      - id: extractFields\n        source:\n          - extractFields\n      - id: separator\n        source: separator\n      - id: empty_text\n        source: empty_text\n    out:\n      - id: out\n    run: ./tools/snpSift_extract.cwl\n\nrequirements:\n  ScatterFeatureRequirement: {}\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "Workflow",
    "cwl_id": "var",
    "cwl_inputs": "[{'id': 'reads', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reference_in', 'type': 'File'}, {'id': 'unqualified_phred_quality', 'type': 'int?'}, {'id': 'threads', 'type': 'int?'}, {'id': 'qualified_phred_quality', 'type': 'int?'}, {'id': 'min_length_required', 'type': 'int?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'base_correction', 'type': 'boolean?'}, {'id': 'bmax', 'type': 'int?'}, {'id': 'bmaxdivn', 'type': 'int?'}, {'id': 'bt2_index_base', 'type': 'string?'}, {'id': 'c', 'type': 'boolean?'}, {'id': 'dcv', 'type': 'int?'}, {'id': 'f', 'type': 'boolean?'}, {'id': 'ftabchars', 'type': 'int?'}, {'id': 'justref', 'type': 'boolean?'}, {'id': 'large_index', 'type': 'boolean?'}, {'id': 'noauto', 'type': 'boolean?'}, {'id': 'nodc', 'type': 'boolean?'}, {'id': 'noref', 'type': 'boolean?'}, {'id': 'offrate', 'type': 'int?'}, {'id': 'packed', 'type': 'boolean?'}, {'id': 'quiet', 'type': 'boolean?'}, {'id': 'seed', 'type': 'int?'}, {'id': 'threads_bowtie2', 'type': 'int?'}, {'id': 'end_to_end_very_sensitive', 'type': 'boolean?'}, {'id': 'sort_order', 'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}]}, {'id': 'validation_stringency', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'alignments_are_sorted', 'type': 'boolean'}, {'id': 'remove_duplicates', 'type': 'boolean'}, {'id': 'validation_stringency_1', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'comment', 'type': 'string[]?'}, {'id': 'duplicate_scoring_strategy', 'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}]}, {'id': 'read_name_regex', 'type': 'string?'}, {'id': 'optical_duplicate_pixel_distance', 'type': 'int?'}, {'id': 'barcode_tag', 'type': 'string?'}, {'id': 'keepflags', 'type': 'boolean?'}, {'id': 'defqual', 'type': 'int?'}, {'id': 'bq2_handling', 'type': ['null', {'type': 'enum', 'symbols': ['keep', 'dynamic', 'fixed'], 'name': 'bq2_handling'}]}, {'id': 'bed', 'type': 'File?'}, {'id': 'bonferroni', 'type': 'string?'}, {'id': 'call_indels', 'type': 'boolean?'}, {'id': 'def_alt_bq', 'type': 'int?'}, {'id': 'def_alt_jq', 'type': 'int?'}, {'id': 'del_baq', 'type': 'boolean?'}, {'id': 'enable_source_qual', 'type': 'boolean?'}, {'id': 'ignore_vcf', 'type': 'File[]?'}, {'id': 'illumina_1_3', 'type': 'boolean?'}, {'id': 'max_depth_cov', 'type': 'int?'}, {'id': 'max_mapping_quality', 'type': 'int?'}, {'id': 'min_bq', 'type': 'int?'}, {'id': 'min_cov', 'type': 'int?'}, {'id': 'min_mq', 'type': 'int?'}, {'id': 'use_orphan', 'type': 'boolean?'}, {'id': 'threads_lf_call', 'type': 'int?'}, {'id': 'replace_non_match', 'type': 'int?'}, {'id': 'region', 'type': 'string?'}, {'id': 'pvalue_cutoff', 'type': 'float?'}, {'id': 'only_indels', 'type': 'boolean?'}, {'id': 'no_idaq', 'type': 'boolean?'}, {'id': 'no_default_filter', 'type': 'boolean?'}, {'id': 'no_baq', 'type': 'boolean?'}, {'id': 'no_mapping_quality', 'type': 'boolean?'}, {'id': 'no_ext_base_alignment_quality', 'type': 'boolean?'}, {'id': 'min_jq', 'type': 'int?'}, {'id': 'min_alt_jq', 'type': 'int?'}, {'id': 'min_alt_bq', 'type': 'int?'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'udLength', 'type': 'int'}, {'id': 'transcripts', 'type': 'File?'}, {'id': 'strict', 'type': 'boolean?'}, {'id': 'spliceSiteSize', 'type': 'int?'}, {'id': 'spliceRegionIntronMin', 'type': 'int?'}, {'id': 'spliceRegionIntronMax', 'type': 'int?'}, {'id': 'spliceRegionExonSize', 'type': 'int?'}, {'id': 'sequenceOntology', 'type': 'boolean?'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn'], 'name': 'outputFormat'}]}, {'id': 'onlyReg', 'type': 'boolean?'}, {'id': 'onlyProtein', 'type': 'boolean?'}, {'id': 'oicr', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'noShiftHgvs', 'type': 'boolean?'}, {'id': 'noNextProt', 'type': 'boolean?'}, {'id': 'noMotif', 'type': 'boolean?'}, {'id': 'bankfile', 'type': 'File?'}, {'id': 'cancer', 'type': 'boolean?'}, {'id': 'cancerSamples', 'type': 'File?'}, {'id': 'canon', 'type': 'boolean?'}, {'id': 'classic', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'filterInterval', 'type': 'File[]?'}, {'id': 'hgvs', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?'}, {'id': 'html_report_1', 'type': 'boolean?'}, {'id': 'importGenome', 'type': 'boolean'}, {'id': 'interval', 'type': 'File[]?'}, {'id': 'lof', 'type': 'boolean?'}, {'id': 'motif', 'type': 'boolean?'}, {'id': 'nextProt', 'type': 'boolean?'}, {'id': 'no_downstream', 'type': 'boolean?'}, {'id': 'no_EffectType', 'type': 'boolean?'}, {'id': 'no_intergenic', 'type': 'boolean?'}, {'id': 'no_intron', 'type': 'boolean?'}, {'id': 'no_upstream', 'type': 'boolean?'}, {'id': 'no_utr', 'type': 'boolean?'}, {'id': 'noGenome', 'type': 'boolean?'}, {'id': 'noHgvs', 'type': 'boolean?'}, {'id': 'noLof', 'type': 'boolean?'}, {'id': 'geneId', 'type': 'boolean?'}, {'id': 'separator', 'type': 'string?'}, {'id': 'empty_text', 'type': 'string?'}, {'id': 'extractFields', 'type': 'string[]?'}]",
    "cwl_outputs": "[{'id': 'multiqc_fastp', 'outputSource': ['multiqc_fastp/multiqc_zip']}, {'id': 'output_log', 'outputSource': ['bowtie2_align/output_log'], 'type': 'File[]'}, {'id': 'metrics', 'outputSource': ['picard__mark_duplicates/metrics'], 'type': 'File[]'}, {'id': 'log', 'outputSource': ['picard__mark_duplicates/log'], 'type': 'File[]'}, {'id': 'alignments', 'outputSource': ['picard__mark_duplicates/alignments'], 'type': 'File[]'}, {'id': 'csvFile', 'outputSource': ['snpeff_build_ann/csvFile'], 'type': 'File[]?'}, {'id': 'genes', 'outputSource': ['snpeff_build_ann/genes'], 'type': 'File[]?'}, {'id': 'statsFile', 'outputSource': ['snpeff_build_ann/statsFile'], 'type': 'File[]?'}, {'id': 'out', 'outputSource': ['snpsift_extract/out'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "var",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Metrics/busco.cwl",
    "sha": "e7209a0a4e330be09b11792fee3ee5d8c06729bd",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Metrics/busco.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"busco\"\ndoc: \"Estimate the completeness of a genome using predicted genes\"\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: EnvVarRequirement\n    envDef:\n      AUGUSTUS_CONFIG_PATH: /usr/local/config\ninputs:\n  - id: assembly\n    type: File\n    inputBinding:\n      prefix: -i\n      position: 1\n  - id: lineage\n    type: Directory\n    inputBinding:\n      prefix: -l\n      position: 2\n  - id: mode\n    type: string\n    default: geno\n    inputBinding:\n      prefix: -m\n      position: 3\n  - id: outputName\n    type: string\n    inputBinding:\n      prefix: -o\n      position: 4\n  - id: threads\n    type: int\n    inputBinding:\n      prefix: -c\n      position: 5\n  - id: blastSingleCore\n    type: boolean\n    default: true\n    inputBinding:\n      prefix: --blast_single_core\n      position: 6\noutputs:\n  - id: buscoResult\n    type: File\n    outputBinding:\n      glob: run_*/short_summary_*.txt\nbaseCommand: [\"run_BUSCO.py\", \"-f\"]\narguments: []\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/busco:3.0.2--py35_6\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "busco",
    "cwl_inputs": "[{'id': 'assembly', 'type': 'File', 'inputBinding': {'prefix': '-i', 'position': 1}}, {'id': 'lineage', 'type': 'Directory', 'inputBinding': {'prefix': '-l', 'position': 2}}, {'id': 'mode', 'type': 'string', 'default': 'geno', 'inputBinding': {'prefix': '-m', 'position': 3}}, {'id': 'outputName', 'type': 'string', 'inputBinding': {'prefix': '-o', 'position': 4}}, {'id': 'threads', 'type': 'int', 'inputBinding': {'prefix': '-c', 'position': 5}}, {'id': 'blastSingleCore', 'type': 'boolean', 'default': True, 'inputBinding': {'prefix': '--blast_single_core', 'position': 6}}]",
    "cwl_outputs": "[{'id': 'buscoResult', 'type': 'File', 'outputBinding': {'glob': 'run_*/short_summary_*.txt'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/busco:3.0.2--py35_6'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['run_BUSCO.py', '-f']",
    "cwl_arguments": "[]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Estimate the completeness of a genome using predicted genes",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Metrics/collect.cwl",
    "sha": "c96917404c5be7dd3654a0b3ec8346da2d125934",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Metrics/collect.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"table\"\ndoc: \"Create a table for metrics\"\nrequirements:\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: pakorhon/collect:v0.0.4-beta\ninputs:\n  - id: reference\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -r\n  - id: assemblies\n    type: File[]\n    inputBinding:\n      position: 2\n      prefix: -a\n      itemSeparator: \",\"\n  - id: gageResults\n    type: File[]\n    inputBinding:\n      position: 3\n      prefix: -g\n      itemSeparator: \",\"\n  - id: quastResults\n    type: File[]\n    inputBinding:\n      prefix: -q\n      position: 4\n      itemSeparator: \",\"\n  - id: quastMisassemblies\n    type: File[]\n    inputBinding:\n      prefix: -m\n      position: 5\n      itemSeparator: \",\"\n  - id: quastSnpsZipped\n    type: File[]\n    inputBinding:\n      prefix: -s\n      position: 6\n      itemSeparator: \",\"\n  - id: refGff\n    type: File\n    inputBinding:\n      position: 7\n      prefix: -f\n  - id: buscoResults\n    type: File[]\n    inputBinding:\n      prefix: -b\n      position: 8\n      itemSeparator: \",\"\n  - id: labels\n    type: string[]\n    inputBinding:\n      position: 9\n      prefix: -l\n      itemSeparator: \",\"\noutputs:\n  - id: table\n    type: File\n    outputBinding:\n      glob: \"metrics.txt\"\nbaseCommand: [\"python\", \"/root/createTables.py\"]\nstdout: metrics.txt\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "table",
    "cwl_inputs": "[{'id': 'reference', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-r'}}, {'id': 'assemblies', 'type': 'File[]', 'inputBinding': {'position': 2, 'prefix': '-a', 'itemSeparator': ','}}, {'id': 'gageResults', 'type': 'File[]', 'inputBinding': {'position': 3, 'prefix': '-g', 'itemSeparator': ','}}, {'id': 'quastResults', 'type': 'File[]', 'inputBinding': {'prefix': '-q', 'position': 4, 'itemSeparator': ','}}, {'id': 'quastMisassemblies', 'type': 'File[]', 'inputBinding': {'prefix': '-m', 'position': 5, 'itemSeparator': ','}}, {'id': 'quastSnpsZipped', 'type': 'File[]', 'inputBinding': {'prefix': '-s', 'position': 6, 'itemSeparator': ','}}, {'id': 'refGff', 'type': 'File', 'inputBinding': {'position': 7, 'prefix': '-f'}}, {'id': 'buscoResults', 'type': 'File[]', 'inputBinding': {'prefix': '-b', 'position': 8, 'itemSeparator': ','}}, {'id': 'labels', 'type': 'string[]', 'inputBinding': {'position': 9, 'prefix': '-l', 'itemSeparator': ','}}]",
    "cwl_outputs": "[{'id': 'table', 'type': 'File', 'outputBinding': {'glob': 'metrics.txt'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'pakorhon/collect:v0.0.4-beta'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['python', '/root/createTables.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Create a table for metrics",
    "cwl_stdout": "metrics.txt",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Metrics/metrics.cwl",
    "sha": "2a049f49c00266d3b2f8663eea9a88156f65d6ed",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Metrics/metrics.cwl",
    "content": "cwlVersion: cwl:v1.0\nclass: Workflow\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n  - class: ScatterFeatureRequirement\n  - class: MultipleInputFeatureRequirement\n\ninputs:\n  reference: File\n  assemblies: File[]\n  labels: string[]\n  threads: int\n  minIdentity: float\n  extensiveMisSize: int\n  lineage: Directory\n  buscoMode: string\n  buscoName: string\n  refGff: File\n\noutputs:\n  metrics:\n    type: File\n    outputSource: collectMetrics/table\n\nsteps:\n  quastMetrics:\n    run: quast.cwl\n    in:\n      reference: reference\n      assembly: assemblies\n      threads: threads\n      minIdentity: minIdentity\n      extensiveMisSize: extensiveMisSize\n    out: [gageResult,quastResult,quastMisassemblies,quastSnpsZipped,icarusDir,icarusHtml,quastHtml,quastLog]\n    scatter: [assembly]\n    scatterMethod: dotproduct\n\n  buscoMetrics:\n    run: busco.cwl\n    in:\n      assembly: assemblies\n      lineage: lineage\n      mode: buscoMode\n      outputName: buscoName\n      threads: threads\n    out: [buscoResult]\n    scatter: [assembly]\n    scatterMethod: dotproduct\n\n  collectMetrics:\n    run: collect.cwl\n    in:\n      labels: labels\n      gageResults: quastMetrics/gageResult\n      quastResults: quastMetrics/quastResult\n      quastMisassemblies: quastMetrics/quastMisassemblies\n      quastSnpsZipped: quastMetrics/quastSnpsZipped\n      assemblies: assemblies\n      refGff: refGff\n      reference: reference\n      buscoResults: buscoMetrics/buscoResult\n    out: [table]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'reference': 'File', 'assemblies': 'File[]', 'labels': 'string[]', 'threads': 'int', 'minIdentity': 'float', 'extensiveMisSize': 'int', 'lineage': 'Directory', 'buscoMode': 'string', 'buscoName': 'string', 'refGff': 'File'}",
    "cwl_outputs": "{'metrics': {'type': 'File', 'outputSource': 'collectMetrics/table'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "cwl:v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "quastMetrics": {
        "run": "quast.cwl",
        "in": {
          "reference": "reference",
          "assembly": "assemblies",
          "threads": "threads",
          "minIdentity": "minIdentity",
          "extensiveMisSize": "extensiveMisSize"
        },
        "out": [
          "gageResult",
          "quastResult",
          "quastMisassemblies",
          "quastSnpsZipped",
          "icarusDir",
          "icarusHtml",
          "quastHtml",
          "quastLog"
        ],
        "scatter": [
          "assembly"
        ],
        "scatterMethod": "dotproduct"
      },
      "buscoMetrics": {
        "run": "busco.cwl",
        "in": {
          "assembly": "assemblies",
          "lineage": "lineage",
          "mode": "buscoMode",
          "outputName": "buscoName",
          "threads": "threads"
        },
        "out": [
          "buscoResult"
        ],
        "scatter": [
          "assembly"
        ],
        "scatterMethod": "dotproduct"
      },
      "collectMetrics": {
        "run": "collect.cwl",
        "in": {
          "labels": "labels",
          "gageResults": "quastMetrics/gageResult",
          "quastResults": "quastMetrics/quastResult",
          "quastMisassemblies": "quastMetrics/quastMisassemblies",
          "quastSnpsZipped": "quastMetrics/quastSnpsZipped",
          "assemblies": "assemblies",
          "refGff": "refGff",
          "reference": "reference",
          "buscoResults": "buscoMetrics/buscoResult"
        },
        "out": [
          "table"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Metrics/quast.cwl",
    "sha": "665ee2348b065c94020715338f90ac5b8d390e91",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Metrics/quast.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"quast\"\ndoc: \"Compare the assembly against the reference genome\"\nrequirements:\n  - class: InlineJavascriptRequirement\ninputs:\n  - id: assembly\n    type: File\n    inputBinding:\n      position: 1\n  - id: reference\n    type: File\n    inputBinding:\n      position: 2\n      prefix: -R\n  - id: gffFile\n    type: File?\n    inputBinding:\n      position: 3\n      prefix: -G\n  - id: bamFile\n    type: File?\n    inputBinding:\n      prefix: --bam\n      position: 4\n  - id: threads\n    type: int?\n    inputBinding:\n      prefix: -t\n      position: 5\n  - id: gage\n    type: boolean?\n    default: true\n    inputBinding:\n      prefix: --gage\n      position: 6\n  - id: minIdentity\n    type: float\n    default: 98.0\n    inputBinding:\n      prefix: --min-identity\n      position: 7\n  - id: extensiveMisSize\n    type: int\n    default: 1000\n    inputBinding:\n      prefix: --extensive-mis-size\n      position: 8\n  - id: ambiguity\n    type: string\n    default: one\n    inputBinding:\n      prefix: --ambiguity-usage\n      position: 9\n  - id: plotFormat\n    type: string\n    default: svg\n    inputBinding:\n      prefix: --plots-format\n      position: 10\n  - id: eukaryote\n    type: boolean\n    default: true\n    inputBinding:\n      prefix: --eukaryote\n      position: 11\noutputs:\n  - id: gageResult\n    type: File\n    outputBinding:\n      glob: \"quast_results/latest/gage_report.txt\"\n#      glob: quast_results/latest/gage/gage_*.stdout\n  - id: quastResult\n    type: File\n    outputBinding:\n      glob: \"quast_results/latest/report.txt\"\n  - id: quastMisassemblies\n    type: File\n    outputBinding:\n      glob: \"quast_results/latest/contigs_reports/misassemblies_report.txt\"\n  - id: quastSnpsZipped\n    type: File\n    outputBinding:\n      glob: \"quast_results/latest/contigs_reports/nucmer_output/*.used_snps.gz\"\n  - id: icarusDir\n    type: Directory\n    outputBinding:\n      glob: \"quast_results/latest/icarus_viewers\"\n  - id: icarusHtml\n    type: File\n    outputBinding:\n      glob: \"quast_results/latest/icarus.html\"\n  - id: quastHtml\n    type: File\n    outputBinding:\n      glob: \"quast_results/latest/report.html\"\n  - id: quastLog\n    type: File\n    outputBinding:\n      glob: \"quast_results/latest/quast.log\"\nbaseCommand: [\"quast\"]\narguments: []\nhints:\n  SoftwareRequirement:\n    packages:\n    - package: quast\n      version:\n      - \"4.6.3\"",
    "cwl_class": "CommandLineTool",
    "cwl_id": "quast",
    "cwl_inputs": "[{'id': 'assembly', 'type': 'File', 'inputBinding': {'position': 1}}, {'id': 'reference', 'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-R'}}, {'id': 'gffFile', 'type': 'File?', 'inputBinding': {'position': 3, 'prefix': '-G'}}, {'id': 'bamFile', 'type': 'File?', 'inputBinding': {'prefix': '--bam', 'position': 4}}, {'id': 'threads', 'type': 'int?', 'inputBinding': {'prefix': '-t', 'position': 5}}, {'id': 'gage', 'type': 'boolean?', 'default': True, 'inputBinding': {'prefix': '--gage', 'position': 6}}, {'id': 'minIdentity', 'type': 'float', 'default': 98.0, 'inputBinding': {'prefix': '--min-identity', 'position': 7}}, {'id': 'extensiveMisSize', 'type': 'int', 'default': 1000, 'inputBinding': {'prefix': '--extensive-mis-size', 'position': 8}}, {'id': 'ambiguity', 'type': 'string', 'default': 'one', 'inputBinding': {'prefix': '--ambiguity-usage', 'position': 9}}, {'id': 'plotFormat', 'type': 'string', 'default': 'svg', 'inputBinding': {'prefix': '--plots-format', 'position': 10}}, {'id': 'eukaryote', 'type': 'boolean', 'default': True, 'inputBinding': {'prefix': '--eukaryote', 'position': 11}}]",
    "cwl_outputs": "[{'id': 'gageResult', 'type': 'File', 'outputBinding': {'glob': 'quast_results/latest/gage_report.txt'}}, {'id': 'quastResult', 'type': 'File', 'outputBinding': {'glob': 'quast_results/latest/report.txt'}}, {'id': 'quastMisassemblies', 'type': 'File', 'outputBinding': {'glob': 'quast_results/latest/contigs_reports/misassemblies_report.txt'}}, {'id': 'quastSnpsZipped', 'type': 'File', 'outputBinding': {'glob': 'quast_results/latest/contigs_reports/nucmer_output/*.used_snps.gz'}}, {'id': 'icarusDir', 'type': 'Directory', 'outputBinding': {'glob': 'quast_results/latest/icarus_viewers'}}, {'id': 'icarusHtml', 'type': 'File', 'outputBinding': {'glob': 'quast_results/latest/icarus.html'}}, {'id': 'quastHtml', 'type': 'File', 'outputBinding': {'glob': 'quast_results/latest/report.html'}}, {'id': 'quastLog', 'type': 'File', 'outputBinding': {'glob': 'quast_results/latest/quast.log'}}]",
    "cwl_hints": "{'SoftwareRequirement': {'packages': [{'package': 'quast', 'version': ['4.6.3']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['quast']",
    "cwl_arguments": "[]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Compare the assembly against the reference genome",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/arrow.cwl",
    "sha": "9d382cb8f40e74ecd38904412a13d0defcf1d6da",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/arrow.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"arrow\"\ndoc: \"Polish the assembly using PacBio reads\"\nrequirements:\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: pakorhon/arrow:v0.0.8-beta\ninputs:\n  - id: dataDir\n    type: Directory\n    inputBinding:\n      position: 1\n      prefix: -d\n  - id: tmpDir\n    type: string\n    inputBinding:\n      position: 2\n      prefix: -t\n  - id: assembly\n    type: File\n    inputBinding:\n      position: 3\n      prefix: -s\n  - id: prefix\n    type: string\n    inputBinding:\n      position: 4\n      prefix: -p\n  - id: bam\n    type: boolean\n    default: true\n    inputBinding:\n      prefix: -b\n      position: 5\noutputs:\n  - id: arrowPolishedAssembly\n    type: File\n    format: edam:format_1929  # fasta\n    outputBinding:\n      glob: \"$(inputs.prefix).contigs.arrowed.fasta\"\nbaseCommand: [\"/home/smrtpipe.sh\"]\narguments: []\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "arrow",
    "cwl_inputs": "[{'id': 'dataDir', 'type': 'Directory', 'inputBinding': {'position': 1, 'prefix': '-d'}}, {'id': 'tmpDir', 'type': 'string', 'inputBinding': {'position': 2, 'prefix': '-t'}}, {'id': 'assembly', 'type': 'File', 'inputBinding': {'position': 3, 'prefix': '-s'}}, {'id': 'prefix', 'type': 'string', 'inputBinding': {'position': 4, 'prefix': '-p'}}, {'id': 'bam', 'type': 'boolean', 'default': True, 'inputBinding': {'prefix': '-b', 'position': 5}}]",
    "cwl_outputs": "[{'id': 'arrowPolishedAssembly', 'type': 'File', 'format': 'edam:format_1929', 'outputBinding': {'glob': '$(inputs.prefix).contigs.arrowed.fasta'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'pakorhon/arrow:v0.0.8-beta'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['/home/smrtpipe.sh']",
    "cwl_arguments": "[]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Polish the assembly using PacBio reads",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/assembly.cwl",
    "sha": "d721d97298b5f24697de6b951ad6ee121b273489",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/assembly.cwl",
    "content": "cwlVersion: cwl:v1.0\nclass: Workflow\nrequirements:\n  - \"$import\": assembly-typedef.yml\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n  - class: ScatterFeatureRequirement\n  - class: MultipleInputFeatureRequirement\n\ninputs:\n  pacBioDataDir: Directory\n  pacBioTmpDir: string\n  pacBioInBam: boolean\n  prefix: string\n  genomeSize: string\n  minReadLen: int\n  corMaxEvidenceErate: float\n  readsPe1:\n    type: File[]\n  readsPe2:\n    type: File[]\n  phredsPe:\n    type: string[]\n  slidingWindow: assembly-typedef.yml#slidingWindow\n  illuminaClip: assembly-typedef.yml#illuminaClipping?\n  leading: int\n  trailing: int\n  minlen: int\n  threads: int\n  minThreads: int\n  canuConcurrency: int\n  orientation: string\n  maxFragmentLens: int[]\n  polishedAssembly: string\n  diploidOrganism: boolean\n  fix: string\n  database: Directory\n  taxons:\n    type: int[]\n  partialMatch: int\n  repBaseLibrary: File\n  trueValue: boolean\n  falseValue: boolean\n\noutputs:\n  correctedReads:\n    type: File\n    outputSource: correct/correctedReads\n  trimmedReads:\n    type: File\n    outputSource: assemble/trimmedReads\n  canuAssembly:\n    type: File\n    outputSource: assemble/assembly\n  arrowAssembly:\n    type: File\n    outputSource: arrow/arrowPolishedAssembly\n  pilonAssembly:\n    type: File\n    outputSource: pilon/pilonPolishedAssembly\n  trimmedReadFiles1:\n    type: File[]\n    outputSource: cleanIlluminaReads/trimmedPe1\n  trimmedReadFiles2:\n    type: File[]\n    outputSource: cleanIlluminaReads/trimmedPe2\n  sortedBamIndexFileOut:\n    type: File[]\n    outputSource: expressionToolBam/hybridFile\n  deconReport:\n    type: File\n    outputSource: classifyReads/report\n  deconClassification:\n    type: File\n    outputSource: classifyReads/classification\n  decontaminatedReads:\n    type: File\n    outputSource: decontaminate/deconReads\n  contaminatedReads:\n    type: File\n    outputSource: decontaminate/conReads\n  assemblyMasked:\n    type: File\n    outputSource: combineCatFiles/maskedAssembly\n  assemblyMerged:\n    type: File\n    outputSource: haploMerge/mergedAssembly\n\nsteps:\n  cleanIlluminaReads:\n    run: trimmomaticpe.cwl\n    in:\n      phred: phredsPe\n      threads: threads\n      reads1: readsPe1\n      reads2: readsPe2\n      slidingWindow: slidingWindow\n      illuminaClip: illuminaClip\n      leading: leading\n      trailing: trailing\n      minlen: minlen\n    out: [trimmedPe1, trimmedPe2, trimmedUnpe1, trimmedUnpe2, trimLogFile]\n    scatter: [reads1, reads2, phred]\n    scatterMethod: dotproduct\n\n  hdf5check:\n    run: hdf5check.cwl\n    in:\n      directory: pacBioDataDir\n      fastq: pacBioInBam\n    out: [pbFastqReads]\n\n  correct:\n    run: canuCorrect.cwl\n    in:\n      prefix: prefix\n      genomeSize: genomeSize\n      pacbio: hdf5check/pbFastqReads\n      corMaxEvidenceErate: corMaxEvidenceErate\n      minThreads: minThreads\n      maxThreads: threads\n      corConcurrency: canuConcurrency\n    out: [correctedReads]\n\n  renameReads:\n    run: renameReads.cwl\n    in:\n      trimmedReads: correct/correctedReads\n    out: [renamedReads, mappedIds]\n\n  classifyReads:\n    run: centrifuge.cwl\n    in:\n      database: database\n      trimmedReads: renameReads/renamedReads\n      threads: threads\n      partialMatch: partialMatch\n    out: [report, classification]\n\n  decontaminate:\n    run: decon.cwl\n    in:\n      prefix: prefix\n      trimmedReads: renameReads/renamedReads\n      taxons: taxons\n      classificationFile: classifyReads/classification\n      mappedIds: renameReads/mappedIds\n      partialMatch: partialMatch\n    out: [deconReads, conReads]\n\n  assemble:\n    run: canuAssemble.cwl\n    in:\n      prefix: prefix\n      genomeSize: genomeSize\n      minReadLen: minReadLen\n      pacbio: decontaminate/deconReads\n      corMaxEvidenceErate: corMaxEvidenceErate\n      minThreads: minThreads\n      maxThreads: threads\n      obtmhapConcurrency: canuConcurrency\n      utgmhapConcurrency: canuConcurrency\n      obtmmapConcurrency: canuConcurrency\n      utgmmapConcurrency: canuConcurrency\n      obtovlConcurrency: canuConcurrency\n      utgovlConcurrency: canuConcurrency\n    out: [trimmedReads, assembly]\n\n  removeBubbles:\n    run: removeBubbles.cwl\n    in:\n      contigs: assemble/assembly\n    out: [assembly]\n    \n  arrow:\n    run: arrow.cwl\n    in:\n      dataDir: pacBioDataDir\n      tmpDir: pacBioTmpDir\n      assembly: removeBubbles/assembly\n      prefix: prefix\n      bam: pacBioInBam\n    out: [arrowPolishedAssembly]\n\n  indexReference:\n    run: bowtie2-build.cwl\n    in:\n      reference: arrow/arrowPolishedAssembly\n    out: [referenceAssembly, bt2_1, bt2_2, bt2_3, bt2_4, bt2rev1, bt2rev2]\n\n  expressionToolBowtie:\n    run: expressiontoolbowtie.cwl\n    in:\n      masterFile:\n        source: indexReference/referenceAssembly\n      bt2_1: indexReference/bt2_1\n      bt2_2: indexReference/bt2_2\n      bt2_3: indexReference/bt2_3\n      bt2_4: indexReference/bt2_4\n      bt2rev1: indexReference/bt2rev1\n      bt2rev2: indexReference/bt2rev2\n    out: [hybridFile]\n\n  mapIlluminaReads:\n    run: bowtie2.cwl\n    in:\n      phred: phredsPe\n      orientation: orientation\n      maxFragmentLen: maxFragmentLens\n      threads: threads\n      reference: expressionToolBowtie/hybridFile\n      reads1: cleanIlluminaReads/trimmedPe1\n      reads2: cleanIlluminaReads/trimmedPe2\n    out: [samFile]\n    scatter: [phred, reads1, reads2, maxFragmentLen]\n    scatterMethod: dotproduct\n\n  sortMappedReads:\n    run: samsort.cwl\n    in:\n      threads: threads\n      inputSamFile: mapIlluminaReads/samFile\n    out: [sortedBamFile]\n    scatter: inputSamFile\n\n  indexBamFile:\n    run: samindex.cwl\n    in:\n      inputBamFile: sortMappedReads/sortedBamFile\n    out: [sortedBamFile, bamIndexFile]\n    scatter: inputBamFile\n\n  expressionToolBam:\n    run: expressiontoolbam.cwl\n    in:\n      masterFile:\n          source: indexBamFile/sortedBamFile\n      bai: indexBamFile/bamIndexFile\n    out: [hybridFile]\n    scatter: [masterFile, bai]\n    scatterMethod: dotproduct\n\n  pilon:\n    run: pilon.cwl\n    in:\n      bamPe: expressionToolBam/hybridFile\n      reference: arrow/arrowPolishedAssembly\n      output: polishedAssembly\n      diploidOrganism: diploidOrganism\n      fix: fix\n      threads: threads\n    out: [pilonPolishedAssembly, pilonPolishedAssemblyChanges]\n\n  indexAssembly:\n    run: indexassembly.cwl\n    in:\n      scaffolds: pilon/pilonPolishedAssembly\n    out: [pilonPolishedAssembly, translation, nsq, nin, nhr, nog, nni, nnd]\n\n  expressionToolRepeatModeler:\n    run: expressiontoolrepeats.cwl\n    in:\n      masterFile:\n          source: indexAssembly/pilonPolishedAssembly\n      translation: indexAssembly/translation\n      nsq: indexAssembly/nsq\n      nin: indexAssembly/nin\n      nhr: indexAssembly/nhr\n      nog: indexAssembly/nog\n      nni: indexAssembly/nni\n      nnd: indexAssembly/nnd\n    out: [hybridFile]\n\n  inferRepeats:\n    run: repeatmodeler.cwl\n    in:\n      repBaseLibrary: repBaseLibrary\n      threads: threads\n      database: expressionToolRepeatModeler/hybridFile\n    out: [repeatFastaFile, repeatLibrary]\n\n  maskCustomRepeats:\n    run: repeatmasker.cwl\n    in:\n      threads: threads\n      noInterspersed: falseValue\n      noLowComplexity: trueValue\n      repeatLibrary: inferRepeats/repeatFastaFile\n      reference: pilon/pilonPolishedAssembly\n    out: [categoryFile]\n\n  maskTranspRepeats:\n    run: repeatmasker.cwl\n    in:\n      threads: threads\n      noInterspersed: falseValue\n      noLowComplexity: trueValue\n      repeatLibrary: inferRepeats/repeatLibrary\n      reference: pilon/pilonPolishedAssembly\n    out: [categoryFile]\n\n  maskSimpleRepeats:\n    run: repeatmasker.cwl\n    in:\n      threads: threads\n      noInterspersed: trueValue\n      noLowComplexity: falseValue\n      repeatLibrary: inferRepeats/repeatLibrary\n      reference: pilon/pilonPolishedAssembly\n    out: [categoryFile]\n\n  combineCatFiles:\n    run: combinecats.cwl\n    in:\n      assembly: pilon/pilonPolishedAssembly\n      categories: [maskCustomRepeats/categoryFile, maskTranspRepeats/categoryFile, maskSimpleRepeats/categoryFile]\n    out: [maskedAssembly]\n\n  haploMerge:\n    run: haplomerger.cwl\n    in:\n      assembly: pilon/pilonPolishedAssembly\n      maskedAssembly: combineCatFiles/maskedAssembly\n      trimmedReads: decontaminate/deconReads\n      threads: threads\n    out: [mergedAssembly, scoreMatrix]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'pacBioDataDir': 'Directory', 'pacBioTmpDir': 'string', 'pacBioInBam': 'boolean', 'prefix': 'string', 'genomeSize': 'string', 'minReadLen': 'int', 'corMaxEvidenceErate': 'float', 'readsPe1': {'type': 'File[]'}, 'readsPe2': {'type': 'File[]'}, 'phredsPe': {'type': 'string[]'}, 'slidingWindow': 'assembly-typedef.yml#slidingWindow', 'illuminaClip': 'assembly-typedef.yml#illuminaClipping?', 'leading': 'int', 'trailing': 'int', 'minlen': 'int', 'threads': 'int', 'minThreads': 'int', 'canuConcurrency': 'int', 'orientation': 'string', 'maxFragmentLens': 'int[]', 'polishedAssembly': 'string', 'diploidOrganism': 'boolean', 'fix': 'string', 'database': 'Directory', 'taxons': {'type': 'int[]'}, 'partialMatch': 'int', 'repBaseLibrary': 'File', 'trueValue': 'boolean', 'falseValue': 'boolean'}",
    "cwl_outputs": "{'correctedReads': {'type': 'File', 'outputSource': 'correct/correctedReads'}, 'trimmedReads': {'type': 'File', 'outputSource': 'assemble/trimmedReads'}, 'canuAssembly': {'type': 'File', 'outputSource': 'assemble/assembly'}, 'arrowAssembly': {'type': 'File', 'outputSource': 'arrow/arrowPolishedAssembly'}, 'pilonAssembly': {'type': 'File', 'outputSource': 'pilon/pilonPolishedAssembly'}, 'trimmedReadFiles1': {'type': 'File[]', 'outputSource': 'cleanIlluminaReads/trimmedPe1'}, 'trimmedReadFiles2': {'type': 'File[]', 'outputSource': 'cleanIlluminaReads/trimmedPe2'}, 'sortedBamIndexFileOut': {'type': 'File[]', 'outputSource': 'expressionToolBam/hybridFile'}, 'deconReport': {'type': 'File', 'outputSource': 'classifyReads/report'}, 'deconClassification': {'type': 'File', 'outputSource': 'classifyReads/classification'}, 'decontaminatedReads': {'type': 'File', 'outputSource': 'decontaminate/deconReads'}, 'contaminatedReads': {'type': 'File', 'outputSource': 'decontaminate/conReads'}, 'assemblyMasked': {'type': 'File', 'outputSource': 'combineCatFiles/maskedAssembly'}, 'assemblyMerged': {'type': 'File', 'outputSource': 'haploMerge/mergedAssembly'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "cwl:v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "cleanIlluminaReads": {
        "run": "trimmomaticpe.cwl",
        "in": {
          "phred": "phredsPe",
          "threads": "threads",
          "reads1": "readsPe1",
          "reads2": "readsPe2",
          "slidingWindow": "slidingWindow",
          "illuminaClip": "illuminaClip",
          "leading": "leading",
          "trailing": "trailing",
          "minlen": "minlen"
        },
        "out": [
          "trimmedPe1",
          "trimmedPe2",
          "trimmedUnpe1",
          "trimmedUnpe2",
          "trimLogFile"
        ],
        "scatter": [
          "reads1",
          "reads2",
          "phred"
        ],
        "scatterMethod": "dotproduct"
      },
      "hdf5check": {
        "run": "hdf5check.cwl",
        "in": {
          "directory": "pacBioDataDir",
          "fastq": "pacBioInBam"
        },
        "out": [
          "pbFastqReads"
        ]
      },
      "correct": {
        "run": "canuCorrect.cwl",
        "in": {
          "prefix": "prefix",
          "genomeSize": "genomeSize",
          "pacbio": "hdf5check/pbFastqReads",
          "corMaxEvidenceErate": "corMaxEvidenceErate",
          "minThreads": "minThreads",
          "maxThreads": "threads",
          "corConcurrency": "canuConcurrency"
        },
        "out": [
          "correctedReads"
        ]
      },
      "renameReads": {
        "run": "renameReads.cwl",
        "in": {
          "trimmedReads": "correct/correctedReads"
        },
        "out": [
          "renamedReads",
          "mappedIds"
        ]
      },
      "classifyReads": {
        "run": "centrifuge.cwl",
        "in": {
          "database": "database",
          "trimmedReads": "renameReads/renamedReads",
          "threads": "threads",
          "partialMatch": "partialMatch"
        },
        "out": [
          "report",
          "classification"
        ]
      },
      "decontaminate": {
        "run": "decon.cwl",
        "in": {
          "prefix": "prefix",
          "trimmedReads": "renameReads/renamedReads",
          "taxons": "taxons",
          "classificationFile": "classifyReads/classification",
          "mappedIds": "renameReads/mappedIds",
          "partialMatch": "partialMatch"
        },
        "out": [
          "deconReads",
          "conReads"
        ]
      },
      "assemble": {
        "run": "canuAssemble.cwl",
        "in": {
          "prefix": "prefix",
          "genomeSize": "genomeSize",
          "minReadLen": "minReadLen",
          "pacbio": "decontaminate/deconReads",
          "corMaxEvidenceErate": "corMaxEvidenceErate",
          "minThreads": "minThreads",
          "maxThreads": "threads",
          "obtmhapConcurrency": "canuConcurrency",
          "utgmhapConcurrency": "canuConcurrency",
          "obtmmapConcurrency": "canuConcurrency",
          "utgmmapConcurrency": "canuConcurrency",
          "obtovlConcurrency": "canuConcurrency",
          "utgovlConcurrency": "canuConcurrency"
        },
        "out": [
          "trimmedReads",
          "assembly"
        ]
      },
      "removeBubbles": {
        "run": "removeBubbles.cwl",
        "in": {
          "contigs": "assemble/assembly"
        },
        "out": [
          "assembly"
        ]
      },
      "arrow": {
        "run": "arrow.cwl",
        "in": {
          "dataDir": "pacBioDataDir",
          "tmpDir": "pacBioTmpDir",
          "assembly": "removeBubbles/assembly",
          "prefix": "prefix",
          "bam": "pacBioInBam"
        },
        "out": [
          "arrowPolishedAssembly"
        ]
      },
      "indexReference": {
        "run": "bowtie2-build.cwl",
        "in": {
          "reference": "arrow/arrowPolishedAssembly"
        },
        "out": [
          "referenceAssembly",
          "bt2_1",
          "bt2_2",
          "bt2_3",
          "bt2_4",
          "bt2rev1",
          "bt2rev2"
        ]
      },
      "expressionToolBowtie": {
        "run": "expressiontoolbowtie.cwl",
        "in": {
          "masterFile": {
            "source": "indexReference/referenceAssembly"
          },
          "bt2_1": "indexReference/bt2_1",
          "bt2_2": "indexReference/bt2_2",
          "bt2_3": "indexReference/bt2_3",
          "bt2_4": "indexReference/bt2_4",
          "bt2rev1": "indexReference/bt2rev1",
          "bt2rev2": "indexReference/bt2rev2"
        },
        "out": [
          "hybridFile"
        ]
      },
      "mapIlluminaReads": {
        "run": "bowtie2.cwl",
        "in": {
          "phred": "phredsPe",
          "orientation": "orientation",
          "maxFragmentLen": "maxFragmentLens",
          "threads": "threads",
          "reference": "expressionToolBowtie/hybridFile",
          "reads1": "cleanIlluminaReads/trimmedPe1",
          "reads2": "cleanIlluminaReads/trimmedPe2"
        },
        "out": [
          "samFile"
        ],
        "scatter": [
          "phred",
          "reads1",
          "reads2",
          "maxFragmentLen"
        ],
        "scatterMethod": "dotproduct"
      },
      "sortMappedReads": {
        "run": "samsort.cwl",
        "in": {
          "threads": "threads",
          "inputSamFile": "mapIlluminaReads/samFile"
        },
        "out": [
          "sortedBamFile"
        ],
        "scatter": "inputSamFile"
      },
      "indexBamFile": {
        "run": "samindex.cwl",
        "in": {
          "inputBamFile": "sortMappedReads/sortedBamFile"
        },
        "out": [
          "sortedBamFile",
          "bamIndexFile"
        ],
        "scatter": "inputBamFile"
      },
      "expressionToolBam": {
        "run": "expressiontoolbam.cwl",
        "in": {
          "masterFile": {
            "source": "indexBamFile/sortedBamFile"
          },
          "bai": "indexBamFile/bamIndexFile"
        },
        "out": [
          "hybridFile"
        ],
        "scatter": [
          "masterFile",
          "bai"
        ],
        "scatterMethod": "dotproduct"
      },
      "pilon": {
        "run": "pilon.cwl",
        "in": {
          "bamPe": "expressionToolBam/hybridFile",
          "reference": "arrow/arrowPolishedAssembly",
          "output": "polishedAssembly",
          "diploidOrganism": "diploidOrganism",
          "fix": "fix",
          "threads": "threads"
        },
        "out": [
          "pilonPolishedAssembly",
          "pilonPolishedAssemblyChanges"
        ]
      },
      "indexAssembly": {
        "run": "indexassembly.cwl",
        "in": {
          "scaffolds": "pilon/pilonPolishedAssembly"
        },
        "out": [
          "pilonPolishedAssembly",
          "translation",
          "nsq",
          "nin",
          "nhr",
          "nog",
          "nni",
          "nnd"
        ]
      },
      "expressionToolRepeatModeler": {
        "run": "expressiontoolrepeats.cwl",
        "in": {
          "masterFile": {
            "source": "indexAssembly/pilonPolishedAssembly"
          },
          "translation": "indexAssembly/translation",
          "nsq": "indexAssembly/nsq",
          "nin": "indexAssembly/nin",
          "nhr": "indexAssembly/nhr",
          "nog": "indexAssembly/nog",
          "nni": "indexAssembly/nni",
          "nnd": "indexAssembly/nnd"
        },
        "out": [
          "hybridFile"
        ]
      },
      "inferRepeats": {
        "run": "repeatmodeler.cwl",
        "in": {
          "repBaseLibrary": "repBaseLibrary",
          "threads": "threads",
          "database": "expressionToolRepeatModeler/hybridFile"
        },
        "out": [
          "repeatFastaFile",
          "repeatLibrary"
        ]
      },
      "maskCustomRepeats": {
        "run": "repeatmasker.cwl",
        "in": {
          "threads": "threads",
          "noInterspersed": "falseValue",
          "noLowComplexity": "trueValue",
          "repeatLibrary": "inferRepeats/repeatFastaFile",
          "reference": "pilon/pilonPolishedAssembly"
        },
        "out": [
          "categoryFile"
        ]
      },
      "maskTranspRepeats": {
        "run": "repeatmasker.cwl",
        "in": {
          "threads": "threads",
          "noInterspersed": "falseValue",
          "noLowComplexity": "trueValue",
          "repeatLibrary": "inferRepeats/repeatLibrary",
          "reference": "pilon/pilonPolishedAssembly"
        },
        "out": [
          "categoryFile"
        ]
      },
      "maskSimpleRepeats": {
        "run": "repeatmasker.cwl",
        "in": {
          "threads": "threads",
          "noInterspersed": "trueValue",
          "noLowComplexity": "falseValue",
          "repeatLibrary": "inferRepeats/repeatLibrary",
          "reference": "pilon/pilonPolishedAssembly"
        },
        "out": [
          "categoryFile"
        ]
      },
      "combineCatFiles": {
        "run": "combinecats.cwl",
        "in": {
          "assembly": "pilon/pilonPolishedAssembly",
          "categories": [
            "maskCustomRepeats/categoryFile",
            "maskTranspRepeats/categoryFile",
            "maskSimpleRepeats/categoryFile"
          ]
        },
        "out": [
          "maskedAssembly"
        ]
      },
      "haploMerge": {
        "run": "haplomerger.cwl",
        "in": {
          "assembly": "pilon/pilonPolishedAssembly",
          "maskedAssembly": "combineCatFiles/maskedAssembly",
          "trimmedReads": "decontaminate/deconReads",
          "threads": "threads"
        },
        "out": [
          "mergedAssembly",
          "scoreMatrix"
        ]
      }
    },
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/bowtie2-build.cwl",
    "sha": "d98fbc4178bebba81d16e6ce6905f0410af29ebc",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/bowtie2-build.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"bowtie2-build\"\ndoc: \"Create a bowtie2 reference file\"\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - $(inputs.reference)\n\ninputs:\n  - id: reference\n    type: File\n    inputBinding:\n      position: 1\n\narguments:\n  - valueFrom: $(inputs.reference.basename)\n    position: 2\n\noutputs:\n#  - id: indexFiles\n#    type: File\n#    outputBinding:\n#      glob: $(inputs.reference.basename).*\n  - id: referenceAssembly\n    type: File\n    outputBinding:\n      glob: \"$(inputs.reference.basename)\"\n  - id: bt2_1\n    type: File\n    outputBinding:\n      glob: \"$(inputs.reference.basename).1.bt2\"\n  - id: bt2_2\n    type: File\n    outputBinding:\n      glob: \"$(inputs.reference.basename).2.bt2\"\n  - id: bt2_3\n    type: File\n    outputBinding:\n      glob: \"$(inputs.reference.basename).3.bt2\"\n  - id: bt2_4\n    type: File\n    outputBinding:\n      glob: \"$(inputs.reference.basename).4.bt2\"\n  - id: bt2rev1\n    type: File\n    outputBinding:\n      glob: \"$(inputs.reference.basename).rev.1.bt2\"\n  - id: bt2rev2\n    type: File\n    outputBinding:\n      glob: \"$(inputs.reference.basename).rev.2.bt2\"\n\nbaseCommand: [bowtie2-build]\n\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/bowtie2:2.4.2--py38h1c8e9b9_1\n    #dockerPull: quay.io/biocontainers/bowtie2:2.2.5--py36h2d50403_3\n    ",
    "cwl_class": "CommandLineTool",
    "cwl_id": "bowtie2-build",
    "cwl_inputs": "[{'id': 'reference', 'type': 'File', 'inputBinding': {'position': 1}}]",
    "cwl_outputs": "[{'id': 'referenceAssembly', 'type': 'File', 'outputBinding': {'glob': '$(inputs.reference.basename)'}}, {'id': 'bt2_1', 'type': 'File', 'outputBinding': {'glob': '$(inputs.reference.basename).1.bt2'}}, {'id': 'bt2_2', 'type': 'File', 'outputBinding': {'glob': '$(inputs.reference.basename).2.bt2'}}, {'id': 'bt2_3', 'type': 'File', 'outputBinding': {'glob': '$(inputs.reference.basename).3.bt2'}}, {'id': 'bt2_4', 'type': 'File', 'outputBinding': {'glob': '$(inputs.reference.basename).4.bt2'}}, {'id': 'bt2rev1', 'type': 'File', 'outputBinding': {'glob': '$(inputs.reference.basename).rev.1.bt2'}}, {'id': 'bt2rev2', 'type': 'File', 'outputBinding': {'glob': '$(inputs.reference.basename).rev.2.bt2'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/bowtie2:2.4.2--py38h1c8e9b9_1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2-build']",
    "cwl_arguments": "[{'valueFrom': '$(inputs.reference.basename)', 'position': 2}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Create a bowtie2 reference file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/bowtie2.cwl",
    "sha": "e07149dfc46cacc52d87613f143ae0883b4fcc7f",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/bowtie2.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"bowtie2\"\ndoc: \"Maps illumina reads to a genome\"\nrequirements:\n  - class: InlineJavascriptRequirement\ninputs:\n  - id: seedMismatches\n    type: string\n    default: '1'\n    inputBinding:\n      prefix: -N\n      position: 1\n  - id: phred\n    type: string\n    default: '33'\n    inputBinding:\n      prefix: --phred\n      separate: false\n      position: 2\n  - id: orientation\n    type: string\n    default: 'fr'\n    inputBinding:\n      prefix: --\n      separate: false\n      position: 3\n  - id: threads\n    type: int\n    default: 1\n    inputBinding:\n      position: 4\n      prefix: --threads\n  - id: maxFragmentLen\n    type: int\n    default: 500\n    inputBinding:\n      position: 5\n      prefix: -X\n  - id: reference\n    type: File\n    inputBinding:\n      position: 6\n      prefix: -x\n    secondaryFiles:\n      - .1.bt2\n      - .2.bt2\n      - .3.bt2\n      - .4.bt2\n      - .rev.1.bt2\n      - .rev.2.bt2\n  - id: reads1\n    type: File\n    inputBinding:\n      prefix: \"-1\"\n      position: 7\n  - id: reads2\n    type: File\n    inputBinding:\n      prefix: \"-2\"\n      position: 8\n\noutputs:\n  - id: samFile\n    type: File\n    format: edam:format_2573  # SAM format\n    outputBinding:\n      glob: $(inputs.reads1.basename.slice(0,-9)).sam\n\nbaseCommand: [bowtie2]\n\nstdout: $(inputs.reads1.basename.slice(0,-9)).sam\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/bowtie2:2.4.2--py38h1c8e9b9_1\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "bowtie2",
    "cwl_inputs": "[{'id': 'seedMismatches', 'type': 'string', 'default': '1', 'inputBinding': {'prefix': '-N', 'position': 1}}, {'id': 'phred', 'type': 'string', 'default': '33', 'inputBinding': {'prefix': '--phred', 'separate': False, 'position': 2}}, {'id': 'orientation', 'type': 'string', 'default': 'fr', 'inputBinding': {'prefix': '--', 'separate': False, 'position': 3}}, {'id': 'threads', 'type': 'int', 'default': 1, 'inputBinding': {'position': 4, 'prefix': '--threads'}}, {'id': 'maxFragmentLen', 'type': 'int', 'default': 500, 'inputBinding': {'position': 5, 'prefix': '-X'}}, {'id': 'reference', 'type': 'File', 'inputBinding': {'position': 6, 'prefix': '-x'}, 'secondaryFiles': ['.1.bt2', '.2.bt2', '.3.bt2', '.4.bt2', '.rev.1.bt2', '.rev.2.bt2']}, {'id': 'reads1', 'type': 'File', 'inputBinding': {'prefix': '-1', 'position': 7}}, {'id': 'reads2', 'type': 'File', 'inputBinding': {'prefix': '-2', 'position': 8}}]",
    "cwl_outputs": "[{'id': 'samFile', 'type': 'File', 'format': 'edam:format_2573', 'outputBinding': {'glob': '$(inputs.reads1.basename.slice(0,-9)).sam'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/bowtie2:2.4.2--py38h1c8e9b9_1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Maps illumina reads to a genome",
    "cwl_stdout": "$(inputs.reads1.basename.slice(0,-9)).sam",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/canuAssemble.cwl",
    "sha": "52306b4aa3eb663b5b3f82b020f9da73ab757ed6",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/canuAssemble.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"canu\"\ndoc: \"Assemble PacBio reads (canu -correct -trim -assemble)\"\nrequirements:\n  - class: InlineJavascriptRequirement\ninputs:\n  - id: prefix\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -p\n  - id: assemblyDir\n    type: string\n    default: CanuAssembly\n    inputBinding:\n      position: 2\n      prefix: -d\n  - id: genomeSize\n    type: string\n    inputBinding:\n      position: 3\n      separate: false\n      prefix: genomeSize=\n#  - id: stopOnReadQuality\n#    type: string\n#    default: \"true\"\n#    inputBinding:\n#      position: 4\n#      separate: false\n#      prefix: stopOnReadQuality=\n  - id: minReadLen\n    type: int\n    default: 6000\n    inputBinding:\n      position: 5\n      separate: false\n      prefix: minReadLength=\n  - id: pacbio\n    type: File\n    inputBinding:\n      position: 6\n      prefix: -pacbio\n  - id: corrected\n    type: boolean\n    default: true\n    inputBinding:\n      prefix: -corrected\n      position: 7\n  - id: corMaxEvidenceErate\n    type: float\n    default: 0.20\n    inputBinding:\n      position: 8\n      separate: false\n      prefix: corMaxEvidenceErate=\n  - id: useGrid\n    type: string\n    default: \"false\"\n    inputBinding:\n      position: 10\n      separate: false\n      prefix: useGrid=\n#  - id: ovsMethod\n#    type: string\n#    default: \"sequential\"\n#    inputBinding:\n#      position: 11\n#      separate: false\n#      prefix: ovsMethod=\n#  - id: gnuplotTested\n#    type: string\n#    default: \"true\"\n#    inputBinding:\n#      position: 12\n#      separate: false\n#      prefix: gnuplotTested=\n  - id: minThreads\n    type: int\n    inputBinding:\n      position: 13\n      separate: false\n      prefix: minThreads=\n  - id: maxThreads\n    type: int\n    inputBinding:\n      position: 14\n      separate: false\n      prefix: maxThreads=\n  - id: obtmhapConcurrency\n    type: int\n    default: 6\n    inputBinding:\n      position: 16\n      separate: false\n      prefix: obtmhapConcurrency=\n  - id: utgmhapConcurrency\n    type: int\n    default: 6\n    inputBinding:\n      position: 17\n      separate: false\n      prefix: utgmhapConcurrency=\n  - id: obtmmapConcurrency\n    type: int\n    default: 6\n    inputBinding:\n      position: 16\n      separate: false\n      prefix: obtmmapConcurrency=\n  - id: utgmmapConcurrency\n    type: int\n    default: 6\n    inputBinding:\n      position: 17\n      separate: false\n      prefix: utgmmapConcurrency=\n  - id: obtovlConcurrency\n    type: int\n    default: 6\n    inputBinding:\n      position: 16\n      separate: false\n      prefix: obtovlConcurrency=\n  - id: utgovlConcurrency\n    type: int\n    default: 6\n    inputBinding:\n      position: 17\n      separate: false\n      prefix: utgovlConcurrency=\noutputs:\n  - id: trimmedReads\n    type: File\n    outputBinding:\n      glob: \"*/$(inputs.prefix).trimmedReads.fasta.gz\"\n  - id: assembly\n    type: File\n    outputBinding:\n      glob: \"*/$(inputs.prefix).contigs.fasta\"\nbaseCommand: [\"canu\", \"-trim-assemble\"]\narguments: []\nstdout: out\nhints:\n  SoftwareRequirement:\n    packages:\n    - package: canu\n      version:\n      - \"2.1.1\"\n\n#hints:\n#  - class: DockerRequirement\n#    dockerPull: quay.io/biocontainers/canu:2.1.1--he1b5a44_0\n#    #dockerPull: quay.io/biocontainers/canu:1.8--pl526h470a237_0\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "canu",
    "cwl_inputs": "[{'id': 'prefix', 'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-p'}}, {'id': 'assemblyDir', 'type': 'string', 'default': 'CanuAssembly', 'inputBinding': {'position': 2, 'prefix': '-d'}}, {'id': 'genomeSize', 'type': 'string', 'inputBinding': {'position': 3, 'separate': False, 'prefix': 'genomeSize='}}, {'id': 'minReadLen', 'type': 'int', 'default': 6000, 'inputBinding': {'position': 5, 'separate': False, 'prefix': 'minReadLength='}}, {'id': 'pacbio', 'type': 'File', 'inputBinding': {'position': 6, 'prefix': '-pacbio'}}, {'id': 'corrected', 'type': 'boolean', 'default': True, 'inputBinding': {'prefix': '-corrected', 'position': 7}}, {'id': 'corMaxEvidenceErate', 'type': 'float', 'default': 0.2, 'inputBinding': {'position': 8, 'separate': False, 'prefix': 'corMaxEvidenceErate='}}, {'id': 'useGrid', 'type': 'string', 'default': 'false', 'inputBinding': {'position': 10, 'separate': False, 'prefix': 'useGrid='}}, {'id': 'minThreads', 'type': 'int', 'inputBinding': {'position': 13, 'separate': False, 'prefix': 'minThreads='}}, {'id': 'maxThreads', 'type': 'int', 'inputBinding': {'position': 14, 'separate': False, 'prefix': 'maxThreads='}}, {'id': 'obtmhapConcurrency', 'type': 'int', 'default': 6, 'inputBinding': {'position': 16, 'separate': False, 'prefix': 'obtmhapConcurrency='}}, {'id': 'utgmhapConcurrency', 'type': 'int', 'default': 6, 'inputBinding': {'position': 17, 'separate': False, 'prefix': 'utgmhapConcurrency='}}, {'id': 'obtmmapConcurrency', 'type': 'int', 'default': 6, 'inputBinding': {'position': 16, 'separate': False, 'prefix': 'obtmmapConcurrency='}}, {'id': 'utgmmapConcurrency', 'type': 'int', 'default': 6, 'inputBinding': {'position': 17, 'separate': False, 'prefix': 'utgmmapConcurrency='}}, {'id': 'obtovlConcurrency', 'type': 'int', 'default': 6, 'inputBinding': {'position': 16, 'separate': False, 'prefix': 'obtovlConcurrency='}}, {'id': 'utgovlConcurrency', 'type': 'int', 'default': 6, 'inputBinding': {'position': 17, 'separate': False, 'prefix': 'utgovlConcurrency='}}]",
    "cwl_outputs": "[{'id': 'trimmedReads', 'type': 'File', 'outputBinding': {'glob': '*/$(inputs.prefix).trimmedReads.fasta.gz'}}, {'id': 'assembly', 'type': 'File', 'outputBinding': {'glob': '*/$(inputs.prefix).contigs.fasta'}}]",
    "cwl_hints": "{'SoftwareRequirement': {'packages': [{'package': 'canu', 'version': ['2.1.1']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['canu', '-trim-assemble']",
    "cwl_arguments": "[]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Assemble PacBio reads (canu -correct -trim -assemble)",
    "cwl_stdout": "out",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/canuCorrect.cwl",
    "sha": "ed249f049218315391ebe1f2cf224e472781f9c2",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/canuCorrect.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"canu\"\ndoc: \"Assemble PacBio reads (canu -correct -trim -assemble)\"\nrequirements:\n  - class: InlineJavascriptRequirement\ninputs:\n  - id: prefix\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -p\n  - id: assemblyDir\n    type: string\n    default: CanuAssembly\n    inputBinding:\n      position: 2\n      prefix: -d\n  - id: genomeSize\n    type: string\n    inputBinding:\n      position: 3\n      separate: false\n      prefix: genomeSize=\n#  - id: stopOnReadQuality\n#    type: string\n#    default: \"true\"\n#    inputBinding:\n#      position: 4\n#      separate: false\n#      prefix: stopOnReadQuality=\n  - id: pacbio\n    type: File\n    inputBinding:\n      position: 6\n      prefix: -pacbio\n  - id: corMaxEvidenceErate\n    type: float\n    default: 0.20\n    inputBinding:\n      position: 7\n      separate: false\n      prefix: corMaxEvidenceErate=\n  - id: useGrid\n    type: string\n    default: \"false\"\n    inputBinding:\n      position: 10\n      separate: false\n      prefix: useGrid=\n#  - id: ovsMethod\n#    type: string\n#    default: \"sequential\"\n#    inputBinding:\n#      position: 11\n#      separate: false\n#      prefix: ovsMethod=\n#  - id: gnuplotTested\n#    type: string\n#    default: \"true\"\n#    inputBinding:\n#      position: 12\n#      separate: false\n#      prefix: gnuplotTested=\n  - id: minThreads\n    type: int\n    inputBinding:\n      position: 13\n      separate: false\n      prefix: minThreads=\n  - id: maxThreads\n    type: int\n    inputBinding:\n      position: 14\n      separate: false\n      prefix: maxThreads=\n  - id: corConcurrency\n    type: int\n    default: 6\n    inputBinding:\n      position: 15\n      separate: false\n      prefix: corConcurrency=\noutputs:\n  - id: correctedReads\n    type: File\n    outputBinding:\n      glob: \"*/$(inputs.prefix).correctedReads.fasta.gz\"\nbaseCommand: [\"canu\", \"-correct\"]\narguments: []\nstdout: out\nhints:\n  SoftwareRequirement:\n    packages:\n    - package: canu\n      version:\n      - \"2.1.1\"\n      \n#hints:\n#  - class: DockerRequirement\n#    dockerPull: quay.io/biocontainers/canu:2.1.1--he1b5a44_0\n#    #dockerPull: quay.io/biocontainers/canu:1.8--pl526h470a237_0\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "canu",
    "cwl_inputs": "[{'id': 'prefix', 'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-p'}}, {'id': 'assemblyDir', 'type': 'string', 'default': 'CanuAssembly', 'inputBinding': {'position': 2, 'prefix': '-d'}}, {'id': 'genomeSize', 'type': 'string', 'inputBinding': {'position': 3, 'separate': False, 'prefix': 'genomeSize='}}, {'id': 'pacbio', 'type': 'File', 'inputBinding': {'position': 6, 'prefix': '-pacbio'}}, {'id': 'corMaxEvidenceErate', 'type': 'float', 'default': 0.2, 'inputBinding': {'position': 7, 'separate': False, 'prefix': 'corMaxEvidenceErate='}}, {'id': 'useGrid', 'type': 'string', 'default': 'false', 'inputBinding': {'position': 10, 'separate': False, 'prefix': 'useGrid='}}, {'id': 'minThreads', 'type': 'int', 'inputBinding': {'position': 13, 'separate': False, 'prefix': 'minThreads='}}, {'id': 'maxThreads', 'type': 'int', 'inputBinding': {'position': 14, 'separate': False, 'prefix': 'maxThreads='}}, {'id': 'corConcurrency', 'type': 'int', 'default': 6, 'inputBinding': {'position': 15, 'separate': False, 'prefix': 'corConcurrency='}}]",
    "cwl_outputs": "[{'id': 'correctedReads', 'type': 'File', 'outputBinding': {'glob': '*/$(inputs.prefix).correctedReads.fasta.gz'}}]",
    "cwl_hints": "{'SoftwareRequirement': {'packages': [{'package': 'canu', 'version': ['2.1.1']}]}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['canu', '-correct']",
    "cwl_arguments": "[]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Assemble PacBio reads (canu -correct -trim -assemble)",
    "cwl_stdout": "out",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/centrifuge.cwl",
    "sha": "7a82dbb3b1972b4c5be8682b49874f39ca3dd8de",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/centrifuge.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"centrifuge\"\ndoc: \"Classify PacBio reads using the program centrifuge\"\nrequirements:\n  - class: InlineJavascriptRequirement\ninputs:\n  - id: database\n    type: Directory\n#    inputBinding:\n#      position: 1\n#      prefix: -x\n  - id: trimmedReads\n    type: File\n    inputBinding:\n      position: 3\n      prefix: -U\n  - id: threads\n    type: int\n    inputBinding:\n      position: 4\n      prefix: -p\n  - id: reportFile\n    type: string\n    default: report.txt\n    inputBinding:\n      position: 5\n      prefix: --report-file\n  - id: classificationFile\n    type: string\n    default: classification.txt\n    inputBinding:\n      position: 6\n      prefix: -S\n  - id: partialMatch\n    type: int\n    default: 100\n    inputBinding:\n      position: 7\n      prefix: --min-hitlen\noutputs:\n  - id: report\n    type: File\n    outputBinding:\n      glob: \"$(inputs.reportFile)\"\n  - id: classification\n    type: File\n    outputBinding:\n      glob: \"$(inputs.classificationFile)\"\nbaseCommand: [\"centrifuge\",\"-f\"]\narguments:\n- valueFrom: $(inputs.database.path)/nt\n  prefix: -x\n  position: 1\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/centrifuge:1.0.3--py27pl5.22.0_3\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "centrifuge",
    "cwl_inputs": "[{'id': 'database', 'type': 'Directory'}, {'id': 'trimmedReads', 'type': 'File', 'inputBinding': {'position': 3, 'prefix': '-U'}}, {'id': 'threads', 'type': 'int', 'inputBinding': {'position': 4, 'prefix': '-p'}}, {'id': 'reportFile', 'type': 'string', 'default': 'report.txt', 'inputBinding': {'position': 5, 'prefix': '--report-file'}}, {'id': 'classificationFile', 'type': 'string', 'default': 'classification.txt', 'inputBinding': {'position': 6, 'prefix': '-S'}}, {'id': 'partialMatch', 'type': 'int', 'default': 100, 'inputBinding': {'position': 7, 'prefix': '--min-hitlen'}}]",
    "cwl_outputs": "[{'id': 'report', 'type': 'File', 'outputBinding': {'glob': '$(inputs.reportFile)'}}, {'id': 'classification', 'type': 'File', 'outputBinding': {'glob': '$(inputs.classificationFile)'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/centrifuge:1.0.3--py27pl5.22.0_3'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['centrifuge', '-f']",
    "cwl_arguments": "[{'valueFrom': '$(inputs.database.path)/nt', 'prefix': '-x', 'position': 1}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Classify PacBio reads using the program centrifuge",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/combinecats.cwl",
    "sha": "4a9a69e784e6ee0c4da5b6209cbc9d95e9561e5f",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/combinecats.cwl",
    "content": "cwlVersion: cwl:v1.0\nclass: CommandLineTool\nrequirements:\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: pakorhon/combinecats:v0.0.4-beta\ninputs:\n  - id: assembly\n    type: File\n    inputBinding:\n      prefix: -a\n      position: 2\n  - id: categories\n    type: File[]\n    inputBinding:\n      prefix: -c\n      position: 3\n      separate: true\n      itemSeparator: \",\"\noutputs:\n  - id: repResFiles\n    type: File[]\n    outputBinding:\n      glob: \"*/all.*\"\n  - id: maskedAssembly\n    type: File\n    outputBinding:\n      glob: \"*/$(inputs.assembly.basename).masked\"\nbaseCommand: [\"bash\",\"/home/combine.sh\"]\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'assembly', 'type': 'File', 'inputBinding': {'prefix': '-a', 'position': 2}}, {'id': 'categories', 'type': 'File[]', 'inputBinding': {'prefix': '-c', 'position': 3, 'separate': True, 'itemSeparator': ','}}]",
    "cwl_outputs": "[{'id': 'repResFiles', 'type': 'File[]', 'outputBinding': {'glob': '*/all.*'}}, {'id': 'maskedAssembly', 'type': 'File', 'outputBinding': {'glob': '*/$(inputs.assembly.basename).masked'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'pakorhon/combinecats:v0.0.4-beta'}]",
    "cwl_cwlVersion": "cwl:v1.0",
    "cwl_baseCommand": "['bash', '/home/combine.sh']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/decon.cwl",
    "sha": "1782338b700da2f697446aa71012187495655191",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/decon.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"centrifuge\"\ndoc: \"Decontaminate PacBio reads using the program centrifuge\"\nrequirements:\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: pakorhon/decon:v0.0.5-beta\ninputs:\n  - id: prefix\n    type: string\n    inputBinding:\n      position: 1\n      prefix: -r\n  - id: trimmedReads\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -U\n  - id : classificationFile\n    type: File\n    default: classification.txt\n    inputBinding:\n      position: 2\n      prefix: -S\n  - id : taxons\n    type:\n      type: array\n      items: int\n    inputBinding:\n      position: 3\n      itemSeparator: \",\"\n      separate: true\n      prefix: -t\n  - id : mappedIds\n    type: File\n    inputBinding:\n      position: 4\n      prefix: -m\n  - id : partialMatch\n    type: int\n    default: 100\n    inputBinding:\n      position: 5\n      prefix: -p\noutputs:\n  - id: conReads\n    type: File\n    outputBinding:\n      glob: \"$(inputs.prefix).contaminatedReads.fasta.gz\"\n  - id: deconReads\n    type: File\n    outputBinding:\n      glob: \"$(inputs.prefix).trimmedReads.fasta.gz\"\n  - id: deconReadIds\n    type: File\n    outputBinding:\n      glob: \"contaminated.read.ids.unique\"\n  - id: contaminatedReadsIds\n    type: File\n    outputBinding:\n      glob: \"taxon.ids\"\n  - id: classificationConverted\n    type: File\n    outputBinding:\n      glob: \"classification.converted\"\nbaseCommand: [\"bash\",\"/home/decon.sh\"]\narguments: []\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "centrifuge",
    "cwl_inputs": "[{'id': 'prefix', 'type': 'string', 'inputBinding': {'position': 1, 'prefix': '-r'}}, {'id': 'trimmedReads', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-U'}}, {'id': 'classificationFile', 'type': 'File', 'default': 'classification.txt', 'inputBinding': {'position': 2, 'prefix': '-S'}}, {'id': 'taxons', 'type': {'type': 'array', 'items': 'int'}, 'inputBinding': {'position': 3, 'itemSeparator': ',', 'separate': True, 'prefix': '-t'}}, {'id': 'mappedIds', 'type': 'File', 'inputBinding': {'position': 4, 'prefix': '-m'}}, {'id': 'partialMatch', 'type': 'int', 'default': 100, 'inputBinding': {'position': 5, 'prefix': '-p'}}]",
    "cwl_outputs": "[{'id': 'conReads', 'type': 'File', 'outputBinding': {'glob': '$(inputs.prefix).contaminatedReads.fasta.gz'}}, {'id': 'deconReads', 'type': 'File', 'outputBinding': {'glob': '$(inputs.prefix).trimmedReads.fasta.gz'}}, {'id': 'deconReadIds', 'type': 'File', 'outputBinding': {'glob': 'contaminated.read.ids.unique'}}, {'id': 'contaminatedReadsIds', 'type': 'File', 'outputBinding': {'glob': 'taxon.ids'}}, {'id': 'classificationConverted', 'type': 'File', 'outputBinding': {'glob': 'classification.converted'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'pakorhon/decon:v0.0.5-beta'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', '/home/decon.sh']",
    "cwl_arguments": "[]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Decontaminate PacBio reads using the program centrifuge",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/expressiontoolbam.cwl",
    "sha": "db3f85236fe870449dfcf53b837d25742b920488",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/expressiontoolbam.cwl",
    "content": "cwlVersion: cwl:v1.0\nclass: ExpressionTool\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - $(inputs.masterFile)\n      - $(inputs.bai)\ninputs:\n  masterFile:\n    type: File\n  bai: File\noutputs:\n  hybridFile:\n    type: File\nexpression: >\n  ${\n  var ret = inputs.masterFile;\n  ret[\"secondaryFiles\"] = [\n      inputs.bai,\n  ];\n  return { \"hybridFile\": ret } ; }\n",
    "cwl_class": "ExpressionTool",
    "cwl_id": null,
    "cwl_inputs": "{'masterFile': {'type': 'File'}, 'bai': 'File'}",
    "cwl_outputs": "{'hybridFile': {'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "cwl:v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": "${ var ret = inputs.masterFile; ret[\"secondaryFiles\"] = [\n    inputs.bai,\n]; return { \"hybridFile\": ret } ; }\n",
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/expressiontoolbowtie.cwl",
    "sha": "52878e1b726b4c1abbd1b7575190376d8dd82ab2",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/expressiontoolbowtie.cwl",
    "content": "cwlVersion: cwl:v1.0\nclass: ExpressionTool\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - $(inputs.masterFile)\n      - $(inputs.bt2_1)\n      - $(inputs.bt2_2)\n      - $(inputs.bt2_3)\n      - $(inputs.bt2_4)\n      - $(inputs.bt2rev1)\n      - $(inputs.bt2rev2)\ninputs:\n  masterFile:\n    type: File\n  bt2_1: File\n  bt2_2: File\n  bt2_3: File\n  bt2_4: File\n  bt2rev1: File\n  bt2rev2: File\noutputs:\n  hybridFile:\n    type: File\nexpression: >\n  ${\n  var ret = inputs.masterFile;\n  ret[\"secondaryFiles\"] = [\n      inputs.bt2_1,\n      inputs.bt2_2,\n      inputs.bt2_3,\n      inputs.bt2_4,\n      inputs.bt2rev1,\n      inputs.bt2rev2,\n  ];\n  return { \"hybridFile\": ret } ; }\n",
    "cwl_class": "ExpressionTool",
    "cwl_id": null,
    "cwl_inputs": "{'masterFile': {'type': 'File'}, 'bt2_1': 'File', 'bt2_2': 'File', 'bt2_3': 'File', 'bt2_4': 'File', 'bt2rev1': 'File', 'bt2rev2': 'File'}",
    "cwl_outputs": "{'hybridFile': {'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "cwl:v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": "${ var ret = inputs.masterFile; ret[\"secondaryFiles\"] = [\n    inputs.bt2_1,\n    inputs.bt2_2,\n    inputs.bt2_3,\n    inputs.bt2_4,\n    inputs.bt2rev1,\n    inputs.bt2rev2,\n]; return { \"hybridFile\": ret } ; }\n",
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/expressiontoolrepeats.cwl",
    "sha": "959560857b4bacf44a8ba56e9c40e1a5962a0f1c",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/expressiontoolrepeats.cwl",
    "content": "cwlVersion: cwl:v1.0\nclass: ExpressionTool\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - $(inputs.masterFile)\n      - $(inputs.translation)\n      - $(inputs.nsq)\n      - $(inputs.nin)\n      - $(inputs.nhr)\n      - $(inputs.nog)\n      - $(inputs.nni)\n      - $(inputs.nnd)\ninputs:\n  masterFile:\n    type: File\n  translation: File\n  nsq: File\n  nin: File\n  nhr: File\n  nog: File\n  nni: File\n  nnd: File\noutputs:\n  hybridFile:\n    type: File\nexpression: >\n  ${\n  var ret = inputs.masterFile;\n  ret[\"secondaryFiles\"] = [\n      inputs.translation,\n      inputs.nsq,\n      inputs.nin,\n      inputs.nhr,\n      inputs.nog,\n      inputs.nni,\n      inputs.nnd,\n  ];\n  return { \"hybridFile\": ret } ; }\n",
    "cwl_class": "ExpressionTool",
    "cwl_id": null,
    "cwl_inputs": "{'masterFile': {'type': 'File'}, 'translation': 'File', 'nsq': 'File', 'nin': 'File', 'nhr': 'File', 'nog': 'File', 'nni': 'File', 'nnd': 'File'}",
    "cwl_outputs": "{'hybridFile': {'type': 'File'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "cwl:v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": "${ var ret = inputs.masterFile; ret[\"secondaryFiles\"] = [\n    inputs.translation,\n    inputs.nsq,\n    inputs.nin,\n    inputs.nhr,\n    inputs.nog,\n    inputs.nni,\n    inputs.nnd,\n]; return { \"hybridFile\": ret } ; }\n",
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/haplomerger.cwl",
    "sha": "78c2c1bf726783131d901516b7c654325600b732",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/haplomerger.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"quiver\"\ndoc: \"Combine haplotypes in one sequence in a diploid genome\"\nrequirements:\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: pakorhon/haplomerger:v0.0.7-beta\ninputs:\n  - id: assembly\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -i\n  - id: maskedAssembly\n    type: File\n    inputBinding:\n      position: 2\n      prefix: -m\n  - id: trimmedReads\n    type: File\n    inputBinding:\n      position: 3\n      prefix: -r\n  - id: threads\n    type: int\n    inputBinding:\n      position: 4\n      prefix: -T\noutputs:\n  - id: scoreMatrix\n    type: File\n    outputBinding:\n      glob: \"workDir/*/scoreMatrix.q\"\n  - id: mergedAssembly\n    type: File\n    outputBinding:\n      glob: \"workDir/*.haplomerged.fa*\"\nbaseCommand: [\"/home/haploMerger.sh\"]\narguments: []\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "quiver",
    "cwl_inputs": "[{'id': 'assembly', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-i'}}, {'id': 'maskedAssembly', 'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-m'}}, {'id': 'trimmedReads', 'type': 'File', 'inputBinding': {'position': 3, 'prefix': '-r'}}, {'id': 'threads', 'type': 'int', 'inputBinding': {'position': 4, 'prefix': '-T'}}]",
    "cwl_outputs": "[{'id': 'scoreMatrix', 'type': 'File', 'outputBinding': {'glob': 'workDir/*/scoreMatrix.q'}}, {'id': 'mergedAssembly', 'type': 'File', 'outputBinding': {'glob': 'workDir/*.haplomerged.fa*'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'pakorhon/haplomerger:v0.0.7-beta'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['/home/haploMerger.sh']",
    "cwl_arguments": "[]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Combine haplotypes in one sequence in a diploid genome",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/hdf5check.cwl",
    "sha": "ea7ad18f2914fcc3b91ace6618b53e4cdde7b00d",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/hdf5check.cwl",
    "content": "cwlVersion: cwl:v1.0\nclass: CommandLineTool\nrequirements:\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: \"pakorhon/hdf5check:v0.0.6-beta\"\ninputs:\n  - id: directory\n    type: Directory\n    inputBinding:\n      prefix: -d\n      position: 1\n  - id: threads\n    type: int\n    default: 0\n    inputBinding:\n      prefix: -T\n      position: 2\n  - id: results\n    type: string\n    default: ResultsHdf5\n    inputBinding:\n      prefix: -r\n      position: 3\n  - id: fastq\n    type: boolean\n    default: false\n    inputBinding:\n      prefix: -b\n      position: 4\noutputs:\n  - id: pbFastqReads\n    type: File\n    outputBinding:\n      glob: \"*/pbReads.fastq\"\nbaseCommand: [\"python\",\"/home/Assemblosis/Run/hdf5check/hdf5Check.py\"]\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'directory', 'type': 'Directory', 'inputBinding': {'prefix': '-d', 'position': 1}}, {'id': 'threads', 'type': 'int', 'default': 0, 'inputBinding': {'prefix': '-T', 'position': 2}}, {'id': 'results', 'type': 'string', 'default': 'ResultsHdf5', 'inputBinding': {'prefix': '-r', 'position': 3}}, {'id': 'fastq', 'type': 'boolean', 'default': False, 'inputBinding': {'prefix': '-b', 'position': 4}}]",
    "cwl_outputs": "[{'id': 'pbFastqReads', 'type': 'File', 'outputBinding': {'glob': '*/pbReads.fastq'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'pakorhon/hdf5check:v0.0.6-beta'}]",
    "cwl_cwlVersion": "cwl:v1.0",
    "cwl_baseCommand": "['python', '/home/Assemblosis/Run/hdf5check/hdf5Check.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/indexassembly.cwl",
    "sha": "4361d3b02338cbacf48552bcb94969abb01ac3b7",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/indexassembly.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"BuildDatabase\"\ndoc: \"Build an indexed database for RepeatModeler from given scaffolds\"\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - $(inputs.scaffolds)\n \ninputs:\n  - id: engine\n    type: string\n    default: ncbi\n    inputBinding:\n      prefix: -engine\n      position: 2\n  - id: scaffolds\n    type: File\n    inputBinding:\n      position: 3\n\noutputs:\n#  - id: indexFiles\n#    type: File[]\n#    outputBinding:\n#      glob: \"$(inputs.scaffolds.basename).*\"\n  - id: pilonPolishedAssembly\n    type: File\n    outputBinding:\n      glob: \"$(inputs.scaffolds.basename)\"\n  - id: translation\n    type: File\n    outputBinding:\n      glob: \"$(inputs.scaffolds.basename).translation\"\n  - id: nsq\n    type: File\n    outputBinding:\n      glob: \"$(inputs.scaffolds.basename).nsq\"\n  - id: nin\n    type: File\n    outputBinding:\n      glob: \"$(inputs.scaffolds.basename).nin\"\n  - id: nhr\n    type: File\n    outputBinding:\n      glob: \"$(inputs.scaffolds.basename).nhr\"\n  - id: nog\n    type: File\n    outputBinding:\n      glob: \"$(inputs.scaffolds.basename).nog\"\n  - id: nni\n    type: File\n    outputBinding:\n      glob: \"$(inputs.scaffolds.basename).nni\"\n  - id: nnd\n    type: File\n    outputBinding:\n      glob: \"$(inputs.scaffolds.basename).nnd\"\n\nbaseCommand: [\"BuildDatabase\"]\narguments:\n- -name\n- valueFrom: $(inputs.scaffolds.basename)\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/repeatmodeler:1.0.11--pl526_1\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "BuildDatabase",
    "cwl_inputs": "[{'id': 'engine', 'type': 'string', 'default': 'ncbi', 'inputBinding': {'prefix': '-engine', 'position': 2}}, {'id': 'scaffolds', 'type': 'File', 'inputBinding': {'position': 3}}]",
    "cwl_outputs": "[{'id': 'pilonPolishedAssembly', 'type': 'File', 'outputBinding': {'glob': '$(inputs.scaffolds.basename)'}}, {'id': 'translation', 'type': 'File', 'outputBinding': {'glob': '$(inputs.scaffolds.basename).translation'}}, {'id': 'nsq', 'type': 'File', 'outputBinding': {'glob': '$(inputs.scaffolds.basename).nsq'}}, {'id': 'nin', 'type': 'File', 'outputBinding': {'glob': '$(inputs.scaffolds.basename).nin'}}, {'id': 'nhr', 'type': 'File', 'outputBinding': {'glob': '$(inputs.scaffolds.basename).nhr'}}, {'id': 'nog', 'type': 'File', 'outputBinding': {'glob': '$(inputs.scaffolds.basename).nog'}}, {'id': 'nni', 'type': 'File', 'outputBinding': {'glob': '$(inputs.scaffolds.basename).nni'}}, {'id': 'nnd', 'type': 'File', 'outputBinding': {'glob': '$(inputs.scaffolds.basename).nnd'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/repeatmodeler:1.0.11--pl526_1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['BuildDatabase']",
    "cwl_arguments": "['-name', {'valueFrom': '$(inputs.scaffolds.basename)'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Build an indexed database for RepeatModeler from given scaffolds",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/pilon.cwl",
    "sha": "5df5ebc6055e98b9bc5b72a6670764ea83170e6f",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/pilon.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"pilon\"\ndoc: \"Polishing an assembly using Illumina reads\"\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: EnvVarRequirement\n    envDef:\n      CLASSPATH: /usr/local/share/pilon-1.23-2/pilon-1.23.jar\n      #CLASSPATH: /usr/local/share/pilon-1.22-0/pilon-1.22.jar\n \ninputs:\n  - id: reference\n    type: File\n    inputBinding:\n      prefix: --genome\n      position: 1\n  - id: bamPe\n    type: File[]\n    secondaryFiles:\n      - .bai\n  - id: output\n    type: string\n    inputBinding:\n      prefix: --output\n      position: 3\n  - id: diploidOrganism\n    type: boolean\n    inputBinding:\n      prefix: --diploid\n      position: 4\n  - id: fix\n    type: string\n    inputBinding:\n      prefix: --fix\n      position: 5\n  - id: modifications\n    type: boolean\n    default: true\n    inputBinding:\n      prefix: --changes\n      position: 6\n  - id: threads\n    type: int\n    default: 1\n    inputBinding:\n      position: 7\n      prefix: --threads\n\narguments:\n- valueFrom: ${var r = []; for (var i = 0; i < inputs.bamPe.length; i++) { r.push(\"--frags\"); r.push(inputs.bamPe[i].path); } return r; }\n  position: 2\n\noutputs:\n  - id: pilonPolishedAssembly\n    type: File\n    format: edam:format_1929  # FASTA\n    outputBinding:\n      glob: $(inputs.output).fasta\n  - id: pilonPolishedAssemblyChanges\n    type: File\n    outputBinding:\n      glob: $(inputs.output).changes\n\n#baseCommand: [java,com.simontuffs.onejar.Boot]\nbaseCommand: [java,-jar,/usr/local/share/pilon-1.23-2/pilon-1.23.jar]\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/pilon:1.23--2\n    #dockerPull: quay.io/biocontainers/pilon:1.22--py36_0\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "pilon",
    "cwl_inputs": "[{'id': 'reference', 'type': 'File', 'inputBinding': {'prefix': '--genome', 'position': 1}}, {'id': 'bamPe', 'type': 'File[]', 'secondaryFiles': ['.bai']}, {'id': 'output', 'type': 'string', 'inputBinding': {'prefix': '--output', 'position': 3}}, {'id': 'diploidOrganism', 'type': 'boolean', 'inputBinding': {'prefix': '--diploid', 'position': 4}}, {'id': 'fix', 'type': 'string', 'inputBinding': {'prefix': '--fix', 'position': 5}}, {'id': 'modifications', 'type': 'boolean', 'default': True, 'inputBinding': {'prefix': '--changes', 'position': 6}}, {'id': 'threads', 'type': 'int', 'default': 1, 'inputBinding': {'position': 7, 'prefix': '--threads'}}]",
    "cwl_outputs": "[{'id': 'pilonPolishedAssembly', 'type': 'File', 'format': 'edam:format_1929', 'outputBinding': {'glob': '$(inputs.output).fasta'}}, {'id': 'pilonPolishedAssemblyChanges', 'type': 'File', 'outputBinding': {'glob': '$(inputs.output).changes'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/pilon:1.23--2'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['java', '-jar', '/usr/local/share/pilon-1.23-2/pilon-1.23.jar']",
    "cwl_arguments": "[{'valueFrom': '${var r = []; for (var i = 0; i < inputs.bamPe.length; i++) { r.push(\"--frags\"); r.push(inputs.bamPe[i].path); } return r; }', 'position': 2}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Polishing an assembly using Illumina reads",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/removeBubbles.cwl",
    "sha": "09fce73b3cb90f075de6a5b15d06f55094a935cc",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/removeBubbles.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"removeBubbles\"\ndoc: \"Remove bubble contigs from assembled genome\"\nrequirements:\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: pakorhon/removebubbles:v0.0.1-beta\ninputs:\n  - id: contigs\n    type: File\n    inputBinding:\n      prefix: -a\n      position: 1\noutputs:\n  - id: assembly\n    type: File\n    outputBinding:\n      glob: \"filtered.$(inputs.contigs.basename)\"\nbaseCommand: [\"bash\",\"/home/rmBubbles.sh\"]\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "removeBubbles",
    "cwl_inputs": "[{'id': 'contigs', 'type': 'File', 'inputBinding': {'prefix': '-a', 'position': 1}}]",
    "cwl_outputs": "[{'id': 'assembly', 'type': 'File', 'outputBinding': {'glob': 'filtered.$(inputs.contigs.basename)'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'pakorhon/removebubbles:v0.0.1-beta'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', '/home/rmBubbles.sh']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Remove bubble contigs from assembled genome",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/renameReads.cwl",
    "sha": "1b09d4bf7422b0fdbc45dc11c886fb3bec25037a",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/renameReads.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"centrifuge\"\ndoc: \"Decontaminate PacBio reads using the program centrifuge\"\nrequirements:\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: pakorhon/renamereads:v0.0.4-beta\ninputs:\n  - id: trimmedReads\n    type: File\n    inputBinding:\n      position: 1\n      prefix: -U\noutputs:\n  - id: renamedReads\n    type: File\n    outputBinding:\n      glob: \"rn_*\"\n  - id: mappedIds\n    type: File\n    outputBinding:\n      glob: \"mapped.ids\"\nbaseCommand: [\"bash\",\"/home/renamereads.sh\"]\narguments: []\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "centrifuge",
    "cwl_inputs": "[{'id': 'trimmedReads', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-U'}}]",
    "cwl_outputs": "[{'id': 'renamedReads', 'type': 'File', 'outputBinding': {'glob': 'rn_*'}}, {'id': 'mappedIds', 'type': 'File', 'outputBinding': {'glob': 'mapped.ids'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'pakorhon/renamereads:v0.0.4-beta'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', '/home/renamereads.sh']",
    "cwl_arguments": "[]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Decontaminate PacBio reads using the program centrifuge",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/repeatmasker.cwl",
    "sha": "37c614b6ea4130b988610aaba761b6d9984eee81",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/repeatmasker.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"RepeatMasker\"\ndoc: \"Masks given genomic scaffolds using given mask option and/or repeat file\"\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - $(inputs.repeatLibrary)\n\ninputs:\n  - id: threads\n    type: int\n    inputBinding:\n      prefix: -pa\n      position: 2\n  - id: engine\n    type: string\n    default: ncbi\n    inputBinding:\n      prefix: -engine\n      position: 3\n  - id: density\n    type: boolean\n    default: true\n    inputBinding:\n      position: 3\n      prefix: -excln\n  - id: calculateGc\n    type: boolean\n    default: true\n    inputBinding:\n      position: 4\n      prefix: -gccalc\n  - id: slowSearch\n    type: boolean\n    default: true\n    inputBinding:\n      position: 5\n      prefix: -s\n  - id: skipBacterial\n    type: boolean\n    default: true\n    inputBinding:\n      position: 6\n      prefix: -no_is\n  - id: createGff\n    type: boolean\n    default: true\n    inputBinding:\n      position: 7\n      prefix: -gff\n  - id: noInterspersed\n    type: boolean\n    inputBinding:\n      position: 8\n      prefix: -noint\n  - id: noLowComplexity\n    type: boolean\n    inputBinding:\n      position: 9\n      prefix: -nolow\n  - id: repeatLibrary\n    type: File\n    inputBinding:\n      position: 10\n      prefix: -lib\n  - id: reference\n    type: File\n    inputBinding:\n      position: 11\n\noutputs:\n  - id: categoryFile\n    type: File\n    outputBinding:\n      glob: \"$(inputs.reference.basename).cat*\"\n\nbaseCommand: [\"RepeatMasker\"]\narguments: [\"-dir\", $(runtime.outdir)]\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/repeatmasker:4.0.9_p2--pl526_2\n    #dockerPull: quay.io/biocontainers/repeatmasker:4.0.7--pl526_13\n    #dockerPull: quay.io/biocontainers/repeatmasker:4.0.6--pl5.22.0_10\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "RepeatMasker",
    "cwl_inputs": "[{'id': 'threads', 'type': 'int', 'inputBinding': {'prefix': '-pa', 'position': 2}}, {'id': 'engine', 'type': 'string', 'default': 'ncbi', 'inputBinding': {'prefix': '-engine', 'position': 3}}, {'id': 'density', 'type': 'boolean', 'default': True, 'inputBinding': {'position': 3, 'prefix': '-excln'}}, {'id': 'calculateGc', 'type': 'boolean', 'default': True, 'inputBinding': {'position': 4, 'prefix': '-gccalc'}}, {'id': 'slowSearch', 'type': 'boolean', 'default': True, 'inputBinding': {'position': 5, 'prefix': '-s'}}, {'id': 'skipBacterial', 'type': 'boolean', 'default': True, 'inputBinding': {'position': 6, 'prefix': '-no_is'}}, {'id': 'createGff', 'type': 'boolean', 'default': True, 'inputBinding': {'position': 7, 'prefix': '-gff'}}, {'id': 'noInterspersed', 'type': 'boolean', 'inputBinding': {'position': 8, 'prefix': '-noint'}}, {'id': 'noLowComplexity', 'type': 'boolean', 'inputBinding': {'position': 9, 'prefix': '-nolow'}}, {'id': 'repeatLibrary', 'type': 'File', 'inputBinding': {'position': 10, 'prefix': '-lib'}}, {'id': 'reference', 'type': 'File', 'inputBinding': {'position': 11}}]",
    "cwl_outputs": "[{'id': 'categoryFile', 'type': 'File', 'outputBinding': {'glob': '$(inputs.reference.basename).cat*'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/repeatmasker:4.0.9_p2--pl526_2'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['RepeatMasker']",
    "cwl_arguments": "['-dir', '$(runtime.outdir)']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Masks given genomic scaffolds using given mask option and/or repeat file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/repeatmodeler.cwl",
    "sha": "2020437c0f54b081954acf09861d60c5cb0615aa",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/repeatmodeler.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"RepeatMasker\"\ndoc: \"Infers genome specific repeats for given scaffolds\"\nrequirements:\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: pakorhon/repeatmodeler:v0.0.6-beta\ninputs:\n  - id: repBaseLibrary\n    type: File\n  - id: engine\n    type: string\n    default: ncbi\n    inputBinding:\n      prefix: -engine\n      position: 1\n  - id: threads\n    type: int\n    inputBinding:\n      prefix: -pa\n      position: 2\n  - id: database\n    type: File\n    inputBinding:\n      position: 3\n      prefix: -database\n    secondaryFiles:\n      - .translation\n      - .nsq\n      - .nin\n      - .nhr\n      - .nog\n      - .nni\n      - .nnd\n\noutputs:\n  - id: repeatLibrary\n    type: File\n    outputBinding:\n      glob: \"*/RepeatMasker.lib\"\n  - id: repeatFastaFile\n    type: File\n    outputBinding:\n      glob: \"RM*/consensi.fa\"\n#  - id: repeatFastaFileClassified\n#    type: File?\n#    outputBinding:\n#      glob: \"RM*/consensi.fa.classified\"\n\nbaseCommand: [\"/home/repeatModeler.sh\"]\narguments: []\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "RepeatMasker",
    "cwl_inputs": "[{'id': 'repBaseLibrary', 'type': 'File'}, {'id': 'engine', 'type': 'string', 'default': 'ncbi', 'inputBinding': {'prefix': '-engine', 'position': 1}}, {'id': 'threads', 'type': 'int', 'inputBinding': {'prefix': '-pa', 'position': 2}}, {'id': 'database', 'type': 'File', 'inputBinding': {'position': 3, 'prefix': '-database'}, 'secondaryFiles': ['.translation', '.nsq', '.nin', '.nhr', '.nog', '.nni', '.nnd']}]",
    "cwl_outputs": "[{'id': 'repeatLibrary', 'type': 'File', 'outputBinding': {'glob': '*/RepeatMasker.lib'}}, {'id': 'repeatFastaFile', 'type': 'File', 'outputBinding': {'glob': 'RM*/consensi.fa'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'pakorhon/repeatmodeler:v0.0.6-beta'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['/home/repeatModeler.sh']",
    "cwl_arguments": "[]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Infers genome specific repeats for given scaffolds",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/samindex.cwl",
    "sha": "1d36ee238a297d17373f9f241fd3ff793f8cbeef",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/samindex.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"samtoolsIndex\"\ndoc: \"Indexes sorted the BAM file\"\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - $(inputs.inputBamFile)\ninputs:\n  - id: inputBamFile\n    type: File\n    inputBinding:\n      position: 1\n\narguments:\n  - valueFrom: $(inputs.inputBamFile.basename).bai\n    position: 2\n\noutputs:\n  - id: sortedBamFile\n    type: File\n    outputBinding:\n      glob: \"$(inputs.inputBamFile.basename)\"\n  - id: bamIndexFile\n    type: File\n    outputBinding:\n      glob: \"$(inputs.inputBamFile.basename).bai\"\n\nbaseCommand: [samtools, index]\n\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/samtools:1.11--h6270b1f_0\n    #dockerPull: quay.io/biocontainers/samtools:1.6--0\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "samtoolsIndex",
    "cwl_inputs": "[{'id': 'inputBamFile', 'type': 'File', 'inputBinding': {'position': 1}}]",
    "cwl_outputs": "[{'id': 'sortedBamFile', 'type': 'File', 'outputBinding': {'glob': '$(inputs.inputBamFile.basename)'}}, {'id': 'bamIndexFile', 'type': 'File', 'outputBinding': {'glob': '$(inputs.inputBamFile.basename).bai'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/samtools:1.11--h6270b1f_0'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'index']",
    "cwl_arguments": "[{'valueFrom': '$(inputs.inputBamFile.basename).bai', 'position': 2}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Indexes sorted the BAM file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/samsort.cwl",
    "sha": "d38a2ca4e3e23a4f1c026079137e61b012e2f170",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/samsort.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"samtoolsSort\"\ndoc: \"Sorts the SAM file to a BAM file\"\nrequirements:\n  - class: InlineJavascriptRequirement\ninputs:\n  - id: threads\n    type: int\n    default: 1\n    inputBinding:\n      position: 1\n      prefix: -@\n  - id: inputSamFile\n    type: File\n    inputBinding:\n      position: 3\n\narguments:\n  - valueFrom: $(inputs.inputSamFile.basename.slice(0,-4)).bam\n    prefix: -o\n    position: 2\n\noutputs:\n  - id: sortedBamFile\n    type: File\n    outputBinding:\n      glob: \"*.bam\"\n\nbaseCommand: [samtools, sort]\n\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/samtools:1.11--h6270b1f_0",
    "cwl_class": "CommandLineTool",
    "cwl_id": "samtoolsSort",
    "cwl_inputs": "[{'id': 'threads', 'type': 'int', 'default': 1, 'inputBinding': {'position': 1, 'prefix': '-@'}}, {'id': 'inputSamFile', 'type': 'File', 'inputBinding': {'position': 3}}]",
    "cwl_outputs": "[{'id': 'sortedBamFile', 'type': 'File', 'outputBinding': {'glob': '*.bam'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/samtools:1.11--h6270b1f_0'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'sort']",
    "cwl_arguments": "[{'valueFrom': '$(inputs.inputSamFile.basename.slice(0,-4)).bam', 'prefix': '-o', 'position': 2}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Sorts the SAM file to a BAM file",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Run/trimmomaticpe.cwl",
    "sha": "560261d574a70e76d214d398fb690d5aa6d1a66a",
    "source": "https://github.com/vetscience/Assemblosis/blob/master/Run/trimmomaticpe.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: \"trimmomaticpe\"\ndoc: \"Clean paired-end Illumina reads\"\nrequirements:\n  - \"$import\": assembly-typedef.yml\n  - class: InlineJavascriptRequirement\n  - class: EnvVarRequirement\n    envDef:\n      CLASSPATH: /usr/local/share/trimmomatic-0.39-1/trimmomatic.jar\n\ninputs:\n  - id: phred\n    type: string\n    default: '33'\n    inputBinding:\n      prefix: -phred\n      separate: false\n      position: 1\n  - id: threads\n    type: int\n    default: 1\n    inputBinding:\n      position: 2\n      prefix: -threads\n  - id: reads1\n    type: File\n    format: edam:format_1930  # fastq\n    inputBinding:\n      position: 3\n  - id: reads2\n    type: File\n    format: edam:format_1930  # fastq\n    inputBinding:\n      position: 4\n  - id: slidingWindow\n    type: assembly-typedef.yml#slidingWindow?\n    inputBinding:\n      position: 9\n      valueFrom: SLIDINGWINDOW:$(self.windowSize):$(self.requiredQuality)\n  - id: illuminaClip\n    type: assembly-typedef.yml#illuminaClipping?\n    inputBinding:\n      valueFrom: ILLUMINACLIP:$(self.adapters.path):$(self.seedMismatches):$(self.palindromeClipThreshold):$(self.simpleClipThreshold):$(self.minAdapterLength):$(self.keepBothReads)\n#      valueFrom: |\n#        ILLUMINACLIP:$(self.adapters.path):$(self.seedMismatches):$(self.palindromeClipThreshold):$(self.simpleClipThreshold):$(self.minAdapterLength):$(self.keepBothReads)\n      position: 10\n  - id: leading\n    type: int?\n    inputBinding:\n      position: 11\n      prefix: 'LEADING:'\n      separate: false\n  - id: trailing\n    type: int?\n    inputBinding:\n      position: 12\n      prefix: 'TRAILING:'\n      separate: false\n  - id: minlen\n    type: int?\n    inputBinding:\n      position: 13\n      prefix: 'MINLEN:'\n      separate: false\n  - id: headcrop\n    type: int?\n    inputBinding:\n      position: 14\n      prefix: 'HEADCROP:'\n      separate: false\n  - id: avgqual\n    type: int?\n    inputBinding:\n      position: 15\n      prefix: 'AVGQUAL:'\n      separate: false\n\narguments:\n- valueFrom: pe1.$(inputs.reads1.nameroot).fastq.gz\n  position: 5\n- valueFrom: unpe1.$(inputs.reads1.nameroot).fastq.gz\n  position: 6\n- valueFrom: pe2.$(inputs.reads2.nameroot).fastq.gz\n  position: 7\n- valueFrom: unpe2.$(inputs.reads2.nameroot).fastq.gz\n  position: 8\n- valueFrom: trim.log\n  prefix: -trimlog \n  position: 16\n\noutputs:\n  - id: trimmedPe1\n    type: File\n    format: edam:format_1930  # fastq\n    outputBinding:\n      glob: pe1.$(inputs.reads1.nameroot).fastq.gz\n  - id: trimmedUnpe1\n    type: File\n    format: edam:format_1930  # fastq\n    outputBinding:\n      glob: unpe1.$(inputs.reads1.nameroot).fastq.gz\n  - id: trimmedPe2\n    type: File\n    format: edam:format_1930  # fastq\n    outputBinding:\n      glob: pe2.$(inputs.reads2.nameroot).fastq.gz\n  - id: trimmedUnpe2\n    type: File\n    format: edam:format_1930  # fastq\n    outputBinding:\n      glob: unpe2.$(inputs.reads2.nameroot).fastq.gz\n  - id: trimLogFile\n    type: File\n    outputBinding:\n      glob: trim.log\n    label: Trimmomatic log\n\nbaseCommand: [java,org.usadellab.trimmomatic.TrimmomaticPE]\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/trimmomatic:0.39--1\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "trimmomaticpe",
    "cwl_inputs": "[{'id': 'phred', 'type': 'string', 'default': '33', 'inputBinding': {'prefix': '-phred', 'separate': False, 'position': 1}}, {'id': 'threads', 'type': 'int', 'default': 1, 'inputBinding': {'position': 2, 'prefix': '-threads'}}, {'id': 'reads1', 'type': 'File', 'format': 'edam:format_1930', 'inputBinding': {'position': 3}}, {'id': 'reads2', 'type': 'File', 'format': 'edam:format_1930', 'inputBinding': {'position': 4}}, {'id': 'slidingWindow', 'type': 'assembly-typedef.yml#slidingWindow?', 'inputBinding': {'position': 9, 'valueFrom': 'SLIDINGWINDOW:$(self.windowSize):$(self.requiredQuality)'}}, {'id': 'illuminaClip', 'type': 'assembly-typedef.yml#illuminaClipping?', 'inputBinding': {'valueFrom': 'ILLUMINACLIP:$(self.adapters.path):$(self.seedMismatches):$(self.palindromeClipThreshold):$(self.simpleClipThreshold):$(self.minAdapterLength):$(self.keepBothReads)', 'position': 10}}, {'id': 'leading', 'type': 'int?', 'inputBinding': {'position': 11, 'prefix': 'LEADING:', 'separate': False}}, {'id': 'trailing', 'type': 'int?', 'inputBinding': {'position': 12, 'prefix': 'TRAILING:', 'separate': False}}, {'id': 'minlen', 'type': 'int?', 'inputBinding': {'position': 13, 'prefix': 'MINLEN:', 'separate': False}}, {'id': 'headcrop', 'type': 'int?', 'inputBinding': {'position': 14, 'prefix': 'HEADCROP:', 'separate': False}}, {'id': 'avgqual', 'type': 'int?', 'inputBinding': {'position': 15, 'prefix': 'AVGQUAL:', 'separate': False}}]",
    "cwl_outputs": "[{'id': 'trimmedPe1', 'type': 'File', 'format': 'edam:format_1930', 'outputBinding': {'glob': 'pe1.$(inputs.reads1.nameroot).fastq.gz'}}, {'id': 'trimmedUnpe1', 'type': 'File', 'format': 'edam:format_1930', 'outputBinding': {'glob': 'unpe1.$(inputs.reads1.nameroot).fastq.gz'}}, {'id': 'trimmedPe2', 'type': 'File', 'format': 'edam:format_1930', 'outputBinding': {'glob': 'pe2.$(inputs.reads2.nameroot).fastq.gz'}}, {'id': 'trimmedUnpe2', 'type': 'File', 'format': 'edam:format_1930', 'outputBinding': {'glob': 'unpe2.$(inputs.reads2.nameroot).fastq.gz'}}, {'id': 'trimLogFile', 'type': 'File', 'outputBinding': {'glob': 'trim.log'}, 'label': 'Trimmomatic log'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/trimmomatic:0.39--1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['java', 'org.usadellab.trimmomatic.TrimmomaticPE']",
    "cwl_arguments": "[{'valueFrom': 'pe1.$(inputs.reads1.nameroot).fastq.gz', 'position': 5}, {'valueFrom': 'unpe1.$(inputs.reads1.nameroot).fastq.gz', 'position': 6}, {'valueFrom': 'pe2.$(inputs.reads2.nameroot).fastq.gz', 'position': 7}, {'valueFrom': 'unpe2.$(inputs.reads2.nameroot).fastq.gz', 'position': 8}, {'valueFrom': 'trim.log', 'prefix': '-trimlog', 'position': 16}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Clean paired-end Illumina reads",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/spades/spades.cwl",
    "sha": "503cfe9639963ebf271f37b31d28a4a5c7b53083",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/spades/spades.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: spades\nbaseCommand:\n  - bash\n#  - cat\ninputs:\n\n##############\n\n \n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n\n\n\n      \noutputs:\n\n  - id: out_contig_stats\n    type: File\n    outputBinding:\n      glob: out_contig_stats.*\n    doc: \"contig stats, default column_names: name,length,coverage\"\n\n  - id: out_scaffold_stats\n    type: File\n    outputBinding:\n      glob: out_scaffold_stats.*\n    doc: \"scaffold stats, default column_names: name,length,coverage\"\n\n  - id: out_contigs\n    type: File\n    outputBinding:\n      glob: contigs.fasta\n    doc: \"contigs (fasta sequence)\"\n\n  - id: out_scaffolds\n    type: File\n    outputBinding:\n      glob: scaffolds.fasta\n    doc: \"scaffolds (fasta sequence)\"\n\n  - id: all_script\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.sh\"  \n    doc: \"generated script to run spades. for learning purpose\" \n\n  - id: all_log\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.log\"  \n    doc: \"spades output log and warnings\" \n\n\n\n#  - id: out_log\n#    type: File\n#    outputBinding:\n#      glob: spades.log\n#    doc: \"spades output log\"\n\n\n  - id: assembly_graph\n    type: File\n    outputBinding:\n      glob: assembly_graph.fastg\n    doc: \"assembly graph\" \n\n \n  - id: assembly_graph_with_scaffolds\n    type: File\n    outputBinding:\n      glob: assembly_graph_with_scaffolds.gfa\n    doc: \"assembly graph with scaffolds\" \n\n\n############available ouput  files:\n#assembly_graph_with_scaffolds.gfa\n#assembly_graph.fastg\n#warnings.log\n#scaffolds.paths\n#contigs.paths\n#spades_wrapper.sh\n#before_rr.fasta\n#contigs.fasta\n#dataset.info\n#input_dataset.yaml\n#out_contig_stats.tab\n#out_scaffold_stats.tab\n#params.txt\n#run_spades.sh\n#scaffolds.fasta\n#write_tsv.py\n \n\n      \n      \narguments:\n  - spades_wrapper.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n####################\n      - entryname: write_tsv.py\n        entry: |\n               #######input file here\n               #!/usr/bin/env python\n               import sys,re\n               search_str = r'^>(NODE|\\S+)_(\\d+)(?:_|\\s)length_(\\d+)_cov_(\\d+\\.*\\d*).*\\$'\n               replace_str = r'\\1_\\2\\t\\3\\t\\4'\n               cmd = re.compile(search_str)\n               sys.stdout.write('#name\\tlength\\tcoverage\\n')\n               for i,line in enumerate(sys.stdin):\n                  if cmd.match(line):\n                     sys.stdout.write(cmd.sub(replace_str,line))\n\n####################\n      - entryname: spades_wrapper.sh\n        entry: |\n               ####################spades launcher\n               #!/bin/bash\n               ## An example command looks like:\n               ## spades.py -k 21,33,55,77,99,127 --careful -1 Y.fastq.gz -2 X.fastq.gz -t 24 -o output \n               read -d '' MEMORY_GB << EOF\n               ${ \n                //compute memory limits\n                var mem=\"250\"\n                if(runtime.ram){\n                  var bt=runtime.ram * 1048576 //mebibytes to bytes               \n                  bt=bt*0.000000001 //bytes to Gigabytes \n                  mem=parseInt(bt)\n                }\n                return \"-\"+mem\n               }\n               EOF\n               #echo \"MEMORY_GB limit: \\$MEMORY_GB\"\n               read -d '' CORES << EOF\n               ${ \n                //compute core / slot\n                var cores=\"16\" \n                if(runtime.cores){\n                  cores=runtime.cores\n                }\n                return  cores\n               }\n               EOF\n               #echo \"CORES : \\$CORES\"\n               read -d '' SPADES_OPT << EOF\n               ${   \n                 var opt=\"\"\n                   if (inputs.sc==true){\n                    opt+=\" --sc \"\n                   }\n                   if (inputs.onlyassembler==true){\n                    opt+=\" --only-assembler \"\n                   }\n                   if (inputs.careful==true){\n                    opt+=\" --careful \"\n                   }\n                 return opt  \n               }\n               EOF\n\n\n               read -d '' CMD_BASE << EOF\n               spades.py -o . --disable-gzip-output  \n                 \\$SPADES_OPT \n                -t \\$CORES -m \\$MEMORY_GB\n               ${   \n                 var opt=\"\"\n                   if (inputs.auto_kmer_choice==false){\n                    opt+=\" -k \"+inputs.kmers \n                   }\n                 return opt  \n               }\n               ${\n                 var opt=\"\"\n                 if (inputs.cov_state==null || inputs.cov_state == \"auto\"){\n                      opt+=\" --cov-cutoff 'auto' \"\n                  }\n                 else if (inputs.cov_state == \"value\"){\n                      opt+=\" --cov-cutoff '\"+inputs.cov_cutoff+\"' \"\n                  }\n                 if (inputs.iontorrent==true ){\n                      opt+=\" --iontorrent \"\n                 } \n                 return opt  \n               }\n               EOF\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' CMD_READ1 << EOF\n               ${\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n                      if (lmeta.lib_type !=null && lmeta.lib_type == \"paired_end\"){\n                           prefix = 'pe'\n                       } \n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"mate_paired\"){\n                           prefix = 'mp'\n                       }\n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"nxmate_paired\"){\n                           prefix = 'nxmate'\n                       }                       \n                      else {\n                           prefix = 'hqmp'\n                       }\n                      var idx=lmeta.lib_index\n                      lib_prefix[idx]=prefix\n                      opt+=\" --\"+prefix+idx+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n\n               #########################>DEBUG\n\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' ZZDEBUG << EOF\n               ${\n               //var opt=\"inputs.libraries_metadata.length:\"+inputs.libraries_metadata.length+\" \"              \n               //var str = JSON.stringify(inputs.libraries_metadata)\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   opt+=\" not null \"\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n \n                      opt+=\" !!-AA-\"+lmeta.lib_index+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n               #########################<DEBUG\n\n\n\n\n\n\n\n\n\n\n               read -d '' CMD_READ2 << EOF\n               ${\n                 var opt=\"\"\n                 if (inputs.pacbio_reads!=null){\n                   for(var i=0; i<inputs.pacbio_reads.length;i++){\n                      var read=inputs.pacbio_reads[i]\n                      opt+=\" --pacbio fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.nanopore_reads!=null){\n                   for(var i=0; i<inputs.nanopore_reads.length;i++){\n                      var read=inputs.nanopore_reads[i]\n                      opt+=\" --nanopore fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.sanger_reads!=null){\n                   for(var i=0; i<inputs.sanger_reads.length;i++){\n                      var read=inputs.sanger_reads[i]\n                      opt+=\" --sanger fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.trusted_contigs!=null){\n                   for(var i=0; i<inputs.trusted_contigs.length;i++){\n                      var read=inputs.trusted_contigs[i]\n                      opt+=\" --trusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.untrusted_contigs!=null){\n                   for(var i=0; i<inputs.untrusted_contigs.length;i++){\n                      var read=inputs.untrusted_contigs[i]\n                      opt+=\" --untrusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 return opt  \n               }\n               EOF\n               ##########################################\n               read -d '' CMD_POST << EOF\n                 && python write_tsv.py < contigs.fasta > out_contig_stats.tab\n                 && python write_tsv.py < scaffolds.fasta > out_scaffold_stats.tab\n               EOF\n               ##########################################   \n               # echo \"CMD_BASE : \\$CMD_BASE\"  > zz.txt   \\\\\n               #        && echo \"CMD_READ1 : \\$CMD_READ1\"  >> zz.txt   \\\\\n               #        && echo \"CMD_READ2 : \\$CMD_READ2\"  >> zz.txt   \\\\\n               #        && echo \"CMD_POST : \\$CMD_POST\"   >> zz.txt\n               COMMAND=\"\\$CMD_BASE \\$CMD_READ1 \\$CMD_READ2 \\$CMD_POST\"\n               COMMAND=\\$(echo $COMMAND|tr -d '\\\\n')\n               echo \"\\$COMMAND\"  > run_spades.sh\n               bash  ./run_spades.sh\n\n \n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  example workflow for js wrapper generation\n  see  https://github.com/rrwick/Unicycler\n  outputs : all genretated files\n\n\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "spades",
    "cwl_inputs": "[{'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contig_stats', 'type': 'File', 'outputBinding': {'glob': 'out_contig_stats.*'}, 'doc': 'contig stats, default column_names: name,length,coverage'}, {'id': 'out_scaffold_stats', 'type': 'File', 'outputBinding': {'glob': 'out_scaffold_stats.*'}, 'doc': 'scaffold stats, default column_names: name,length,coverage'}, {'id': 'out_contigs', 'type': 'File', 'outputBinding': {'glob': 'contigs.fasta'}, 'doc': 'contigs (fasta sequence)'}, {'id': 'out_scaffolds', 'type': 'File', 'outputBinding': {'glob': 'scaffolds.fasta'}, 'doc': 'scaffolds (fasta sequence)'}, {'id': 'all_script', 'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.sh'}, 'doc': 'generated script to run spades. for learning purpose'}, {'id': 'all_log', 'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.log'}, 'doc': 'spades output log and warnings'}, {'id': 'assembly_graph', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph.fastg'}, 'doc': 'assembly graph'}, {'id': 'assembly_graph_with_scaffolds', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph_with_scaffolds.gfa'}, 'doc': 'assembly graph with scaffolds'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['spades_wrapper.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "example workflow for js wrapper generation\nsee  https://github.com/rrwick/Unicycler\noutputs : all genretated files\n\n\n  \n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/spades/spades_assembly_wf.cwl",
    "sha": "e5b15b5b1c8d84ea3c891776c173b350315f02ba",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/spades/spades_assembly_wf.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: spaces_assembly\nlabel: spaces_assembly\n\n\n\ninputs:\n\n##############\n\n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n \n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n \n\noutputs:\n\n  - id: out_contigs\n    outputSource:\n      - spades/out_contigs\n    type: 'File'\n\n  - id: out_scaffolds\n    outputSource:\n      - spades/out_scaffolds\n    type: 'File'\n\n  - id: out_contig_stats\n    outputSource:\n      - spades/out_contig_stats\n    type: 'File'\n\n\n  - id: out_scaffold_stats\n    outputSource:\n      - spades/out_scaffold_stats\n    type: 'File'\n\n\n  - id: assembly_graph\n    outputSource:\n      - spades/assembly_graph\n    type: 'File'\n\n  - id: assembly_graph_with_scaffolds\n    outputSource:\n      - spades/assembly_graph_with_scaffolds\n    type: 'File'\n\n  - id: all_log\n    outputSource:\n      - spades/all_log\n    type: 'File[]'\n\n#  - id: all_script\n#    outputSource:\n#      - spades/all_script\n#    type: 'File[]'\n\n\n\n\n\nsteps:\n  - id: spades\n    in:\n\n\n      - id: nanopore_reads\n        source: nanopore_reads\n      - id: pacbio_reads\n        source: pacbio_reads\n      - id: sanger_reads\n        source: sanger_reads\n      - id: libraries_metadata\n        source: libraries_metadata\n      - id: libraries_fwd_rev\n        source: libraries_fwd_rev\n      - id: libraries_mono\n        source: libraries_mono\n      - id: trusted_contigs\n        source: trusted_contigs\n      - id: untrusted_contigs\n        source: untrusted_contigs\n      - id: cov_state\n        source: cov_state\n      - id: cov_cutoff\n        source: cov_cutoff\n      - id: iontorrent\n        source: iontorrent\n      - id: sc\n        source: sc\n      - id: onlyassembler\n        source: onlyassembler\n      - id: careful\n        source: careful\n\n    out:\n\n      - id: out_contigs\n      - id: out_scaffolds\n\n      - id: out_contig_stats\n      - id: out_scaffold_stats\n\n      - id: assembly_graph\n      - id: assembly_graph_with_scaffolds\n\n      - id: all_log\n#      - id: all_script\n\n\n\n    run: ../../bio-cwl-tools/spades/spades.cwl\n\nrequirements: []\n\ndoc: |\n       assemby workflow with  SPADES assembler\n\n    \n\n",
    "cwl_class": "Workflow",
    "cwl_id": "spaces_assembly",
    "cwl_inputs": "[{'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contigs', 'outputSource': ['spades/out_contigs'], 'type': 'File'}, {'id': 'out_scaffolds', 'outputSource': ['spades/out_scaffolds'], 'type': 'File'}, {'id': 'out_contig_stats', 'outputSource': ['spades/out_contig_stats'], 'type': 'File'}, {'id': 'out_scaffold_stats', 'outputSource': ['spades/out_scaffold_stats'], 'type': 'File'}, {'id': 'assembly_graph', 'outputSource': ['spades/assembly_graph'], 'type': 'File'}, {'id': 'assembly_graph_with_scaffolds', 'outputSource': ['spades/assembly_graph_with_scaffolds'], 'type': 'File'}, {'id': 'all_log', 'outputSource': ['spades/all_log'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "spaces_assembly",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/unicycler/assembly_unicycler_only.cwl",
    "sha": "7a196007b7e242d2f54d86d8d964d94dd48cc979",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/unicycler/assembly_unicycler_only.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: assembly\nlabel: assembly\ndoc:  \"Paired data assembly with Unicycler,  non long reads in this version\"\n\ninputs:\n\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n    doc:  \"Paired and single end data\"\n  \n  \n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n\n\n\n \noutputs:\n  - id: exec_script\n    outputSource:\n      - unicycler/exec_script\n    type: File\n \n  - id: assembly_graph\n    outputSource:\n      - unicycler/assembly_graph\n    type: File\n \n  - id: assembly\n    outputSource:\n      - unicycler/assembly\n    type: File\n \nsteps:\n  - id: unicycler\n    in:\n      - id: fastq1_type\n        source: fastq1_type\n      - id: fastq1\n        source: fastq1\n      - id: fastq2_type\n        source: fastq2_type\n      - id: fastq2\n        source: fastq2\n      - id: mode\n        source: mode\n      - id: fastq_file_type\n        source: fastq_file_type\n\n\n    out:\n      - id: exec_script\n      - id: assembly_graph\n      - id: assembly\n    run: ./unicycler.cwl\n    \nrequirements: []\n\n\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "assembly",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}]",
    "cwl_outputs": "[{'id': 'exec_script', 'outputSource': ['unicycler/exec_script'], 'type': 'File'}, {'id': 'assembly_graph', 'outputSource': ['unicycler/assembly_graph'], 'type': 'File'}, {'id': 'assembly', 'outputSource': ['unicycler/assembly'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Paired data assembly with Unicycler,  non long reads in this version",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "assembly",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/unicycler/unicycler.cwl",
    "sha": "f2fc606431cac7ca1e946c161672f9e9e06e4b9e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/unicycler/unicycler.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: unicycler\nbaseCommand:\n  - bash\n#  - cat\ninputs:\n\n\n \n##tyoe selector\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n#     symbols: [paired,single,paired_collection]\n#    default: single   \n    doc:  \"Paired and single end data\"\n\n##############\n\n##input1\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n\n##input2\n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n \n\n\n\n\n\n#sequence_long (optional)\n\n  - id: sequence_long_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - fastqsanger\n          - fastqsanger.gz\n          - fasta\n    doc: \"long reads file type. If there are no long reads, leave this empty\"\n\n    \n  - id: sequence_long\n    type:  File?\n    doc: \"long reads. If there are no long reads, leave this empty\"\n#    \n  - id: compute_slots\n    type:  int\n    default: 4\n    doc: \"\"\n    \n\n\n\n##mode selector\n\n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: min_fasta_length\n    type:  int\n    default: 100\n    doc: \"Exclude contigs from the FASTA file which are shorter than this length (bp)\"\n\n\n  - id: linear_seqs\n    type:  int\n    default: 0\n    doc: \"The expected number of linear (i.e. non-circular) sequences in the assembly\"\n\n\n  - id: min_anchor_seg_len\n    type:  int\n    default: 0\n    doc: \"Unicycler will not use segments shorter than this as scaffolding anchors\"\n\n\n  - id: spades_no_correct\n    type:  boolean\n    default: false\n    doc: |\n        Unicycler uses SPAdes to construct assembly graphs.\n        You can modify some of the SPAdes settings here.\n        Use this ONLY if you know what you are doing!\n        This option turns off SPAdes error correction. \n        Generally it is highly recommended to use correction.\n\n \n  - id: spades_min_kmer_frac\n    type:  float\n    default: 0.2\n    doc: |\n         Lowest k-mer size for SPAdes assembly,\n         expressed as a fraction of the read length. \n         min 0, max 1\n\n  - id: spades_max_kmer_frac\n    type:  float\n    default: 0.95\n#    max: 1.0\n#    min: 0.0\n    doc: |\n         Highest k-mer size for SPAdes assembly,\n         expressed as a fraction of the read length. \n         min 0, max 1\n\n  \n  # check default values\n  - id: spades_kmers\n    type:  string\n    default: \"11,127\"\n    doc: |\n         Exact k-mers size to use for SPAdes assembly, comma-separated\"\n         Kmers must be comma-separated odd integers (no repitition)\n         without space in the range of 11 to 127 (inclusive)\n\n  - id: spades_kmer_count\n    type:  int\n    default: 10\n#    min: 0\n    doc: \"Number of k-mer steps to use in SPAdes assembly, min 0\"\n\n\n \n  - id: spades_depth_filter\n    type:  float\n    default: 0.25\n#    min: 0.0\n#    max: 1.0\n    doc: |\n         Filter out contigs lower than this fraction \n         of the chromosomal depth.\n         It is done if does not result in graph dead ends\n         min 0, max 1\n\n  - id: spades_largest_component\n    type:  boolean\n    default: false\n    doc: \"Only keep the largest connected component of the assembly graph if true\"\n\n\n\n  - id: rotation_no_rotate\n    type:  boolean\n    default: false\n    doc: |\n         These options control the rotation of completed circular sequence\n         near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\n         Do not rotate completed replicons to start at a standard gene.\n         Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\n         If one is found, the sequence is rotated and/or flipped so that it begins with that gene\n         encoded on the forward strand. This provides consistently oriented assemblies and reduces\n         the risk that a gene will be split across the start and end of the sequence.\n    \n  - id: rotation_start_genes\n    type:  File? \n    doc: \"FASTA file of genes for start point of rotated replicons\"\n\n\n\n  - id: rotation_start_gene_id\n    type:  float\n    default: 90.0\n    doc: \"The minimum required BLAST percent identity for a start gene search. max 100, min 0\"\n\n\n  - id: rotation_start_gene_cov\n    type:  float\n    default: 95.0\n    doc: \"The minimum required BLAST percent coverage for a start gene search. min 0, max 100\"\n\n\n  - id: pilon_no_pilon\n    type:  boolean\n    default: false\n    doc: \"Unicycler uses Pilon tool for polishing final assembly. Do not use if true\"\n\n\n  - id: graph_clean_min_component_size\n    type:  int\n    default: 1000\n    doc: \"Contigs shorter than this value (bp) will not be polished using Pilon; min 0\"\n\n    \n  - id: graph_clean_min_dead_end_size\n    type:  int\n    default: 1000\n    doc: |\n         These options control the removal of small leftover sequences after bridging is complete.\n         Unbridged graph components smaller than this size will be removed from the final graph,\n         min 0    \n\n  - id: lr_align_contamination\n    type:  File?\n    doc: |\n         FASTA file of known contamination in long reads,\n         e.g. lambda, phiXm or puc18 spike-ins. \n\n  - id: lr_align_scores\n    type:  string\n    default: \"3,-6,-5,-2\"\n    doc: |\n          Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\n\n\n  - id: lr_align_low_score\n    type:  int?\n    doc: |\n          Score threshold - alignments below this are considered poor,\n          default = set automatically\n\n\n\n \n    \noutputs:\n  - id: exec_script\n    type: File\n    outputBinding:\n      glob: \"*.sh\"  \n    doc: |\n          Launching script for learning purpose\n\n\n  - id: assembly_graph\n    type: File\n    outputBinding:\n      glob: assembly.gfa\n    doc: |\n          Assembly graph\n\n\n\n  - id: assembly\n    type: File\n    outputBinding:\n      glob: assembly.fasta\n    doc: |\n          fasta assembly output sequence\n          (main output)\n      \n      \narguments:\n  - unicycler_launch.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: unicycler_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               #      unicycler launcher\n               ###########################\n\n               ##preparing input files\n               #check permission / chmod  is issues\n               ${\n                 var fl=\"\"\n                 var lncmd=\"\" \n                 var fq1=\"\"\n                 var fq2=\"\"\n                 var lr=\"\"\n                  \n               //###################paired case              \n                     if (inputs.fastq_file_type ==\"paired\"  ){\n                      if( inputs.fastq1_type=='fastqsanger' ){\n                          fq1 = \"fq1.fastq\"\n                      }\n                      else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                           fq1 = \"fq1.fastq.gz\"\n                      }\n                      if( inputs.fastq2_type=='fastqsanger' ){\n                          fq2 = \"fq2.fastq\"\n                       }\n                       else if( inputs.fastq2_type=='fastqsanger.gz' ){\n                           fq2 = \"fq2.fastq.gz\"\n                        }\n                        lncmd+=\"fq1='\"+fq1+\"'\"\n                        lncmd+=\" && \"\n                        lncmd+=\"fq2='\"+fq2+\"'\"\n                        lncmd+=\" && \"\n                        lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                        lncmd+=\" && \"\n                        lncmd+=\" ln -s '\"+inputs.fastq2.path+\"' $fq2  \"\n        \n                     }\n                //###################single case\n                 \n                if (inputs.fastq_file_type ==\"single\"  ){\n                  if( inputs.fastq1_type=='fastqsanger' ){\n                      fq1 = \"fq1.fastq\"\n                  }\n                  else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                       fq1 = \"fq1.fastq.gz\"\n                  }\n                  lncmd+=\"fq1='\"+fq1+\"'\"\n                  lncmd+=\" && \"\n                  lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                 }\n                 //####### long reads\n                  if (  inputs.sequence_long !== null) {\n                      if (inputs.sequence_long_type=='fastqsanger'){\n                               lr = \"lr.fastq\"\n                      }\n                      else if (inputs.sequence_long_type=='fastqsanger.gz') {\n                               lr = \"lr.fastq.gz\"\n                      }\n                      else if (inputs.sequence_longg_type=='fasta') {\n                               lr = \"lr.fasta\"\n                      }\n                      lncmd+=\"lr='\"+lr+\"'\"\n                      lncmd+=\" && \"\n                      lncmd+= \" ln -s '\"+inputs.sequence_long.path+\"' '$lr' \"\n                  }\n\n\n                  return lncmd\n\n               }\n\n\n               ##general options\n\n               read -d '' GENERALOPT << EOF\n               ${\n                var opt=\"\"  \n                //## General Unicycler Options section\n                opt+=\" --mode \"+inputs.mode+\" \"\n                opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\n                opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\n\n                if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\n\n                //## Spades Options section\n                if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\n                opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\n                opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\n                if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\n                               \n                opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\n                opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\n                if (inputs.spades_largest_component){opt+=\" --largest_component \"}\n                //## Rotation Options section\n                if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\n                if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\n                opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\n                opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\n                return opt\n                }\n               EOF\n               \n               ##additionnal option\n              \n               read -d '' ADDOPT << EOF\n               ${\n\n                var opt=\"\"\n                \n                if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\n                if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\n                //## Long Read Alignment Options\n                if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\n                opt+=\" --scores \"+inputs.lr_align_scores+\" \"\n                if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\n                 return ''+ opt + ''\n               }\n               EOF\n\n               ## Get location for pilon jar file\n\n               ${\n                 var cmd=\"\"  \n                 cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\n                 return cmd\n               }   \n\n               ## Build Unicycler command\n               ${\n               \n                 var cmd_base=\"\"\n                 var opt=\"\"\n\n                 \n                 \n                 \n                 cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\n                 cmd_base+=\" -o ./  \"\n                 cmd_base+=\" --verbosity 3  \"\n                 cmd_base+=\" --pilon_path \\$PILONJAR  \"\n\n                \n                if ( inputs.fastq_file_type == \"paired\"){\n                       opt+=\" -1 $fq1 -2 $fq2  \"\n                }\n                else if ( inputs.fastq_file_type == \"paired_collection\"){\n                       opt+=\" -1 $fq1 -2 $fq2  \"\n                }  \n                else if ( inputs.fastq_file_type == \"single\"){\n                   opt+=\" -s $fq1 \"\n                }\n                if (  inputs.sequence_long !== null) {\n                  opt+=\" -l $lr \"\n                }\n\n\n                //##  Unicycler command\n                var cmdl=cmd_base+\" \"+opt+\" \\$GENERALOPT \\$ADDOPT \"\n               \n                return cmdl\n\n                }\n                \n\n \n#        writable: false\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  CWL  wrapped for Unicycler.\n  an hybrid assembly pipeline for bacterial genomes\n  see  https://github.com/rrwick/Unicycler\n  outputs\n    final assembly in FASTA format (major output)\n    final assembly grapth in graph format, visualized using tools such as  \n    Bandage  https://github.com/rrwick/Bandage      \n\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "unicycler",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}, {'id': 'sequence_long_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz', 'fasta']}], 'doc': 'long reads file type. If there are no long reads, leave this empty'}, {'id': 'sequence_long', 'type': 'File?', 'doc': 'long reads. If there are no long reads, leave this empty'}, {'id': 'compute_slots', 'type': 'int', 'default': 4, 'doc': ''}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'min_fasta_length', 'type': 'int', 'default': 100, 'doc': 'Exclude contigs from the FASTA file which are shorter than this length (bp)'}, {'id': 'linear_seqs', 'type': 'int', 'default': 0, 'doc': 'The expected number of linear (i.e. non-circular) sequences in the assembly'}, {'id': 'min_anchor_seg_len', 'type': 'int', 'default': 0, 'doc': 'Unicycler will not use segments shorter than this as scaffolding anchors'}, {'id': 'spades_no_correct', 'type': 'boolean', 'default': False, 'doc': 'Unicycler uses SPAdes to construct assembly graphs.\\nYou can modify some of the SPAdes settings here.\\nUse this ONLY if you know what you are doing!\\nThis option turns off SPAdes error correction. \\nGenerally it is highly recommended to use correction.\\n'}, {'id': 'spades_min_kmer_frac', 'type': 'float', 'default': 0.2, 'doc': 'Lowest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length. \\nmin 0, max 1\\n'}, {'id': 'spades_max_kmer_frac', 'type': 'float', 'default': 0.95, 'doc': 'Highest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length. \\nmin 0, max 1\\n'}, {'id': 'spades_kmers', 'type': 'string', 'default': '11,127', 'doc': 'Exact k-mers size to use for SPAdes assembly, comma-separated\"\\nKmers must be comma-separated odd integers (no repitition)\\nwithout space in the range of 11 to 127 (inclusive)\\n'}, {'id': 'spades_kmer_count', 'type': 'int', 'default': 10, 'doc': 'Number of k-mer steps to use in SPAdes assembly, min 0'}, {'id': 'spades_depth_filter', 'type': 'float', 'default': 0.25, 'doc': 'Filter out contigs lower than this fraction \\nof the chromosomal depth.\\nIt is done if does not result in graph dead ends\\nmin 0, max 1\\n'}, {'id': 'spades_largest_component', 'type': 'boolean', 'default': False, 'doc': 'Only keep the largest connected component of the assembly graph if true'}, {'id': 'rotation_no_rotate', 'type': 'boolean', 'default': False, 'doc': 'These options control the rotation of completed circular sequence\\nnear the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\\nDo not rotate completed replicons to start at a standard gene.\\nUnicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\\nIf one is found, the sequence is rotated and/or flipped so that it begins with that gene\\nencoded on the forward strand. This provides consistently oriented assemblies and reduces\\nthe risk that a gene will be split across the start and end of the sequence.\\n'}, {'id': 'rotation_start_genes', 'type': 'File?', 'doc': 'FASTA file of genes for start point of rotated replicons'}, {'id': 'rotation_start_gene_id', 'type': 'float', 'default': 90.0, 'doc': 'The minimum required BLAST percent identity for a start gene search. max 100, min 0'}, {'id': 'rotation_start_gene_cov', 'type': 'float', 'default': 95.0, 'doc': 'The minimum required BLAST percent coverage for a start gene search. min 0, max 100'}, {'id': 'pilon_no_pilon', 'type': 'boolean', 'default': False, 'doc': 'Unicycler uses Pilon tool for polishing final assembly. Do not use if true'}, {'id': 'graph_clean_min_component_size', 'type': 'int', 'default': 1000, 'doc': 'Contigs shorter than this value (bp) will not be polished using Pilon; min 0'}, {'id': 'graph_clean_min_dead_end_size', 'type': 'int', 'default': 1000, 'doc': 'These options control the removal of small leftover sequences after bridging is complete.\\nUnbridged graph components smaller than this size will be removed from the final graph,\\nmin 0    \\n'}, {'id': 'lr_align_contamination', 'type': 'File?', 'doc': 'FASTA file of known contamination in long reads,\\ne.g. lambda, phiXm or puc18 spike-ins. \\n'}, {'id': 'lr_align_scores', 'type': 'string', 'default': '3,-6,-5,-2', 'doc': 'Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\\n'}, {'id': 'lr_align_low_score', 'type': 'int?', 'doc': 'Score threshold - alignments below this are considered poor,\\ndefault = set automatically\\n'}]",
    "cwl_outputs": "[{'id': 'exec_script', 'type': 'File', 'outputBinding': {'glob': '*.sh'}, 'doc': 'Launching script for learning purpose\\n'}, {'id': 'assembly_graph', 'type': 'File', 'outputBinding': {'glob': 'assembly.gfa'}, 'doc': 'Assembly graph\\n'}, {'id': 'assembly', 'type': 'File', 'outputBinding': {'glob': 'assembly.fasta'}, 'doc': 'fasta assembly output sequence\\n(main output)\\n'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['unicycler_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  wrapped for Unicycler.\nan hybrid assembly pipeline for bacterial genomes\nsee  https://github.com/rrwick/Unicycler\noutputs\n  final assembly in FASTA format (major output)\n  final assembly grapth in graph format, visualized using tools such as  \n  Bandage  https://github.com/rrwick/Bandage      \n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/assembly-wf-virus.cwl",
    "sha": "9535d8401797217e2a724b1e82e239539bd69251",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/assembly-wf-virus.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: assembly_wf_virus\nlabel: assembly-wf-virus\n \ndoc:  \"Virus genome assembly with Unicycler and spades, in parallel. visualisation with bandage\"\n\n\ninputs:\n\n##############unicycler\n\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n    doc:  \"Paired and single end data\"\n  \n  \n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n\n\n\n\n##############spades\n\n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n \n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n \n\n\n\n\noutputs:\n\n  - id: out_contigs_spades\n    outputSource:\n      - spades/out_contigs\n    type: 'File'\n\n  - id: out_scaffolds_spades\n    outputSource:\n      - spades/out_scaffolds\n    type: 'File'\n\n  - id: out_contig_stats_spades\n    outputSource:\n      - spades/out_contig_stats\n    type: 'File'\n\n\n  - id: out_scaffold_stats_spades\n    outputSource:\n      - spades/out_scaffold_stats\n    type: 'File'\n\n\n  - id: assembly_graph_spades\n    outputSource:\n      - spades/assembly_graph\n    type: 'File'\n\n  - id: assembly_graph_with_scaffolds_spades\n    outputSource:\n      - spades/assembly_graph_with_scaffolds\n    type: 'File'\n\n  - id: all_log_spades\n    outputSource:\n      - spades/all_log\n    type: 'File[]'\n\n#  - id: all_script\n#    outputSource:\n#      - spades/all_script\n#    type: 'File[]'\n\n  - id: assembly_image_spades\n    outputSource:\n      - bandage_image_spades/image\n\n\n    type: File\n\n  - id: assembly_info_spades\n    outputSource:\n      - bandage_info_spades/assembly_graph_info\n    type: File\n\n\n  - id: assembly_graph_unicycler\n    outputSource:\n      - unicycler/assembly_graph\n    type: File\n \n  - id: assembly_unicycler\n    outputSource:\n      - unicycler/assembly\n    type: File\n \n\n#  - id: exec_script2\n#    outputSource:\n#      - unicycler/exec_script\n#    type: File\n\n\n  - id: assembly_image_unicycler\n    outputSource:\n      - bandage_image_unicycler/image\n    type: File\n\n  - id: assembly_info_unicycler\n    outputSource:\n      - bandage_info_unicycler/assembly_graph_info\n    type: File\n\n\n\n\n\n\n\n\n\n\nsteps:\n\n  - id: unicycler\n    in:\n      - id: fastq1_type\n        source: fastq1_type\n      - id: fastq1\n        source: fastq1\n      - id: fastq2_type\n        source: fastq2_type\n      - id: fastq2\n        source: fastq2\n      - id: mode\n        source: mode\n      - id: fastq_file_type\n        source: fastq_file_type\n\n\n    out:\n#      - id: exec_script\n      - id: assembly_graph\n      - id: assembly\n \n#    run: ../../bio-cwl-tools/unicycler/unicycler.cwl\n    run: ./tool/unicycler.cwl \n\n\n  - id: spades\n    in:\n\n      - id: nanopore_reads\n        source: nanopore_reads\n      - id: pacbio_reads\n        source: pacbio_reads\n      - id: sanger_reads\n        source: sanger_reads\n      - id: libraries_metadata\n        source: libraries_metadata\n      - id: libraries_fwd_rev\n        source: libraries_fwd_rev\n      - id: libraries_mono\n        source: libraries_mono\n      - id: trusted_contigs\n        source: trusted_contigs\n      - id: untrusted_contigs\n        source: untrusted_contigs\n      - id: cov_state\n        source: cov_state\n      - id: cov_cutoff\n        source: cov_cutoff\n      - id: iontorrent\n        source: iontorrent\n      - id: sc\n        source: sc\n      - id: onlyassembler\n        source: onlyassembler\n      - id: careful\n        source: careful\n\n      - id: auto_kmer_choice\n        source: auto_kmer_choice\n\n      - id: kmers\n        source: kmers\n \n    out:\n\n      - id: out_contigs\n      - id: out_scaffolds\n\n      - id: out_contig_stats\n      - id: out_scaffold_stats\n\n      - id: assembly_graph\n      - id: assembly_graph_with_scaffolds\n\n      - id: all_log\n#      - id: all_script\n\n#    run: ../../bio-cwl-tools/spades/spades.cwl\n    run: ./tool/spades.cwl \n \n  - id: bandage_image_unicycler\n    in:\n      - id: graph\n        source: unicycler/assembly_graph\n    out:\n      - id: image\n#    run: ../../bio-cwl-tools/bandage/bandage-image.cwl\n    run: ./tool/bandage-image.cwl\n \n  - id: bandage_info_unicycler\n    in:\n      - id: graph\n        source: unicycler/assembly_graph\n    out:\n      - id: assembly_graph_info\n#    run: ../../bio-cwl-tools/bandage/bandage-info.cwl\n    run: ./tool/bandage-info.cwl \n  - id: bandage_image_spades\n    in:\n      - id: graph\n        source: spades/assembly_graph\n    out:\n      - id: image\n#    run: ../../bio-cwl-tools/bandage/bandage-image.cwl\n    run: ./tool/bandage-image.cwl \n  - id: bandage_info_spades\n    in:\n      - id: graph\n        source: spades/assembly_graph\n    out:\n      - id: assembly_graph_info\n#    run: ../../bio-cwl-tools/bandage/bandage-info.cwl\n    run: ./tool/bandage-info.cwl\n\n\n    \nrequirements: []\n\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "assembly_wf_virus",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}, {'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contigs_spades', 'outputSource': ['spades/out_contigs'], 'type': 'File'}, {'id': 'out_scaffolds_spades', 'outputSource': ['spades/out_scaffolds'], 'type': 'File'}, {'id': 'out_contig_stats_spades', 'outputSource': ['spades/out_contig_stats'], 'type': 'File'}, {'id': 'out_scaffold_stats_spades', 'outputSource': ['spades/out_scaffold_stats'], 'type': 'File'}, {'id': 'assembly_graph_spades', 'outputSource': ['spades/assembly_graph'], 'type': 'File'}, {'id': 'assembly_graph_with_scaffolds_spades', 'outputSource': ['spades/assembly_graph_with_scaffolds'], 'type': 'File'}, {'id': 'all_log_spades', 'outputSource': ['spades/all_log'], 'type': 'File[]'}, {'id': 'assembly_image_spades', 'outputSource': ['bandage_image_spades/image'], 'type': 'File'}, {'id': 'assembly_info_spades', 'outputSource': ['bandage_info_spades/assembly_graph_info'], 'type': 'File'}, {'id': 'assembly_graph_unicycler', 'outputSource': ['unicycler/assembly_graph'], 'type': 'File'}, {'id': 'assembly_unicycler', 'outputSource': ['unicycler/assembly'], 'type': 'File'}, {'id': 'assembly_image_unicycler', 'outputSource': ['bandage_image_unicycler/image'], 'type': 'File'}, {'id': 'assembly_info_unicycler', 'outputSource': ['bandage_info_unicycler/assembly_graph_info'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Virus genome assembly with Unicycler and spades, in parallel. visualisation with bandage",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "assembly-wf-virus",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/workflow/tool/bandage-image.cwl",
    "sha": "438657f5a59b4e1df5551b01233099cfc61fb673",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/bandage-image.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nid: bandage-image\ninputs:\n\n  - id: graph\n    type: File\n    doc: |\n        Graphical Fragment Assembly\n        Supports multiple assembly graph formats: \n        LastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\n \n\n  - id: format\n    type:  string\n    default: jpg\n    doc: |\n        Produce jpg, png or svg file\n\n\n  - id: height\n    type:  int\n    default: 1000\n    doc: |\n        Image height.If only height or width is set, \n        the other will be determined automatically.\n        If both are set, the image will be exactly that size.\n\n\n  - id: width\n    type:  int?\n    doc: |\n        Image width. If only height or width is set, the other will be determined automatically.\n        If both are set, the image will be exactly that size.\n\n\n  - id: node_name\n    type:  boolean\n    default: true\n    doc: |\n        If true, define Node labels as name \n\n  - id: node_length\n    type:  boolean\n    default: true\n    doc: |\n        If true, define Node labels as length \n\n\noutputs:\n\n\n# - id: all_script\n#   type:\n#      - type: array\n#        items: File\n#   outputBinding:\n#      glob: \"*.sh\"  \n#   doc: \"generated script to run bandage. for learning purpose\" \n\n\n - id: image\n   type: File\n   outputBinding:\n      glob: \"*.$(inputs.format)\"\n   doc: \"Assembly Graph Image\"\n\n\n\n\nbaseCommand: bash\n\narguments: [bandage_image_launch.sh]\n\nhints:\n  DockerRequirement:\n    dockerPull: \"fjrmore/bandage\" \n\n\nrequirements:\n  - class:  InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: bandage_image_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               # Bandage image wrapper  \n               export QT_QPA_PLATFORM=minimal\n               TMPDIR=$PWD\"/tmp_runtime-bandage\"\n               mkdir -p $TMPDIR\n               export XDG_RUNTIME_DIR=$TMPDIR\n               GRAPH=\"$(inputs.graph.path)\"\n               IMAGE=\"$(inputs.graph.nameroot).$(inputs.format)\"\n               Bandage image $GRAPH $IMAGE  \\\\\n               ${\n                var opt=\"\"\n                if(inputs.height!=null){ \n                 opt+=\" --height \"+inputs.height+ \" \"\n                }\n                if(inputs.width!=null){ \n                 opt+=\" --width \"+inputs.width +\" \"\n                }\n                if(inputs.node_length==true){ \n                 opt+=\" --names \"\n                }\n                if(inputs.node_length==true){ \n                 opt+=\" --lengths \"\n                }\n                return opt\n               }  \n\n\ndoc: |\n  CWL  tool for Bandage-info.\n  an hybrid assembly pipeline for bacterial genomes\n  *Bandage Overview**\n  Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \n  such as Velvet, SPAdes,   MEGAHIT and others.\n  De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \n  which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \n  Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \n  with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \n  By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \n  that are not possible by looking at contigs alone. \n  Bandage works with Graphical Fragment Assembly (GFA) files. \n  For more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "bandage-image",
    "cwl_inputs": "[{'id': 'graph', 'type': 'File', 'doc': 'Graphical Fragment Assembly\\nSupports multiple assembly graph formats: \\nLastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\\n'}, {'id': 'format', 'type': 'string', 'default': 'jpg', 'doc': 'Produce jpg, png or svg file\\n'}, {'id': 'height', 'type': 'int', 'default': 1000, 'doc': 'Image height.If only height or width is set, \\nthe other will be determined automatically.\\nIf both are set, the image will be exactly that size.\\n'}, {'id': 'width', 'type': 'int?', 'doc': 'Image width. If only height or width is set, the other will be determined automatically.\\nIf both are set, the image will be exactly that size.\\n'}, {'id': 'node_name', 'type': 'boolean', 'default': True, 'doc': 'If true, define Node labels as name \\n'}, {'id': 'node_length', 'type': 'boolean', 'default': True, 'doc': 'If true, define Node labels as length \\n'}]",
    "cwl_outputs": "[{'id': 'image', 'type': 'File', 'outputBinding': {'glob': '*.$(inputs.format)'}, 'doc': 'Assembly Graph Image'}]",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'fjrmore/bandage'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['bandage_image_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  tool for Bandage-info.\nan hybrid assembly pipeline for bacterial genomes\n*Bandage Overview**\nBandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \nsuch as Velvet, SPAdes,   MEGAHIT and others.\nDe novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \nwhich were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \nNodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \nwith the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \nBy displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \nthat are not possible by looking at contigs alone. \nBandage works with Graphical Fragment Assembly (GFA) files. \nFor more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/bandage-info.cwl",
    "sha": "747073c5710648c8f2d4636df74c0cd004c42dc9",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/bandage-info.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nid: bandage-info\ninputs:\n\n  - id: graph\n    type:  File\n    doc: |\n        Graphical Fragment Assembly.\n        Supports multiple\n        assembly graph formats: \n        LastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.    \n\n\n  - id: tsv\n    type:  boolean\n    default: false\n    doc: |\n        If true, output the information in a single tab-delimited line \n        starting with the graph file\n\n\n\n\n\noutputs:\n\n# - id: all_script\n#   type:\n#      - type: array\n#        items: File\n#   outputBinding:\n#      glob: \"*.sh\"  \n#   doc: \"generated script to run bandage. for learning purpose\" \n\n - id: assembly_graph_info\n   type: File\n   outputBinding:\n      glob: \"assembly_graph_info.txt\"\n   doc: \"Assembly Graph Information\"\n\n\n\n\nbaseCommand: bash\n\narguments: [bandage_info_launch.sh]\n\nhints:\n  DockerRequirement:\n    dockerPull: \"fjrmore/bandage\" \n\n\nrequirements:\n  - class:  InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: bandage_info_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               # Bandage info wrapper  \n               export QT_QPA_PLATFORM=minimal\n               TMPDIR=$PWD\"/tmp_runtime-bandage\"\n               mkdir -p $TMPDIR\n               export XDG_RUNTIME_DIR=$TMPDIR\n               Bandage info '$(inputs.graph.path)' \\\\\n               ${\n                var opt=\"\"\n                if(inputs.tsv==true){ \n                 opt+=\" --tsv \"\n                }\n                return opt\n               } \\\\\n                > assembly_graph_info.txt\n\n\ndoc: |\n  CWL  tool for Bandage-info.\n  an hybrid assembly pipeline for bacterial genomes\n  *Bandage Overview**\n  Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \n  such as Velvet, SPAdes,   MEGAHIT and others.\n  De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \n  which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \n  Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \n  with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \n  By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \n  that are not possible by looking at contigs alone. \n  Bandage works with Graphical Fragment Assembly (GFA) files. \n  For more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "bandage-info",
    "cwl_inputs": "[{'id': 'graph', 'type': 'File', 'doc': 'Graphical Fragment Assembly.\\nSupports multiple\\nassembly graph formats: \\nLastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.    \\n'}, {'id': 'tsv', 'type': 'boolean', 'default': False, 'doc': 'If true, output the information in a single tab-delimited line \\nstarting with the graph file\\n'}]",
    "cwl_outputs": "[{'id': 'assembly_graph_info', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph_info.txt'}, 'doc': 'Assembly Graph Information'}]",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'fjrmore/bandage'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['bandage_info_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  tool for Bandage-info.\nan hybrid assembly pipeline for bacterial genomes\n*Bandage Overview**\nBandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \nsuch as Velvet, SPAdes,   MEGAHIT and others.\nDe novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \nwhich were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \nNodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \nwith the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \nBy displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \nthat are not possible by looking at contigs alone. \nBandage works with Graphical Fragment Assembly (GFA) files. \nFor more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/spades.cwl",
    "sha": "b0c592181bc514fd900beb82f0f9c63eb88e6a7d",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/spades.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand:\n  - bash\n\ninputs:\n  libraries_metadata:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             orientation: string?\n             lib_type: string? \n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n  libraries_fwd_rev:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             fwd_reads: File?\n             rev_reads: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n  libraries_mono:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             file_type: string?\n             reads: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n  pacbio_reads:\n    type: File[]?\n  nanopore_reads:\n    type: File[]?\n  sanger_reads:\n    type: File[]?\n  trusted_contigs:\n    type: File[]?\n  untrusted_contigs:\n    type: File[]?\n  auto_kmer_choice:\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n  kmers:\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n  cov_state:\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n  cov_cutoff:\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n  iontorrent:\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n  sc:\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n  onlyassembler:\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n  careful:\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\noutputs:\n  out_contig_stats:\n    type: File\n    outputBinding:\n      glob: out_contig_stats.*\n    doc: \"contig stats, default column_names: name,length,coverage\"\n  out_scaffold_stats:\n    type: File\n    outputBinding:\n      glob: out_scaffold_stats.*\n    doc: \"scaffold stats, default column_names: name,length,coverage\"\n\n  out_contigs:\n    type: File\n    outputBinding:\n      glob: contigs.fasta\n    doc: \"contigs (fasta sequence)\"\n\n  out_scaffolds:\n    type: File\n    outputBinding:\n      glob: scaffolds.fasta\n    doc: \"scaffolds (fasta sequence)\"\n#  - id: all_script\n#    type:\n#      - type: array\n#        items: File\n#    outputBinding:\n#      glob: \"*.sh\"  \n#    doc: \"generated script to run spades. for learning purpose\" \n  all_log:\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.log\"  \n    doc: \"spades output log and warnings\" \n#  - id: out_log\n#    type: File\n#    outputBinding:\n#      glob: spades.log\n#    doc: \"spades output log\"\n  assembly_graph:\n    type: File\n    outputBinding:\n      glob: assembly_graph.fastg\n    doc: \"assembly graph\" \n  assembly_graph_with_scaffolds:\n    type: File\n    outputBinding:\n      glob: assembly_graph_with_scaffolds.gfa\n    doc: \"assembly graph with scaffolds\" \n      \narguments:\n  - spades_wrapper.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n####################\n      - entryname: write_tsv.py\n        entry: |\n               #######input file here\n               #!/usr/bin/env python\n               import sys,re\n               search_str = r'^>(NODE|\\S+)_(\\d+)(?:_|\\s)length_(\\d+)_cov_(\\d+\\.*\\d*).*\\$'\n               replace_str = r'\\1_\\2\\t\\3\\t\\4'\n               cmd = re.compile(search_str)\n               sys.stdout.write('#name\\tlength\\tcoverage\\n')\n               for i,line in enumerate(sys.stdin):\n                  if cmd.match(line):\n                     sys.stdout.write(cmd.sub(replace_str,line))\n\n####################\n      - entryname: spades_wrapper.sh\n        entry: |\n               ####################spades launcher\n               #!/bin/bash\n               ## An example command looks like:\n               ## spades.py -k 21,33,55,77,99,127 --careful -1 Y.fastq.gz -2 X.fastq.gz -t 24 -o output \n               read -d '' MEMORY_GB << EOF\n               ${ \n                //compute memory limits\n                var mem=\"250\"\n                if(runtime.ram){\n                  var bt=runtime.ram * 1048576 //mebibytes to bytes               \n                  bt=bt*0.000000001 //bytes to Gigabytes \n                  mem=parseInt(bt)\n                }\n                return \"-\"+mem\n               }\n               EOF\n               #echo \"MEMORY_GB limit: \\$MEMORY_GB\"\n               read -d '' CORES << EOF\n               ${ \n                //compute core / slot\n                var cores=\"16\" \n                if(runtime.cores){\n                  cores=runtime.cores\n                }\n                return  cores\n               }\n               EOF\n               #echo \"CORES : \\$CORES\"\n               read -d '' SPADES_OPT << EOF\n               ${   \n                 var opt=\"\"\n                   if (inputs.sc==true){\n                    opt+=\" --sc \"\n                   }\n                   if (inputs.onlyassembler==true){\n                    opt+=\" --only-assembler \"\n                   }\n                   if (inputs.careful==true){\n                    opt+=\" --careful \"\n                   }\n                 return opt  \n               }\n               EOF\n\n\n               read -d '' CMD_BASE << EOF\n               spades.py -o . --disable-gzip-output  \n                 \\$SPADES_OPT \n                -t \\$CORES -m \\$MEMORY_GB\n               ${   \n                 var opt=\"\"\n                   if (inputs.auto_kmer_choice==false){\n                    opt+=\" -k \"+inputs.kmers \n                   }\n                 return opt  \n               }\n               ${\n                 var opt=\"\"\n                 if (inputs.cov_state==null || inputs.cov_state == \"auto\"){\n                      opt+=\" --cov-cutoff 'auto' \"\n                  }\n                 else if (inputs.cov_state == \"value\"){\n                      opt+=\" --cov-cutoff '\"+inputs.cov_cutoff+\"' \"\n                  }\n                 if (inputs.iontorrent==true ){\n                      opt+=\" --iontorrent \"\n                 } \n                 return opt  \n               }\n               EOF\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' CMD_READ1 << EOF\n               ${\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n                      if (lmeta.lib_type !=null && lmeta.lib_type == \"paired_end\"){\n                           prefix = 'pe'\n                       } \n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"mate_paired\"){\n                           prefix = 'mp'\n                       }\n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"nxmate_paired\"){\n                           prefix = 'nxmate'\n                       }                       \n                      else {\n                           prefix = 'hqmp'\n                       }\n                      var idx=lmeta.lib_index\n                      lib_prefix[idx]=prefix\n                      opt+=\" --\"+prefix+idx+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n\n               #########################>DEBUG\n\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' ZZDEBUG << EOF\n               ${\n               //var opt=\"inputs.libraries_metadata.length:\"+inputs.libraries_metadata.length+\" \"              \n               //var str = JSON.stringify(inputs.libraries_metadata)\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   opt+=\" not null \"\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n \n                      opt+=\" !!-AA-\"+lmeta.lib_index+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n               #########################<DEBUG\n\n\n\n\n\n\n\n\n\n\n               read -d '' CMD_READ2 << EOF\n               ${\n                 var opt=\"\"\n                 if (inputs.pacbio_reads!=null){\n                   for(var i=0; i<inputs.pacbio_reads.length;i++){\n                      var read=inputs.pacbio_reads[i]\n                      opt+=\" --pacbio fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.nanopore_reads!=null){\n                   for(var i=0; i<inputs.nanopore_reads.length;i++){\n                      var read=inputs.nanopore_reads[i]\n                      opt+=\" --nanopore fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.sanger_reads!=null){\n                   for(var i=0; i<inputs.sanger_reads.length;i++){\n                      var read=inputs.sanger_reads[i]\n                      opt+=\" --sanger fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.trusted_contigs!=null){\n                   for(var i=0; i<inputs.trusted_contigs.length;i++){\n                      var read=inputs.trusted_contigs[i]\n                      opt+=\" --trusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.untrusted_contigs!=null){\n                   for(var i=0; i<inputs.untrusted_contigs.length;i++){\n                      var read=inputs.untrusted_contigs[i]\n                      opt+=\" --untrusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 return opt  \n               }\n               EOF\n               ##########################################\n               read -d '' CMD_POST << EOF\n                 && python write_tsv.py < contigs.fasta > out_contig_stats.tab\n                 && python write_tsv.py < scaffolds.fasta > out_scaffold_stats.tab\n               EOF\n               ##########################################   \n               # echo \"CMD_BASE : \\$CMD_BASE\"  > zz.txt   \\\\\n               #        && echo \"CMD_READ1 : \\$CMD_READ1\"  >> zz.txt   \\\\\n               #        && echo \"CMD_READ2 : \\$CMD_READ2\"  >> zz.txt   \\\\\n               #        && echo \"CMD_POST : \\$CMD_POST\"   >> zz.txt\n               COMMAND=\"\\$CMD_BASE \\$CMD_READ1 \\$CMD_READ2 \\$CMD_POST\"\n               COMMAND=\\$(echo $COMMAND|tr -d '\\\\n')\n               echo \"\\$COMMAND\"  > run_spades.sh\n               bash  ./run_spades.sh\n\n \n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  example workflow for js wrapper generation\n  see  https://github.com/rrwick/Unicycler\n  outputs : all genretated files\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'libraries_metadata': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'orientation': 'string?', 'lib_type': 'string?'}}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, 'libraries_fwd_rev': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'fwd_reads': 'File?', 'rev_reads': 'File?'}}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, 'libraries_mono': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'file_type': 'string?', 'reads': 'File?'}}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, 'pacbio_reads': {'type': 'File[]?'}, 'nanopore_reads': {'type': 'File[]?'}, 'sanger_reads': {'type': 'File[]?'}, 'trusted_contigs': {'type': 'File[]?'}, 'untrusted_contigs': {'type': 'File[]?'}, 'auto_kmer_choice': {'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, 'kmers': {'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, 'cov_state': {'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, 'cov_cutoff': {'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, 'iontorrent': {'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, 'sc': {'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, 'onlyassembler': {'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, 'careful': {'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}}",
    "cwl_outputs": "{'out_contig_stats': {'type': 'File', 'outputBinding': {'glob': 'out_contig_stats.*'}, 'doc': 'contig stats, default column_names: name,length,coverage'}, 'out_scaffold_stats': {'type': 'File', 'outputBinding': {'glob': 'out_scaffold_stats.*'}, 'doc': 'scaffold stats, default column_names: name,length,coverage'}, 'out_contigs': {'type': 'File', 'outputBinding': {'glob': 'contigs.fasta'}, 'doc': 'contigs (fasta sequence)'}, 'out_scaffolds': {'type': 'File', 'outputBinding': {'glob': 'scaffolds.fasta'}, 'doc': 'scaffolds (fasta sequence)'}, 'all_log': {'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.log'}, 'doc': 'spades output log and warnings'}, 'assembly_graph': {'type': 'File', 'outputBinding': {'glob': 'assembly_graph.fastg'}, 'doc': 'assembly graph'}, 'assembly_graph_with_scaffolds': {'type': 'File', 'outputBinding': {'glob': 'assembly_graph_with_scaffolds.gfa'}, 'doc': 'assembly graph with scaffolds'}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['spades_wrapper.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "example workflow for js wrapper generation\nsee  https://github.com/rrwick/Unicycler\noutputs : all genretated files\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/unicycler.cwl",
    "sha": "6a208e40e51c5848cbda6581c448aa7a99fc7c5e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/unicycler.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  CWL  wrapped for Unicycler.\n  an hybrid assembly pipeline for bacterial genomes\n  see  https://github.com/rrwick/Unicycler\n  outputs\n    final assembly in FASTA format (major output)\n    final assembly grapth in graph format, visualized using tools such as\n    Bandage  https://github.com/rrwick/Bandage\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: unicycler_launch.sh\n        entry: |\n          #!/bin/bash\n          ###########################\n          #      unicycler launcher\n          ###########################\n\n          ##preparing input files\n          #check permission / chmod  is issues\n          ${\n            var fl=\"\"\n            var lncmd=\"\"\n            var fq1=\"\"\n            var fq2=\"\"\n            var lr=\"\"\n\n          //###################paired case\n                if (inputs.fastq_file_type ==\"paired\"  ){\n                 if( inputs.fastq1_type=='fastqsanger' ){\n                     fq1 = \"fq1.fastq\"\n                 }\n                 else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                      fq1 = \"fq1.fastq.gz\"\n                 }\n                 if( inputs.fastq2_type=='fastqsanger' ){\n                     fq2 = \"fq2.fastq\"\n                  }\n                  else if( inputs.fastq2_type=='fastqsanger.gz' ){\n                      fq2 = \"fq2.fastq.gz\"\n                   }\n                   lncmd+=\"fq1='\"+fq1+\"'\"\n                   lncmd+=\" && \"\n                   lncmd+=\"fq2='\"+fq2+\"'\"\n                   lncmd+=\" && \"\n                   lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                   lncmd+=\" && \"\n                   lncmd+=\" ln -s '\"+inputs.fastq2.path+\"' $fq2  \"\n\n                }\n           //###################single case\n \n           if (inputs.fastq_file_type ==\"single\"  ){\n             if( inputs.fastq1_type=='fastqsanger' ){\n                 fq1 = \"fq1.fastq\"\n             }\n             else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                  fq1 = \"fq1.fastq.gz\"\n             }\n             lncmd+=\"fq1='\"+fq1+\"'\"\n             lncmd+=\" && \"\n             lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n            }\n            //####### long reads\n             if (  inputs.sequence_long !== null) {\n                 if (inputs.sequence_long_type=='fastqsanger'){\n                          lr = \"lr.fastq\"\n                 }\n                 else if (inputs.sequence_long_type=='fastqsanger.gz') {\n                          lr = \"lr.fastq.gz\"\n                 }\n                 else if (inputs.sequence_longg_type=='fasta') {\n                          lr = \"lr.fasta\"\n                 }\n                 lncmd+=\"lr='\"+lr+\"'\"\n                 lncmd+=\" && \"\n                 lncmd+= \" ln -s '\"+inputs.sequence_long.path+\"' '$lr' \"\n             }\n             return lncmd\n          }\n\n          ##general options\n\n          read -d '' GENERALOPT << EOF\n          ${\n           var opt=\"\"\n           //## General Unicycler Options section\n           opt+=\" --mode \"+inputs.mode+\" \"\n           opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\n           opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\n\n           if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\n\n           //## Spades Options section\n           if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\n           opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\n           opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\n           if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\n\n           opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\n           opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\n           if (inputs.spades_largest_component){opt+=\" --largest_component \"}\n           //## Rotation Options section\n           if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\n           if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\n           opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\n           opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\n           return opt\n           }\n          EOF\n\n          ##additionnal option\n\n          read -d '' ADDOPT << EOF\n          ${\n\n           var opt=\"\"\n\n           if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\n           if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\n           //## Long Read Alignment Options\n           if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\n           opt+=\" --scores \"+inputs.lr_align_scores+\" \"\n           if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\n            return ''+ opt + ''\n          }\n          EOF\n\n          ## Get location for pilon jar file\n\n          ${\n            var cmd=\"\"\n            cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\n            return cmd\n          }\n\n          ## Build Unicycler command\n          ${\n\n            var cmd_base=\"\"\n            var opt=\"\"\n\n            cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\n            cmd_base+=\" -o ./  \"\n            cmd_base+=\" --verbosity 3  \"\n            cmd_base+=\" --pilon_path \\$PILONJAR  \"\n\n           if ( inputs.fastq_file_type == \"paired\"){\n                  opt+=\" -1 $fq1 -2 $fq2  \"\n           }\n           else if ( inputs.fastq_file_type == \"paired_collection\"){\n                  opt+=\" -1 $fq1 -2 $fq2  \"\n           }\n           else if ( inputs.fastq_file_type == \"single\"){\n              opt+=\" -s $fq1 \"\n           }\n           if (  inputs.sequence_long !== null) {\n             opt+=\" -l $lr \"\n           }\n\n           //##  Unicycler command\n           var cmdl=cmd_base+\" \"+opt+\" \\$GENERALOPT \\$ADDOPT \"\n\n           return cmdl\n\n           }\ninputs:\n  fastq_file_type:\n    doc: Paired and single end data\n    type:\n      type: enum\n      symbols:\n      - paired\n      - single\n  fastq1_type:\n    doc: Type of the First set of reads. Only when fastq_file_type = single  or  paired\n    type:\n      type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n    default: fastqsanger\n  fastq1:\n    doc: |-\n      First set of reads with forward reads. Only when fastq_file_type = single or paired\n    type: File\n  fastq2_type:\n    doc: Type of the Second set of reads. Only when fastq_file_type=paired\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n    default: 'null'\n  fastq2:\n    doc: Second set of reads with reverse reads. Only when fastq_file_type=paired\n    type: File?\n  sequence_long_type:\n    doc: long reads file type. If there are no long reads, leave this empty\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n      - fasta\n  sequence_long:\n    doc: long reads. If there are no long reads, leave this empty\n    type: File?\n  compute_slots:\n    type: int?\n    default: 4\n  mode:\n    doc: |\n      Bridging mode, values:\n      conservative (smaller contigs, lower misassembly)\n      normal (moderate contig size and misassembly rate)\n      bold  (longest contigs, higher misassembly rate)\n    type:\n      type: enum\n      symbols:\n      - conservative\n      - normal\n      - bold\n  min_fasta_length:\n    doc: Exclude contigs from the FASTA file which are shorter than this length (bp)\n    type: int?\n    default: 100\n  linear_seqs:\n    doc: The expected number of linear (i.e. non-circular) sequences in the assembly\n    type: int?\n    default: 0\n  min_anchor_seg_len:\n    doc: Unicycler will not use segments shorter than this as scaffolding anchors\n    type: int?\n    default: 0\n  spades_no_correct:\n    doc: |\n      Unicycler uses SPAdes to construct assembly graphs.\n      You can modify some of the SPAdes settings here.\n      Use this ONLY if you know what you are doing!\n      This option turns off SPAdes error correction.\n      Generally it is highly recommended to use correction.\n    type: boolean?\n    default: false\n  spades_min_kmer_frac:\n    doc: |\n      Lowest k-mer size for SPAdes assembly,\n      expressed as a fraction of the read length.\n      min 0, max 1\n    type: float?\n    default: 0.2\n  spades_max_kmer_frac:\n    doc: |\n      Highest k-mer size for SPAdes assembly,\n      expressed as a fraction of the read length.\n      min 0, max 1\n    type: float?\n    default: 0.95\n  spades_kmers:\n    doc: |\n      Exact k-mers size to use for SPAdes assembly, comma-separated\"\n      Kmers must be comma-separated odd integers (no repitition)\n      without space in the range of 11 to 127 (inclusive)\n    type: string?\n    default: 11,127\n  spades_kmer_count:\n    doc: Number of k-mer steps to use in SPAdes assembly, min 0\n    type: int?\n    default: 10\n  spades_depth_filter:\n    doc: |\n      Filter out contigs lower than this fraction\n      of the chromosomal depth.\n      It is done if does not result in graph dead ends\n      min 0, max 1\n    type: float?\n    default: 0.25\n  spades_largest_component:\n    doc: Only keep the largest connected component of the assembly graph if true\n    type: boolean?\n    default: false\n  rotation_no_rotate:\n    doc: |\n      These options control the rotation of completed circular sequence\n      near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\n      Do not rotate completed replicons to start at a standard gene.\n      Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\n      If one is found, the sequence is rotated and/or flipped so that it begins with that gene\n      encoded on the forward strand. This provides consistently oriented assemblies and reduces\n      the risk that a gene will be split across the start and end of the sequence.\n    type: boolean?\n    default: false\n  rotation_start_genes:\n    doc: FASTA file of genes for start point of rotated replicons\n    type: File?\n  rotation_start_gene_id:\n    doc: |-\n      The minimum required BLAST percent identity for a start gene search. max 100, min 0\n    type: float?\n    default: 90.0\n  rotation_start_gene_cov:\n    doc: |-\n      The minimum required BLAST percent coverage for a start gene search. min 0, max 100\n    type: float?\n    default: 95.0\n  pilon_no_pilon:\n    doc: Unicycler uses Pilon tool for polishing final assembly. Do not use if true\n    type: boolean?\n    default: false\n  graph_clean_min_component_size:\n    doc: Contigs shorter than this value (bp) will not be polished using Pilon; min 0\n    type: int?\n    default: 1000\n  graph_clean_min_dead_end_size:\n    doc: |\n      These options control the removal of small leftover sequences after bridging is complete.\n      Unbridged graph components smaller than this size will be removed from the final graph,\n      min 0\n    type: int?\n    default: 1000\n  lr_align_contamination:\n    doc: |\n      FASTA file of known contamination in long reads,\n      e.g. lambda, phiXm or puc18 spike-ins.\n    type: File?\n  lr_align_scores:\n    doc: |\n      Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\n    type: string?\n    default: 3,-6,-5,-2\n  lr_align_low_score:\n    doc: |\n      Score threshold - alignments below this are considered poor,\n      default = set automatically\n    type: int?\noutputs:\n  assembly_graph:\n    type: File\n    outputBinding:\n      glob: assembly.gfa\n  assembly:\n    doc: |\n      fasta assembly output sequence\n      (main output)\n    type: File\n    outputBinding:\n      glob: assembly.fasta\n  # exec_script:\n  #   doc: |\n  #     Launching script for learning purpose\n  #   type: File\n  #   outputBinding:\n  #     glob: '*.sh'\n\nbaseCommand: bash\n\narguments:\n- unicycler_launch.sh\n\nhints:\n  DockerRequirement:\n    dockerPull: biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fastq_file_type': {'doc': 'Paired and single end data', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}}, 'fastq1_type': {'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'default': 'fastqsanger'}, 'fastq1': {'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired', 'type': 'File'}, 'fastq2_type': {'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null'}, 'fastq2': {'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired', 'type': 'File?'}, 'sequence_long_type': {'doc': 'long reads file type. If there are no long reads, leave this empty', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz', 'fasta']}]}, 'sequence_long': {'doc': 'long reads. If there are no long reads, leave this empty', 'type': 'File?'}, 'compute_slots': {'type': 'int?', 'default': 4}, 'mode': {'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}}, 'min_fasta_length': {'doc': 'Exclude contigs from the FASTA file which are shorter than this length (bp)', 'type': 'int?', 'default': 100}, 'linear_seqs': {'doc': 'The expected number of linear (i.e. non-circular) sequences in the assembly', 'type': 'int?', 'default': 0}, 'min_anchor_seg_len': {'doc': 'Unicycler will not use segments shorter than this as scaffolding anchors', 'type': 'int?', 'default': 0}, 'spades_no_correct': {'doc': 'Unicycler uses SPAdes to construct assembly graphs.\\nYou can modify some of the SPAdes settings here.\\nUse this ONLY if you know what you are doing!\\nThis option turns off SPAdes error correction.\\nGenerally it is highly recommended to use correction.\\n', 'type': 'boolean?', 'default': False}, 'spades_min_kmer_frac': {'doc': 'Lowest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length.\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.2}, 'spades_max_kmer_frac': {'doc': 'Highest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length.\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.95}, 'spades_kmers': {'doc': 'Exact k-mers size to use for SPAdes assembly, comma-separated\"\\nKmers must be comma-separated odd integers (no repitition)\\nwithout space in the range of 11 to 127 (inclusive)\\n', 'type': 'string?', 'default': '11,127'}, 'spades_kmer_count': {'doc': 'Number of k-mer steps to use in SPAdes assembly, min 0', 'type': 'int?', 'default': 10}, 'spades_depth_filter': {'doc': 'Filter out contigs lower than this fraction\\nof the chromosomal depth.\\nIt is done if does not result in graph dead ends\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.25}, 'spades_largest_component': {'doc': 'Only keep the largest connected component of the assembly graph if true', 'type': 'boolean?', 'default': False}, 'rotation_no_rotate': {'doc': 'These options control the rotation of completed circular sequence\\nnear the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\\nDo not rotate completed replicons to start at a standard gene.\\nUnicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\\nIf one is found, the sequence is rotated and/or flipped so that it begins with that gene\\nencoded on the forward strand. This provides consistently oriented assemblies and reduces\\nthe risk that a gene will be split across the start and end of the sequence.\\n', 'type': 'boolean?', 'default': False}, 'rotation_start_genes': {'doc': 'FASTA file of genes for start point of rotated replicons', 'type': 'File?'}, 'rotation_start_gene_id': {'doc': 'The minimum required BLAST percent identity for a start gene search. max 100, min 0', 'type': 'float?', 'default': 90.0}, 'rotation_start_gene_cov': {'doc': 'The minimum required BLAST percent coverage for a start gene search. min 0, max 100', 'type': 'float?', 'default': 95.0}, 'pilon_no_pilon': {'doc': 'Unicycler uses Pilon tool for polishing final assembly. Do not use if true', 'type': 'boolean?', 'default': False}, 'graph_clean_min_component_size': {'doc': 'Contigs shorter than this value (bp) will not be polished using Pilon; min 0', 'type': 'int?', 'default': 1000}, 'graph_clean_min_dead_end_size': {'doc': 'These options control the removal of small leftover sequences after bridging is complete.\\nUnbridged graph components smaller than this size will be removed from the final graph,\\nmin 0\\n', 'type': 'int?', 'default': 1000}, 'lr_align_contamination': {'doc': 'FASTA file of known contamination in long reads,\\ne.g. lambda, phiXm or puc18 spike-ins.\\n', 'type': 'File?'}, 'lr_align_scores': {'doc': 'Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\\n', 'type': 'string?', 'default': '3,-6,-5,-2'}, 'lr_align_low_score': {'doc': 'Score threshold - alignments below this are considered poor,\\ndefault = set automatically\\n', 'type': 'int?'}}",
    "cwl_outputs": "{'assembly_graph': {'type': 'File', 'outputBinding': {'glob': 'assembly.gfa'}}, 'assembly': {'doc': 'fasta assembly output sequence\\n(main output)\\n', 'type': 'File', 'outputBinding': {'glob': 'assembly.fasta'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['unicycler_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'unicycler_launch.sh', 'entry': '#!/bin/bash\\n###########################\\n#      unicycler launcher\\n###########################\\n\\n##preparing input files\\n#check permission / chmod  is issues\\n${\\n  var fl=\"\"\\n  var lncmd=\"\"\\n  var fq1=\"\"\\n  var fq2=\"\"\\n  var lr=\"\"\\n\\n//###################paired case\\n      if (inputs.fastq_file_type ==\"paired\"  ){\\n       if( inputs.fastq1_type==\\'fastqsanger\\' ){\\n           fq1 = \"fq1.fastq\"\\n       }\\n       else if( inputs.fastq1_type==\\'fastqsanger.gz\\' ){\\n            fq1 = \"fq1.fastq.gz\"\\n       }\\n       if( inputs.fastq2_type==\\'fastqsanger\\' ){\\n           fq2 = \"fq2.fastq\"\\n        }\\n        else if( inputs.fastq2_type==\\'fastqsanger.gz\\' ){\\n            fq2 = \"fq2.fastq.gz\"\\n         }\\n         lncmd+=\"fq1=\\'\"+fq1+\"\\'\"\\n         lncmd+=\" && \"\\n         lncmd+=\"fq2=\\'\"+fq2+\"\\'\"\\n         lncmd+=\" && \"\\n         lncmd+=\" ln -s \\'\"+inputs.fastq1.path+\"\\' $fq1 \"\\n         lncmd+=\" && \"\\n         lncmd+=\" ln -s \\'\"+inputs.fastq2.path+\"\\' $fq2  \"\\n\\n      }\\n //###################single case\\n\\n if (inputs.fastq_file_type ==\"single\"  ){\\n   if( inputs.fastq1_type==\\'fastqsanger\\' ){\\n       fq1 = \"fq1.fastq\"\\n   }\\n   else if( inputs.fastq1_type==\\'fastqsanger.gz\\' ){\\n        fq1 = \"fq1.fastq.gz\"\\n   }\\n   lncmd+=\"fq1=\\'\"+fq1+\"\\'\"\\n   lncmd+=\" && \"\\n   lncmd+=\" ln -s \\'\"+inputs.fastq1.path+\"\\' $fq1 \"\\n  }\\n  //####### long reads\\n   if (  inputs.sequence_long !== null) {\\n       if (inputs.sequence_long_type==\\'fastqsanger\\'){\\n                lr = \"lr.fastq\"\\n       }\\n       else if (inputs.sequence_long_type==\\'fastqsanger.gz\\') {\\n                lr = \"lr.fastq.gz\"\\n       }\\n       else if (inputs.sequence_longg_type==\\'fasta\\') {\\n                lr = \"lr.fasta\"\\n       }\\n       lncmd+=\"lr=\\'\"+lr+\"\\'\"\\n       lncmd+=\" && \"\\n       lncmd+= \" ln -s \\'\"+inputs.sequence_long.path+\"\\' \\'$lr\\' \"\\n   }\\n   return lncmd\\n}\\n\\n##general options\\n\\nread -d \\'\\' GENERALOPT << EOF\\n${\\n var opt=\"\"\\n //## General Unicycler Options section\\n opt+=\" --mode \"+inputs.mode+\" \"\\n opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\\n opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\\n\\n if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\\n\\n //## Spades Options section\\n if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\\n opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\\n opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\\n if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\\n\\n opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\\n opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\\n if (inputs.spades_largest_component){opt+=\" --largest_component \"}\\n //## Rotation Options section\\n if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\\n if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\\n opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\\n opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\\n return opt\\n }\\nEOF\\n\\n##additionnal option\\n\\nread -d \\'\\' ADDOPT << EOF\\n${\\n\\n var opt=\"\"\\n\\n if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\\n if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\\n //## Long Read Alignment Options\\n if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\\n opt+=\" --scores \"+inputs.lr_align_scores+\" \"\\n if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\\n  return \\'\\'+ opt + \\'\\'\\n}\\nEOF\\n\\n## Get location for pilon jar file\\n\\n${\\n  var cmd=\"\"\\n  cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\\n  return cmd\\n}\\n\\n## Build Unicycler command\\n${\\n\\n  var cmd_base=\"\"\\n  var opt=\"\"\\n\\n  cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\\n  cmd_base+=\" -o ./  \"\\n  cmd_base+=\" --verbosity 3  \"\\n  cmd_base+=\" --pilon_path \\\\$PILONJAR  \"\\n\\n if ( inputs.fastq_file_type == \"paired\"){\\n        opt+=\" -1 $fq1 -2 $fq2  \"\\n }\\n else if ( inputs.fastq_file_type == \"paired_collection\"){\\n        opt+=\" -1 $fq1 -2 $fq2  \"\\n }\\n else if ( inputs.fastq_file_type == \"single\"){\\n    opt+=\" -s $fq1 \"\\n }\\n if (  inputs.sequence_long !== null) {\\n   opt+=\" -l $lr \"\\n }\\n\\n //##  Unicycler command\\n var cmdl=cmd_base+\" \"+opt+\" \\\\$GENERALOPT \\\\$ADDOPT \"\\n\\n return cmdl\\n\\n }\\n'}]}}",
    "cwl_doc": "CWL  wrapped for Unicycler.\nan hybrid assembly pipeline for bacterial genomes\nsee  https://github.com/rrwick/Unicycler\noutputs\n  final assembly in FASTA format (major output)\n  final assembly grapth in graph format, visualized using tools such as\n  Bandage  https://github.com/rrwick/Bandage\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "PreProcessing/batch-preprocess-illumina.cwl",
    "sha": "96c719397af7257aaec4c926cf84d09735bec60a",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/batch-preprocess-illumina.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accessions: string[]\n  ref_human_genome: File\n\nsteps:\n  main:\n    scatter: illumina_accession\n    in:\n      illumina_accession: illumina_accessions\n      ref_human_genome: ref_human_genome\n    out:\n      - fastp_html_report\n      - fastp_json_report\n      - multiqc_html\n      - multiqc_zip\n      - original_fastq1\n      - original_fastq2\n      - bam\n    run: ./preprocess-illumina.cwl\n\n  merge_bam:\n    in:\n      output_name:\n        valueFrom: \"merged.bam\"\n      bams: main/bam\n    out:\n      - bam_merged\n    run: ../bio-cwl-tools/samtools/samtools_merge.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: merge_bam/bam_merged\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n\noutputs:\n  original_fastq1:\n    type: File[]\n    outputSource: main/original_fastq1\n  original_fastq2:\n    type: File[]?\n    outputSource: main/original_fastq2\n\n  processed_fastq:\n    type: File\n    outputSource: samtools_fastq/fastq\n\n  fastp_html_reports:\n    type: File[]\n    outputSource: main/fastp_html_report\n  fastp_json_reports:\n    type: File[]\n    outputSource: main/fastp_json_report\n\n  multiqc_htmls:\n    type: File[]\n    outputSource: main/multiqc_html\n  multiqc_zips:\n    type: File[]\n    outputSource: main/multiqc_zip\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accessions': 'string[]', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File[]', 'outputSource': 'main/original_fastq1'}, 'original_fastq2': {'type': 'File[]?', 'outputSource': 'main/original_fastq2'}, 'processed_fastq': {'type': 'File', 'outputSource': 'samtools_fastq/fastq'}, 'fastp_html_reports': {'type': 'File[]', 'outputSource': 'main/fastp_html_report'}, 'fastp_json_reports': {'type': 'File[]', 'outputSource': 'main/fastp_json_report'}, 'multiqc_htmls': {'type': 'File[]', 'outputSource': 'main/multiqc_html'}, 'multiqc_zips': {'type': 'File[]', 'outputSource': 'main/multiqc_zip'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "main": {
        "scatter": "illumina_accession",
        "in": {
          "illumina_accession": "illumina_accessions",
          "ref_human_genome": "ref_human_genome"
        },
        "out": [
          "fastp_html_report",
          "fastp_json_report",
          "multiqc_html",
          "multiqc_zip",
          "original_fastq1",
          "original_fastq2",
          "bam"
        ],
        "run": "./preprocess-illumina.cwl"
      },
      "merge_bam": {
        "in": {
          "output_name": {
            "valueFrom": "merged.bam"
          },
          "bams": "main/bam"
        },
        "out": [
          "bam_merged"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_merge.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "merge_bam/bam_merged"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/batch-preprocess-ont.cwl",
    "sha": "d6ee102a36b9e9aedde744b626ef02501515cebe",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/batch-preprocess-ont.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accessions: string[]\n  ref_human_genome: File\n\nsteps:\n  main:\n    scatter: illumina_accession\n    in:\n      illumina_accession: illumina_accessions\n      ref_human_genome: ref_human_genome\n    out:\n      - fastqc_summary\n      - fastqc_zip\n      - multiqc_html\n      - multiqc_zip\n      - original_fastq1\n      - bam\n    run: ./preprocess-ont.cwl\n\n  merge_bam:\n    in:\n      output_name:\n        valueFrom: \"merged.bam\"\n      bams: main/bam\n    out:\n      - bam_merged\n    run: ../bio-cwl-tools/samtools/samtools_merge.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: merge_bam/bam_merged\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n\noutputs:\n  original_fastq1:\n    type: File[]\n    outputSource: main/original_fastq1\n\n  processed_fastq:\n    type: File\n    outputSource: samtools_fastq/fastq\n\n  fastqc_summary:\n    type: File[]\n    outputSource: main/fastqc_summary\n  fastqc_zip:\n    type: File[]\n    outputSource: main/fastqc_zip\n\n  multiqc_htmls:\n    type: File[]\n    outputSource: main/multiqc_html\n  multiqc_zips:\n    type: File[]\n    outputSource: main/multiqc_zip\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accessions': 'string[]', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File[]', 'outputSource': 'main/original_fastq1'}, 'processed_fastq': {'type': 'File', 'outputSource': 'samtools_fastq/fastq'}, 'fastqc_summary': {'type': 'File[]', 'outputSource': 'main/fastqc_summary'}, 'fastqc_zip': {'type': 'File[]', 'outputSource': 'main/fastqc_zip'}, 'multiqc_htmls': {'type': 'File[]', 'outputSource': 'main/multiqc_html'}, 'multiqc_zips': {'type': 'File[]', 'outputSource': 'main/multiqc_zip'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "main": {
        "scatter": "illumina_accession",
        "in": {
          "illumina_accession": "illumina_accessions",
          "ref_human_genome": "ref_human_genome"
        },
        "out": [
          "fastqc_summary",
          "fastqc_zip",
          "multiqc_html",
          "multiqc_zip",
          "original_fastq1",
          "bam"
        ],
        "run": "./preprocess-ont.cwl"
      },
      "merge_bam": {
        "in": {
          "output_name": {
            "valueFrom": "merged.bam"
          },
          "bams": "main/bam"
        },
        "out": [
          "bam_merged"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_merge.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "merge_bam/bam_merged"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/preprocess-illumina.cwl",
    "sha": "31dc07ff0b6f457bb9d5a725291ea9d2b25b5997",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/preprocess-illumina.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accession: string\n  hg38: File\n\nsteps:\n  unpack_ref_genome:\n    in:\n      file: hg38\n    out:\n      - hg_38_fa\n    run: ./tools/unpack_ref_db.cwl\n\n  fetch_fastqs:\n    in:\n      sra_accession: illumina_accession\n    out:\n      - fastq_file_1\n      - fastq_file_2\n    run: ../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl\n\n  fastp:\n    in:\n      fastq1: fetch_fastqs/fastq_file_1\n      fastq2: fetch_fastqs/fastq_file_2\n    out:\n      - out_fastq1\n      - out_fastq2\n      - html_report\n      - json_report\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  multiqc:\n    in:\n      qc_files_array: fastp/json_report\n    out:\n      - multiqc_zip\n      - multiqc_html\n    run: ../bio-cwl-tools/multiqc/multiqc.cwl\n\n  bwa_mem:\n    in:\n      Index: unpack_ref_genome/hg_38_fa\n      InputFile:\n        source: [fastp/out_fastq1, fastp/out_fastq2]\n        valueFrom: |\n          ${\n            return self.filter(function(x){return x});\n          }\n        linkMerge: merge_flattened\n      Threads:\n        valueFrom: $(1)\n    out:\n      - reads_stdout\n    run: ../bio-cwl-tools/bwa/BWA-Mem.cwl\n\n  samtools_view:\n    in:\n      sam: bwa_mem/reads_stdout\n    out:\n      - bam\n    run: ../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl\n\n  samtools_fastq:\n    in:\n     bam_sorted: samtools_view/bam\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n  rename_multiqc_html:\n    in:\n      srcfile: multiqc/multiqc_html\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_multiqc_zip:\n    in:\n      srcfile: multiqc/multiqc_zip\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastp_html:\n    in:\n      srcfile: fastp/html_report\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastp.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastp_json:\n    in:\n      srcfile: fastp/json_report\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastp.json\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_bam:\n    in:\n      srcfile: samtools_view/bam\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).bam\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\noutputs:\n  original_fastq1:\n    type: File\n    format: edam:format_1930  # FASTQ\n    outputSource: fetch_fastqs/fastq_file_1\n  original_fastq2:\n    type: File?\n    format: edam:format_1930  # FASTQ\n    outputSource: fetch_fastqs/fastq_file_2\n\n  bam:\n    type: File\n    format: edam:format_2572  # BAM\n    outputSource: rename_bam/outfile\n\n  fastp_html_report:\n    type: File\n    format: edam:format_2331  # HTML\n    outputSource: rename_fastp_html/outfile\n  fastp_json_report:\n    type: File\n    format: edam:format_3464  # JSON\n    outputSource: rename_fastp_json/outfile\n\n  multiqc_html:\n    type: File\n    format: edam:format_2331  # HTML\n    outputSource: rename_multiqc_html/outfile\n  multiqc_zip:\n    type: File\n    format: edam:format_3464  # JSON\n    outputSource: rename_multiqc_zip/outfile\n\n  mapped_fastq:\n    type: File\n    format: edam:format_1930  # FASTQ\n    outputSource: samtools_fastq/fastq\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accession': 'string', 'hg38': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File', 'format': 'edam:format_1930', 'outputSource': 'fetch_fastqs/fastq_file_1'}, 'original_fastq2': {'type': 'File?', 'format': 'edam:format_1930', 'outputSource': 'fetch_fastqs/fastq_file_2'}, 'bam': {'type': 'File', 'format': 'edam:format_2572', 'outputSource': 'rename_bam/outfile'}, 'fastp_html_report': {'type': 'File', 'format': 'edam:format_2331', 'outputSource': 'rename_fastp_html/outfile'}, 'fastp_json_report': {'type': 'File', 'format': 'edam:format_3464', 'outputSource': 'rename_fastp_json/outfile'}, 'multiqc_html': {'type': 'File', 'format': 'edam:format_2331', 'outputSource': 'rename_multiqc_html/outfile'}, 'multiqc_zip': {'type': 'File', 'format': 'edam:format_3464', 'outputSource': 'rename_multiqc_zip/outfile'}, 'mapped_fastq': {'type': 'File', 'format': 'edam:format_1930', 'outputSource': 'samtools_fastq/fastq'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "unpack_ref_genome": {
        "in": {
          "file": "hg38"
        },
        "out": [
          "hg_38_fa"
        ],
        "run": "./tools/unpack_ref_db.cwl"
      },
      "fetch_fastqs": {
        "in": {
          "sra_accession": "illumina_accession"
        },
        "out": [
          "fastq_file_1",
          "fastq_file_2"
        ],
        "run": "../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl"
      },
      "fastp": {
        "in": {
          "fastq1": "fetch_fastqs/fastq_file_1",
          "fastq2": "fetch_fastqs/fastq_file_2"
        },
        "out": [
          "out_fastq1",
          "out_fastq2",
          "html_report",
          "json_report"
        ],
        "run": "../bio-cwl-tools/fastp/fastp.cwl"
      },
      "multiqc": {
        "in": {
          "qc_files_array": "fastp/json_report"
        },
        "out": [
          "multiqc_zip",
          "multiqc_html"
        ],
        "run": "../bio-cwl-tools/multiqc/multiqc.cwl"
      },
      "bwa_mem": {
        "in": {
          "Index": "unpack_ref_genome/hg_38_fa",
          "InputFile": {
            "source": [
              "fastp/out_fastq1",
              "fastp/out_fastq2"
            ],
            "valueFrom": "${\n  return self.filter(function(x){return x});\n}\n",
            "linkMerge": "merge_flattened"
          },
          "Threads": {
            "valueFrom": "$(1)"
          }
        },
        "out": [
          "reads_stdout"
        ],
        "run": "../bio-cwl-tools/bwa/BWA-Mem.cwl"
      },
      "samtools_view": {
        "in": {
          "sam": "bwa_mem/reads_stdout"
        },
        "out": [
          "bam"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "samtools_view/bam"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      },
      "rename_multiqc_html": {
        "in": {
          "srcfile": "multiqc/multiqc_html",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_multiqc_zip": {
        "in": {
          "srcfile": "multiqc/multiqc_zip",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastp_html": {
        "in": {
          "srcfile": "fastp/html_report",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastp.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastp_json": {
        "in": {
          "srcfile": "fastp/json_report",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastp.json"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_bam": {
        "in": {
          "srcfile": "samtools_view/bam",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).bam"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/preprocess-ont.cwl",
    "sha": "4c190ef248bf9d4e313f225f3ebf510e7c42e8de",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/preprocess-ont.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accession: string\n  ref_human_genome: File\n\nsteps:\n  fetch_fastqs:\n    in:\n      sra_accession: illumina_accession\n    out:\n      - fastq_file_1\n      - fastq_files\n    run: ../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl\n\n  nanoplot:\n    in:\n      fastq_files:\n        source: fetch_fastqs/fastq_files\n      loglength:\n        valueFrom: $(true)\n      format:\n        valueFrom: \"png\"\n    out:\n      - dynamic_histogram_read_length\n      - histogram_read_length\n      - length_v_qual_scatter_plot_dot\n      - length_v_qual_scatter_plot_kde\n      - log_transformed_histogram_read_length\n      - report\n      - logfile\n      - nanostats\n      - weighted_histogram_read_length\n      - weighted_log_transform_histogram_read_length\n      - yield_by_length_img\n    run: ../bio-cwl-tools/nanoplot/nanoplot.cwl\n\n  fastqc:\n    in:\n      reads_file: fetch_fastqs/fastq_file_1\n      nogroup:\n        valueFrom: $(true)\n      kmers:\n        valueFrom: $(7)\n    out:\n      - zipped_file\n      - summary_file\n      - html_file\n    run: ../bio-cwl-tools/fastqc/fastqc_2.cwl\n\n  multiqc:\n    in:\n      qc_files_array: fastqc/zipped_file\n    out:\n      - multiqc_zip\n      - multiqc_html\n    run: ../bio-cwl-tools/multiqc/multiqc.cwl\n\n  minimap2:\n    in:\n      indexFile: ref_human_genome\n      fastqFiles: fetch_fastqs/fastq_file_1\n      samOutput:\n        valueFrom: $(true)\n    out:\n      - samfile\n    run: ../bio-cwl-tools/minimap2/minimap2.cwl\n\n  sam2bam:\n    in:\n      sam: minimap2/samfile\n    out:\n      - bam\n    run: ../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: sam2bam/bam\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n    \n  rename_multiqc_html:\n    in:\n      srcfile: multiqc/multiqc_html\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_multiqc_zip:\n    in:\n      srcfile: multiqc/multiqc_zip\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastqc_summary:\n    in:\n      srcfile: fastqc/summary_file\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastqc_zip:\n    in:\n      srcfile: fastqc/zipped_file\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastq:\n    in:\n      srcfile: samtools_fastq/fastq\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).fastq\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_bam:\n    in:\n      srcfile: sam2bam/bam\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).bam\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\noutputs:\n  original_fastq1:\n    type: File\n    outputSource: rename_fastq/outfile\n\n  fastqc_summary:\n    type: File\n    outputSource: rename_fastqc_summary/outfile\n  fastqc_zip:\n    type: File\n    outputSource: rename_fastqc_zip/outfile\n\n\n  multiqc_html:\n    type: File\n    outputSource: rename_multiqc_html/outfile\n  multiqc_zip:\n    type: File\n    outputSource: rename_multiqc_zip/outfile\n\n  bam:\n    type: File\n    outputSource: rename_bam/outfile",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accession': 'string', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File', 'outputSource': 'rename_fastq/outfile'}, 'fastqc_summary': {'type': 'File', 'outputSource': 'rename_fastqc_summary/outfile'}, 'fastqc_zip': {'type': 'File', 'outputSource': 'rename_fastqc_zip/outfile'}, 'multiqc_html': {'type': 'File', 'outputSource': 'rename_multiqc_html/outfile'}, 'multiqc_zip': {'type': 'File', 'outputSource': 'rename_multiqc_zip/outfile'}, 'bam': {'type': 'File', 'outputSource': 'rename_bam/outfile'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "fetch_fastqs": {
        "in": {
          "sra_accession": "illumina_accession"
        },
        "out": [
          "fastq_file_1",
          "fastq_files"
        ],
        "run": "../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl"
      },
      "nanoplot": {
        "in": {
          "fastq_files": {
            "source": "fetch_fastqs/fastq_files"
          },
          "loglength": {
            "valueFrom": "$(true)"
          },
          "format": {
            "valueFrom": "png"
          }
        },
        "out": [
          "dynamic_histogram_read_length",
          "histogram_read_length",
          "length_v_qual_scatter_plot_dot",
          "length_v_qual_scatter_plot_kde",
          "log_transformed_histogram_read_length",
          "report",
          "logfile",
          "nanostats",
          "weighted_histogram_read_length",
          "weighted_log_transform_histogram_read_length",
          "yield_by_length_img"
        ],
        "run": "../bio-cwl-tools/nanoplot/nanoplot.cwl"
      },
      "fastqc": {
        "in": {
          "reads_file": "fetch_fastqs/fastq_file_1",
          "nogroup": {
            "valueFrom": "$(true)"
          },
          "kmers": {
            "valueFrom": "$(7)"
          }
        },
        "out": [
          "zipped_file",
          "summary_file",
          "html_file"
        ],
        "run": "../bio-cwl-tools/fastqc/fastqc_2.cwl"
      },
      "multiqc": {
        "in": {
          "qc_files_array": "fastqc/zipped_file"
        },
        "out": [
          "multiqc_zip",
          "multiqc_html"
        ],
        "run": "../bio-cwl-tools/multiqc/multiqc.cwl"
      },
      "minimap2": {
        "in": {
          "indexFile": "ref_human_genome",
          "fastqFiles": "fetch_fastqs/fastq_file_1",
          "samOutput": {
            "valueFrom": "$(true)"
          }
        },
        "out": [
          "samfile"
        ],
        "run": "../bio-cwl-tools/minimap2/minimap2.cwl"
      },
      "sam2bam": {
        "in": {
          "sam": "minimap2/samfile"
        },
        "out": [
          "bam"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "sam2bam/bam"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      },
      "rename_multiqc_html": {
        "in": {
          "srcfile": "multiqc/multiqc_html",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_multiqc_zip": {
        "in": {
          "srcfile": "multiqc/multiqc_zip",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastqc_summary": {
        "in": {
          "srcfile": "fastqc/summary_file",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastqc_zip": {
        "in": {
          "srcfile": "fastqc/zipped_file",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastq": {
        "in": {
          "srcfile": "samtools_fastq/fastq",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).fastq"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_bam": {
        "in": {
          "srcfile": "sam2bam/bam",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).bam"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/tools/unpack_ref_db.cwl",
    "sha": "d27ed0d48f2948217d1bc95e1777de0cae34e331",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/tools/unpack_ref_db.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\ndoc: decompression tool using Lempel-Ziv coding (LZ77)\nrequirements:\n  DockerRequirement:\n    dockerPull: alpine:3.9\n\nbaseCommand: [tar, xvzf]\n\n\ninputs:\n  file:\n    type: File\n    inputBinding: {}\n\noutputs:\n  hg_38_fa:\n    type: File\n    outputBinding:\n      glob: static/hg38.fna\n    secondaryFiles:\n      - .fai\n      - .fwt\n      - .amb\n      - .ann\n      - .pac\n      - .sa\n      - .bwt\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'file': {'type': 'File', 'inputBinding': {}}}",
    "cwl_outputs": "{'hg_38_fa': {'type': 'File', 'outputBinding': {'glob': 'static/hg38.fna'}, 'secondaryFiles': ['.fai', '.fwt', '.amb', '.ann', '.pac', '.sa', '.bwt']}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['tar', 'xvzf']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'alpine:3.9'}}",
    "cwl_doc": "decompression tool using Lempel-Ziv coding (LZ77)",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/archive/bowtie2.cwl",
    "sha": "53929051232cf534b1ad450b96c0c5e10a00c0aa",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/bowtie2.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Aligns reads from ATAC-seq or ChIP-seq to an indexed reference genome\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference_index)\nhints:\n#  ResourceRequirement:\n#    coresMin: 4\n#    ramMin: 30000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/bowtie2:2.2.6-2\n  SoftwareRequirement:\n    packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\nbaseCommand: [\"bowtie2\"]\narguments:\n  - valueFrom: --very-sensitive\n    position: 1\n#  - valueFrom: $(runtime.cores) # set the number of threads\n#    prefix: \"-p\"\n#    position: 1\n  - position: 4 # prefix for fastq1, differs for paired/single end\n    valueFrom: |\n      ${\n        if ( inputs.is_paired_end ){\n           return \"-1\";\n        }\n        else {\n          return \"-U\";\n        }\n      }\n  - valueFrom: $(inputs.fastq1.nameroot).sam\n    prefix: \"-S\"\n    position: 6\n#stderr: $(inputs.fastq1.nameroot).bowtie2_stderr # log file\n  \n\ninputs:\n  reference_index:\n    doc: path to the FM-index files for the chosen reference genome\n    type: File\n    secondaryFiles:\n#      - $(self.basename).1.bt2\n      - $(self.nameroot.slice(0,-1))2.bt2\n      - $(self.nameroot.slice(0,-1))3.bt2\n      - $(self.nameroot.slice(0,-1))4.bt2\n      - $(self.nameroot.slice(0,-1))rev.1.bt2\n      - $(self.nameroot.slice(0,-1))rev.2.bt2\n    inputBinding:\n      position: 2\n      prefix: \"-x\"\n      valueFrom: $(self.nameroot.slice(0,-2))\n  fastq1:\n    type: File\n    inputBinding:\n      position: 4\n\n  is_paired_end:\n    type: boolean\n    default: false\n  fastq2:\n    type: File?\n    inputBinding:\n      valueFrom: |\n        ${\n            if ( inputs.is_paired_end ){\n                return self;\n            }\n            else {\n              return null;\n            }\n        }  \n      position: 12\n      prefix: \"-2\"\n  max_mapping_insert_length:\n    doc: usefull for very long fragments, as expected for ATAC\n    type: long?\n    default: 2000\n#    inputBinding:\n#      prefix: --maxins\n#      position: 1\n\n      \noutputs: \n  sam:\n    type: File\n    outputBinding:\n      glob: \"*.sam\"\n#  bowtie2_log:\n#    type: stderr\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference_index': {'doc': 'path to the FM-index files for the chosen reference genome', 'type': 'File', 'secondaryFiles': ['$(self.nameroot.slice(0,-1))2.bt2', '$(self.nameroot.slice(0,-1))3.bt2', '$(self.nameroot.slice(0,-1))4.bt2', '$(self.nameroot.slice(0,-1))rev.1.bt2', '$(self.nameroot.slice(0,-1))rev.2.bt2'], 'inputBinding': {'position': 2, 'prefix': '-x', 'valueFrom': '$(self.nameroot.slice(0,-2))'}}, 'fastq1': {'type': 'File', 'inputBinding': {'position': 4}}, 'is_paired_end': {'type': 'boolean', 'default': False}, 'fastq2': {'type': 'File?', 'inputBinding': {'valueFrom': '${\\n    if ( inputs.is_paired_end ){\\n        return self;\\n    }\\n    else {\\n      return null;\\n    }\\n}  \\n', 'position': 12, 'prefix': '-2'}}, 'max_mapping_insert_length': {'doc': 'usefull for very long fragments, as expected for ATAC', 'type': 'long?', 'default': 2000}}",
    "cwl_outputs": "{'sam': {'type': 'File', 'outputBinding': {'glob': '*.sam'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'kerstenbreuer/bowtie2:2.2.6-2'}, 'SoftwareRequirement': {'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": "[{'valueFrom': '--very-sensitive', 'position': 1}, {'position': 4, 'valueFrom': '${\\n  if ( inputs.is_paired_end ){\\n     return \"-1\";\\n  }\\n  else {\\n    return \"-U\";\\n  }\\n}\\n'}, {'valueFrom': '$(inputs.fastq1.nameroot).sam', 'prefix': '-S', 'position': 6}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.reference_index)']}}",
    "cwl_doc": "Aligns reads from ATAC-seq or ChIP-seq to an indexed reference genome\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/archive/draft2_variation.cwl",
    "sha": "02e59c5c25cf28d16c6f8168198077710388533a",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/draft2_variation.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: variation\nlabel: variation\n\ninputs:\n  - id: reference_in\n    type:\n      - File\n      - type: array\n        items: File\n  - id: fastq1\n    type: File\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: min_length_required\n    type: int?\noutputs:\n  - id: outFile\n    outputSource:\n      - picard_markduplicates/outFile\n    type: File\n\nsteps:\n  - id: bowtie2_build\n    in:\n      - id: reference_in\n        source:\n          - reference_in\n    out:\n      - id: indices\n      - id: output_log\n    run: ../bio-cwl-tools/bowtie2/bowtie2_build.cwl\n\n  - id: fastp\n    in:\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: fastq1\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n#      - id: out_fastq2\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  - id: bowtie2\n    in:\n      - id: fastq1\n        source: fastp/out_fastq1\n      - id: reference_index\n        source: bowtie2_build/indices\n    out:\n#      - id: bowtie2_log\n      - id: sam\n    run: ./bowtie2.cwl\n\n  - id: picard_sortsam\n    in:\n      - id: inputFile\n        source: bowtie2/sam\n    out:\n      - id: outFile\n    run: ./picard_sortsam.cwl\n\n  - id: picard_markduplicates\n    in:\n      - id: inputFile\n        source: picard_sortsam/outFile\n    out:\n      - id: outFile\n      - id: metrics_file\n    run: ./picard_markduplicates.cwl\n\nrequirements: []\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "variation",
    "cwl_inputs": "[{'id': 'reference_in', 'type': ['File', {'type': 'array', 'items': 'File'}]}, {'id': 'fastq1', 'type': 'File'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'min_length_required', 'type': 'int?'}]",
    "cwl_outputs": "[{'id': 'outFile', 'outputSource': ['picard_markduplicates/outFile'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "variation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/archive/draft_variation.cwl",
    "sha": "c1b67db373d790db5b25a8842d4655b576734fb1",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/draft_variation.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: variation\nlabel: variation\ninputs:\n  - id: reference_in\n    type:\n      - File\n      - type: array\n        items: File\n\n  - id: fastq1\n    type: File\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: min_length_required\n    type: int?\noutputs: \n  # - id: multiqc_html\n  #   outputSource:\n  #     - multiqc/multiqc_html\n  #   type: File\n  - id: sam\n    outputSource:\n      - bowtie2/sam\n    type: File\nsteps:\n  - id: bowtie2_build\n    in:\n      - id: reference_in\n        source:\n          - reference_in\n    out:\n      - id: indices\n      - id: output_log\n    run: ../bio-cwl-tools/bowtie2/bowtie2_build.cwl\n\n  - id: fastp\n    in:\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: fastq1\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n      # - id: out_fastq2\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  # - id: multiqc\n  #   in:\n  #     - id: qc_files_array\n  #       source:\n  #         - fastp/html_report\n  #   out:\n  #     - id: diree\n  #     - id: multiqc_html\n  #     - id: multiqc_zip\n  #   run: ./multiqc.cwl\n\n  - id: bowtie2\n    in:\n      - id: fastq1\n        source: fastp/out_fastq1\n      - id: reference_index\n        source: bowtie2_build/indices\n    out: \n     # - id: bowtie2_log\n      - id: sam\n    run: ./bowtie2.cwl\n\nrequirements: []\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "variation",
    "cwl_inputs": "[{'id': 'reference_in', 'type': ['File', {'type': 'array', 'items': 'File'}]}, {'id': 'fastq1', 'type': 'File'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'min_length_required', 'type': 'int?'}]",
    "cwl_outputs": "[{'id': 'sam', 'outputSource': ['bowtie2/sam'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "variation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/archive/snpeff_build.cwl",
    "sha": "6dbe2b79fd220fac08845ca0d200e2b6dc1d0062",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/snpeff_build.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nbaseCommand: [snpEff, build]\n\narguments:\n  - -v #verbose\n  - -dataDir /data\n  - -configOption $(inputs.dbname).genome=$(inputs.dbname)\ninputs:\n  - id: dbname\n    type: string\n    inputBinding:\n      prefix: -genbank\n      position: 1000\n\n  - id: bankfile\n    type: File\noutputs:  []\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: biocontainers/snpeff:v4.1k_cv3\n    dockerOutputDirectory: /data/\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: \"$({class: 'Directory', listing: []})\"\n        entryname: $(inputs.dbname)\n        writable: true\n      - entryname: $(inputs.dbname)/genes.gbk\n        entry: $(inputs.bankfile)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'dbname', 'type': 'string', 'inputBinding': {'prefix': '-genbank', 'position': 1000}}, {'id': 'bankfile', 'type': 'File'}]",
    "cwl_outputs": "[]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['snpEff', 'build']",
    "cwl_arguments": "['-v', '-dataDir /data', '-configOption $(inputs.dbname).genome=$(inputs.dbname)']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bowtie2_align.cwl",
    "sha": "964e9386bdc1c17da84ea6a6494268a3ccd78cd9",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bowtie2_align.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n- class: ShellCommandRequirement\n- class: InlineJavascriptRequirement\n  expressionLib:\n  - var default_output_filename = function() {\n        if (Array.isArray(inputs.filelist) && inputs.filelist.length > 0){\n          return inputs.filelist[0].location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n        } else\n          if (inputs.filelist != null){\n            return inputs.filelist.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n          } else\n            if (Array.isArray(inputs.filelist_mates) && inputs.filelist_mates.length > 0){\n              return inputs.filelist_mates[0].location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n            } else\n              if (inputs.filelist_mates != null){\n                return inputs.filelist_mates.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n              } else {\n                return null;\n              }\n    };\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/bowtie2:v2.3.0\n  dockerFile: >\n    $import: ./dockerfiles/bowtie2-Dockerfile\n- class: SoftwareRequirement\n  packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\ninputs:\n\n  indices_file:\n    type: File?\n    doc: File with secondaryFiles containing all the indices\n    inputBinding:\n      position: 81\n      prefix: -x\n      valueFrom: $(self.path.split('.').slice(0,-2).join('.'))\n\n  indices_folder:\n    type: Directory?\n    doc: \"Folder with indices files\"\n    inputBinding:\n      position: 81\n      prefix: '-x'\n      valueFrom: |\n        ${\n            for (var i = 0; i < self.listing.length; i++) {\n                if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2' ||\n                    self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2l'){\n                  return self.listing[i].path.split('.').slice(0,-3).join('.');\n                }\n            }\n            return null;\n        }\n\n  filelist:\n    type:\n    - \"null\"\n    - File\n    - type: array\n      items: File\n    doc: |\n      {-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\n      <m1>       Files with #1 mates, paired with files in <m2>.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n      <m2>       Files with #2 mates, paired with files in <m1>.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n      <r>        Files with unpaired reads.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n    inputBinding:\n      itemSeparator: \",\"\n      position: 83\n\n  filelist_mates:\n    type:\n    - \"null\"\n    - File\n    - type: array\n      items: File\n    inputBinding:\n      itemSeparator: \",\"\n      position: 85\n\n  output_filename:\n    type: string\n    inputBinding:\n      position: 90\n      prefix: \"-S\"\n      valueFrom: |\n        ${\n            if (self == \"\"){\n              return default_output_filename();\n            } else {\n              return self;\n            }\n        }\n    default: \"\"\n    doc: |\n      File for SAM output (default: stdout)\n\n  q:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are FASTQ .fq/.fastq (default)\"\n    inputBinding:\n      position: 1\n      prefix: '-q'\n\n  qseq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are in Illumina's qseq format\"\n    inputBinding:\n      position: 1\n      prefix: '--qseq'\n\n  f:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are (multi-)FASTA .fa/.mfa\"\n    inputBinding:\n      position: 1\n      prefix: '-f'\n\n  raw:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are raw one-sequence-per-line\"\n    inputBinding:\n      position: 1\n      prefix: '-r'\n\n  c:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"<m1>, <m2>, <r> are sequences themselves, not files\"\n    inputBinding:\n      position: 1\n      prefix: '-c'\n\n  s:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      skip the first <int> reads/pairs in the input (none)\n    inputBinding:\n      position: 2\n      prefix: '-s'\n\n  u:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      stop after first <int> reads/pairs (no limit)\n    inputBinding:\n      position: 3\n      prefix: '-u'\n\n  clip_5p_end:\n    type: int?\n    doc: |\n      trim <int> bases from 5'/left end of reads (0)\n    inputBinding:\n      position: 4\n      prefix: '-5'\n\n  clip_3p_end:\n    type: int?\n    doc: |\n      trim <int> bases from 3'/right end of reads (0)\n    inputBinding:\n      position: 5\n      prefix: '-3'\n\n  phred33_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities are Phred+33 (default)\"\n    inputBinding:\n      position: 6\n      prefix: '--phred33'\n\n  phred64_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities are Phred+64\"\n    inputBinding:\n      position: 6\n      prefix: '--phred64'\n\n  integer_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities encoded as space-delimited integers\"\n    inputBinding:\n      position: 6\n      prefix: '--int-quals'\n\n  n:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      max # mismatches in seed alignment; can be 0 or 1 (0)\n    inputBinding:\n      position: 7\n      prefix: '-N'\n\n  l:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      length of seed substrings; must be >3, <32 (22)\n    inputBinding:\n      position: 8\n      prefix: '-L'\n\n  i:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      interval between seed substrings w/r/t read len (S,1,1.15)\n    inputBinding:\n      position: 9\n      prefix: '-i'\n\n  n_ceil:\n    type:\n    - \"null\"\n    - string\n    doc: >\n      func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)\n    inputBinding:\n      position: 10\n      prefix: '--n-ceil'\n\n  dpad:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      include <int> extra ref chars on sides of DP table (15)\n    inputBinding:\n      position: 11\n      prefix: '--dpad'\n\n  gbar:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      disallow gaps within <int> nucs of read extremes (4)\n    inputBinding:\n      position: 12\n      prefix: '--gbar'\n\n  ignore_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      treat all quality values as 30 on Phred scale (off)\n    inputBinding:\n      position: 13\n      prefix: '--ignore-quals'\n\n  nofw:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not align forward (original) version of read (off)\n    inputBinding:\n      position: 14\n      prefix: '--nofw'\n\n  norc:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not align reverse-complement version of read (off)\n    inputBinding:\n      position: 15\n      prefix: '--norc'\n\n  no_1mm_upfront:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments\n    inputBinding:\n      position: 16\n      prefix: '--no-1mm-upfront'\n\n  end_to_end:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      entire read must align; no clipping (on)\n      Options:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n        --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50\n        --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\n        --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 17\n      prefix: '--end-to-end'\n\n  end_to_end_very_fast:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n    inputBinding:\n      position: 18\n      prefix: '--very-fast'\n\n  end_to_end_fast:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n    inputBinding:\n      position: 18\n      prefix: '--fast'\n\n  end_to_end_sensitive:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\n    inputBinding:\n      position: 18\n      prefix: '--sensitive'\n\n  end_to_end_very_sensitive:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 18\n      prefix: '--very-sensitive'\n\n  local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      local alignment; ends might be soft clipped (off)\n      Options:\n        --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\n        --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\n        --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\n        --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 19\n      prefix: '--local'\n\n  local_very_fast_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\n    inputBinding:\n      position: 20\n      prefix: '--very-fast-local'\n\n  local_fast_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\n    inputBinding:\n      position: 20\n      prefix: '--fast-local'\n\n  local_sensitive_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\n    inputBinding:\n      position: 20\n      prefix: '--sensitive-local'\n\n  local_very_sensitive_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 20\n      prefix: '--very-sensitive-local'\n\n  ma:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      match bonus (0 for --end-to-end, 2 for --local)\n    inputBinding:\n      position: 21\n      prefix: '--ma'\n\n  mp:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      max penalty for mismatch; lower qual = lower penalty (6)\n    inputBinding:\n      position: 22\n      prefix: '--mp'\n\n  np:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      penalty for non-A/C/G/Ts in read/ref (1)\n    inputBinding:\n      position: 23\n      prefix: '--np'\n\n  rdg:\n    type:\n    - \"null\"\n    - int[]\n    doc: |\n      read gap open, extend penalties (5,3)\n    inputBinding:\n      position: 24\n      itemSeparator: \",\"\n      prefix: '--rdg'\n\n  rfg:\n    type:\n    - \"null\"\n    - int[]\n    doc: |\n      reference gap open, extend penalties (5,3)\n    inputBinding:\n      position: 25\n      itemSeparator: \",\"\n      prefix: '--rfg'\n\n  score_min:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)\n    inputBinding:\n      position: 26\n      prefix: '--score-min'\n\n  k:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      report up to <int> alns per read; MAPQ not meaningful\n    inputBinding:\n      position: 27\n      prefix: '-k'\n\n  a:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      report all alignments; very slow, MAPQ not meaningful\n    inputBinding:\n      position: 27\n      prefix: '-a'\n\n  d:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      give up extending after <int> failed extends in a row (15)\n    inputBinding:\n      position: 28\n      prefix: '-D'\n\n  r:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      for reads w/ repetitive seeds, try <int> sets of seeds (2)\n    inputBinding:\n      position: 29\n      prefix: '-R'\n\n  minins:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      minimum fragment length (0)\n    inputBinding:\n      position: 30\n      prefix: '--minins'\n\n  maxins:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      maxins fragment length (0)\n    inputBinding:\n      position: 30\n      prefix: '--maxins'\n\n  fr:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--fr'\n\n  rf:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--rf'\n\n  ff:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--ff'\n\n  no_mixed:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      suppress unpaired alignments for paired reads\n    inputBinding:\n      position: 32\n      prefix: '--no-mixed'\n\n  no_discordant:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      suppress discordant alignments for paired reads\n    inputBinding:\n      position: 33\n      prefix: '--no-discordant'\n\n  no_dovetail:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when mates extend past each other\n    inputBinding:\n      position: 34\n      prefix: '--no-dovetail'\n\n  no_contain:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when one mate alignment contains other\n    inputBinding:\n      position: 35\n      prefix: '--no-contain'\n\n  no_overlap:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when mates overlap at all\n    inputBinding:\n      position: 36\n      prefix: '--no-overlap'\n\n  t:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      print wall-clock time taken by search phases\n    inputBinding:\n      position: 37\n      prefix: '-t'\n\n  un:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write unpaired reads that didn't align to <path>\n    inputBinding:\n      position: 38\n      prefix: '--un'\n\n  al:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write unpaired reads that aligned at least once to <path>\n    inputBinding:\n      position: 39\n      prefix: '--al'\n\n  un_conc:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write pairs that didn't align concordantly to <path>\n    inputBinding:\n      position: 40\n      prefix: '--un-conc'\n\n  al_conc:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write pairs that aligned concordantly at least once to <path>\n    inputBinding:\n      position: 41\n      prefix: '--al-conc'\n\n  quiet:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"print nothing to stderr except serious errors\"\n    inputBinding:\n      position: 42\n      prefix: '--quiet'\n\n  met_file:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      send metrics to file at <path> (off)\n    inputBinding:\n      position: 43\n      prefix: '--met-file'\n\n  met_stderr:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"send metrics to stderr (off)\"\n    inputBinding:\n      position: 44\n      prefix: '--met-stderr'\n\n  met:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      report internal counters & metrics every <int> secs (1)\n    inputBinding:\n      position: 45\n      prefix: '--met'\n\n  no_unal:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress SAM records for unaligned reads\"\n    inputBinding:\n      position: 46\n      prefix: '--no-unal'\n\n  no_head:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress header lines, i.e. lines starting with @\"\n    inputBinding:\n      position: 47\n      prefix: '--no-head'\n\n  no_sq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress @SQ header lines\"\n    inputBinding:\n      position: 48\n      prefix: '--no-sq'\n\n  rg_id:\n    type:\n    - \"null\"\n    - string\n    doc: \"set read group id, reflected in @RG line and RG:Z: opt field\"\n    inputBinding:\n      position: 49\n      prefix: '--rg-id'\n\n  rg:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      add <text> (\"lab:value\") to @RG line of SAM header.\n      Note: @RG line only printed when --rg-id is set.\n    inputBinding:\n      position: 50\n      prefix: '--rg'\n\n  omit_sec_seq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"put '*' in SEQ and QUAL fields for secondary alignments\"\n    inputBinding:\n      position: 51\n      prefix: '--omit-sec-seq'\n\n  threads:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      number of alignment threads to launch (1)\n    inputBinding:\n      position: 52\n      prefix: '-p'\n\n  reorder:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      force SAM output order to match order of input reads\n    inputBinding:\n      position: 53\n      prefix: '--reorder'\n\n  mm:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"use memory-mapped I/O for index; many 'bowtie's can share\"\n    inputBinding:\n      position: 54\n      prefix: '--mm'\n\n  qc_filter:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"filter out reads that are bad according to QSEQ filter\"\n    inputBinding:\n      position: 55\n      prefix: '--qc-filter'\n#\n  seed:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      seed for random number generator (0)\n    inputBinding:\n      position: 56\n      prefix: '--seed'\n\n  non_deterministic:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"seed rand. gen. arbitrarily instead of using read attributes\"\n    inputBinding:\n      position: 57\n      prefix: '--non-deterministic'\n\noutputs:\n\n  output:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n           if (inputs.output_filename == \"\"){\n             return default_output_filename();\n           } else {\n             return inputs.output_filename;\n           }\n        }\n\n  output_log:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n           if (inputs.output_filename == \"\"){\n             return default_output_filename().split('.').slice(0,-1).join('.') + \".log\";\n           } else {\n             return inputs.output_filename.split('.').slice(0,-1).join('.') + \".log\";\n           }\n        }\n\nbaseCommand:\n  - bowtie2\n\narguments:\n  - valueFrom: |\n      ${\n        if (inputs.filelist && inputs.filelist_mates){\n          return \"-1\";\n        } else if (inputs.filelist){\n          return \"-U\";\n        } else {\n          return null;\n        }\n      }\n    position: 82\n  - valueFrom: |\n      ${\n        if (inputs.filelist && inputs.filelist_mates){\n          return \"-2\";\n        } else if (inputs.filelist_mates){\n          return \"-U\";\n        } else {\n          return null;\n        }\n      }\n    position: 84\n  - valueFrom: |\n      ${\n        if (inputs.output_filename == \"\"){\n          return ' 2> ' + default_output_filename().split('.').slice(0,-1).join('.') + '.log';\n        } else {\n          return ' 2> ' + inputs.output_filename.split('.').slice(0,-1).join('.') + '.log';\n        }\n      }\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- http://schema.org/version/latest/schema.rdf\n\ns:name: \"bowtie2_align\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:isPartOf:\n  class: s:CreativeWork\n  s:name: Common Workflow Language\n  s:url: http://commonwl.org/\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie aligner to align input FASTQ file(s) to reference genome\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'indices_file': {'type': 'File?', 'doc': 'File with secondaryFiles containing all the indices', 'inputBinding': {'position': 81, 'prefix': '-x', 'valueFrom': \"$(self.path.split('.').slice(0,-2).join('.'))\"}}, 'indices_folder': {'type': 'Directory?', 'doc': 'Folder with indices files', 'inputBinding': {'position': 81, 'prefix': '-x', 'valueFrom': \"${\\n    for (var i = 0; i < self.listing.length; i++) {\\n        if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2' ||\\n            self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2l'){\\n          return self.listing[i].path.split('.').slice(0,-3).join('.');\\n        }\\n    }\\n    return null;\\n}\\n\"}}, 'filelist': {'type': ['null', 'File', {'type': 'array', 'items': 'File'}], 'doc': \"{-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\\n<m1>       Files with #1 mates, paired with files in <m2>.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n<m2>       Files with #2 mates, paired with files in <m1>.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n<r>        Files with unpaired reads.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n\", 'inputBinding': {'itemSeparator': ',', 'position': 83}}, 'filelist_mates': {'type': ['null', 'File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'itemSeparator': ',', 'position': 85}}, 'output_filename': {'type': 'string', 'inputBinding': {'position': 90, 'prefix': '-S', 'valueFrom': '${\\n    if (self == \"\"){\\n      return default_output_filename();\\n    } else {\\n      return self;\\n    }\\n}\\n'}, 'default': '', 'doc': 'File for SAM output (default: stdout)\\n'}, 'q': {'type': ['null', 'boolean'], 'doc': 'query input files are FASTQ .fq/.fastq (default)', 'inputBinding': {'position': 1, 'prefix': '-q'}}, 'qseq': {'type': ['null', 'boolean'], 'doc': \"query input files are in Illumina's qseq format\", 'inputBinding': {'position': 1, 'prefix': '--qseq'}}, 'f': {'type': ['null', 'boolean'], 'doc': 'query input files are (multi-)FASTA .fa/.mfa', 'inputBinding': {'position': 1, 'prefix': '-f'}}, 'raw': {'type': ['null', 'boolean'], 'doc': 'query input files are raw one-sequence-per-line', 'inputBinding': {'position': 1, 'prefix': '-r'}}, 'c': {'type': ['null', 'boolean'], 'doc': '<m1>, <m2>, <r> are sequences themselves, not files', 'inputBinding': {'position': 1, 'prefix': '-c'}}, 's': {'type': ['null', 'int'], 'doc': 'skip the first <int> reads/pairs in the input (none)\\n', 'inputBinding': {'position': 2, 'prefix': '-s'}}, 'u': {'type': ['null', 'int'], 'doc': 'stop after first <int> reads/pairs (no limit)\\n', 'inputBinding': {'position': 3, 'prefix': '-u'}}, 'clip_5p_end': {'type': 'int?', 'doc': \"trim <int> bases from 5'/left end of reads (0)\\n\", 'inputBinding': {'position': 4, 'prefix': '-5'}}, 'clip_3p_end': {'type': 'int?', 'doc': \"trim <int> bases from 3'/right end of reads (0)\\n\", 'inputBinding': {'position': 5, 'prefix': '-3'}}, 'phred33_quals': {'type': ['null', 'boolean'], 'doc': 'qualities are Phred+33 (default)', 'inputBinding': {'position': 6, 'prefix': '--phred33'}}, 'phred64_quals': {'type': ['null', 'boolean'], 'doc': 'qualities are Phred+64', 'inputBinding': {'position': 6, 'prefix': '--phred64'}}, 'integer_quals': {'type': ['null', 'boolean'], 'doc': 'qualities encoded as space-delimited integers', 'inputBinding': {'position': 6, 'prefix': '--int-quals'}}, 'n': {'type': ['null', 'int'], 'doc': 'max # mismatches in seed alignment; can be 0 or 1 (0)\\n', 'inputBinding': {'position': 7, 'prefix': '-N'}}, 'l': {'type': ['null', 'int'], 'doc': 'length of seed substrings; must be >3, <32 (22)\\n', 'inputBinding': {'position': 8, 'prefix': '-L'}}, 'i': {'type': ['null', 'int'], 'doc': 'interval between seed substrings w/r/t read len (S,1,1.15)\\n', 'inputBinding': {'position': 9, 'prefix': '-i'}}, 'n_ceil': {'type': ['null', 'string'], 'doc': 'func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)\\n', 'inputBinding': {'position': 10, 'prefix': '--n-ceil'}}, 'dpad': {'type': ['null', 'int'], 'doc': 'include <int> extra ref chars on sides of DP table (15)\\n', 'inputBinding': {'position': 11, 'prefix': '--dpad'}}, 'gbar': {'type': ['null', 'int'], 'doc': 'disallow gaps within <int> nucs of read extremes (4)\\n', 'inputBinding': {'position': 12, 'prefix': '--gbar'}}, 'ignore_quals': {'type': ['null', 'boolean'], 'doc': 'treat all quality values as 30 on Phred scale (off)\\n', 'inputBinding': {'position': 13, 'prefix': '--ignore-quals'}}, 'nofw': {'type': ['null', 'boolean'], 'doc': 'do not align forward (original) version of read (off)\\n', 'inputBinding': {'position': 14, 'prefix': '--nofw'}}, 'norc': {'type': ['null', 'boolean'], 'doc': 'do not align reverse-complement version of read (off)\\n', 'inputBinding': {'position': 15, 'prefix': '--norc'}}, 'no_1mm_upfront': {'type': ['null', 'boolean'], 'doc': 'do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments\\n', 'inputBinding': {'position': 16, 'prefix': '--no-1mm-upfront'}}, 'end_to_end': {'type': ['null', 'boolean'], 'doc': 'entire read must align; no clipping (on)\\nOptions:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n  --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50\\n  --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\\n  --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 17, 'prefix': '--end-to-end'}}, 'end_to_end_very_fast': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n', 'inputBinding': {'position': 18, 'prefix': '--very-fast'}}, 'end_to_end_fast': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n', 'inputBinding': {'position': 18, 'prefix': '--fast'}}, 'end_to_end_sensitive': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\\n', 'inputBinding': {'position': 18, 'prefix': '--sensitive'}}, 'end_to_end_very_sensitive': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 18, 'prefix': '--very-sensitive'}}, 'local': {'type': ['null', 'boolean'], 'doc': 'local alignment; ends might be soft clipped (off)\\nOptions:\\n  --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\\n  --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\\n  --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\\n  --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 19, 'prefix': '--local'}}, 'local_very_fast_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\\n', 'inputBinding': {'position': 20, 'prefix': '--very-fast-local'}}, 'local_fast_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\\n', 'inputBinding': {'position': 20, 'prefix': '--fast-local'}}, 'local_sensitive_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\\n', 'inputBinding': {'position': 20, 'prefix': '--sensitive-local'}}, 'local_very_sensitive_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 20, 'prefix': '--very-sensitive-local'}}, 'ma': {'type': ['null', 'int'], 'doc': 'match bonus (0 for --end-to-end, 2 for --local)\\n', 'inputBinding': {'position': 21, 'prefix': '--ma'}}, 'mp': {'type': ['null', 'int'], 'doc': 'max penalty for mismatch; lower qual = lower penalty (6)\\n', 'inputBinding': {'position': 22, 'prefix': '--mp'}}, 'np': {'type': ['null', 'int'], 'doc': 'penalty for non-A/C/G/Ts in read/ref (1)\\n', 'inputBinding': {'position': 23, 'prefix': '--np'}}, 'rdg': {'type': ['null', 'int[]'], 'doc': 'read gap open, extend penalties (5,3)\\n', 'inputBinding': {'position': 24, 'itemSeparator': ',', 'prefix': '--rdg'}}, 'rfg': {'type': ['null', 'int[]'], 'doc': 'reference gap open, extend penalties (5,3)\\n', 'inputBinding': {'position': 25, 'itemSeparator': ',', 'prefix': '--rfg'}}, 'score_min': {'type': ['null', 'string'], 'doc': 'min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)\\n', 'inputBinding': {'position': 26, 'prefix': '--score-min'}}, 'k': {'type': ['null', 'int'], 'doc': 'report up to <int> alns per read; MAPQ not meaningful\\n', 'inputBinding': {'position': 27, 'prefix': '-k'}}, 'a': {'type': ['null', 'boolean'], 'doc': 'report all alignments; very slow, MAPQ not meaningful\\n', 'inputBinding': {'position': 27, 'prefix': '-a'}}, 'd': {'type': ['null', 'int'], 'doc': 'give up extending after <int> failed extends in a row (15)\\n', 'inputBinding': {'position': 28, 'prefix': '-D'}}, 'r': {'type': ['null', 'int'], 'doc': 'for reads w/ repetitive seeds, try <int> sets of seeds (2)\\n', 'inputBinding': {'position': 29, 'prefix': '-R'}}, 'minins': {'type': ['null', 'int'], 'doc': 'minimum fragment length (0)\\n', 'inputBinding': {'position': 30, 'prefix': '--minins'}}, 'maxins': {'type': ['null', 'int'], 'doc': 'maxins fragment length (0)\\n', 'inputBinding': {'position': 30, 'prefix': '--maxins'}}, 'fr': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--fr'}}, 'rf': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--rf'}}, 'ff': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--ff'}}, 'no_mixed': {'type': ['null', 'boolean'], 'doc': 'suppress unpaired alignments for paired reads\\n', 'inputBinding': {'position': 32, 'prefix': '--no-mixed'}}, 'no_discordant': {'type': ['null', 'boolean'], 'doc': 'suppress discordant alignments for paired reads\\n', 'inputBinding': {'position': 33, 'prefix': '--no-discordant'}}, 'no_dovetail': {'type': ['null', 'boolean'], 'doc': 'not concordant when mates extend past each other\\n', 'inputBinding': {'position': 34, 'prefix': '--no-dovetail'}}, 'no_contain': {'type': ['null', 'boolean'], 'doc': 'not concordant when one mate alignment contains other\\n', 'inputBinding': {'position': 35, 'prefix': '--no-contain'}}, 'no_overlap': {'type': ['null', 'boolean'], 'doc': 'not concordant when mates overlap at all\\n', 'inputBinding': {'position': 36, 'prefix': '--no-overlap'}}, 't': {'type': ['null', 'boolean'], 'doc': 'print wall-clock time taken by search phases\\n', 'inputBinding': {'position': 37, 'prefix': '-t'}}, 'un': {'type': ['null', 'string'], 'doc': \"write unpaired reads that didn't align to <path>\\n\", 'inputBinding': {'position': 38, 'prefix': '--un'}}, 'al': {'type': ['null', 'string'], 'doc': 'write unpaired reads that aligned at least once to <path>\\n', 'inputBinding': {'position': 39, 'prefix': '--al'}}, 'un_conc': {'type': ['null', 'string'], 'doc': \"write pairs that didn't align concordantly to <path>\\n\", 'inputBinding': {'position': 40, 'prefix': '--un-conc'}}, 'al_conc': {'type': ['null', 'string'], 'doc': 'write pairs that aligned concordantly at least once to <path>\\n', 'inputBinding': {'position': 41, 'prefix': '--al-conc'}}, 'quiet': {'type': ['null', 'boolean'], 'doc': 'print nothing to stderr except serious errors', 'inputBinding': {'position': 42, 'prefix': '--quiet'}}, 'met_file': {'type': ['null', 'string'], 'doc': 'send metrics to file at <path> (off)\\n', 'inputBinding': {'position': 43, 'prefix': '--met-file'}}, 'met_stderr': {'type': ['null', 'boolean'], 'doc': 'send metrics to stderr (off)', 'inputBinding': {'position': 44, 'prefix': '--met-stderr'}}, 'met': {'type': ['null', 'int'], 'doc': 'report internal counters & metrics every <int> secs (1)\\n', 'inputBinding': {'position': 45, 'prefix': '--met'}}, 'no_unal': {'type': ['null', 'boolean'], 'doc': 'suppress SAM records for unaligned reads', 'inputBinding': {'position': 46, 'prefix': '--no-unal'}}, 'no_head': {'type': ['null', 'boolean'], 'doc': 'suppress header lines, i.e. lines starting with @', 'inputBinding': {'position': 47, 'prefix': '--no-head'}}, 'no_sq': {'type': ['null', 'boolean'], 'doc': 'suppress @SQ header lines', 'inputBinding': {'position': 48, 'prefix': '--no-sq'}}, 'rg_id': {'type': ['null', 'string'], 'doc': 'set read group id, reflected in @RG line and RG:Z: opt field', 'inputBinding': {'position': 49, 'prefix': '--rg-id'}}, 'rg': {'type': ['null', 'string'], 'doc': 'add <text> (\"lab:value\") to @RG line of SAM header.\\nNote: @RG line only printed when --rg-id is set.\\n', 'inputBinding': {'position': 50, 'prefix': '--rg'}}, 'omit_sec_seq': {'type': ['null', 'boolean'], 'doc': \"put '*' in SEQ and QUAL fields for secondary alignments\", 'inputBinding': {'position': 51, 'prefix': '--omit-sec-seq'}}, 'threads': {'type': ['null', 'int'], 'doc': 'number of alignment threads to launch (1)\\n', 'inputBinding': {'position': 52, 'prefix': '-p'}}, 'reorder': {'type': ['null', 'boolean'], 'doc': 'force SAM output order to match order of input reads\\n', 'inputBinding': {'position': 53, 'prefix': '--reorder'}}, 'mm': {'type': ['null', 'boolean'], 'doc': \"use memory-mapped I/O for index; many 'bowtie's can share\", 'inputBinding': {'position': 54, 'prefix': '--mm'}}, 'qc_filter': {'type': ['null', 'boolean'], 'doc': 'filter out reads that are bad according to QSEQ filter', 'inputBinding': {'position': 55, 'prefix': '--qc-filter'}}, 'seed': {'type': ['null', 'int'], 'doc': 'seed for random number generator (0)\\n', 'inputBinding': {'position': 56, 'prefix': '--seed'}}, 'non_deterministic': {'type': ['null', 'boolean'], 'doc': 'seed rand. gen. arbitrarily instead of using read attributes', 'inputBinding': {'position': 57, 'prefix': '--non-deterministic'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '${\\n   if (inputs.output_filename == \"\"){\\n     return default_output_filename();\\n   } else {\\n     return inputs.output_filename;\\n   }\\n}\\n'}}, 'output_log': {'type': 'File', 'outputBinding': {'glob': '${\\n   if (inputs.output_filename == \"\"){\\n     return default_output_filename().split(\\'.\\').slice(0,-1).join(\\'.\\') + \".log\";\\n   } else {\\n     return inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\') + \".log\";\\n   }\\n}\\n'}}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bowtie2:v2.3.0', 'dockerFile': '$import: ./dockerfiles/bowtie2-Dockerfile\\n'}, {'class': 'SoftwareRequirement', 'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": "[{'valueFrom': '${\\n  if (inputs.filelist && inputs.filelist_mates){\\n    return \"-1\";\\n  } else if (inputs.filelist){\\n    return \"-U\";\\n  } else {\\n    return null;\\n  }\\n}\\n', 'position': 82}, {'valueFrom': '${\\n  if (inputs.filelist && inputs.filelist_mates){\\n    return \"-2\";\\n  } else if (inputs.filelist_mates){\\n    return \"-U\";\\n  } else {\\n    return null;\\n  }\\n}\\n', 'position': 84}, {'valueFrom': '${\\n  if (inputs.output_filename == \"\"){\\n    return \\' 2> \\' + default_output_filename().split(\\'.\\').slice(0,-1).join(\\'.\\') + \\'.log\\';\\n  } else {\\n    return \\' 2> \\' + inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\') + \\'.log\\';\\n  }\\n}\\n', 'position': 100000, 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['http://schema.org/version/latest/schema.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs bowtie aligner to align input FASTQ file(s) to reference genome\n",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie2_align",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": "{'class': 's:CreativeWork', 's:name': 'Common Workflow Language', 's:url': 'http://commonwl.org/'}",
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bowtie2_build.cwl",
    "sha": "164fb007e96b63a6c86c6e9ad2f3ad7f1f77785b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bowtie2_build.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n- class: ShellCommandRequirement\n- class: InlineJavascriptRequirement\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/bowtie2:v2.3.0\n  dockerFile: >\n    $import: ./dockerfiles/bowtie2-Dockerfile\n- class: SoftwareRequirement\n  packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\ninputs:\n\n  reference_in:\n    type:\n      - File\n      - type: array\n        items: File\n    doc: >\n      comma-separated list of files with ref sequences\n    inputBinding:\n      itemSeparator: \",\"\n      position: 25\n\n  bt2_index_base:\n    type: string?\n    doc: |\n      write bt2 data to files with this dir/basename\n    inputBinding:\n      position: 26\n      shellQuote: false\n    default: bowtie2_indices\n\n  f:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      reference files are Fasta (default)\n    inputBinding:\n      position: 1\n      prefix: '-f'\n\n  c:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      reference sequences given on cmd line (as <reference_in>)\n    inputBinding:\n      position: 2\n      prefix: '-c'\n\n  large_index:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\n    inputBinding:\n      position: 3\n      prefix: '--large-index'\n\n  noauto:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      disable automatic -p/--bmax/--dcv memory-fitting\n    inputBinding:\n      position: 4\n      prefix: '--noauto'\n\n  packed:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      use packed strings internally; slower, less memory\n    inputBinding:\n      position: 5\n      prefix: '--packed'\n\n  bmax:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      max bucket sz for blockwise suffix-array builder\n    inputBinding:\n      position: 6\n      prefix: '--bmax'\n\n  bmaxdivn:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      max bucket sz as divisor of ref len (default: 4)\n    inputBinding:\n      position: 7\n      prefix: '--bmaxdivn'\n\n  dcv:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      diff-cover period for blockwise (default: 1024)\n    inputBinding:\n      position: 8\n      prefix: '--dcv'\n\n  nodc:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      disable diff-cover (algorithm becomes quadratic)\n    inputBinding:\n      position: 9\n      prefix: '--nodc'\n\n  noref:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      don't build .3/.4 index files\n    inputBinding:\n      position: 10\n      prefix: '--noref'\n\n  justref:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      just build .3/.4 index files\n    inputBinding:\n      position: 11\n      prefix: '--justref'\n\n  offrate:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      SA is sampled every 2^<int> BWT chars (default: 5)\n    inputBinding:\n      position: 12\n      prefix: '--offrate'\n\n  ftabchars:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      # of chars consumed in initial lookup (default: 10)\n    inputBinding:\n      position: 13\n      prefix: '--ftabchars'\n\n  threads:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      # of threads\n    inputBinding:\n      position: 14\n      prefix: '--threads'\n\n  seed:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      seed for random number generator\n    inputBinding:\n      position: 15\n      prefix: '--seed'\n\n  quiet:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      verbose output (for debugging)\n    inputBinding:\n      position: 15\n      prefix: '--quiet'\n\noutputs:\n\n  indices:\n    type: File\n    outputBinding:\n      glob: $(inputs.bt2_index_base + \".1.bt2*\")\n    secondaryFiles: |\n      ${\n        var ext = self.location.split('/').slice(-1)[0].split('.').slice(-1)[0];\n        var basename = self.location.split(\"/\").slice(-1)[0].split(\".\").slice(0, -2).join (\".\");\n        var dirname = self.location.split(\"/\").slice(0,-1).join(\"/\");\n        return [{\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".2.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".3.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".4.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.1.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.2.\" + ext}\n        ]\n      }\n\n  output_log:\n    type: File\n    outputBinding:\n      glob: $(inputs.bt2_index_base + \".log\")\n\nbaseCommand:\n  - bowtie2-build\n\narguments:\n  - valueFrom: $('2> ' + inputs.bt2_index_base + '.log')\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- http://schema.org/version/latest/schema.rdf\n\ns:name: \"bowtie2_build\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:isPartOf:\n  class: s:CreativeWork\n  s:name: Common Workflow Language\n  s:url: http://commonwl.org/\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie2-build to generate indices from input FASTA files",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference_in': {'type': ['File', {'type': 'array', 'items': 'File'}], 'doc': 'comma-separated list of files with ref sequences\\n', 'inputBinding': {'itemSeparator': ',', 'position': 25}}, 'bt2_index_base': {'type': 'string?', 'doc': 'write bt2 data to files with this dir/basename\\n', 'inputBinding': {'position': 26, 'shellQuote': False}, 'default': 'bowtie2_indices'}, 'f': {'type': ['null', 'boolean'], 'doc': 'reference files are Fasta (default)\\n', 'inputBinding': {'position': 1, 'prefix': '-f'}}, 'c': {'type': ['null', 'boolean'], 'doc': 'reference sequences given on cmd line (as <reference_in>)\\n', 'inputBinding': {'position': 2, 'prefix': '-c'}}, 'large_index': {'type': ['null', 'boolean'], 'doc': \"force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\\n\", 'inputBinding': {'position': 3, 'prefix': '--large-index'}}, 'noauto': {'type': ['null', 'boolean'], 'doc': 'disable automatic -p/--bmax/--dcv memory-fitting\\n', 'inputBinding': {'position': 4, 'prefix': '--noauto'}}, 'packed': {'type': ['null', 'boolean'], 'doc': 'use packed strings internally; slower, less memory\\n', 'inputBinding': {'position': 5, 'prefix': '--packed'}}, 'bmax': {'type': ['null', 'int'], 'doc': 'max bucket sz for blockwise suffix-array builder\\n', 'inputBinding': {'position': 6, 'prefix': '--bmax'}}, 'bmaxdivn': {'type': ['null', 'int'], 'doc': 'max bucket sz as divisor of ref len (default: 4)\\n', 'inputBinding': {'position': 7, 'prefix': '--bmaxdivn'}}, 'dcv': {'type': ['null', 'int'], 'doc': 'diff-cover period for blockwise (default: 1024)\\n', 'inputBinding': {'position': 8, 'prefix': '--dcv'}}, 'nodc': {'type': ['null', 'boolean'], 'doc': 'disable diff-cover (algorithm becomes quadratic)\\n', 'inputBinding': {'position': 9, 'prefix': '--nodc'}}, 'noref': {'type': ['null', 'boolean'], 'doc': \"don't build .3/.4 index files\\n\", 'inputBinding': {'position': 10, 'prefix': '--noref'}}, 'justref': {'type': ['null', 'boolean'], 'doc': 'just build .3/.4 index files\\n', 'inputBinding': {'position': 11, 'prefix': '--justref'}}, 'offrate': {'type': ['null', 'int'], 'doc': 'SA is sampled every 2^<int> BWT chars (default: 5)\\n', 'inputBinding': {'position': 12, 'prefix': '--offrate'}}, 'ftabchars': {'type': ['null', 'int'], 'doc': '# of chars consumed in initial lookup (default: 10)\\n', 'inputBinding': {'position': 13, 'prefix': '--ftabchars'}}, 'threads': {'type': ['null', 'int'], 'doc': '# of threads\\n', 'inputBinding': {'position': 14, 'prefix': '--threads'}}, 'seed': {'type': ['null', 'int'], 'doc': 'seed for random number generator\\n', 'inputBinding': {'position': 15, 'prefix': '--seed'}}, 'quiet': {'type': ['null', 'boolean'], 'doc': 'verbose output (for debugging)\\n', 'inputBinding': {'position': 15, 'prefix': '--quiet'}}}",
    "cwl_outputs": "{'indices': {'type': 'File', 'outputBinding': {'glob': '$(inputs.bt2_index_base + \".1.bt2*\")'}, 'secondaryFiles': '${\\n  var ext = self.location.split(\\'/\\').slice(-1)[0].split(\\'.\\').slice(-1)[0];\\n  var basename = self.location.split(\"/\").slice(-1)[0].split(\".\").slice(0, -2).join (\".\");\\n  var dirname = self.location.split(\"/\").slice(0,-1).join(\"/\");\\n  return [{\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".2.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".3.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".4.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.1.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.2.\" + ext}\\n  ]\\n}\\n'}, 'output_log': {'type': 'File', 'outputBinding': {'glob': '$(inputs.bt2_index_base + \".log\")'}}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bowtie2:v2.3.0', 'dockerFile': '$import: ./dockerfiles/bowtie2-Dockerfile\\n'}, {'class': 'SoftwareRequirement', 'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2-build']",
    "cwl_arguments": "[{'valueFrom': \"$('2> ' + inputs.bt2_index_base + '.log')\", 'position': 100000, 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['http://schema.org/version/latest/schema.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs bowtie2-build to generate indices from input FASTA files",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie2_build",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": "{'class': 's:CreativeWork', 's:name': 'Common Workflow Language', 's:url': 'http://commonwl.org/'}",
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bwa-index.cwl",
    "sha": "7d78a2916f48cfe09c5f6f17ea4b726359bacf4c",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bwa-index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  DockerRequirement:\n    dockerPull: \"quay.io/biocontainers/bwa:0.7.17--ha92aebf_3\"\n  InlineJavascriptRequirement: {}\n\ninputs:\n  InputFile:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      position: 200\n    \n  IndexName:\n    type: string\n    inputBinding:\n      prefix: \"-p\"\n      #valueFrom: $(self + \".bwt\")\n#Optional arguments\n  algoType:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n          - is\n          - bwtsw\n    inputBinding:\n      prefix: \"-a\"\n\nbaseCommand: [bwa, index]\n\noutputs: \n  index:\n    type: File\n    secondaryFiles: \n   #   - $(inputs.IndexName).bwt.bwt\n      - $(inputs.IndexName).sa\n      - $(inputs.IndexName).pac\n      - $(inputs.IndexName).ann\n      - $(inputs.IndexName).amb\n    outputBinding:\n      glob: $(inputs.IndexName).bwt\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'InputFile': {'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'position': 200}}, 'IndexName': {'type': 'string', 'inputBinding': {'prefix': '-p'}}, 'algoType': {'type': ['null', {'type': 'enum', 'symbols': ['is', 'bwtsw']}], 'inputBinding': {'prefix': '-a'}}}",
    "cwl_outputs": "{'index': {'type': 'File', 'secondaryFiles': ['$(inputs.IndexName).sa', '$(inputs.IndexName).pac', '$(inputs.IndexName).ann', '$(inputs.IndexName).amb'], 'outputBinding': {'glob': '$(inputs.IndexName).bwt'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'index']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bwa:0.7.17--ha92aebf_3'}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/bwa-mem.cwl",
    "sha": "943cb4a62734bdc5b529e2181ca0aa716fef60c7",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bwa-mem.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  DockerRequirement:\n    dockerPull: \"quay.io/biocontainers/bwa:0.7.17--ha92aebf_3\"\n\ninputs:\n  InputFile:\n    type: File[]\n    format:\n      - edam:format_1930 # FASTA\n      - edam:format_1931 # FASTQ\n    inputBinding:\n      position: 201\n    \n  Index:\n    type: File\n    inputBinding:\n      position: 200\n    secondaryFiles:\n      - .fai\n      - .amb\n      - .ann\n      - .bwt\n      - .pac\n      - .sa\n\n#Optional arguments\n\n  Threads:\n    type: int?\n    inputBinding:\n      prefix: \"-t\"\n\n  MinSeedLen:\n    type: int?\n    inputBinding:\n      prefix: \"-k\"\n  \n  BandWidth:\n    type: int?\n    inputBinding:\n      prefix: \"-w\"\n\n  ZDropoff:\n    type: int?\n    inputBinding:\n      prefix: \"-d\"\n\n  SeedSplitRatio:\n    type: float?\n    inputBinding:\n      prefix: \"-r\"\n    \n  MaxOcc:\n    type: int?\n    inputBinding:\n      prefix: \"-c\"\n\n  MatchScore:\n    type: int?\n    inputBinding:\n      prefix: \"-A\"\n\n  MmPenalty:\n    type: int?\n    inputBinding:\n      prefix: \"-B\"\n\n  GapOpenPen:\n    type: int?\n    inputBinding:\n      prefix: \"-O\"\n\n  GapExtPen:\n    type: int?\n    inputBinding:\n      prefix: \"-E\"\n\n  ClipPen:\n    type: int?\n    inputBinding:\n      prefix: \"-L\"\n\n  UnpairPen:\n    type: int?\n    inputBinding:\n      prefix: \"-U\"\n\n  RgLine:\n    type: string?\n    inputBinding:\n      prefix: \"-R\"\n\n  VerboseLevel:\n    type: int?\n    inputBinding:\n      prefix: \"-v\"\n\n  isOutSecAlign:\n    type: boolean?\n    inputBinding:\n      prefix: \"-a\"\n\n  isMarkShortSplit:\n    type: boolean?\n    inputBinding:\n      prefix: \"-M\"\n\n  isUseHardClip:\n    type: boolean?\n    inputBinding:\n      prefix: \"-H\"\n\n  isMultiplexedPair:\n    type: boolean?\n    inputBinding:\n      prefix: \"-p\"\n      \n\nbaseCommand: [bwa, mem]\n\nstdout: ${ return inputs.InputFile[1].nameroot+\"_unsorted_reads.sam\";}\n\noutputs:\n  reads_stdout:\n    type: stdout\n    format: edam:format_2572 \n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'InputFile': {'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931'], 'inputBinding': {'position': 201}}, 'Index': {'type': 'File', 'inputBinding': {'position': 200}, 'secondaryFiles': ['.fai', '.amb', '.ann', '.bwt', '.pac', '.sa']}, 'Threads': {'type': 'int?', 'inputBinding': {'prefix': '-t'}}, 'MinSeedLen': {'type': 'int?', 'inputBinding': {'prefix': '-k'}}, 'BandWidth': {'type': 'int?', 'inputBinding': {'prefix': '-w'}}, 'ZDropoff': {'type': 'int?', 'inputBinding': {'prefix': '-d'}}, 'SeedSplitRatio': {'type': 'float?', 'inputBinding': {'prefix': '-r'}}, 'MaxOcc': {'type': 'int?', 'inputBinding': {'prefix': '-c'}}, 'MatchScore': {'type': 'int?', 'inputBinding': {'prefix': '-A'}}, 'MmPenalty': {'type': 'int?', 'inputBinding': {'prefix': '-B'}}, 'GapOpenPen': {'type': 'int?', 'inputBinding': {'prefix': '-O'}}, 'GapExtPen': {'type': 'int?', 'inputBinding': {'prefix': '-E'}}, 'ClipPen': {'type': 'int?', 'inputBinding': {'prefix': '-L'}}, 'UnpairPen': {'type': 'int?', 'inputBinding': {'prefix': '-U'}}, 'RgLine': {'type': 'string?', 'inputBinding': {'prefix': '-R'}}, 'VerboseLevel': {'type': 'int?', 'inputBinding': {'prefix': '-v'}}, 'isOutSecAlign': {'type': 'boolean?', 'inputBinding': {'prefix': '-a'}}, 'isMarkShortSplit': {'type': 'boolean?', 'inputBinding': {'prefix': '-M'}}, 'isUseHardClip': {'type': 'boolean?', 'inputBinding': {'prefix': '-H'}}, 'isMultiplexedPair': {'type': 'boolean?', 'inputBinding': {'prefix': '-p'}}}",
    "cwl_outputs": "{'reads_stdout': {'type': 'stdout', 'format': 'edam:format_2572'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'mem']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bwa:0.7.17--ha92aebf_3'}}",
    "cwl_doc": null,
    "cwl_stdout": "${ return inputs.InputFile[1].nameroot+\"_unsorted_reads.sam\";}",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/fastp.cwl",
    "sha": "3cd5ae8048e83a74041b4f56efb5cc9470710df0",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/fastp.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Modified from https://github.com/nigyta/bact_genome/blob/master/cwl/tool/fastp/fastp.cwl\nrequirements:\n    InlineJavascriptRequirement: {}\nhints:\n    DockerRequirement:\n        dockerPull: quay.io/biocontainers/fastp:0.20.0--hdbcaa40_0\n\nbaseCommand: [fastp]\n\narguments:\n    - prefix: -o\n      valueFrom: $(inputs.fastq1.nameroot).fastp.fastq\n    - |\n      ${\n        if (inputs.fastq2){\n          return '-O';\n        } else {\n          return '';\n        }\n      }\n    - |\n      ${\n        if (inputs.fastq2){\n          return inputs.fastq2.nameroot + \".fastp.fastq\";\n        } else {\n          return '';\n        }\n      }\n\ninputs:\n    fastq1:\n      type: File\n      format:\n        - edam:format_1930 # FASTA\n        - edam:format_1931 # FASTQ\n      inputBinding:\n        prefix: -i\n    fastq2:\n      format:\n        - edam:format_1930 # FASTA\n        - edam:format_1931 # FASTQ\n      type: File?\n      inputBinding:\n        prefix: -I\n    threads:\n      type: int?\n      default: 1\n      inputBinding:\n        prefix: --thread\n    qualified_phred_quality:\n      type: int?\n      default: 20\n      inputBinding:\n        prefix: --qualified_quality_phred\n    unqualified_phred_quality:\n      type: int?\n      default: 20\n      inputBinding:\n        prefix: --unqualified_percent_limit\n    min_length_required:\n      type: int?\n      default: 50\n      inputBinding:\n        prefix: --length_required\n    force_polyg_tail_trimming:\n      type: boolean?\n      inputBinding:\n        prefix: --trim_poly_g\n    disable_trim_poly_g:\n      type: boolean?\n      default: true\n      inputBinding:\n        prefix: --disable_trim_poly_g\n    base_correction:\n      type: boolean?\n      default: true\n      inputBinding:\n        prefix: --correction\n    \n\n\noutputs:\n    out_fastq1:\n       type: File\n       format: $(inputs.fastq1.format)\n       outputBinding:\n           glob: $(inputs.fastq1.nameroot).fastp.fastq\n    out_fastq2:\n       type: File?\n       format: $(inputs.fastq2.format)\n       outputBinding:\n           glob: $(inputs.fastq2.nameroot).fastp.fastq\n    html_report:\n      type: File\n      outputBinding:\n        glob: fastp.html\n        outputEval: |\n           ${\n             self[0].basename = inputs.fastq1.nameroot + '_fastp.html';\n             return self[0]\n            }\n        \n    json_report:\n      type: File\n      outputBinding:\n        glob: fastp.json\n        outputEval: |\n           ${\n              self[0].basename = inputs.fastq1.nameroot + '_fastp.json';\n              return self[0]\n            }\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fastq1': {'type': 'File', 'format': ['edam:format_1930', 'edam:format_1931'], 'inputBinding': {'prefix': '-i'}}, 'fastq2': {'format': ['edam:format_1930', 'edam:format_1931'], 'type': 'File?', 'inputBinding': {'prefix': '-I'}}, 'threads': {'type': 'int?', 'default': 1, 'inputBinding': {'prefix': '--thread'}}, 'qualified_phred_quality': {'type': 'int?', 'default': 20, 'inputBinding': {'prefix': '--qualified_quality_phred'}}, 'unqualified_phred_quality': {'type': 'int?', 'default': 20, 'inputBinding': {'prefix': '--unqualified_percent_limit'}}, 'min_length_required': {'type': 'int?', 'default': 50, 'inputBinding': {'prefix': '--length_required'}}, 'force_polyg_tail_trimming': {'type': 'boolean?', 'inputBinding': {'prefix': '--trim_poly_g'}}, 'disable_trim_poly_g': {'type': 'boolean?', 'default': True, 'inputBinding': {'prefix': '--disable_trim_poly_g'}}, 'base_correction': {'type': 'boolean?', 'default': True, 'inputBinding': {'prefix': '--correction'}}}",
    "cwl_outputs": "{'out_fastq1': {'type': 'File', 'format': '$(inputs.fastq1.format)', 'outputBinding': {'glob': '$(inputs.fastq1.nameroot).fastp.fastq'}}, 'out_fastq2': {'type': 'File?', 'format': '$(inputs.fastq2.format)', 'outputBinding': {'glob': '$(inputs.fastq2.nameroot).fastp.fastq'}}, 'html_report': {'type': 'File', 'outputBinding': {'glob': 'fastp.html', 'outputEval': \"${\\n  self[0].basename = inputs.fastq1.nameroot + '_fastp.html';\\n  return self[0]\\n }\\n\"}}, 'json_report': {'type': 'File', 'outputBinding': {'glob': 'fastp.json', 'outputEval': \"${\\n   self[0].basename = inputs.fastq1.nameroot + '_fastp.json';\\n   return self[0]\\n }\\n\"}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/fastp:0.20.0--hdbcaa40_0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fastp']",
    "cwl_arguments": "[{'prefix': '-o', 'valueFrom': '$(inputs.fastq1.nameroot).fastp.fastq'}, \"${\\n  if (inputs.fastq2){\\n    return '-O';\\n  } else {\\n    return '';\\n  }\\n}\\n\", '${\\n  if (inputs.fastq2){\\n    return inputs.fastq2.nameroot + \".fastp.fastq\";\\n  } else {\\n    return \\'\\';\\n  }\\n}\\n']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Modified from https://github.com/nigyta/bact_genome/blob/master/cwl/tool/fastp/fastp.cwl\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/get_secondaryfiles.cwl",
    "sha": "94fcbddb77c76ad7bc5a064be4d4ca4fb1c54de4",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/get_secondaryfiles.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.sequence)\n      - $(inputs.bwa_index)\nbaseCommand: [ls]\ninputs:\n  sequence:\n    type: File\n    secondaryFiles: .fai\n\n  bwa_index:\n    type: File\n    secondaryFiles:\n      - $(self.nameroot).ann \n      - $(self.nameroot).amb\n      - $(self.nameroot).pac\n      - $(self.nameroot).sa\n    \noutputs:\n  sequences_with_index: \n    type: File\n    secondaryFiles: \n      - $(inputs.bwa_index.nameroot).bwt\n      - $(inputs.bwa_index.nameroot).sa\n      - $(inputs.bwa_index.nameroot).pac\n      - $(inputs.bwa_index.nameroot).ann\n      - $(inputs.bwa_index.nameroot).amb\n      - $(inputs.sequence.basename).fai\n    outputBinding:\n      glob: $(inputs.sequence.basename)\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'sequence': {'type': 'File', 'secondaryFiles': '.fai'}, 'bwa_index': {'type': 'File', 'secondaryFiles': ['$(self.nameroot).ann', '$(self.nameroot).amb', '$(self.nameroot).pac', '$(self.nameroot).sa']}}",
    "cwl_outputs": "{'sequences_with_index': {'type': 'File', 'secondaryFiles': ['$(inputs.bwa_index.nameroot).bwt', '$(inputs.bwa_index.nameroot).sa', '$(inputs.bwa_index.nameroot).pac', '$(inputs.bwa_index.nameroot).ann', '$(inputs.bwa_index.nameroot).amb', '$(inputs.sequence.basename).fai'], 'outputBinding': {'glob': '$(inputs.sequence.basename)'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ls']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.sequence)', '$(inputs.bwa_index)']}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/lofreq_call.cwl",
    "sha": "dfc8aebee10a2f6ceb89c056083e5115d02a4811",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/lofreq_call.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1\n\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - $(inputs.reference_index)\n      - $(inputs.reference_fasta)\n      - $(inputs.reads_index)\n\nbaseCommand: [lofreq, call-parallel]\n\narguments:\n  - prefix: --out\n    valueFrom: $(inputs.reads_align.nameroot)_variant.vcf\n    position: 99\n\ninputs:\n  threads:\n    type: int?\n    default: 1\n    inputBinding:\n      prefix: --pp-threads\n      position: 1\n  reference_index:\n    type: File\n  reference_fasta:\n    doc: 'fasta'\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: -f\n      position: 1000\n      valueFrom: $(self.basename)\n\n  call_indels:\n    type: boolean?\n    inputBinding:\n      prefix: --call-indels\n      position: 3\n    doc: \"Enable indel calls (note: preprocess your file to include indel alignment qualities!)\"\n\n  only_indels:\n    type: boolean?\n    inputBinding:\n      prefix: --only-indels\n      position: 4\n    doc: \"Only call indels; no SNVs\"\n\n  bed:\n    label: regions_from_bed\n    type: File?\n    doc: 'List of positions (chr pos) or regions (BED)'\n    inputBinding:\n      prefix: --bed\n\n  region:\n    type: string?\n    doc: 'Limit calls to this region (chrom:start-end)'\n    inputBinding:\n      prefix: --region\n\n  min_bq:\n    label: min_base_quality\n    type: int?\n    default: 6\n    inputBinding:\n      prefix: --min-bq\n    doc: 'Skip any base with baseQ smaller than INT [6]'\n\n  min_alt_bq:\n    label: min_alterne_base_quality\n    type: int?\n    default: 6\n    inputBinding:\n      prefix: --min-alt-bq\n    doc: 'Skip alternate bases with baseQ smaller than INT [6]'\n\n  def_alt_bq:\n    label: def_alt_base_quality\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --def-alt-bq\n    doc: 'Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]'\n\n  min_jq:\n    label: min_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix:  --min-jq\n    doc: 'Skip any base with joinedQ smaller than INT [0]'\n\n  min_alt_jq:\n    label: min_alt_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --min-alt-jq\n    doc: \"Skip alternate bases with joinedQ smaller than INT [0]\"\n\n  def_alt_jq:\n    label: def_alt_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --def-alt-jq\n    doc: \"Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]\"\n\n  no_baq:\n    label: disable_base_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --no-baq\n    doc: 'Disable use of base-alignment quality (BAQ)'\n\n  no_idaq:\n    label: disable_indel_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --no-idaq\n    doc: \"Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)\"\n\n  del_baq:\n    label: delete_base_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --del-baq\n    doc: \"Delete pre-existing BAQ values, i.e. compute even if already present in BAM\"\n\n  no_ext_base_alignment_quality:\n    type: boolean?\n    inputBinding:\n      prefix: --no-ext-baq\n    doc: \"Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)\"\n\n  min_mq:\n    label: min_mapping_quality\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --min-mq\n    doc: \"Skip reads with mapping quality smaller than INT [0]\"\n\n  max_mapping_quality:\n    type: int?\n    default: 255\n    inputBinding:\n      prefix: --max-mq\n    doc: \"Cap mapping quality at INT [255]\"\n\n  no_mapping_quality:\n    type: boolean?\n    inputBinding:\n      prefix: --no-mq\n    doc: \"Don't merge mapping quality in LoFreq's model\"\n\n  enable_source_qual:\n    type: boolean?\n    inputBinding:\n      prefix: --src-qual\n    doc: 'Enable computation of source quality'\n\n  ignore_vcf:\n    type: File[]?\n    inputBinding:\n      prefix: --ign-vcf\n    doc: \"Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas\"\n\n  replace_non_match:\n    type: int?\n    default: -1\n    inputBinding:\n      prefix: --def-nm-q\n    doc: 'If >= 0, then replace non-match base qualities with this default value [-1]'\n\n  pvalue_cutoff:\n    type: float?\n    default: 0.01\n    inputBinding:\n      prefix: --sig\n    doc: \"P-Value cutoff / significance level [0.010000]\"\n\n  bonferroni:\n    type: string?\n    default: 'dynamic'\n    inputBinding:\n      prefix: --bonf\n    doc: \"Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']\"\n\n  min_cov:\n    type: int?\n    default: 10\n    inputBinding:\n      prefix: --min-cov\n      position: 2\n    doc: \"Test only positions having at least this coverage [1] (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)\"\n\n  max_depth_cov:\n    type: int?\n    default: 1000000\n    inputBinding:\n      prefix: --max-depth\n    doc: \"Cap coverage at this depth [1000000]\"\n\n  illumina_1_3:\n    type: boolean?\n    inputBinding:\n      prefix: --illumina-1.3\n    doc: \"Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded\"\n\n  use_orphan:\n    type: boolean?\n    inputBinding:\n      prefix: --use-orphan\n    doc: \"Count anomalous read pairs (i.e. where mate is not aligned properly)\"\n\n  no_default_filter:\n    type: boolean?\n    doc: \"Don't run default lofreq filter automatically after calling variants\"\n    inputBinding:\n      prefix: --no-default-filter\n    # Other options \n    # --plp-summary-only      No variant calling. Just output pileup summary per column\n    # --force-overwrite       Overwrite any existing output\n    # --verbose               Be verbose\n    # --debug                 Enable debugging\n\n  reads_align:\n    doc: 'bam'\n    type: File\n    format: edam:format_2572  # BAM\n    inputBinding:\n      position: 1001\n      valueFrom: $(self.basename)\n\n  reads_index:\n    doc: bai\n    type: File\n\noutputs:\n  vcf:\n    type: File\n    format: edam:format_3016  # VCF\n    outputBinding:\n      glob: \"*.vcf\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'threads': {'type': 'int?', 'default': 1, 'inputBinding': {'prefix': '--pp-threads', 'position': 1}}, 'reference_index': {'type': 'File'}, 'reference_fasta': {'doc': 'fasta', 'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'prefix': '-f', 'position': 1000, 'valueFrom': '$(self.basename)'}}, 'call_indels': {'type': 'boolean?', 'inputBinding': {'prefix': '--call-indels', 'position': 3}, 'doc': 'Enable indel calls (note: preprocess your file to include indel alignment qualities!)'}, 'only_indels': {'type': 'boolean?', 'inputBinding': {'prefix': '--only-indels', 'position': 4}, 'doc': 'Only call indels; no SNVs'}, 'bed': {'label': 'regions_from_bed', 'type': 'File?', 'doc': 'List of positions (chr pos) or regions (BED)', 'inputBinding': {'prefix': '--bed'}}, 'region': {'type': 'string?', 'doc': 'Limit calls to this region (chrom:start-end)', 'inputBinding': {'prefix': '--region'}}, 'min_bq': {'label': 'min_base_quality', 'type': 'int?', 'default': 6, 'inputBinding': {'prefix': '--min-bq'}, 'doc': 'Skip any base with baseQ smaller than INT [6]'}, 'min_alt_bq': {'label': 'min_alterne_base_quality', 'type': 'int?', 'default': 6, 'inputBinding': {'prefix': '--min-alt-bq'}, 'doc': 'Skip alternate bases with baseQ smaller than INT [6]'}, 'def_alt_bq': {'label': 'def_alt_base_quality', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--def-alt-bq'}, 'doc': 'Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]'}, 'min_jq': {'label': 'min_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-jq'}, 'doc': 'Skip any base with joinedQ smaller than INT [0]'}, 'min_alt_jq': {'label': 'min_alt_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-alt-jq'}, 'doc': 'Skip alternate bases with joinedQ smaller than INT [0]'}, 'def_alt_jq': {'label': 'def_alt_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--def-alt-jq'}, 'doc': 'Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]'}, 'no_baq': {'label': 'disable_base_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--no-baq'}, 'doc': 'Disable use of base-alignment quality (BAQ)'}, 'no_idaq': {'label': 'disable_indel_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--no-idaq'}, 'doc': \"Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)\"}, 'del_baq': {'label': 'delete_base_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--del-baq'}, 'doc': 'Delete pre-existing BAQ values, i.e. compute even if already present in BAM'}, 'no_ext_base_alignment_quality': {'type': 'boolean?', 'inputBinding': {'prefix': '--no-ext-baq'}, 'doc': \"Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)\"}, 'min_mq': {'label': 'min_mapping_quality', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-mq'}, 'doc': 'Skip reads with mapping quality smaller than INT [0]'}, 'max_mapping_quality': {'type': 'int?', 'default': 255, 'inputBinding': {'prefix': '--max-mq'}, 'doc': 'Cap mapping quality at INT [255]'}, 'no_mapping_quality': {'type': 'boolean?', 'inputBinding': {'prefix': '--no-mq'}, 'doc': \"Don't merge mapping quality in LoFreq's model\"}, 'enable_source_qual': {'type': 'boolean?', 'inputBinding': {'prefix': '--src-qual'}, 'doc': 'Enable computation of source quality'}, 'ignore_vcf': {'type': 'File[]?', 'inputBinding': {'prefix': '--ign-vcf'}, 'doc': 'Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas'}, 'replace_non_match': {'type': 'int?', 'default': -1, 'inputBinding': {'prefix': '--def-nm-q'}, 'doc': 'If >= 0, then replace non-match base qualities with this default value [-1]'}, 'pvalue_cutoff': {'type': 'float?', 'default': 0.01, 'inputBinding': {'prefix': '--sig'}, 'doc': 'P-Value cutoff / significance level [0.010000]'}, 'bonferroni': {'type': 'string?', 'default': 'dynamic', 'inputBinding': {'prefix': '--bonf'}, 'doc': \"Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']\"}, 'min_cov': {'type': 'int?', 'default': 10, 'inputBinding': {'prefix': '--min-cov', 'position': 2}, 'doc': 'Test only positions having at least this coverage [1] (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)'}, 'max_depth_cov': {'type': 'int?', 'default': 1000000, 'inputBinding': {'prefix': '--max-depth'}, 'doc': 'Cap coverage at this depth [1000000]'}, 'illumina_1_3': {'type': 'boolean?', 'inputBinding': {'prefix': '--illumina-1.3'}, 'doc': 'Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded'}, 'use_orphan': {'type': 'boolean?', 'inputBinding': {'prefix': '--use-orphan'}, 'doc': 'Count anomalous read pairs (i.e. where mate is not aligned properly)'}, 'no_default_filter': {'type': 'boolean?', 'doc': \"Don't run default lofreq filter automatically after calling variants\", 'inputBinding': {'prefix': '--no-default-filter'}}, 'reads_align': {'doc': 'bam', 'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {'position': 1001, 'valueFrom': '$(self.basename)'}}, 'reads_index': {'doc': 'bai', 'type': 'File'}}",
    "cwl_outputs": "{'vcf': {'type': 'File', 'format': 'edam:format_3016', 'outputBinding': {'glob': '*.vcf'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lofreq', 'call-parallel']",
    "cwl_arguments": "[{'prefix': '--out', 'valueFrom': '$(inputs.reads_align.nameroot)_variant.vcf', 'position': 99}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/lofreq_viterbi.cwl",
    "sha": "24c212c10564e095d164ef3f9a9879a2b113df00",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/lofreq_viterbi.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: \"viterbi: Viterbi realignment\"\ndoc: |\n  Probabilistic realignment of your already mapped reads, which corrects\n  mapping errors (run right after mapping). Not recommended for non-Illumina\n  data.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference)\n    \nbaseCommand: [lofreq, viterbi]\n\narguments:\n  - prefix: --out\n    valueFrom: $(inputs.reads.nameroot)_realigned.bam\n\ninputs:\n  reference:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: --ref\n      \n  reads:  \n    type: File\n    format: edam:format_2572  # BAM\n    inputBinding: {}\n\n  keepflags:\n    type: boolean?\n    label: Don't delete flags MC, MD, NM, and A?\n    doc: |\n      These flags are all prone to getting invalidated during realignment.\n      Keep them only if you know what you are doing.\n    inputBinding:\n      prefix: --keepflags\n    default: false\n      \n  defqual:\n    type: int?\n    inputBinding:\n      prefix: --defqual\noutputs:\n  realigned:\n    type: File\n    format: edam:format_2572  # BAM\n    outputBinding:\n      glob: $(inputs.reads.nameroot)_realigned.bam\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference': {'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'prefix': '--ref'}}, 'reads': {'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {}}, 'keepflags': {'type': 'boolean?', 'label': \"Don't delete flags MC, MD, NM, and A?\", 'doc': 'These flags are all prone to getting invalidated during realignment.\\nKeep them only if you know what you are doing.\\n', 'inputBinding': {'prefix': '--keepflags'}, 'default': False}, 'defqual': {'type': 'int?', 'inputBinding': {'prefix': '--defqual'}}}",
    "cwl_outputs": "{'realigned': {'type': 'File', 'format': 'edam:format_2572', 'outputBinding': {'glob': '$(inputs.reads.nameroot)_realigned.bam'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lofreq', 'viterbi']",
    "cwl_arguments": "[{'prefix': '--out', 'valueFrom': '$(inputs.reads.nameroot)_realigned.bam'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.reference)']}}",
    "cwl_doc": "Probabilistic realignment of your already mapped reads, which corrects\nmapping errors (run right after mapping). Not recommended for non-Illumina\ndata.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "viterbi: Viterbi realignment",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/mergetab.cwl",
    "sha": "9f5853f0dc0257316b57ed0f22cd1e9ad28f7671",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/mergetab.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nrequirements:\n  InlineJavascriptRequirement: {}\nbaseCommand: [ls]\ninputs:\n  out_fastq1: File\n  out_fastq2: File\noutputs:\n  tab:\n    type: File[]\n    outputBinding:\n      outputEval: |\n              ${var tab=[]\n                tab.push(inputs.out_fastq1)\n                tab.push(inputs.out_fastq2)\n                return tab;\n               } \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'out_fastq1': 'File', 'out_fastq2': 'File'}",
    "cwl_outputs": "{'tab': {'type': 'File[]', 'outputBinding': {'outputEval': '${var tab=[]\\n  tab.push(inputs.out_fastq1)\\n  tab.push(inputs.out_fastq2)\\n  return tab;\\n } \\n'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ls']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/multiqc.cwl",
    "sha": "71e2b5a5d68dd9d5303c7dc7e44b2b1e6db81ddb",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/multiqc.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Run multiqc on log files from supported bioinformatic tools.\n  26/04/2020: Fixed output filenames, added support for a single input file in qc_files_array (Miguel Boland)\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    # This step is necessary since the input files\n    # must be loaded into the working directory as there\n    # is no way to specify the input file directly on the\n    # command line.\n    listing: |\n      ${// script merges the to input arrays\n        // into one array that fulfills the type \n        // requirement for \"listing\", which is\n        // \"{type: array, items: [File, Directory]}\"\n\n        var qc_files_array = inputs.qc_files_array;\n        var qc_files_array_of_array = inputs.qc_files_array_of_array;\n        var output_array = [];\n\n        // add items of the qc_files_array to the output_array\n        if ( qc_files_array != null ){\n          // Fix to allow single qc_file_array\n          if (qc_files_array.length === undefined){\n            output_array.push(qc_files_array)\n          } else {\n            for (var i=0; i<qc_files_array.length; i++){\n              output_array.push(qc_files_array[i])\n            }\n          }\n        }\n\n        // add items of the qc_files_array_of_array to the output_array\n        if ( qc_files_array_of_array != null ){\n          for (var i=0; i<qc_files_array_of_array.length; i++){ \n            for (var ii=0; ii<qc_files_array_of_array[i].length; ii++){\n              output_array.push(qc_files_array_of_array[i][ii])\n            }\n          }\n        }\n\n        return output_array\n      }\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/multiqc:1.7\n  \n\nbaseCommand: [\"multiqc\"]\narguments:\n  - valueFrom: --zip-data-dir\n    position: 1\n  - valueFrom: \"log_filesize_limit: 100000000\"\n    position: 1\n    prefix: --cl_config\n  - valueFrom: $(runtime.outdir)\n    position: 2\n    prefix: --outdir\n  - valueFrom: $(runtime.outdir)\n    position: 4\n  \ninputs:\n  qc_files_array:\n    doc: |\n      qc files which shall be part of the multiqc summary;\n      optional, only one of qc_files_array or qc_files_array_of_array \n      must be provided\n    type:\n      - \"null\"\n      - File\n      - type: array\n        items: File\n  qc_files_array_of_array:\n    doc: |\n      qc files which shall be part of the multiqc summary;\n      optional, only one of qc_files_array or qc_files_array_of_array \n      must be provided\n    type:\n      - \"null\"\n      - type: array\n        items: \n          type: array\n          items: File\n  report_name:\n    doc: name used for the html report and the corresponding zip file\n    type: string\n    default: multiqc\n    inputBinding:\n      prefix: --filename\n      position: 3\n      \noutputs:\n  multiqc_zip:\n    type: File\n    outputBinding:\n      glob: $(inputs.report_name)_data.zip\n  multiqc_html:\n    type: File\n    outputBinding:\n      glob: $(inputs.report_name).html\n  diree:\n    type: Directory\n    outputBinding:\n      glob: .\n#  multiqc_json:\n#    type: File\n#    outputBinding:\n#      glob: multiqc_data/$(inputs.report_name).json\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'qc_files_array': {'doc': 'qc files which shall be part of the multiqc summary;\\noptional, only one of qc_files_array or qc_files_array_of_array \\nmust be provided\\n', 'type': ['null', 'File', {'type': 'array', 'items': 'File'}]}, 'qc_files_array_of_array': {'doc': 'qc files which shall be part of the multiqc summary;\\noptional, only one of qc_files_array or qc_files_array_of_array \\nmust be provided\\n', 'type': ['null', {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}]}, 'report_name': {'doc': 'name used for the html report and the corresponding zip file', 'type': 'string', 'default': 'multiqc', 'inputBinding': {'prefix': '--filename', 'position': 3}}}",
    "cwl_outputs": "{'multiqc_zip': {'type': 'File', 'outputBinding': {'glob': '$(inputs.report_name)_data.zip'}}, 'multiqc_html': {'type': 'File', 'outputBinding': {'glob': '$(inputs.report_name).html'}}, 'diree': {'type': 'Directory', 'outputBinding': {'glob': '.'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 10000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/multiqc:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['multiqc']",
    "cwl_arguments": "[{'valueFrom': '--zip-data-dir', 'position': 1}, {'valueFrom': 'log_filesize_limit: 100000000', 'position': 1, 'prefix': '--cl_config'}, {'valueFrom': '$(runtime.outdir)', 'position': 2, 'prefix': '--outdir'}, {'valueFrom': '$(runtime.outdir)', 'position': 4}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': '${// script merges the to input arrays\\n  // into one array that fulfills the type \\n  // requirement for \"listing\", which is\\n  // \"{type: array, items: [File, Directory]}\"\\n\\n  var qc_files_array = inputs.qc_files_array;\\n  var qc_files_array_of_array = inputs.qc_files_array_of_array;\\n  var output_array = [];\\n\\n  // add items of the qc_files_array to the output_array\\n  if ( qc_files_array != null ){\\n    // Fix to allow single qc_file_array\\n    if (qc_files_array.length === undefined){\\n      output_array.push(qc_files_array)\\n    } else {\\n      for (var i=0; i<qc_files_array.length; i++){\\n        output_array.push(qc_files_array[i])\\n      }\\n    }\\n  }\\n\\n  // add items of the qc_files_array_of_array to the output_array\\n  if ( qc_files_array_of_array != null ){\\n    for (var i=0; i<qc_files_array_of_array.length; i++){ \\n      for (var ii=0; ii<qc_files_array_of_array[i].length; ii++){\\n        output_array.push(qc_files_array_of_array[i][ii])\\n      }\\n    }\\n  }\\n\\n  return output_array\\n}\\n'}}",
    "cwl_doc": "Run multiqc on log files from supported bioinformatic tools.\n26/04/2020: Fixed output filenames, added support for a single input file in qc_files_array (Miguel Boland)\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/picard_MarkDuplicates.cwl",
    "sha": "a5a26de7996a256844ffedeabce8d7cb391cc21e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/picard_MarkDuplicates.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Removal of duplicates from aligned reads.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\n \nbaseCommand: [ picard, MarkDuplicates ]\n\narguments:\n  - OUTPUT=$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)\n  - METRICS_FILE=$(inputs.alignments.nameroot)_markduplicates.metrics\n\nstderr: $(inputs.alignments.nameroot).markduplicates.log\n\ninputs:\n  alignments:\n    doc: SAM or BAM format alignment file\n    format:\n      - edam:format_2573  # SAM\n      - edam:format_2572  # BAM\n    type: File\n    inputBinding:\n      prefix: \"INPUT=\"\n      separate: false\n\n  alignments_are_sorted:\n    type: boolean\n    inputBinding:\n      prefix: ASSUME_SORTED=TRUE\n\n  remove_duplicates:\n    doc: |\n     If true do not write duplicates to the output file instead of writing them\n     with appropriate flags set.\n    type: boolean\n    inputBinding:\n      prefix: REMOVE_DUPLICATES=TRUE\n\n  validation_stringency:\n    type:\n     - 'null'\n     - type: enum\n       symbols:\n        - STRICT\n        - LENIENT\n        - SILENT\n    inputBinding:\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n\n  comment:\n    doc: Comment(s) to include in the output file's header\n    type:\n     - 'null'\n     - type: array\n       items: string\n       inputBinding:\n         prefix: COMMENT=\n         separate: false\n  duplicate_scoring_strategy:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n    inputBinding:\n      prefix: DUPLICATE_SCORING_STRATEGY=\n      separate: false\n  read_name_regex:\n    type: string?\n    inputBinding:\n      prefix: READ_NAME_REGEX=\n      separate: false\n  optical_duplicate_pixel_distance:\n    type: int?\n    default: 100\n    doc: '(0;500)'\n    inputBinding:\n      prefix: OPTICAL_DUPLICATE_PIXEL_DISTANCE=\n      separate: false\n  barcode_tag:\n    type: string?\n    inputBinding:\n      prefix: BARCODE_TAG=\n      separate: false\noutputs:\n  alignments:\n    type: File\n    format: $(inputs.alignments.format)\n    outputBinding:\n      glob: $(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)\n  log:\n    type: stderr\n  metrics:\n    type: File\n    outputBinding:\n      glob: $(inputs.alignments.nameroot)_markduplicates.metrics\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'alignments': {'doc': 'SAM or BAM format alignment file', 'format': ['edam:format_2573', 'edam:format_2572'], 'type': 'File', 'inputBinding': {'prefix': 'INPUT=', 'separate': False}}, 'alignments_are_sorted': {'type': 'boolean', 'inputBinding': {'prefix': 'ASSUME_SORTED=TRUE'}}, 'remove_duplicates': {'doc': 'If true do not write duplicates to the output file instead of writing them\\nwith appropriate flags set.\\n', 'type': 'boolean', 'inputBinding': {'prefix': 'REMOVE_DUPLICATES=TRUE'}}, 'validation_stringency': {'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}], 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}}, 'comment': {'doc': \"Comment(s) to include in the output file's header\", 'type': ['null', {'type': 'array', 'items': 'string', 'inputBinding': {'prefix': 'COMMENT=', 'separate': False}}]}, 'duplicate_scoring_strategy': {'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}], 'inputBinding': {'prefix': 'DUPLICATE_SCORING_STRATEGY=', 'separate': False}}, 'read_name_regex': {'type': 'string?', 'inputBinding': {'prefix': 'READ_NAME_REGEX=', 'separate': False}}, 'optical_duplicate_pixel_distance': {'type': 'int?', 'default': 100, 'doc': '(0;500)', 'inputBinding': {'prefix': 'OPTICAL_DUPLICATE_PIXEL_DISTANCE=', 'separate': False}}, 'barcode_tag': {'type': 'string?', 'inputBinding': {'prefix': 'BARCODE_TAG=', 'separate': False}}}",
    "cwl_outputs": "{'alignments': {'type': 'File', 'format': '$(inputs.alignments.format)', 'outputBinding': {'glob': '$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)'}}, 'log': {'type': 'stderr'}, 'metrics': {'type': 'File', 'outputBinding': {'glob': '$(inputs.alignments.nameroot)_markduplicates.metrics'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'MarkDuplicates']",
    "cwl_arguments": "['OUTPUT=$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)', 'METRICS_FILE=$(inputs.alignments.nameroot)_markduplicates.metrics']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": "Removal of duplicates from aligned reads.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "$(inputs.alignments.nameroot).markduplicates.log",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/picard_SortSam.cwl",
    "sha": "855d069305a6233c0cc1acd8eb13fb86621d600b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/picard_SortSam.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\nrequirements:\n  InlineJavascriptRequirement: {}\n\nbaseCommand: [ picard, SortSam ]\n\narguments:\n  - prefix: OUTPUT=\n    separate: false\n    valueFrom: |\n      ${ if(inputs.sort_order == \"coordinate\") { return (inputs.alignments.nameroot)+\".bam\";} else { return (inputs.alignments.nameroot)+\".sam\"; } }\n\ninputs:\n  alignments:\n    type: File\n    inputBinding:\n      prefix: INPUT=\n      separate: false\n\n  sort_order:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n    default: coordinate\n    doc: 'coordinate (bam) or queryname (sam)'\n    inputBinding:\n      prefix: SORT_ORDER=\n      separate: false\n\n  validation_stringency:\n    default: LENIENT\n    doc: Validation stringency for all SAM files read by this program.  Setting stringency\n      to SILENT can improve performance when processing a BAM file in which variable-length\n      data (read, qualities, tags) do not otherwise need to be decoded.\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - STRICT\n      - LENIENT\n      - SILENT\n    inputBinding:\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n\noutputs:\n  sorted_alignments:\n    type: File\n    format: |-\n      ${ if(inputs.sort_order == \"coordinate\") { return \"http://edamontology.org/format_2572\";} else { return \"http://edamontology.org/format_2573\"; } }\n    outputBinding:\n      glob: '*.*am'\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'alignments': {'type': 'File', 'inputBinding': {'prefix': 'INPUT=', 'separate': False}}, 'sort_order': {'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}], 'default': 'coordinate', 'doc': 'coordinate (bam) or queryname (sam)', 'inputBinding': {'prefix': 'SORT_ORDER=', 'separate': False}}, 'validation_stringency': {'default': 'LENIENT', 'doc': 'Validation stringency for all SAM files read by this program.  Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded.', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}], 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}}}",
    "cwl_outputs": "{'sorted_alignments': {'type': 'File', 'format': '${ if(inputs.sort_order == \"coordinate\") { return \"http://edamontology.org/format_2572\";} else { return \"http://edamontology.org/format_2573\"; } }', 'outputBinding': {'glob': '*.*am'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'SortSam']",
    "cwl_arguments": "[{'prefix': 'OUTPUT=', 'separate': False, 'valueFrom': '${ if(inputs.sort_order == \"coordinate\") { return (inputs.alignments.nameroot)+\".bam\";} else { return (inputs.alignments.nameroot)+\".sam\"; } }\\n'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_faidx.cwl",
    "sha": "71b673244082637c43512f8609cdb6589c656b28",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_faidx.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.2-0\nrequirements:\n  InitialWorkDirRequirement:\n    listing: [ $(inputs.sequences) ]\n\nbaseCommand: [ samtools, faidx ]\n\ninputs:\n  sequences:\n    type: File\n    doc: Input FASTA file\n    format: edam:format_1929\n\narguments:\n   - $(inputs.sequences.basename)\n\noutputs:\n  sequences_with_index:\n    type: File\n    format: $(inputs.sequences.format)\n    secondaryFiles:\n     - .fai\n    outputBinding:\n      glob: $(inputs.sequences.basename)\n  sequences_index:\n    type: File\n    outputBinding:\n      glob: $(inputs.sequences.basename).fai\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'sequences': {'type': 'File', 'doc': 'Input FASTA file', 'format': 'edam:format_1929'}}",
    "cwl_outputs": "{'sequences_with_index': {'type': 'File', 'format': '$(inputs.sequences.format)', 'secondaryFiles': ['.fai'], 'outputBinding': {'glob': '$(inputs.sequences.basename)'}}, 'sequences_index': {'type': 'File', 'outputBinding': {'glob': '$(inputs.sequences.basename).fai'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/samtools:1.2-0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'faidx']",
    "cwl_arguments": "['$(inputs.sequences.basename)']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.sequences)']}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_index.cwl",
    "sha": "40ca889caec96fa1d5a6ee7f9147cade35b9515b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Indexing BAM.\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing: \n      - $(inputs.bam_sorted)\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [\"samtools\", \"index\"]\narguments:\n  - valueFrom: -b  # specifies that index is created in bai format\n    position: 1\n\ninputs:\n  bam_sorted:\n    doc: sorted bam input file\n    type: File\n    inputBinding:\n      position: 2\n\noutputs:\n  bam_sorted_indexed:\n    type: File\n    secondaryFiles: .bai\n    outputBinding:\n      glob: $(inputs.bam_sorted.basename)\n      \n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam_sorted': {'doc': 'sorted bam input file', 'type': 'File', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'bam_sorted_indexed': {'type': 'File', 'secondaryFiles': '.bai', 'outputBinding': {'glob': '$(inputs.bam_sorted.basename)'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'index']",
    "cwl_arguments": "[{'valueFrom': '-b', 'position': 1}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.bam_sorted)']}}",
    "cwl_doc": "Indexing BAM.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_sort.cwl",
    "sha": "36f47b4a01ceff3c15f1b9a28b324fe128a520e0",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_sort.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: Sort a bam file by read names.\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 4\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [\"samtools\", \"sort\"]\narguments:\n  - valueFrom: $(runtime.cores)\n    prefix: -@\n  - prefix: -m\n    valueFrom: ${ return(parseInt(runtime.ram/runtime.cores-100).toString() + \"M\") }\n    position: 1\n    # specifies the allowed maximal memory usage per thread before\n    # samtools start to outsource memory to temporary files\n\ninputs:\n  bam_unsorted:\n    doc: aligned reads to be checked in sam or bam format\n    type: File\n    format: edam:format_2572\n    inputBinding:\n      position: 2\n  by_name:\n    doc: If true, will sort by name, otherwise will sort by genomic position\n    type: boolean\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -n\n\nstdout: $(inputs.bam_unsorted.basename)\n\noutputs:\n  bam_sorted:\n    type: stdout\n    format: edam:format_2572 \n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam_unsorted': {'doc': 'aligned reads to be checked in sam or bam format', 'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {'position': 2}}, 'by_name': {'doc': 'If true, will sort by name, otherwise will sort by genomic position', 'type': 'boolean', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-n'}}}",
    "cwl_outputs": "{'bam_sorted': {'type': 'stdout', 'format': 'edam:format_2572'}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 4, 'ramMin': 15000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'sort']",
    "cwl_arguments": "[{'valueFrom': '$(runtime.cores)', 'prefix': '-@'}, {'prefix': '-m', 'valueFrom': '${ return(parseInt(runtime.ram/runtime.cores-100).toString() + \"M\") }', 'position': 1}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Sort a bam file by read names.",
    "cwl_stdout": "$(inputs.bam_unsorted.basename)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_stats.cwl",
    "sha": "bb226314e690f8758157e4b51dac9fec54286fcd",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_stats.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand: [samtools, stats]\nrequirements:\n- class: DockerRequirement\n  dockerPull: biocontainers/samtools:v1.7.0_cv3\n\ninputs:\n  input_file:\n    type: File\n    format: \n      - edam:format_2572  # BAM\n      - edam:format_2573  # SAM\n      - edam:format_3462  # CRAM\n    inputBinding:\n      position: 100\n  coverage:\n    type:\n      - 'null'\n      - type: record\n        name: coverage_parameters\n        fields:\n          min_cov:\n            type: int\n          max_cov:\n            type: int\n          step_cov:\n            type: int\n    inputBinding:\n      prefix: --coverage\n    doc: \"Set coverage distribution to the specified range (MIN, MAX, STEP all given as integers) [1,1000,1]\"\n  remove_dups:\n    type: boolean?\n    doc: \"Exclude from statistics reads marked as duplicates\"\n    inputBinding:\n      prefix: --remove_dups\n\n  required_flag:\n    type:\n      - string\n      - int\n      - \"null\"\n    default: 0\n    doc: \" STR|INT Required flag, 0 for unset. See also `samtools flags` [0] \"\n    inputBinding:\n      prefix: -f\n\n  filtering_flag:\n    type:\n      - string\n      - int\n      - \"null\"\n    default: 0\n    doc: \"STR|INT Filtering flag, 0 for unset. See also `samtools flags` [0] \"\n    inputBinding:\n      prefix: -F\n\n  GC_depth:\n    type: float?\n    doc: \"the size of GC-depth bins (decreasing bin size increases memory requirement) [2e4] \"\n    inputBinding:\n      prefix: --GC-depth\n\n  max_insert_size:\n    type: int?\n    doc: \"Maximum insert size [8000]\"\n    inputBinding:\n      prefix: -i\n\n  listed_group:\n    type: string?\n    doc: \"Include only listed read group or sample name [] \"\n    inputBinding:\n      prefix: --id\n\n  read_length:\n    type: int?\n    doc: \"Include in the statistics only reads with the given read length [-1]\"\n    inputBinding:\n      prefix: -l\n\n  most_inserts:\n    type: float?\n    doc: \"Report only the main part of inserts [0.99] \"\n    inputBinding:\n      prefix: -m\n\n  split_prefix:\n    type: string?\n    doc:  \"A path or string prefix to prepend to filenames output when creating categorised statistics files with -S/--split. [input filename]\"\n    inputBinding:\n      prefix: -P\n\n  trim_quality:\n    type: int?\n    doc: \"The BWA trimming parameter [0] \"\n    inputBinding:\n      prefix: -q\n\n  ref_seq:\n    type: File?\n    doc: \"Reference sequence (required for GC-depth and mismatches-per-cycle calculation). [] \"\n    inputBinding:\n      prefix: -r\n\n  split:\n    type: string?\n    doc: \"In addition to the complete statistics, also output categorised statistics based on the tagged field TAG (e.g., use --split RG to split into read groups).    Categorised statistics are written to files named <prefix>_<value>.bamstat, where prefix is as given by --split-prefix (or the input filename by default) and value has been encountered as the specified tagged field's value in one or more alignment records. \"\n    inputBinding:\n      prefix: --split\n\n  target_regions:\n    type: File?\n    doc: \"Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive. []\"\n    inputBinding:\n      prefix: --target-regions\n  sparse:\n    type: boolean?\n    doc: \"Suppress outputting IS rows where there are no insertions.\"\n    inputBinding:\n      prefix: --sparse\n  remove_overlaps:\n    type: boolean?\n    doc: \"Remove overlaps of paired-end reads from coverage and base count computations. \"\n    inputBinding:\n      prefix: --remove-overlaps\n  cov_threshold:\n    type: int?\n    doc: \"Only bases with coverage above this value will be included in the target percentage computation [0] \"\n    inputBinding:\n      prefix: -g\n\narguments:\n  - prefix: --threads\n    valueFrom: $(runtime.cores)  \n    \n# -X\n#     If this option is set, it will allows user to specify customized index file location(s) if the data folder does not contain any index file. Example usage: samtools stats [options] -X /data_folder/data.bam /index_folder/data.bai chrM:1-10\n\noutputs:\n  stats:\n    type: File\n    outputBinding:\n      glob: $(inputs.input_file.nameroot).stats.txt\nstdout: $(inputs.input_file.nameroot).stats.txt\n\n$namespaces: { edam: http://edamontology.org/, iana: https://www.iana.org/assignments/media-types/ }\n$schemas:\n  - 'http://edamontology.org/EDAM_1.18.owl'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'input_file': {'type': 'File', 'format': ['edam:format_2572', 'edam:format_2573', 'edam:format_3462'], 'inputBinding': {'position': 100}}, 'coverage': {'type': ['null', {'type': 'record', 'name': 'coverage_parameters', 'fields': {'min_cov': {'type': 'int'}, 'max_cov': {'type': 'int'}, 'step_cov': {'type': 'int'}}}], 'inputBinding': {'prefix': '--coverage'}, 'doc': 'Set coverage distribution to the specified range (MIN, MAX, STEP all given as integers) [1,1000,1]'}, 'remove_dups': {'type': 'boolean?', 'doc': 'Exclude from statistics reads marked as duplicates', 'inputBinding': {'prefix': '--remove_dups'}}, 'required_flag': {'type': ['string', 'int', 'null'], 'default': 0, 'doc': ' STR|INT Required flag, 0 for unset. See also `samtools flags` [0] ', 'inputBinding': {'prefix': '-f'}}, 'filtering_flag': {'type': ['string', 'int', 'null'], 'default': 0, 'doc': 'STR|INT Filtering flag, 0 for unset. See also `samtools flags` [0] ', 'inputBinding': {'prefix': '-F'}}, 'GC_depth': {'type': 'float?', 'doc': 'the size of GC-depth bins (decreasing bin size increases memory requirement) [2e4] ', 'inputBinding': {'prefix': '--GC-depth'}}, 'max_insert_size': {'type': 'int?', 'doc': 'Maximum insert size [8000]', 'inputBinding': {'prefix': '-i'}}, 'listed_group': {'type': 'string?', 'doc': 'Include only listed read group or sample name [] ', 'inputBinding': {'prefix': '--id'}}, 'read_length': {'type': 'int?', 'doc': 'Include in the statistics only reads with the given read length [-1]', 'inputBinding': {'prefix': '-l'}}, 'most_inserts': {'type': 'float?', 'doc': 'Report only the main part of inserts [0.99] ', 'inputBinding': {'prefix': '-m'}}, 'split_prefix': {'type': 'string?', 'doc': 'A path or string prefix to prepend to filenames output when creating categorised statistics files with -S/--split. [input filename]', 'inputBinding': {'prefix': '-P'}}, 'trim_quality': {'type': 'int?', 'doc': 'The BWA trimming parameter [0] ', 'inputBinding': {'prefix': '-q'}}, 'ref_seq': {'type': 'File?', 'doc': 'Reference sequence (required for GC-depth and mismatches-per-cycle calculation). [] ', 'inputBinding': {'prefix': '-r'}}, 'split': {'type': 'string?', 'doc': \"In addition to the complete statistics, also output categorised statistics based on the tagged field TAG (e.g., use --split RG to split into read groups).    Categorised statistics are written to files named <prefix>_<value>.bamstat, where prefix is as given by --split-prefix (or the input filename by default) and value has been encountered as the specified tagged field's value in one or more alignment records. \", 'inputBinding': {'prefix': '--split'}}, 'target_regions': {'type': 'File?', 'doc': 'Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive. []', 'inputBinding': {'prefix': '--target-regions'}}, 'sparse': {'type': 'boolean?', 'doc': 'Suppress outputting IS rows where there are no insertions.', 'inputBinding': {'prefix': '--sparse'}}, 'remove_overlaps': {'type': 'boolean?', 'doc': 'Remove overlaps of paired-end reads from coverage and base count computations. ', 'inputBinding': {'prefix': '--remove-overlaps'}}, 'cov_threshold': {'type': 'int?', 'doc': 'Only bases with coverage above this value will be included in the target percentage computation [0] ', 'inputBinding': {'prefix': '-g'}}}",
    "cwl_outputs": "{'stats': {'type': 'File', 'outputBinding': {'glob': '$(inputs.input_file.nameroot).stats.txt'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'stats']",
    "cwl_arguments": "[{'prefix': '--threads', 'valueFrom': '$(runtime.cores)'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.input_file.nameroot).stats.txt",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/samtools_view_filter.cwl",
    "sha": "b6662414399cd0446c927848c423c4440b7fe224",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_view_filter.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [samtools, view]\ninputs:\n  bam:\n    format: edam:format_2572\n    doc: aligned reads to be checked in bam format\n    type: File\n    inputBinding:\n      position: 10\n\n  count:\n    type: boolean?\n    default: true\n    doc: \"Instead of printing the alignments, only count them and print the total number.\"\n    inputBinding:\n      position: 1\n      prefix: -c\n  exclude_unmapped:\n    type: boolean?\n    default: true\n    inputBinding:\n      valueFrom: \"4\"\n      prefix: -F\n      position: 1\n\n  is_paired_end:\n    doc: if paired end, only properly paired reads pass\n    type: boolean\n    default: true\n\n  min_mapping_quality:\n    doc: Reads with a mapping quality below this will be excluded\n    type: int?\n    default: 20\n    inputBinding:\n      position: 1\n      prefix: -q\n\n\n  header:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - include\n          - exclude\n          - only\n    default: include\n    inputBinding:\n        valueFrom: |\n            ${\n              if (self==\"include\"){\n                return \"-h\";\n              }\n              if (self==\"only\"){\n                return \"-H\";\n              }\n              else {\n                return null;\n              }\n            }\n\noutputs:\n  bam_filtered:\n    format: edam:format_2572\n    type: stdout\n\nstdout: $(inputs.bam.nameroot)_filt.bam\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam': {'format': 'edam:format_2572', 'doc': 'aligned reads to be checked in bam format', 'type': 'File', 'inputBinding': {'position': 10}}, 'count': {'type': 'boolean?', 'default': True, 'doc': 'Instead of printing the alignments, only count them and print the total number.', 'inputBinding': {'position': 1, 'prefix': '-c'}}, 'exclude_unmapped': {'type': 'boolean?', 'default': True, 'inputBinding': {'valueFrom': '4', 'prefix': '-F', 'position': 1}}, 'is_paired_end': {'doc': 'if paired end, only properly paired reads pass', 'type': 'boolean', 'default': True}, 'min_mapping_quality': {'doc': 'Reads with a mapping quality below this will be excluded', 'type': 'int?', 'default': 20, 'inputBinding': {'position': 1, 'prefix': '-q'}}, 'header': {'type': ['null', {'type': 'enum', 'symbols': ['include', 'exclude', 'only']}], 'default': 'include', 'inputBinding': {'valueFrom': '${\\n  if (self==\"include\"){\\n    return \"-h\";\\n  }\\n  if (self==\"only\"){\\n    return \"-H\";\\n  }\\n  else {\\n    return null;\\n  }\\n}\\n'}}}",
    "cwl_outputs": "{'bam_filtered': {'format': 'edam:format_2572', 'type': 'stdout'}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 10000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'view']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.bam.nameroot)_filt.bam",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/snpEff_build_ann.cwl",
    "sha": "5c4a9881afcb6be22f4111b1cbbff624afc7304b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/snpEff_build_ann.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nbaseCommand: [bash, commands.sh]\n\ninputs:\n  - id: importGenome\n    type: boolean\n    doc: 'import your own genome (genbank)'\n  - id: genome_reference\n    type: string\n\n  - id: bankfile\n    type: File?\n    doc: 'import your own genome'\n\n  - id: sequence\n    type: File\n\n  - id: inputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n    default: vcf\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n    default: vcf\n\n  - id: udLength\n    type: int\n    doc: 'Set upstream downstream interval length (in bases). 0 base: No upstream / downstream intervals'\n\n## reports:\n  - id: html_report\n    type: boolean?\n\n  - id: csvFile\n    type: boolean?\n  - id: noStats\n    type: boolean?\n\n## Annotations options:\n  - id: formatEff\n    type: boolean?\n    doc: \"Use 'EFF' field compatible with older versions (instead of 'ANN')\"\n  - id: classic\n    type: boolean?\n    doc: \"Use Classic Effect names and amino acid variant annotations (NON_SYNONYMOUS_CODING vs missense_variant and G180R vs p.Gly180Arg/c.538G>C)\"\n  - id: sequenceOntology\n    type: boolean?\n    doc: \"Override classic and use Sequence Ontolgy terms for effects (missense_variant vs NON_SYNONYMOUS_CODING)\"\n  - id: hgvs\n    type: boolean?\n    default: true\n    doc: \"Override classic and use HGVS annotations for amino acid annotations (p.Gly180Arg/c.538G>C vs G180R)\"\n  - id: noShiftHgvs\n    type: boolean?\n    doc: \"Do not shift variants according to HGVS notation (most 3prime end)\"\n  - id: noHgvs\n    type: boolean?\n    doc: \"Do not add HGVS annotations\"\n  - id: geneId\n    type: boolean?\n    doc: \"Use gene ID instead of gene name (VCF output). Default: false\"\n  - id: lof\n    type: boolean?\n    doc: \"Add loss of function (LOF) and nonsense mediated decay (NMD) tags\"\n  - id: noLof\n    type: boolean?\n    doc: \"Do not add LOF and NMD annotations\"\n  - id: cancer\n    type: boolean?\n    inputBinding:\n      prefix: -cancer\n    doc: \"Perform 'cancer' comparisons (somatic vs. germline)\"\n  - id: cancerSamples\n    type: File?\n    doc: \"<file> : Two column TXT file defining 'oringinal \\t derived' samples.\"\n  - id: oicr\n    type: boolean?\n    doc: \"Add OICR tag in VCF file. Default: false\"\n\n## Database options:\n\n  - id: canon\n    type: boolean?\n    doc: \"Only use canonical transcripts\"\n  - id: motif\n    type: boolean?\n    doc: \"Annotate using motifs (requires Motif database).\"\n  - id: noMotif\n    type: boolean?\n    doc: \"Disable motif annotations\"\n  - id: noNextProt\n    type: boolean?\n    doc: \"Disable NextProt annotations\"\n  - id: nextProt\n    type: boolean?\n    doc: \"Annotate using NextProt (requires NextProt database).\"\n  - id: noGenome\n    type: boolean?\n    doc: \"Do not load any genomic database (e.g. annotate using custom files).\"\n  - id: onlyProtein\n    type: boolean?\n    doc: \"Only use protein coding transcripts. Default: false\"\n  - id: transcripts\n    type: File?\n    doc: '<file.txt>   Only use the transcripts in this file. Format: One transcript ID per line.'\n\n  # \u00e0 rendre facultatif:\n  - id: interval\n    type: File[]?\n      #- type: null\n      #type: array\n      #items: File\n    doc: 'Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).'\n  - id: spliceRegionExonSize\n    type: int?\n    default: 3\n  - id: spliceRegionIntronMax\n    type: int?\n    default: 8\n  - id: spliceRegionIntronMin\n    type: int?\n    default: 8\n  - id: spliceSiteSize\n    type: int?\n    default: 2\n  - id: onlyReg\n    type: boolean?\n    doc: \"Only use regulation tracks.\"\n  - id: strict\n    type: boolean?\n    doc: \"Only use 'validated' transcripts (i.e. sequence has been checked). Default: false\"\n## Results filter options :\n\n  - id: filterInterval\n    type: File[]?\n    doc: \"Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)\"\n  - id: no_downstream\n    type: boolean?\n    doc: \" Do not show DOWNSTREAM changes\"\n  - id: no_intergenic\n    type: boolean?\n    doc: \"Do not show INTERGENIC changes\"\n  - id: no_intron\n    type: boolean?\n    doc: \"Do not show INTRON changes\"\n  - id: no_upstream\n    type: boolean?\n    doc: \"Do not show UPSTREAM changes\"\n  - id: no_utr\n    type: boolean?\n    doc: \"Do not show 5_PRIME_UTR or 3_PRIME_UTR changes\"\n  - id: no_EffectType\n    type: boolean?\n    doc: \"Do not show 'EffectType'. This option can be used several times.\"\n\noutputs:\n  - id: snpeff_output\n    type: File?\n    # format $(inputs.outputFormat)\n    outputBinding:\n      glob: \"*.$(inputs.outputFormat)\"\n  - id: statsFile\n    type: File?\n    outputBinding:\n      glob: \"*.html\"\n  - id: csvFile\n    type: File?\n    outputBinding:\n      glob: '*.csv'\n  - id: genes\n    type: File?\n    outputBinding:\n      glob: '*.txt'\nrequirements:\n  - class: DockerRequirement\n    dockerPull: biocontainers/snpeff:v4.1k_cv3\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: \"$({class: 'Directory', listing: []})\"\n        entryname: $(inputs.genome_reference)\n        writable: true\n      - entryname: $(inputs.genome_reference)/genes.gbk\n        entry: $(inputs.bankfile)\n      - entryname: commands.sh\n        entry: |-\n          #!/bin/bash\n          ###########################\n          #cd /home/biodocker/bin/snpEff\n          cp /home/biodocker/bin/snpEff/snpEff.config .\n          ls -R\n\n          if [ $(inputs.importGenome) ]\n          then\n              echo $(inputs.genome_reference).genome=$(inputs.genome_reference) >> snpEff.config\n              snpEff build -v -c snpEff.config -dataDir . -configOption $(inputs.genome_reference).genome=$(inputs.genome_reference) -genbank $(inputs.genome_reference)\n              grep covid19 snpEff.config\n          fi\n\n          ${\n          var command=\n          \"snpEff ann -v -c snpEff.config -dataDir .  -i \"+ (inputs.inputFormat)+\" -o \"+(inputs.outputFormat)+\" -upDownStreamLen \"+(inputs.udLength)+\" -spliceRegionExonSize \"+(inputs.spliceRegionExonSize)+\" -spliceRegionIntronMax  \"+(inputs.spliceRegionIntronMax)+\" -spliceRegionIntronMin \"+(inputs.spliceRegionIntronMin)+\" -spliceSiteSize \"+(inputs.spliceSiteSize)\n\n          if (inputs.csvFile){\n            command+= \" -csvFile \"\n          }\n          if (inputs.html_report){\n            command+=\" -s \"\n          }\n          if (inputs.noStats){\n            command+=\" -noStats \"\n          }\n          if (inputs.formatEff){\n            command+=\" -formatEff \"\n          }\n          if (inputs.classic){\n            command+=\" -classic \"\n          }\n          if (inputs.sequenceOntology){\n            command+=\" -sequenceOntology \"\n          }\n          if (inputs.hgvs){\n            command+=\" -hgvs \"\n          }\n          if (inputs.noShiftHgvs){\n            command+=\" -noShiftHgvs \"\n          }\n          if (inputs.noHgvs){\n            command+=\" -noHgvs \"\n          }\n          if (inputs.geneId){\n            command+= \" -geneId\"\n          }\n          if (inputs.lof){\n            command+=\" -lof \"\n          }\n          if (inputs.noLof){\n            command+=\" -noLof \"\n          }\n          if (inputs.cancer){\n            command+=\" -cancer \"\n          }\n          if (inputs.oicr){\n            command+=\" -oicr \"\n          }\n          if (inputs.cancerSamples!=null){\n            command+= \" -cancerSamples \"+(inputs.cancerSamples.path)\n          }\n          if (inputs.canon){\n            command+= \" -canon \"\n          }\n          if (inputs.motif){\n            command+= \" -motif \"\n          }\n          if (inputs.noMotif){\n            command+= \" -noMotif \"\n          }\n          if (inputs.noNextProt){\n            command+=\" -noNextProt \"\n          }\n          if (inputs.nextProt){\n            command+=\" -nextProt \"\n          }\n          if (inputs.noGenome){\n            command+=\" -noGenome \"\n          }\n          if (inputs.onlyProtein){\n            command+=\" -onlyProtein \"\n          }\n          if (inputs.onlyReg){\n            command+=\" -onlyReg \"\n          }\n          if (inputs.strict){\n            command+=\" -strict \"\n          }\n          if (inputs.no_downstream){\n            command+= \" -no-downstream \"\n          }\n          if (inputs.no_intergenic){\n            command+= \" -no-intergenic \"\n          }\n          if (inputs.no_intron){\n            command+= \" -no-intron \"\n          }\n          if (inputs.no_upstream){\n            command+= \" -no-upstream \"\n          }\n          if (inputs.no_utr){\n            command+= \" -no-utr \"\n          }\n          if (inputs.no_EffectType){\n            command+= \" -no EffectType \"\n          }\n          if (inputs.transcripts!=null){\n           for (var i=0; i< inputs.transcripts.length; i++){\n             command+= \" -onlyTr \"+inputs.transcripts[i].path\n           }\n          }\n          if (inputs.filterInterval!=null){\n           for (var i=0; i< inputs.filterInterval.length; i++){\n             command+= \" -filterInterval \"+inputs.filterInterval[i].path\n           }\n          }\n          if (inputs.interval!=null){\n           for (var i=0; i< inputs.interval.length; i++){\n             command+= \" -interval \"+inputs.interval[i].path\n           }\n          }\n          command+=(inputs.genome_reference)+\" \"+(inputs.sequence.path)+\" > \"+(inputs.sequence.nameroot)+\".ann.\"+(inputs.outputFormat)\n\n          return command;\n          }\n          ls -R\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'importGenome', 'type': 'boolean', 'doc': 'import your own genome (genbank)'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'bankfile', 'type': 'File?', 'doc': 'import your own genome'}, {'id': 'sequence', 'type': 'File'}, {'id': 'inputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed']}], 'default': 'vcf'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn']}], 'default': 'vcf'}, {'id': 'udLength', 'type': 'int', 'doc': 'Set upstream downstream interval length (in bases). 0 base: No upstream / downstream intervals'}, {'id': 'html_report', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?', 'doc': \"Use 'EFF' field compatible with older versions (instead of 'ANN')\"}, {'id': 'classic', 'type': 'boolean?', 'doc': 'Use Classic Effect names and amino acid variant annotations (NON_SYNONYMOUS_CODING vs missense_variant and G180R vs p.Gly180Arg/c.538G>C)'}, {'id': 'sequenceOntology', 'type': 'boolean?', 'doc': 'Override classic and use Sequence Ontolgy terms for effects (missense_variant vs NON_SYNONYMOUS_CODING)'}, {'id': 'hgvs', 'type': 'boolean?', 'default': True, 'doc': 'Override classic and use HGVS annotations for amino acid annotations (p.Gly180Arg/c.538G>C vs G180R)'}, {'id': 'noShiftHgvs', 'type': 'boolean?', 'doc': 'Do not shift variants according to HGVS notation (most 3prime end)'}, {'id': 'noHgvs', 'type': 'boolean?', 'doc': 'Do not add HGVS annotations'}, {'id': 'geneId', 'type': 'boolean?', 'doc': 'Use gene ID instead of gene name (VCF output). Default: false'}, {'id': 'lof', 'type': 'boolean?', 'doc': 'Add loss of function (LOF) and nonsense mediated decay (NMD) tags'}, {'id': 'noLof', 'type': 'boolean?', 'doc': 'Do not add LOF and NMD annotations'}, {'id': 'cancer', 'type': 'boolean?', 'inputBinding': {'prefix': '-cancer'}, 'doc': \"Perform 'cancer' comparisons (somatic vs. germline)\"}, {'id': 'cancerSamples', 'type': 'File?', 'doc': \"<file> : Two column TXT file defining 'oringinal \\t derived' samples.\"}, {'id': 'oicr', 'type': 'boolean?', 'doc': 'Add OICR tag in VCF file. Default: false'}, {'id': 'canon', 'type': 'boolean?', 'doc': 'Only use canonical transcripts'}, {'id': 'motif', 'type': 'boolean?', 'doc': 'Annotate using motifs (requires Motif database).'}, {'id': 'noMotif', 'type': 'boolean?', 'doc': 'Disable motif annotations'}, {'id': 'noNextProt', 'type': 'boolean?', 'doc': 'Disable NextProt annotations'}, {'id': 'nextProt', 'type': 'boolean?', 'doc': 'Annotate using NextProt (requires NextProt database).'}, {'id': 'noGenome', 'type': 'boolean?', 'doc': 'Do not load any genomic database (e.g. annotate using custom files).'}, {'id': 'onlyProtein', 'type': 'boolean?', 'doc': 'Only use protein coding transcripts. Default: false'}, {'id': 'transcripts', 'type': 'File?', 'doc': '<file.txt>   Only use the transcripts in this file. Format: One transcript ID per line.'}, {'id': 'interval', 'type': 'File[]?', 'doc': 'Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).'}, {'id': 'spliceRegionExonSize', 'type': 'int?', 'default': 3}, {'id': 'spliceRegionIntronMax', 'type': 'int?', 'default': 8}, {'id': 'spliceRegionIntronMin', 'type': 'int?', 'default': 8}, {'id': 'spliceSiteSize', 'type': 'int?', 'default': 2}, {'id': 'onlyReg', 'type': 'boolean?', 'doc': 'Only use regulation tracks.'}, {'id': 'strict', 'type': 'boolean?', 'doc': \"Only use 'validated' transcripts (i.e. sequence has been checked). Default: false\"}, {'id': 'filterInterval', 'type': 'File[]?', 'doc': 'Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)'}, {'id': 'no_downstream', 'type': 'boolean?', 'doc': ' Do not show DOWNSTREAM changes'}, {'id': 'no_intergenic', 'type': 'boolean?', 'doc': 'Do not show INTERGENIC changes'}, {'id': 'no_intron', 'type': 'boolean?', 'doc': 'Do not show INTRON changes'}, {'id': 'no_upstream', 'type': 'boolean?', 'doc': 'Do not show UPSTREAM changes'}, {'id': 'no_utr', 'type': 'boolean?', 'doc': 'Do not show 5_PRIME_UTR or 3_PRIME_UTR changes'}, {'id': 'no_EffectType', 'type': 'boolean?', 'doc': \"Do not show 'EffectType'. This option can be used several times.\"}]",
    "cwl_outputs": "[{'id': 'snpeff_output', 'type': 'File?', 'outputBinding': {'glob': '*.$(inputs.outputFormat)'}}, {'id': 'statsFile', 'type': 'File?', 'outputBinding': {'glob': '*.html'}}, {'id': 'csvFile', 'type': 'File?', 'outputBinding': {'glob': '*.csv'}}, {'id': 'genes', 'type': 'File?', 'outputBinding': {'glob': '*.txt'}}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', 'commands.sh']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/snpSift_extract.cwl",
    "sha": "1ac98a628598fb8cc3a0623632abf1d101929e55",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/snpSift_extract.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/snpsift:4.3.1t--2\n    \ndoc:   \"SnpSift Extract Fields <http://snpeff.sourceforge.net/SnpSift.html#Extract> selects columns from a VCF dataset into a Tab-delimited format.\"\n\nstdout: $(inputs.input_vcf.nameroot).tsv\nbaseCommand: [SnpSift, -Xmx6G, extractFields]\narguments: \n  - valueFrom: \\\"$(inputs.empty_text)\\\"\n    prefix: -e\n    position: 4\ninputs:\n  - id: input_vcf\n    type: File \n    inputBinding:\n      position: 1\n\n  - id: extractFields\n    #type: string?\n    type: string[]?\n    default: \"CHROM POS ID REF ALT FILTER\"\n    doc: \"Separated by spaces\"\n    inputBinding:\n      position: 2\n\n      \n  # - id: one_effect_per_line\n  #   type: boolean?\n  #   default: true\n  #   doc: \"When variants have more than one effect, lists one effect per line, while all other parameters in the line are repeated across mutiple lines\"\n\n  - id: separator\n    type: string?\n    doc: \"Separate multiple fields in one column with this character, e.g. a comma, rather than a column for each of the multiple values\"\n    inputBinding:\n      prefix: -s\n      position: 3\n      \n  - id: empty_text\n    type: string?\n    doc: \"Represent empty fields with this value, rather than leaving them blank\"\n   # inputBinding:\n   #   prefix: -e\n   #   position: 4\n\noutputs: \n  - id: out\n    type: stdout\nrequirements:\n  - class: InlineJavascriptRequirement\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'input_vcf', 'type': 'File', 'inputBinding': {'position': 1}}, {'id': 'extractFields', 'type': 'string[]?', 'default': 'CHROM POS ID REF ALT FILTER', 'doc': 'Separated by spaces', 'inputBinding': {'position': 2}}, {'id': 'separator', 'type': 'string?', 'doc': 'Separate multiple fields in one column with this character, e.g. a comma, rather than a column for each of the multiple values', 'inputBinding': {'prefix': '-s', 'position': 3}}, {'id': 'empty_text', 'type': 'string?', 'doc': 'Represent empty fields with this value, rather than leaving them blank'}]",
    "cwl_outputs": "[{'id': 'out', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/snpsift:4.3.1t--2'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['SnpSift', '-Xmx6G', 'extractFields']",
    "cwl_arguments": "[{'valueFrom': '\\\\\"$(inputs.empty_text)\\\\\"', 'prefix': '-e', 'position': 4}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "SnpSift Extract Fields <http://snpeff.sourceforge.net/SnpSift.html#Extract> selects columns from a VCF dataset into a Tab-delimited format.",
    "cwl_stdout": "$(inputs.input_vcf.nameroot).tsv",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/variation_PE.cwl",
    "sha": "d1917269980f0c3db4a4cad18fefa742082aaae8",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/variation_PE.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: var_pe\nlabel: var-PE\n$namespaces:\n  edam: 'http://edamontology.org/'\ninputs:\n  - id: reads_reverse\n    type: File[]\n    format:\n      - 'edam:format_1930'\n      - 'edam:format_1931'\n\n  - id: reads_forward\n    type: File[]\n    format:\n      - 'edam:format_1930'\n      - 'edam:format_1931'\n  - id: reference_in\n    type: File\n\n   #### 1-  fastp options:\n  - id: unqualified_phred_quality\n    type: int?\n  - id: threads\n    type: int?\n  - id: qualified_phred_quality\n    type: int?\n  - id: min_length_required\n    type: int?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: base_correction\n    type: boolean?\n\n   #### picard__sort_sam options:\n  - id: sort_order\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n  - id: validation_stringency\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n\n# samtools_view\n  - id: exclude_unmapped\n    type: boolean?\n  - id: count\n    type: boolean\n\n   #### picard__mark_duplicates options:\n  - id: alignments_are_sorted\n    type: boolean\n  - id: remove_duplicates\n    type: boolean\n  - id: validation_stringency_1\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n  - id: comment\n    type: 'string[]?'\n  - id: duplicate_scoring_strategy\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n  - id: optical_duplicate_pixel_distance\n    type: int?\n  - id: barcode_tag\n    type: string?\n\n   ####lofreq_viterbi options:\n  - id: keepflags\n    type: boolean?\n  - id: defqual\n    type: int?\n  - id: bq2_handling\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - keep\n          - dynamic\n          - fixed\n\n   #### lofreq_cal_variants options:\n  - id: bed\n    type: File?\n  - id: bonferroni\n    type: string?\n  - id: call_indels\n    type: boolean?\n  - id: def_alt_bq\n    type: int?\n  - id: def_alt_jq\n    type: int?\n  - id: del_baq\n    type: boolean?\n  - id: enable_source_qual\n    type: boolean?\n  - id: ignore_vcf\n    type: 'File[]?'\n  - id: illumina_1_3\n    type: boolean?\n  - id: max_depth_cov\n    type: int?\n  - id: max_mapping_quality\n    type: int?\n  - id: min_bq\n    type: int?\n  - id: min_cov\n    type: int?\n  - id: min_mq\n    type: int?\n  - id: use_orphan\n    type: boolean?\n  - id: threads_lf_call\n    type: int?\n  - id: replace_non_match\n    type: int?\n  - id: region\n    type: string?\n  - id: pvalue_cutoff\n    type: float?\n  - id: only_indels\n    type: boolean?\n  - id: no_idaq\n    type: boolean?\n  - id: no_default_filter\n    type: boolean?\n  - id: no_baq\n    type: boolean?\n  - id: no_mapping_quality\n    type: boolean?\n  - id: no_ext_base_alignment_quality\n    type: boolean?\n  - id: min_jq\n    type: int?\n  - id: min_alt_jq\n    type: int?\n  - id: min_alt_bq\n    type: int?\n\n   #### SnpEff build & ann:\n  - id: genome_reference\n    type: string\n  - id: udLength\n    type: int\n  - id: transcripts\n    type: File?\n  - id: strict\n    type: boolean?\n  - id: spliceSiteSize\n    type: int?\n  - id: spliceRegionIntronMin\n    type: int?\n  - id: spliceRegionIntronMax\n    type: int?\n  - id: spliceRegionExonSize\n    type: int?\n  - id: sequenceOntology\n    type: boolean?\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n  - id: onlyReg\n    type: boolean?\n  - id: onlyProtein\n    type: boolean?\n  - id: oicr\n    type: boolean?\n  - id: noStats\n    type: boolean?\n  - id: noShiftHgvs\n    type: boolean?\n  - id: noNextProt\n    type: boolean?\n  - id: noMotif\n    type: boolean?\n  - id: bankfile\n    type: File?\n  - id: cancer\n    type: boolean?\n  - id: cancerSamples\n    type: File?\n  - id: canon\n    type: boolean?\n  - id: classic\n    type: boolean?\n  - id: csvFile\n    type: boolean?\n  - id: filterInterval\n    type: 'File[]?'\n  - id: hgvs\n    type: boolean?\n  - id: formatEff\n    type: boolean?\n  - id: html_report_1\n    type: boolean?\n  - id: importGenome\n    type: boolean\n  - id: interval\n    type: 'File[]?'\n  - id: lof\n    type: boolean?\n  - id: motif\n    type: boolean?\n  - id: nextProt\n    type: boolean?\n  - id: no_downstream\n    type: boolean?\n  - id: no_EffectType\n    type: boolean?\n  - id: no_intergenic\n    type: boolean?\n  - id: no_intron\n    type: boolean?\n  - id: no_upstream\n    type: boolean?\n  - id: no_utr\n    type: boolean?\n  - id: noGenome\n    type: boolean?\n  - id: noHgvs\n    type: boolean?\n  - id: noLof\n    type: boolean?\n  - id: geneId\n    type: boolean?\n\n   #### SNPSIFT\n  - id: separator\n    type: string?\n  - id: empty_text\n    type: string?\n  - id: extractFields\n    type: 'string[]?'\n\n  - id: IndexName\n    type: string\n\noutputs:\n  - id: multiqc_fastp\n    type: File\n    outputSource:\n      - multiqc_fastp/multiqc_zip\n  - id: stats_bam\n    type: File[]\n    outputSource:\n      - samtools_stats/stats\n  - id: multiqc_markdups\n    type: File\n    outputSource:\n      - multiqc_markdups/multiqc_zip\n  - id: multiqc_samtoolsstats\n    outputSource:\n       - multiqc_stats/multiqc_zip\n    type: File\n#  - id: log\n#    outputSource:\n#      - picard__mark_duplicates/log\n#    type: File[]\n#  - id: alignments\n#    outputSource:\n#      - picard__mark_duplicates/alignments\n#    type: File[]\n#  - id: genes\n#    outputSource:\n#      - snpeff_build_ann/genes\n#    type: File[]\n  - id: statsFile_snpeff\n    outputSource:\n      - snpeff_build_ann/statsFile\n    type: File[]\n  - id: out_snpsift\n    outputSource:\n      - snpsift_extract/out\n    type: File[]\nsteps:\n  - id: fastp\n    scatter: [fastq1, fastq2]\n    scatterMethod: dotproduct\n    in:\n      - id: base_correction\n        source: base_correction\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: reads_forward\n      - id: fastq2\n        source: reads_reverse\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n      - id: qualified_phred_quality\n        source: qualified_phred_quality\n      - id: threads\n        source: threads\n      - id: unqualified_phred_quality\n        source: unqualified_phred_quality\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n      - id: out_fastq2\n    run: ./tools/fastp.cwl\n\n  - id: multiqc_fastp\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_fast'\n      - id: qc_files_array\n        source: fastp/json_report\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: samtools_view_filter\n    scatter: bam\n    in:\n      - id: bam\n        source: bwa_mem/reads_stdout\n      - id: count\n        source: count\n      - id: exclude_unmapped\n        source: exclude_unmapped\n    out:\n      - id: bam_filtered\n    run: ./tools/samtools_view_filter.cwl\n\n  - id: picard_sortsam\n    scatter: alignments\n    in: \n      - id: alignments\n        source: samtools_view_filter/bam_filtered\n      - id: sort_order\n        source: sort_order\n      - id: validation_stringency\n        source: validation_stringency\n    out:\n      - id: sorted_alignments\n    run: ./tools/picard_SortSam.cwl\n\n  - id: picard__mark_duplicates\n    scatter: alignments\n    in:\n      - id: alignments\n        source: picard_sortsam/sorted_alignments\n      - id: alignments_are_sorted\n        source: alignments_are_sorted\n      - id: barcode_tag\n        source: barcode_tag\n      - id: comment\n        source:\n          - comment\n      - id: duplicate_scoring_strategy\n        source: duplicate_scoring_strategy\n      - id: optical_duplicate_pixel_distance\n        source: optical_duplicate_pixel_distance\n      - id: remove_duplicates\n        source: remove_duplicates\n      - id: validation_stringency\n        source: validation_stringency_1\n    out:\n      - id: alignments\n      - id: log\n      - id: metrics\n    run: ./tools/picard_MarkDuplicates.cwl\n\n  - id: multiqc_markdups\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_markdups'\n      - id: qc_files_array\n        source: picard__mark_duplicates/metrics\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: lofreq_viterbi\n    scatter: reads\n    in:\n      - id: defqual\n        source: defqual\n      - id: keepflags\n        source: keepflags\n      - id: reads\n        source: picard__mark_duplicates/alignments\n      - id: reference\n        source: reference_in\n    out:\n      - id: realigned\n    run: ./tools/lofreq_viterbi.cwl\n\n  - id: samtools_sort\n    scatter: bam_unsorted\n    in:\n      - id: bam_unsorted\n        source: lofreq_viterbi/realigned\n    out:\n      - id: bam_sorted\n    run: ./tools/samtools_sort.cwl\n\n  - id: samtools_faidx\n    in:\n      - id: sequences\n        source: reference_in\n    out:\n      - id: sequences_index\n      - id: sequences_with_index\n    run: ./tools/samtools_faidx.cwl\n    \n  - id: samtool_index\n    scatter: bam_sorted\n    in:\n      - id: bam_sorted\n        source: samtools_sort/bam_sorted\n    out:\n      - id: bam_sorted_indexed\n    run: ./tools/samtools_index.cwl\n\n  - id: bwa_index_cwl\n    in:\n      - id: InputFile\n        source: reference_in\n      - id: IndexName\n        source: IndexName\n    out:\n      - id: index\n    run: ./tools/bwa-index.cwl\n    \n  - id: get_secondaryfiles\n    in:\n      - id: bwa_index\n        source: bwa_index_cwl/index\n      - id: sequence\n        source: samtools_faidx/sequences_with_index\n    out:\n      - id: sequences_with_index\n    run: ./tools/get_secondaryfiles.cwl\n  - id: get_tab\n    scatter: [out_fastq1, out_fastq2]\n    scatterMethod: dotproduct\n    in: \n      - id: out_fastq1\n        source: fastp/out_fastq1\n      - id: out_fastq2\n        source: fastp/out_fastq2\n    out:\n      - id: tab\n    run: ./tools/mergetab.cwl\n  - id: bwa_mem\n    scatter: InputFile\n    in:\n      Index:\n        source: get_secondaryfiles/sequences_with_index\n      InputFile:\n        source: get_tab/tab\n# [fastp/out_fastq1, fastp/out_fastq2]\n#        linkMerge: merge_nested #flattened\n    out:\n      - id: reads_stdout\n    run: ./tools/bwa-mem.cwl\n  - id: samtools_stats\n    scatter: input_file\n    in:\n      input_file:\n        source: samtools_view_filter/bam_filtered\n    out:\n      - id: stats\n    run: ./tools/samtools_stats.cwl\n  - id: multiqc_stats\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_stats'\n      - id: qc_files_array\n        source: samtools_stats/stats\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl \n\n  - id: lofreq_call\n    scatter: [reads_align, reads_index]\n    scatterMethod: dotproduct\n    in:\n      - id: bed\n        source: bed\n      - id: bonferroni\n        source: bonferroni\n      - id: call_indels\n        source: call_indels\n      - id: def_alt_bq\n        source: def_alt_bq\n      - id: def_alt_jq\n        source: def_alt_jq\n      - id: del_baq\n        source: del_baq\n      - id: enable_source_qual\n        source: enable_source_qual\n      - id: ignore_vcf\n        source:\n          - ignore_vcf\n      - id: illumina_1_3\n        source: illumina_1_3\n      - id: max_depth_cov\n        source: max_depth_cov\n      - id: max_mapping_quality\n        source: max_mapping_quality\n      - id: min_alt_bq\n        source: min_alt_bq\n      - id: min_alt_jq\n        source: min_alt_jq\n      - id: min_bq\n        source: min_bq\n      - id: min_cov\n        source: min_cov\n      - id: min_jq\n        source: min_jq\n      - id: min_mq\n        source: min_mq\n      - id: no_baq\n        source: no_baq\n      - id: no_default_filter\n        source: no_default_filter\n      - id: no_ext_base_alignment_quality\n        source: no_ext_base_alignment_quality\n      - id: no_idaq\n        source: no_idaq\n      - id: no_mapping_quality\n        source: no_mapping_quality\n      - id: only_indels\n        source: only_indels\n      - id: pvalue_cutoff\n        source: pvalue_cutoff\n      - id: reads_align\n        source: samtools_sort/bam_sorted\n      - id: reads_index\n        source: samtool_index/bam_sorted_indexed\n      - id: reference_fasta\n        source: samtools_faidx/sequences_with_index\n      - id: reference_index\n        source: samtools_faidx/sequences_index\n      - id: region\n        source: region\n      - id: replace_non_match\n        source: replace_non_match\n      - id: threads\n        source: threads_lf_call\n      - id: use_orphan\n        source: use_orphan\n    out:\n      - id: vcf\n    run: ./tools/lofreq_call.cwl\n    label: LoFreq Call Variants\n\n  - id: snpeff_build_ann\n    scatter: sequence\n    in:\n      - id: importGenome\n        source: importGenome\n      - id: genome_reference\n        source: genome_reference\n      - id: bankfile\n        source: bankfile\n      - id: sequence\n        source: lofreq_call/vcf\n      - id: outputFormat\n        source: outputFormat\n      - id: udLength\n        source: udLength\n      - id: html_report\n        source: html_report_1\n      - id: csvFile\n        source: csvFile\n      - id: noStats\n        source: noStats\n      - id: formatEff\n        source: formatEff\n      - id: classic\n        source: classic\n      - id: sequenceOntology\n        source: sequenceOntology\n      - id: hgvs\n        source: hgvs\n      - id: noShiftHgvs\n        source: noShiftHgvs\n      - id: noHgvs\n        source: noHgvs\n      - id: geneId\n        source: geneId\n      - id: lof\n        source: lof\n      - id: noLof\n        source: noLof\n      - id: cancer\n        source: cancer\n      - id: cancerSamples\n        source: cancerSamples\n      - id: oicr\n        source: oicr\n      - id: canon\n        source: canon\n      - id: motif\n        source: motif\n      - id: noMotif\n        source: noMotif\n      - id: noNextProt\n        source: noNextProt\n      - id: nextProt\n        source: nextProt\n      - id: noGenome\n        source: noGenome\n      - id: onlyProtein\n        source: onlyProtein\n      - id: transcripts\n        source: transcripts\n      - id: interval\n        source:\n          - interval\n      - id: spliceRegionExonSize\n        source: spliceRegionExonSize\n      - id: spliceRegionIntronMax\n        source: spliceRegionIntronMax\n      - id: spliceRegionIntronMin\n        source: spliceRegionIntronMin\n      - id: spliceSiteSize\n        source: spliceSiteSize\n      - id: onlyReg\n        source: onlyReg\n      - id: strict\n        source: strict\n      - id: filterInterval\n        source:\n          - filterInterval\n      - id: no_downstream\n        source: no_downstream\n      - id: no_intergenic\n        source: no_intergenic\n      - id: no_intron\n        source: no_intron\n      - id: no_upstream\n        source: no_upstream\n      - id: no_utr\n        source: no_utr\n      - id: no_EffectType\n        source: no_EffectType\n    out:\n      - id: snpeff_output\n      - id: statsFile\n      - id: csvFile\n      - id: genes\n    run: ./tools/snpEff_build_ann.cwl\n\n  - id: snpsift_extract\n    scatter: input_vcf\n    in:\n      - id: input_vcf\n        source: snpeff_build_ann/snpeff_output\n      - id: extractFields\n        source:\n          - extractFields\n      - id: separator\n        source: separator\n      - id: empty_text\n        source: empty_text\n    out:\n      - id: out\n    run: ./tools/snpSift_extract.cwl\n\nrequirements:\n  - class: ScatterFeatureRequirement\n  - class: SubworkflowFeatureRequirement\n  - class: MultipleInputFeatureRequirement\n  - class: StepInputExpressionRequirement\n  - class: InlineJavascriptRequirement\n\n$schemas:\n  - 'http://edamontology.org/EDAM_1.18.owl'\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "var_pe",
    "cwl_inputs": "[{'id': 'reads_reverse', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reads_forward', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reference_in', 'type': 'File'}, {'id': 'unqualified_phred_quality', 'type': 'int?'}, {'id': 'threads', 'type': 'int?'}, {'id': 'qualified_phred_quality', 'type': 'int?'}, {'id': 'min_length_required', 'type': 'int?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'base_correction', 'type': 'boolean?'}, {'id': 'sort_order', 'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}]}, {'id': 'validation_stringency', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'exclude_unmapped', 'type': 'boolean?'}, {'id': 'count', 'type': 'boolean'}, {'id': 'alignments_are_sorted', 'type': 'boolean'}, {'id': 'remove_duplicates', 'type': 'boolean'}, {'id': 'validation_stringency_1', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'comment', 'type': 'string[]?'}, {'id': 'duplicate_scoring_strategy', 'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}]}, {'id': 'optical_duplicate_pixel_distance', 'type': 'int?'}, {'id': 'barcode_tag', 'type': 'string?'}, {'id': 'keepflags', 'type': 'boolean?'}, {'id': 'defqual', 'type': 'int?'}, {'id': 'bq2_handling', 'type': ['null', {'type': 'enum', 'symbols': ['keep', 'dynamic', 'fixed']}]}, {'id': 'bed', 'type': 'File?'}, {'id': 'bonferroni', 'type': 'string?'}, {'id': 'call_indels', 'type': 'boolean?'}, {'id': 'def_alt_bq', 'type': 'int?'}, {'id': 'def_alt_jq', 'type': 'int?'}, {'id': 'del_baq', 'type': 'boolean?'}, {'id': 'enable_source_qual', 'type': 'boolean?'}, {'id': 'ignore_vcf', 'type': 'File[]?'}, {'id': 'illumina_1_3', 'type': 'boolean?'}, {'id': 'max_depth_cov', 'type': 'int?'}, {'id': 'max_mapping_quality', 'type': 'int?'}, {'id': 'min_bq', 'type': 'int?'}, {'id': 'min_cov', 'type': 'int?'}, {'id': 'min_mq', 'type': 'int?'}, {'id': 'use_orphan', 'type': 'boolean?'}, {'id': 'threads_lf_call', 'type': 'int?'}, {'id': 'replace_non_match', 'type': 'int?'}, {'id': 'region', 'type': 'string?'}, {'id': 'pvalue_cutoff', 'type': 'float?'}, {'id': 'only_indels', 'type': 'boolean?'}, {'id': 'no_idaq', 'type': 'boolean?'}, {'id': 'no_default_filter', 'type': 'boolean?'}, {'id': 'no_baq', 'type': 'boolean?'}, {'id': 'no_mapping_quality', 'type': 'boolean?'}, {'id': 'no_ext_base_alignment_quality', 'type': 'boolean?'}, {'id': 'min_jq', 'type': 'int?'}, {'id': 'min_alt_jq', 'type': 'int?'}, {'id': 'min_alt_bq', 'type': 'int?'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'udLength', 'type': 'int'}, {'id': 'transcripts', 'type': 'File?'}, {'id': 'strict', 'type': 'boolean?'}, {'id': 'spliceSiteSize', 'type': 'int?'}, {'id': 'spliceRegionIntronMin', 'type': 'int?'}, {'id': 'spliceRegionIntronMax', 'type': 'int?'}, {'id': 'spliceRegionExonSize', 'type': 'int?'}, {'id': 'sequenceOntology', 'type': 'boolean?'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn']}]}, {'id': 'onlyReg', 'type': 'boolean?'}, {'id': 'onlyProtein', 'type': 'boolean?'}, {'id': 'oicr', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'noShiftHgvs', 'type': 'boolean?'}, {'id': 'noNextProt', 'type': 'boolean?'}, {'id': 'noMotif', 'type': 'boolean?'}, {'id': 'bankfile', 'type': 'File?'}, {'id': 'cancer', 'type': 'boolean?'}, {'id': 'cancerSamples', 'type': 'File?'}, {'id': 'canon', 'type': 'boolean?'}, {'id': 'classic', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'filterInterval', 'type': 'File[]?'}, {'id': 'hgvs', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?'}, {'id': 'html_report_1', 'type': 'boolean?'}, {'id': 'importGenome', 'type': 'boolean'}, {'id': 'interval', 'type': 'File[]?'}, {'id': 'lof', 'type': 'boolean?'}, {'id': 'motif', 'type': 'boolean?'}, {'id': 'nextProt', 'type': 'boolean?'}, {'id': 'no_downstream', 'type': 'boolean?'}, {'id': 'no_EffectType', 'type': 'boolean?'}, {'id': 'no_intergenic', 'type': 'boolean?'}, {'id': 'no_intron', 'type': 'boolean?'}, {'id': 'no_upstream', 'type': 'boolean?'}, {'id': 'no_utr', 'type': 'boolean?'}, {'id': 'noGenome', 'type': 'boolean?'}, {'id': 'noHgvs', 'type': 'boolean?'}, {'id': 'noLof', 'type': 'boolean?'}, {'id': 'geneId', 'type': 'boolean?'}, {'id': 'separator', 'type': 'string?'}, {'id': 'empty_text', 'type': 'string?'}, {'id': 'extractFields', 'type': 'string[]?'}, {'id': 'IndexName', 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'multiqc_fastp', 'type': 'File', 'outputSource': ['multiqc_fastp/multiqc_zip']}, {'id': 'stats_bam', 'type': 'File[]', 'outputSource': ['samtools_stats/stats']}, {'id': 'multiqc_markdups', 'type': 'File', 'outputSource': ['multiqc_markdups/multiqc_zip']}, {'id': 'multiqc_samtoolsstats', 'outputSource': ['multiqc_stats/multiqc_zip'], 'type': 'File'}, {'id': 'statsFile_snpeff', 'outputSource': ['snpeff_build_ann/statsFile'], 'type': 'File[]'}, {'id': 'out_snpsift', 'outputSource': ['snpsift_extract/out'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "var-PE",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/variation_SE.cwl",
    "sha": "f46dede9819f524eccffa848948de3a554d8515b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/variation_SE.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: var\nlabel: var\n\ninputs:\n  # read(s):\n  - id: reads\n    type: File[]\n    format:\n      - edam:format_1930 # FASTA\n      - edam:format_1931 # FASTQ\n\n  # reference genome:\n  - id: reference_in\n    type: File\n\n  #### 1-  fastp options:\n  - id: unqualified_phred_quality\n    type: int?\n  - id: threads\n    type: int?\n  - id: qualified_phred_quality\n    type: int?\n  - id: min_length_required\n    type: int?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: base_correction\n    type: boolean?\n\n#### bowtie2_build options:\n  - id: bmax\n    type: int?\n  - id: bmaxdivn\n    type: int?\n  - id: bt2_index_base\n    type: string?\n  - id: c\n    type: boolean?\n  - id: dcv\n    type: int?\n  - id: f\n    type: boolean?\n  - id: ftabchars\n    type: int?\n  - id: justref\n    type: boolean?\n  - id: large_index\n    type: boolean?\n  - id: noauto\n    type: boolean?\n  - id: nodc\n    type: boolean?\n  - id: noref\n    type: boolean?\n  - id: offrate\n    type: int?\n  - id: packed\n    type: boolean?\n  - id: quiet\n    type: boolean?\n  - id: seed\n    type: int?\n  - id: threads_bowtie2\n    type: int?\n#### bowtie2_align options: (many others)\n  - id: end_to_end_very_sensitive\n    type: boolean?\n\n#### picard__sort_sam options:\n  - id: sort_order\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n  - id: validation_stringency\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n#### picard__mark_duplicates options:\n  - id: alignments_are_sorted\n    type: boolean\n  - id: remove_duplicates\n    type: boolean\n  - id: validation_stringency_1\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n  - id: comment\n    type: string[]?\n  - id: duplicate_scoring_strategy\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n  - id: read_name_regex\n    type: string?\n  - id: optical_duplicate_pixel_distance\n    type: int?\n  - id: barcode_tag\n    type: string?\n####lofreq_viterbi options:\n  - id: keepflags\n    type: boolean?\n  - id: defqual\n    type: int?\n  - id: bq2_handling\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - keep\n          - dynamic\n          - fixed\n        name: bq2_handling\n\n#### lofreq_cal_variants options:\n  - id: bed\n    type: File?\n  - id: bonferroni\n    type: string?\n  - id: call_indels\n    type: boolean?\n  - id: def_alt_bq\n    type: int?\n  - id: def_alt_jq\n    type: int?\n  - id: del_baq\n    type: boolean?\n  - id: enable_source_qual\n    type: boolean?\n  - id: ignore_vcf\n    type: 'File[]?'\n  - id: illumina_1_3\n    type: boolean?\n  - id: max_depth_cov\n    type: int?\n  - id: max_mapping_quality\n    type: int?\n  - id: min_bq\n    type: int?\n  - id: min_cov\n    type: int?\n  - id: min_mq\n    type: int?\n  - id: use_orphan\n    type: boolean?\n  - id: threads_lf_call\n    type: int?\n  - id: replace_non_match\n    type: int?\n  - id: region\n    type: string?\n  - id: pvalue_cutoff\n    type: float?\n  - id: only_indels\n    type: boolean?\n  - id: no_idaq\n    type: boolean?\n  - id: no_default_filter\n    type: boolean?\n  - id: no_baq\n    type: boolean?\n  - id: no_mapping_quality\n    type: boolean?\n  - id: no_ext_base_alignment_quality\n    type: boolean?\n  - id: min_jq\n    type: int?\n  - id: min_alt_jq\n    type: int?\n  - id: min_alt_bq\n    type: int?\n\n#### SnpEff buiild & ann:\n  - id: genome_reference\n    type: string\n  - id: udLength\n    type: int\n  - id: transcripts\n    type: File?\n  - id: strict\n    type: boolean?\n  - id: spliceSiteSize\n    type: int?\n  - id: spliceRegionIntronMin\n    type: int?\n  - id: spliceRegionIntronMax\n    type: int?\n  - id: spliceRegionExonSize\n    type: int?\n  - id: sequenceOntology\n    type: boolean?\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n        name: outputFormat\n  - id: onlyReg\n    type: boolean?\n  - id: onlyProtein\n    type: boolean?\n  - id: oicr\n    type: boolean?\n  - id: noStats\n    type: boolean?\n  - id: noShiftHgvs\n    type: boolean?\n  - id: noNextProt\n    type: boolean?\n  - id: noMotif\n    type: boolean?\n  - id: bankfile\n    type: File?\n  - id: cancer\n    type: boolean?\n  - id: cancerSamples\n    type: File?\n  - id: canon\n    type: boolean?\n  - id: classic\n    type: boolean?\n  - id: csvFile\n    type: boolean?\n  - id: filterInterval\n    type: 'File[]?'\n  - id: hgvs\n    type: boolean?\n  - id: formatEff\n    type: boolean?\n  - id: html_report_1\n    type: boolean?\n  - id: importGenome\n    type: boolean\n  - id: interval\n    type: 'File[]?'\n  - id: lof\n    type: boolean?\n  - id: motif\n    type: boolean?\n  - id: nextProt\n    type: boolean?\n  - id: no_downstream\n    type: boolean?\n  - id: no_EffectType\n    type: boolean?\n  - id: no_intergenic\n    type: boolean?\n  - id: no_intron\n    type: boolean?\n  - id: no_upstream\n    type: boolean?\n  - id: no_utr\n    type: boolean?\n  - id: noGenome\n    type: boolean?\n  - id: noHgvs\n    type: boolean?\n  - id: noLof\n    type: boolean?\n  - id: geneId\n    type: boolean?\n\n#### SNPSIFT\n  - id: separator\n    type: string?\n  - id: empty_text\n    type: string?\n  - id: extractFields\n    type: 'string[]?'\n\noutputs:\n#FASTP:\n#  - id: html_report\n#    outputSource:\n#      - fastp/html_report\n#    type: File[]\n  - id: multiqc_fastp\n    outputSource:\n      - multiqc_fastp/multiqc_zip\n#  - id: json_report\n#    outputSource:\n#      - fastp/json_report\n#    type: File[]\n#  - id: out_fastq1\n#    outputSource:\n#      - fastp/out_fastq1\n#    type: File[]\n\n#BOWTIE2_BUILD:\n#  - id: indices\n#    outputSource:\n#      - bowtie2_build/indices\n#    type: File\n\n#BOWTIE2_ALIGN:\n#  - id: output\n#    outputSource:\n#      - bowtie2_align/output\n#    type: File[]\n  - id: output_log\n    outputSource:\n      - bowtie2_align/output_log\n    type: File[]\n#picard_sortsam:\n#  - id: outFile\n#    outputSource:\n#      - picard__sort_sam/sorted_alignments\n#    type: File[]\n\n#picard_markduplicates\n  - id: metrics\n    outputSource:\n      - picard__mark_duplicates/metrics\n    type: File[]\n  - id: log\n    outputSource:\n      - picard__mark_duplicates/log\n    type: File[]\n  - id: alignments\n    outputSource:\n      - picard__mark_duplicates/alignments\n    type: File[]\n\n#lofreq_viterbi:\n#  - id: realigned\n#    outputSource:\n#      - lofreq_viterbi/realigned\n#    type: File[]\n#samtools_sort\n#  - id: bam_sorted\n#    outputSource:\n#      - samtools_sort/bam_sorted\n#    type: File[]\n#lofreq_call:\n#  - id: vcf\n#    outputSource:\n#      - lofreq_call/vcf\n#    type: File[]\n#SNPEFF:\n  - id: csvFile\n    outputSource:\n      - snpeff_build_ann/csvFile\n    type: File[]?\n  - id: genes\n    outputSource:\n      - snpeff_build_ann/genes\n    type: File[]?\n#  - id: snpeff_output\n#    outputSource:\n#      - snpeff_build_ann/snpeff_output\n#    type: File[]?\n  - id: statsFile\n    outputSource:\n      - snpeff_build_ann/statsFile\n    type: File[]?\n#SNPSIFT:\n  - id: out\n    outputSource:\n      - snpsift_extract/out\n    type: File[]\n\nsteps:\n  - id: fastp\n    scatter: fastq1\n    in:\n      - id: base_correction\n        source: base_correction\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: reads\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n      - id: qualified_phred_quality\n        source: qualified_phred_quality\n      - id: threads\n        source: threads\n      - id: unqualified_phred_quality\n        source: unqualified_phred_quality\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n    run: ./tools/fastp.cwl\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_fast'\n      - id: qc_files_array\n        source: fastp/json_report\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: bowtie2_build\n    in:\n      - id: bmax\n        source: bmax\n      - id: bmaxdivn\n        source: bmaxdivn\n      - id: bt2_index_base\n        source: bt2_index_base\n      - id: c\n        source: c\n      - id: dcv\n        source: dcv\n      - id: f\n        source: f\n      - id: ftabchars\n        source: ftabchars\n      - id: justref\n        source: justref\n      - id: large_index\n        source: large_index\n      - id: noauto\n        source: noauto\n      - id: nodc\n        source: nodc\n      - id: noref\n        source: noref\n      - id: offrate\n        source: offrate\n      - id: packed\n        source: packed\n      - id: quiet\n        source: quiet\n      - id: reference_in\n        source:\n          - reference_in\n      - id: seed\n        source: seed\n      - id: threads\n        source: threads_bowtie2\n    out:\n      - id: indices\n      - id: output_log\n    run: ./tools/bowtie2_build.cwl\n\n  - id: bowtie2_align\n    scatter: filelist\n    in:\n      - id: filelist\n        source: fastp/out_fastq1\n      - id: indices_file\n        source: bowtie2_build/indices\n      - id: end_to_end_very_sensitive\n        source: end_to_end_very_sensitive\n    out:\n      - id: output\n      - id: output_log\n    run: ./tools/bowtie2_align.cwl\n  - id: picard__sort_sam\n    scatter: alignments\n    in:\n      - id: alignments\n        source: bowtie2_align/output\n      - id: sort_order\n        source: sort_order\n      - id: validation_stringency\n        source: validation_stringency\n    out:\n      - id: sorted_alignments\n    run: ./tools/picard_SortSam.cwl\n\n  - id: picard__mark_duplicates\n    scatter: alignments\n    in:\n      - id: alignments_are_sorted\n        source: alignments_are_sorted\n      - id: alignments\n        source: picard__sort_sam/sorted_alignments\n      - id: barcode_tag\n        source: barcode_tag\n      - id: comment\n        source:\n          - comment\n      - id: duplicate_scoring_strategy\n        source: duplicate_scoring_strategy\n      - id: optical_duplicate_pixel_distance\n        source: optical_duplicate_pixel_distance\n      - id: remove_duplicates\n        source: remove_duplicates\n      - id: validation_stringency\n        source: validation_stringency_1\n    out:\n      - id: alignments\n      - id: log\n      - id: metrics\n    run: ./tools/picard_MarkDuplicates.cwl\n\n  - id: lofreq_viterbi\n    scatter: reads\n    in:\n      - id: bq2_handling\n        source: bq2_handling\n      - id: defqual\n        source: defqual\n      - id: keepflags\n        source: keepflags\n      - id: reads\n        source: picard__mark_duplicates/alignments\n      - id: reference\n        source: reference_in\n    out:\n      - id: realigned\n    run: ./tools/lofreq_viterbi.cwl\n  - id: samtools_sort\n    scatter: bam_unsorted\n    in:\n      - id: bam_unsorted\n        source: lofreq_viterbi/realigned\n    out:\n      - id: bam_sorted\n    run: ./tools/samtools_sort.cwl\n\n  - id: samtools_faidx\n    in:\n      - id: sequences\n        source: reference_in\n    out:\n      - id: sequences_index\n      - id: sequences_with_index\n    run: ./tools/samtools_faidx.cwl\n\n  - id: samtool_index\n    scatter: bam_sorted\n    in:\n      - id: bam_sorted\n        source: samtools_sort/bam_sorted\n    out:\n      - id: bam_sorted_indexed\n    run: ./tools/samtools_index.cwl\n\n\n  - id: lofreq_call\n    scatter: [reads_align, reads_index]\n    scatterMethod: \"dotproduct\"\n    in:\n      - id: threads\n        source: threads_lf_call\n      - id: reference_index\n        source: samtools_faidx/sequences_index\n      - id: reference_fasta\n        source: samtools_faidx/sequences_with_index\n      - id: call_indels\n        source: call_indels\n      - id: only_indels\n        source: only_indels\n      - id: bed\n        source: bed\n      - id: region\n        source: region\n      - id: min_bq\n        source: min_bq\n      - id: min_alt_bq\n        source: min_alt_bq\n      - id: def_alt_bq\n        source: def_alt_bq\n      - id: min_jq\n        source: min_jq\n      - id: min_alt_jq\n        source: min_alt_jq\n      - id: def_alt_jq\n        source: def_alt_jq\n      - id: no_baq\n        source: no_baq\n      - id: no_idaq\n        source: no_idaq\n      - id: del_baq\n        source: del_baq\n      - id: no_ext_base_alignment_quality\n        source: no_ext_base_alignment_quality\n      - id: min_mq\n        source: min_mq\n      - id: max_mapping_quality\n        source: max_mapping_quality\n      - id: no_mapping_quality\n        source: no_mapping_quality\n      - id: enable_source_qual\n        source: enable_source_qual\n      - id: ignore_vcf\n        source:\n          - ignore_vcf\n      - id: replace_non_match\n        source: replace_non_match\n      - id: pvalue_cutoff\n        source: pvalue_cutoff\n      - id: bonferroni\n        source: bonferroni\n      - id: min_cov\n        source: min_cov\n      - id: max_depth_cov\n        source: max_depth_cov\n      - id: illumina_1_3\n        source: illumina_1_3\n      - id: use_orphan\n        source: use_orphan\n      - id: no_default_filter\n        source: no_default_filter\n      - id: reads_align\n        source: samtools_sort/bam_sorted\n      - id: reads_index\n        source: samtool_index/bam_sorted_indexed\n    out:\n      - id: vcf\n    run: ./tools/lofreq_call.cwl\n    label: LoFreq Call Variants\n\n  - id: snpeff_build_ann\n    scatter: sequence\n    in: \n      - id: importGenome\n        source: importGenome\n      - id: genome_reference\n        source: genome_reference\n      - id: bankfile\n        source: bankfile\n      - id: sequence\n        source: lofreq_call/vcf\n      - id: outputFormat\n        source: outputFormat\n      - id: udLength\n        source: udLength\n      - id: html_report\n        source: html_report_1\n      - id: csvFile\n        source: csvFile\n      - id: noStats\n        source: noStats\n      - id: formatEff\n        source: formatEff\n      - id: classic\n        source: classic\n      - id: sequenceOntology\n        source: sequenceOntology\n      - id: hgvs\n        source: hgvs\n      - id: noShiftHgvs\n        source: noShiftHgvs\n      - id: noHgvs\n        source: noHgvs\n      - id: geneId\n        source: geneId\n      - id: lof\n        source: lof\n      - id: noLof\n        source: noLof\n      - id: cancer\n        source: cancer\n      - id: cancerSamples\n        source: cancerSamples\n      - id: oicr\n        source: oicr\n      - id: canon\n        source: canon\n      - id: motif\n        source: motif\n      - id: noMotif\n        source: noMotif\n      - id: noNextProt\n        source: noNextProt\n      - id: nextProt\n        source: nextProt\n      - id: noGenome\n        source: noGenome\n      - id: onlyProtein\n        source: onlyProtein\n      - id: transcripts\n        source: transcripts\n      - id: interval\n        source:\n          - interval\n      - id: spliceRegionExonSize\n        source: spliceRegionExonSize\n      - id: spliceRegionIntronMax\n        source: spliceRegionIntronMax\n      - id: spliceRegionIntronMin\n        source: spliceRegionIntronMin\n      - id: spliceSiteSize\n        source: spliceSiteSize\n      - id: onlyReg\n        source: onlyReg\n      - id: strict\n        source: strict\n      - id: filterInterval\n        source:\n          - filterInterval\n      - id: no_downstream\n        source: no_downstream\n      - id: no_intergenic\n        source: no_intergenic\n      - id: no_intron\n        source: no_intron\n      - id: no_upstream\n        source: no_upstream\n      - id: no_utr\n        source: no_utr\n      - id: no_EffectType\n        source: no_EffectType\n    out:\n      - id: snpeff_output\n      - id: statsFile\n      - id: csvFile\n      - id: genes\n    run: ./tools/snpEff_build_ann.cwl\n\n  - id: snpsift_extract\n    scatter: input_vcf\n    in:\n      - id: input_vcf\n        source: snpeff_build_ann/snpeff_output\n      - id: extractFields\n        source:\n          - extractFields\n      - id: separator\n        source: separator\n      - id: empty_text\n        source: empty_text\n    out:\n      - id: out\n    run: ./tools/snpSift_extract.cwl\n\nrequirements:\n  ScatterFeatureRequirement: {}\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "Workflow",
    "cwl_id": "var",
    "cwl_inputs": "[{'id': 'reads', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reference_in', 'type': 'File'}, {'id': 'unqualified_phred_quality', 'type': 'int?'}, {'id': 'threads', 'type': 'int?'}, {'id': 'qualified_phred_quality', 'type': 'int?'}, {'id': 'min_length_required', 'type': 'int?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'base_correction', 'type': 'boolean?'}, {'id': 'bmax', 'type': 'int?'}, {'id': 'bmaxdivn', 'type': 'int?'}, {'id': 'bt2_index_base', 'type': 'string?'}, {'id': 'c', 'type': 'boolean?'}, {'id': 'dcv', 'type': 'int?'}, {'id': 'f', 'type': 'boolean?'}, {'id': 'ftabchars', 'type': 'int?'}, {'id': 'justref', 'type': 'boolean?'}, {'id': 'large_index', 'type': 'boolean?'}, {'id': 'noauto', 'type': 'boolean?'}, {'id': 'nodc', 'type': 'boolean?'}, {'id': 'noref', 'type': 'boolean?'}, {'id': 'offrate', 'type': 'int?'}, {'id': 'packed', 'type': 'boolean?'}, {'id': 'quiet', 'type': 'boolean?'}, {'id': 'seed', 'type': 'int?'}, {'id': 'threads_bowtie2', 'type': 'int?'}, {'id': 'end_to_end_very_sensitive', 'type': 'boolean?'}, {'id': 'sort_order', 'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}]}, {'id': 'validation_stringency', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'alignments_are_sorted', 'type': 'boolean'}, {'id': 'remove_duplicates', 'type': 'boolean'}, {'id': 'validation_stringency_1', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'comment', 'type': 'string[]?'}, {'id': 'duplicate_scoring_strategy', 'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}]}, {'id': 'read_name_regex', 'type': 'string?'}, {'id': 'optical_duplicate_pixel_distance', 'type': 'int?'}, {'id': 'barcode_tag', 'type': 'string?'}, {'id': 'keepflags', 'type': 'boolean?'}, {'id': 'defqual', 'type': 'int?'}, {'id': 'bq2_handling', 'type': ['null', {'type': 'enum', 'symbols': ['keep', 'dynamic', 'fixed'], 'name': 'bq2_handling'}]}, {'id': 'bed', 'type': 'File?'}, {'id': 'bonferroni', 'type': 'string?'}, {'id': 'call_indels', 'type': 'boolean?'}, {'id': 'def_alt_bq', 'type': 'int?'}, {'id': 'def_alt_jq', 'type': 'int?'}, {'id': 'del_baq', 'type': 'boolean?'}, {'id': 'enable_source_qual', 'type': 'boolean?'}, {'id': 'ignore_vcf', 'type': 'File[]?'}, {'id': 'illumina_1_3', 'type': 'boolean?'}, {'id': 'max_depth_cov', 'type': 'int?'}, {'id': 'max_mapping_quality', 'type': 'int?'}, {'id': 'min_bq', 'type': 'int?'}, {'id': 'min_cov', 'type': 'int?'}, {'id': 'min_mq', 'type': 'int?'}, {'id': 'use_orphan', 'type': 'boolean?'}, {'id': 'threads_lf_call', 'type': 'int?'}, {'id': 'replace_non_match', 'type': 'int?'}, {'id': 'region', 'type': 'string?'}, {'id': 'pvalue_cutoff', 'type': 'float?'}, {'id': 'only_indels', 'type': 'boolean?'}, {'id': 'no_idaq', 'type': 'boolean?'}, {'id': 'no_default_filter', 'type': 'boolean?'}, {'id': 'no_baq', 'type': 'boolean?'}, {'id': 'no_mapping_quality', 'type': 'boolean?'}, {'id': 'no_ext_base_alignment_quality', 'type': 'boolean?'}, {'id': 'min_jq', 'type': 'int?'}, {'id': 'min_alt_jq', 'type': 'int?'}, {'id': 'min_alt_bq', 'type': 'int?'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'udLength', 'type': 'int'}, {'id': 'transcripts', 'type': 'File?'}, {'id': 'strict', 'type': 'boolean?'}, {'id': 'spliceSiteSize', 'type': 'int?'}, {'id': 'spliceRegionIntronMin', 'type': 'int?'}, {'id': 'spliceRegionIntronMax', 'type': 'int?'}, {'id': 'spliceRegionExonSize', 'type': 'int?'}, {'id': 'sequenceOntology', 'type': 'boolean?'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn'], 'name': 'outputFormat'}]}, {'id': 'onlyReg', 'type': 'boolean?'}, {'id': 'onlyProtein', 'type': 'boolean?'}, {'id': 'oicr', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'noShiftHgvs', 'type': 'boolean?'}, {'id': 'noNextProt', 'type': 'boolean?'}, {'id': 'noMotif', 'type': 'boolean?'}, {'id': 'bankfile', 'type': 'File?'}, {'id': 'cancer', 'type': 'boolean?'}, {'id': 'cancerSamples', 'type': 'File?'}, {'id': 'canon', 'type': 'boolean?'}, {'id': 'classic', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'filterInterval', 'type': 'File[]?'}, {'id': 'hgvs', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?'}, {'id': 'html_report_1', 'type': 'boolean?'}, {'id': 'importGenome', 'type': 'boolean'}, {'id': 'interval', 'type': 'File[]?'}, {'id': 'lof', 'type': 'boolean?'}, {'id': 'motif', 'type': 'boolean?'}, {'id': 'nextProt', 'type': 'boolean?'}, {'id': 'no_downstream', 'type': 'boolean?'}, {'id': 'no_EffectType', 'type': 'boolean?'}, {'id': 'no_intergenic', 'type': 'boolean?'}, {'id': 'no_intron', 'type': 'boolean?'}, {'id': 'no_upstream', 'type': 'boolean?'}, {'id': 'no_utr', 'type': 'boolean?'}, {'id': 'noGenome', 'type': 'boolean?'}, {'id': 'noHgvs', 'type': 'boolean?'}, {'id': 'noLof', 'type': 'boolean?'}, {'id': 'geneId', 'type': 'boolean?'}, {'id': 'separator', 'type': 'string?'}, {'id': 'empty_text', 'type': 'string?'}, {'id': 'extractFields', 'type': 'string[]?'}]",
    "cwl_outputs": "[{'id': 'multiqc_fastp', 'outputSource': ['multiqc_fastp/multiqc_zip']}, {'id': 'output_log', 'outputSource': ['bowtie2_align/output_log'], 'type': 'File[]'}, {'id': 'metrics', 'outputSource': ['picard__mark_duplicates/metrics'], 'type': 'File[]'}, {'id': 'log', 'outputSource': ['picard__mark_duplicates/log'], 'type': 'File[]'}, {'id': 'alignments', 'outputSource': ['picard__mark_duplicates/alignments'], 'type': 'File[]'}, {'id': 'csvFile', 'outputSource': ['snpeff_build_ann/csvFile'], 'type': 'File[]?'}, {'id': 'genes', 'outputSource': ['snpeff_build_ann/genes'], 'type': 'File[]?'}, {'id': 'statsFile', 'outputSource': ['snpeff_build_ann/statsFile'], 'type': 'File[]?'}, {'id': 'out', 'outputSource': ['snpsift_extract/out'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "var",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/spades/spades.cwl",
    "sha": "503cfe9639963ebf271f37b31d28a4a5c7b53083",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/spades/spades.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: spades\nbaseCommand:\n  - bash\n#  - cat\ninputs:\n\n##############\n\n \n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n\n\n\n      \noutputs:\n\n  - id: out_contig_stats\n    type: File\n    outputBinding:\n      glob: out_contig_stats.*\n    doc: \"contig stats, default column_names: name,length,coverage\"\n\n  - id: out_scaffold_stats\n    type: File\n    outputBinding:\n      glob: out_scaffold_stats.*\n    doc: \"scaffold stats, default column_names: name,length,coverage\"\n\n  - id: out_contigs\n    type: File\n    outputBinding:\n      glob: contigs.fasta\n    doc: \"contigs (fasta sequence)\"\n\n  - id: out_scaffolds\n    type: File\n    outputBinding:\n      glob: scaffolds.fasta\n    doc: \"scaffolds (fasta sequence)\"\n\n  - id: all_script\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.sh\"  \n    doc: \"generated script to run spades. for learning purpose\" \n\n  - id: all_log\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.log\"  \n    doc: \"spades output log and warnings\" \n\n\n\n#  - id: out_log\n#    type: File\n#    outputBinding:\n#      glob: spades.log\n#    doc: \"spades output log\"\n\n\n  - id: assembly_graph\n    type: File\n    outputBinding:\n      glob: assembly_graph.fastg\n    doc: \"assembly graph\" \n\n \n  - id: assembly_graph_with_scaffolds\n    type: File\n    outputBinding:\n      glob: assembly_graph_with_scaffolds.gfa\n    doc: \"assembly graph with scaffolds\" \n\n\n############available ouput  files:\n#assembly_graph_with_scaffolds.gfa\n#assembly_graph.fastg\n#warnings.log\n#scaffolds.paths\n#contigs.paths\n#spades_wrapper.sh\n#before_rr.fasta\n#contigs.fasta\n#dataset.info\n#input_dataset.yaml\n#out_contig_stats.tab\n#out_scaffold_stats.tab\n#params.txt\n#run_spades.sh\n#scaffolds.fasta\n#write_tsv.py\n \n\n      \n      \narguments:\n  - spades_wrapper.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n####################\n      - entryname: write_tsv.py\n        entry: |\n               #######input file here\n               #!/usr/bin/env python\n               import sys,re\n               search_str = r'^>(NODE|\\S+)_(\\d+)(?:_|\\s)length_(\\d+)_cov_(\\d+\\.*\\d*).*\\$'\n               replace_str = r'\\1_\\2\\t\\3\\t\\4'\n               cmd = re.compile(search_str)\n               sys.stdout.write('#name\\tlength\\tcoverage\\n')\n               for i,line in enumerate(sys.stdin):\n                  if cmd.match(line):\n                     sys.stdout.write(cmd.sub(replace_str,line))\n\n####################\n      - entryname: spades_wrapper.sh\n        entry: |\n               ####################spades launcher\n               #!/bin/bash\n               ## An example command looks like:\n               ## spades.py -k 21,33,55,77,99,127 --careful -1 Y.fastq.gz -2 X.fastq.gz -t 24 -o output \n               read -d '' MEMORY_GB << EOF\n               ${ \n                //compute memory limits\n                var mem=\"250\"\n                if(runtime.ram){\n                  var bt=runtime.ram * 1048576 //mebibytes to bytes               \n                  bt=bt*0.000000001 //bytes to Gigabytes \n                  mem=parseInt(bt)\n                }\n                return \"-\"+mem\n               }\n               EOF\n               #echo \"MEMORY_GB limit: \\$MEMORY_GB\"\n               read -d '' CORES << EOF\n               ${ \n                //compute core / slot\n                var cores=\"16\" \n                if(runtime.cores){\n                  cores=runtime.cores\n                }\n                return  cores\n               }\n               EOF\n               #echo \"CORES : \\$CORES\"\n               read -d '' SPADES_OPT << EOF\n               ${   \n                 var opt=\"\"\n                   if (inputs.sc==true){\n                    opt+=\" --sc \"\n                   }\n                   if (inputs.onlyassembler==true){\n                    opt+=\" --only-assembler \"\n                   }\n                   if (inputs.careful==true){\n                    opt+=\" --careful \"\n                   }\n                 return opt  \n               }\n               EOF\n\n\n               read -d '' CMD_BASE << EOF\n               spades.py -o . --disable-gzip-output  \n                 \\$SPADES_OPT \n                -t \\$CORES -m \\$MEMORY_GB\n               ${   \n                 var opt=\"\"\n                   if (inputs.auto_kmer_choice==false){\n                    opt+=\" -k \"+inputs.kmers \n                   }\n                 return opt  \n               }\n               ${\n                 var opt=\"\"\n                 if (inputs.cov_state==null || inputs.cov_state == \"auto\"){\n                      opt+=\" --cov-cutoff 'auto' \"\n                  }\n                 else if (inputs.cov_state == \"value\"){\n                      opt+=\" --cov-cutoff '\"+inputs.cov_cutoff+\"' \"\n                  }\n                 if (inputs.iontorrent==true ){\n                      opt+=\" --iontorrent \"\n                 } \n                 return opt  \n               }\n               EOF\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' CMD_READ1 << EOF\n               ${\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n                      if (lmeta.lib_type !=null && lmeta.lib_type == \"paired_end\"){\n                           prefix = 'pe'\n                       } \n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"mate_paired\"){\n                           prefix = 'mp'\n                       }\n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"nxmate_paired\"){\n                           prefix = 'nxmate'\n                       }                       \n                      else {\n                           prefix = 'hqmp'\n                       }\n                      var idx=lmeta.lib_index\n                      lib_prefix[idx]=prefix\n                      opt+=\" --\"+prefix+idx+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n\n               #########################>DEBUG\n\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' ZZDEBUG << EOF\n               ${\n               //var opt=\"inputs.libraries_metadata.length:\"+inputs.libraries_metadata.length+\" \"              \n               //var str = JSON.stringify(inputs.libraries_metadata)\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   opt+=\" not null \"\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n \n                      opt+=\" !!-AA-\"+lmeta.lib_index+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n               #########################<DEBUG\n\n\n\n\n\n\n\n\n\n\n               read -d '' CMD_READ2 << EOF\n               ${\n                 var opt=\"\"\n                 if (inputs.pacbio_reads!=null){\n                   for(var i=0; i<inputs.pacbio_reads.length;i++){\n                      var read=inputs.pacbio_reads[i]\n                      opt+=\" --pacbio fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.nanopore_reads!=null){\n                   for(var i=0; i<inputs.nanopore_reads.length;i++){\n                      var read=inputs.nanopore_reads[i]\n                      opt+=\" --nanopore fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.sanger_reads!=null){\n                   for(var i=0; i<inputs.sanger_reads.length;i++){\n                      var read=inputs.sanger_reads[i]\n                      opt+=\" --sanger fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.trusted_contigs!=null){\n                   for(var i=0; i<inputs.trusted_contigs.length;i++){\n                      var read=inputs.trusted_contigs[i]\n                      opt+=\" --trusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.untrusted_contigs!=null){\n                   for(var i=0; i<inputs.untrusted_contigs.length;i++){\n                      var read=inputs.untrusted_contigs[i]\n                      opt+=\" --untrusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 return opt  \n               }\n               EOF\n               ##########################################\n               read -d '' CMD_POST << EOF\n                 && python write_tsv.py < contigs.fasta > out_contig_stats.tab\n                 && python write_tsv.py < scaffolds.fasta > out_scaffold_stats.tab\n               EOF\n               ##########################################   \n               # echo \"CMD_BASE : \\$CMD_BASE\"  > zz.txt   \\\\\n               #        && echo \"CMD_READ1 : \\$CMD_READ1\"  >> zz.txt   \\\\\n               #        && echo \"CMD_READ2 : \\$CMD_READ2\"  >> zz.txt   \\\\\n               #        && echo \"CMD_POST : \\$CMD_POST\"   >> zz.txt\n               COMMAND=\"\\$CMD_BASE \\$CMD_READ1 \\$CMD_READ2 \\$CMD_POST\"\n               COMMAND=\\$(echo $COMMAND|tr -d '\\\\n')\n               echo \"\\$COMMAND\"  > run_spades.sh\n               bash  ./run_spades.sh\n\n \n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  example workflow for js wrapper generation\n  see  https://github.com/rrwick/Unicycler\n  outputs : all genretated files\n\n\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "spades",
    "cwl_inputs": "[{'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contig_stats', 'type': 'File', 'outputBinding': {'glob': 'out_contig_stats.*'}, 'doc': 'contig stats, default column_names: name,length,coverage'}, {'id': 'out_scaffold_stats', 'type': 'File', 'outputBinding': {'glob': 'out_scaffold_stats.*'}, 'doc': 'scaffold stats, default column_names: name,length,coverage'}, {'id': 'out_contigs', 'type': 'File', 'outputBinding': {'glob': 'contigs.fasta'}, 'doc': 'contigs (fasta sequence)'}, {'id': 'out_scaffolds', 'type': 'File', 'outputBinding': {'glob': 'scaffolds.fasta'}, 'doc': 'scaffolds (fasta sequence)'}, {'id': 'all_script', 'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.sh'}, 'doc': 'generated script to run spades. for learning purpose'}, {'id': 'all_log', 'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.log'}, 'doc': 'spades output log and warnings'}, {'id': 'assembly_graph', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph.fastg'}, 'doc': 'assembly graph'}, {'id': 'assembly_graph_with_scaffolds', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph_with_scaffolds.gfa'}, 'doc': 'assembly graph with scaffolds'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['spades_wrapper.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "example workflow for js wrapper generation\nsee  https://github.com/rrwick/Unicycler\noutputs : all genretated files\n\n\n  \n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/spades/spades_assembly_wf.cwl",
    "sha": "e5b15b5b1c8d84ea3c891776c173b350315f02ba",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/spades/spades_assembly_wf.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: spaces_assembly\nlabel: spaces_assembly\n\n\n\ninputs:\n\n##############\n\n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n \n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n \n\noutputs:\n\n  - id: out_contigs\n    outputSource:\n      - spades/out_contigs\n    type: 'File'\n\n  - id: out_scaffolds\n    outputSource:\n      - spades/out_scaffolds\n    type: 'File'\n\n  - id: out_contig_stats\n    outputSource:\n      - spades/out_contig_stats\n    type: 'File'\n\n\n  - id: out_scaffold_stats\n    outputSource:\n      - spades/out_scaffold_stats\n    type: 'File'\n\n\n  - id: assembly_graph\n    outputSource:\n      - spades/assembly_graph\n    type: 'File'\n\n  - id: assembly_graph_with_scaffolds\n    outputSource:\n      - spades/assembly_graph_with_scaffolds\n    type: 'File'\n\n  - id: all_log\n    outputSource:\n      - spades/all_log\n    type: 'File[]'\n\n#  - id: all_script\n#    outputSource:\n#      - spades/all_script\n#    type: 'File[]'\n\n\n\n\n\nsteps:\n  - id: spades\n    in:\n\n\n      - id: nanopore_reads\n        source: nanopore_reads\n      - id: pacbio_reads\n        source: pacbio_reads\n      - id: sanger_reads\n        source: sanger_reads\n      - id: libraries_metadata\n        source: libraries_metadata\n      - id: libraries_fwd_rev\n        source: libraries_fwd_rev\n      - id: libraries_mono\n        source: libraries_mono\n      - id: trusted_contigs\n        source: trusted_contigs\n      - id: untrusted_contigs\n        source: untrusted_contigs\n      - id: cov_state\n        source: cov_state\n      - id: cov_cutoff\n        source: cov_cutoff\n      - id: iontorrent\n        source: iontorrent\n      - id: sc\n        source: sc\n      - id: onlyassembler\n        source: onlyassembler\n      - id: careful\n        source: careful\n\n    out:\n\n      - id: out_contigs\n      - id: out_scaffolds\n\n      - id: out_contig_stats\n      - id: out_scaffold_stats\n\n      - id: assembly_graph\n      - id: assembly_graph_with_scaffolds\n\n      - id: all_log\n#      - id: all_script\n\n\n\n    run: ../../bio-cwl-tools/spades/spades.cwl\n\nrequirements: []\n\ndoc: |\n       assemby workflow with  SPADES assembler\n\n    \n\n",
    "cwl_class": "Workflow",
    "cwl_id": "spaces_assembly",
    "cwl_inputs": "[{'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contigs', 'outputSource': ['spades/out_contigs'], 'type': 'File'}, {'id': 'out_scaffolds', 'outputSource': ['spades/out_scaffolds'], 'type': 'File'}, {'id': 'out_contig_stats', 'outputSource': ['spades/out_contig_stats'], 'type': 'File'}, {'id': 'out_scaffold_stats', 'outputSource': ['spades/out_scaffold_stats'], 'type': 'File'}, {'id': 'assembly_graph', 'outputSource': ['spades/assembly_graph'], 'type': 'File'}, {'id': 'assembly_graph_with_scaffolds', 'outputSource': ['spades/assembly_graph_with_scaffolds'], 'type': 'File'}, {'id': 'all_log', 'outputSource': ['spades/all_log'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "spaces_assembly",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/unicycler/assembly_unicycler_only.cwl",
    "sha": "7a196007b7e242d2f54d86d8d964d94dd48cc979",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/unicycler/assembly_unicycler_only.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: assembly\nlabel: assembly\ndoc:  \"Paired data assembly with Unicycler,  non long reads in this version\"\n\ninputs:\n\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n    doc:  \"Paired and single end data\"\n  \n  \n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n\n\n\n \noutputs:\n  - id: exec_script\n    outputSource:\n      - unicycler/exec_script\n    type: File\n \n  - id: assembly_graph\n    outputSource:\n      - unicycler/assembly_graph\n    type: File\n \n  - id: assembly\n    outputSource:\n      - unicycler/assembly\n    type: File\n \nsteps:\n  - id: unicycler\n    in:\n      - id: fastq1_type\n        source: fastq1_type\n      - id: fastq1\n        source: fastq1\n      - id: fastq2_type\n        source: fastq2_type\n      - id: fastq2\n        source: fastq2\n      - id: mode\n        source: mode\n      - id: fastq_file_type\n        source: fastq_file_type\n\n\n    out:\n      - id: exec_script\n      - id: assembly_graph\n      - id: assembly\n    run: ./unicycler.cwl\n    \nrequirements: []\n\n\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "assembly",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}]",
    "cwl_outputs": "[{'id': 'exec_script', 'outputSource': ['unicycler/exec_script'], 'type': 'File'}, {'id': 'assembly_graph', 'outputSource': ['unicycler/assembly_graph'], 'type': 'File'}, {'id': 'assembly', 'outputSource': ['unicycler/assembly'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Paired data assembly with Unicycler,  non long reads in this version",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "assembly",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/unicycler/unicycler.cwl",
    "sha": "f2fc606431cac7ca1e946c161672f9e9e06e4b9e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/unicycler/unicycler.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nid: unicycler\nbaseCommand:\n  - bash\n#  - cat\ninputs:\n\n\n \n##tyoe selector\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n#     symbols: [paired,single,paired_collection]\n#    default: single   \n    doc:  \"Paired and single end data\"\n\n##############\n\n##input1\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n\n##input2\n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n \n\n\n\n\n\n#sequence_long (optional)\n\n  - id: sequence_long_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - fastqsanger\n          - fastqsanger.gz\n          - fasta\n    doc: \"long reads file type. If there are no long reads, leave this empty\"\n\n    \n  - id: sequence_long\n    type:  File?\n    doc: \"long reads. If there are no long reads, leave this empty\"\n#    \n  - id: compute_slots\n    type:  int\n    default: 4\n    doc: \"\"\n    \n\n\n\n##mode selector\n\n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: min_fasta_length\n    type:  int\n    default: 100\n    doc: \"Exclude contigs from the FASTA file which are shorter than this length (bp)\"\n\n\n  - id: linear_seqs\n    type:  int\n    default: 0\n    doc: \"The expected number of linear (i.e. non-circular) sequences in the assembly\"\n\n\n  - id: min_anchor_seg_len\n    type:  int\n    default: 0\n    doc: \"Unicycler will not use segments shorter than this as scaffolding anchors\"\n\n\n  - id: spades_no_correct\n    type:  boolean\n    default: false\n    doc: |\n        Unicycler uses SPAdes to construct assembly graphs.\n        You can modify some of the SPAdes settings here.\n        Use this ONLY if you know what you are doing!\n        This option turns off SPAdes error correction. \n        Generally it is highly recommended to use correction.\n\n \n  - id: spades_min_kmer_frac\n    type:  float\n    default: 0.2\n    doc: |\n         Lowest k-mer size for SPAdes assembly,\n         expressed as a fraction of the read length. \n         min 0, max 1\n\n  - id: spades_max_kmer_frac\n    type:  float\n    default: 0.95\n#    max: 1.0\n#    min: 0.0\n    doc: |\n         Highest k-mer size for SPAdes assembly,\n         expressed as a fraction of the read length. \n         min 0, max 1\n\n  \n  # check default values\n  - id: spades_kmers\n    type:  string\n    default: \"11,127\"\n    doc: |\n         Exact k-mers size to use for SPAdes assembly, comma-separated\"\n         Kmers must be comma-separated odd integers (no repitition)\n         without space in the range of 11 to 127 (inclusive)\n\n  - id: spades_kmer_count\n    type:  int\n    default: 10\n#    min: 0\n    doc: \"Number of k-mer steps to use in SPAdes assembly, min 0\"\n\n\n \n  - id: spades_depth_filter\n    type:  float\n    default: 0.25\n#    min: 0.0\n#    max: 1.0\n    doc: |\n         Filter out contigs lower than this fraction \n         of the chromosomal depth.\n         It is done if does not result in graph dead ends\n         min 0, max 1\n\n  - id: spades_largest_component\n    type:  boolean\n    default: false\n    doc: \"Only keep the largest connected component of the assembly graph if true\"\n\n\n\n  - id: rotation_no_rotate\n    type:  boolean\n    default: false\n    doc: |\n         These options control the rotation of completed circular sequence\n         near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\n         Do not rotate completed replicons to start at a standard gene.\n         Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\n         If one is found, the sequence is rotated and/or flipped so that it begins with that gene\n         encoded on the forward strand. This provides consistently oriented assemblies and reduces\n         the risk that a gene will be split across the start and end of the sequence.\n    \n  - id: rotation_start_genes\n    type:  File? \n    doc: \"FASTA file of genes for start point of rotated replicons\"\n\n\n\n  - id: rotation_start_gene_id\n    type:  float\n    default: 90.0\n    doc: \"The minimum required BLAST percent identity for a start gene search. max 100, min 0\"\n\n\n  - id: rotation_start_gene_cov\n    type:  float\n    default: 95.0\n    doc: \"The minimum required BLAST percent coverage for a start gene search. min 0, max 100\"\n\n\n  - id: pilon_no_pilon\n    type:  boolean\n    default: false\n    doc: \"Unicycler uses Pilon tool for polishing final assembly. Do not use if true\"\n\n\n  - id: graph_clean_min_component_size\n    type:  int\n    default: 1000\n    doc: \"Contigs shorter than this value (bp) will not be polished using Pilon; min 0\"\n\n    \n  - id: graph_clean_min_dead_end_size\n    type:  int\n    default: 1000\n    doc: |\n         These options control the removal of small leftover sequences after bridging is complete.\n         Unbridged graph components smaller than this size will be removed from the final graph,\n         min 0    \n\n  - id: lr_align_contamination\n    type:  File?\n    doc: |\n         FASTA file of known contamination in long reads,\n         e.g. lambda, phiXm or puc18 spike-ins. \n\n  - id: lr_align_scores\n    type:  string\n    default: \"3,-6,-5,-2\"\n    doc: |\n          Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\n\n\n  - id: lr_align_low_score\n    type:  int?\n    doc: |\n          Score threshold - alignments below this are considered poor,\n          default = set automatically\n\n\n\n \n    \noutputs:\n  - id: exec_script\n    type: File\n    outputBinding:\n      glob: \"*.sh\"  \n    doc: |\n          Launching script for learning purpose\n\n\n  - id: assembly_graph\n    type: File\n    outputBinding:\n      glob: assembly.gfa\n    doc: |\n          Assembly graph\n\n\n\n  - id: assembly\n    type: File\n    outputBinding:\n      glob: assembly.fasta\n    doc: |\n          fasta assembly output sequence\n          (main output)\n      \n      \narguments:\n  - unicycler_launch.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: unicycler_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               #      unicycler launcher\n               ###########################\n\n               ##preparing input files\n               #check permission / chmod  is issues\n               ${\n                 var fl=\"\"\n                 var lncmd=\"\" \n                 var fq1=\"\"\n                 var fq2=\"\"\n                 var lr=\"\"\n                  \n               //###################paired case              \n                     if (inputs.fastq_file_type ==\"paired\"  ){\n                      if( inputs.fastq1_type=='fastqsanger' ){\n                          fq1 = \"fq1.fastq\"\n                      }\n                      else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                           fq1 = \"fq1.fastq.gz\"\n                      }\n                      if( inputs.fastq2_type=='fastqsanger' ){\n                          fq2 = \"fq2.fastq\"\n                       }\n                       else if( inputs.fastq2_type=='fastqsanger.gz' ){\n                           fq2 = \"fq2.fastq.gz\"\n                        }\n                        lncmd+=\"fq1='\"+fq1+\"'\"\n                        lncmd+=\" && \"\n                        lncmd+=\"fq2='\"+fq2+\"'\"\n                        lncmd+=\" && \"\n                        lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                        lncmd+=\" && \"\n                        lncmd+=\" ln -s '\"+inputs.fastq2.path+\"' $fq2  \"\n        \n                     }\n                //###################single case\n                 \n                if (inputs.fastq_file_type ==\"single\"  ){\n                  if( inputs.fastq1_type=='fastqsanger' ){\n                      fq1 = \"fq1.fastq\"\n                  }\n                  else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                       fq1 = \"fq1.fastq.gz\"\n                  }\n                  lncmd+=\"fq1='\"+fq1+\"'\"\n                  lncmd+=\" && \"\n                  lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                 }\n                 //####### long reads\n                  if (  inputs.sequence_long !== null) {\n                      if (inputs.sequence_long_type=='fastqsanger'){\n                               lr = \"lr.fastq\"\n                      }\n                      else if (inputs.sequence_long_type=='fastqsanger.gz') {\n                               lr = \"lr.fastq.gz\"\n                      }\n                      else if (inputs.sequence_longg_type=='fasta') {\n                               lr = \"lr.fasta\"\n                      }\n                      lncmd+=\"lr='\"+lr+\"'\"\n                      lncmd+=\" && \"\n                      lncmd+= \" ln -s '\"+inputs.sequence_long.path+\"' '$lr' \"\n                  }\n\n\n                  return lncmd\n\n               }\n\n\n               ##general options\n\n               read -d '' GENERALOPT << EOF\n               ${\n                var opt=\"\"  \n                //## General Unicycler Options section\n                opt+=\" --mode \"+inputs.mode+\" \"\n                opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\n                opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\n\n                if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\n\n                //## Spades Options section\n                if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\n                opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\n                opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\n                if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\n                               \n                opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\n                opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\n                if (inputs.spades_largest_component){opt+=\" --largest_component \"}\n                //## Rotation Options section\n                if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\n                if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\n                opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\n                opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\n                return opt\n                }\n               EOF\n               \n               ##additionnal option\n              \n               read -d '' ADDOPT << EOF\n               ${\n\n                var opt=\"\"\n                \n                if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\n                if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\n                //## Long Read Alignment Options\n                if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\n                opt+=\" --scores \"+inputs.lr_align_scores+\" \"\n                if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\n                 return ''+ opt + ''\n               }\n               EOF\n\n               ## Get location for pilon jar file\n\n               ${\n                 var cmd=\"\"  \n                 cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\n                 return cmd\n               }   \n\n               ## Build Unicycler command\n               ${\n               \n                 var cmd_base=\"\"\n                 var opt=\"\"\n\n                 \n                 \n                 \n                 cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\n                 cmd_base+=\" -o ./  \"\n                 cmd_base+=\" --verbosity 3  \"\n                 cmd_base+=\" --pilon_path \\$PILONJAR  \"\n\n                \n                if ( inputs.fastq_file_type == \"paired\"){\n                       opt+=\" -1 $fq1 -2 $fq2  \"\n                }\n                else if ( inputs.fastq_file_type == \"paired_collection\"){\n                       opt+=\" -1 $fq1 -2 $fq2  \"\n                }  \n                else if ( inputs.fastq_file_type == \"single\"){\n                   opt+=\" -s $fq1 \"\n                }\n                if (  inputs.sequence_long !== null) {\n                  opt+=\" -l $lr \"\n                }\n\n\n                //##  Unicycler command\n                var cmdl=cmd_base+\" \"+opt+\" \\$GENERALOPT \\$ADDOPT \"\n               \n                return cmdl\n\n                }\n                \n\n \n#        writable: false\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  CWL  wrapped for Unicycler.\n  an hybrid assembly pipeline for bacterial genomes\n  see  https://github.com/rrwick/Unicycler\n  outputs\n    final assembly in FASTA format (major output)\n    final assembly grapth in graph format, visualized using tools such as  \n    Bandage  https://github.com/rrwick/Bandage      \n\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "unicycler",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}, {'id': 'sequence_long_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz', 'fasta']}], 'doc': 'long reads file type. If there are no long reads, leave this empty'}, {'id': 'sequence_long', 'type': 'File?', 'doc': 'long reads. If there are no long reads, leave this empty'}, {'id': 'compute_slots', 'type': 'int', 'default': 4, 'doc': ''}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'min_fasta_length', 'type': 'int', 'default': 100, 'doc': 'Exclude contigs from the FASTA file which are shorter than this length (bp)'}, {'id': 'linear_seqs', 'type': 'int', 'default': 0, 'doc': 'The expected number of linear (i.e. non-circular) sequences in the assembly'}, {'id': 'min_anchor_seg_len', 'type': 'int', 'default': 0, 'doc': 'Unicycler will not use segments shorter than this as scaffolding anchors'}, {'id': 'spades_no_correct', 'type': 'boolean', 'default': False, 'doc': 'Unicycler uses SPAdes to construct assembly graphs.\\nYou can modify some of the SPAdes settings here.\\nUse this ONLY if you know what you are doing!\\nThis option turns off SPAdes error correction. \\nGenerally it is highly recommended to use correction.\\n'}, {'id': 'spades_min_kmer_frac', 'type': 'float', 'default': 0.2, 'doc': 'Lowest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length. \\nmin 0, max 1\\n'}, {'id': 'spades_max_kmer_frac', 'type': 'float', 'default': 0.95, 'doc': 'Highest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length. \\nmin 0, max 1\\n'}, {'id': 'spades_kmers', 'type': 'string', 'default': '11,127', 'doc': 'Exact k-mers size to use for SPAdes assembly, comma-separated\"\\nKmers must be comma-separated odd integers (no repitition)\\nwithout space in the range of 11 to 127 (inclusive)\\n'}, {'id': 'spades_kmer_count', 'type': 'int', 'default': 10, 'doc': 'Number of k-mer steps to use in SPAdes assembly, min 0'}, {'id': 'spades_depth_filter', 'type': 'float', 'default': 0.25, 'doc': 'Filter out contigs lower than this fraction \\nof the chromosomal depth.\\nIt is done if does not result in graph dead ends\\nmin 0, max 1\\n'}, {'id': 'spades_largest_component', 'type': 'boolean', 'default': False, 'doc': 'Only keep the largest connected component of the assembly graph if true'}, {'id': 'rotation_no_rotate', 'type': 'boolean', 'default': False, 'doc': 'These options control the rotation of completed circular sequence\\nnear the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\\nDo not rotate completed replicons to start at a standard gene.\\nUnicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\\nIf one is found, the sequence is rotated and/or flipped so that it begins with that gene\\nencoded on the forward strand. This provides consistently oriented assemblies and reduces\\nthe risk that a gene will be split across the start and end of the sequence.\\n'}, {'id': 'rotation_start_genes', 'type': 'File?', 'doc': 'FASTA file of genes for start point of rotated replicons'}, {'id': 'rotation_start_gene_id', 'type': 'float', 'default': 90.0, 'doc': 'The minimum required BLAST percent identity for a start gene search. max 100, min 0'}, {'id': 'rotation_start_gene_cov', 'type': 'float', 'default': 95.0, 'doc': 'The minimum required BLAST percent coverage for a start gene search. min 0, max 100'}, {'id': 'pilon_no_pilon', 'type': 'boolean', 'default': False, 'doc': 'Unicycler uses Pilon tool for polishing final assembly. Do not use if true'}, {'id': 'graph_clean_min_component_size', 'type': 'int', 'default': 1000, 'doc': 'Contigs shorter than this value (bp) will not be polished using Pilon; min 0'}, {'id': 'graph_clean_min_dead_end_size', 'type': 'int', 'default': 1000, 'doc': 'These options control the removal of small leftover sequences after bridging is complete.\\nUnbridged graph components smaller than this size will be removed from the final graph,\\nmin 0    \\n'}, {'id': 'lr_align_contamination', 'type': 'File?', 'doc': 'FASTA file of known contamination in long reads,\\ne.g. lambda, phiXm or puc18 spike-ins. \\n'}, {'id': 'lr_align_scores', 'type': 'string', 'default': '3,-6,-5,-2', 'doc': 'Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\\n'}, {'id': 'lr_align_low_score', 'type': 'int?', 'doc': 'Score threshold - alignments below this are considered poor,\\ndefault = set automatically\\n'}]",
    "cwl_outputs": "[{'id': 'exec_script', 'type': 'File', 'outputBinding': {'glob': '*.sh'}, 'doc': 'Launching script for learning purpose\\n'}, {'id': 'assembly_graph', 'type': 'File', 'outputBinding': {'glob': 'assembly.gfa'}, 'doc': 'Assembly graph\\n'}, {'id': 'assembly', 'type': 'File', 'outputBinding': {'glob': 'assembly.fasta'}, 'doc': 'fasta assembly output sequence\\n(main output)\\n'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['unicycler_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  wrapped for Unicycler.\nan hybrid assembly pipeline for bacterial genomes\nsee  https://github.com/rrwick/Unicycler\noutputs\n  final assembly in FASTA format (major output)\n  final assembly grapth in graph format, visualized using tools such as  \n  Bandage  https://github.com/rrwick/Bandage      \n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/assembly-wf-virus.cwl",
    "sha": "9535d8401797217e2a724b1e82e239539bd69251",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/assembly-wf-virus.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: assembly_wf_virus\nlabel: assembly-wf-virus\n \ndoc:  \"Virus genome assembly with Unicycler and spades, in parallel. visualisation with bandage\"\n\n\ninputs:\n\n##############unicycler\n\n  - id: fastq_file_type\n    type:\n      type: enum\n      symbols: [paired,single]\n    doc:  \"Paired and single end data\"\n  \n  \n  - id: mode\n    type:\n      type: enum\n      symbols: [conservative,normal,bold]\n    doc: |\n        Bridging mode, values:\n        conservative (smaller contigs, lower misassembly)\n        normal (moderate contig size and misassembly rate)\n        bold  (longest contigs, higher misassembly rate)\n\n\n  - id: fastq1_type\n    type:\n      type: enum\n      symbols:\n        - fastqsanger\n        - fastqsanger.gz\n    doc: \"Type of the First set of reads. Only when fastq_file_type = single  or  paired\"  \n    default: fastqsanger\n\n  - id: fastq1\n    type: File\n    doc: \"First set of reads with forward reads. Only when fastq_file_type = single or paired\" \n\n\n  - id: fastq2_type\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n         - fastqsanger\n         - fastqsanger.gz\n    default: \"null\"\n    doc: \"Type of the Second set of reads. Only when fastq_file_type=paired\"  \n\n    \n  - id: fastq2\n    type: File?\n    doc: \"Second set of reads with reverse reads. Only when fastq_file_type=paired\"  \n\n\n\n\n\n##############spades\n\n\n  - id: libraries_metadata\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             - name: lib_index\n               type: int? \n\n             - name: orientation\n               type: string?\n  \n             - name: lib_type\n               type: string? \n\n\n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n\n\n  - id: libraries_fwd_rev\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: fwd_reads\n               type: File?\n\n             - name: rev_reads\n               type: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n\n  - id: libraries_mono\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n\n             - name: lib_index\n               type: int? \n\n             - name: file_type\n               type: string?\n\n             - name: reads\n               type: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n\n\n\n  - id: pacbio_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: nanopore_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: sanger_reads\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: trusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n\n  - id: untrusted_contigs\n    type:\n      - \"null\"\n      - type: array\n        items: File\n \n\n\n \n\n  - id: auto_kmer_choice\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n\n  - id: kmers\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n\n\n\n  - id: cov_state\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n\n\n  - id: cov_cutoff\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n\n  - id: iontorrent\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n\n  - id: sc\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n\n  - id: onlyassembler\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n\n\n  - id: careful\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\n \n\n\n\n\noutputs:\n\n  - id: out_contigs_spades\n    outputSource:\n      - spades/out_contigs\n    type: 'File'\n\n  - id: out_scaffolds_spades\n    outputSource:\n      - spades/out_scaffolds\n    type: 'File'\n\n  - id: out_contig_stats_spades\n    outputSource:\n      - spades/out_contig_stats\n    type: 'File'\n\n\n  - id: out_scaffold_stats_spades\n    outputSource:\n      - spades/out_scaffold_stats\n    type: 'File'\n\n\n  - id: assembly_graph_spades\n    outputSource:\n      - spades/assembly_graph\n    type: 'File'\n\n  - id: assembly_graph_with_scaffolds_spades\n    outputSource:\n      - spades/assembly_graph_with_scaffolds\n    type: 'File'\n\n  - id: all_log_spades\n    outputSource:\n      - spades/all_log\n    type: 'File[]'\n\n#  - id: all_script\n#    outputSource:\n#      - spades/all_script\n#    type: 'File[]'\n\n  - id: assembly_image_spades\n    outputSource:\n      - bandage_image_spades/image\n\n\n    type: File\n\n  - id: assembly_info_spades\n    outputSource:\n      - bandage_info_spades/assembly_graph_info\n    type: File\n\n\n  - id: assembly_graph_unicycler\n    outputSource:\n      - unicycler/assembly_graph\n    type: File\n \n  - id: assembly_unicycler\n    outputSource:\n      - unicycler/assembly\n    type: File\n \n\n#  - id: exec_script2\n#    outputSource:\n#      - unicycler/exec_script\n#    type: File\n\n\n  - id: assembly_image_unicycler\n    outputSource:\n      - bandage_image_unicycler/image\n    type: File\n\n  - id: assembly_info_unicycler\n    outputSource:\n      - bandage_info_unicycler/assembly_graph_info\n    type: File\n\n\n\n\n\n\n\n\n\n\nsteps:\n\n  - id: unicycler\n    in:\n      - id: fastq1_type\n        source: fastq1_type\n      - id: fastq1\n        source: fastq1\n      - id: fastq2_type\n        source: fastq2_type\n      - id: fastq2\n        source: fastq2\n      - id: mode\n        source: mode\n      - id: fastq_file_type\n        source: fastq_file_type\n\n\n    out:\n#      - id: exec_script\n      - id: assembly_graph\n      - id: assembly\n \n#    run: ../../bio-cwl-tools/unicycler/unicycler.cwl\n    run: ./tool/unicycler.cwl \n\n\n  - id: spades\n    in:\n\n      - id: nanopore_reads\n        source: nanopore_reads\n      - id: pacbio_reads\n        source: pacbio_reads\n      - id: sanger_reads\n        source: sanger_reads\n      - id: libraries_metadata\n        source: libraries_metadata\n      - id: libraries_fwd_rev\n        source: libraries_fwd_rev\n      - id: libraries_mono\n        source: libraries_mono\n      - id: trusted_contigs\n        source: trusted_contigs\n      - id: untrusted_contigs\n        source: untrusted_contigs\n      - id: cov_state\n        source: cov_state\n      - id: cov_cutoff\n        source: cov_cutoff\n      - id: iontorrent\n        source: iontorrent\n      - id: sc\n        source: sc\n      - id: onlyassembler\n        source: onlyassembler\n      - id: careful\n        source: careful\n\n      - id: auto_kmer_choice\n        source: auto_kmer_choice\n\n      - id: kmers\n        source: kmers\n \n    out:\n\n      - id: out_contigs\n      - id: out_scaffolds\n\n      - id: out_contig_stats\n      - id: out_scaffold_stats\n\n      - id: assembly_graph\n      - id: assembly_graph_with_scaffolds\n\n      - id: all_log\n#      - id: all_script\n\n#    run: ../../bio-cwl-tools/spades/spades.cwl\n    run: ./tool/spades.cwl \n \n  - id: bandage_image_unicycler\n    in:\n      - id: graph\n        source: unicycler/assembly_graph\n    out:\n      - id: image\n#    run: ../../bio-cwl-tools/bandage/bandage-image.cwl\n    run: ./tool/bandage-image.cwl\n \n  - id: bandage_info_unicycler\n    in:\n      - id: graph\n        source: unicycler/assembly_graph\n    out:\n      - id: assembly_graph_info\n#    run: ../../bio-cwl-tools/bandage/bandage-info.cwl\n    run: ./tool/bandage-info.cwl \n  - id: bandage_image_spades\n    in:\n      - id: graph\n        source: spades/assembly_graph\n    out:\n      - id: image\n#    run: ../../bio-cwl-tools/bandage/bandage-image.cwl\n    run: ./tool/bandage-image.cwl \n  - id: bandage_info_spades\n    in:\n      - id: graph\n        source: spades/assembly_graph\n    out:\n      - id: assembly_graph_info\n#    run: ../../bio-cwl-tools/bandage/bandage-info.cwl\n    run: ./tool/bandage-info.cwl\n\n\n    \nrequirements: []\n\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "assembly_wf_virus",
    "cwl_inputs": "[{'id': 'fastq_file_type', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}, 'doc': 'Paired and single end data'}, {'id': 'mode', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}, 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n'}, {'id': 'fastq1_type', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger'}, {'id': 'fastq1', 'type': 'File', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired'}, {'id': 'fastq2_type', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired'}, {'id': 'fastq2', 'type': 'File?', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired'}, {'id': 'libraries_metadata', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'orientation', 'type': 'string?'}, {'name': 'lib_type', 'type': 'string?'}]}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, {'id': 'libraries_fwd_rev', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'fwd_reads', 'type': 'File?'}, {'name': 'rev_reads', 'type': 'File?'}]}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'libraries_mono', 'type': {'type': 'array', 'items': {'type': 'record', 'fields': [{'name': 'lib_index', 'type': 'int?'}, {'name': 'file_type', 'type': 'string?'}, {'name': 'reads', 'type': 'File?'}]}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, {'id': 'pacbio_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'nanopore_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'sanger_reads', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'trusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'type': 'array', 'items': 'File'}]}, {'id': 'auto_kmer_choice', 'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, {'id': 'kmers', 'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, {'id': 'cov_state', 'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, {'id': 'cov_cutoff', 'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, {'id': 'iontorrent', 'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, {'id': 'sc', 'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, {'id': 'onlyassembler', 'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, {'id': 'careful', 'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}]",
    "cwl_outputs": "[{'id': 'out_contigs_spades', 'outputSource': ['spades/out_contigs'], 'type': 'File'}, {'id': 'out_scaffolds_spades', 'outputSource': ['spades/out_scaffolds'], 'type': 'File'}, {'id': 'out_contig_stats_spades', 'outputSource': ['spades/out_contig_stats'], 'type': 'File'}, {'id': 'out_scaffold_stats_spades', 'outputSource': ['spades/out_scaffold_stats'], 'type': 'File'}, {'id': 'assembly_graph_spades', 'outputSource': ['spades/assembly_graph'], 'type': 'File'}, {'id': 'assembly_graph_with_scaffolds_spades', 'outputSource': ['spades/assembly_graph_with_scaffolds'], 'type': 'File'}, {'id': 'all_log_spades', 'outputSource': ['spades/all_log'], 'type': 'File[]'}, {'id': 'assembly_image_spades', 'outputSource': ['bandage_image_spades/image'], 'type': 'File'}, {'id': 'assembly_info_spades', 'outputSource': ['bandage_info_spades/assembly_graph_info'], 'type': 'File'}, {'id': 'assembly_graph_unicycler', 'outputSource': ['unicycler/assembly_graph'], 'type': 'File'}, {'id': 'assembly_unicycler', 'outputSource': ['unicycler/assembly'], 'type': 'File'}, {'id': 'assembly_image_unicycler', 'outputSource': ['bandage_image_unicycler/image'], 'type': 'File'}, {'id': 'assembly_info_unicycler', 'outputSource': ['bandage_info_unicycler/assembly_graph_info'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Virus genome assembly with Unicycler and spades, in parallel. visualisation with bandage",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "assembly-wf-virus",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Assembly/workflow/tool/bandage-image.cwl",
    "sha": "438657f5a59b4e1df5551b01233099cfc61fb673",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/bandage-image.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nid: bandage-image\ninputs:\n\n  - id: graph\n    type: File\n    doc: |\n        Graphical Fragment Assembly\n        Supports multiple assembly graph formats: \n        LastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\n \n\n  - id: format\n    type:  string\n    default: jpg\n    doc: |\n        Produce jpg, png or svg file\n\n\n  - id: height\n    type:  int\n    default: 1000\n    doc: |\n        Image height.If only height or width is set, \n        the other will be determined automatically.\n        If both are set, the image will be exactly that size.\n\n\n  - id: width\n    type:  int?\n    doc: |\n        Image width. If only height or width is set, the other will be determined automatically.\n        If both are set, the image will be exactly that size.\n\n\n  - id: node_name\n    type:  boolean\n    default: true\n    doc: |\n        If true, define Node labels as name \n\n  - id: node_length\n    type:  boolean\n    default: true\n    doc: |\n        If true, define Node labels as length \n\n\noutputs:\n\n\n# - id: all_script\n#   type:\n#      - type: array\n#        items: File\n#   outputBinding:\n#      glob: \"*.sh\"  \n#   doc: \"generated script to run bandage. for learning purpose\" \n\n\n - id: image\n   type: File\n   outputBinding:\n      glob: \"*.$(inputs.format)\"\n   doc: \"Assembly Graph Image\"\n\n\n\n\nbaseCommand: bash\n\narguments: [bandage_image_launch.sh]\n\nhints:\n  DockerRequirement:\n    dockerPull: \"fjrmore/bandage\" \n\n\nrequirements:\n  - class:  InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: bandage_image_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               # Bandage image wrapper  \n               export QT_QPA_PLATFORM=minimal\n               TMPDIR=$PWD\"/tmp_runtime-bandage\"\n               mkdir -p $TMPDIR\n               export XDG_RUNTIME_DIR=$TMPDIR\n               GRAPH=\"$(inputs.graph.path)\"\n               IMAGE=\"$(inputs.graph.nameroot).$(inputs.format)\"\n               Bandage image $GRAPH $IMAGE  \\\\\n               ${\n                var opt=\"\"\n                if(inputs.height!=null){ \n                 opt+=\" --height \"+inputs.height+ \" \"\n                }\n                if(inputs.width!=null){ \n                 opt+=\" --width \"+inputs.width +\" \"\n                }\n                if(inputs.node_length==true){ \n                 opt+=\" --names \"\n                }\n                if(inputs.node_length==true){ \n                 opt+=\" --lengths \"\n                }\n                return opt\n               }  \n\n\ndoc: |\n  CWL  tool for Bandage-info.\n  an hybrid assembly pipeline for bacterial genomes\n  *Bandage Overview**\n  Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \n  such as Velvet, SPAdes,   MEGAHIT and others.\n  De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \n  which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \n  Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \n  with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \n  By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \n  that are not possible by looking at contigs alone. \n  Bandage works with Graphical Fragment Assembly (GFA) files. \n  For more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "bandage-image",
    "cwl_inputs": "[{'id': 'graph', 'type': 'File', 'doc': 'Graphical Fragment Assembly\\nSupports multiple assembly graph formats: \\nLastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\\n'}, {'id': 'format', 'type': 'string', 'default': 'jpg', 'doc': 'Produce jpg, png or svg file\\n'}, {'id': 'height', 'type': 'int', 'default': 1000, 'doc': 'Image height.If only height or width is set, \\nthe other will be determined automatically.\\nIf both are set, the image will be exactly that size.\\n'}, {'id': 'width', 'type': 'int?', 'doc': 'Image width. If only height or width is set, the other will be determined automatically.\\nIf both are set, the image will be exactly that size.\\n'}, {'id': 'node_name', 'type': 'boolean', 'default': True, 'doc': 'If true, define Node labels as name \\n'}, {'id': 'node_length', 'type': 'boolean', 'default': True, 'doc': 'If true, define Node labels as length \\n'}]",
    "cwl_outputs": "[{'id': 'image', 'type': 'File', 'outputBinding': {'glob': '*.$(inputs.format)'}, 'doc': 'Assembly Graph Image'}]",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'fjrmore/bandage'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['bandage_image_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  tool for Bandage-info.\nan hybrid assembly pipeline for bacterial genomes\n*Bandage Overview**\nBandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \nsuch as Velvet, SPAdes,   MEGAHIT and others.\nDe novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \nwhich were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \nNodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \nwith the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \nBy displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \nthat are not possible by looking at contigs alone. \nBandage works with Graphical Fragment Assembly (GFA) files. \nFor more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/bandage-info.cwl",
    "sha": "747073c5710648c8f2d4636df74c0cd004c42dc9",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/bandage-info.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nid: bandage-info\ninputs:\n\n  - id: graph\n    type:  File\n    doc: |\n        Graphical Fragment Assembly.\n        Supports multiple\n        assembly graph formats: \n        LastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.    \n\n\n  - id: tsv\n    type:  boolean\n    default: false\n    doc: |\n        If true, output the information in a single tab-delimited line \n        starting with the graph file\n\n\n\n\n\noutputs:\n\n# - id: all_script\n#   type:\n#      - type: array\n#        items: File\n#   outputBinding:\n#      glob: \"*.sh\"  \n#   doc: \"generated script to run bandage. for learning purpose\" \n\n - id: assembly_graph_info\n   type: File\n   outputBinding:\n      glob: \"assembly_graph_info.txt\"\n   doc: \"Assembly Graph Information\"\n\n\n\n\nbaseCommand: bash\n\narguments: [bandage_info_launch.sh]\n\nhints:\n  DockerRequirement:\n    dockerPull: \"fjrmore/bandage\" \n\n\nrequirements:\n  - class:  InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entryname: bandage_info_launch.sh\n        entry: |\n               #!/bin/bash\n               ###########################\n               # Bandage info wrapper  \n               export QT_QPA_PLATFORM=minimal\n               TMPDIR=$PWD\"/tmp_runtime-bandage\"\n               mkdir -p $TMPDIR\n               export XDG_RUNTIME_DIR=$TMPDIR\n               Bandage info '$(inputs.graph.path)' \\\\\n               ${\n                var opt=\"\"\n                if(inputs.tsv==true){ \n                 opt+=\" --tsv \"\n                }\n                return opt\n               } \\\\\n                > assembly_graph_info.txt\n\n\ndoc: |\n  CWL  tool for Bandage-info.\n  an hybrid assembly pipeline for bacterial genomes\n  *Bandage Overview**\n  Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \n  such as Velvet, SPAdes,   MEGAHIT and others.\n  De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \n  which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \n  Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \n  with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \n  By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \n  that are not possible by looking at contigs alone. \n  Bandage works with Graphical Fragment Assembly (GFA) files. \n  For more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "bandage-info",
    "cwl_inputs": "[{'id': 'graph', 'type': 'File', 'doc': 'Graphical Fragment Assembly.\\nSupports multiple\\nassembly graph formats: \\nLastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.    \\n'}, {'id': 'tsv', 'type': 'boolean', 'default': False, 'doc': 'If true, output the information in a single tab-delimited line \\nstarting with the graph file\\n'}]",
    "cwl_outputs": "[{'id': 'assembly_graph_info', 'type': 'File', 'outputBinding': {'glob': 'assembly_graph_info.txt'}, 'doc': 'Assembly Graph Information'}]",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'fjrmore/bandage'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['bandage_info_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "CWL  tool for Bandage-info.\nan hybrid assembly pipeline for bacterial genomes\n*Bandage Overview**\nBandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \nsuch as Velvet, SPAdes,   MEGAHIT and others.\nDe novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \nwhich were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \nNodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \nwith the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \nBy displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \nthat are not possible by looking at contigs alone. \nBandage works with Graphical Fragment Assembly (GFA) files. \nFor more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/spades.cwl",
    "sha": "b0c592181bc514fd900beb82f0f9c63eb88e6a7d",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/spades.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand:\n  - bash\n\ninputs:\n  libraries_metadata:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             orientation: string?\n             lib_type: string? \n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n  libraries_fwd_rev:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             fwd_reads: File?\n             rev_reads: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n  libraries_mono:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             file_type: string?\n             reads: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n  pacbio_reads:\n    type: File[]?\n  nanopore_reads:\n    type: File[]?\n  sanger_reads:\n    type: File[]?\n  trusted_contigs:\n    type: File[]?\n  untrusted_contigs:\n    type: File[]?\n  auto_kmer_choice:\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n  kmers:\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n  cov_state:\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n  cov_cutoff:\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n  iontorrent:\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n  sc:\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n  onlyassembler:\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n  careful:\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\noutputs:\n  out_contig_stats:\n    type: File\n    outputBinding:\n      glob: out_contig_stats.*\n    doc: \"contig stats, default column_names: name,length,coverage\"\n  out_scaffold_stats:\n    type: File\n    outputBinding:\n      glob: out_scaffold_stats.*\n    doc: \"scaffold stats, default column_names: name,length,coverage\"\n\n  out_contigs:\n    type: File\n    outputBinding:\n      glob: contigs.fasta\n    doc: \"contigs (fasta sequence)\"\n\n  out_scaffolds:\n    type: File\n    outputBinding:\n      glob: scaffolds.fasta\n    doc: \"scaffolds (fasta sequence)\"\n#  - id: all_script\n#    type:\n#      - type: array\n#        items: File\n#    outputBinding:\n#      glob: \"*.sh\"  \n#    doc: \"generated script to run spades. for learning purpose\" \n  all_log:\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.log\"  \n    doc: \"spades output log and warnings\" \n#  - id: out_log\n#    type: File\n#    outputBinding:\n#      glob: spades.log\n#    doc: \"spades output log\"\n  assembly_graph:\n    type: File\n    outputBinding:\n      glob: assembly_graph.fastg\n    doc: \"assembly graph\" \n  assembly_graph_with_scaffolds:\n    type: File\n    outputBinding:\n      glob: assembly_graph_with_scaffolds.gfa\n    doc: \"assembly graph with scaffolds\" \n      \narguments:\n  - spades_wrapper.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n####################\n      - entryname: write_tsv.py\n        entry: |\n               #######input file here\n               #!/usr/bin/env python\n               import sys,re\n               search_str = r'^>(NODE|\\S+)_(\\d+)(?:_|\\s)length_(\\d+)_cov_(\\d+\\.*\\d*).*\\$'\n               replace_str = r'\\1_\\2\\t\\3\\t\\4'\n               cmd = re.compile(search_str)\n               sys.stdout.write('#name\\tlength\\tcoverage\\n')\n               for i,line in enumerate(sys.stdin):\n                  if cmd.match(line):\n                     sys.stdout.write(cmd.sub(replace_str,line))\n\n####################\n      - entryname: spades_wrapper.sh\n        entry: |\n               ####################spades launcher\n               #!/bin/bash\n               ## An example command looks like:\n               ## spades.py -k 21,33,55,77,99,127 --careful -1 Y.fastq.gz -2 X.fastq.gz -t 24 -o output \n               read -d '' MEMORY_GB << EOF\n               ${ \n                //compute memory limits\n                var mem=\"250\"\n                if(runtime.ram){\n                  var bt=runtime.ram * 1048576 //mebibytes to bytes               \n                  bt=bt*0.000000001 //bytes to Gigabytes \n                  mem=parseInt(bt)\n                }\n                return \"-\"+mem\n               }\n               EOF\n               #echo \"MEMORY_GB limit: \\$MEMORY_GB\"\n               read -d '' CORES << EOF\n               ${ \n                //compute core / slot\n                var cores=\"16\" \n                if(runtime.cores){\n                  cores=runtime.cores\n                }\n                return  cores\n               }\n               EOF\n               #echo \"CORES : \\$CORES\"\n               read -d '' SPADES_OPT << EOF\n               ${   \n                 var opt=\"\"\n                   if (inputs.sc==true){\n                    opt+=\" --sc \"\n                   }\n                   if (inputs.onlyassembler==true){\n                    opt+=\" --only-assembler \"\n                   }\n                   if (inputs.careful==true){\n                    opt+=\" --careful \"\n                   }\n                 return opt  \n               }\n               EOF\n\n\n               read -d '' CMD_BASE << EOF\n               spades.py -o . --disable-gzip-output  \n                 \\$SPADES_OPT \n                -t \\$CORES -m \\$MEMORY_GB\n               ${   \n                 var opt=\"\"\n                   if (inputs.auto_kmer_choice==false){\n                    opt+=\" -k \"+inputs.kmers \n                   }\n                 return opt  \n               }\n               ${\n                 var opt=\"\"\n                 if (inputs.cov_state==null || inputs.cov_state == \"auto\"){\n                      opt+=\" --cov-cutoff 'auto' \"\n                  }\n                 else if (inputs.cov_state == \"value\"){\n                      opt+=\" --cov-cutoff '\"+inputs.cov_cutoff+\"' \"\n                  }\n                 if (inputs.iontorrent==true ){\n                      opt+=\" --iontorrent \"\n                 } \n                 return opt  \n               }\n               EOF\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' CMD_READ1 << EOF\n               ${\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n                      if (lmeta.lib_type !=null && lmeta.lib_type == \"paired_end\"){\n                           prefix = 'pe'\n                       } \n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"mate_paired\"){\n                           prefix = 'mp'\n                       }\n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"nxmate_paired\"){\n                           prefix = 'nxmate'\n                       }                       \n                      else {\n                           prefix = 'hqmp'\n                       }\n                      var idx=lmeta.lib_index\n                      lib_prefix[idx]=prefix\n                      opt+=\" --\"+prefix+idx+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n\n               #########################>DEBUG\n\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' ZZDEBUG << EOF\n               ${\n               //var opt=\"inputs.libraries_metadata.length:\"+inputs.libraries_metadata.length+\" \"              \n               //var str = JSON.stringify(inputs.libraries_metadata)\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   opt+=\" not null \"\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n \n                      opt+=\" !!-AA-\"+lmeta.lib_index+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n               #########################<DEBUG\n\n\n\n\n\n\n\n\n\n\n               read -d '' CMD_READ2 << EOF\n               ${\n                 var opt=\"\"\n                 if (inputs.pacbio_reads!=null){\n                   for(var i=0; i<inputs.pacbio_reads.length;i++){\n                      var read=inputs.pacbio_reads[i]\n                      opt+=\" --pacbio fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.nanopore_reads!=null){\n                   for(var i=0; i<inputs.nanopore_reads.length;i++){\n                      var read=inputs.nanopore_reads[i]\n                      opt+=\" --nanopore fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.sanger_reads!=null){\n                   for(var i=0; i<inputs.sanger_reads.length;i++){\n                      var read=inputs.sanger_reads[i]\n                      opt+=\" --sanger fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.trusted_contigs!=null){\n                   for(var i=0; i<inputs.trusted_contigs.length;i++){\n                      var read=inputs.trusted_contigs[i]\n                      opt+=\" --trusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.untrusted_contigs!=null){\n                   for(var i=0; i<inputs.untrusted_contigs.length;i++){\n                      var read=inputs.untrusted_contigs[i]\n                      opt+=\" --untrusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 return opt  \n               }\n               EOF\n               ##########################################\n               read -d '' CMD_POST << EOF\n                 && python write_tsv.py < contigs.fasta > out_contig_stats.tab\n                 && python write_tsv.py < scaffolds.fasta > out_scaffold_stats.tab\n               EOF\n               ##########################################   \n               # echo \"CMD_BASE : \\$CMD_BASE\"  > zz.txt   \\\\\n               #        && echo \"CMD_READ1 : \\$CMD_READ1\"  >> zz.txt   \\\\\n               #        && echo \"CMD_READ2 : \\$CMD_READ2\"  >> zz.txt   \\\\\n               #        && echo \"CMD_POST : \\$CMD_POST\"   >> zz.txt\n               COMMAND=\"\\$CMD_BASE \\$CMD_READ1 \\$CMD_READ2 \\$CMD_POST\"\n               COMMAND=\\$(echo $COMMAND|tr -d '\\\\n')\n               echo \"\\$COMMAND\"  > run_spades.sh\n               bash  ./run_spades.sh\n\n \n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'\n  \ndoc: |\n  example workflow for js wrapper generation\n  see  https://github.com/rrwick/Unicycler\n  outputs : all genretated files\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'libraries_metadata': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'orientation': 'string?', 'lib_type': 'string?'}}}, 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n'}, 'libraries_fwd_rev': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'fwd_reads': 'File?', 'rev_reads': 'File?'}}}, 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, 'libraries_mono': {'type': {'type': 'array', 'items': {'type': 'record', 'fields': {'lib_index': 'int?', 'file_type': 'string?', 'reads': 'File?'}}}, 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n'}, 'pacbio_reads': {'type': 'File[]?'}, 'nanopore_reads': {'type': 'File[]?'}, 'sanger_reads': {'type': 'File[]?'}, 'trusted_contigs': {'type': 'File[]?'}, 'untrusted_contigs': {'type': 'File[]?'}, 'auto_kmer_choice': {'type': 'boolean', 'default': True, 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n'}, 'kmers': {'type': 'string', 'default': '21,33,55', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n'}, 'cov_state': {'type': ['null', {'type': 'enum', 'symbols': [False, 'value', 'auto']}], 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\"}, 'cov_cutoff': {'type': 'float?', 'doc': 'coverage cutoff value (a positive float number )\\n'}, 'iontorrent': {'type': 'boolean', 'default': False, 'doc': 'true if Libraries are IonTorrent reads.\\n'}, 'sc': {'type': 'boolean', 'default': False, 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n'}, 'onlyassembler': {'type': 'boolean', 'default': False, 'doc': 'Run only assembly if true\\n(without read error correction)\\n'}, 'careful': {'type': 'boolean', 'default': True, 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n'}}",
    "cwl_outputs": "{'out_contig_stats': {'type': 'File', 'outputBinding': {'glob': 'out_contig_stats.*'}, 'doc': 'contig stats, default column_names: name,length,coverage'}, 'out_scaffold_stats': {'type': 'File', 'outputBinding': {'glob': 'out_scaffold_stats.*'}, 'doc': 'scaffold stats, default column_names: name,length,coverage'}, 'out_contigs': {'type': 'File', 'outputBinding': {'glob': 'contigs.fasta'}, 'doc': 'contigs (fasta sequence)'}, 'out_scaffolds': {'type': 'File', 'outputBinding': {'glob': 'scaffolds.fasta'}, 'doc': 'scaffolds (fasta sequence)'}, 'all_log': {'type': [{'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '*.log'}, 'doc': 'spades output log and warnings'}, 'assembly_graph': {'type': 'File', 'outputBinding': {'glob': 'assembly_graph.fastg'}, 'doc': 'assembly graph'}, 'assembly_graph_with_scaffolds': {'type': 'File', 'outputBinding': {'glob': 'assembly_graph_with_scaffolds.gfa'}, 'doc': 'assembly graph with scaffolds'}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['spades_wrapper.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "example workflow for js wrapper generation\nsee  https://github.com/rrwick/Unicycler\noutputs : all genretated files\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Assembly/workflow/tool/unicycler.cwl",
    "sha": "6a208e40e51c5848cbda6581c448aa7a99fc7c5e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Assembly/workflow/tool/unicycler.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  CWL  wrapped for Unicycler.\n  an hybrid assembly pipeline for bacterial genomes\n  see  https://github.com/rrwick/Unicycler\n  outputs\n    final assembly in FASTA format (major output)\n    final assembly grapth in graph format, visualized using tools such as\n    Bandage  https://github.com/rrwick/Bandage\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: unicycler_launch.sh\n        entry: |\n          #!/bin/bash\n          ###########################\n          #      unicycler launcher\n          ###########################\n\n          ##preparing input files\n          #check permission / chmod  is issues\n          ${\n            var fl=\"\"\n            var lncmd=\"\"\n            var fq1=\"\"\n            var fq2=\"\"\n            var lr=\"\"\n\n          //###################paired case\n                if (inputs.fastq_file_type ==\"paired\"  ){\n                 if( inputs.fastq1_type=='fastqsanger' ){\n                     fq1 = \"fq1.fastq\"\n                 }\n                 else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                      fq1 = \"fq1.fastq.gz\"\n                 }\n                 if( inputs.fastq2_type=='fastqsanger' ){\n                     fq2 = \"fq2.fastq\"\n                  }\n                  else if( inputs.fastq2_type=='fastqsanger.gz' ){\n                      fq2 = \"fq2.fastq.gz\"\n                   }\n                   lncmd+=\"fq1='\"+fq1+\"'\"\n                   lncmd+=\" && \"\n                   lncmd+=\"fq2='\"+fq2+\"'\"\n                   lncmd+=\" && \"\n                   lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                   lncmd+=\" && \"\n                   lncmd+=\" ln -s '\"+inputs.fastq2.path+\"' $fq2  \"\n\n                }\n           //###################single case\n \n           if (inputs.fastq_file_type ==\"single\"  ){\n             if( inputs.fastq1_type=='fastqsanger' ){\n                 fq1 = \"fq1.fastq\"\n             }\n             else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                  fq1 = \"fq1.fastq.gz\"\n             }\n             lncmd+=\"fq1='\"+fq1+\"'\"\n             lncmd+=\" && \"\n             lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n            }\n            //####### long reads\n             if (  inputs.sequence_long !== null) {\n                 if (inputs.sequence_long_type=='fastqsanger'){\n                          lr = \"lr.fastq\"\n                 }\n                 else if (inputs.sequence_long_type=='fastqsanger.gz') {\n                          lr = \"lr.fastq.gz\"\n                 }\n                 else if (inputs.sequence_longg_type=='fasta') {\n                          lr = \"lr.fasta\"\n                 }\n                 lncmd+=\"lr='\"+lr+\"'\"\n                 lncmd+=\" && \"\n                 lncmd+= \" ln -s '\"+inputs.sequence_long.path+\"' '$lr' \"\n             }\n             return lncmd\n          }\n\n          ##general options\n\n          read -d '' GENERALOPT << EOF\n          ${\n           var opt=\"\"\n           //## General Unicycler Options section\n           opt+=\" --mode \"+inputs.mode+\" \"\n           opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\n           opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\n\n           if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\n\n           //## Spades Options section\n           if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\n           opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\n           opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\n           if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\n\n           opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\n           opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\n           if (inputs.spades_largest_component){opt+=\" --largest_component \"}\n           //## Rotation Options section\n           if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\n           if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\n           opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\n           opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\n           return opt\n           }\n          EOF\n\n          ##additionnal option\n\n          read -d '' ADDOPT << EOF\n          ${\n\n           var opt=\"\"\n\n           if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\n           if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\n           //## Long Read Alignment Options\n           if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\n           opt+=\" --scores \"+inputs.lr_align_scores+\" \"\n           if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\n            return ''+ opt + ''\n          }\n          EOF\n\n          ## Get location for pilon jar file\n\n          ${\n            var cmd=\"\"\n            cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\n            return cmd\n          }\n\n          ## Build Unicycler command\n          ${\n\n            var cmd_base=\"\"\n            var opt=\"\"\n\n            cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\n            cmd_base+=\" -o ./  \"\n            cmd_base+=\" --verbosity 3  \"\n            cmd_base+=\" --pilon_path \\$PILONJAR  \"\n\n           if ( inputs.fastq_file_type == \"paired\"){\n                  opt+=\" -1 $fq1 -2 $fq2  \"\n           }\n           else if ( inputs.fastq_file_type == \"paired_collection\"){\n                  opt+=\" -1 $fq1 -2 $fq2  \"\n           }\n           else if ( inputs.fastq_file_type == \"single\"){\n              opt+=\" -s $fq1 \"\n           }\n           if (  inputs.sequence_long !== null) {\n             opt+=\" -l $lr \"\n           }\n\n           //##  Unicycler command\n           var cmdl=cmd_base+\" \"+opt+\" \\$GENERALOPT \\$ADDOPT \"\n\n           return cmdl\n\n           }\ninputs:\n  fastq_file_type:\n    doc: Paired and single end data\n    type:\n      type: enum\n      symbols:\n      - paired\n      - single\n  fastq1_type:\n    doc: Type of the First set of reads. Only when fastq_file_type = single  or  paired\n    type:\n      type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n    default: fastqsanger\n  fastq1:\n    doc: |-\n      First set of reads with forward reads. Only when fastq_file_type = single or paired\n    type: File\n  fastq2_type:\n    doc: Type of the Second set of reads. Only when fastq_file_type=paired\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n    default: 'null'\n  fastq2:\n    doc: Second set of reads with reverse reads. Only when fastq_file_type=paired\n    type: File?\n  sequence_long_type:\n    doc: long reads file type. If there are no long reads, leave this empty\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n      - fasta\n  sequence_long:\n    doc: long reads. If there are no long reads, leave this empty\n    type: File?\n  compute_slots:\n    type: int?\n    default: 4\n  mode:\n    doc: |\n      Bridging mode, values:\n      conservative (smaller contigs, lower misassembly)\n      normal (moderate contig size and misassembly rate)\n      bold  (longest contigs, higher misassembly rate)\n    type:\n      type: enum\n      symbols:\n      - conservative\n      - normal\n      - bold\n  min_fasta_length:\n    doc: Exclude contigs from the FASTA file which are shorter than this length (bp)\n    type: int?\n    default: 100\n  linear_seqs:\n    doc: The expected number of linear (i.e. non-circular) sequences in the assembly\n    type: int?\n    default: 0\n  min_anchor_seg_len:\n    doc: Unicycler will not use segments shorter than this as scaffolding anchors\n    type: int?\n    default: 0\n  spades_no_correct:\n    doc: |\n      Unicycler uses SPAdes to construct assembly graphs.\n      You can modify some of the SPAdes settings here.\n      Use this ONLY if you know what you are doing!\n      This option turns off SPAdes error correction.\n      Generally it is highly recommended to use correction.\n    type: boolean?\n    default: false\n  spades_min_kmer_frac:\n    doc: |\n      Lowest k-mer size for SPAdes assembly,\n      expressed as a fraction of the read length.\n      min 0, max 1\n    type: float?\n    default: 0.2\n  spades_max_kmer_frac:\n    doc: |\n      Highest k-mer size for SPAdes assembly,\n      expressed as a fraction of the read length.\n      min 0, max 1\n    type: float?\n    default: 0.95\n  spades_kmers:\n    doc: |\n      Exact k-mers size to use for SPAdes assembly, comma-separated\"\n      Kmers must be comma-separated odd integers (no repitition)\n      without space in the range of 11 to 127 (inclusive)\n    type: string?\n    default: 11,127\n  spades_kmer_count:\n    doc: Number of k-mer steps to use in SPAdes assembly, min 0\n    type: int?\n    default: 10\n  spades_depth_filter:\n    doc: |\n      Filter out contigs lower than this fraction\n      of the chromosomal depth.\n      It is done if does not result in graph dead ends\n      min 0, max 1\n    type: float?\n    default: 0.25\n  spades_largest_component:\n    doc: Only keep the largest connected component of the assembly graph if true\n    type: boolean?\n    default: false\n  rotation_no_rotate:\n    doc: |\n      These options control the rotation of completed circular sequence\n      near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\n      Do not rotate completed replicons to start at a standard gene.\n      Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\n      If one is found, the sequence is rotated and/or flipped so that it begins with that gene\n      encoded on the forward strand. This provides consistently oriented assemblies and reduces\n      the risk that a gene will be split across the start and end of the sequence.\n    type: boolean?\n    default: false\n  rotation_start_genes:\n    doc: FASTA file of genes for start point of rotated replicons\n    type: File?\n  rotation_start_gene_id:\n    doc: |-\n      The minimum required BLAST percent identity for a start gene search. max 100, min 0\n    type: float?\n    default: 90.0\n  rotation_start_gene_cov:\n    doc: |-\n      The minimum required BLAST percent coverage for a start gene search. min 0, max 100\n    type: float?\n    default: 95.0\n  pilon_no_pilon:\n    doc: Unicycler uses Pilon tool for polishing final assembly. Do not use if true\n    type: boolean?\n    default: false\n  graph_clean_min_component_size:\n    doc: Contigs shorter than this value (bp) will not be polished using Pilon; min 0\n    type: int?\n    default: 1000\n  graph_clean_min_dead_end_size:\n    doc: |\n      These options control the removal of small leftover sequences after bridging is complete.\n      Unbridged graph components smaller than this size will be removed from the final graph,\n      min 0\n    type: int?\n    default: 1000\n  lr_align_contamination:\n    doc: |\n      FASTA file of known contamination in long reads,\n      e.g. lambda, phiXm or puc18 spike-ins.\n    type: File?\n  lr_align_scores:\n    doc: |\n      Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\n    type: string?\n    default: 3,-6,-5,-2\n  lr_align_low_score:\n    doc: |\n      Score threshold - alignments below this are considered poor,\n      default = set automatically\n    type: int?\noutputs:\n  assembly_graph:\n    type: File\n    outputBinding:\n      glob: assembly.gfa\n  assembly:\n    doc: |\n      fasta assembly output sequence\n      (main output)\n    type: File\n    outputBinding:\n      glob: assembly.fasta\n  # exec_script:\n  #   doc: |\n  #     Launching script for learning purpose\n  #   type: File\n  #   outputBinding:\n  #     glob: '*.sh'\n\nbaseCommand: bash\n\narguments:\n- unicycler_launch.sh\n\nhints:\n  DockerRequirement:\n    dockerPull: biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fastq_file_type': {'doc': 'Paired and single end data', 'type': {'type': 'enum', 'symbols': ['paired', 'single']}}, 'fastq1_type': {'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'type': {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}, 'default': 'fastqsanger'}, 'fastq1': {'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired', 'type': 'File'}, 'fastq2_type': {'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz']}], 'default': 'null'}, 'fastq2': {'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired', 'type': 'File?'}, 'sequence_long_type': {'doc': 'long reads file type. If there are no long reads, leave this empty', 'type': ['null', {'type': 'enum', 'symbols': ['fastqsanger', 'fastqsanger.gz', 'fasta']}]}, 'sequence_long': {'doc': 'long reads. If there are no long reads, leave this empty', 'type': 'File?'}, 'compute_slots': {'type': 'int?', 'default': 4}, 'mode': {'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n', 'type': {'type': 'enum', 'symbols': ['conservative', 'normal', 'bold']}}, 'min_fasta_length': {'doc': 'Exclude contigs from the FASTA file which are shorter than this length (bp)', 'type': 'int?', 'default': 100}, 'linear_seqs': {'doc': 'The expected number of linear (i.e. non-circular) sequences in the assembly', 'type': 'int?', 'default': 0}, 'min_anchor_seg_len': {'doc': 'Unicycler will not use segments shorter than this as scaffolding anchors', 'type': 'int?', 'default': 0}, 'spades_no_correct': {'doc': 'Unicycler uses SPAdes to construct assembly graphs.\\nYou can modify some of the SPAdes settings here.\\nUse this ONLY if you know what you are doing!\\nThis option turns off SPAdes error correction.\\nGenerally it is highly recommended to use correction.\\n', 'type': 'boolean?', 'default': False}, 'spades_min_kmer_frac': {'doc': 'Lowest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length.\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.2}, 'spades_max_kmer_frac': {'doc': 'Highest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length.\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.95}, 'spades_kmers': {'doc': 'Exact k-mers size to use for SPAdes assembly, comma-separated\"\\nKmers must be comma-separated odd integers (no repitition)\\nwithout space in the range of 11 to 127 (inclusive)\\n', 'type': 'string?', 'default': '11,127'}, 'spades_kmer_count': {'doc': 'Number of k-mer steps to use in SPAdes assembly, min 0', 'type': 'int?', 'default': 10}, 'spades_depth_filter': {'doc': 'Filter out contigs lower than this fraction\\nof the chromosomal depth.\\nIt is done if does not result in graph dead ends\\nmin 0, max 1\\n', 'type': 'float?', 'default': 0.25}, 'spades_largest_component': {'doc': 'Only keep the largest connected component of the assembly graph if true', 'type': 'boolean?', 'default': False}, 'rotation_no_rotate': {'doc': 'These options control the rotation of completed circular sequence\\nnear the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\\nDo not rotate completed replicons to start at a standard gene.\\nUnicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\\nIf one is found, the sequence is rotated and/or flipped so that it begins with that gene\\nencoded on the forward strand. This provides consistently oriented assemblies and reduces\\nthe risk that a gene will be split across the start and end of the sequence.\\n', 'type': 'boolean?', 'default': False}, 'rotation_start_genes': {'doc': 'FASTA file of genes for start point of rotated replicons', 'type': 'File?'}, 'rotation_start_gene_id': {'doc': 'The minimum required BLAST percent identity for a start gene search. max 100, min 0', 'type': 'float?', 'default': 90.0}, 'rotation_start_gene_cov': {'doc': 'The minimum required BLAST percent coverage for a start gene search. min 0, max 100', 'type': 'float?', 'default': 95.0}, 'pilon_no_pilon': {'doc': 'Unicycler uses Pilon tool for polishing final assembly. Do not use if true', 'type': 'boolean?', 'default': False}, 'graph_clean_min_component_size': {'doc': 'Contigs shorter than this value (bp) will not be polished using Pilon; min 0', 'type': 'int?', 'default': 1000}, 'graph_clean_min_dead_end_size': {'doc': 'These options control the removal of small leftover sequences after bridging is complete.\\nUnbridged graph components smaller than this size will be removed from the final graph,\\nmin 0\\n', 'type': 'int?', 'default': 1000}, 'lr_align_contamination': {'doc': 'FASTA file of known contamination in long reads,\\ne.g. lambda, phiXm or puc18 spike-ins.\\n', 'type': 'File?'}, 'lr_align_scores': {'doc': 'Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\\n', 'type': 'string?', 'default': '3,-6,-5,-2'}, 'lr_align_low_score': {'doc': 'Score threshold - alignments below this are considered poor,\\ndefault = set automatically\\n', 'type': 'int?'}}",
    "cwl_outputs": "{'assembly_graph': {'type': 'File', 'outputBinding': {'glob': 'assembly.gfa'}}, 'assembly': {'doc': 'fasta assembly output sequence\\n(main output)\\n', 'type': 'File', 'outputBinding': {'glob': 'assembly.fasta'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['unicycler_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': [{'entryname': 'unicycler_launch.sh', 'entry': '#!/bin/bash\\n###########################\\n#      unicycler launcher\\n###########################\\n\\n##preparing input files\\n#check permission / chmod  is issues\\n${\\n  var fl=\"\"\\n  var lncmd=\"\"\\n  var fq1=\"\"\\n  var fq2=\"\"\\n  var lr=\"\"\\n\\n//###################paired case\\n      if (inputs.fastq_file_type ==\"paired\"  ){\\n       if( inputs.fastq1_type==\\'fastqsanger\\' ){\\n           fq1 = \"fq1.fastq\"\\n       }\\n       else if( inputs.fastq1_type==\\'fastqsanger.gz\\' ){\\n            fq1 = \"fq1.fastq.gz\"\\n       }\\n       if( inputs.fastq2_type==\\'fastqsanger\\' ){\\n           fq2 = \"fq2.fastq\"\\n        }\\n        else if( inputs.fastq2_type==\\'fastqsanger.gz\\' ){\\n            fq2 = \"fq2.fastq.gz\"\\n         }\\n         lncmd+=\"fq1=\\'\"+fq1+\"\\'\"\\n         lncmd+=\" && \"\\n         lncmd+=\"fq2=\\'\"+fq2+\"\\'\"\\n         lncmd+=\" && \"\\n         lncmd+=\" ln -s \\'\"+inputs.fastq1.path+\"\\' $fq1 \"\\n         lncmd+=\" && \"\\n         lncmd+=\" ln -s \\'\"+inputs.fastq2.path+\"\\' $fq2  \"\\n\\n      }\\n //###################single case\\n\\n if (inputs.fastq_file_type ==\"single\"  ){\\n   if( inputs.fastq1_type==\\'fastqsanger\\' ){\\n       fq1 = \"fq1.fastq\"\\n   }\\n   else if( inputs.fastq1_type==\\'fastqsanger.gz\\' ){\\n        fq1 = \"fq1.fastq.gz\"\\n   }\\n   lncmd+=\"fq1=\\'\"+fq1+\"\\'\"\\n   lncmd+=\" && \"\\n   lncmd+=\" ln -s \\'\"+inputs.fastq1.path+\"\\' $fq1 \"\\n  }\\n  //####### long reads\\n   if (  inputs.sequence_long !== null) {\\n       if (inputs.sequence_long_type==\\'fastqsanger\\'){\\n                lr = \"lr.fastq\"\\n       }\\n       else if (inputs.sequence_long_type==\\'fastqsanger.gz\\') {\\n                lr = \"lr.fastq.gz\"\\n       }\\n       else if (inputs.sequence_longg_type==\\'fasta\\') {\\n                lr = \"lr.fasta\"\\n       }\\n       lncmd+=\"lr=\\'\"+lr+\"\\'\"\\n       lncmd+=\" && \"\\n       lncmd+= \" ln -s \\'\"+inputs.sequence_long.path+\"\\' \\'$lr\\' \"\\n   }\\n   return lncmd\\n}\\n\\n##general options\\n\\nread -d \\'\\' GENERALOPT << EOF\\n${\\n var opt=\"\"\\n //## General Unicycler Options section\\n opt+=\" --mode \"+inputs.mode+\" \"\\n opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\\n opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\\n\\n if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\\n\\n //## Spades Options section\\n if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\\n opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\\n opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\\n if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\\n\\n opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\\n opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\\n if (inputs.spades_largest_component){opt+=\" --largest_component \"}\\n //## Rotation Options section\\n if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\\n if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\\n opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\\n opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\\n return opt\\n }\\nEOF\\n\\n##additionnal option\\n\\nread -d \\'\\' ADDOPT << EOF\\n${\\n\\n var opt=\"\"\\n\\n if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\\n if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\\n //## Long Read Alignment Options\\n if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\\n opt+=\" --scores \"+inputs.lr_align_scores+\" \"\\n if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\\n  return \\'\\'+ opt + \\'\\'\\n}\\nEOF\\n\\n## Get location for pilon jar file\\n\\n${\\n  var cmd=\"\"\\n  cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\\n  return cmd\\n}\\n\\n## Build Unicycler command\\n${\\n\\n  var cmd_base=\"\"\\n  var opt=\"\"\\n\\n  cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\\n  cmd_base+=\" -o ./  \"\\n  cmd_base+=\" --verbosity 3  \"\\n  cmd_base+=\" --pilon_path \\\\$PILONJAR  \"\\n\\n if ( inputs.fastq_file_type == \"paired\"){\\n        opt+=\" -1 $fq1 -2 $fq2  \"\\n }\\n else if ( inputs.fastq_file_type == \"paired_collection\"){\\n        opt+=\" -1 $fq1 -2 $fq2  \"\\n }\\n else if ( inputs.fastq_file_type == \"single\"){\\n    opt+=\" -s $fq1 \"\\n }\\n if (  inputs.sequence_long !== null) {\\n   opt+=\" -l $lr \"\\n }\\n\\n //##  Unicycler command\\n var cmdl=cmd_base+\" \"+opt+\" \\\\$GENERALOPT \\\\$ADDOPT \"\\n\\n return cmdl\\n\\n }\\n'}]}}",
    "cwl_doc": "CWL  wrapped for Unicycler.\nan hybrid assembly pipeline for bacterial genomes\nsee  https://github.com/rrwick/Unicycler\noutputs\n  final assembly in FASTA format (major output)\n  final assembly grapth in graph format, visualized using tools such as\n  Bandage  https://github.com/rrwick/Bandage\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "PreProcessing/batch-preprocess-illumina.cwl",
    "sha": "96c719397af7257aaec4c926cf84d09735bec60a",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/batch-preprocess-illumina.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accessions: string[]\n  ref_human_genome: File\n\nsteps:\n  main:\n    scatter: illumina_accession\n    in:\n      illumina_accession: illumina_accessions\n      ref_human_genome: ref_human_genome\n    out:\n      - fastp_html_report\n      - fastp_json_report\n      - multiqc_html\n      - multiqc_zip\n      - original_fastq1\n      - original_fastq2\n      - bam\n    run: ./preprocess-illumina.cwl\n\n  merge_bam:\n    in:\n      output_name:\n        valueFrom: \"merged.bam\"\n      bams: main/bam\n    out:\n      - bam_merged\n    run: ../bio-cwl-tools/samtools/samtools_merge.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: merge_bam/bam_merged\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n\noutputs:\n  original_fastq1:\n    type: File[]\n    outputSource: main/original_fastq1\n  original_fastq2:\n    type: File[]?\n    outputSource: main/original_fastq2\n\n  processed_fastq:\n    type: File\n    outputSource: samtools_fastq/fastq\n\n  fastp_html_reports:\n    type: File[]\n    outputSource: main/fastp_html_report\n  fastp_json_reports:\n    type: File[]\n    outputSource: main/fastp_json_report\n\n  multiqc_htmls:\n    type: File[]\n    outputSource: main/multiqc_html\n  multiqc_zips:\n    type: File[]\n    outputSource: main/multiqc_zip\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accessions': 'string[]', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File[]', 'outputSource': 'main/original_fastq1'}, 'original_fastq2': {'type': 'File[]?', 'outputSource': 'main/original_fastq2'}, 'processed_fastq': {'type': 'File', 'outputSource': 'samtools_fastq/fastq'}, 'fastp_html_reports': {'type': 'File[]', 'outputSource': 'main/fastp_html_report'}, 'fastp_json_reports': {'type': 'File[]', 'outputSource': 'main/fastp_json_report'}, 'multiqc_htmls': {'type': 'File[]', 'outputSource': 'main/multiqc_html'}, 'multiqc_zips': {'type': 'File[]', 'outputSource': 'main/multiqc_zip'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "main": {
        "scatter": "illumina_accession",
        "in": {
          "illumina_accession": "illumina_accessions",
          "ref_human_genome": "ref_human_genome"
        },
        "out": [
          "fastp_html_report",
          "fastp_json_report",
          "multiqc_html",
          "multiqc_zip",
          "original_fastq1",
          "original_fastq2",
          "bam"
        ],
        "run": "./preprocess-illumina.cwl"
      },
      "merge_bam": {
        "in": {
          "output_name": {
            "valueFrom": "merged.bam"
          },
          "bams": "main/bam"
        },
        "out": [
          "bam_merged"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_merge.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "merge_bam/bam_merged"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/batch-preprocess-ont.cwl",
    "sha": "d6ee102a36b9e9aedde744b626ef02501515cebe",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/batch-preprocess-ont.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accessions: string[]\n  ref_human_genome: File\n\nsteps:\n  main:\n    scatter: illumina_accession\n    in:\n      illumina_accession: illumina_accessions\n      ref_human_genome: ref_human_genome\n    out:\n      - fastqc_summary\n      - fastqc_zip\n      - multiqc_html\n      - multiqc_zip\n      - original_fastq1\n      - bam\n    run: ./preprocess-ont.cwl\n\n  merge_bam:\n    in:\n      output_name:\n        valueFrom: \"merged.bam\"\n      bams: main/bam\n    out:\n      - bam_merged\n    run: ../bio-cwl-tools/samtools/samtools_merge.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: merge_bam/bam_merged\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n\noutputs:\n  original_fastq1:\n    type: File[]\n    outputSource: main/original_fastq1\n\n  processed_fastq:\n    type: File\n    outputSource: samtools_fastq/fastq\n\n  fastqc_summary:\n    type: File[]\n    outputSource: main/fastqc_summary\n  fastqc_zip:\n    type: File[]\n    outputSource: main/fastqc_zip\n\n  multiqc_htmls:\n    type: File[]\n    outputSource: main/multiqc_html\n  multiqc_zips:\n    type: File[]\n    outputSource: main/multiqc_zip\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accessions': 'string[]', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File[]', 'outputSource': 'main/original_fastq1'}, 'processed_fastq': {'type': 'File', 'outputSource': 'samtools_fastq/fastq'}, 'fastqc_summary': {'type': 'File[]', 'outputSource': 'main/fastqc_summary'}, 'fastqc_zip': {'type': 'File[]', 'outputSource': 'main/fastqc_zip'}, 'multiqc_htmls': {'type': 'File[]', 'outputSource': 'main/multiqc_html'}, 'multiqc_zips': {'type': 'File[]', 'outputSource': 'main/multiqc_zip'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "main": {
        "scatter": "illumina_accession",
        "in": {
          "illumina_accession": "illumina_accessions",
          "ref_human_genome": "ref_human_genome"
        },
        "out": [
          "fastqc_summary",
          "fastqc_zip",
          "multiqc_html",
          "multiqc_zip",
          "original_fastq1",
          "bam"
        ],
        "run": "./preprocess-ont.cwl"
      },
      "merge_bam": {
        "in": {
          "output_name": {
            "valueFrom": "merged.bam"
          },
          "bams": "main/bam"
        },
        "out": [
          "bam_merged"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_merge.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "merge_bam/bam_merged"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/preprocess-illumina.cwl",
    "sha": "31dc07ff0b6f457bb9d5a725291ea9d2b25b5997",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/preprocess-illumina.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accession: string\n  hg38: File\n\nsteps:\n  unpack_ref_genome:\n    in:\n      file: hg38\n    out:\n      - hg_38_fa\n    run: ./tools/unpack_ref_db.cwl\n\n  fetch_fastqs:\n    in:\n      sra_accession: illumina_accession\n    out:\n      - fastq_file_1\n      - fastq_file_2\n    run: ../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl\n\n  fastp:\n    in:\n      fastq1: fetch_fastqs/fastq_file_1\n      fastq2: fetch_fastqs/fastq_file_2\n    out:\n      - out_fastq1\n      - out_fastq2\n      - html_report\n      - json_report\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  multiqc:\n    in:\n      qc_files_array: fastp/json_report\n    out:\n      - multiqc_zip\n      - multiqc_html\n    run: ../bio-cwl-tools/multiqc/multiqc.cwl\n\n  bwa_mem:\n    in:\n      Index: unpack_ref_genome/hg_38_fa\n      InputFile:\n        source: [fastp/out_fastq1, fastp/out_fastq2]\n        valueFrom: |\n          ${\n            return self.filter(function(x){return x});\n          }\n        linkMerge: merge_flattened\n      Threads:\n        valueFrom: $(1)\n    out:\n      - reads_stdout\n    run: ../bio-cwl-tools/bwa/BWA-Mem.cwl\n\n  samtools_view:\n    in:\n      sam: bwa_mem/reads_stdout\n    out:\n      - bam\n    run: ../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl\n\n  samtools_fastq:\n    in:\n     bam_sorted: samtools_view/bam\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n\n  rename_multiqc_html:\n    in:\n      srcfile: multiqc/multiqc_html\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_multiqc_zip:\n    in:\n      srcfile: multiqc/multiqc_zip\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastp_html:\n    in:\n      srcfile: fastp/html_report\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastp.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastp_json:\n    in:\n      srcfile: fastp/json_report\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastp.json\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_bam:\n    in:\n      srcfile: samtools_view/bam\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).bam\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\noutputs:\n  original_fastq1:\n    type: File\n    format: edam:format_1930  # FASTQ\n    outputSource: fetch_fastqs/fastq_file_1\n  original_fastq2:\n    type: File?\n    format: edam:format_1930  # FASTQ\n    outputSource: fetch_fastqs/fastq_file_2\n\n  bam:\n    type: File\n    format: edam:format_2572  # BAM\n    outputSource: rename_bam/outfile\n\n  fastp_html_report:\n    type: File\n    format: edam:format_2331  # HTML\n    outputSource: rename_fastp_html/outfile\n  fastp_json_report:\n    type: File\n    format: edam:format_3464  # JSON\n    outputSource: rename_fastp_json/outfile\n\n  multiqc_html:\n    type: File\n    format: edam:format_2331  # HTML\n    outputSource: rename_multiqc_html/outfile\n  multiqc_zip:\n    type: File\n    format: edam:format_3464  # JSON\n    outputSource: rename_multiqc_zip/outfile\n\n  mapped_fastq:\n    type: File\n    format: edam:format_1930  # FASTQ\n    outputSource: samtools_fastq/fastq\n\n$namespaces:\n  edam: http://edamontology.org/\n\n$schemas:\n  - http://edamontology.org/EDAM_1.20.owl",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accession': 'string', 'hg38': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File', 'format': 'edam:format_1930', 'outputSource': 'fetch_fastqs/fastq_file_1'}, 'original_fastq2': {'type': 'File?', 'format': 'edam:format_1930', 'outputSource': 'fetch_fastqs/fastq_file_2'}, 'bam': {'type': 'File', 'format': 'edam:format_2572', 'outputSource': 'rename_bam/outfile'}, 'fastp_html_report': {'type': 'File', 'format': 'edam:format_2331', 'outputSource': 'rename_fastp_html/outfile'}, 'fastp_json_report': {'type': 'File', 'format': 'edam:format_3464', 'outputSource': 'rename_fastp_json/outfile'}, 'multiqc_html': {'type': 'File', 'format': 'edam:format_2331', 'outputSource': 'rename_multiqc_html/outfile'}, 'multiqc_zip': {'type': 'File', 'format': 'edam:format_3464', 'outputSource': 'rename_multiqc_zip/outfile'}, 'mapped_fastq': {'type': 'File', 'format': 'edam:format_1930', 'outputSource': 'samtools_fastq/fastq'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "unpack_ref_genome": {
        "in": {
          "file": "hg38"
        },
        "out": [
          "hg_38_fa"
        ],
        "run": "./tools/unpack_ref_db.cwl"
      },
      "fetch_fastqs": {
        "in": {
          "sra_accession": "illumina_accession"
        },
        "out": [
          "fastq_file_1",
          "fastq_file_2"
        ],
        "run": "../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl"
      },
      "fastp": {
        "in": {
          "fastq1": "fetch_fastqs/fastq_file_1",
          "fastq2": "fetch_fastqs/fastq_file_2"
        },
        "out": [
          "out_fastq1",
          "out_fastq2",
          "html_report",
          "json_report"
        ],
        "run": "../bio-cwl-tools/fastp/fastp.cwl"
      },
      "multiqc": {
        "in": {
          "qc_files_array": "fastp/json_report"
        },
        "out": [
          "multiqc_zip",
          "multiqc_html"
        ],
        "run": "../bio-cwl-tools/multiqc/multiqc.cwl"
      },
      "bwa_mem": {
        "in": {
          "Index": "unpack_ref_genome/hg_38_fa",
          "InputFile": {
            "source": [
              "fastp/out_fastq1",
              "fastp/out_fastq2"
            ],
            "valueFrom": "${\n  return self.filter(function(x){return x});\n}\n",
            "linkMerge": "merge_flattened"
          },
          "Threads": {
            "valueFrom": "$(1)"
          }
        },
        "out": [
          "reads_stdout"
        ],
        "run": "../bio-cwl-tools/bwa/BWA-Mem.cwl"
      },
      "samtools_view": {
        "in": {
          "sam": "bwa_mem/reads_stdout"
        },
        "out": [
          "bam"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "samtools_view/bam"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      },
      "rename_multiqc_html": {
        "in": {
          "srcfile": "multiqc/multiqc_html",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_multiqc_zip": {
        "in": {
          "srcfile": "multiqc/multiqc_zip",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastp_html": {
        "in": {
          "srcfile": "fastp/html_report",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastp.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastp_json": {
        "in": {
          "srcfile": "fastp/json_report",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastp.json"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_bam": {
        "in": {
          "srcfile": "samtools_view/bam",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).bam"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/preprocess-ont.cwl",
    "sha": "4c190ef248bf9d4e313f225f3ebf510e7c42e8de",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/preprocess-ont.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\nrequirements:\n  ScatterFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  illumina_accession: string\n  ref_human_genome: File\n\nsteps:\n  fetch_fastqs:\n    in:\n      sra_accession: illumina_accession\n    out:\n      - fastq_file_1\n      - fastq_files\n    run: ../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl\n\n  nanoplot:\n    in:\n      fastq_files:\n        source: fetch_fastqs/fastq_files\n      loglength:\n        valueFrom: $(true)\n      format:\n        valueFrom: \"png\"\n    out:\n      - dynamic_histogram_read_length\n      - histogram_read_length\n      - length_v_qual_scatter_plot_dot\n      - length_v_qual_scatter_plot_kde\n      - log_transformed_histogram_read_length\n      - report\n      - logfile\n      - nanostats\n      - weighted_histogram_read_length\n      - weighted_log_transform_histogram_read_length\n      - yield_by_length_img\n    run: ../bio-cwl-tools/nanoplot/nanoplot.cwl\n\n  fastqc:\n    in:\n      reads_file: fetch_fastqs/fastq_file_1\n      nogroup:\n        valueFrom: $(true)\n      kmers:\n        valueFrom: $(7)\n    out:\n      - zipped_file\n      - summary_file\n      - html_file\n    run: ../bio-cwl-tools/fastqc/fastqc_2.cwl\n\n  multiqc:\n    in:\n      qc_files_array: fastqc/zipped_file\n    out:\n      - multiqc_zip\n      - multiqc_html\n    run: ../bio-cwl-tools/multiqc/multiqc.cwl\n\n  minimap2:\n    in:\n      indexFile: ref_human_genome\n      fastqFiles: fetch_fastqs/fastq_file_1\n      samOutput:\n        valueFrom: $(true)\n    out:\n      - samfile\n    run: ../bio-cwl-tools/minimap2/minimap2.cwl\n\n  sam2bam:\n    in:\n      sam: minimap2/samfile\n    out:\n      - bam\n    run: ../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl\n\n  samtools_fastq:\n    in:\n      bam_sorted: sam2bam/bam\n    out:\n      - fastq\n    run: ../bio-cwl-tools/samtools/samtools_fastq.cwl\n    \n  rename_multiqc_html:\n    in:\n      srcfile: multiqc/multiqc_html\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_multiqc_zip:\n    in:\n      srcfile: multiqc/multiqc_zip\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_multiqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastqc_summary:\n    in:\n      srcfile: fastqc/summary_file\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastqc.html\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastqc_zip:\n    in:\n      srcfile: fastqc/zipped_file\n      newname:\n        source: illumina_accession\n        valueFrom: $(self)_fastqc.zip\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_fastq:\n    in:\n      srcfile: samtools_fastq/fastq\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).fastq\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\n  rename_bam:\n    in:\n      srcfile: sam2bam/bam\n      newname:\n        source: illumina_accession\n        valueFrom: $(self).bam\n    out:\n      - outfile\n    run: ../bio-cwl-tools/util/rename.cwl\n\noutputs:\n  original_fastq1:\n    type: File\n    outputSource: rename_fastq/outfile\n\n  fastqc_summary:\n    type: File\n    outputSource: rename_fastqc_summary/outfile\n  fastqc_zip:\n    type: File\n    outputSource: rename_fastqc_zip/outfile\n\n\n  multiqc_html:\n    type: File\n    outputSource: rename_multiqc_html/outfile\n  multiqc_zip:\n    type: File\n    outputSource: rename_multiqc_zip/outfile\n\n  bam:\n    type: File\n    outputSource: rename_bam/outfile",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'illumina_accession': 'string', 'ref_human_genome': 'File'}",
    "cwl_outputs": "{'original_fastq1': {'type': 'File', 'outputSource': 'rename_fastq/outfile'}, 'fastqc_summary': {'type': 'File', 'outputSource': 'rename_fastqc_summary/outfile'}, 'fastqc_zip': {'type': 'File', 'outputSource': 'rename_fastqc_zip/outfile'}, 'multiqc_html': {'type': 'File', 'outputSource': 'rename_multiqc_html/outfile'}, 'multiqc_zip': {'type': 'File', 'outputSource': 'rename_multiqc_zip/outfile'}, 'bam': {'type': 'File', 'outputSource': 'rename_bam/outfile'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'ScatterFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "fetch_fastqs": {
        "in": {
          "sra_accession": "illumina_accession"
        },
        "out": [
          "fastq_file_1",
          "fastq_files"
        ],
        "run": "../bio-cwl-tools/sratoolkit/prefetch_fastq.cwl"
      },
      "nanoplot": {
        "in": {
          "fastq_files": {
            "source": "fetch_fastqs/fastq_files"
          },
          "loglength": {
            "valueFrom": "$(true)"
          },
          "format": {
            "valueFrom": "png"
          }
        },
        "out": [
          "dynamic_histogram_read_length",
          "histogram_read_length",
          "length_v_qual_scatter_plot_dot",
          "length_v_qual_scatter_plot_kde",
          "log_transformed_histogram_read_length",
          "report",
          "logfile",
          "nanostats",
          "weighted_histogram_read_length",
          "weighted_log_transform_histogram_read_length",
          "yield_by_length_img"
        ],
        "run": "../bio-cwl-tools/nanoplot/nanoplot.cwl"
      },
      "fastqc": {
        "in": {
          "reads_file": "fetch_fastqs/fastq_file_1",
          "nogroup": {
            "valueFrom": "$(true)"
          },
          "kmers": {
            "valueFrom": "$(7)"
          }
        },
        "out": [
          "zipped_file",
          "summary_file",
          "html_file"
        ],
        "run": "../bio-cwl-tools/fastqc/fastqc_2.cwl"
      },
      "multiqc": {
        "in": {
          "qc_files_array": "fastqc/zipped_file"
        },
        "out": [
          "multiqc_zip",
          "multiqc_html"
        ],
        "run": "../bio-cwl-tools/multiqc/multiqc.cwl"
      },
      "minimap2": {
        "in": {
          "indexFile": "ref_human_genome",
          "fastqFiles": "fetch_fastqs/fastq_file_1",
          "samOutput": {
            "valueFrom": "$(true)"
          }
        },
        "out": [
          "samfile"
        ],
        "run": "../bio-cwl-tools/minimap2/minimap2.cwl"
      },
      "sam2bam": {
        "in": {
          "sam": "minimap2/samfile"
        },
        "out": [
          "bam"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_view_sam2bam.cwl"
      },
      "samtools_fastq": {
        "in": {
          "bam_sorted": "sam2bam/bam"
        },
        "out": [
          "fastq"
        ],
        "run": "../bio-cwl-tools/samtools/samtools_fastq.cwl"
      },
      "rename_multiqc_html": {
        "in": {
          "srcfile": "multiqc/multiqc_html",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_multiqc_zip": {
        "in": {
          "srcfile": "multiqc/multiqc_zip",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_multiqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastqc_summary": {
        "in": {
          "srcfile": "fastqc/summary_file",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastqc.html"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastqc_zip": {
        "in": {
          "srcfile": "fastqc/zipped_file",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self)_fastqc.zip"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_fastq": {
        "in": {
          "srcfile": "samtools_fastq/fastq",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).fastq"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      },
      "rename_bam": {
        "in": {
          "srcfile": "sam2bam/bam",
          "newname": {
            "source": "illumina_accession",
            "valueFrom": "$(self).bam"
          }
        },
        "out": [
          "outfile"
        ],
        "run": "../bio-cwl-tools/util/rename.cwl"
      }
    }
  },
  {
    "path": "PreProcessing/tools/unpack_ref_db.cwl",
    "sha": "d27ed0d48f2948217d1bc95e1777de0cae34e331",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/PreProcessing/tools/unpack_ref_db.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\ndoc: decompression tool using Lempel-Ziv coding (LZ77)\nrequirements:\n  DockerRequirement:\n    dockerPull: alpine:3.9\n\nbaseCommand: [tar, xvzf]\n\n\ninputs:\n  file:\n    type: File\n    inputBinding: {}\n\noutputs:\n  hg_38_fa:\n    type: File\n    outputBinding:\n      glob: static/hg38.fna\n    secondaryFiles:\n      - .fai\n      - .fwt\n      - .amb\n      - .ann\n      - .pac\n      - .sa\n      - .bwt\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'file': {'type': 'File', 'inputBinding': {}}}",
    "cwl_outputs": "{'hg_38_fa': {'type': 'File', 'outputBinding': {'glob': 'static/hg38.fna'}, 'secondaryFiles': ['.fai', '.fwt', '.amb', '.ann', '.pac', '.sa', '.bwt']}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['tar', 'xvzf']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'alpine:3.9'}}",
    "cwl_doc": "decompression tool using Lempel-Ziv coding (LZ77)",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/archive/bowtie2.cwl",
    "sha": "53929051232cf534b1ad450b96c0c5e10a00c0aa",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/bowtie2.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Aligns reads from ATAC-seq or ChIP-seq to an indexed reference genome\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference_index)\nhints:\n#  ResourceRequirement:\n#    coresMin: 4\n#    ramMin: 30000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/bowtie2:2.2.6-2\n  SoftwareRequirement:\n    packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\nbaseCommand: [\"bowtie2\"]\narguments:\n  - valueFrom: --very-sensitive\n    position: 1\n#  - valueFrom: $(runtime.cores) # set the number of threads\n#    prefix: \"-p\"\n#    position: 1\n  - position: 4 # prefix for fastq1, differs for paired/single end\n    valueFrom: |\n      ${\n        if ( inputs.is_paired_end ){\n           return \"-1\";\n        }\n        else {\n          return \"-U\";\n        }\n      }\n  - valueFrom: $(inputs.fastq1.nameroot).sam\n    prefix: \"-S\"\n    position: 6\n#stderr: $(inputs.fastq1.nameroot).bowtie2_stderr # log file\n  \n\ninputs:\n  reference_index:\n    doc: path to the FM-index files for the chosen reference genome\n    type: File\n    secondaryFiles:\n#      - $(self.basename).1.bt2\n      - $(self.nameroot.slice(0,-1))2.bt2\n      - $(self.nameroot.slice(0,-1))3.bt2\n      - $(self.nameroot.slice(0,-1))4.bt2\n      - $(self.nameroot.slice(0,-1))rev.1.bt2\n      - $(self.nameroot.slice(0,-1))rev.2.bt2\n    inputBinding:\n      position: 2\n      prefix: \"-x\"\n      valueFrom: $(self.nameroot.slice(0,-2))\n  fastq1:\n    type: File\n    inputBinding:\n      position: 4\n\n  is_paired_end:\n    type: boolean\n    default: false\n  fastq2:\n    type: File?\n    inputBinding:\n      valueFrom: |\n        ${\n            if ( inputs.is_paired_end ){\n                return self;\n            }\n            else {\n              return null;\n            }\n        }  \n      position: 12\n      prefix: \"-2\"\n  max_mapping_insert_length:\n    doc: usefull for very long fragments, as expected for ATAC\n    type: long?\n    default: 2000\n#    inputBinding:\n#      prefix: --maxins\n#      position: 1\n\n      \noutputs: \n  sam:\n    type: File\n    outputBinding:\n      glob: \"*.sam\"\n#  bowtie2_log:\n#    type: stderr\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference_index': {'doc': 'path to the FM-index files for the chosen reference genome', 'type': 'File', 'secondaryFiles': ['$(self.nameroot.slice(0,-1))2.bt2', '$(self.nameroot.slice(0,-1))3.bt2', '$(self.nameroot.slice(0,-1))4.bt2', '$(self.nameroot.slice(0,-1))rev.1.bt2', '$(self.nameroot.slice(0,-1))rev.2.bt2'], 'inputBinding': {'position': 2, 'prefix': '-x', 'valueFrom': '$(self.nameroot.slice(0,-2))'}}, 'fastq1': {'type': 'File', 'inputBinding': {'position': 4}}, 'is_paired_end': {'type': 'boolean', 'default': False}, 'fastq2': {'type': 'File?', 'inputBinding': {'valueFrom': '${\\n    if ( inputs.is_paired_end ){\\n        return self;\\n    }\\n    else {\\n      return null;\\n    }\\n}  \\n', 'position': 12, 'prefix': '-2'}}, 'max_mapping_insert_length': {'doc': 'usefull for very long fragments, as expected for ATAC', 'type': 'long?', 'default': 2000}}",
    "cwl_outputs": "{'sam': {'type': 'File', 'outputBinding': {'glob': '*.sam'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'kerstenbreuer/bowtie2:2.2.6-2'}, 'SoftwareRequirement': {'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": "[{'valueFrom': '--very-sensitive', 'position': 1}, {'position': 4, 'valueFrom': '${\\n  if ( inputs.is_paired_end ){\\n     return \"-1\";\\n  }\\n  else {\\n    return \"-U\";\\n  }\\n}\\n'}, {'valueFrom': '$(inputs.fastq1.nameroot).sam', 'prefix': '-S', 'position': 6}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'StepInputExpressionRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.reference_index)']}}",
    "cwl_doc": "Aligns reads from ATAC-seq or ChIP-seq to an indexed reference genome\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/archive/draft2_variation.cwl",
    "sha": "02e59c5c25cf28d16c6f8168198077710388533a",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/draft2_variation.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: variation\nlabel: variation\n\ninputs:\n  - id: reference_in\n    type:\n      - File\n      - type: array\n        items: File\n  - id: fastq1\n    type: File\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: min_length_required\n    type: int?\noutputs:\n  - id: outFile\n    outputSource:\n      - picard_markduplicates/outFile\n    type: File\n\nsteps:\n  - id: bowtie2_build\n    in:\n      - id: reference_in\n        source:\n          - reference_in\n    out:\n      - id: indices\n      - id: output_log\n    run: ../bio-cwl-tools/bowtie2/bowtie2_build.cwl\n\n  - id: fastp\n    in:\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: fastq1\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n#      - id: out_fastq2\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  - id: bowtie2\n    in:\n      - id: fastq1\n        source: fastp/out_fastq1\n      - id: reference_index\n        source: bowtie2_build/indices\n    out:\n#      - id: bowtie2_log\n      - id: sam\n    run: ./bowtie2.cwl\n\n  - id: picard_sortsam\n    in:\n      - id: inputFile\n        source: bowtie2/sam\n    out:\n      - id: outFile\n    run: ./picard_sortsam.cwl\n\n  - id: picard_markduplicates\n    in:\n      - id: inputFile\n        source: picard_sortsam/outFile\n    out:\n      - id: outFile\n      - id: metrics_file\n    run: ./picard_markduplicates.cwl\n\nrequirements: []\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "variation",
    "cwl_inputs": "[{'id': 'reference_in', 'type': ['File', {'type': 'array', 'items': 'File'}]}, {'id': 'fastq1', 'type': 'File'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'min_length_required', 'type': 'int?'}]",
    "cwl_outputs": "[{'id': 'outFile', 'outputSource': ['picard_markduplicates/outFile'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "variation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/archive/draft_variation.cwl",
    "sha": "c1b67db373d790db5b25a8842d4655b576734fb1",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/draft_variation.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: variation\nlabel: variation\ninputs:\n  - id: reference_in\n    type:\n      - File\n      - type: array\n        items: File\n\n  - id: fastq1\n    type: File\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: min_length_required\n    type: int?\noutputs: \n  # - id: multiqc_html\n  #   outputSource:\n  #     - multiqc/multiqc_html\n  #   type: File\n  - id: sam\n    outputSource:\n      - bowtie2/sam\n    type: File\nsteps:\n  - id: bowtie2_build\n    in:\n      - id: reference_in\n        source:\n          - reference_in\n    out:\n      - id: indices\n      - id: output_log\n    run: ../bio-cwl-tools/bowtie2/bowtie2_build.cwl\n\n  - id: fastp\n    in:\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: fastq1\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n      # - id: out_fastq2\n    run: ../bio-cwl-tools/fastp/fastp.cwl\n\n  # - id: multiqc\n  #   in:\n  #     - id: qc_files_array\n  #       source:\n  #         - fastp/html_report\n  #   out:\n  #     - id: diree\n  #     - id: multiqc_html\n  #     - id: multiqc_zip\n  #   run: ./multiqc.cwl\n\n  - id: bowtie2\n    in:\n      - id: fastq1\n        source: fastp/out_fastq1\n      - id: reference_index\n        source: bowtie2_build/indices\n    out: \n     # - id: bowtie2_log\n      - id: sam\n    run: ./bowtie2.cwl\n\nrequirements: []\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "variation",
    "cwl_inputs": "[{'id': 'reference_in', 'type': ['File', {'type': 'array', 'items': 'File'}]}, {'id': 'fastq1', 'type': 'File'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'min_length_required', 'type': 'int?'}]",
    "cwl_outputs": "[{'id': 'sam', 'outputSource': ['bowtie2/sam'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "variation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/archive/snpeff_build.cwl",
    "sha": "6dbe2b79fd220fac08845ca0d200e2b6dc1d0062",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/archive/snpeff_build.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nbaseCommand: [snpEff, build]\n\narguments:\n  - -v #verbose\n  - -dataDir /data\n  - -configOption $(inputs.dbname).genome=$(inputs.dbname)\ninputs:\n  - id: dbname\n    type: string\n    inputBinding:\n      prefix: -genbank\n      position: 1000\n\n  - id: bankfile\n    type: File\noutputs:  []\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: biocontainers/snpeff:v4.1k_cv3\n    dockerOutputDirectory: /data/\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: \"$({class: 'Directory', listing: []})\"\n        entryname: $(inputs.dbname)\n        writable: true\n      - entryname: $(inputs.dbname)/genes.gbk\n        entry: $(inputs.bankfile)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'dbname', 'type': 'string', 'inputBinding': {'prefix': '-genbank', 'position': 1000}}, {'id': 'bankfile', 'type': 'File'}]",
    "cwl_outputs": "[]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['snpEff', 'build']",
    "cwl_arguments": "['-v', '-dataDir /data', '-configOption $(inputs.dbname).genome=$(inputs.dbname)']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bowtie2_align.cwl",
    "sha": "964e9386bdc1c17da84ea6a6494268a3ccd78cd9",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bowtie2_align.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n- class: ShellCommandRequirement\n- class: InlineJavascriptRequirement\n  expressionLib:\n  - var default_output_filename = function() {\n        if (Array.isArray(inputs.filelist) && inputs.filelist.length > 0){\n          return inputs.filelist[0].location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n        } else\n          if (inputs.filelist != null){\n            return inputs.filelist.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n          } else\n            if (Array.isArray(inputs.filelist_mates) && inputs.filelist_mates.length > 0){\n              return inputs.filelist_mates[0].location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n            } else\n              if (inputs.filelist_mates != null){\n                return inputs.filelist_mates.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n              } else {\n                return null;\n              }\n    };\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/bowtie2:v2.3.0\n  dockerFile: >\n    $import: ./dockerfiles/bowtie2-Dockerfile\n- class: SoftwareRequirement\n  packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\ninputs:\n\n  indices_file:\n    type: File?\n    doc: File with secondaryFiles containing all the indices\n    inputBinding:\n      position: 81\n      prefix: -x\n      valueFrom: $(self.path.split('.').slice(0,-2).join('.'))\n\n  indices_folder:\n    type: Directory?\n    doc: \"Folder with indices files\"\n    inputBinding:\n      position: 81\n      prefix: '-x'\n      valueFrom: |\n        ${\n            for (var i = 0; i < self.listing.length; i++) {\n                if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2' ||\n                    self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2l'){\n                  return self.listing[i].path.split('.').slice(0,-3).join('.');\n                }\n            }\n            return null;\n        }\n\n  filelist:\n    type:\n    - \"null\"\n    - File\n    - type: array\n      items: File\n    doc: |\n      {-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\n      <m1>       Files with #1 mates, paired with files in <m2>.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n      <m2>       Files with #2 mates, paired with files in <m1>.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n      <r>        Files with unpaired reads.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n    inputBinding:\n      itemSeparator: \",\"\n      position: 83\n\n  filelist_mates:\n    type:\n    - \"null\"\n    - File\n    - type: array\n      items: File\n    inputBinding:\n      itemSeparator: \",\"\n      position: 85\n\n  output_filename:\n    type: string\n    inputBinding:\n      position: 90\n      prefix: \"-S\"\n      valueFrom: |\n        ${\n            if (self == \"\"){\n              return default_output_filename();\n            } else {\n              return self;\n            }\n        }\n    default: \"\"\n    doc: |\n      File for SAM output (default: stdout)\n\n  q:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are FASTQ .fq/.fastq (default)\"\n    inputBinding:\n      position: 1\n      prefix: '-q'\n\n  qseq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are in Illumina's qseq format\"\n    inputBinding:\n      position: 1\n      prefix: '--qseq'\n\n  f:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are (multi-)FASTA .fa/.mfa\"\n    inputBinding:\n      position: 1\n      prefix: '-f'\n\n  raw:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are raw one-sequence-per-line\"\n    inputBinding:\n      position: 1\n      prefix: '-r'\n\n  c:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"<m1>, <m2>, <r> are sequences themselves, not files\"\n    inputBinding:\n      position: 1\n      prefix: '-c'\n\n  s:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      skip the first <int> reads/pairs in the input (none)\n    inputBinding:\n      position: 2\n      prefix: '-s'\n\n  u:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      stop after first <int> reads/pairs (no limit)\n    inputBinding:\n      position: 3\n      prefix: '-u'\n\n  clip_5p_end:\n    type: int?\n    doc: |\n      trim <int> bases from 5'/left end of reads (0)\n    inputBinding:\n      position: 4\n      prefix: '-5'\n\n  clip_3p_end:\n    type: int?\n    doc: |\n      trim <int> bases from 3'/right end of reads (0)\n    inputBinding:\n      position: 5\n      prefix: '-3'\n\n  phred33_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities are Phred+33 (default)\"\n    inputBinding:\n      position: 6\n      prefix: '--phred33'\n\n  phred64_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities are Phred+64\"\n    inputBinding:\n      position: 6\n      prefix: '--phred64'\n\n  integer_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities encoded as space-delimited integers\"\n    inputBinding:\n      position: 6\n      prefix: '--int-quals'\n\n  n:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      max # mismatches in seed alignment; can be 0 or 1 (0)\n    inputBinding:\n      position: 7\n      prefix: '-N'\n\n  l:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      length of seed substrings; must be >3, <32 (22)\n    inputBinding:\n      position: 8\n      prefix: '-L'\n\n  i:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      interval between seed substrings w/r/t read len (S,1,1.15)\n    inputBinding:\n      position: 9\n      prefix: '-i'\n\n  n_ceil:\n    type:\n    - \"null\"\n    - string\n    doc: >\n      func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)\n    inputBinding:\n      position: 10\n      prefix: '--n-ceil'\n\n  dpad:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      include <int> extra ref chars on sides of DP table (15)\n    inputBinding:\n      position: 11\n      prefix: '--dpad'\n\n  gbar:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      disallow gaps within <int> nucs of read extremes (4)\n    inputBinding:\n      position: 12\n      prefix: '--gbar'\n\n  ignore_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      treat all quality values as 30 on Phred scale (off)\n    inputBinding:\n      position: 13\n      prefix: '--ignore-quals'\n\n  nofw:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not align forward (original) version of read (off)\n    inputBinding:\n      position: 14\n      prefix: '--nofw'\n\n  norc:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not align reverse-complement version of read (off)\n    inputBinding:\n      position: 15\n      prefix: '--norc'\n\n  no_1mm_upfront:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments\n    inputBinding:\n      position: 16\n      prefix: '--no-1mm-upfront'\n\n  end_to_end:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      entire read must align; no clipping (on)\n      Options:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n        --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50\n        --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\n        --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 17\n      prefix: '--end-to-end'\n\n  end_to_end_very_fast:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n    inputBinding:\n      position: 18\n      prefix: '--very-fast'\n\n  end_to_end_fast:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n    inputBinding:\n      position: 18\n      prefix: '--fast'\n\n  end_to_end_sensitive:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\n    inputBinding:\n      position: 18\n      prefix: '--sensitive'\n\n  end_to_end_very_sensitive:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 18\n      prefix: '--very-sensitive'\n\n  local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      local alignment; ends might be soft clipped (off)\n      Options:\n        --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\n        --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\n        --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\n        --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 19\n      prefix: '--local'\n\n  local_very_fast_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\n    inputBinding:\n      position: 20\n      prefix: '--very-fast-local'\n\n  local_fast_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\n    inputBinding:\n      position: 20\n      prefix: '--fast-local'\n\n  local_sensitive_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\n    inputBinding:\n      position: 20\n      prefix: '--sensitive-local'\n\n  local_very_sensitive_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 20\n      prefix: '--very-sensitive-local'\n\n  ma:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      match bonus (0 for --end-to-end, 2 for --local)\n    inputBinding:\n      position: 21\n      prefix: '--ma'\n\n  mp:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      max penalty for mismatch; lower qual = lower penalty (6)\n    inputBinding:\n      position: 22\n      prefix: '--mp'\n\n  np:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      penalty for non-A/C/G/Ts in read/ref (1)\n    inputBinding:\n      position: 23\n      prefix: '--np'\n\n  rdg:\n    type:\n    - \"null\"\n    - int[]\n    doc: |\n      read gap open, extend penalties (5,3)\n    inputBinding:\n      position: 24\n      itemSeparator: \",\"\n      prefix: '--rdg'\n\n  rfg:\n    type:\n    - \"null\"\n    - int[]\n    doc: |\n      reference gap open, extend penalties (5,3)\n    inputBinding:\n      position: 25\n      itemSeparator: \",\"\n      prefix: '--rfg'\n\n  score_min:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)\n    inputBinding:\n      position: 26\n      prefix: '--score-min'\n\n  k:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      report up to <int> alns per read; MAPQ not meaningful\n    inputBinding:\n      position: 27\n      prefix: '-k'\n\n  a:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      report all alignments; very slow, MAPQ not meaningful\n    inputBinding:\n      position: 27\n      prefix: '-a'\n\n  d:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      give up extending after <int> failed extends in a row (15)\n    inputBinding:\n      position: 28\n      prefix: '-D'\n\n  r:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      for reads w/ repetitive seeds, try <int> sets of seeds (2)\n    inputBinding:\n      position: 29\n      prefix: '-R'\n\n  minins:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      minimum fragment length (0)\n    inputBinding:\n      position: 30\n      prefix: '--minins'\n\n  maxins:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      maxins fragment length (0)\n    inputBinding:\n      position: 30\n      prefix: '--maxins'\n\n  fr:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--fr'\n\n  rf:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--rf'\n\n  ff:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--ff'\n\n  no_mixed:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      suppress unpaired alignments for paired reads\n    inputBinding:\n      position: 32\n      prefix: '--no-mixed'\n\n  no_discordant:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      suppress discordant alignments for paired reads\n    inputBinding:\n      position: 33\n      prefix: '--no-discordant'\n\n  no_dovetail:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when mates extend past each other\n    inputBinding:\n      position: 34\n      prefix: '--no-dovetail'\n\n  no_contain:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when one mate alignment contains other\n    inputBinding:\n      position: 35\n      prefix: '--no-contain'\n\n  no_overlap:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when mates overlap at all\n    inputBinding:\n      position: 36\n      prefix: '--no-overlap'\n\n  t:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      print wall-clock time taken by search phases\n    inputBinding:\n      position: 37\n      prefix: '-t'\n\n  un:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write unpaired reads that didn't align to <path>\n    inputBinding:\n      position: 38\n      prefix: '--un'\n\n  al:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write unpaired reads that aligned at least once to <path>\n    inputBinding:\n      position: 39\n      prefix: '--al'\n\n  un_conc:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write pairs that didn't align concordantly to <path>\n    inputBinding:\n      position: 40\n      prefix: '--un-conc'\n\n  al_conc:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write pairs that aligned concordantly at least once to <path>\n    inputBinding:\n      position: 41\n      prefix: '--al-conc'\n\n  quiet:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"print nothing to stderr except serious errors\"\n    inputBinding:\n      position: 42\n      prefix: '--quiet'\n\n  met_file:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      send metrics to file at <path> (off)\n    inputBinding:\n      position: 43\n      prefix: '--met-file'\n\n  met_stderr:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"send metrics to stderr (off)\"\n    inputBinding:\n      position: 44\n      prefix: '--met-stderr'\n\n  met:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      report internal counters & metrics every <int> secs (1)\n    inputBinding:\n      position: 45\n      prefix: '--met'\n\n  no_unal:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress SAM records for unaligned reads\"\n    inputBinding:\n      position: 46\n      prefix: '--no-unal'\n\n  no_head:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress header lines, i.e. lines starting with @\"\n    inputBinding:\n      position: 47\n      prefix: '--no-head'\n\n  no_sq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress @SQ header lines\"\n    inputBinding:\n      position: 48\n      prefix: '--no-sq'\n\n  rg_id:\n    type:\n    - \"null\"\n    - string\n    doc: \"set read group id, reflected in @RG line and RG:Z: opt field\"\n    inputBinding:\n      position: 49\n      prefix: '--rg-id'\n\n  rg:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      add <text> (\"lab:value\") to @RG line of SAM header.\n      Note: @RG line only printed when --rg-id is set.\n    inputBinding:\n      position: 50\n      prefix: '--rg'\n\n  omit_sec_seq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"put '*' in SEQ and QUAL fields for secondary alignments\"\n    inputBinding:\n      position: 51\n      prefix: '--omit-sec-seq'\n\n  threads:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      number of alignment threads to launch (1)\n    inputBinding:\n      position: 52\n      prefix: '-p'\n\n  reorder:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      force SAM output order to match order of input reads\n    inputBinding:\n      position: 53\n      prefix: '--reorder'\n\n  mm:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"use memory-mapped I/O for index; many 'bowtie's can share\"\n    inputBinding:\n      position: 54\n      prefix: '--mm'\n\n  qc_filter:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"filter out reads that are bad according to QSEQ filter\"\n    inputBinding:\n      position: 55\n      prefix: '--qc-filter'\n#\n  seed:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      seed for random number generator (0)\n    inputBinding:\n      position: 56\n      prefix: '--seed'\n\n  non_deterministic:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"seed rand. gen. arbitrarily instead of using read attributes\"\n    inputBinding:\n      position: 57\n      prefix: '--non-deterministic'\n\noutputs:\n\n  output:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n           if (inputs.output_filename == \"\"){\n             return default_output_filename();\n           } else {\n             return inputs.output_filename;\n           }\n        }\n\n  output_log:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n           if (inputs.output_filename == \"\"){\n             return default_output_filename().split('.').slice(0,-1).join('.') + \".log\";\n           } else {\n             return inputs.output_filename.split('.').slice(0,-1).join('.') + \".log\";\n           }\n        }\n\nbaseCommand:\n  - bowtie2\n\narguments:\n  - valueFrom: |\n      ${\n        if (inputs.filelist && inputs.filelist_mates){\n          return \"-1\";\n        } else if (inputs.filelist){\n          return \"-U\";\n        } else {\n          return null;\n        }\n      }\n    position: 82\n  - valueFrom: |\n      ${\n        if (inputs.filelist && inputs.filelist_mates){\n          return \"-2\";\n        } else if (inputs.filelist_mates){\n          return \"-U\";\n        } else {\n          return null;\n        }\n      }\n    position: 84\n  - valueFrom: |\n      ${\n        if (inputs.output_filename == \"\"){\n          return ' 2> ' + default_output_filename().split('.').slice(0,-1).join('.') + '.log';\n        } else {\n          return ' 2> ' + inputs.output_filename.split('.').slice(0,-1).join('.') + '.log';\n        }\n      }\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- http://schema.org/version/latest/schema.rdf\n\ns:name: \"bowtie2_align\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:isPartOf:\n  class: s:CreativeWork\n  s:name: Common Workflow Language\n  s:url: http://commonwl.org/\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie aligner to align input FASTQ file(s) to reference genome\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'indices_file': {'type': 'File?', 'doc': 'File with secondaryFiles containing all the indices', 'inputBinding': {'position': 81, 'prefix': '-x', 'valueFrom': \"$(self.path.split('.').slice(0,-2).join('.'))\"}}, 'indices_folder': {'type': 'Directory?', 'doc': 'Folder with indices files', 'inputBinding': {'position': 81, 'prefix': '-x', 'valueFrom': \"${\\n    for (var i = 0; i < self.listing.length; i++) {\\n        if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2' ||\\n            self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2l'){\\n          return self.listing[i].path.split('.').slice(0,-3).join('.');\\n        }\\n    }\\n    return null;\\n}\\n\"}}, 'filelist': {'type': ['null', 'File', {'type': 'array', 'items': 'File'}], 'doc': \"{-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\\n<m1>       Files with #1 mates, paired with files in <m2>.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n<m2>       Files with #2 mates, paired with files in <m1>.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n<r>        Files with unpaired reads.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n\", 'inputBinding': {'itemSeparator': ',', 'position': 83}}, 'filelist_mates': {'type': ['null', 'File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'itemSeparator': ',', 'position': 85}}, 'output_filename': {'type': 'string', 'inputBinding': {'position': 90, 'prefix': '-S', 'valueFrom': '${\\n    if (self == \"\"){\\n      return default_output_filename();\\n    } else {\\n      return self;\\n    }\\n}\\n'}, 'default': '', 'doc': 'File for SAM output (default: stdout)\\n'}, 'q': {'type': ['null', 'boolean'], 'doc': 'query input files are FASTQ .fq/.fastq (default)', 'inputBinding': {'position': 1, 'prefix': '-q'}}, 'qseq': {'type': ['null', 'boolean'], 'doc': \"query input files are in Illumina's qseq format\", 'inputBinding': {'position': 1, 'prefix': '--qseq'}}, 'f': {'type': ['null', 'boolean'], 'doc': 'query input files are (multi-)FASTA .fa/.mfa', 'inputBinding': {'position': 1, 'prefix': '-f'}}, 'raw': {'type': ['null', 'boolean'], 'doc': 'query input files are raw one-sequence-per-line', 'inputBinding': {'position': 1, 'prefix': '-r'}}, 'c': {'type': ['null', 'boolean'], 'doc': '<m1>, <m2>, <r> are sequences themselves, not files', 'inputBinding': {'position': 1, 'prefix': '-c'}}, 's': {'type': ['null', 'int'], 'doc': 'skip the first <int> reads/pairs in the input (none)\\n', 'inputBinding': {'position': 2, 'prefix': '-s'}}, 'u': {'type': ['null', 'int'], 'doc': 'stop after first <int> reads/pairs (no limit)\\n', 'inputBinding': {'position': 3, 'prefix': '-u'}}, 'clip_5p_end': {'type': 'int?', 'doc': \"trim <int> bases from 5'/left end of reads (0)\\n\", 'inputBinding': {'position': 4, 'prefix': '-5'}}, 'clip_3p_end': {'type': 'int?', 'doc': \"trim <int> bases from 3'/right end of reads (0)\\n\", 'inputBinding': {'position': 5, 'prefix': '-3'}}, 'phred33_quals': {'type': ['null', 'boolean'], 'doc': 'qualities are Phred+33 (default)', 'inputBinding': {'position': 6, 'prefix': '--phred33'}}, 'phred64_quals': {'type': ['null', 'boolean'], 'doc': 'qualities are Phred+64', 'inputBinding': {'position': 6, 'prefix': '--phred64'}}, 'integer_quals': {'type': ['null', 'boolean'], 'doc': 'qualities encoded as space-delimited integers', 'inputBinding': {'position': 6, 'prefix': '--int-quals'}}, 'n': {'type': ['null', 'int'], 'doc': 'max # mismatches in seed alignment; can be 0 or 1 (0)\\n', 'inputBinding': {'position': 7, 'prefix': '-N'}}, 'l': {'type': ['null', 'int'], 'doc': 'length of seed substrings; must be >3, <32 (22)\\n', 'inputBinding': {'position': 8, 'prefix': '-L'}}, 'i': {'type': ['null', 'int'], 'doc': 'interval between seed substrings w/r/t read len (S,1,1.15)\\n', 'inputBinding': {'position': 9, 'prefix': '-i'}}, 'n_ceil': {'type': ['null', 'string'], 'doc': 'func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)\\n', 'inputBinding': {'position': 10, 'prefix': '--n-ceil'}}, 'dpad': {'type': ['null', 'int'], 'doc': 'include <int> extra ref chars on sides of DP table (15)\\n', 'inputBinding': {'position': 11, 'prefix': '--dpad'}}, 'gbar': {'type': ['null', 'int'], 'doc': 'disallow gaps within <int> nucs of read extremes (4)\\n', 'inputBinding': {'position': 12, 'prefix': '--gbar'}}, 'ignore_quals': {'type': ['null', 'boolean'], 'doc': 'treat all quality values as 30 on Phred scale (off)\\n', 'inputBinding': {'position': 13, 'prefix': '--ignore-quals'}}, 'nofw': {'type': ['null', 'boolean'], 'doc': 'do not align forward (original) version of read (off)\\n', 'inputBinding': {'position': 14, 'prefix': '--nofw'}}, 'norc': {'type': ['null', 'boolean'], 'doc': 'do not align reverse-complement version of read (off)\\n', 'inputBinding': {'position': 15, 'prefix': '--norc'}}, 'no_1mm_upfront': {'type': ['null', 'boolean'], 'doc': 'do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments\\n', 'inputBinding': {'position': 16, 'prefix': '--no-1mm-upfront'}}, 'end_to_end': {'type': ['null', 'boolean'], 'doc': 'entire read must align; no clipping (on)\\nOptions:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n  --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50\\n  --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\\n  --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 17, 'prefix': '--end-to-end'}}, 'end_to_end_very_fast': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n', 'inputBinding': {'position': 18, 'prefix': '--very-fast'}}, 'end_to_end_fast': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n', 'inputBinding': {'position': 18, 'prefix': '--fast'}}, 'end_to_end_sensitive': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\\n', 'inputBinding': {'position': 18, 'prefix': '--sensitive'}}, 'end_to_end_very_sensitive': {'type': ['null', 'boolean'], 'doc': 'Option for end_to_end:\\n  --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 18, 'prefix': '--very-sensitive'}}, 'local': {'type': ['null', 'boolean'], 'doc': 'local alignment; ends might be soft clipped (off)\\nOptions:\\n  --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\\n  --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\\n  --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\\n  --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 19, 'prefix': '--local'}}, 'local_very_fast_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\\n', 'inputBinding': {'position': 20, 'prefix': '--very-fast-local'}}, 'local_fast_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\\n', 'inputBinding': {'position': 20, 'prefix': '--fast-local'}}, 'local_sensitive_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\\n', 'inputBinding': {'position': 20, 'prefix': '--sensitive-local'}}, 'local_very_sensitive_local': {'type': ['null', 'boolean'], 'doc': 'Option for local:\\n  --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 20, 'prefix': '--very-sensitive-local'}}, 'ma': {'type': ['null', 'int'], 'doc': 'match bonus (0 for --end-to-end, 2 for --local)\\n', 'inputBinding': {'position': 21, 'prefix': '--ma'}}, 'mp': {'type': ['null', 'int'], 'doc': 'max penalty for mismatch; lower qual = lower penalty (6)\\n', 'inputBinding': {'position': 22, 'prefix': '--mp'}}, 'np': {'type': ['null', 'int'], 'doc': 'penalty for non-A/C/G/Ts in read/ref (1)\\n', 'inputBinding': {'position': 23, 'prefix': '--np'}}, 'rdg': {'type': ['null', 'int[]'], 'doc': 'read gap open, extend penalties (5,3)\\n', 'inputBinding': {'position': 24, 'itemSeparator': ',', 'prefix': '--rdg'}}, 'rfg': {'type': ['null', 'int[]'], 'doc': 'reference gap open, extend penalties (5,3)\\n', 'inputBinding': {'position': 25, 'itemSeparator': ',', 'prefix': '--rfg'}}, 'score_min': {'type': ['null', 'string'], 'doc': 'min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)\\n', 'inputBinding': {'position': 26, 'prefix': '--score-min'}}, 'k': {'type': ['null', 'int'], 'doc': 'report up to <int> alns per read; MAPQ not meaningful\\n', 'inputBinding': {'position': 27, 'prefix': '-k'}}, 'a': {'type': ['null', 'boolean'], 'doc': 'report all alignments; very slow, MAPQ not meaningful\\n', 'inputBinding': {'position': 27, 'prefix': '-a'}}, 'd': {'type': ['null', 'int'], 'doc': 'give up extending after <int> failed extends in a row (15)\\n', 'inputBinding': {'position': 28, 'prefix': '-D'}}, 'r': {'type': ['null', 'int'], 'doc': 'for reads w/ repetitive seeds, try <int> sets of seeds (2)\\n', 'inputBinding': {'position': 29, 'prefix': '-R'}}, 'minins': {'type': ['null', 'int'], 'doc': 'minimum fragment length (0)\\n', 'inputBinding': {'position': 30, 'prefix': '--minins'}}, 'maxins': {'type': ['null', 'int'], 'doc': 'maxins fragment length (0)\\n', 'inputBinding': {'position': 30, 'prefix': '--maxins'}}, 'fr': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--fr'}}, 'rf': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--rf'}}, 'ff': {'type': ['null', 'boolean'], 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--ff'}}, 'no_mixed': {'type': ['null', 'boolean'], 'doc': 'suppress unpaired alignments for paired reads\\n', 'inputBinding': {'position': 32, 'prefix': '--no-mixed'}}, 'no_discordant': {'type': ['null', 'boolean'], 'doc': 'suppress discordant alignments for paired reads\\n', 'inputBinding': {'position': 33, 'prefix': '--no-discordant'}}, 'no_dovetail': {'type': ['null', 'boolean'], 'doc': 'not concordant when mates extend past each other\\n', 'inputBinding': {'position': 34, 'prefix': '--no-dovetail'}}, 'no_contain': {'type': ['null', 'boolean'], 'doc': 'not concordant when one mate alignment contains other\\n', 'inputBinding': {'position': 35, 'prefix': '--no-contain'}}, 'no_overlap': {'type': ['null', 'boolean'], 'doc': 'not concordant when mates overlap at all\\n', 'inputBinding': {'position': 36, 'prefix': '--no-overlap'}}, 't': {'type': ['null', 'boolean'], 'doc': 'print wall-clock time taken by search phases\\n', 'inputBinding': {'position': 37, 'prefix': '-t'}}, 'un': {'type': ['null', 'string'], 'doc': \"write unpaired reads that didn't align to <path>\\n\", 'inputBinding': {'position': 38, 'prefix': '--un'}}, 'al': {'type': ['null', 'string'], 'doc': 'write unpaired reads that aligned at least once to <path>\\n', 'inputBinding': {'position': 39, 'prefix': '--al'}}, 'un_conc': {'type': ['null', 'string'], 'doc': \"write pairs that didn't align concordantly to <path>\\n\", 'inputBinding': {'position': 40, 'prefix': '--un-conc'}}, 'al_conc': {'type': ['null', 'string'], 'doc': 'write pairs that aligned concordantly at least once to <path>\\n', 'inputBinding': {'position': 41, 'prefix': '--al-conc'}}, 'quiet': {'type': ['null', 'boolean'], 'doc': 'print nothing to stderr except serious errors', 'inputBinding': {'position': 42, 'prefix': '--quiet'}}, 'met_file': {'type': ['null', 'string'], 'doc': 'send metrics to file at <path> (off)\\n', 'inputBinding': {'position': 43, 'prefix': '--met-file'}}, 'met_stderr': {'type': ['null', 'boolean'], 'doc': 'send metrics to stderr (off)', 'inputBinding': {'position': 44, 'prefix': '--met-stderr'}}, 'met': {'type': ['null', 'int'], 'doc': 'report internal counters & metrics every <int> secs (1)\\n', 'inputBinding': {'position': 45, 'prefix': '--met'}}, 'no_unal': {'type': ['null', 'boolean'], 'doc': 'suppress SAM records for unaligned reads', 'inputBinding': {'position': 46, 'prefix': '--no-unal'}}, 'no_head': {'type': ['null', 'boolean'], 'doc': 'suppress header lines, i.e. lines starting with @', 'inputBinding': {'position': 47, 'prefix': '--no-head'}}, 'no_sq': {'type': ['null', 'boolean'], 'doc': 'suppress @SQ header lines', 'inputBinding': {'position': 48, 'prefix': '--no-sq'}}, 'rg_id': {'type': ['null', 'string'], 'doc': 'set read group id, reflected in @RG line and RG:Z: opt field', 'inputBinding': {'position': 49, 'prefix': '--rg-id'}}, 'rg': {'type': ['null', 'string'], 'doc': 'add <text> (\"lab:value\") to @RG line of SAM header.\\nNote: @RG line only printed when --rg-id is set.\\n', 'inputBinding': {'position': 50, 'prefix': '--rg'}}, 'omit_sec_seq': {'type': ['null', 'boolean'], 'doc': \"put '*' in SEQ and QUAL fields for secondary alignments\", 'inputBinding': {'position': 51, 'prefix': '--omit-sec-seq'}}, 'threads': {'type': ['null', 'int'], 'doc': 'number of alignment threads to launch (1)\\n', 'inputBinding': {'position': 52, 'prefix': '-p'}}, 'reorder': {'type': ['null', 'boolean'], 'doc': 'force SAM output order to match order of input reads\\n', 'inputBinding': {'position': 53, 'prefix': '--reorder'}}, 'mm': {'type': ['null', 'boolean'], 'doc': \"use memory-mapped I/O for index; many 'bowtie's can share\", 'inputBinding': {'position': 54, 'prefix': '--mm'}}, 'qc_filter': {'type': ['null', 'boolean'], 'doc': 'filter out reads that are bad according to QSEQ filter', 'inputBinding': {'position': 55, 'prefix': '--qc-filter'}}, 'seed': {'type': ['null', 'int'], 'doc': 'seed for random number generator (0)\\n', 'inputBinding': {'position': 56, 'prefix': '--seed'}}, 'non_deterministic': {'type': ['null', 'boolean'], 'doc': 'seed rand. gen. arbitrarily instead of using read attributes', 'inputBinding': {'position': 57, 'prefix': '--non-deterministic'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '${\\n   if (inputs.output_filename == \"\"){\\n     return default_output_filename();\\n   } else {\\n     return inputs.output_filename;\\n   }\\n}\\n'}}, 'output_log': {'type': 'File', 'outputBinding': {'glob': '${\\n   if (inputs.output_filename == \"\"){\\n     return default_output_filename().split(\\'.\\').slice(0,-1).join(\\'.\\') + \".log\";\\n   } else {\\n     return inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\') + \".log\";\\n   }\\n}\\n'}}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bowtie2:v2.3.0', 'dockerFile': '$import: ./dockerfiles/bowtie2-Dockerfile\\n'}, {'class': 'SoftwareRequirement', 'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": "[{'valueFrom': '${\\n  if (inputs.filelist && inputs.filelist_mates){\\n    return \"-1\";\\n  } else if (inputs.filelist){\\n    return \"-U\";\\n  } else {\\n    return null;\\n  }\\n}\\n', 'position': 82}, {'valueFrom': '${\\n  if (inputs.filelist && inputs.filelist_mates){\\n    return \"-2\";\\n  } else if (inputs.filelist_mates){\\n    return \"-U\";\\n  } else {\\n    return null;\\n  }\\n}\\n', 'position': 84}, {'valueFrom': '${\\n  if (inputs.output_filename == \"\"){\\n    return \\' 2> \\' + default_output_filename().split(\\'.\\').slice(0,-1).join(\\'.\\') + \\'.log\\';\\n  } else {\\n    return \\' 2> \\' + inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\') + \\'.log\\';\\n  }\\n}\\n', 'position': 100000, 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['http://schema.org/version/latest/schema.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs bowtie aligner to align input FASTQ file(s) to reference genome\n",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie2_align",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": "{'class': 's:CreativeWork', 's:name': 'Common Workflow Language', 's:url': 'http://commonwl.org/'}",
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bowtie2_build.cwl",
    "sha": "164fb007e96b63a6c86c6e9ad2f3ad7f1f77785b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bowtie2_build.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n- class: ShellCommandRequirement\n- class: InlineJavascriptRequirement\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/bowtie2:v2.3.0\n  dockerFile: >\n    $import: ./dockerfiles/bowtie2-Dockerfile\n- class: SoftwareRequirement\n  packages:\n      bowtie2:\n        specs: [ \"http://identifiers.org/biotools/bowtie2\" ]\n        version: [ \"2.3.0\" ]\n\ninputs:\n\n  reference_in:\n    type:\n      - File\n      - type: array\n        items: File\n    doc: >\n      comma-separated list of files with ref sequences\n    inputBinding:\n      itemSeparator: \",\"\n      position: 25\n\n  bt2_index_base:\n    type: string?\n    doc: |\n      write bt2 data to files with this dir/basename\n    inputBinding:\n      position: 26\n      shellQuote: false\n    default: bowtie2_indices\n\n  f:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      reference files are Fasta (default)\n    inputBinding:\n      position: 1\n      prefix: '-f'\n\n  c:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      reference sequences given on cmd line (as <reference_in>)\n    inputBinding:\n      position: 2\n      prefix: '-c'\n\n  large_index:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\n    inputBinding:\n      position: 3\n      prefix: '--large-index'\n\n  noauto:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      disable automatic -p/--bmax/--dcv memory-fitting\n    inputBinding:\n      position: 4\n      prefix: '--noauto'\n\n  packed:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      use packed strings internally; slower, less memory\n    inputBinding:\n      position: 5\n      prefix: '--packed'\n\n  bmax:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      max bucket sz for blockwise suffix-array builder\n    inputBinding:\n      position: 6\n      prefix: '--bmax'\n\n  bmaxdivn:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      max bucket sz as divisor of ref len (default: 4)\n    inputBinding:\n      position: 7\n      prefix: '--bmaxdivn'\n\n  dcv:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      diff-cover period for blockwise (default: 1024)\n    inputBinding:\n      position: 8\n      prefix: '--dcv'\n\n  nodc:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      disable diff-cover (algorithm becomes quadratic)\n    inputBinding:\n      position: 9\n      prefix: '--nodc'\n\n  noref:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      don't build .3/.4 index files\n    inputBinding:\n      position: 10\n      prefix: '--noref'\n\n  justref:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      just build .3/.4 index files\n    inputBinding:\n      position: 11\n      prefix: '--justref'\n\n  offrate:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      SA is sampled every 2^<int> BWT chars (default: 5)\n    inputBinding:\n      position: 12\n      prefix: '--offrate'\n\n  ftabchars:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      # of chars consumed in initial lookup (default: 10)\n    inputBinding:\n      position: 13\n      prefix: '--ftabchars'\n\n  threads:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      # of threads\n    inputBinding:\n      position: 14\n      prefix: '--threads'\n\n  seed:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      seed for random number generator\n    inputBinding:\n      position: 15\n      prefix: '--seed'\n\n  quiet:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      verbose output (for debugging)\n    inputBinding:\n      position: 15\n      prefix: '--quiet'\n\noutputs:\n\n  indices:\n    type: File\n    outputBinding:\n      glob: $(inputs.bt2_index_base + \".1.bt2*\")\n    secondaryFiles: |\n      ${\n        var ext = self.location.split('/').slice(-1)[0].split('.').slice(-1)[0];\n        var basename = self.location.split(\"/\").slice(-1)[0].split(\".\").slice(0, -2).join (\".\");\n        var dirname = self.location.split(\"/\").slice(0,-1).join(\"/\");\n        return [{\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".2.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".3.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".4.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.1.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.2.\" + ext}\n        ]\n      }\n\n  output_log:\n    type: File\n    outputBinding:\n      glob: $(inputs.bt2_index_base + \".log\")\n\nbaseCommand:\n  - bowtie2-build\n\narguments:\n  - valueFrom: $('2> ' + inputs.bt2_index_base + '.log')\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- http://schema.org/version/latest/schema.rdf\n\ns:name: \"bowtie2_build\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:isPartOf:\n  class: s:CreativeWork\n  s:name: Common Workflow Language\n  s:url: http://commonwl.org/\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie2-build to generate indices from input FASTA files",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference_in': {'type': ['File', {'type': 'array', 'items': 'File'}], 'doc': 'comma-separated list of files with ref sequences\\n', 'inputBinding': {'itemSeparator': ',', 'position': 25}}, 'bt2_index_base': {'type': 'string?', 'doc': 'write bt2 data to files with this dir/basename\\n', 'inputBinding': {'position': 26, 'shellQuote': False}, 'default': 'bowtie2_indices'}, 'f': {'type': ['null', 'boolean'], 'doc': 'reference files are Fasta (default)\\n', 'inputBinding': {'position': 1, 'prefix': '-f'}}, 'c': {'type': ['null', 'boolean'], 'doc': 'reference sequences given on cmd line (as <reference_in>)\\n', 'inputBinding': {'position': 2, 'prefix': '-c'}}, 'large_index': {'type': ['null', 'boolean'], 'doc': \"force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\\n\", 'inputBinding': {'position': 3, 'prefix': '--large-index'}}, 'noauto': {'type': ['null', 'boolean'], 'doc': 'disable automatic -p/--bmax/--dcv memory-fitting\\n', 'inputBinding': {'position': 4, 'prefix': '--noauto'}}, 'packed': {'type': ['null', 'boolean'], 'doc': 'use packed strings internally; slower, less memory\\n', 'inputBinding': {'position': 5, 'prefix': '--packed'}}, 'bmax': {'type': ['null', 'int'], 'doc': 'max bucket sz for blockwise suffix-array builder\\n', 'inputBinding': {'position': 6, 'prefix': '--bmax'}}, 'bmaxdivn': {'type': ['null', 'int'], 'doc': 'max bucket sz as divisor of ref len (default: 4)\\n', 'inputBinding': {'position': 7, 'prefix': '--bmaxdivn'}}, 'dcv': {'type': ['null', 'int'], 'doc': 'diff-cover period for blockwise (default: 1024)\\n', 'inputBinding': {'position': 8, 'prefix': '--dcv'}}, 'nodc': {'type': ['null', 'boolean'], 'doc': 'disable diff-cover (algorithm becomes quadratic)\\n', 'inputBinding': {'position': 9, 'prefix': '--nodc'}}, 'noref': {'type': ['null', 'boolean'], 'doc': \"don't build .3/.4 index files\\n\", 'inputBinding': {'position': 10, 'prefix': '--noref'}}, 'justref': {'type': ['null', 'boolean'], 'doc': 'just build .3/.4 index files\\n', 'inputBinding': {'position': 11, 'prefix': '--justref'}}, 'offrate': {'type': ['null', 'int'], 'doc': 'SA is sampled every 2^<int> BWT chars (default: 5)\\n', 'inputBinding': {'position': 12, 'prefix': '--offrate'}}, 'ftabchars': {'type': ['null', 'int'], 'doc': '# of chars consumed in initial lookup (default: 10)\\n', 'inputBinding': {'position': 13, 'prefix': '--ftabchars'}}, 'threads': {'type': ['null', 'int'], 'doc': '# of threads\\n', 'inputBinding': {'position': 14, 'prefix': '--threads'}}, 'seed': {'type': ['null', 'int'], 'doc': 'seed for random number generator\\n', 'inputBinding': {'position': 15, 'prefix': '--seed'}}, 'quiet': {'type': ['null', 'boolean'], 'doc': 'verbose output (for debugging)\\n', 'inputBinding': {'position': 15, 'prefix': '--quiet'}}}",
    "cwl_outputs": "{'indices': {'type': 'File', 'outputBinding': {'glob': '$(inputs.bt2_index_base + \".1.bt2*\")'}, 'secondaryFiles': '${\\n  var ext = self.location.split(\\'/\\').slice(-1)[0].split(\\'.\\').slice(-1)[0];\\n  var basename = self.location.split(\"/\").slice(-1)[0].split(\".\").slice(0, -2).join (\".\");\\n  var dirname = self.location.split(\"/\").slice(0,-1).join(\"/\");\\n  return [{\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".2.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".3.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".4.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.1.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.2.\" + ext}\\n  ]\\n}\\n'}, 'output_log': {'type': 'File', 'outputBinding': {'glob': '$(inputs.bt2_index_base + \".log\")'}}}",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bowtie2:v2.3.0', 'dockerFile': '$import: ./dockerfiles/bowtie2-Dockerfile\\n'}, {'class': 'SoftwareRequirement', 'packages': {'bowtie2': {'specs': ['http://identifiers.org/biotools/bowtie2'], 'version': ['2.3.0']}}}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2-build']",
    "cwl_arguments": "[{'valueFrom': \"$('2> ' + inputs.bt2_index_base + '.log')\", 'position': 100000, 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['http://schema.org/version/latest/schema.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs bowtie2-build to generate indices from input FASTA files",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie2_build",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": "{'class': 's:CreativeWork', 's:name': 'Common Workflow Language', 's:url': 'http://commonwl.org/'}",
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/bwa-index.cwl",
    "sha": "7d78a2916f48cfe09c5f6f17ea4b726359bacf4c",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bwa-index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  DockerRequirement:\n    dockerPull: \"quay.io/biocontainers/bwa:0.7.17--ha92aebf_3\"\n  InlineJavascriptRequirement: {}\n\ninputs:\n  InputFile:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      position: 200\n    \n  IndexName:\n    type: string\n    inputBinding:\n      prefix: \"-p\"\n      #valueFrom: $(self + \".bwt\")\n#Optional arguments\n  algoType:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n          - is\n          - bwtsw\n    inputBinding:\n      prefix: \"-a\"\n\nbaseCommand: [bwa, index]\n\noutputs: \n  index:\n    type: File\n    secondaryFiles: \n   #   - $(inputs.IndexName).bwt.bwt\n      - $(inputs.IndexName).sa\n      - $(inputs.IndexName).pac\n      - $(inputs.IndexName).ann\n      - $(inputs.IndexName).amb\n    outputBinding:\n      glob: $(inputs.IndexName).bwt\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'InputFile': {'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'position': 200}}, 'IndexName': {'type': 'string', 'inputBinding': {'prefix': '-p'}}, 'algoType': {'type': ['null', {'type': 'enum', 'symbols': ['is', 'bwtsw']}], 'inputBinding': {'prefix': '-a'}}}",
    "cwl_outputs": "{'index': {'type': 'File', 'secondaryFiles': ['$(inputs.IndexName).sa', '$(inputs.IndexName).pac', '$(inputs.IndexName).ann', '$(inputs.IndexName).amb'], 'outputBinding': {'glob': '$(inputs.IndexName).bwt'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'index']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bwa:0.7.17--ha92aebf_3'}, 'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/bwa-mem.cwl",
    "sha": "943cb4a62734bdc5b529e2181ca0aa716fef60c7",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/bwa-mem.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  DockerRequirement:\n    dockerPull: \"quay.io/biocontainers/bwa:0.7.17--ha92aebf_3\"\n\ninputs:\n  InputFile:\n    type: File[]\n    format:\n      - edam:format_1930 # FASTA\n      - edam:format_1931 # FASTQ\n    inputBinding:\n      position: 201\n    \n  Index:\n    type: File\n    inputBinding:\n      position: 200\n    secondaryFiles:\n      - .fai\n      - .amb\n      - .ann\n      - .bwt\n      - .pac\n      - .sa\n\n#Optional arguments\n\n  Threads:\n    type: int?\n    inputBinding:\n      prefix: \"-t\"\n\n  MinSeedLen:\n    type: int?\n    inputBinding:\n      prefix: \"-k\"\n  \n  BandWidth:\n    type: int?\n    inputBinding:\n      prefix: \"-w\"\n\n  ZDropoff:\n    type: int?\n    inputBinding:\n      prefix: \"-d\"\n\n  SeedSplitRatio:\n    type: float?\n    inputBinding:\n      prefix: \"-r\"\n    \n  MaxOcc:\n    type: int?\n    inputBinding:\n      prefix: \"-c\"\n\n  MatchScore:\n    type: int?\n    inputBinding:\n      prefix: \"-A\"\n\n  MmPenalty:\n    type: int?\n    inputBinding:\n      prefix: \"-B\"\n\n  GapOpenPen:\n    type: int?\n    inputBinding:\n      prefix: \"-O\"\n\n  GapExtPen:\n    type: int?\n    inputBinding:\n      prefix: \"-E\"\n\n  ClipPen:\n    type: int?\n    inputBinding:\n      prefix: \"-L\"\n\n  UnpairPen:\n    type: int?\n    inputBinding:\n      prefix: \"-U\"\n\n  RgLine:\n    type: string?\n    inputBinding:\n      prefix: \"-R\"\n\n  VerboseLevel:\n    type: int?\n    inputBinding:\n      prefix: \"-v\"\n\n  isOutSecAlign:\n    type: boolean?\n    inputBinding:\n      prefix: \"-a\"\n\n  isMarkShortSplit:\n    type: boolean?\n    inputBinding:\n      prefix: \"-M\"\n\n  isUseHardClip:\n    type: boolean?\n    inputBinding:\n      prefix: \"-H\"\n\n  isMultiplexedPair:\n    type: boolean?\n    inputBinding:\n      prefix: \"-p\"\n      \n\nbaseCommand: [bwa, mem]\n\nstdout: ${ return inputs.InputFile[1].nameroot+\"_unsorted_reads.sam\";}\n\noutputs:\n  reads_stdout:\n    type: stdout\n    format: edam:format_2572 \n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'InputFile': {'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931'], 'inputBinding': {'position': 201}}, 'Index': {'type': 'File', 'inputBinding': {'position': 200}, 'secondaryFiles': ['.fai', '.amb', '.ann', '.bwt', '.pac', '.sa']}, 'Threads': {'type': 'int?', 'inputBinding': {'prefix': '-t'}}, 'MinSeedLen': {'type': 'int?', 'inputBinding': {'prefix': '-k'}}, 'BandWidth': {'type': 'int?', 'inputBinding': {'prefix': '-w'}}, 'ZDropoff': {'type': 'int?', 'inputBinding': {'prefix': '-d'}}, 'SeedSplitRatio': {'type': 'float?', 'inputBinding': {'prefix': '-r'}}, 'MaxOcc': {'type': 'int?', 'inputBinding': {'prefix': '-c'}}, 'MatchScore': {'type': 'int?', 'inputBinding': {'prefix': '-A'}}, 'MmPenalty': {'type': 'int?', 'inputBinding': {'prefix': '-B'}}, 'GapOpenPen': {'type': 'int?', 'inputBinding': {'prefix': '-O'}}, 'GapExtPen': {'type': 'int?', 'inputBinding': {'prefix': '-E'}}, 'ClipPen': {'type': 'int?', 'inputBinding': {'prefix': '-L'}}, 'UnpairPen': {'type': 'int?', 'inputBinding': {'prefix': '-U'}}, 'RgLine': {'type': 'string?', 'inputBinding': {'prefix': '-R'}}, 'VerboseLevel': {'type': 'int?', 'inputBinding': {'prefix': '-v'}}, 'isOutSecAlign': {'type': 'boolean?', 'inputBinding': {'prefix': '-a'}}, 'isMarkShortSplit': {'type': 'boolean?', 'inputBinding': {'prefix': '-M'}}, 'isUseHardClip': {'type': 'boolean?', 'inputBinding': {'prefix': '-H'}}, 'isMultiplexedPair': {'type': 'boolean?', 'inputBinding': {'prefix': '-p'}}}",
    "cwl_outputs": "{'reads_stdout': {'type': 'stdout', 'format': 'edam:format_2572'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'mem']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/bwa:0.7.17--ha92aebf_3'}}",
    "cwl_doc": null,
    "cwl_stdout": "${ return inputs.InputFile[1].nameroot+\"_unsorted_reads.sam\";}",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/fastp.cwl",
    "sha": "3cd5ae8048e83a74041b4f56efb5cc9470710df0",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/fastp.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Modified from https://github.com/nigyta/bact_genome/blob/master/cwl/tool/fastp/fastp.cwl\nrequirements:\n    InlineJavascriptRequirement: {}\nhints:\n    DockerRequirement:\n        dockerPull: quay.io/biocontainers/fastp:0.20.0--hdbcaa40_0\n\nbaseCommand: [fastp]\n\narguments:\n    - prefix: -o\n      valueFrom: $(inputs.fastq1.nameroot).fastp.fastq\n    - |\n      ${\n        if (inputs.fastq2){\n          return '-O';\n        } else {\n          return '';\n        }\n      }\n    - |\n      ${\n        if (inputs.fastq2){\n          return inputs.fastq2.nameroot + \".fastp.fastq\";\n        } else {\n          return '';\n        }\n      }\n\ninputs:\n    fastq1:\n      type: File\n      format:\n        - edam:format_1930 # FASTA\n        - edam:format_1931 # FASTQ\n      inputBinding:\n        prefix: -i\n    fastq2:\n      format:\n        - edam:format_1930 # FASTA\n        - edam:format_1931 # FASTQ\n      type: File?\n      inputBinding:\n        prefix: -I\n    threads:\n      type: int?\n      default: 1\n      inputBinding:\n        prefix: --thread\n    qualified_phred_quality:\n      type: int?\n      default: 20\n      inputBinding:\n        prefix: --qualified_quality_phred\n    unqualified_phred_quality:\n      type: int?\n      default: 20\n      inputBinding:\n        prefix: --unqualified_percent_limit\n    min_length_required:\n      type: int?\n      default: 50\n      inputBinding:\n        prefix: --length_required\n    force_polyg_tail_trimming:\n      type: boolean?\n      inputBinding:\n        prefix: --trim_poly_g\n    disable_trim_poly_g:\n      type: boolean?\n      default: true\n      inputBinding:\n        prefix: --disable_trim_poly_g\n    base_correction:\n      type: boolean?\n      default: true\n      inputBinding:\n        prefix: --correction\n    \n\n\noutputs:\n    out_fastq1:\n       type: File\n       format: $(inputs.fastq1.format)\n       outputBinding:\n           glob: $(inputs.fastq1.nameroot).fastp.fastq\n    out_fastq2:\n       type: File?\n       format: $(inputs.fastq2.format)\n       outputBinding:\n           glob: $(inputs.fastq2.nameroot).fastp.fastq\n    html_report:\n      type: File\n      outputBinding:\n        glob: fastp.html\n        outputEval: |\n           ${\n             self[0].basename = inputs.fastq1.nameroot + '_fastp.html';\n             return self[0]\n            }\n        \n    json_report:\n      type: File\n      outputBinding:\n        glob: fastp.json\n        outputEval: |\n           ${\n              self[0].basename = inputs.fastq1.nameroot + '_fastp.json';\n              return self[0]\n            }\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'fastq1': {'type': 'File', 'format': ['edam:format_1930', 'edam:format_1931'], 'inputBinding': {'prefix': '-i'}}, 'fastq2': {'format': ['edam:format_1930', 'edam:format_1931'], 'type': 'File?', 'inputBinding': {'prefix': '-I'}}, 'threads': {'type': 'int?', 'default': 1, 'inputBinding': {'prefix': '--thread'}}, 'qualified_phred_quality': {'type': 'int?', 'default': 20, 'inputBinding': {'prefix': '--qualified_quality_phred'}}, 'unqualified_phred_quality': {'type': 'int?', 'default': 20, 'inputBinding': {'prefix': '--unqualified_percent_limit'}}, 'min_length_required': {'type': 'int?', 'default': 50, 'inputBinding': {'prefix': '--length_required'}}, 'force_polyg_tail_trimming': {'type': 'boolean?', 'inputBinding': {'prefix': '--trim_poly_g'}}, 'disable_trim_poly_g': {'type': 'boolean?', 'default': True, 'inputBinding': {'prefix': '--disable_trim_poly_g'}}, 'base_correction': {'type': 'boolean?', 'default': True, 'inputBinding': {'prefix': '--correction'}}}",
    "cwl_outputs": "{'out_fastq1': {'type': 'File', 'format': '$(inputs.fastq1.format)', 'outputBinding': {'glob': '$(inputs.fastq1.nameroot).fastp.fastq'}}, 'out_fastq2': {'type': 'File?', 'format': '$(inputs.fastq2.format)', 'outputBinding': {'glob': '$(inputs.fastq2.nameroot).fastp.fastq'}}, 'html_report': {'type': 'File', 'outputBinding': {'glob': 'fastp.html', 'outputEval': \"${\\n  self[0].basename = inputs.fastq1.nameroot + '_fastp.html';\\n  return self[0]\\n }\\n\"}}, 'json_report': {'type': 'File', 'outputBinding': {'glob': 'fastp.json', 'outputEval': \"${\\n   self[0].basename = inputs.fastq1.nameroot + '_fastp.json';\\n   return self[0]\\n }\\n\"}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/fastp:0.20.0--hdbcaa40_0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fastp']",
    "cwl_arguments": "[{'prefix': '-o', 'valueFrom': '$(inputs.fastq1.nameroot).fastp.fastq'}, \"${\\n  if (inputs.fastq2){\\n    return '-O';\\n  } else {\\n    return '';\\n  }\\n}\\n\", '${\\n  if (inputs.fastq2){\\n    return inputs.fastq2.nameroot + \".fastp.fastq\";\\n  } else {\\n    return \\'\\';\\n  }\\n}\\n']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Modified from https://github.com/nigyta/bact_genome/blob/master/cwl/tool/fastp/fastp.cwl\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/get_secondaryfiles.cwl",
    "sha": "94fcbddb77c76ad7bc5a064be4d4ca4fb1c54de4",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/get_secondaryfiles.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.sequence)\n      - $(inputs.bwa_index)\nbaseCommand: [ls]\ninputs:\n  sequence:\n    type: File\n    secondaryFiles: .fai\n\n  bwa_index:\n    type: File\n    secondaryFiles:\n      - $(self.nameroot).ann \n      - $(self.nameroot).amb\n      - $(self.nameroot).pac\n      - $(self.nameroot).sa\n    \noutputs:\n  sequences_with_index: \n    type: File\n    secondaryFiles: \n      - $(inputs.bwa_index.nameroot).bwt\n      - $(inputs.bwa_index.nameroot).sa\n      - $(inputs.bwa_index.nameroot).pac\n      - $(inputs.bwa_index.nameroot).ann\n      - $(inputs.bwa_index.nameroot).amb\n      - $(inputs.sequence.basename).fai\n    outputBinding:\n      glob: $(inputs.sequence.basename)\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'sequence': {'type': 'File', 'secondaryFiles': '.fai'}, 'bwa_index': {'type': 'File', 'secondaryFiles': ['$(self.nameroot).ann', '$(self.nameroot).amb', '$(self.nameroot).pac', '$(self.nameroot).sa']}}",
    "cwl_outputs": "{'sequences_with_index': {'type': 'File', 'secondaryFiles': ['$(inputs.bwa_index.nameroot).bwt', '$(inputs.bwa_index.nameroot).sa', '$(inputs.bwa_index.nameroot).pac', '$(inputs.bwa_index.nameroot).ann', '$(inputs.bwa_index.nameroot).amb', '$(inputs.sequence.basename).fai'], 'outputBinding': {'glob': '$(inputs.sequence.basename)'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ls']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': ['$(inputs.sequence)', '$(inputs.bwa_index)']}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/lofreq_call.cwl",
    "sha": "dfc8aebee10a2f6ceb89c056083e5115d02a4811",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/lofreq_call.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1\n\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n      - $(inputs.reference_index)\n      - $(inputs.reference_fasta)\n      - $(inputs.reads_index)\n\nbaseCommand: [lofreq, call-parallel]\n\narguments:\n  - prefix: --out\n    valueFrom: $(inputs.reads_align.nameroot)_variant.vcf\n    position: 99\n\ninputs:\n  threads:\n    type: int?\n    default: 1\n    inputBinding:\n      prefix: --pp-threads\n      position: 1\n  reference_index:\n    type: File\n  reference_fasta:\n    doc: 'fasta'\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: -f\n      position: 1000\n      valueFrom: $(self.basename)\n\n  call_indels:\n    type: boolean?\n    inputBinding:\n      prefix: --call-indels\n      position: 3\n    doc: \"Enable indel calls (note: preprocess your file to include indel alignment qualities!)\"\n\n  only_indels:\n    type: boolean?\n    inputBinding:\n      prefix: --only-indels\n      position: 4\n    doc: \"Only call indels; no SNVs\"\n\n  bed:\n    label: regions_from_bed\n    type: File?\n    doc: 'List of positions (chr pos) or regions (BED)'\n    inputBinding:\n      prefix: --bed\n\n  region:\n    type: string?\n    doc: 'Limit calls to this region (chrom:start-end)'\n    inputBinding:\n      prefix: --region\n\n  min_bq:\n    label: min_base_quality\n    type: int?\n    default: 6\n    inputBinding:\n      prefix: --min-bq\n    doc: 'Skip any base with baseQ smaller than INT [6]'\n\n  min_alt_bq:\n    label: min_alterne_base_quality\n    type: int?\n    default: 6\n    inputBinding:\n      prefix: --min-alt-bq\n    doc: 'Skip alternate bases with baseQ smaller than INT [6]'\n\n  def_alt_bq:\n    label: def_alt_base_quality\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --def-alt-bq\n    doc: 'Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]'\n\n  min_jq:\n    label: min_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix:  --min-jq\n    doc: 'Skip any base with joinedQ smaller than INT [0]'\n\n  min_alt_jq:\n    label: min_alt_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --min-alt-jq\n    doc: \"Skip alternate bases with joinedQ smaller than INT [0]\"\n\n  def_alt_jq:\n    label: def_alt_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --def-alt-jq\n    doc: \"Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]\"\n\n  no_baq:\n    label: disable_base_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --no-baq\n    doc: 'Disable use of base-alignment quality (BAQ)'\n\n  no_idaq:\n    label: disable_indel_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --no-idaq\n    doc: \"Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)\"\n\n  del_baq:\n    label: delete_base_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --del-baq\n    doc: \"Delete pre-existing BAQ values, i.e. compute even if already present in BAM\"\n\n  no_ext_base_alignment_quality:\n    type: boolean?\n    inputBinding:\n      prefix: --no-ext-baq\n    doc: \"Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)\"\n\n  min_mq:\n    label: min_mapping_quality\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --min-mq\n    doc: \"Skip reads with mapping quality smaller than INT [0]\"\n\n  max_mapping_quality:\n    type: int?\n    default: 255\n    inputBinding:\n      prefix: --max-mq\n    doc: \"Cap mapping quality at INT [255]\"\n\n  no_mapping_quality:\n    type: boolean?\n    inputBinding:\n      prefix: --no-mq\n    doc: \"Don't merge mapping quality in LoFreq's model\"\n\n  enable_source_qual:\n    type: boolean?\n    inputBinding:\n      prefix: --src-qual\n    doc: 'Enable computation of source quality'\n\n  ignore_vcf:\n    type: File[]?\n    inputBinding:\n      prefix: --ign-vcf\n    doc: \"Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas\"\n\n  replace_non_match:\n    type: int?\n    default: -1\n    inputBinding:\n      prefix: --def-nm-q\n    doc: 'If >= 0, then replace non-match base qualities with this default value [-1]'\n\n  pvalue_cutoff:\n    type: float?\n    default: 0.01\n    inputBinding:\n      prefix: --sig\n    doc: \"P-Value cutoff / significance level [0.010000]\"\n\n  bonferroni:\n    type: string?\n    default: 'dynamic'\n    inputBinding:\n      prefix: --bonf\n    doc: \"Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']\"\n\n  min_cov:\n    type: int?\n    default: 10\n    inputBinding:\n      prefix: --min-cov\n      position: 2\n    doc: \"Test only positions having at least this coverage [1] (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)\"\n\n  max_depth_cov:\n    type: int?\n    default: 1000000\n    inputBinding:\n      prefix: --max-depth\n    doc: \"Cap coverage at this depth [1000000]\"\n\n  illumina_1_3:\n    type: boolean?\n    inputBinding:\n      prefix: --illumina-1.3\n    doc: \"Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded\"\n\n  use_orphan:\n    type: boolean?\n    inputBinding:\n      prefix: --use-orphan\n    doc: \"Count anomalous read pairs (i.e. where mate is not aligned properly)\"\n\n  no_default_filter:\n    type: boolean?\n    doc: \"Don't run default lofreq filter automatically after calling variants\"\n    inputBinding:\n      prefix: --no-default-filter\n    # Other options \n    # --plp-summary-only      No variant calling. Just output pileup summary per column\n    # --force-overwrite       Overwrite any existing output\n    # --verbose               Be verbose\n    # --debug                 Enable debugging\n\n  reads_align:\n    doc: 'bam'\n    type: File\n    format: edam:format_2572  # BAM\n    inputBinding:\n      position: 1001\n      valueFrom: $(self.basename)\n\n  reads_index:\n    doc: bai\n    type: File\n\noutputs:\n  vcf:\n    type: File\n    format: edam:format_3016  # VCF\n    outputBinding:\n      glob: \"*.vcf\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'threads': {'type': 'int?', 'default': 1, 'inputBinding': {'prefix': '--pp-threads', 'position': 1}}, 'reference_index': {'type': 'File'}, 'reference_fasta': {'doc': 'fasta', 'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'prefix': '-f', 'position': 1000, 'valueFrom': '$(self.basename)'}}, 'call_indels': {'type': 'boolean?', 'inputBinding': {'prefix': '--call-indels', 'position': 3}, 'doc': 'Enable indel calls (note: preprocess your file to include indel alignment qualities!)'}, 'only_indels': {'type': 'boolean?', 'inputBinding': {'prefix': '--only-indels', 'position': 4}, 'doc': 'Only call indels; no SNVs'}, 'bed': {'label': 'regions_from_bed', 'type': 'File?', 'doc': 'List of positions (chr pos) or regions (BED)', 'inputBinding': {'prefix': '--bed'}}, 'region': {'type': 'string?', 'doc': 'Limit calls to this region (chrom:start-end)', 'inputBinding': {'prefix': '--region'}}, 'min_bq': {'label': 'min_base_quality', 'type': 'int?', 'default': 6, 'inputBinding': {'prefix': '--min-bq'}, 'doc': 'Skip any base with baseQ smaller than INT [6]'}, 'min_alt_bq': {'label': 'min_alterne_base_quality', 'type': 'int?', 'default': 6, 'inputBinding': {'prefix': '--min-alt-bq'}, 'doc': 'Skip alternate bases with baseQ smaller than INT [6]'}, 'def_alt_bq': {'label': 'def_alt_base_quality', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--def-alt-bq'}, 'doc': 'Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]'}, 'min_jq': {'label': 'min_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-jq'}, 'doc': 'Skip any base with joinedQ smaller than INT [0]'}, 'min_alt_jq': {'label': 'min_alt_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-alt-jq'}, 'doc': 'Skip alternate bases with joinedQ smaller than INT [0]'}, 'def_alt_jq': {'label': 'def_alt_joinedq', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--def-alt-jq'}, 'doc': 'Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]'}, 'no_baq': {'label': 'disable_base_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--no-baq'}, 'doc': 'Disable use of base-alignment quality (BAQ)'}, 'no_idaq': {'label': 'disable_indel_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--no-idaq'}, 'doc': \"Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)\"}, 'del_baq': {'label': 'delete_base_alignment_quality', 'type': 'boolean?', 'inputBinding': {'prefix': '--del-baq'}, 'doc': 'Delete pre-existing BAQ values, i.e. compute even if already present in BAM'}, 'no_ext_base_alignment_quality': {'type': 'boolean?', 'inputBinding': {'prefix': '--no-ext-baq'}, 'doc': \"Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)\"}, 'min_mq': {'label': 'min_mapping_quality', 'type': 'int?', 'default': 0, 'inputBinding': {'prefix': '--min-mq'}, 'doc': 'Skip reads with mapping quality smaller than INT [0]'}, 'max_mapping_quality': {'type': 'int?', 'default': 255, 'inputBinding': {'prefix': '--max-mq'}, 'doc': 'Cap mapping quality at INT [255]'}, 'no_mapping_quality': {'type': 'boolean?', 'inputBinding': {'prefix': '--no-mq'}, 'doc': \"Don't merge mapping quality in LoFreq's model\"}, 'enable_source_qual': {'type': 'boolean?', 'inputBinding': {'prefix': '--src-qual'}, 'doc': 'Enable computation of source quality'}, 'ignore_vcf': {'type': 'File[]?', 'inputBinding': {'prefix': '--ign-vcf'}, 'doc': 'Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas'}, 'replace_non_match': {'type': 'int?', 'default': -1, 'inputBinding': {'prefix': '--def-nm-q'}, 'doc': 'If >= 0, then replace non-match base qualities with this default value [-1]'}, 'pvalue_cutoff': {'type': 'float?', 'default': 0.01, 'inputBinding': {'prefix': '--sig'}, 'doc': 'P-Value cutoff / significance level [0.010000]'}, 'bonferroni': {'type': 'string?', 'default': 'dynamic', 'inputBinding': {'prefix': '--bonf'}, 'doc': \"Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']\"}, 'min_cov': {'type': 'int?', 'default': 10, 'inputBinding': {'prefix': '--min-cov', 'position': 2}, 'doc': 'Test only positions having at least this coverage [1] (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)'}, 'max_depth_cov': {'type': 'int?', 'default': 1000000, 'inputBinding': {'prefix': '--max-depth'}, 'doc': 'Cap coverage at this depth [1000000]'}, 'illumina_1_3': {'type': 'boolean?', 'inputBinding': {'prefix': '--illumina-1.3'}, 'doc': 'Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded'}, 'use_orphan': {'type': 'boolean?', 'inputBinding': {'prefix': '--use-orphan'}, 'doc': 'Count anomalous read pairs (i.e. where mate is not aligned properly)'}, 'no_default_filter': {'type': 'boolean?', 'doc': \"Don't run default lofreq filter automatically after calling variants\", 'inputBinding': {'prefix': '--no-default-filter'}}, 'reads_align': {'doc': 'bam', 'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {'position': 1001, 'valueFrom': '$(self.basename)'}}, 'reads_index': {'doc': 'bai', 'type': 'File'}}",
    "cwl_outputs": "{'vcf': {'type': 'File', 'format': 'edam:format_3016', 'outputBinding': {'glob': '*.vcf'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lofreq', 'call-parallel']",
    "cwl_arguments": "[{'prefix': '--out', 'valueFrom': '$(inputs.reads_align.nameroot)_variant.vcf', 'position': 99}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/lofreq_viterbi.cwl",
    "sha": "24c212c10564e095d164ef3f9a9879a2b113df00",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/lofreq_viterbi.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: \"viterbi: Viterbi realignment\"\ndoc: |\n  Probabilistic realignment of your already mapped reads, which corrects\n  mapping errors (run right after mapping). Not recommended for non-Illumina\n  data.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference)\n    \nbaseCommand: [lofreq, viterbi]\n\narguments:\n  - prefix: --out\n    valueFrom: $(inputs.reads.nameroot)_realigned.bam\n\ninputs:\n  reference:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: --ref\n      \n  reads:  \n    type: File\n    format: edam:format_2572  # BAM\n    inputBinding: {}\n\n  keepflags:\n    type: boolean?\n    label: Don't delete flags MC, MD, NM, and A?\n    doc: |\n      These flags are all prone to getting invalidated during realignment.\n      Keep them only if you know what you are doing.\n    inputBinding:\n      prefix: --keepflags\n    default: false\n      \n  defqual:\n    type: int?\n    inputBinding:\n      prefix: --defqual\noutputs:\n  realigned:\n    type: File\n    format: edam:format_2572  # BAM\n    outputBinding:\n      glob: $(inputs.reads.nameroot)_realigned.bam\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'reference': {'type': 'File', 'format': 'edam:format_1929', 'inputBinding': {'prefix': '--ref'}}, 'reads': {'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {}}, 'keepflags': {'type': 'boolean?', 'label': \"Don't delete flags MC, MD, NM, and A?\", 'doc': 'These flags are all prone to getting invalidated during realignment.\\nKeep them only if you know what you are doing.\\n', 'inputBinding': {'prefix': '--keepflags'}, 'default': False}, 'defqual': {'type': 'int?', 'inputBinding': {'prefix': '--defqual'}}}",
    "cwl_outputs": "{'realigned': {'type': 'File', 'format': 'edam:format_2572', 'outputBinding': {'glob': '$(inputs.reads.nameroot)_realigned.bam'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lofreq', 'viterbi']",
    "cwl_arguments": "[{'prefix': '--out', 'valueFrom': '$(inputs.reads.nameroot)_realigned.bam'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.reference)']}}",
    "cwl_doc": "Probabilistic realignment of your already mapped reads, which corrects\nmapping errors (run right after mapping). Not recommended for non-Illumina\ndata.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "viterbi: Viterbi realignment",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/mergetab.cwl",
    "sha": "9f5853f0dc0257316b57ed0f22cd1e9ad28f7671",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/mergetab.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nrequirements:\n  InlineJavascriptRequirement: {}\nbaseCommand: [ls]\ninputs:\n  out_fastq1: File\n  out_fastq2: File\noutputs:\n  tab:\n    type: File[]\n    outputBinding:\n      outputEval: |\n              ${var tab=[]\n                tab.push(inputs.out_fastq1)\n                tab.push(inputs.out_fastq2)\n                return tab;\n               } \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'out_fastq1': 'File', 'out_fastq2': 'File'}",
    "cwl_outputs": "{'tab': {'type': 'File[]', 'outputBinding': {'outputEval': '${var tab=[]\\n  tab.push(inputs.out_fastq1)\\n  tab.push(inputs.out_fastq2)\\n  return tab;\\n } \\n'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ls']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/multiqc.cwl",
    "sha": "71e2b5a5d68dd9d5303c7dc7e44b2b1e6db81ddb",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/multiqc.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Run multiqc on log files from supported bioinformatic tools.\n  26/04/2020: Fixed output filenames, added support for a single input file in qc_files_array (Miguel Boland)\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    # This step is necessary since the input files\n    # must be loaded into the working directory as there\n    # is no way to specify the input file directly on the\n    # command line.\n    listing: |\n      ${// script merges the to input arrays\n        // into one array that fulfills the type \n        // requirement for \"listing\", which is\n        // \"{type: array, items: [File, Directory]}\"\n\n        var qc_files_array = inputs.qc_files_array;\n        var qc_files_array_of_array = inputs.qc_files_array_of_array;\n        var output_array = [];\n\n        // add items of the qc_files_array to the output_array\n        if ( qc_files_array != null ){\n          // Fix to allow single qc_file_array\n          if (qc_files_array.length === undefined){\n            output_array.push(qc_files_array)\n          } else {\n            for (var i=0; i<qc_files_array.length; i++){\n              output_array.push(qc_files_array[i])\n            }\n          }\n        }\n\n        // add items of the qc_files_array_of_array to the output_array\n        if ( qc_files_array_of_array != null ){\n          for (var i=0; i<qc_files_array_of_array.length; i++){ \n            for (var ii=0; ii<qc_files_array_of_array[i].length; ii++){\n              output_array.push(qc_files_array_of_array[i][ii])\n            }\n          }\n        }\n\n        return output_array\n      }\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/multiqc:1.7\n  \n\nbaseCommand: [\"multiqc\"]\narguments:\n  - valueFrom: --zip-data-dir\n    position: 1\n  - valueFrom: \"log_filesize_limit: 100000000\"\n    position: 1\n    prefix: --cl_config\n  - valueFrom: $(runtime.outdir)\n    position: 2\n    prefix: --outdir\n  - valueFrom: $(runtime.outdir)\n    position: 4\n  \ninputs:\n  qc_files_array:\n    doc: |\n      qc files which shall be part of the multiqc summary;\n      optional, only one of qc_files_array or qc_files_array_of_array \n      must be provided\n    type:\n      - \"null\"\n      - File\n      - type: array\n        items: File\n  qc_files_array_of_array:\n    doc: |\n      qc files which shall be part of the multiqc summary;\n      optional, only one of qc_files_array or qc_files_array_of_array \n      must be provided\n    type:\n      - \"null\"\n      - type: array\n        items: \n          type: array\n          items: File\n  report_name:\n    doc: name used for the html report and the corresponding zip file\n    type: string\n    default: multiqc\n    inputBinding:\n      prefix: --filename\n      position: 3\n      \noutputs:\n  multiqc_zip:\n    type: File\n    outputBinding:\n      glob: $(inputs.report_name)_data.zip\n  multiqc_html:\n    type: File\n    outputBinding:\n      glob: $(inputs.report_name).html\n  diree:\n    type: Directory\n    outputBinding:\n      glob: .\n#  multiqc_json:\n#    type: File\n#    outputBinding:\n#      glob: multiqc_data/$(inputs.report_name).json\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'qc_files_array': {'doc': 'qc files which shall be part of the multiqc summary;\\noptional, only one of qc_files_array or qc_files_array_of_array \\nmust be provided\\n', 'type': ['null', 'File', {'type': 'array', 'items': 'File'}]}, 'qc_files_array_of_array': {'doc': 'qc files which shall be part of the multiqc summary;\\noptional, only one of qc_files_array or qc_files_array_of_array \\nmust be provided\\n', 'type': ['null', {'type': 'array', 'items': {'type': 'array', 'items': 'File'}}]}, 'report_name': {'doc': 'name used for the html report and the corresponding zip file', 'type': 'string', 'default': 'multiqc', 'inputBinding': {'prefix': '--filename', 'position': 3}}}",
    "cwl_outputs": "{'multiqc_zip': {'type': 'File', 'outputBinding': {'glob': '$(inputs.report_name)_data.zip'}}, 'multiqc_html': {'type': 'File', 'outputBinding': {'glob': '$(inputs.report_name).html'}}, 'diree': {'type': 'Directory', 'outputBinding': {'glob': '.'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 10000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/multiqc:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['multiqc']",
    "cwl_arguments": "[{'valueFrom': '--zip-data-dir', 'position': 1}, {'valueFrom': 'log_filesize_limit: 100000000', 'position': 1, 'prefix': '--cl_config'}, {'valueFrom': '$(runtime.outdir)', 'position': 2, 'prefix': '--outdir'}, {'valueFrom': '$(runtime.outdir)', 'position': 4}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}, 'InitialWorkDirRequirement': {'listing': '${// script merges the to input arrays\\n  // into one array that fulfills the type \\n  // requirement for \"listing\", which is\\n  // \"{type: array, items: [File, Directory]}\"\\n\\n  var qc_files_array = inputs.qc_files_array;\\n  var qc_files_array_of_array = inputs.qc_files_array_of_array;\\n  var output_array = [];\\n\\n  // add items of the qc_files_array to the output_array\\n  if ( qc_files_array != null ){\\n    // Fix to allow single qc_file_array\\n    if (qc_files_array.length === undefined){\\n      output_array.push(qc_files_array)\\n    } else {\\n      for (var i=0; i<qc_files_array.length; i++){\\n        output_array.push(qc_files_array[i])\\n      }\\n    }\\n  }\\n\\n  // add items of the qc_files_array_of_array to the output_array\\n  if ( qc_files_array_of_array != null ){\\n    for (var i=0; i<qc_files_array_of_array.length; i++){ \\n      for (var ii=0; ii<qc_files_array_of_array[i].length; ii++){\\n        output_array.push(qc_files_array_of_array[i][ii])\\n      }\\n    }\\n  }\\n\\n  return output_array\\n}\\n'}}",
    "cwl_doc": "Run multiqc on log files from supported bioinformatic tools.\n26/04/2020: Fixed output filenames, added support for a single input file in qc_files_array (Miguel Boland)\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/picard_MarkDuplicates.cwl",
    "sha": "a5a26de7996a256844ffedeabce8d7cb391cc21e",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/picard_MarkDuplicates.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Removal of duplicates from aligned reads.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\n \nbaseCommand: [ picard, MarkDuplicates ]\n\narguments:\n  - OUTPUT=$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)\n  - METRICS_FILE=$(inputs.alignments.nameroot)_markduplicates.metrics\n\nstderr: $(inputs.alignments.nameroot).markduplicates.log\n\ninputs:\n  alignments:\n    doc: SAM or BAM format alignment file\n    format:\n      - edam:format_2573  # SAM\n      - edam:format_2572  # BAM\n    type: File\n    inputBinding:\n      prefix: \"INPUT=\"\n      separate: false\n\n  alignments_are_sorted:\n    type: boolean\n    inputBinding:\n      prefix: ASSUME_SORTED=TRUE\n\n  remove_duplicates:\n    doc: |\n     If true do not write duplicates to the output file instead of writing them\n     with appropriate flags set.\n    type: boolean\n    inputBinding:\n      prefix: REMOVE_DUPLICATES=TRUE\n\n  validation_stringency:\n    type:\n     - 'null'\n     - type: enum\n       symbols:\n        - STRICT\n        - LENIENT\n        - SILENT\n    inputBinding:\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n\n  comment:\n    doc: Comment(s) to include in the output file's header\n    type:\n     - 'null'\n     - type: array\n       items: string\n       inputBinding:\n         prefix: COMMENT=\n         separate: false\n  duplicate_scoring_strategy:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n    inputBinding:\n      prefix: DUPLICATE_SCORING_STRATEGY=\n      separate: false\n  read_name_regex:\n    type: string?\n    inputBinding:\n      prefix: READ_NAME_REGEX=\n      separate: false\n  optical_duplicate_pixel_distance:\n    type: int?\n    default: 100\n    doc: '(0;500)'\n    inputBinding:\n      prefix: OPTICAL_DUPLICATE_PIXEL_DISTANCE=\n      separate: false\n  barcode_tag:\n    type: string?\n    inputBinding:\n      prefix: BARCODE_TAG=\n      separate: false\noutputs:\n  alignments:\n    type: File\n    format: $(inputs.alignments.format)\n    outputBinding:\n      glob: $(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)\n  log:\n    type: stderr\n  metrics:\n    type: File\n    outputBinding:\n      glob: $(inputs.alignments.nameroot)_markduplicates.metrics\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'alignments': {'doc': 'SAM or BAM format alignment file', 'format': ['edam:format_2573', 'edam:format_2572'], 'type': 'File', 'inputBinding': {'prefix': 'INPUT=', 'separate': False}}, 'alignments_are_sorted': {'type': 'boolean', 'inputBinding': {'prefix': 'ASSUME_SORTED=TRUE'}}, 'remove_duplicates': {'doc': 'If true do not write duplicates to the output file instead of writing them\\nwith appropriate flags set.\\n', 'type': 'boolean', 'inputBinding': {'prefix': 'REMOVE_DUPLICATES=TRUE'}}, 'validation_stringency': {'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}], 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}}, 'comment': {'doc': \"Comment(s) to include in the output file's header\", 'type': ['null', {'type': 'array', 'items': 'string', 'inputBinding': {'prefix': 'COMMENT=', 'separate': False}}]}, 'duplicate_scoring_strategy': {'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}], 'inputBinding': {'prefix': 'DUPLICATE_SCORING_STRATEGY=', 'separate': False}}, 'read_name_regex': {'type': 'string?', 'inputBinding': {'prefix': 'READ_NAME_REGEX=', 'separate': False}}, 'optical_duplicate_pixel_distance': {'type': 'int?', 'default': 100, 'doc': '(0;500)', 'inputBinding': {'prefix': 'OPTICAL_DUPLICATE_PIXEL_DISTANCE=', 'separate': False}}, 'barcode_tag': {'type': 'string?', 'inputBinding': {'prefix': 'BARCODE_TAG=', 'separate': False}}}",
    "cwl_outputs": "{'alignments': {'type': 'File', 'format': '$(inputs.alignments.format)', 'outputBinding': {'glob': '$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)'}}, 'log': {'type': 'stderr'}, 'metrics': {'type': 'File', 'outputBinding': {'glob': '$(inputs.alignments.nameroot)_markduplicates.metrics'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'MarkDuplicates']",
    "cwl_arguments": "['OUTPUT=$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)', 'METRICS_FILE=$(inputs.alignments.nameroot)_markduplicates.metrics']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": "Removal of duplicates from aligned reads.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "$(inputs.alignments.nameroot).markduplicates.log",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/picard_SortSam.cwl",
    "sha": "855d069305a6233c0cc1acd8eb13fb86621d600b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/picard_SortSam.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\nrequirements:\n  InlineJavascriptRequirement: {}\n\nbaseCommand: [ picard, SortSam ]\n\narguments:\n  - prefix: OUTPUT=\n    separate: false\n    valueFrom: |\n      ${ if(inputs.sort_order == \"coordinate\") { return (inputs.alignments.nameroot)+\".bam\";} else { return (inputs.alignments.nameroot)+\".sam\"; } }\n\ninputs:\n  alignments:\n    type: File\n    inputBinding:\n      prefix: INPUT=\n      separate: false\n\n  sort_order:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n    default: coordinate\n    doc: 'coordinate (bam) or queryname (sam)'\n    inputBinding:\n      prefix: SORT_ORDER=\n      separate: false\n\n  validation_stringency:\n    default: LENIENT\n    doc: Validation stringency for all SAM files read by this program.  Setting stringency\n      to SILENT can improve performance when processing a BAM file in which variable-length\n      data (read, qualities, tags) do not otherwise need to be decoded.\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - STRICT\n      - LENIENT\n      - SILENT\n    inputBinding:\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n\noutputs:\n  sorted_alignments:\n    type: File\n    format: |-\n      ${ if(inputs.sort_order == \"coordinate\") { return \"http://edamontology.org/format_2572\";} else { return \"http://edamontology.org/format_2573\"; } }\n    outputBinding:\n      glob: '*.*am'\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'alignments': {'type': 'File', 'inputBinding': {'prefix': 'INPUT=', 'separate': False}}, 'sort_order': {'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}], 'default': 'coordinate', 'doc': 'coordinate (bam) or queryname (sam)', 'inputBinding': {'prefix': 'SORT_ORDER=', 'separate': False}}, 'validation_stringency': {'default': 'LENIENT', 'doc': 'Validation stringency for all SAM files read by this program.  Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded.', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}], 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}}}",
    "cwl_outputs": "{'sorted_alignments': {'type': 'File', 'format': '${ if(inputs.sort_order == \"coordinate\") { return \"http://edamontology.org/format_2572\";} else { return \"http://edamontology.org/format_2573\"; } }', 'outputBinding': {'glob': '*.*am'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'SortSam']",
    "cwl_arguments": "[{'prefix': 'OUTPUT=', 'separate': False, 'valueFrom': '${ if(inputs.sort_order == \"coordinate\") { return (inputs.alignments.nameroot)+\".bam\";} else { return (inputs.alignments.nameroot)+\".sam\"; } }\\n'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_faidx.cwl",
    "sha": "71b673244082637c43512f8609cdb6589c656b28",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_faidx.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.2-0\nrequirements:\n  InitialWorkDirRequirement:\n    listing: [ $(inputs.sequences) ]\n\nbaseCommand: [ samtools, faidx ]\n\ninputs:\n  sequences:\n    type: File\n    doc: Input FASTA file\n    format: edam:format_1929\n\narguments:\n   - $(inputs.sequences.basename)\n\noutputs:\n  sequences_with_index:\n    type: File\n    format: $(inputs.sequences.format)\n    secondaryFiles:\n     - .fai\n    outputBinding:\n      glob: $(inputs.sequences.basename)\n  sequences_index:\n    type: File\n    outputBinding:\n      glob: $(inputs.sequences.basename).fai\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'sequences': {'type': 'File', 'doc': 'Input FASTA file', 'format': 'edam:format_1929'}}",
    "cwl_outputs": "{'sequences_with_index': {'type': 'File', 'format': '$(inputs.sequences.format)', 'secondaryFiles': ['.fai'], 'outputBinding': {'glob': '$(inputs.sequences.basename)'}}, 'sequences_index': {'type': 'File', 'outputBinding': {'glob': '$(inputs.sequences.basename).fai'}}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'quay.io/biocontainers/samtools:1.2-0'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'faidx']",
    "cwl_arguments": "['$(inputs.sequences.basename)']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.sequences)']}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_index.cwl",
    "sha": "40ca889caec96fa1d5a6ee7f9147cade35b9515b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Indexing BAM.\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing: \n      - $(inputs.bam_sorted)\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [\"samtools\", \"index\"]\narguments:\n  - valueFrom: -b  # specifies that index is created in bai format\n    position: 1\n\ninputs:\n  bam_sorted:\n    doc: sorted bam input file\n    type: File\n    inputBinding:\n      position: 2\n\noutputs:\n  bam_sorted_indexed:\n    type: File\n    secondaryFiles: .bai\n    outputBinding:\n      glob: $(inputs.bam_sorted.basename)\n      \n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam_sorted': {'doc': 'sorted bam input file', 'type': 'File', 'inputBinding': {'position': 2}}}",
    "cwl_outputs": "{'bam_sorted_indexed': {'type': 'File', 'secondaryFiles': '.bai', 'outputBinding': {'glob': '$(inputs.bam_sorted.basename)'}}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 20000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'index']",
    "cwl_arguments": "[{'valueFrom': '-b', 'position': 1}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InitialWorkDirRequirement': {'listing': ['$(inputs.bam_sorted)']}}",
    "cwl_doc": "Indexing BAM.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_sort.cwl",
    "sha": "36f47b4a01ceff3c15f1b9a28b324fe128a520e0",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_sort.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: Sort a bam file by read names.\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 4\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [\"samtools\", \"sort\"]\narguments:\n  - valueFrom: $(runtime.cores)\n    prefix: -@\n  - prefix: -m\n    valueFrom: ${ return(parseInt(runtime.ram/runtime.cores-100).toString() + \"M\") }\n    position: 1\n    # specifies the allowed maximal memory usage per thread before\n    # samtools start to outsource memory to temporary files\n\ninputs:\n  bam_unsorted:\n    doc: aligned reads to be checked in sam or bam format\n    type: File\n    format: edam:format_2572\n    inputBinding:\n      position: 2\n  by_name:\n    doc: If true, will sort by name, otherwise will sort by genomic position\n    type: boolean\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -n\n\nstdout: $(inputs.bam_unsorted.basename)\n\noutputs:\n  bam_sorted:\n    type: stdout\n    format: edam:format_2572 \n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam_unsorted': {'doc': 'aligned reads to be checked in sam or bam format', 'type': 'File', 'format': 'edam:format_2572', 'inputBinding': {'position': 2}}, 'by_name': {'doc': 'If true, will sort by name, otherwise will sort by genomic position', 'type': 'boolean', 'default': False, 'inputBinding': {'position': 1, 'prefix': '-n'}}}",
    "cwl_outputs": "{'bam_sorted': {'type': 'stdout', 'format': 'edam:format_2572'}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 4, 'ramMin': 15000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'sort']",
    "cwl_arguments": "[{'valueFrom': '$(runtime.cores)', 'prefix': '-@'}, {'prefix': '-m', 'valueFrom': '${ return(parseInt(runtime.ram/runtime.cores-100).toString() + \"M\") }', 'position': 1}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "Sort a bam file by read names.",
    "cwl_stdout": "$(inputs.bam_unsorted.basename)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/samtools_stats.cwl",
    "sha": "bb226314e690f8758157e4b51dac9fec54286fcd",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_stats.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand: [samtools, stats]\nrequirements:\n- class: DockerRequirement\n  dockerPull: biocontainers/samtools:v1.7.0_cv3\n\ninputs:\n  input_file:\n    type: File\n    format: \n      - edam:format_2572  # BAM\n      - edam:format_2573  # SAM\n      - edam:format_3462  # CRAM\n    inputBinding:\n      position: 100\n  coverage:\n    type:\n      - 'null'\n      - type: record\n        name: coverage_parameters\n        fields:\n          min_cov:\n            type: int\n          max_cov:\n            type: int\n          step_cov:\n            type: int\n    inputBinding:\n      prefix: --coverage\n    doc: \"Set coverage distribution to the specified range (MIN, MAX, STEP all given as integers) [1,1000,1]\"\n  remove_dups:\n    type: boolean?\n    doc: \"Exclude from statistics reads marked as duplicates\"\n    inputBinding:\n      prefix: --remove_dups\n\n  required_flag:\n    type:\n      - string\n      - int\n      - \"null\"\n    default: 0\n    doc: \" STR|INT Required flag, 0 for unset. See also `samtools flags` [0] \"\n    inputBinding:\n      prefix: -f\n\n  filtering_flag:\n    type:\n      - string\n      - int\n      - \"null\"\n    default: 0\n    doc: \"STR|INT Filtering flag, 0 for unset. See also `samtools flags` [0] \"\n    inputBinding:\n      prefix: -F\n\n  GC_depth:\n    type: float?\n    doc: \"the size of GC-depth bins (decreasing bin size increases memory requirement) [2e4] \"\n    inputBinding:\n      prefix: --GC-depth\n\n  max_insert_size:\n    type: int?\n    doc: \"Maximum insert size [8000]\"\n    inputBinding:\n      prefix: -i\n\n  listed_group:\n    type: string?\n    doc: \"Include only listed read group or sample name [] \"\n    inputBinding:\n      prefix: --id\n\n  read_length:\n    type: int?\n    doc: \"Include in the statistics only reads with the given read length [-1]\"\n    inputBinding:\n      prefix: -l\n\n  most_inserts:\n    type: float?\n    doc: \"Report only the main part of inserts [0.99] \"\n    inputBinding:\n      prefix: -m\n\n  split_prefix:\n    type: string?\n    doc:  \"A path or string prefix to prepend to filenames output when creating categorised statistics files with -S/--split. [input filename]\"\n    inputBinding:\n      prefix: -P\n\n  trim_quality:\n    type: int?\n    doc: \"The BWA trimming parameter [0] \"\n    inputBinding:\n      prefix: -q\n\n  ref_seq:\n    type: File?\n    doc: \"Reference sequence (required for GC-depth and mismatches-per-cycle calculation). [] \"\n    inputBinding:\n      prefix: -r\n\n  split:\n    type: string?\n    doc: \"In addition to the complete statistics, also output categorised statistics based on the tagged field TAG (e.g., use --split RG to split into read groups).    Categorised statistics are written to files named <prefix>_<value>.bamstat, where prefix is as given by --split-prefix (or the input filename by default) and value has been encountered as the specified tagged field's value in one or more alignment records. \"\n    inputBinding:\n      prefix: --split\n\n  target_regions:\n    type: File?\n    doc: \"Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive. []\"\n    inputBinding:\n      prefix: --target-regions\n  sparse:\n    type: boolean?\n    doc: \"Suppress outputting IS rows where there are no insertions.\"\n    inputBinding:\n      prefix: --sparse\n  remove_overlaps:\n    type: boolean?\n    doc: \"Remove overlaps of paired-end reads from coverage and base count computations. \"\n    inputBinding:\n      prefix: --remove-overlaps\n  cov_threshold:\n    type: int?\n    doc: \"Only bases with coverage above this value will be included in the target percentage computation [0] \"\n    inputBinding:\n      prefix: -g\n\narguments:\n  - prefix: --threads\n    valueFrom: $(runtime.cores)  \n    \n# -X\n#     If this option is set, it will allows user to specify customized index file location(s) if the data folder does not contain any index file. Example usage: samtools stats [options] -X /data_folder/data.bam /index_folder/data.bai chrM:1-10\n\noutputs:\n  stats:\n    type: File\n    outputBinding:\n      glob: $(inputs.input_file.nameroot).stats.txt\nstdout: $(inputs.input_file.nameroot).stats.txt\n\n$namespaces: { edam: http://edamontology.org/, iana: https://www.iana.org/assignments/media-types/ }\n$schemas:\n  - 'http://edamontology.org/EDAM_1.18.owl'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'input_file': {'type': 'File', 'format': ['edam:format_2572', 'edam:format_2573', 'edam:format_3462'], 'inputBinding': {'position': 100}}, 'coverage': {'type': ['null', {'type': 'record', 'name': 'coverage_parameters', 'fields': {'min_cov': {'type': 'int'}, 'max_cov': {'type': 'int'}, 'step_cov': {'type': 'int'}}}], 'inputBinding': {'prefix': '--coverage'}, 'doc': 'Set coverage distribution to the specified range (MIN, MAX, STEP all given as integers) [1,1000,1]'}, 'remove_dups': {'type': 'boolean?', 'doc': 'Exclude from statistics reads marked as duplicates', 'inputBinding': {'prefix': '--remove_dups'}}, 'required_flag': {'type': ['string', 'int', 'null'], 'default': 0, 'doc': ' STR|INT Required flag, 0 for unset. See also `samtools flags` [0] ', 'inputBinding': {'prefix': '-f'}}, 'filtering_flag': {'type': ['string', 'int', 'null'], 'default': 0, 'doc': 'STR|INT Filtering flag, 0 for unset. See also `samtools flags` [0] ', 'inputBinding': {'prefix': '-F'}}, 'GC_depth': {'type': 'float?', 'doc': 'the size of GC-depth bins (decreasing bin size increases memory requirement) [2e4] ', 'inputBinding': {'prefix': '--GC-depth'}}, 'max_insert_size': {'type': 'int?', 'doc': 'Maximum insert size [8000]', 'inputBinding': {'prefix': '-i'}}, 'listed_group': {'type': 'string?', 'doc': 'Include only listed read group or sample name [] ', 'inputBinding': {'prefix': '--id'}}, 'read_length': {'type': 'int?', 'doc': 'Include in the statistics only reads with the given read length [-1]', 'inputBinding': {'prefix': '-l'}}, 'most_inserts': {'type': 'float?', 'doc': 'Report only the main part of inserts [0.99] ', 'inputBinding': {'prefix': '-m'}}, 'split_prefix': {'type': 'string?', 'doc': 'A path or string prefix to prepend to filenames output when creating categorised statistics files with -S/--split. [input filename]', 'inputBinding': {'prefix': '-P'}}, 'trim_quality': {'type': 'int?', 'doc': 'The BWA trimming parameter [0] ', 'inputBinding': {'prefix': '-q'}}, 'ref_seq': {'type': 'File?', 'doc': 'Reference sequence (required for GC-depth and mismatches-per-cycle calculation). [] ', 'inputBinding': {'prefix': '-r'}}, 'split': {'type': 'string?', 'doc': \"In addition to the complete statistics, also output categorised statistics based on the tagged field TAG (e.g., use --split RG to split into read groups).    Categorised statistics are written to files named <prefix>_<value>.bamstat, where prefix is as given by --split-prefix (or the input filename by default) and value has been encountered as the specified tagged field's value in one or more alignment records. \", 'inputBinding': {'prefix': '--split'}}, 'target_regions': {'type': 'File?', 'doc': 'Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive. []', 'inputBinding': {'prefix': '--target-regions'}}, 'sparse': {'type': 'boolean?', 'doc': 'Suppress outputting IS rows where there are no insertions.', 'inputBinding': {'prefix': '--sparse'}}, 'remove_overlaps': {'type': 'boolean?', 'doc': 'Remove overlaps of paired-end reads from coverage and base count computations. ', 'inputBinding': {'prefix': '--remove-overlaps'}}, 'cov_threshold': {'type': 'int?', 'doc': 'Only bases with coverage above this value will be included in the target percentage computation [0] ', 'inputBinding': {'prefix': '-g'}}}",
    "cwl_outputs": "{'stats': {'type': 'File', 'outputBinding': {'glob': '$(inputs.input_file.nameroot).stats.txt'}}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'stats']",
    "cwl_arguments": "[{'prefix': '--threads', 'valueFrom': '$(runtime.cores)'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.input_file.nameroot).stats.txt",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/samtools_view_filter.cwl",
    "sha": "b6662414399cd0446c927848c423c4440b7fe224",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/samtools_view_filter.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/samtools:1.7\n\nbaseCommand: [samtools, view]\ninputs:\n  bam:\n    format: edam:format_2572\n    doc: aligned reads to be checked in bam format\n    type: File\n    inputBinding:\n      position: 10\n\n  count:\n    type: boolean?\n    default: true\n    doc: \"Instead of printing the alignments, only count them and print the total number.\"\n    inputBinding:\n      position: 1\n      prefix: -c\n  exclude_unmapped:\n    type: boolean?\n    default: true\n    inputBinding:\n      valueFrom: \"4\"\n      prefix: -F\n      position: 1\n\n  is_paired_end:\n    doc: if paired end, only properly paired reads pass\n    type: boolean\n    default: true\n\n  min_mapping_quality:\n    doc: Reads with a mapping quality below this will be excluded\n    type: int?\n    default: 20\n    inputBinding:\n      position: 1\n      prefix: -q\n\n\n  header:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - include\n          - exclude\n          - only\n    default: include\n    inputBinding:\n        valueFrom: |\n            ${\n              if (self==\"include\"){\n                return \"-h\";\n              }\n              if (self==\"only\"){\n                return \"-H\";\n              }\n              else {\n                return null;\n              }\n            }\n\noutputs:\n  bam_filtered:\n    format: edam:format_2572\n    type: stdout\n\nstdout: $(inputs.bam.nameroot)_filt.bam\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'bam': {'format': 'edam:format_2572', 'doc': 'aligned reads to be checked in bam format', 'type': 'File', 'inputBinding': {'position': 10}}, 'count': {'type': 'boolean?', 'default': True, 'doc': 'Instead of printing the alignments, only count them and print the total number.', 'inputBinding': {'position': 1, 'prefix': '-c'}}, 'exclude_unmapped': {'type': 'boolean?', 'default': True, 'inputBinding': {'valueFrom': '4', 'prefix': '-F', 'position': 1}}, 'is_paired_end': {'doc': 'if paired end, only properly paired reads pass', 'type': 'boolean', 'default': True}, 'min_mapping_quality': {'doc': 'Reads with a mapping quality below this will be excluded', 'type': 'int?', 'default': 20, 'inputBinding': {'position': 1, 'prefix': '-q'}}, 'header': {'type': ['null', {'type': 'enum', 'symbols': ['include', 'exclude', 'only']}], 'default': 'include', 'inputBinding': {'valueFrom': '${\\n  if (self==\"include\"){\\n    return \"-h\";\\n  }\\n  if (self==\"only\"){\\n    return \"-H\";\\n  }\\n  else {\\n    return null;\\n  }\\n}\\n'}}}",
    "cwl_outputs": "{'bam_filtered': {'format': 'edam:format_2572', 'type': 'stdout'}}",
    "cwl_hints": "{'ResourceRequirement': {'coresMin': 1, 'ramMin': 10000}, 'DockerRequirement': {'dockerPull': 'kerstenbreuer/samtools:1.7'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'view']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.bam.nameroot)_filt.bam",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "Variation/tools/snpEff_build_ann.cwl",
    "sha": "5c4a9881afcb6be22f4111b1cbbff624afc7304b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/snpEff_build_ann.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nbaseCommand: [bash, commands.sh]\n\ninputs:\n  - id: importGenome\n    type: boolean\n    doc: 'import your own genome (genbank)'\n  - id: genome_reference\n    type: string\n\n  - id: bankfile\n    type: File?\n    doc: 'import your own genome'\n\n  - id: sequence\n    type: File\n\n  - id: inputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n    default: vcf\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n    default: vcf\n\n  - id: udLength\n    type: int\n    doc: 'Set upstream downstream interval length (in bases). 0 base: No upstream / downstream intervals'\n\n## reports:\n  - id: html_report\n    type: boolean?\n\n  - id: csvFile\n    type: boolean?\n  - id: noStats\n    type: boolean?\n\n## Annotations options:\n  - id: formatEff\n    type: boolean?\n    doc: \"Use 'EFF' field compatible with older versions (instead of 'ANN')\"\n  - id: classic\n    type: boolean?\n    doc: \"Use Classic Effect names and amino acid variant annotations (NON_SYNONYMOUS_CODING vs missense_variant and G180R vs p.Gly180Arg/c.538G>C)\"\n  - id: sequenceOntology\n    type: boolean?\n    doc: \"Override classic and use Sequence Ontolgy terms for effects (missense_variant vs NON_SYNONYMOUS_CODING)\"\n  - id: hgvs\n    type: boolean?\n    default: true\n    doc: \"Override classic and use HGVS annotations for amino acid annotations (p.Gly180Arg/c.538G>C vs G180R)\"\n  - id: noShiftHgvs\n    type: boolean?\n    doc: \"Do not shift variants according to HGVS notation (most 3prime end)\"\n  - id: noHgvs\n    type: boolean?\n    doc: \"Do not add HGVS annotations\"\n  - id: geneId\n    type: boolean?\n    doc: \"Use gene ID instead of gene name (VCF output). Default: false\"\n  - id: lof\n    type: boolean?\n    doc: \"Add loss of function (LOF) and nonsense mediated decay (NMD) tags\"\n  - id: noLof\n    type: boolean?\n    doc: \"Do not add LOF and NMD annotations\"\n  - id: cancer\n    type: boolean?\n    inputBinding:\n      prefix: -cancer\n    doc: \"Perform 'cancer' comparisons (somatic vs. germline)\"\n  - id: cancerSamples\n    type: File?\n    doc: \"<file> : Two column TXT file defining 'oringinal \\t derived' samples.\"\n  - id: oicr\n    type: boolean?\n    doc: \"Add OICR tag in VCF file. Default: false\"\n\n## Database options:\n\n  - id: canon\n    type: boolean?\n    doc: \"Only use canonical transcripts\"\n  - id: motif\n    type: boolean?\n    doc: \"Annotate using motifs (requires Motif database).\"\n  - id: noMotif\n    type: boolean?\n    doc: \"Disable motif annotations\"\n  - id: noNextProt\n    type: boolean?\n    doc: \"Disable NextProt annotations\"\n  - id: nextProt\n    type: boolean?\n    doc: \"Annotate using NextProt (requires NextProt database).\"\n  - id: noGenome\n    type: boolean?\n    doc: \"Do not load any genomic database (e.g. annotate using custom files).\"\n  - id: onlyProtein\n    type: boolean?\n    doc: \"Only use protein coding transcripts. Default: false\"\n  - id: transcripts\n    type: File?\n    doc: '<file.txt>   Only use the transcripts in this file. Format: One transcript ID per line.'\n\n  # \u00e0 rendre facultatif:\n  - id: interval\n    type: File[]?\n      #- type: null\n      #type: array\n      #items: File\n    doc: 'Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).'\n  - id: spliceRegionExonSize\n    type: int?\n    default: 3\n  - id: spliceRegionIntronMax\n    type: int?\n    default: 8\n  - id: spliceRegionIntronMin\n    type: int?\n    default: 8\n  - id: spliceSiteSize\n    type: int?\n    default: 2\n  - id: onlyReg\n    type: boolean?\n    doc: \"Only use regulation tracks.\"\n  - id: strict\n    type: boolean?\n    doc: \"Only use 'validated' transcripts (i.e. sequence has been checked). Default: false\"\n## Results filter options :\n\n  - id: filterInterval\n    type: File[]?\n    doc: \"Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)\"\n  - id: no_downstream\n    type: boolean?\n    doc: \" Do not show DOWNSTREAM changes\"\n  - id: no_intergenic\n    type: boolean?\n    doc: \"Do not show INTERGENIC changes\"\n  - id: no_intron\n    type: boolean?\n    doc: \"Do not show INTRON changes\"\n  - id: no_upstream\n    type: boolean?\n    doc: \"Do not show UPSTREAM changes\"\n  - id: no_utr\n    type: boolean?\n    doc: \"Do not show 5_PRIME_UTR or 3_PRIME_UTR changes\"\n  - id: no_EffectType\n    type: boolean?\n    doc: \"Do not show 'EffectType'. This option can be used several times.\"\n\noutputs:\n  - id: snpeff_output\n    type: File?\n    # format $(inputs.outputFormat)\n    outputBinding:\n      glob: \"*.$(inputs.outputFormat)\"\n  - id: statsFile\n    type: File?\n    outputBinding:\n      glob: \"*.html\"\n  - id: csvFile\n    type: File?\n    outputBinding:\n      glob: '*.csv'\n  - id: genes\n    type: File?\n    outputBinding:\n      glob: '*.txt'\nrequirements:\n  - class: DockerRequirement\n    dockerPull: biocontainers/snpeff:v4.1k_cv3\n  - class: InlineJavascriptRequirement\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: \"$({class: 'Directory', listing: []})\"\n        entryname: $(inputs.genome_reference)\n        writable: true\n      - entryname: $(inputs.genome_reference)/genes.gbk\n        entry: $(inputs.bankfile)\n      - entryname: commands.sh\n        entry: |-\n          #!/bin/bash\n          ###########################\n          #cd /home/biodocker/bin/snpEff\n          cp /home/biodocker/bin/snpEff/snpEff.config .\n          ls -R\n\n          if [ $(inputs.importGenome) ]\n          then\n              echo $(inputs.genome_reference).genome=$(inputs.genome_reference) >> snpEff.config\n              snpEff build -v -c snpEff.config -dataDir . -configOption $(inputs.genome_reference).genome=$(inputs.genome_reference) -genbank $(inputs.genome_reference)\n              grep covid19 snpEff.config\n          fi\n\n          ${\n          var command=\n          \"snpEff ann -v -c snpEff.config -dataDir .  -i \"+ (inputs.inputFormat)+\" -o \"+(inputs.outputFormat)+\" -upDownStreamLen \"+(inputs.udLength)+\" -spliceRegionExonSize \"+(inputs.spliceRegionExonSize)+\" -spliceRegionIntronMax  \"+(inputs.spliceRegionIntronMax)+\" -spliceRegionIntronMin \"+(inputs.spliceRegionIntronMin)+\" -spliceSiteSize \"+(inputs.spliceSiteSize)\n\n          if (inputs.csvFile){\n            command+= \" -csvFile \"\n          }\n          if (inputs.html_report){\n            command+=\" -s \"\n          }\n          if (inputs.noStats){\n            command+=\" -noStats \"\n          }\n          if (inputs.formatEff){\n            command+=\" -formatEff \"\n          }\n          if (inputs.classic){\n            command+=\" -classic \"\n          }\n          if (inputs.sequenceOntology){\n            command+=\" -sequenceOntology \"\n          }\n          if (inputs.hgvs){\n            command+=\" -hgvs \"\n          }\n          if (inputs.noShiftHgvs){\n            command+=\" -noShiftHgvs \"\n          }\n          if (inputs.noHgvs){\n            command+=\" -noHgvs \"\n          }\n          if (inputs.geneId){\n            command+= \" -geneId\"\n          }\n          if (inputs.lof){\n            command+=\" -lof \"\n          }\n          if (inputs.noLof){\n            command+=\" -noLof \"\n          }\n          if (inputs.cancer){\n            command+=\" -cancer \"\n          }\n          if (inputs.oicr){\n            command+=\" -oicr \"\n          }\n          if (inputs.cancerSamples!=null){\n            command+= \" -cancerSamples \"+(inputs.cancerSamples.path)\n          }\n          if (inputs.canon){\n            command+= \" -canon \"\n          }\n          if (inputs.motif){\n            command+= \" -motif \"\n          }\n          if (inputs.noMotif){\n            command+= \" -noMotif \"\n          }\n          if (inputs.noNextProt){\n            command+=\" -noNextProt \"\n          }\n          if (inputs.nextProt){\n            command+=\" -nextProt \"\n          }\n          if (inputs.noGenome){\n            command+=\" -noGenome \"\n          }\n          if (inputs.onlyProtein){\n            command+=\" -onlyProtein \"\n          }\n          if (inputs.onlyReg){\n            command+=\" -onlyReg \"\n          }\n          if (inputs.strict){\n            command+=\" -strict \"\n          }\n          if (inputs.no_downstream){\n            command+= \" -no-downstream \"\n          }\n          if (inputs.no_intergenic){\n            command+= \" -no-intergenic \"\n          }\n          if (inputs.no_intron){\n            command+= \" -no-intron \"\n          }\n          if (inputs.no_upstream){\n            command+= \" -no-upstream \"\n          }\n          if (inputs.no_utr){\n            command+= \" -no-utr \"\n          }\n          if (inputs.no_EffectType){\n            command+= \" -no EffectType \"\n          }\n          if (inputs.transcripts!=null){\n           for (var i=0; i< inputs.transcripts.length; i++){\n             command+= \" -onlyTr \"+inputs.transcripts[i].path\n           }\n          }\n          if (inputs.filterInterval!=null){\n           for (var i=0; i< inputs.filterInterval.length; i++){\n             command+= \" -filterInterval \"+inputs.filterInterval[i].path\n           }\n          }\n          if (inputs.interval!=null){\n           for (var i=0; i< inputs.interval.length; i++){\n             command+= \" -interval \"+inputs.interval[i].path\n           }\n          }\n          command+=(inputs.genome_reference)+\" \"+(inputs.sequence.path)+\" > \"+(inputs.sequence.nameroot)+\".ann.\"+(inputs.outputFormat)\n\n          return command;\n          }\n          ls -R\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'importGenome', 'type': 'boolean', 'doc': 'import your own genome (genbank)'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'bankfile', 'type': 'File?', 'doc': 'import your own genome'}, {'id': 'sequence', 'type': 'File'}, {'id': 'inputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed']}], 'default': 'vcf'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn']}], 'default': 'vcf'}, {'id': 'udLength', 'type': 'int', 'doc': 'Set upstream downstream interval length (in bases). 0 base: No upstream / downstream intervals'}, {'id': 'html_report', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?', 'doc': \"Use 'EFF' field compatible with older versions (instead of 'ANN')\"}, {'id': 'classic', 'type': 'boolean?', 'doc': 'Use Classic Effect names and amino acid variant annotations (NON_SYNONYMOUS_CODING vs missense_variant and G180R vs p.Gly180Arg/c.538G>C)'}, {'id': 'sequenceOntology', 'type': 'boolean?', 'doc': 'Override classic and use Sequence Ontolgy terms for effects (missense_variant vs NON_SYNONYMOUS_CODING)'}, {'id': 'hgvs', 'type': 'boolean?', 'default': True, 'doc': 'Override classic and use HGVS annotations for amino acid annotations (p.Gly180Arg/c.538G>C vs G180R)'}, {'id': 'noShiftHgvs', 'type': 'boolean?', 'doc': 'Do not shift variants according to HGVS notation (most 3prime end)'}, {'id': 'noHgvs', 'type': 'boolean?', 'doc': 'Do not add HGVS annotations'}, {'id': 'geneId', 'type': 'boolean?', 'doc': 'Use gene ID instead of gene name (VCF output). Default: false'}, {'id': 'lof', 'type': 'boolean?', 'doc': 'Add loss of function (LOF) and nonsense mediated decay (NMD) tags'}, {'id': 'noLof', 'type': 'boolean?', 'doc': 'Do not add LOF and NMD annotations'}, {'id': 'cancer', 'type': 'boolean?', 'inputBinding': {'prefix': '-cancer'}, 'doc': \"Perform 'cancer' comparisons (somatic vs. germline)\"}, {'id': 'cancerSamples', 'type': 'File?', 'doc': \"<file> : Two column TXT file defining 'oringinal \\t derived' samples.\"}, {'id': 'oicr', 'type': 'boolean?', 'doc': 'Add OICR tag in VCF file. Default: false'}, {'id': 'canon', 'type': 'boolean?', 'doc': 'Only use canonical transcripts'}, {'id': 'motif', 'type': 'boolean?', 'doc': 'Annotate using motifs (requires Motif database).'}, {'id': 'noMotif', 'type': 'boolean?', 'doc': 'Disable motif annotations'}, {'id': 'noNextProt', 'type': 'boolean?', 'doc': 'Disable NextProt annotations'}, {'id': 'nextProt', 'type': 'boolean?', 'doc': 'Annotate using NextProt (requires NextProt database).'}, {'id': 'noGenome', 'type': 'boolean?', 'doc': 'Do not load any genomic database (e.g. annotate using custom files).'}, {'id': 'onlyProtein', 'type': 'boolean?', 'doc': 'Only use protein coding transcripts. Default: false'}, {'id': 'transcripts', 'type': 'File?', 'doc': '<file.txt>   Only use the transcripts in this file. Format: One transcript ID per line.'}, {'id': 'interval', 'type': 'File[]?', 'doc': 'Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).'}, {'id': 'spliceRegionExonSize', 'type': 'int?', 'default': 3}, {'id': 'spliceRegionIntronMax', 'type': 'int?', 'default': 8}, {'id': 'spliceRegionIntronMin', 'type': 'int?', 'default': 8}, {'id': 'spliceSiteSize', 'type': 'int?', 'default': 2}, {'id': 'onlyReg', 'type': 'boolean?', 'doc': 'Only use regulation tracks.'}, {'id': 'strict', 'type': 'boolean?', 'doc': \"Only use 'validated' transcripts (i.e. sequence has been checked). Default: false\"}, {'id': 'filterInterval', 'type': 'File[]?', 'doc': 'Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)'}, {'id': 'no_downstream', 'type': 'boolean?', 'doc': ' Do not show DOWNSTREAM changes'}, {'id': 'no_intergenic', 'type': 'boolean?', 'doc': 'Do not show INTERGENIC changes'}, {'id': 'no_intron', 'type': 'boolean?', 'doc': 'Do not show INTRON changes'}, {'id': 'no_upstream', 'type': 'boolean?', 'doc': 'Do not show UPSTREAM changes'}, {'id': 'no_utr', 'type': 'boolean?', 'doc': 'Do not show 5_PRIME_UTR or 3_PRIME_UTR changes'}, {'id': 'no_EffectType', 'type': 'boolean?', 'doc': \"Do not show 'EffectType'. This option can be used several times.\"}]",
    "cwl_outputs": "[{'id': 'snpeff_output', 'type': 'File?', 'outputBinding': {'glob': '*.$(inputs.outputFormat)'}}, {'id': 'statsFile', 'type': 'File?', 'outputBinding': {'glob': '*.html'}}, {'id': 'csvFile', 'type': 'File?', 'outputBinding': {'glob': '*.csv'}}, {'id': 'genes', 'type': 'File?', 'outputBinding': {'glob': '*.txt'}}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', 'commands.sh']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/tools/snpSift_extract.cwl",
    "sha": "1ac98a628598fb8cc3a0623632abf1d101929e55",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/tools/snpSift_extract.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n\nhints:\n  - class: DockerRequirement\n    dockerPull: quay.io/biocontainers/snpsift:4.3.1t--2\n    \ndoc:   \"SnpSift Extract Fields <http://snpeff.sourceforge.net/SnpSift.html#Extract> selects columns from a VCF dataset into a Tab-delimited format.\"\n\nstdout: $(inputs.input_vcf.nameroot).tsv\nbaseCommand: [SnpSift, -Xmx6G, extractFields]\narguments: \n  - valueFrom: \\\"$(inputs.empty_text)\\\"\n    prefix: -e\n    position: 4\ninputs:\n  - id: input_vcf\n    type: File \n    inputBinding:\n      position: 1\n\n  - id: extractFields\n    #type: string?\n    type: string[]?\n    default: \"CHROM POS ID REF ALT FILTER\"\n    doc: \"Separated by spaces\"\n    inputBinding:\n      position: 2\n\n      \n  # - id: one_effect_per_line\n  #   type: boolean?\n  #   default: true\n  #   doc: \"When variants have more than one effect, lists one effect per line, while all other parameters in the line are repeated across mutiple lines\"\n\n  - id: separator\n    type: string?\n    doc: \"Separate multiple fields in one column with this character, e.g. a comma, rather than a column for each of the multiple values\"\n    inputBinding:\n      prefix: -s\n      position: 3\n      \n  - id: empty_text\n    type: string?\n    doc: \"Represent empty fields with this value, rather than leaving them blank\"\n   # inputBinding:\n   #   prefix: -e\n   #   position: 4\n\noutputs: \n  - id: out\n    type: stdout\nrequirements:\n  - class: InlineJavascriptRequirement\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'input_vcf', 'type': 'File', 'inputBinding': {'position': 1}}, {'id': 'extractFields', 'type': 'string[]?', 'default': 'CHROM POS ID REF ALT FILTER', 'doc': 'Separated by spaces', 'inputBinding': {'position': 2}}, {'id': 'separator', 'type': 'string?', 'doc': 'Separate multiple fields in one column with this character, e.g. a comma, rather than a column for each of the multiple values', 'inputBinding': {'prefix': '-s', 'position': 3}}, {'id': 'empty_text', 'type': 'string?', 'doc': 'Represent empty fields with this value, rather than leaving them blank'}]",
    "cwl_outputs": "[{'id': 'out', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/snpsift:4.3.1t--2'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['SnpSift', '-Xmx6G', 'extractFields']",
    "cwl_arguments": "[{'valueFrom': '\\\\\"$(inputs.empty_text)\\\\\"', 'prefix': '-e', 'position': 4}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "SnpSift Extract Fields <http://snpeff.sourceforge.net/SnpSift.html#Extract> selects columns from a VCF dataset into a Tab-delimited format.",
    "cwl_stdout": "$(inputs.input_vcf.nameroot).tsv",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Variation/variation_PE.cwl",
    "sha": "d1917269980f0c3db4a4cad18fefa742082aaae8",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/variation_PE.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: var_pe\nlabel: var-PE\n$namespaces:\n  edam: 'http://edamontology.org/'\ninputs:\n  - id: reads_reverse\n    type: File[]\n    format:\n      - 'edam:format_1930'\n      - 'edam:format_1931'\n\n  - id: reads_forward\n    type: File[]\n    format:\n      - 'edam:format_1930'\n      - 'edam:format_1931'\n  - id: reference_in\n    type: File\n\n   #### 1-  fastp options:\n  - id: unqualified_phred_quality\n    type: int?\n  - id: threads\n    type: int?\n  - id: qualified_phred_quality\n    type: int?\n  - id: min_length_required\n    type: int?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: base_correction\n    type: boolean?\n\n   #### picard__sort_sam options:\n  - id: sort_order\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n  - id: validation_stringency\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n\n# samtools_view\n  - id: exclude_unmapped\n    type: boolean?\n  - id: count\n    type: boolean\n\n   #### picard__mark_duplicates options:\n  - id: alignments_are_sorted\n    type: boolean\n  - id: remove_duplicates\n    type: boolean\n  - id: validation_stringency_1\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n  - id: comment\n    type: 'string[]?'\n  - id: duplicate_scoring_strategy\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n  - id: optical_duplicate_pixel_distance\n    type: int?\n  - id: barcode_tag\n    type: string?\n\n   ####lofreq_viterbi options:\n  - id: keepflags\n    type: boolean?\n  - id: defqual\n    type: int?\n  - id: bq2_handling\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - keep\n          - dynamic\n          - fixed\n\n   #### lofreq_cal_variants options:\n  - id: bed\n    type: File?\n  - id: bonferroni\n    type: string?\n  - id: call_indels\n    type: boolean?\n  - id: def_alt_bq\n    type: int?\n  - id: def_alt_jq\n    type: int?\n  - id: del_baq\n    type: boolean?\n  - id: enable_source_qual\n    type: boolean?\n  - id: ignore_vcf\n    type: 'File[]?'\n  - id: illumina_1_3\n    type: boolean?\n  - id: max_depth_cov\n    type: int?\n  - id: max_mapping_quality\n    type: int?\n  - id: min_bq\n    type: int?\n  - id: min_cov\n    type: int?\n  - id: min_mq\n    type: int?\n  - id: use_orphan\n    type: boolean?\n  - id: threads_lf_call\n    type: int?\n  - id: replace_non_match\n    type: int?\n  - id: region\n    type: string?\n  - id: pvalue_cutoff\n    type: float?\n  - id: only_indels\n    type: boolean?\n  - id: no_idaq\n    type: boolean?\n  - id: no_default_filter\n    type: boolean?\n  - id: no_baq\n    type: boolean?\n  - id: no_mapping_quality\n    type: boolean?\n  - id: no_ext_base_alignment_quality\n    type: boolean?\n  - id: min_jq\n    type: int?\n  - id: min_alt_jq\n    type: int?\n  - id: min_alt_bq\n    type: int?\n\n   #### SnpEff build & ann:\n  - id: genome_reference\n    type: string\n  - id: udLength\n    type: int\n  - id: transcripts\n    type: File?\n  - id: strict\n    type: boolean?\n  - id: spliceSiteSize\n    type: int?\n  - id: spliceRegionIntronMin\n    type: int?\n  - id: spliceRegionIntronMax\n    type: int?\n  - id: spliceRegionExonSize\n    type: int?\n  - id: sequenceOntology\n    type: boolean?\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n  - id: onlyReg\n    type: boolean?\n  - id: onlyProtein\n    type: boolean?\n  - id: oicr\n    type: boolean?\n  - id: noStats\n    type: boolean?\n  - id: noShiftHgvs\n    type: boolean?\n  - id: noNextProt\n    type: boolean?\n  - id: noMotif\n    type: boolean?\n  - id: bankfile\n    type: File?\n  - id: cancer\n    type: boolean?\n  - id: cancerSamples\n    type: File?\n  - id: canon\n    type: boolean?\n  - id: classic\n    type: boolean?\n  - id: csvFile\n    type: boolean?\n  - id: filterInterval\n    type: 'File[]?'\n  - id: hgvs\n    type: boolean?\n  - id: formatEff\n    type: boolean?\n  - id: html_report_1\n    type: boolean?\n  - id: importGenome\n    type: boolean\n  - id: interval\n    type: 'File[]?'\n  - id: lof\n    type: boolean?\n  - id: motif\n    type: boolean?\n  - id: nextProt\n    type: boolean?\n  - id: no_downstream\n    type: boolean?\n  - id: no_EffectType\n    type: boolean?\n  - id: no_intergenic\n    type: boolean?\n  - id: no_intron\n    type: boolean?\n  - id: no_upstream\n    type: boolean?\n  - id: no_utr\n    type: boolean?\n  - id: noGenome\n    type: boolean?\n  - id: noHgvs\n    type: boolean?\n  - id: noLof\n    type: boolean?\n  - id: geneId\n    type: boolean?\n\n   #### SNPSIFT\n  - id: separator\n    type: string?\n  - id: empty_text\n    type: string?\n  - id: extractFields\n    type: 'string[]?'\n\n  - id: IndexName\n    type: string\n\noutputs:\n  - id: multiqc_fastp\n    type: File\n    outputSource:\n      - multiqc_fastp/multiqc_zip\n  - id: stats_bam\n    type: File[]\n    outputSource:\n      - samtools_stats/stats\n  - id: multiqc_markdups\n    type: File\n    outputSource:\n      - multiqc_markdups/multiqc_zip\n  - id: multiqc_samtoolsstats\n    outputSource:\n       - multiqc_stats/multiqc_zip\n    type: File\n#  - id: log\n#    outputSource:\n#      - picard__mark_duplicates/log\n#    type: File[]\n#  - id: alignments\n#    outputSource:\n#      - picard__mark_duplicates/alignments\n#    type: File[]\n#  - id: genes\n#    outputSource:\n#      - snpeff_build_ann/genes\n#    type: File[]\n  - id: statsFile_snpeff\n    outputSource:\n      - snpeff_build_ann/statsFile\n    type: File[]\n  - id: out_snpsift\n    outputSource:\n      - snpsift_extract/out\n    type: File[]\nsteps:\n  - id: fastp\n    scatter: [fastq1, fastq2]\n    scatterMethod: dotproduct\n    in:\n      - id: base_correction\n        source: base_correction\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: reads_forward\n      - id: fastq2\n        source: reads_reverse\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n      - id: qualified_phred_quality\n        source: qualified_phred_quality\n      - id: threads\n        source: threads\n      - id: unqualified_phred_quality\n        source: unqualified_phred_quality\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n      - id: out_fastq2\n    run: ./tools/fastp.cwl\n\n  - id: multiqc_fastp\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_fast'\n      - id: qc_files_array\n        source: fastp/json_report\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: samtools_view_filter\n    scatter: bam\n    in:\n      - id: bam\n        source: bwa_mem/reads_stdout\n      - id: count\n        source: count\n      - id: exclude_unmapped\n        source: exclude_unmapped\n    out:\n      - id: bam_filtered\n    run: ./tools/samtools_view_filter.cwl\n\n  - id: picard_sortsam\n    scatter: alignments\n    in: \n      - id: alignments\n        source: samtools_view_filter/bam_filtered\n      - id: sort_order\n        source: sort_order\n      - id: validation_stringency\n        source: validation_stringency\n    out:\n      - id: sorted_alignments\n    run: ./tools/picard_SortSam.cwl\n\n  - id: picard__mark_duplicates\n    scatter: alignments\n    in:\n      - id: alignments\n        source: picard_sortsam/sorted_alignments\n      - id: alignments_are_sorted\n        source: alignments_are_sorted\n      - id: barcode_tag\n        source: barcode_tag\n      - id: comment\n        source:\n          - comment\n      - id: duplicate_scoring_strategy\n        source: duplicate_scoring_strategy\n      - id: optical_duplicate_pixel_distance\n        source: optical_duplicate_pixel_distance\n      - id: remove_duplicates\n        source: remove_duplicates\n      - id: validation_stringency\n        source: validation_stringency_1\n    out:\n      - id: alignments\n      - id: log\n      - id: metrics\n    run: ./tools/picard_MarkDuplicates.cwl\n\n  - id: multiqc_markdups\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_markdups'\n      - id: qc_files_array\n        source: picard__mark_duplicates/metrics\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: lofreq_viterbi\n    scatter: reads\n    in:\n      - id: defqual\n        source: defqual\n      - id: keepflags\n        source: keepflags\n      - id: reads\n        source: picard__mark_duplicates/alignments\n      - id: reference\n        source: reference_in\n    out:\n      - id: realigned\n    run: ./tools/lofreq_viterbi.cwl\n\n  - id: samtools_sort\n    scatter: bam_unsorted\n    in:\n      - id: bam_unsorted\n        source: lofreq_viterbi/realigned\n    out:\n      - id: bam_sorted\n    run: ./tools/samtools_sort.cwl\n\n  - id: samtools_faidx\n    in:\n      - id: sequences\n        source: reference_in\n    out:\n      - id: sequences_index\n      - id: sequences_with_index\n    run: ./tools/samtools_faidx.cwl\n    \n  - id: samtool_index\n    scatter: bam_sorted\n    in:\n      - id: bam_sorted\n        source: samtools_sort/bam_sorted\n    out:\n      - id: bam_sorted_indexed\n    run: ./tools/samtools_index.cwl\n\n  - id: bwa_index_cwl\n    in:\n      - id: InputFile\n        source: reference_in\n      - id: IndexName\n        source: IndexName\n    out:\n      - id: index\n    run: ./tools/bwa-index.cwl\n    \n  - id: get_secondaryfiles\n    in:\n      - id: bwa_index\n        source: bwa_index_cwl/index\n      - id: sequence\n        source: samtools_faidx/sequences_with_index\n    out:\n      - id: sequences_with_index\n    run: ./tools/get_secondaryfiles.cwl\n  - id: get_tab\n    scatter: [out_fastq1, out_fastq2]\n    scatterMethod: dotproduct\n    in: \n      - id: out_fastq1\n        source: fastp/out_fastq1\n      - id: out_fastq2\n        source: fastp/out_fastq2\n    out:\n      - id: tab\n    run: ./tools/mergetab.cwl\n  - id: bwa_mem\n    scatter: InputFile\n    in:\n      Index:\n        source: get_secondaryfiles/sequences_with_index\n      InputFile:\n        source: get_tab/tab\n# [fastp/out_fastq1, fastp/out_fastq2]\n#        linkMerge: merge_nested #flattened\n    out:\n      - id: reads_stdout\n    run: ./tools/bwa-mem.cwl\n  - id: samtools_stats\n    scatter: input_file\n    in:\n      input_file:\n        source: samtools_view_filter/bam_filtered\n    out:\n      - id: stats\n    run: ./tools/samtools_stats.cwl\n  - id: multiqc_stats\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_stats'\n      - id: qc_files_array\n        source: samtools_stats/stats\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl \n\n  - id: lofreq_call\n    scatter: [reads_align, reads_index]\n    scatterMethod: dotproduct\n    in:\n      - id: bed\n        source: bed\n      - id: bonferroni\n        source: bonferroni\n      - id: call_indels\n        source: call_indels\n      - id: def_alt_bq\n        source: def_alt_bq\n      - id: def_alt_jq\n        source: def_alt_jq\n      - id: del_baq\n        source: del_baq\n      - id: enable_source_qual\n        source: enable_source_qual\n      - id: ignore_vcf\n        source:\n          - ignore_vcf\n      - id: illumina_1_3\n        source: illumina_1_3\n      - id: max_depth_cov\n        source: max_depth_cov\n      - id: max_mapping_quality\n        source: max_mapping_quality\n      - id: min_alt_bq\n        source: min_alt_bq\n      - id: min_alt_jq\n        source: min_alt_jq\n      - id: min_bq\n        source: min_bq\n      - id: min_cov\n        source: min_cov\n      - id: min_jq\n        source: min_jq\n      - id: min_mq\n        source: min_mq\n      - id: no_baq\n        source: no_baq\n      - id: no_default_filter\n        source: no_default_filter\n      - id: no_ext_base_alignment_quality\n        source: no_ext_base_alignment_quality\n      - id: no_idaq\n        source: no_idaq\n      - id: no_mapping_quality\n        source: no_mapping_quality\n      - id: only_indels\n        source: only_indels\n      - id: pvalue_cutoff\n        source: pvalue_cutoff\n      - id: reads_align\n        source: samtools_sort/bam_sorted\n      - id: reads_index\n        source: samtool_index/bam_sorted_indexed\n      - id: reference_fasta\n        source: samtools_faidx/sequences_with_index\n      - id: reference_index\n        source: samtools_faidx/sequences_index\n      - id: region\n        source: region\n      - id: replace_non_match\n        source: replace_non_match\n      - id: threads\n        source: threads_lf_call\n      - id: use_orphan\n        source: use_orphan\n    out:\n      - id: vcf\n    run: ./tools/lofreq_call.cwl\n    label: LoFreq Call Variants\n\n  - id: snpeff_build_ann\n    scatter: sequence\n    in:\n      - id: importGenome\n        source: importGenome\n      - id: genome_reference\n        source: genome_reference\n      - id: bankfile\n        source: bankfile\n      - id: sequence\n        source: lofreq_call/vcf\n      - id: outputFormat\n        source: outputFormat\n      - id: udLength\n        source: udLength\n      - id: html_report\n        source: html_report_1\n      - id: csvFile\n        source: csvFile\n      - id: noStats\n        source: noStats\n      - id: formatEff\n        source: formatEff\n      - id: classic\n        source: classic\n      - id: sequenceOntology\n        source: sequenceOntology\n      - id: hgvs\n        source: hgvs\n      - id: noShiftHgvs\n        source: noShiftHgvs\n      - id: noHgvs\n        source: noHgvs\n      - id: geneId\n        source: geneId\n      - id: lof\n        source: lof\n      - id: noLof\n        source: noLof\n      - id: cancer\n        source: cancer\n      - id: cancerSamples\n        source: cancerSamples\n      - id: oicr\n        source: oicr\n      - id: canon\n        source: canon\n      - id: motif\n        source: motif\n      - id: noMotif\n        source: noMotif\n      - id: noNextProt\n        source: noNextProt\n      - id: nextProt\n        source: nextProt\n      - id: noGenome\n        source: noGenome\n      - id: onlyProtein\n        source: onlyProtein\n      - id: transcripts\n        source: transcripts\n      - id: interval\n        source:\n          - interval\n      - id: spliceRegionExonSize\n        source: spliceRegionExonSize\n      - id: spliceRegionIntronMax\n        source: spliceRegionIntronMax\n      - id: spliceRegionIntronMin\n        source: spliceRegionIntronMin\n      - id: spliceSiteSize\n        source: spliceSiteSize\n      - id: onlyReg\n        source: onlyReg\n      - id: strict\n        source: strict\n      - id: filterInterval\n        source:\n          - filterInterval\n      - id: no_downstream\n        source: no_downstream\n      - id: no_intergenic\n        source: no_intergenic\n      - id: no_intron\n        source: no_intron\n      - id: no_upstream\n        source: no_upstream\n      - id: no_utr\n        source: no_utr\n      - id: no_EffectType\n        source: no_EffectType\n    out:\n      - id: snpeff_output\n      - id: statsFile\n      - id: csvFile\n      - id: genes\n    run: ./tools/snpEff_build_ann.cwl\n\n  - id: snpsift_extract\n    scatter: input_vcf\n    in:\n      - id: input_vcf\n        source: snpeff_build_ann/snpeff_output\n      - id: extractFields\n        source:\n          - extractFields\n      - id: separator\n        source: separator\n      - id: empty_text\n        source: empty_text\n    out:\n      - id: out\n    run: ./tools/snpSift_extract.cwl\n\nrequirements:\n  - class: ScatterFeatureRequirement\n  - class: SubworkflowFeatureRequirement\n  - class: MultipleInputFeatureRequirement\n  - class: StepInputExpressionRequirement\n  - class: InlineJavascriptRequirement\n\n$schemas:\n  - 'http://edamontology.org/EDAM_1.18.owl'\n\n",
    "cwl_class": "Workflow",
    "cwl_id": "var_pe",
    "cwl_inputs": "[{'id': 'reads_reverse', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reads_forward', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reference_in', 'type': 'File'}, {'id': 'unqualified_phred_quality', 'type': 'int?'}, {'id': 'threads', 'type': 'int?'}, {'id': 'qualified_phred_quality', 'type': 'int?'}, {'id': 'min_length_required', 'type': 'int?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'base_correction', 'type': 'boolean?'}, {'id': 'sort_order', 'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}]}, {'id': 'validation_stringency', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'exclude_unmapped', 'type': 'boolean?'}, {'id': 'count', 'type': 'boolean'}, {'id': 'alignments_are_sorted', 'type': 'boolean'}, {'id': 'remove_duplicates', 'type': 'boolean'}, {'id': 'validation_stringency_1', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'comment', 'type': 'string[]?'}, {'id': 'duplicate_scoring_strategy', 'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}]}, {'id': 'optical_duplicate_pixel_distance', 'type': 'int?'}, {'id': 'barcode_tag', 'type': 'string?'}, {'id': 'keepflags', 'type': 'boolean?'}, {'id': 'defqual', 'type': 'int?'}, {'id': 'bq2_handling', 'type': ['null', {'type': 'enum', 'symbols': ['keep', 'dynamic', 'fixed']}]}, {'id': 'bed', 'type': 'File?'}, {'id': 'bonferroni', 'type': 'string?'}, {'id': 'call_indels', 'type': 'boolean?'}, {'id': 'def_alt_bq', 'type': 'int?'}, {'id': 'def_alt_jq', 'type': 'int?'}, {'id': 'del_baq', 'type': 'boolean?'}, {'id': 'enable_source_qual', 'type': 'boolean?'}, {'id': 'ignore_vcf', 'type': 'File[]?'}, {'id': 'illumina_1_3', 'type': 'boolean?'}, {'id': 'max_depth_cov', 'type': 'int?'}, {'id': 'max_mapping_quality', 'type': 'int?'}, {'id': 'min_bq', 'type': 'int?'}, {'id': 'min_cov', 'type': 'int?'}, {'id': 'min_mq', 'type': 'int?'}, {'id': 'use_orphan', 'type': 'boolean?'}, {'id': 'threads_lf_call', 'type': 'int?'}, {'id': 'replace_non_match', 'type': 'int?'}, {'id': 'region', 'type': 'string?'}, {'id': 'pvalue_cutoff', 'type': 'float?'}, {'id': 'only_indels', 'type': 'boolean?'}, {'id': 'no_idaq', 'type': 'boolean?'}, {'id': 'no_default_filter', 'type': 'boolean?'}, {'id': 'no_baq', 'type': 'boolean?'}, {'id': 'no_mapping_quality', 'type': 'boolean?'}, {'id': 'no_ext_base_alignment_quality', 'type': 'boolean?'}, {'id': 'min_jq', 'type': 'int?'}, {'id': 'min_alt_jq', 'type': 'int?'}, {'id': 'min_alt_bq', 'type': 'int?'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'udLength', 'type': 'int'}, {'id': 'transcripts', 'type': 'File?'}, {'id': 'strict', 'type': 'boolean?'}, {'id': 'spliceSiteSize', 'type': 'int?'}, {'id': 'spliceRegionIntronMin', 'type': 'int?'}, {'id': 'spliceRegionIntronMax', 'type': 'int?'}, {'id': 'spliceRegionExonSize', 'type': 'int?'}, {'id': 'sequenceOntology', 'type': 'boolean?'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn']}]}, {'id': 'onlyReg', 'type': 'boolean?'}, {'id': 'onlyProtein', 'type': 'boolean?'}, {'id': 'oicr', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'noShiftHgvs', 'type': 'boolean?'}, {'id': 'noNextProt', 'type': 'boolean?'}, {'id': 'noMotif', 'type': 'boolean?'}, {'id': 'bankfile', 'type': 'File?'}, {'id': 'cancer', 'type': 'boolean?'}, {'id': 'cancerSamples', 'type': 'File?'}, {'id': 'canon', 'type': 'boolean?'}, {'id': 'classic', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'filterInterval', 'type': 'File[]?'}, {'id': 'hgvs', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?'}, {'id': 'html_report_1', 'type': 'boolean?'}, {'id': 'importGenome', 'type': 'boolean'}, {'id': 'interval', 'type': 'File[]?'}, {'id': 'lof', 'type': 'boolean?'}, {'id': 'motif', 'type': 'boolean?'}, {'id': 'nextProt', 'type': 'boolean?'}, {'id': 'no_downstream', 'type': 'boolean?'}, {'id': 'no_EffectType', 'type': 'boolean?'}, {'id': 'no_intergenic', 'type': 'boolean?'}, {'id': 'no_intron', 'type': 'boolean?'}, {'id': 'no_upstream', 'type': 'boolean?'}, {'id': 'no_utr', 'type': 'boolean?'}, {'id': 'noGenome', 'type': 'boolean?'}, {'id': 'noHgvs', 'type': 'boolean?'}, {'id': 'noLof', 'type': 'boolean?'}, {'id': 'geneId', 'type': 'boolean?'}, {'id': 'separator', 'type': 'string?'}, {'id': 'empty_text', 'type': 'string?'}, {'id': 'extractFields', 'type': 'string[]?'}, {'id': 'IndexName', 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'multiqc_fastp', 'type': 'File', 'outputSource': ['multiqc_fastp/multiqc_zip']}, {'id': 'stats_bam', 'type': 'File[]', 'outputSource': ['samtools_stats/stats']}, {'id': 'multiqc_markdups', 'type': 'File', 'outputSource': ['multiqc_markdups/multiqc_zip']}, {'id': 'multiqc_samtoolsstats', 'outputSource': ['multiqc_stats/multiqc_zip'], 'type': 'File'}, {'id': 'statsFile_snpeff', 'outputSource': ['snpeff_build_ann/statsFile'], 'type': 'File[]'}, {'id': 'out_snpsift', 'outputSource': ['snpsift_extract/out'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "var-PE",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "Variation/variation_SE.cwl",
    "sha": "f46dede9819f524eccffa848948de3a554d8515b",
    "source": "https://github.com/fjrmoreews/cwl-workflow-SARS-CoV-2/blob/master/Variation/variation_SE.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: var\nlabel: var\n\ninputs:\n  # read(s):\n  - id: reads\n    type: File[]\n    format:\n      - edam:format_1930 # FASTA\n      - edam:format_1931 # FASTQ\n\n  # reference genome:\n  - id: reference_in\n    type: File\n\n  #### 1-  fastp options:\n  - id: unqualified_phred_quality\n    type: int?\n  - id: threads\n    type: int?\n  - id: qualified_phred_quality\n    type: int?\n  - id: min_length_required\n    type: int?\n  - id: force_polyg_tail_trimming\n    type: boolean?\n  - id: disable_trim_poly_g\n    type: boolean?\n  - id: base_correction\n    type: boolean?\n\n#### bowtie2_build options:\n  - id: bmax\n    type: int?\n  - id: bmaxdivn\n    type: int?\n  - id: bt2_index_base\n    type: string?\n  - id: c\n    type: boolean?\n  - id: dcv\n    type: int?\n  - id: f\n    type: boolean?\n  - id: ftabchars\n    type: int?\n  - id: justref\n    type: boolean?\n  - id: large_index\n    type: boolean?\n  - id: noauto\n    type: boolean?\n  - id: nodc\n    type: boolean?\n  - id: noref\n    type: boolean?\n  - id: offrate\n    type: int?\n  - id: packed\n    type: boolean?\n  - id: quiet\n    type: boolean?\n  - id: seed\n    type: int?\n  - id: threads_bowtie2\n    type: int?\n#### bowtie2_align options: (many others)\n  - id: end_to_end_very_sensitive\n    type: boolean?\n\n#### picard__sort_sam options:\n  - id: sort_order\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n  - id: validation_stringency\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n#### picard__mark_duplicates options:\n  - id: alignments_are_sorted\n    type: boolean\n  - id: remove_duplicates\n    type: boolean\n  - id: validation_stringency_1\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n  - id: comment\n    type: string[]?\n  - id: duplicate_scoring_strategy\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n  - id: read_name_regex\n    type: string?\n  - id: optical_duplicate_pixel_distance\n    type: int?\n  - id: barcode_tag\n    type: string?\n####lofreq_viterbi options:\n  - id: keepflags\n    type: boolean?\n  - id: defqual\n    type: int?\n  - id: bq2_handling\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - keep\n          - dynamic\n          - fixed\n        name: bq2_handling\n\n#### lofreq_cal_variants options:\n  - id: bed\n    type: File?\n  - id: bonferroni\n    type: string?\n  - id: call_indels\n    type: boolean?\n  - id: def_alt_bq\n    type: int?\n  - id: def_alt_jq\n    type: int?\n  - id: del_baq\n    type: boolean?\n  - id: enable_source_qual\n    type: boolean?\n  - id: ignore_vcf\n    type: 'File[]?'\n  - id: illumina_1_3\n    type: boolean?\n  - id: max_depth_cov\n    type: int?\n  - id: max_mapping_quality\n    type: int?\n  - id: min_bq\n    type: int?\n  - id: min_cov\n    type: int?\n  - id: min_mq\n    type: int?\n  - id: use_orphan\n    type: boolean?\n  - id: threads_lf_call\n    type: int?\n  - id: replace_non_match\n    type: int?\n  - id: region\n    type: string?\n  - id: pvalue_cutoff\n    type: float?\n  - id: only_indels\n    type: boolean?\n  - id: no_idaq\n    type: boolean?\n  - id: no_default_filter\n    type: boolean?\n  - id: no_baq\n    type: boolean?\n  - id: no_mapping_quality\n    type: boolean?\n  - id: no_ext_base_alignment_quality\n    type: boolean?\n  - id: min_jq\n    type: int?\n  - id: min_alt_jq\n    type: int?\n  - id: min_alt_bq\n    type: int?\n\n#### SnpEff buiild & ann:\n  - id: genome_reference\n    type: string\n  - id: udLength\n    type: int\n  - id: transcripts\n    type: File?\n  - id: strict\n    type: boolean?\n  - id: spliceSiteSize\n    type: int?\n  - id: spliceRegionIntronMin\n    type: int?\n  - id: spliceRegionIntronMax\n    type: int?\n  - id: spliceRegionExonSize\n    type: int?\n  - id: sequenceOntology\n    type: boolean?\n  - id: outputFormat\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - vcf\n          - bed\n          - gatk\n          - bedAnn\n        name: outputFormat\n  - id: onlyReg\n    type: boolean?\n  - id: onlyProtein\n    type: boolean?\n  - id: oicr\n    type: boolean?\n  - id: noStats\n    type: boolean?\n  - id: noShiftHgvs\n    type: boolean?\n  - id: noNextProt\n    type: boolean?\n  - id: noMotif\n    type: boolean?\n  - id: bankfile\n    type: File?\n  - id: cancer\n    type: boolean?\n  - id: cancerSamples\n    type: File?\n  - id: canon\n    type: boolean?\n  - id: classic\n    type: boolean?\n  - id: csvFile\n    type: boolean?\n  - id: filterInterval\n    type: 'File[]?'\n  - id: hgvs\n    type: boolean?\n  - id: formatEff\n    type: boolean?\n  - id: html_report_1\n    type: boolean?\n  - id: importGenome\n    type: boolean\n  - id: interval\n    type: 'File[]?'\n  - id: lof\n    type: boolean?\n  - id: motif\n    type: boolean?\n  - id: nextProt\n    type: boolean?\n  - id: no_downstream\n    type: boolean?\n  - id: no_EffectType\n    type: boolean?\n  - id: no_intergenic\n    type: boolean?\n  - id: no_intron\n    type: boolean?\n  - id: no_upstream\n    type: boolean?\n  - id: no_utr\n    type: boolean?\n  - id: noGenome\n    type: boolean?\n  - id: noHgvs\n    type: boolean?\n  - id: noLof\n    type: boolean?\n  - id: geneId\n    type: boolean?\n\n#### SNPSIFT\n  - id: separator\n    type: string?\n  - id: empty_text\n    type: string?\n  - id: extractFields\n    type: 'string[]?'\n\noutputs:\n#FASTP:\n#  - id: html_report\n#    outputSource:\n#      - fastp/html_report\n#    type: File[]\n  - id: multiqc_fastp\n    outputSource:\n      - multiqc_fastp/multiqc_zip\n#  - id: json_report\n#    outputSource:\n#      - fastp/json_report\n#    type: File[]\n#  - id: out_fastq1\n#    outputSource:\n#      - fastp/out_fastq1\n#    type: File[]\n\n#BOWTIE2_BUILD:\n#  - id: indices\n#    outputSource:\n#      - bowtie2_build/indices\n#    type: File\n\n#BOWTIE2_ALIGN:\n#  - id: output\n#    outputSource:\n#      - bowtie2_align/output\n#    type: File[]\n  - id: output_log\n    outputSource:\n      - bowtie2_align/output_log\n    type: File[]\n#picard_sortsam:\n#  - id: outFile\n#    outputSource:\n#      - picard__sort_sam/sorted_alignments\n#    type: File[]\n\n#picard_markduplicates\n  - id: metrics\n    outputSource:\n      - picard__mark_duplicates/metrics\n    type: File[]\n  - id: log\n    outputSource:\n      - picard__mark_duplicates/log\n    type: File[]\n  - id: alignments\n    outputSource:\n      - picard__mark_duplicates/alignments\n    type: File[]\n\n#lofreq_viterbi:\n#  - id: realigned\n#    outputSource:\n#      - lofreq_viterbi/realigned\n#    type: File[]\n#samtools_sort\n#  - id: bam_sorted\n#    outputSource:\n#      - samtools_sort/bam_sorted\n#    type: File[]\n#lofreq_call:\n#  - id: vcf\n#    outputSource:\n#      - lofreq_call/vcf\n#    type: File[]\n#SNPEFF:\n  - id: csvFile\n    outputSource:\n      - snpeff_build_ann/csvFile\n    type: File[]?\n  - id: genes\n    outputSource:\n      - snpeff_build_ann/genes\n    type: File[]?\n#  - id: snpeff_output\n#    outputSource:\n#      - snpeff_build_ann/snpeff_output\n#    type: File[]?\n  - id: statsFile\n    outputSource:\n      - snpeff_build_ann/statsFile\n    type: File[]?\n#SNPSIFT:\n  - id: out\n    outputSource:\n      - snpsift_extract/out\n    type: File[]\n\nsteps:\n  - id: fastp\n    scatter: fastq1\n    in:\n      - id: base_correction\n        source: base_correction\n      - id: disable_trim_poly_g\n        source: disable_trim_poly_g\n      - id: fastq1\n        source: reads\n      - id: force_polyg_tail_trimming\n        source: force_polyg_tail_trimming\n      - id: min_length_required\n        source: min_length_required\n      - id: qualified_phred_quality\n        source: qualified_phred_quality\n      - id: threads\n        source: threads\n      - id: unqualified_phred_quality\n        source: unqualified_phred_quality\n    out:\n      - id: html_report\n      - id: json_report\n      - id: out_fastq1\n    run: ./tools/fastp.cwl\n    in:\n      - id: report_name\n        valueFrom: 'multiqc_fast'\n      - id: qc_files_array\n        source: fastp/json_report\n    out:\n      - id: multiqc_zip\n    run: ./tools/multiqc.cwl\n\n  - id: bowtie2_build\n    in:\n      - id: bmax\n        source: bmax\n      - id: bmaxdivn\n        source: bmaxdivn\n      - id: bt2_index_base\n        source: bt2_index_base\n      - id: c\n        source: c\n      - id: dcv\n        source: dcv\n      - id: f\n        source: f\n      - id: ftabchars\n        source: ftabchars\n      - id: justref\n        source: justref\n      - id: large_index\n        source: large_index\n      - id: noauto\n        source: noauto\n      - id: nodc\n        source: nodc\n      - id: noref\n        source: noref\n      - id: offrate\n        source: offrate\n      - id: packed\n        source: packed\n      - id: quiet\n        source: quiet\n      - id: reference_in\n        source:\n          - reference_in\n      - id: seed\n        source: seed\n      - id: threads\n        source: threads_bowtie2\n    out:\n      - id: indices\n      - id: output_log\n    run: ./tools/bowtie2_build.cwl\n\n  - id: bowtie2_align\n    scatter: filelist\n    in:\n      - id: filelist\n        source: fastp/out_fastq1\n      - id: indices_file\n        source: bowtie2_build/indices\n      - id: end_to_end_very_sensitive\n        source: end_to_end_very_sensitive\n    out:\n      - id: output\n      - id: output_log\n    run: ./tools/bowtie2_align.cwl\n  - id: picard__sort_sam\n    scatter: alignments\n    in:\n      - id: alignments\n        source: bowtie2_align/output\n      - id: sort_order\n        source: sort_order\n      - id: validation_stringency\n        source: validation_stringency\n    out:\n      - id: sorted_alignments\n    run: ./tools/picard_SortSam.cwl\n\n  - id: picard__mark_duplicates\n    scatter: alignments\n    in:\n      - id: alignments_are_sorted\n        source: alignments_are_sorted\n      - id: alignments\n        source: picard__sort_sam/sorted_alignments\n      - id: barcode_tag\n        source: barcode_tag\n      - id: comment\n        source:\n          - comment\n      - id: duplicate_scoring_strategy\n        source: duplicate_scoring_strategy\n      - id: optical_duplicate_pixel_distance\n        source: optical_duplicate_pixel_distance\n      - id: remove_duplicates\n        source: remove_duplicates\n      - id: validation_stringency\n        source: validation_stringency_1\n    out:\n      - id: alignments\n      - id: log\n      - id: metrics\n    run: ./tools/picard_MarkDuplicates.cwl\n\n  - id: lofreq_viterbi\n    scatter: reads\n    in:\n      - id: bq2_handling\n        source: bq2_handling\n      - id: defqual\n        source: defqual\n      - id: keepflags\n        source: keepflags\n      - id: reads\n        source: picard__mark_duplicates/alignments\n      - id: reference\n        source: reference_in\n    out:\n      - id: realigned\n    run: ./tools/lofreq_viterbi.cwl\n  - id: samtools_sort\n    scatter: bam_unsorted\n    in:\n      - id: bam_unsorted\n        source: lofreq_viterbi/realigned\n    out:\n      - id: bam_sorted\n    run: ./tools/samtools_sort.cwl\n\n  - id: samtools_faidx\n    in:\n      - id: sequences\n        source: reference_in\n    out:\n      - id: sequences_index\n      - id: sequences_with_index\n    run: ./tools/samtools_faidx.cwl\n\n  - id: samtool_index\n    scatter: bam_sorted\n    in:\n      - id: bam_sorted\n        source: samtools_sort/bam_sorted\n    out:\n      - id: bam_sorted_indexed\n    run: ./tools/samtools_index.cwl\n\n\n  - id: lofreq_call\n    scatter: [reads_align, reads_index]\n    scatterMethod: \"dotproduct\"\n    in:\n      - id: threads\n        source: threads_lf_call\n      - id: reference_index\n        source: samtools_faidx/sequences_index\n      - id: reference_fasta\n        source: samtools_faidx/sequences_with_index\n      - id: call_indels\n        source: call_indels\n      - id: only_indels\n        source: only_indels\n      - id: bed\n        source: bed\n      - id: region\n        source: region\n      - id: min_bq\n        source: min_bq\n      - id: min_alt_bq\n        source: min_alt_bq\n      - id: def_alt_bq\n        source: def_alt_bq\n      - id: min_jq\n        source: min_jq\n      - id: min_alt_jq\n        source: min_alt_jq\n      - id: def_alt_jq\n        source: def_alt_jq\n      - id: no_baq\n        source: no_baq\n      - id: no_idaq\n        source: no_idaq\n      - id: del_baq\n        source: del_baq\n      - id: no_ext_base_alignment_quality\n        source: no_ext_base_alignment_quality\n      - id: min_mq\n        source: min_mq\n      - id: max_mapping_quality\n        source: max_mapping_quality\n      - id: no_mapping_quality\n        source: no_mapping_quality\n      - id: enable_source_qual\n        source: enable_source_qual\n      - id: ignore_vcf\n        source:\n          - ignore_vcf\n      - id: replace_non_match\n        source: replace_non_match\n      - id: pvalue_cutoff\n        source: pvalue_cutoff\n      - id: bonferroni\n        source: bonferroni\n      - id: min_cov\n        source: min_cov\n      - id: max_depth_cov\n        source: max_depth_cov\n      - id: illumina_1_3\n        source: illumina_1_3\n      - id: use_orphan\n        source: use_orphan\n      - id: no_default_filter\n        source: no_default_filter\n      - id: reads_align\n        source: samtools_sort/bam_sorted\n      - id: reads_index\n        source: samtool_index/bam_sorted_indexed\n    out:\n      - id: vcf\n    run: ./tools/lofreq_call.cwl\n    label: LoFreq Call Variants\n\n  - id: snpeff_build_ann\n    scatter: sequence\n    in: \n      - id: importGenome\n        source: importGenome\n      - id: genome_reference\n        source: genome_reference\n      - id: bankfile\n        source: bankfile\n      - id: sequence\n        source: lofreq_call/vcf\n      - id: outputFormat\n        source: outputFormat\n      - id: udLength\n        source: udLength\n      - id: html_report\n        source: html_report_1\n      - id: csvFile\n        source: csvFile\n      - id: noStats\n        source: noStats\n      - id: formatEff\n        source: formatEff\n      - id: classic\n        source: classic\n      - id: sequenceOntology\n        source: sequenceOntology\n      - id: hgvs\n        source: hgvs\n      - id: noShiftHgvs\n        source: noShiftHgvs\n      - id: noHgvs\n        source: noHgvs\n      - id: geneId\n        source: geneId\n      - id: lof\n        source: lof\n      - id: noLof\n        source: noLof\n      - id: cancer\n        source: cancer\n      - id: cancerSamples\n        source: cancerSamples\n      - id: oicr\n        source: oicr\n      - id: canon\n        source: canon\n      - id: motif\n        source: motif\n      - id: noMotif\n        source: noMotif\n      - id: noNextProt\n        source: noNextProt\n      - id: nextProt\n        source: nextProt\n      - id: noGenome\n        source: noGenome\n      - id: onlyProtein\n        source: onlyProtein\n      - id: transcripts\n        source: transcripts\n      - id: interval\n        source:\n          - interval\n      - id: spliceRegionExonSize\n        source: spliceRegionExonSize\n      - id: spliceRegionIntronMax\n        source: spliceRegionIntronMax\n      - id: spliceRegionIntronMin\n        source: spliceRegionIntronMin\n      - id: spliceSiteSize\n        source: spliceSiteSize\n      - id: onlyReg\n        source: onlyReg\n      - id: strict\n        source: strict\n      - id: filterInterval\n        source:\n          - filterInterval\n      - id: no_downstream\n        source: no_downstream\n      - id: no_intergenic\n        source: no_intergenic\n      - id: no_intron\n        source: no_intron\n      - id: no_upstream\n        source: no_upstream\n      - id: no_utr\n        source: no_utr\n      - id: no_EffectType\n        source: no_EffectType\n    out:\n      - id: snpeff_output\n      - id: statsFile\n      - id: csvFile\n      - id: genes\n    run: ./tools/snpEff_build_ann.cwl\n\n  - id: snpsift_extract\n    scatter: input_vcf\n    in:\n      - id: input_vcf\n        source: snpeff_build_ann/snpeff_output\n      - id: extractFields\n        source:\n          - extractFields\n      - id: separator\n        source: separator\n      - id: empty_text\n        source: empty_text\n    out:\n      - id: out\n    run: ./tools/snpSift_extract.cwl\n\nrequirements:\n  ScatterFeatureRequirement: {}\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "Workflow",
    "cwl_id": "var",
    "cwl_inputs": "[{'id': 'reads', 'type': 'File[]', 'format': ['edam:format_1930', 'edam:format_1931']}, {'id': 'reference_in', 'type': 'File'}, {'id': 'unqualified_phred_quality', 'type': 'int?'}, {'id': 'threads', 'type': 'int?'}, {'id': 'qualified_phred_quality', 'type': 'int?'}, {'id': 'min_length_required', 'type': 'int?'}, {'id': 'force_polyg_tail_trimming', 'type': 'boolean?'}, {'id': 'disable_trim_poly_g', 'type': 'boolean?'}, {'id': 'base_correction', 'type': 'boolean?'}, {'id': 'bmax', 'type': 'int?'}, {'id': 'bmaxdivn', 'type': 'int?'}, {'id': 'bt2_index_base', 'type': 'string?'}, {'id': 'c', 'type': 'boolean?'}, {'id': 'dcv', 'type': 'int?'}, {'id': 'f', 'type': 'boolean?'}, {'id': 'ftabchars', 'type': 'int?'}, {'id': 'justref', 'type': 'boolean?'}, {'id': 'large_index', 'type': 'boolean?'}, {'id': 'noauto', 'type': 'boolean?'}, {'id': 'nodc', 'type': 'boolean?'}, {'id': 'noref', 'type': 'boolean?'}, {'id': 'offrate', 'type': 'int?'}, {'id': 'packed', 'type': 'boolean?'}, {'id': 'quiet', 'type': 'boolean?'}, {'id': 'seed', 'type': 'int?'}, {'id': 'threads_bowtie2', 'type': 'int?'}, {'id': 'end_to_end_very_sensitive', 'type': 'boolean?'}, {'id': 'sort_order', 'type': ['null', {'type': 'enum', 'symbols': ['queryname', 'coordinate', 'duplicate']}]}, {'id': 'validation_stringency', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'alignments_are_sorted', 'type': 'boolean'}, {'id': 'remove_duplicates', 'type': 'boolean'}, {'id': 'validation_stringency_1', 'type': ['null', {'type': 'enum', 'symbols': ['STRICT', 'LENIENT', 'SILENT']}]}, {'id': 'comment', 'type': 'string[]?'}, {'id': 'duplicate_scoring_strategy', 'type': ['null', {'type': 'enum', 'symbols': ['SUM_OF_BASE_QUALITIES', 'TOTAL_MAPPED_REFERENCE_LENGTH', 'RANDOM']}]}, {'id': 'read_name_regex', 'type': 'string?'}, {'id': 'optical_duplicate_pixel_distance', 'type': 'int?'}, {'id': 'barcode_tag', 'type': 'string?'}, {'id': 'keepflags', 'type': 'boolean?'}, {'id': 'defqual', 'type': 'int?'}, {'id': 'bq2_handling', 'type': ['null', {'type': 'enum', 'symbols': ['keep', 'dynamic', 'fixed'], 'name': 'bq2_handling'}]}, {'id': 'bed', 'type': 'File?'}, {'id': 'bonferroni', 'type': 'string?'}, {'id': 'call_indels', 'type': 'boolean?'}, {'id': 'def_alt_bq', 'type': 'int?'}, {'id': 'def_alt_jq', 'type': 'int?'}, {'id': 'del_baq', 'type': 'boolean?'}, {'id': 'enable_source_qual', 'type': 'boolean?'}, {'id': 'ignore_vcf', 'type': 'File[]?'}, {'id': 'illumina_1_3', 'type': 'boolean?'}, {'id': 'max_depth_cov', 'type': 'int?'}, {'id': 'max_mapping_quality', 'type': 'int?'}, {'id': 'min_bq', 'type': 'int?'}, {'id': 'min_cov', 'type': 'int?'}, {'id': 'min_mq', 'type': 'int?'}, {'id': 'use_orphan', 'type': 'boolean?'}, {'id': 'threads_lf_call', 'type': 'int?'}, {'id': 'replace_non_match', 'type': 'int?'}, {'id': 'region', 'type': 'string?'}, {'id': 'pvalue_cutoff', 'type': 'float?'}, {'id': 'only_indels', 'type': 'boolean?'}, {'id': 'no_idaq', 'type': 'boolean?'}, {'id': 'no_default_filter', 'type': 'boolean?'}, {'id': 'no_baq', 'type': 'boolean?'}, {'id': 'no_mapping_quality', 'type': 'boolean?'}, {'id': 'no_ext_base_alignment_quality', 'type': 'boolean?'}, {'id': 'min_jq', 'type': 'int?'}, {'id': 'min_alt_jq', 'type': 'int?'}, {'id': 'min_alt_bq', 'type': 'int?'}, {'id': 'genome_reference', 'type': 'string'}, {'id': 'udLength', 'type': 'int'}, {'id': 'transcripts', 'type': 'File?'}, {'id': 'strict', 'type': 'boolean?'}, {'id': 'spliceSiteSize', 'type': 'int?'}, {'id': 'spliceRegionIntronMin', 'type': 'int?'}, {'id': 'spliceRegionIntronMax', 'type': 'int?'}, {'id': 'spliceRegionExonSize', 'type': 'int?'}, {'id': 'sequenceOntology', 'type': 'boolean?'}, {'id': 'outputFormat', 'type': ['null', {'type': 'enum', 'symbols': ['vcf', 'bed', 'gatk', 'bedAnn'], 'name': 'outputFormat'}]}, {'id': 'onlyReg', 'type': 'boolean?'}, {'id': 'onlyProtein', 'type': 'boolean?'}, {'id': 'oicr', 'type': 'boolean?'}, {'id': 'noStats', 'type': 'boolean?'}, {'id': 'noShiftHgvs', 'type': 'boolean?'}, {'id': 'noNextProt', 'type': 'boolean?'}, {'id': 'noMotif', 'type': 'boolean?'}, {'id': 'bankfile', 'type': 'File?'}, {'id': 'cancer', 'type': 'boolean?'}, {'id': 'cancerSamples', 'type': 'File?'}, {'id': 'canon', 'type': 'boolean?'}, {'id': 'classic', 'type': 'boolean?'}, {'id': 'csvFile', 'type': 'boolean?'}, {'id': 'filterInterval', 'type': 'File[]?'}, {'id': 'hgvs', 'type': 'boolean?'}, {'id': 'formatEff', 'type': 'boolean?'}, {'id': 'html_report_1', 'type': 'boolean?'}, {'id': 'importGenome', 'type': 'boolean'}, {'id': 'interval', 'type': 'File[]?'}, {'id': 'lof', 'type': 'boolean?'}, {'id': 'motif', 'type': 'boolean?'}, {'id': 'nextProt', 'type': 'boolean?'}, {'id': 'no_downstream', 'type': 'boolean?'}, {'id': 'no_EffectType', 'type': 'boolean?'}, {'id': 'no_intergenic', 'type': 'boolean?'}, {'id': 'no_intron', 'type': 'boolean?'}, {'id': 'no_upstream', 'type': 'boolean?'}, {'id': 'no_utr', 'type': 'boolean?'}, {'id': 'noGenome', 'type': 'boolean?'}, {'id': 'noHgvs', 'type': 'boolean?'}, {'id': 'noLof', 'type': 'boolean?'}, {'id': 'geneId', 'type': 'boolean?'}, {'id': 'separator', 'type': 'string?'}, {'id': 'empty_text', 'type': 'string?'}, {'id': 'extractFields', 'type': 'string[]?'}]",
    "cwl_outputs": "[{'id': 'multiqc_fastp', 'outputSource': ['multiqc_fastp/multiqc_zip']}, {'id': 'output_log', 'outputSource': ['bowtie2_align/output_log'], 'type': 'File[]'}, {'id': 'metrics', 'outputSource': ['picard__mark_duplicates/metrics'], 'type': 'File[]'}, {'id': 'log', 'outputSource': ['picard__mark_duplicates/log'], 'type': 'File[]'}, {'id': 'alignments', 'outputSource': ['picard__mark_duplicates/alignments'], 'type': 'File[]'}, {'id': 'csvFile', 'outputSource': ['snpeff_build_ann/csvFile'], 'type': 'File[]?'}, {'id': 'genes', 'outputSource': ['snpeff_build_ann/genes'], 'type': 'File[]?'}, {'id': 'statsFile', 'outputSource': ['snpeff_build_ann/statsFile'], 'type': 'File[]?'}, {'id': 'out', 'outputSource': ['snpsift_extract/out'], 'type': 'File[]'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "var",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "md_gather.cwl",
    "sha": "9f41e71548c951fbce858e79bc531dcf540feba3",
    "source": "https://github.com/douglowe/biobb_hpc_cwl_md_list/blob/main/md_gather.cwl",
    "content": "class: ExpressionTool\ncwlVersion: v1.1\ndoc: |\n  This javascript takes three inputs: a list of files; a project file;\n  and an optional string. It will create a directory named after the\n  project file and optional string, populate that directory with the\n  files in the list, and return the directory.\nrequirements:\n  InlineJavascriptRequirement: {}\ninputs:\n  external_files: File[]\n  external_project_file: File\n  external_string:\n    type: string\n    default: \"\"\noutputs:\n  project_work_dir:     \n    label: Output archive directory\n    doc: |\n      workflow output directory, containing required output files\n    type: Directory\nexpression: |\n  ${\n  return {\"project_work_dir\": \n      {\"class\": \"Directory\", \n       \"basename\": inputs.external_project_file.basename + inputs.external_string, \n       \"listing\": inputs.external_files}\n  };\n  }\n",
    "cwl_class": "ExpressionTool",
    "cwl_id": null,
    "cwl_inputs": "{'external_files': 'File[]', 'external_project_file': 'File', 'external_string': {'type': 'string', 'default': ''}}",
    "cwl_outputs": "{'project_work_dir': {'label': 'Output archive directory', 'doc': 'workflow output directory, containing required output files\\n', 'type': 'Directory'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.1",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'InlineJavascriptRequirement': {}}",
    "cwl_doc": "This javascript takes three inputs: a list of files; a project file;\nand an optional string. It will create a directory named after the\nproject file and optional string, populate that directory with the\nfiles in the list, and return the directory.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": "${\nreturn {\"project_work_dir\": \n    {\"class\": \"Directory\", \n     \"basename\": inputs.external_project_file.basename + inputs.external_string, \n     \"listing\": inputs.external_files}\n};\n}\n",
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "md_launch.cwl",
    "sha": "00f94870223d8c8999d2beecc7a416c9c19dddda",
    "source": "https://github.com/douglowe/biobb_hpc_cwl_md_list/blob/main/md_launch.cwl",
    "content": "#!/usr/bin/env cwl-runner\n\ncwlVersion: v1.2\nclass: Workflow\n\nrequirements:\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\ninputs:\n  step1_pdb_files:\n    type:\n      type: array\n      items: File\n  step2_editconf_config: string\n  step4_grompp_genion_config: string\n  step5_genion_config: string\n  step6_grompp_min_config: string\n  step8_make_ndx_config: string\n  \n  step9_grompp_nvt_config: string\n  step11_grompp_npt_config: string\n  step13_grompp_md_config: string\n  step14_mdrun_md_config: string\n\noutputs:\n  top_dir:\n    label: collected simulation output data\n    doc: |\n      Collection of output directories returned by the md_list.cwl workflows.\n    type:\n      type: array\n      items: Directory\n    outputSource: launch_workflow/dir\n\n  \nsteps:\n  launch_workflow:\n    doc: |\n      Calls the local md_list.cwl workflow, scattering over the list of molecular input\n      files (step1_pdb_files). One input file will be passed to each instance of the \n      workflow. All other input configuration strings are passed unchanged to each instance.\n      \n      Each md_list.cwl workflow will return a directory containing the output files defined\n      within the workflow. Each directory returned will be named after the molecular input \n      file passed to that workflow.\n    run: md_list.cwl\n    scatter: step1_pdb_file\n    in:\n      step1_pdb_file: step1_pdb_files\n      step2_editconf_config: step2_editconf_config\n      step4_grompp_genion_config: step4_grompp_genion_config\n      step5_genion_config: step5_genion_config\n      step6_grompp_min_config: step6_grompp_min_config\n      step8_make_ndx_config: step8_make_ndx_config\n      step9_grompp_nvt_config: step9_grompp_nvt_config\n      step11_grompp_npt_config: step11_grompp_npt_config\n      step13_grompp_md_config: step13_grompp_md_config\n      step14_mdrun_md_config: step14_mdrun_md_config\n    out: [dir]\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'step1_pdb_files': {'type': {'type': 'array', 'items': 'File'}}, 'step2_editconf_config': 'string', 'step4_grompp_genion_config': 'string', 'step5_genion_config': 'string', 'step6_grompp_min_config': 'string', 'step8_make_ndx_config': 'string', 'step9_grompp_nvt_config': 'string', 'step11_grompp_npt_config': 'string', 'step13_grompp_md_config': 'string', 'step14_mdrun_md_config': 'string'}",
    "cwl_outputs": "{'top_dir': {'label': 'collected simulation output data', 'doc': 'Collection of output directories returned by the md_list.cwl workflows.\\n', 'type': {'type': 'array', 'items': 'Directory'}, 'outputSource': 'launch_workflow/dir'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.2",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "launch_workflow": {
        "doc": "Calls the local md_list.cwl workflow, scattering over the list of molecular input\nfiles (step1_pdb_files). One input file will be passed to each instance of the \nworkflow. All other input configuration strings are passed unchanged to each instance.\n\nEach md_list.cwl workflow will return a directory containing the output files defined\nwithin the workflow. Each directory returned will be named after the molecular input \nfile passed to that workflow.\n",
        "run": "md_list.cwl",
        "scatter": "step1_pdb_file",
        "in": {
          "step1_pdb_file": "step1_pdb_files",
          "step2_editconf_config": "step2_editconf_config",
          "step4_grompp_genion_config": "step4_grompp_genion_config",
          "step5_genion_config": "step5_genion_config",
          "step6_grompp_min_config": "step6_grompp_min_config",
          "step8_make_ndx_config": "step8_make_ndx_config",
          "step9_grompp_nvt_config": "step9_grompp_nvt_config",
          "step11_grompp_npt_config": "step11_grompp_npt_config",
          "step13_grompp_md_config": "step13_grompp_md_config",
          "step14_mdrun_md_config": "step14_mdrun_md_config"
        },
        "out": [
          "dir"
        ]
      }
    }
  },
  {
    "path": "md_launch_mutate.cwl",
    "sha": "5503440b9d808a1c47baef864911aaaccd86d7bd",
    "source": "https://github.com/douglowe/biobb_hpc_cwl_md_list/blob/main/md_launch_mutate.cwl",
    "content": "#!/usr/bin/env cwl-runner\n\ncwlVersion: v1.2\nclass: Workflow\n\nrequirements:\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n  InlineJavascriptRequirement: {}\n  MultipleInputFeatureRequirement: {}\n\ninputs:\n  step0_mutate_list:  \n    type:\n      type: array\n      items: string\n  step0_pdb_file: File\n  step2_editconf_config: string\n  step4_grompp_genion_config: string\n  step5_genion_config: string\n  step6_grompp_min_config: string\n  step8_make_ndx_config: string\n  \n  step9_grompp_nvt_config: string\n  step11_grompp_npt_config: string\n  step13_grompp_md_config: string\n  step14_mdrun_md_config: string\n\noutputs:\n  top_dir:\n    label: Collected Simulation Data\n    doc: |\n      Assorted data files output by the workflow\n    type:\n      type: array\n      items: Directory\n    outputSource: subworkflow_mutate/outdir\n\n  \nsteps:\n  subworkflow_mutate:\n    in:\n      step0_mutate: step0_mutate_list\n      step0_pdb_file: step0_pdb_file\n      step2_editconf_config: step2_editconf_config\n      step4_grompp_genion_config: step4_grompp_genion_config\n      step5_genion_config: step5_genion_config\n      step6_grompp_min_config: step6_grompp_min_config\n      step8_make_ndx_config: step8_make_ndx_config\n      step9_grompp_nvt_config: step9_grompp_nvt_config\n      step11_grompp_npt_config: step11_grompp_npt_config\n      step13_grompp_md_config: step13_grompp_md_config\n      step14_mdrun_md_config: step14_mdrun_md_config\n      \n    out: [outdir]\n\n    scatter: step0_mutate\n    run:\n      class: Workflow\n      inputs:\n        step0_mutate: string\n        step0_pdb_file: File\n        step2_editconf_config: string\n        step4_grompp_genion_config: string\n        step5_genion_config: string\n        step6_grompp_min_config: string\n        step8_make_ndx_config: string\n        step9_grompp_nvt_config: string\n        step11_grompp_npt_config: string\n        step13_grompp_md_config: string\n        step14_mdrun_md_config: string\n\n      outputs:\n        outdir:\n          label: Simulation Data\n          type: Directory\n          outputSource: launch_workflow/dir\n\n\n      steps:\n        step0_mutate:\n          label: mutate the protein\n          when: $(inputs.config.indexOf(\"WT\") == -1)\n          run: biobb/biobb_adapters/cwl/biobb_model/model/mutate.cwl\n          in:\n            config: step0_mutate\n            input_pdb_path: step0_pdb_file\n          out: [output_pdb_file]\n\n\n        launch_workflow:\n          run: md_list.cwl\n          in:\n            step1_pdb_file:\n              source:\n                - step0_mutate/output_pdb_file\n                - step0_pdb_file\n              pickValue: first_non_null\n            step2_editconf_config: step2_editconf_config\n            step4_grompp_genion_config: step4_grompp_genion_config\n            step5_genion_config: step5_genion_config\n            step6_grompp_min_config: step6_grompp_min_config\n            step8_make_ndx_config: step8_make_ndx_config\n            step9_grompp_nvt_config: step9_grompp_nvt_config\n            step11_grompp_npt_config: step11_grompp_npt_config\n            step13_grompp_md_config: step13_grompp_md_config\n            step14_mdrun_md_config: step14_mdrun_md_config\n          out: [dir]\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'step0_mutate_list': {'type': {'type': 'array', 'items': 'string'}}, 'step0_pdb_file': 'File', 'step2_editconf_config': 'string', 'step4_grompp_genion_config': 'string', 'step5_genion_config': 'string', 'step6_grompp_min_config': 'string', 'step8_make_ndx_config': 'string', 'step9_grompp_nvt_config': 'string', 'step11_grompp_npt_config': 'string', 'step13_grompp_md_config': 'string', 'step14_mdrun_md_config': 'string'}",
    "cwl_outputs": "{'top_dir': {'label': 'Collected Simulation Data', 'doc': 'Assorted data files output by the workflow\\n', 'type': {'type': 'array', 'items': 'Directory'}, 'outputSource': 'subworkflow_mutate/outdir'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.2",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}, 'InlineJavascriptRequirement': {}, 'MultipleInputFeatureRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "subworkflow_mutate": {
        "in": {
          "step0_mutate": "step0_mutate_list",
          "step0_pdb_file": "step0_pdb_file",
          "step2_editconf_config": "step2_editconf_config",
          "step4_grompp_genion_config": "step4_grompp_genion_config",
          "step5_genion_config": "step5_genion_config",
          "step6_grompp_min_config": "step6_grompp_min_config",
          "step8_make_ndx_config": "step8_make_ndx_config",
          "step9_grompp_nvt_config": "step9_grompp_nvt_config",
          "step11_grompp_npt_config": "step11_grompp_npt_config",
          "step13_grompp_md_config": "step13_grompp_md_config",
          "step14_mdrun_md_config": "step14_mdrun_md_config"
        },
        "out": [
          "outdir"
        ],
        "scatter": "step0_mutate",
        "run": "{'class': 'Workflow', 'inputs': {'step0_mutate': 'string', 'step0_pdb_file': 'File', 'step2_editconf_config': 'string', 'step4_grompp_genion_config': 'string', 'step5_genion_config': 'string', 'step6_grompp_min_config': 'string', 'step8_make_ndx_config': 'string', 'step9_grompp_nvt_config': 'string', 'step11_grompp_npt_config': 'string', 'step13_grompp_md_config': 'string', 'step14_mdrun_md_config': 'string'}, 'outputs': {'outdir': {'label': 'Simulation Data', 'type': 'Directory', 'outputSource': 'launch_workflow/dir'}}, 'steps': {'step0_mutate': {'label': 'mutate the protein', 'when': '$(inputs.config.indexOf(\"WT\") == -1)', 'run': 'biobb/biobb_adapters/cwl/biobb_model/model/mutate.cwl', 'in': {'config': 'step0_mutate', 'input_pdb_path': 'step0_pdb_file'}, 'out': ['output_pdb_file']}, 'launch_workflow': {'run': 'md_list.cwl', 'in': {'step1_pdb_file': {'source': ['step0_mutate/output_pdb_file', 'step0_pdb_file'], 'pickValue': 'first_non_null'}, 'step2_editconf_config': 'step2_editconf_config', 'step4_grompp_genion_config': 'step4_grompp_genion_config', 'step5_genion_config': 'step5_genion_config', 'step6_grompp_min_config': 'step6_grompp_min_config', 'step8_make_ndx_config': 'step8_make_ndx_config', 'step9_grompp_nvt_config': 'step9_grompp_nvt_config', 'step11_grompp_npt_config': 'step11_grompp_npt_config', 'step13_grompp_md_config': 'step13_grompp_md_config', 'step14_mdrun_md_config': 'step14_mdrun_md_config'}, 'out': ['dir']}}}"
      }
    }
  },
  {
    "path": "md_launch_mutate_reduced.cwl",
    "sha": "4a8ff4c23f1693a7696854c3f1329860ad9562ea",
    "source": "https://github.com/douglowe/biobb_hpc_cwl_md_list/blob/main/md_launch_mutate_reduced.cwl",
    "content": "#!/usr/bin/env cwl-runner\n\ncwlVersion: v1.2\nclass: Workflow\n\nrequirements:\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n  InlineJavascriptRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  \ninputs:\n  step0_mutate_list:  \n    type:\n      type: array\n      items: string\n  step0_pdb_file: File\n  step2_editconf_config: string\n  step4_grompp_genion_config: string\n  step5_genion_config: string\n  step6_grompp_min_config: string\n  step8_make_ndx_config: string\n  \n  step9_grompp_nvt_config: string\n  step11_grompp_npt_config: string\n  step13_grompp_md_config: string\n  step14_mdrun_md_config: string\n\noutputs:\n  outfile:\n    label: mutated protein file\n    doc: |\n      Assorted data files output by the workflow\n    type:\n      type: array\n      items: File\n    outputSource: subworkflow_mutate/outfile\n\n  \nsteps:\n  subworkflow_mutate:\n    in:\n      step0_mutate: step0_mutate_list\n      step0_pdb_file: step0_pdb_file\n    out: [outfile]\n    \n    scatter: step0_mutate\n    run:\n      class: Workflow\n      inputs:\n        step0_mutate: string\n        step0_pdb_file: File\n      outputs:\n        outfile:\n          label: example mutated file\n          type: File\n          outputSource:\n            - step0_mutate/output_pdb_file\n            - step0_pdb_file\n          pickValue: first_non_null\n\n      steps:\n        step0_mutate:\n          label: mutate the protein\n          when: $(inputs.config.indexOf(\"WT\") == -1)\n          run: biobb/biobb_adapters/cwl/biobb_model/model/mutate.cwl\n          in:\n            config: step0_mutate\n            input_pdb_path: step0_pdb_file\n          out: [output_pdb_file]\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'step0_mutate_list': {'type': {'type': 'array', 'items': 'string'}}, 'step0_pdb_file': 'File', 'step2_editconf_config': 'string', 'step4_grompp_genion_config': 'string', 'step5_genion_config': 'string', 'step6_grompp_min_config': 'string', 'step8_make_ndx_config': 'string', 'step9_grompp_nvt_config': 'string', 'step11_grompp_npt_config': 'string', 'step13_grompp_md_config': 'string', 'step14_mdrun_md_config': 'string'}",
    "cwl_outputs": "{'outfile': {'label': 'mutated protein file', 'doc': 'Assorted data files output by the workflow\\n', 'type': {'type': 'array', 'items': 'File'}, 'outputSource': 'subworkflow_mutate/outfile'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.2",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}, 'InlineJavascriptRequirement': {}, 'MultipleInputFeatureRequirement': {}}",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "subworkflow_mutate": {
        "in": {
          "step0_mutate": "step0_mutate_list",
          "step0_pdb_file": "step0_pdb_file"
        },
        "out": [
          "outfile"
        ],
        "scatter": "step0_mutate",
        "run": "{'class': 'Workflow', 'inputs': {'step0_mutate': 'string', 'step0_pdb_file': 'File'}, 'outputs': {'outfile': {'label': 'example mutated file', 'type': 'File', 'outputSource': ['step0_mutate/output_pdb_file', 'step0_pdb_file'], 'pickValue': 'first_non_null'}}, 'steps': {'step0_mutate': {'label': 'mutate the protein', 'when': '$(inputs.config.indexOf(\"WT\") == -1)', 'run': 'biobb/biobb_adapters/cwl/biobb_model/model/mutate.cwl', 'in': {'config': 'step0_mutate', 'input_pdb_path': 'step0_pdb_file'}, 'out': ['output_pdb_file']}}}"
      }
    }
  },
  {
    "path": "md_list.cwl",
    "sha": "593fc3bedb199cd1811c23bbb3a7885efe99bc8d",
    "source": "https://github.com/douglowe/biobb_hpc_cwl_md_list/blob/main/md_list.cwl",
    "content": "#!/usr/bin/env cwl-runner\n\ncwlVersion: v1.2\nclass: Workflow\nlabel: Molecular Dynamics Simulation.\ndoc: >\n  CWL version of the md_list.cwl workflow for HPC. This performs a system setup and runs\n  a molecular dynamics simulation on the structure passed to this workflow. This workflow\n  uses the md_gather.cwl sub-workflow to gather the outputs together to return these.\n  \n  To work with more than one structure this workflow can be called from either the\n  md_launch.cwl workflow, or the md_launch_mutate.cwl workflow. These use scatter for\n  parallelising the workflow. md_launch.cwl operates on a list of individual input molecule\n  files. md_launch_mutate.cwl operates on a single input molecule file, and a list of\n  mutations to apply to that molecule. Within that list of mutations, a value of 'WT' will\n  indicate that the molecule should be simulated without any mutation being applied.\n\nrequirements:\n  SubworkflowFeatureRequirement: {}\n  MultipleInputFeatureRequirement: {}\n\n\ninputs:\n  step1_pdb_file:\n    label: Input file\n    doc: Molecule to process (PDB format)\n    type: File\n  step2_editconf_config:\n    label: Editconf configuration dictionary\n    type: string\n  step4_grompp_genion_config:\n    label: GROMACS grompp configuration dictionary\n    type: string\n  step5_genion_config:\n    label: Genion configuration dictionary\n    type: string\n  step6_grompp_min_config:\n    label: GROMACS grompp configuration dictionary\n    type: string\n  step8_make_ndx_config:\n    label: GROMACS make_ndx configuration dictionary\n    type: string\n  step9_grompp_nvt_config:\n    label: GROMACS grompp configuration dictionary\n    type: string\n  step11_grompp_npt_config:\n    label: GROMACS grompp configuration dictionary\n    type: string\n  step13_grompp_md_config:\n    label: GROMACS grompp configuration dictionary\n    type: string\n  step14_mdrun_md_config:\n    label: GROMACS mdrun configuration dictionary\n    type: string\n\noutputs:\n  dir:\n    label: whole workflow output\n    doc: |\n      outputs from the whole workflow, containing these optional files:\n      step14_mdrun_md/output_trr_file:   Raw trajectory from the free simulation step\n      step14_mdrun_md/output_gro_file:   Raw structure from the free simulation step.\n      step14_mdrun_md/output_cpt_file:   GROMACS portable checkpoint file, allowing to restore (continue) the\n                                         simulation from the last step of the setup process.\n      step13_grompp_md/output_tpr_file:  GROMACS portable binary run input file, containing the starting structure\n                                         of the simulation, the molecular topology and all the simulation parameters.\n      step5_genion/output_top_zip_file:  GROMACS topology file, containing the molecular topology in an ASCII\n                                         readable format.\n    type: Directory\n    outputSource: step15_gather_outputs/project_work_dir\n\nsteps:\n  step1_pdb2gmx:\n    label: Create Protein System Topology\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.pdb2gmx\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/pdb2gmx.cwl\n    in:\n      input_pdb_path: step1_pdb_file\n    out: [output_gro_file, output_top_zip_file]\n\n  step2_editconf:\n    label: Create Solvent Box\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.editconf\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/editconf.cwl\n    in:\n      input_gro_path: step1_pdb2gmx/output_gro_file\n    out: [output_gro_file]\n\n  step3_solvate:\n    label: Fill the Box with Water Molecules\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.solvate\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/solvate.cwl\n    in:\n      input_solute_gro_path: step2_editconf/output_gro_file\n      input_top_zip_path: step1_pdb2gmx/output_top_zip_file\n    out: [output_gro_file, output_top_zip_file]\n\n  step4_grompp_genion:\n    label: Add Ions - part 1\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.grompp\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl\n    in:\n      config: step4_grompp_genion_config\n      input_gro_path: step3_solvate/output_gro_file\n      input_top_zip_path: step3_solvate/output_top_zip_file\n    out: [output_tpr_file]\n\n  step5_genion:\n    label: Add Ions - part 2\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.genion\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/genion.cwl\n    in:\n      config: step5_genion_config\n      input_tpr_path: step4_grompp_genion/output_tpr_file\n      input_top_zip_path: step3_solvate/output_top_zip_file\n    out: [output_gro_file, output_top_zip_file]\n\n  step6_grompp_min:\n    label: Energetically Minimize the System - part 1\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.grompp\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl\n    in:\n      config: step6_grompp_min_config\n      input_gro_path: step5_genion/output_gro_file\n      input_top_zip_path: step5_genion/output_top_zip_file\n    out: [output_tpr_file]\n\n  step7_mdrun_min:\n    label: Energetically Minimize the System - part 2\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.mdrun\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl\n    in:\n      input_tpr_path: step6_grompp_min/output_tpr_file\n    out: [output_trr_file, output_gro_file, output_edr_file, output_log_file]\n\n  step8_make_ndx:\n    label: Generate GROMACS index file\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.make_ndx\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/make_ndx.cwl\n    in:\n      config: step8_make_ndx_config\n      input_structure_path: step7_mdrun_min/output_gro_file\n    out: [output_ndx_file]\n\n  step9_grompp_nvt:\n    label: Equilibrate the System (NVT) - part 1\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.grompp\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl\n    in:\n      config: step9_grompp_nvt_config\n      input_gro_path: step7_mdrun_min/output_gro_file\n      input_top_zip_path: step5_genion/output_top_zip_file\n      input_ndx_path: step8_make_ndx/output_ndx_file\n    out: [output_tpr_file]\n\n  step10_mdrun_nvt:\n    label: Equilibrate the System (NVT) - part 2\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.mdrun\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl\n    in:\n      input_tpr_path: step9_grompp_nvt/output_tpr_file\n    out: [output_trr_file, output_gro_file, output_edr_file, output_log_file, output_cpt_file]\n\n  step11_grompp_npt:\n    label: Equilibrate the System (NPT) - part 1\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.grompp\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl\n    in:\n      config: step11_grompp_npt_config\n      input_gro_path: step10_mdrun_nvt/output_gro_file\n      input_top_zip_path: step5_genion/output_top_zip_file\n      input_ndx_path: step8_make_ndx/output_ndx_file\n      input_cpt_path:  step10_mdrun_nvt/output_cpt_file\n    out: [output_tpr_file]\n\n  step12_mdrun_npt:\n    label: Equilibrate the System (NPT) - part 2\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.mdrun\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl\n    in:\n      input_tpr_path: step11_grompp_npt/output_tpr_file\n    out: [output_trr_file, output_gro_file, output_edr_file, output_log_file, output_cpt_file]\n\n  step13_grompp_md:\n    label: Free Molecular Dynamics Simulation - part 1\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.grompp\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl\n    in:\n      config: step13_grompp_md_config\n      input_gro_path: step12_mdrun_npt/output_gro_file\n      input_top_zip_path: step5_genion/output_top_zip_file\n      input_ndx_path: step8_make_ndx/output_ndx_file\n      input_cpt_path:  step12_mdrun_npt/output_cpt_file\n    out: [output_tpr_file]\n\n  step14_mdrun_md:\n    label: Free Molecular Dynamics Simulation - part 2\n    doc: https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.mdrun\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl\n    in:\n      config: step14_mdrun_md_config\n      input_tpr_path: step13_grompp_md/output_tpr_file\n    out: [output_trr_file, output_gro_file, output_edr_file, output_log_file, output_cpt_file]\n\n  step15_gather_outputs:\n    label: Archiving outputs to be returned to user\n    doc: >\n      This uses the local md_gather.cwl workflow to gather all desired output files.\n      A filter for missing files is applied (pickValue: all_non_null), which requires\n      using a runner which is compliant with v1.2.0, or later, CWL standards.\n    in:\n      external_project_file: step1_pdb_file\n      external_files: \n        source:\n          - step14_mdrun_md/output_trr_file\n          - step14_mdrun_md/output_gro_file\n          - step14_mdrun_md/output_cpt_file\n          - step13_grompp_md/output_tpr_file \n          - step5_genion/output_top_zip_file\n        linkMerge: merge_flattened\n        pickValue: all_non_null\n    run: md_gather.cwl\n    out: [project_work_dir]\n    \n\n\n\n\n\n\n\n\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'step1_pdb_file': {'label': 'Input file', 'doc': 'Molecule to process (PDB format)', 'type': 'File'}, 'step2_editconf_config': {'label': 'Editconf configuration dictionary', 'type': 'string'}, 'step4_grompp_genion_config': {'label': 'GROMACS grompp configuration dictionary', 'type': 'string'}, 'step5_genion_config': {'label': 'Genion configuration dictionary', 'type': 'string'}, 'step6_grompp_min_config': {'label': 'GROMACS grompp configuration dictionary', 'type': 'string'}, 'step8_make_ndx_config': {'label': 'GROMACS make_ndx configuration dictionary', 'type': 'string'}, 'step9_grompp_nvt_config': {'label': 'GROMACS grompp configuration dictionary', 'type': 'string'}, 'step11_grompp_npt_config': {'label': 'GROMACS grompp configuration dictionary', 'type': 'string'}, 'step13_grompp_md_config': {'label': 'GROMACS grompp configuration dictionary', 'type': 'string'}, 'step14_mdrun_md_config': {'label': 'GROMACS mdrun configuration dictionary', 'type': 'string'}}",
    "cwl_outputs": "{'dir': {'label': 'whole workflow output', 'doc': 'outputs from the whole workflow, containing these optional files:\\nstep14_mdrun_md/output_trr_file:   Raw trajectory from the free simulation step\\nstep14_mdrun_md/output_gro_file:   Raw structure from the free simulation step.\\nstep14_mdrun_md/output_cpt_file:   GROMACS portable checkpoint file, allowing to restore (continue) the\\n                                   simulation from the last step of the setup process.\\nstep13_grompp_md/output_tpr_file:  GROMACS portable binary run input file, containing the starting structure\\n                                   of the simulation, the molecular topology and all the simulation parameters.\\nstep5_genion/output_top_zip_file:  GROMACS topology file, containing the molecular topology in an ASCII\\n                                   readable format.\\n', 'type': 'Directory', 'outputSource': 'step15_gather_outputs/project_work_dir'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.2",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "{'SubworkflowFeatureRequirement': {}, 'MultipleInputFeatureRequirement': {}}",
    "cwl_doc": "CWL version of the md_list.cwl workflow for HPC. This performs a system setup and runs a molecular dynamics simulation on the structure passed to this workflow. This workflow uses the md_gather.cwl sub-workflow to gather the outputs together to return these.\nTo work with more than one structure this workflow can be called from either the md_launch.cwl workflow, or the md_launch_mutate.cwl workflow. These use scatter for parallelising the workflow. md_launch.cwl operates on a list of individual input molecule files. md_launch_mutate.cwl operates on a single input molecule file, and a list of mutations to apply to that molecule. Within that list of mutations, a value of 'WT' will indicate that the molecule should be simulated without any mutation being applied.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Molecular Dynamics Simulation.",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "step1_pdb2gmx": {
        "label": "Create Protein System Topology",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.pdb2gmx",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/pdb2gmx.cwl",
        "in": {
          "input_pdb_path": "step1_pdb_file"
        },
        "out": [
          "output_gro_file",
          "output_top_zip_file"
        ]
      },
      "step2_editconf": {
        "label": "Create Solvent Box",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.editconf",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/editconf.cwl",
        "in": {
          "input_gro_path": "step1_pdb2gmx/output_gro_file"
        },
        "out": [
          "output_gro_file"
        ]
      },
      "step3_solvate": {
        "label": "Fill the Box with Water Molecules",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.solvate",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/solvate.cwl",
        "in": {
          "input_solute_gro_path": "step2_editconf/output_gro_file",
          "input_top_zip_path": "step1_pdb2gmx/output_top_zip_file"
        },
        "out": [
          "output_gro_file",
          "output_top_zip_file"
        ]
      },
      "step4_grompp_genion": {
        "label": "Add Ions - part 1",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.grompp",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl",
        "in": {
          "config": "step4_grompp_genion_config",
          "input_gro_path": "step3_solvate/output_gro_file",
          "input_top_zip_path": "step3_solvate/output_top_zip_file"
        },
        "out": [
          "output_tpr_file"
        ]
      },
      "step5_genion": {
        "label": "Add Ions - part 2",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.genion",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/genion.cwl",
        "in": {
          "config": "step5_genion_config",
          "input_tpr_path": "step4_grompp_genion/output_tpr_file",
          "input_top_zip_path": "step3_solvate/output_top_zip_file"
        },
        "out": [
          "output_gro_file",
          "output_top_zip_file"
        ]
      },
      "step6_grompp_min": {
        "label": "Energetically Minimize the System - part 1",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.grompp",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl",
        "in": {
          "config": "step6_grompp_min_config",
          "input_gro_path": "step5_genion/output_gro_file",
          "input_top_zip_path": "step5_genion/output_top_zip_file"
        },
        "out": [
          "output_tpr_file"
        ]
      },
      "step7_mdrun_min": {
        "label": "Energetically Minimize the System - part 2",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.mdrun",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl",
        "in": {
          "input_tpr_path": "step6_grompp_min/output_tpr_file"
        },
        "out": [
          "output_trr_file",
          "output_gro_file",
          "output_edr_file",
          "output_log_file"
        ]
      },
      "step8_make_ndx": {
        "label": "Generate GROMACS index file",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.make_ndx",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/make_ndx.cwl",
        "in": {
          "config": "step8_make_ndx_config",
          "input_structure_path": "step7_mdrun_min/output_gro_file"
        },
        "out": [
          "output_ndx_file"
        ]
      },
      "step9_grompp_nvt": {
        "label": "Equilibrate the System (NVT) - part 1",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.grompp",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl",
        "in": {
          "config": "step9_grompp_nvt_config",
          "input_gro_path": "step7_mdrun_min/output_gro_file",
          "input_top_zip_path": "step5_genion/output_top_zip_file",
          "input_ndx_path": "step8_make_ndx/output_ndx_file"
        },
        "out": [
          "output_tpr_file"
        ]
      },
      "step10_mdrun_nvt": {
        "label": "Equilibrate the System (NVT) - part 2",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.mdrun",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl",
        "in": {
          "input_tpr_path": "step9_grompp_nvt/output_tpr_file"
        },
        "out": [
          "output_trr_file",
          "output_gro_file",
          "output_edr_file",
          "output_log_file",
          "output_cpt_file"
        ]
      },
      "step11_grompp_npt": {
        "label": "Equilibrate the System (NPT) - part 1",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.grompp",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl",
        "in": {
          "config": "step11_grompp_npt_config",
          "input_gro_path": "step10_mdrun_nvt/output_gro_file",
          "input_top_zip_path": "step5_genion/output_top_zip_file",
          "input_ndx_path": "step8_make_ndx/output_ndx_file",
          "input_cpt_path": "step10_mdrun_nvt/output_cpt_file"
        },
        "out": [
          "output_tpr_file"
        ]
      },
      "step12_mdrun_npt": {
        "label": "Equilibrate the System (NPT) - part 2",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.mdrun",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl",
        "in": {
          "input_tpr_path": "step11_grompp_npt/output_tpr_file"
        },
        "out": [
          "output_trr_file",
          "output_gro_file",
          "output_edr_file",
          "output_log_file",
          "output_cpt_file"
        ]
      },
      "step13_grompp_md": {
        "label": "Free Molecular Dynamics Simulation - part 1",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.grompp",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl",
        "in": {
          "config": "step13_grompp_md_config",
          "input_gro_path": "step12_mdrun_npt/output_gro_file",
          "input_top_zip_path": "step5_genion/output_top_zip_file",
          "input_ndx_path": "step8_make_ndx/output_ndx_file",
          "input_cpt_path": "step12_mdrun_npt/output_cpt_file"
        },
        "out": [
          "output_tpr_file"
        ]
      },
      "step14_mdrun_md": {
        "label": "Free Molecular Dynamics Simulation - part 2",
        "doc": "https://biobb-md.readthedocs.io/en/latest/gromacs.html#module-gromacs.mdrun",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl",
        "in": {
          "config": "step14_mdrun_md_config",
          "input_tpr_path": "step13_grompp_md/output_tpr_file"
        },
        "out": [
          "output_trr_file",
          "output_gro_file",
          "output_edr_file",
          "output_log_file",
          "output_cpt_file"
        ]
      },
      "step15_gather_outputs": {
        "label": "Archiving outputs to be returned to user",
        "doc": "This uses the local md_gather.cwl workflow to gather all desired output files. A filter for missing files is applied (pickValue: all_non_null), which requires using a runner which is compliant with v1.2.0, or later, CWL standards.\n",
        "in": {
          "external_project_file": "step1_pdb_file",
          "external_files": {
            "source": [
              "step14_mdrun_md/output_trr_file",
              "step14_mdrun_md/output_gro_file",
              "step14_mdrun_md/output_cpt_file",
              "step13_grompp_md/output_tpr_file",
              "step5_genion/output_top_zip_file"
            ],
            "linkMerge": "merge_flattened",
            "pickValue": "all_non_null"
          }
        },
        "run": "md_gather.cwl",
        "out": [
          "project_work_dir"
        ]
      }
    }
  },
  {
    "path": "workflows/MD/md_muts_sets.cwl",
    "sha": "097bda90ba86505edffa262aad91b3413c392319",
    "source": "https://github.com/douglowe/biobb_hpc_cwl_md_list/blob/main/workflows/MD/md_muts_sets.cwl",
    "content": "#!/usr/bin/env cwl-runner\n\ncwlVersion: v1.0\nclass: Workflow\nlabel: testing MD muts system\ndoc: |\n  CWL impementation of the MD Mutations workflow\n  Based on the files: \n          workflows/MD/md_muts_sets.py\n          workflows/MD/md_muts_sets.yaml\n\ninputs:\n  step0_pdb_name: string\n  step0_pdb_config: string\n#  step1_pdb_name: File\n  step1_mutate_config: string\n  step2_pdb2gmx_config: string\n  step3_editconf_config: string\n  step5_grompp_genion_config: string\n  step6_genion_config: string\n  step7_grompp_min_config: string\n  step9_grompp_nvt_config: string\n  step11_grompp_npt_config: string\n  step13_grompp_md_config: string\n  step14_mdrun_md_config: string\n\noutputs:\n  pdb:\n    type: File\n    outputSource: step1_mutate/output_pdb_file\n    \n\n\n\nsteps:\n\n  step0_download:\n    label: Fetch PDB Structure\n    run: biobb/biobb_adapters/cwl/biobb_io/mmb_api/pdb.cwl\n    in:\n      output_pdb_path: step0_pdb_name\n      config: step0_pdb_config\n    out: [output_pdb_file]\n\n  step1_mutate:\n    label: setup input structure\n    doc: |\n      this will need to: (a) build mutation list; (b) correct Histidine residues to HIE\n      (might require splitting this step?)\n    run: biobb/biobb_adapters/cwl/biobb_model/model/mutate.cwl\n    in:\n      config: step1_mutate_config\n      input_pdb_path: step0_download/output_pdb_file\n    out: [output_pdb_file]\n\n  step2_pdb2gmx:\n    label: generate the topology\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/pdb2gmx.cwl\n    in:\n      config: step2_pdb2gmx_config\n      input_pdb_path: step1_mutate/output_pdb_file\n    out: [output_gro_file, output_top_zip_file]\n    \n  step3_editconf:\n    label: create the solvent box\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/editconf.cwl\n    in:\n      config: step3_editconf_config\n      input_gro_path: step2_pdb2gmx/output_gro_file\n    out: [output_gro_file]\n\n  step4_solvate:\n    label: fill the solvent box with water molecules\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/solvate.cwl\n    in:\n      input_solute_gro_path: step3_editconf/output_gro_file\n      input_top_zip_path: step2_pdb2gmx/output_top_zip_file\n    out: [output_gro_file, output_top_zip_file]\n      \n  step5_grompp_genion:\n    label: preprocess ion generation\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl\n    in:\n      config: step5_grompp_genion_config\n      input_gro_path: step4_solvate/output_gro_file\n      input_top_zip_path: step4_solvate/output_top_zip_file\n    out: [output_tpr_file]\n    \n  step6_genion:\n    label: ion generation\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/genion.cwl\n    in:\n      config: step6_genion_config\n      input_tpr_path: step5_grompp_genion/output_tpr_file\n      input_top_zip_path: step4_solvate/output_top_zip_file\n    out: [output_gro_file, output_top_zip_file]\n    \n  step7_grompp_min:\n    label: preprocess energy minimization\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl\n    in:\n      config: step7_grompp_min_config\n      input_gro_path: step6_genion/output_gro_file\n      input_top_zip_path: step6_genion/output_top_zip_file\n    out: [output_tpr_file]\n    \n  step8_mdrun_min:\n    label: execute energy minimization\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl\n    in:\n      input_tpr_path: step7_grompp_min/output_tpr_file\n    out: [output_trr_file, output_xtc_file, output_gro_file, output_edr_file, output_log_file]\n    \n  step9_grompp_nvt:\n    label: preprocess system temperature equilibration\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl\n    in:\n      config: step9_grompp_nvt_config\n      input_gro_path: step8_mdrun_min/output_gro_file\n      input_top_zip_path: step6_genion/output_top_zip_file\n    out: [output_tpr_file]\n    \n  step10_mdrun_nvt:\n    label: execute system temperature equilibration\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl\n    in:\n      input_tpr_path: step9_grompp_nvt/output_tpr_file\n    out: [output_trr_file, output_xtc_file, output_gro_file, output_edr_file, output_log_file, output_cpt_file]\n\n  step11_grompp_npt:\n    label: preprocess system pressure equilibration\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl\n    in:      \n      config: step11_grompp_npt_config\n      input_gro_path: step10_mdrun_nvt/output_gro_file\n      input_top_zip_path: step6_genion/output_top_zip_file\n      input_cpt_path: step10_mdrun_nvt/output_cpt_file\n    out: [output_tpr_file]\n\n  step12_mdrun_npt:\n    label: execute system pressure equilibration\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl\n    in:\n      input_tpr_path: step11_grompp_npt/output_tpr_file\n    out: [output_trr_file, output_xtc_file, output_gro_file, output_edr_file, output_log_file, output_cpt_file]\n    \n  step13_grompp_md:\n    label: preprocess free dynamics\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl\n    in:\n      config: step13_grompp_md_config\n      input_gro_path: step12_mdrun_npt/output_gro_file\n      input_top_zip_path: step6_genion/output_top_zip_file\n      input_cpt_path: step12_mdrun_npt/output_cpt_file\n    out: [output_tpr_file]\n    \n  step14_mdrun_md:\n    label: execute free molecular dynamics simulation\n    run: biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl\n    in:\n      config: step14_mdrun_md_config\n      input_tpr_path: step13_grompp_md/output_tpr_file\n    out: [output_trr_file, output_xtc_file, output_gro_file, output_edr_file, output_log_file, output_cpt_file]\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - http://edamontology.org/EDAM_1.22.owl\n\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'step0_pdb_name': 'string', 'step0_pdb_config': 'string', 'step1_mutate_config': 'string', 'step2_pdb2gmx_config': 'string', 'step3_editconf_config': 'string', 'step5_grompp_genion_config': 'string', 'step6_genion_config': 'string', 'step7_grompp_min_config': 'string', 'step9_grompp_nvt_config': 'string', 'step11_grompp_npt_config': 'string', 'step13_grompp_md_config': 'string', 'step14_mdrun_md_config': 'string'}",
    "cwl_outputs": "{'pdb': {'type': 'File', 'outputSource': 'step1_mutate/output_pdb_file'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['http://edamontology.org/EDAM_1.22.owl']",
    "cwl_requirements": null,
    "cwl_doc": "CWL impementation of the MD Mutations workflow\nBased on the files: \n        workflows/MD/md_muts_sets.py\n        workflows/MD/md_muts_sets.yaml\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "testing MD muts system",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "step0_download": {
        "label": "Fetch PDB Structure",
        "run": "biobb/biobb_adapters/cwl/biobb_io/mmb_api/pdb.cwl",
        "in": {
          "output_pdb_path": "step0_pdb_name",
          "config": "step0_pdb_config"
        },
        "out": [
          "output_pdb_file"
        ]
      },
      "step1_mutate": {
        "label": "setup input structure",
        "doc": "this will need to: (a) build mutation list; (b) correct Histidine residues to HIE\n(might require splitting this step?)\n",
        "run": "biobb/biobb_adapters/cwl/biobb_model/model/mutate.cwl",
        "in": {
          "config": "step1_mutate_config",
          "input_pdb_path": "step0_download/output_pdb_file"
        },
        "out": [
          "output_pdb_file"
        ]
      },
      "step2_pdb2gmx": {
        "label": "generate the topology",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/pdb2gmx.cwl",
        "in": {
          "config": "step2_pdb2gmx_config",
          "input_pdb_path": "step1_mutate/output_pdb_file"
        },
        "out": [
          "output_gro_file",
          "output_top_zip_file"
        ]
      },
      "step3_editconf": {
        "label": "create the solvent box",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/editconf.cwl",
        "in": {
          "config": "step3_editconf_config",
          "input_gro_path": "step2_pdb2gmx/output_gro_file"
        },
        "out": [
          "output_gro_file"
        ]
      },
      "step4_solvate": {
        "label": "fill the solvent box with water molecules",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/solvate.cwl",
        "in": {
          "input_solute_gro_path": "step3_editconf/output_gro_file",
          "input_top_zip_path": "step2_pdb2gmx/output_top_zip_file"
        },
        "out": [
          "output_gro_file",
          "output_top_zip_file"
        ]
      },
      "step5_grompp_genion": {
        "label": "preprocess ion generation",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl",
        "in": {
          "config": "step5_grompp_genion_config",
          "input_gro_path": "step4_solvate/output_gro_file",
          "input_top_zip_path": "step4_solvate/output_top_zip_file"
        },
        "out": [
          "output_tpr_file"
        ]
      },
      "step6_genion": {
        "label": "ion generation",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/genion.cwl",
        "in": {
          "config": "step6_genion_config",
          "input_tpr_path": "step5_grompp_genion/output_tpr_file",
          "input_top_zip_path": "step4_solvate/output_top_zip_file"
        },
        "out": [
          "output_gro_file",
          "output_top_zip_file"
        ]
      },
      "step7_grompp_min": {
        "label": "preprocess energy minimization",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl",
        "in": {
          "config": "step7_grompp_min_config",
          "input_gro_path": "step6_genion/output_gro_file",
          "input_top_zip_path": "step6_genion/output_top_zip_file"
        },
        "out": [
          "output_tpr_file"
        ]
      },
      "step8_mdrun_min": {
        "label": "execute energy minimization",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl",
        "in": {
          "input_tpr_path": "step7_grompp_min/output_tpr_file"
        },
        "out": [
          "output_trr_file",
          "output_xtc_file",
          "output_gro_file",
          "output_edr_file",
          "output_log_file"
        ]
      },
      "step9_grompp_nvt": {
        "label": "preprocess system temperature equilibration",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl",
        "in": {
          "config": "step9_grompp_nvt_config",
          "input_gro_path": "step8_mdrun_min/output_gro_file",
          "input_top_zip_path": "step6_genion/output_top_zip_file"
        },
        "out": [
          "output_tpr_file"
        ]
      },
      "step10_mdrun_nvt": {
        "label": "execute system temperature equilibration",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl",
        "in": {
          "input_tpr_path": "step9_grompp_nvt/output_tpr_file"
        },
        "out": [
          "output_trr_file",
          "output_xtc_file",
          "output_gro_file",
          "output_edr_file",
          "output_log_file",
          "output_cpt_file"
        ]
      },
      "step11_grompp_npt": {
        "label": "preprocess system pressure equilibration",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl",
        "in": {
          "config": "step11_grompp_npt_config",
          "input_gro_path": "step10_mdrun_nvt/output_gro_file",
          "input_top_zip_path": "step6_genion/output_top_zip_file",
          "input_cpt_path": "step10_mdrun_nvt/output_cpt_file"
        },
        "out": [
          "output_tpr_file"
        ]
      },
      "step12_mdrun_npt": {
        "label": "execute system pressure equilibration",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl",
        "in": {
          "input_tpr_path": "step11_grompp_npt/output_tpr_file"
        },
        "out": [
          "output_trr_file",
          "output_xtc_file",
          "output_gro_file",
          "output_edr_file",
          "output_log_file",
          "output_cpt_file"
        ]
      },
      "step13_grompp_md": {
        "label": "preprocess free dynamics",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/grompp.cwl",
        "in": {
          "config": "step13_grompp_md_config",
          "input_gro_path": "step12_mdrun_npt/output_gro_file",
          "input_top_zip_path": "step6_genion/output_top_zip_file",
          "input_cpt_path": "step12_mdrun_npt/output_cpt_file"
        },
        "out": [
          "output_tpr_file"
        ]
      },
      "step14_mdrun_md": {
        "label": "execute free molecular dynamics simulation",
        "run": "biobb/biobb_adapters/cwl/biobb_md/gromacs/mdrun.cwl",
        "in": {
          "config": "step14_mdrun_md_config",
          "input_tpr_path": "step13_grompp_md/output_tpr_file"
        },
        "out": [
          "output_trr_file",
          "output_xtc_file",
          "output_gro_file",
          "output_edr_file",
          "output_log_file",
          "output_cpt_file"
        ]
      }
    }
  },
  {
    "path": "cwl-workflows/demonstrator/bwa-index.cwl",
    "sha": "9d068d3cb346bed4a65404050cca082a54505656",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/bwa-index.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: cnag/bwa:0.7.17\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: $(inputs.reference_genome) \n  - class: ResourceRequirement\n    outdirMin: 10500\n    tmpdirMin: 10500\n\nhints:\n  - class: ResourceRequirement\n    ramMin: 4000   \n    coresMin: 1\n\nbaseCommand:\n- bwa\n- index\n\n\ninputs:\n  algorithm:\n    type: string?\n    inputBinding:\n      prefix: -a\n    doc: |\n       BWT construction algorithm: bwtsw or is (Default: auto)\n  reference_genome:\n    type: File\n    inputBinding:\n      # valueFrom: $(self.basename)\n      position: 4\n  block_size:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: -b\n\noutputs:\n  output:\n    type: File\n    outputBinding:\n      glob: \"*.fa\"\n    secondaryFiles:\n      - .amb\n      - .ann\n      - .bwt\n      - .pac\n      - .sa\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'algorithm': {'type': 'string?', 'inputBinding': {'prefix': '-a'}, 'doc': 'BWT construction algorithm: bwtsw or is (Default: auto)\\n'}, 'reference_genome': {'type': 'File', 'inputBinding': {'position': 4}}, 'block_size': {'type': 'int?', 'inputBinding': {'position': 2, 'prefix': '-b'}}}",
    "cwl_outputs": "{'output': {'type': 'File', 'outputBinding': {'glob': '*.fa'}, 'secondaryFiles': ['.amb', '.ann', '.bwt', '.pac', '.sa']}}",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'ramMin': 4000, 'coresMin': 1}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'index']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/bwa-mem.cwl",
    "sha": "daccde3089bca372ad7ce1dd72be7ac2a350d3ec",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/bwa-mem.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  sbg: 'https://www.sevenbridges.com/'\nbaseCommand:\n  - bwa\n  - mem\n  - -M\n  - -p \nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: MultipleInputFeatureRequirement\n  - class: DockerRequirement\n    dockerPull: cnag/bwa:0.7.17\n  - class: ResourceRequirement\n    outdirMin: 10500\n    tmpdirMin: 10700\nhints:\n  - class: ResourceRequirement\n    coresMin: 4\n    ramMin: 4000\n \ninputs:\n#  - id: bwa_output_filename\n#    type: string?\n#    default: $(inputs.trimmed_fastq.nameroot).sam\n  - id: trimmed_fastq\n    type: File\n    inputBinding:\n      position: 4\n      # Assume the first input query file is interleaved paired-end FASTA/Q. See the command description for details. \n  - id: reference_genome\n    type: File\n    inputBinding:\n      position: 3\n    secondaryFiles:\n      - .amb\n      - .ann\n      - .bwt\n      - .pac\n      - .sa\n  - id: sample_name\n    type: string\n  - id: threads\n    type: string?\n    default: \"2\"\n    inputBinding:\n      position: 1\n      prefix: '-t'\n    doc: '-t INT        number of threads [1]'\n  - id: read_group\n    type: string\n    default: '@RG\\\\tID:H947YADXX\\\\tSM:NA12878\\\\tPL:ILLUMINA'\n    inputBinding: \n      position: 2\n      prefix: -R\n      \nstdout: $(inputs.sample_name).sam\narguments:\n  - position: 2\n    prefix: -M\n  - position: 2\n    prefix: -p\n \noutputs:\n  - id: aligned_sam\n    type: File\n    outputBinding:\n      glob: \"*.sam\"\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'trimmed_fastq', 'type': 'File', 'inputBinding': {'position': 4}}, {'id': 'reference_genome', 'type': 'File', 'inputBinding': {'position': 3}, 'secondaryFiles': ['.amb', '.ann', '.bwt', '.pac', '.sa']}, {'id': 'sample_name', 'type': 'string'}, {'id': 'threads', 'type': 'string?', 'default': '2', 'inputBinding': {'position': 1, 'prefix': '-t'}, 'doc': '-t INT        number of threads [1]'}, {'id': 'read_group', 'type': 'string', 'default': '@RG\\\\\\\\tID:H947YADXX\\\\\\\\tSM:NA12878\\\\\\\\tPL:ILLUMINA', 'inputBinding': {'position': 2, 'prefix': '-R'}}]",
    "cwl_outputs": "[{'id': 'aligned_sam', 'type': 'File', 'outputBinding': {'glob': '*.sam'}}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 4, 'ramMin': 4000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'mem', '-M', '-p']",
    "cwl_arguments": "[{'position': 2, 'prefix': '-M'}, {'position': 2, 'prefix': '-p'}]",
    "cwl_$namespaces": "{'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.sample_name).sam",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/curl.cwl",
    "sha": "e79bcd370a5992edeafc9cd87909b83751ab63ca",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/curl.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nbaseCommand: [\"curl\"]\n\ndoc: \"transfer file from a remote FTP/HTTP server to the TES\"\nrequirements:\n  - class: DockerRequirement\n    dockerPull: jlaitinen/lftpalpine\n  - class: ResourceRequirement\n    tmpdirMin: 2500\n    outdirMin: 2500\nhints:\n  - class: ResourceRequirement\n    coresMin: 2\n    ramMin: 2000\n      \ninputs:\n  curl_config_file:\n    type: File\n    inputBinding:\n      prefix: -K \n      separate: true\n      position: 1\n\noutputs:\n  in_files:\n    type: File[]\n    outputBinding:\n      glob: \"*.gz\"\n \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'curl_config_file': {'type': 'File', 'inputBinding': {'prefix': '-K', 'separate': True, 'position': 1}}}",
    "cwl_outputs": "{'in_files': {'type': 'File[]', 'outputBinding': {'glob': '*.gz'}}}",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 2, 'ramMin': 2000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['curl']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "transfer file from a remote FTP/HTTP server to the TES",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/curl_indels.cwl",
    "sha": "78b4c32cdac4734e8675f447aa5411acb719629e",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/curl_indels.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nbaseCommand: [\"curl\"]\n\ndoc: \"transfer file from a remote FTP/HTTP server to the TES\"\nrequirements:\n  - class: DockerRequirement\n    dockerPull: jlaitinen/lftpalpine\n  - class: ResourceRequirement\n    tmpdirMin: 500\n    outdirMin: 500\n\nhints:\n  - class: ResourceRequirement\n    coresMin: 2\n    ramMin: 2000\n      \ninputs:\n  curl_config_file:\n    type: File\n    inputBinding:\n      prefix: -K \n      separate: true\n      position: 1\n\noutputs:\n  known_indels_file:\n    type: File\n    outputBinding:\n      glob: \"*.vcf\"\n \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'curl_config_file': {'type': 'File', 'inputBinding': {'prefix': '-K', 'separate': True, 'position': 1}}}",
    "cwl_outputs": "{'known_indels_file': {'type': 'File', 'outputBinding': {'glob': '*.vcf'}}}",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 2, 'ramMin': 2000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['curl']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "transfer file from a remote FTP/HTTP server to the TES",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/curl_known_sites.cwl",
    "sha": "1e43c513a2aa072db3350bf7feec36794e190adc",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/curl_known_sites.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nbaseCommand: [\"curl\"]\n\ndoc: \"transfer file from a remote FTP/HTTP server to the TES\"\nrequirements:\n  - class: DockerRequirement\n    dockerPull: jlaitinen/lftpalpine\n  - class: ResourceRequirement\n    tmpdirMin: 2500\n    outdirMin: 2500  \nhints:\n  - class: ResourceRequirement\n    coresMin: 2\n    ramMin: 2000\n      \ninputs:\n  curl_config_file:\n    type: File\n    inputBinding:\n      prefix: -K \n      separate: true\n      position: 1\n\noutputs:\n  known_sites_file:\n    type: File\n    outputBinding:\n      glob: \"*.gz\"\n \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'curl_config_file': {'type': 'File', 'inputBinding': {'prefix': '-K', 'separate': True, 'position': 1}}}",
    "cwl_outputs": "{'known_sites_file': {'type': 'File', 'outputBinding': {'glob': '*.gz'}}}",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 2, 'ramMin': 2000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['curl']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "transfer file from a remote FTP/HTTP server to the TES",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/cutadapt-v.1.18.cwl",
    "sha": "be73040b107a5f9d475399387ee7e0fddffbab3c",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/cutadapt-v.1.18.cwl",
    "content": "#!/usr/bin/env cwl-runner\nclass: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  sbg: 'https://www.sevenbridges.com/'\nid: cutadapt2\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: 'cnag/cutadapt:1.18'\n  - class: ResourceRequirement\n    outdirMin: 2500\n    tmpdirMin: 2500\nhints:\n  - class: ResourceRequirement\n    coresMin: 4\n    ramMin: 4000\n\nbaseCommand: [cutadapt, --interleaved]\narguments: \n  - position: 4\n    prefix: '-o'\n    valueFrom: '$(inputs.raw_sequences[0].basename + \".trimmed.fastq.gz\")' \n  - position: 3\n    prefix: '--overlap'\n    valueFrom: '6'\n  # automatic threads\n  - position: 1\n    prefix: '-j'\n    valueFrom: '0'\n  - position: 2\n    prefix: '--error-rate'\n    valueFrom: '0.2'\ninputs:\n  - id: raw_sequences\n    type: File[]\n    inputBinding:\n      position: 20\n      prefix: ''\n      separate: false\n  - id: adaptors_file\n    type: File?\n    inputBinding:\n      position: 10\n      prefix: '-a'\noutputs:  \n  - id: trimmed_fastq\n    type: File\n    outputBinding:\n      glob: '*.trimmed.fastq.gz'\nlabel: cutadapt\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "cutadapt2",
    "cwl_inputs": "[{'id': 'raw_sequences', 'type': 'File[]', 'inputBinding': {'position': 20, 'prefix': '', 'separate': False}}, {'id': 'adaptors_file', 'type': 'File?', 'inputBinding': {'position': 10, 'prefix': '-a'}}]",
    "cwl_outputs": "[{'id': 'trimmed_fastq', 'type': 'File', 'outputBinding': {'glob': '*.trimmed.fastq.gz'}}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 4, 'ramMin': 4000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cutadapt', '--interleaved']",
    "cwl_arguments": "[{'position': 4, 'prefix': '-o', 'valueFrom': '$(inputs.raw_sequences[0].basename + \".trimmed.fastq.gz\")'}, {'position': 3, 'prefix': '--overlap', 'valueFrom': '6'}, {'position': 1, 'prefix': '-j', 'valueFrom': '0'}, {'position': 2, 'prefix': '--error-rate', 'valueFrom': '0.2'}]",
    "cwl_$namespaces": "{'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "cutadapt",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/gatk-base_recalibration.cwl",
    "sha": "e80a648175a4fc6694d0bd962894b8a2e79f56d8",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/gatk-base_recalibration.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: gatk-base_recalibration\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: broadinstitute/gatk3:3.6-0\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: $(inputs.reference_genome)\n      - entry: $(inputs.dict)\n  - class: ResourceRequirement\n    outdirMin: 7500\n    tmpdirMin: 7700\n\nhints:\n  - class: ResourceRequirement\n    coresMin: 4\n    ramMin: 4000\n\nbaseCommand:\n  - java \n  - -jar\n  - /usr/GenomeAnalysisTK.jar\n  - '-T'\n  - BaseRecalibrator\n\ninputs:\n  - id: reference_genome\n    type: File\n    inputBinding:\n      position: 1\n      prefix: '-R'\n    secondaryFiles:\n      - .fai\n  - id: dict\n    type: File\n  - id: unzipped_known_sites_file\n    type: File\n  # from gatk ir\n  - id: input\n    type: File\n    inputBinding:\n      position: 2\n      prefix: '-I'\n    secondaryFiles:\n      - ^.bai\n  - id: known_indels_file\n    type: File\n  - id: threads\n    type: string?\n\narguments:\n  - position: 0\n    prefix: '-dt'\n    valueFrom: NONE\n  - position: 0\n    prefix: '-nct'\n    valueFrom: $(inputs.threads)\n  - position: 0\n    prefix: '--knownSites'\n    valueFrom: $(inputs.known_indels_file)\n  - position: 0\n    prefix: '--knownSites'\n    valueFrom: $(inputs.unzipped_known_sites_file)\n  - position: 3\n    prefix: '-o'\n    valueFrom: $(inputs.input.nameroot).recalibrated.grp\n\noutputs:\n  - id: br_model\n    type: File\n    outputBinding:\n      glob: \"*.grp\"\n\nlabel: gatk3-base_recalibration\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "gatk-base_recalibration",
    "cwl_inputs": "[{'id': 'reference_genome', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-R'}, 'secondaryFiles': ['.fai']}, {'id': 'dict', 'type': 'File'}, {'id': 'unzipped_known_sites_file', 'type': 'File'}, {'id': 'input', 'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-I'}, 'secondaryFiles': ['^.bai']}, {'id': 'known_indels_file', 'type': 'File'}, {'id': 'threads', 'type': 'string?'}]",
    "cwl_outputs": "[{'id': 'br_model', 'type': 'File', 'outputBinding': {'glob': '*.grp'}}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 4, 'ramMin': 4000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['java', '-jar', '/usr/GenomeAnalysisTK.jar', '-T', 'BaseRecalibrator']",
    "cwl_arguments": "[{'position': 0, 'prefix': '-dt', 'valueFrom': 'NONE'}, {'position': 0, 'prefix': '-nct', 'valueFrom': '$(inputs.threads)'}, {'position': 0, 'prefix': '--knownSites', 'valueFrom': '$(inputs.known_indels_file)'}, {'position': 0, 'prefix': '--knownSites', 'valueFrom': '$(inputs.unzipped_known_sites_file)'}, {'position': 3, 'prefix': '-o', 'valueFrom': '$(inputs.input.nameroot).recalibrated.grp'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk3-base_recalibration",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/gatk-base_recalibration_print_reads.cwl",
    "sha": "ca9d1ed768e1de337ef789bf0c54232852dab5bc",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/gatk-base_recalibration_print_reads.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: gatk_base_recalibration_print_reads\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: broadinstitute/gatk3:3.6-0\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: $(inputs.reference_genome)\n      - entry: $(inputs.dict)\n      - entry: $(inputs.br_model)\n  - class: ResourceRequirement\n    outdirMin: 7500\n    tmpdirMin: 7700\n\nhints:\n  - class: ResourceRequirement\n    coresMin: 8\n    ramMin: 8000\n\nbaseCommand:\n  - java\n  - -jar\n  - /usr/GenomeAnalysisTK.jar\n  - '-T'\n  - PrintReads\n\ninputs:\n  - id: reference_genome\n    type: File\n    inputBinding:\n      position: 1\n      prefix: '-R'\n    secondaryFiles:\n      - .fai\n  - id: dict\n    type: File\n  - id: input\n    type:\n      - File\n    inputBinding:\n      position: 2\n      prefix: '-I'\n    secondaryFiles:\n      - ^.bai\n  - id: br_model\n    type:\n      - File\n    inputBinding:\n      position: 4\n      prefix: '-BQSR'\n\narguments:\n  - position: 0\n    prefix: '-dt'\n    valueFrom: 'NONE'\n  - position: 3\n    prefix: '-o'\n    valueFrom: $(inputs.input.nameroot).bqsr.bam\n\noutputs:\n  - id: bqsr_bam\n    type: File\n    outputBinding:\n       glob: $(inputs.input.nameroot).bqsr.bam\n    secondaryFiles:\n      - ^.bai\n\nlabel: gatk-base_recalibration_print_reads\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "gatk_base_recalibration_print_reads",
    "cwl_inputs": "[{'id': 'reference_genome', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-R'}, 'secondaryFiles': ['.fai']}, {'id': 'dict', 'type': 'File'}, {'id': 'input', 'type': ['File'], 'inputBinding': {'position': 2, 'prefix': '-I'}, 'secondaryFiles': ['^.bai']}, {'id': 'br_model', 'type': ['File'], 'inputBinding': {'position': 4, 'prefix': '-BQSR'}}]",
    "cwl_outputs": "[{'id': 'bqsr_bam', 'type': 'File', 'outputBinding': {'glob': '$(inputs.input.nameroot).bqsr.bam'}, 'secondaryFiles': ['^.bai']}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 8, 'ramMin': 8000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['java', '-jar', '/usr/GenomeAnalysisTK.jar', '-T', 'PrintReads']",
    "cwl_arguments": "[{'position': 0, 'prefix': '-dt', 'valueFrom': 'NONE'}, {'position': 3, 'prefix': '-o', 'valueFrom': '$(inputs.input.nameroot).bqsr.bam'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk-base_recalibration_print_reads",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/gatk-haplotype_caller.cwl",
    "sha": "5be80fbfe78ebcb0da745180a0ab7a59ce23b256",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/gatk-haplotype_caller.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: gatk_haplotypecaller\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: broadinstitute/gatk3:3.6-0\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: $(inputs.reference_genome)\n      - entry: $(inputs.dict)\n  - class: ResourceRequirement\n    outdirMin: 7500\n    tmpdirMin: 7700\nhints:\n  - class: ResourceRequirement\n    coresMin: 4\n    ramMin: 4000\n\nbaseCommand:\n  - java\n  - -jar\n  - /usr/GenomeAnalysisTK.jar\n  - '-T'\n  - HaplotypeCaller\n  - --never_trim_vcf_format_field\n\ninputs:\n  - id: reference_genome\n    type: File\n    inputBinding:\n      position: 1\n      prefix: '-R'\n    secondaryFiles:\n      - .fai\n  - id: dict\n    type: File\n  # from gatk-base_recalibration_print_reads.cwl\n  - id: input\n    type: File\n    inputBinding:\n      position: 2\n      prefix: '-I'\n    secondaryFiles:\n      - ^.bai\n  # default is to analyse the complete genome\n  - id: chromosome\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: '-L'\n  - id: ploidy\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: '-ploidy'\n  - id: gqb\n    type:\n      - \"null\"\n      - type: array\n        items: int\n        inputBinding: { prefix: \"--GVCFGQBands\" }\n    inputBinding:\n      position: 12\n  - id: threads\n    type: string?\n    default: \"2\"\n\narguments:\n  - position: 0\n    prefix: '--num_cpu_threads_per_data_thread'\n    valueFrom: $(inputs.threads) \n  - position: 0\n    prefix: '-dt'\n    valueFrom: 'NONE'\n  - position: 0\n    prefix: '-rf'\n    valueFrom: 'BadCigar'\n  - position: 0\n    prefix: '-ERC'\n    valueFrom: 'GVCF'\n  - position: 0\n    prefix: '-variant_index_type'\n    valueFrom: 'LINEAR'\n  - position: 0\n    prefix: '-variant_index_parameter'\n    valueFrom: '128000'\n  - position: 0\n    prefix: '-o'\n    valueFrom: $(inputs.input.nameroot).vcf.gz\n\noutputs:\n  - id: gvcf\n    type: File\n    outputBinding:\n      glob: \"*.gz\"\n    secondaryFiles:\n      #- .idx\n      - .tbi\n\nlabel: gatk3-haplotypecaller\n\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "gatk_haplotypecaller",
    "cwl_inputs": "[{'id': 'reference_genome', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-R'}, 'secondaryFiles': ['.fai']}, {'id': 'dict', 'type': 'File'}, {'id': 'input', 'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-I'}, 'secondaryFiles': ['^.bai']}, {'id': 'chromosome', 'type': 'string?', 'inputBinding': {'position': 3, 'prefix': '-L'}}, {'id': 'ploidy', 'type': 'int?', 'inputBinding': {'position': 5, 'prefix': '-ploidy'}}, {'id': 'gqb', 'type': ['null', {'type': 'array', 'items': 'int', 'inputBinding': {'prefix': '--GVCFGQBands'}}], 'inputBinding': {'position': 12}}, {'id': 'threads', 'type': 'string?', 'default': '2'}]",
    "cwl_outputs": "[{'id': 'gvcf', 'type': 'File', 'outputBinding': {'glob': '*.gz'}, 'secondaryFiles': ['.tbi']}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 4, 'ramMin': 4000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['java', '-jar', '/usr/GenomeAnalysisTK.jar', '-T', 'HaplotypeCaller', '--never_trim_vcf_format_field']",
    "cwl_arguments": "[{'position': 0, 'prefix': '--num_cpu_threads_per_data_thread', 'valueFrom': '$(inputs.threads)'}, {'position': 0, 'prefix': '-dt', 'valueFrom': 'NONE'}, {'position': 0, 'prefix': '-rf', 'valueFrom': 'BadCigar'}, {'position': 0, 'prefix': '-ERC', 'valueFrom': 'GVCF'}, {'position': 0, 'prefix': '-variant_index_type', 'valueFrom': 'LINEAR'}, {'position': 0, 'prefix': '-variant_index_parameter', 'valueFrom': '128000'}, {'position': 0, 'prefix': '-o', 'valueFrom': '$(inputs.input.nameroot).vcf.gz'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk3-haplotypecaller",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/gatk-ir.cwl",
    "sha": "d0ede8550308047f69b2ebb8511be7b1443afefc",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/gatk-ir.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nid: ir\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: broadinstitute/gatk3:3.6-0\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: $(inputs.reference_genome)\n      - entry: $(inputs.dict)\n  - class: ResourceRequirement\n    outdirMin: 7500\n    tmpdirMin: 7700\nhints:\n  - class: ResourceRequirement\n    coresMin: 8\n    ramMin: 8000\n\nbaseCommand:\n  - java\n  - -jar\n  - /usr/GenomeAnalysisTK.jar\n  - '-T'\n  - IndelRealigner\n\ninputs:\n  - id: input\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 2\n      prefix: '-I'\n    secondaryFiles:\n      - ^.bai\n  - id: rtc_intervals\n    type: File\n    inputBinding:\n      position: 3\n      prefix: '-targetIntervals'\n  - id: reference_genome\n    type: File\n    inputBinding:\n      position: 1\n      prefix: '-R'\n    secondaryFiles:\n      - .fai\n  - id: dict\n    type: File\n\narguments:\n  - position: 5\n    prefix: '-dt'\n    valueFrom: 'NONE'\n  - position: 6\n    prefix: '--maxReadsForRealignment'\n    valueFrom: '200000'\n  - position: 10\n    prefix: '-o'\n    valueFrom: $(inputs.input.nameroot).realigned.bam\n\noutputs:\n  - id: realigned_bam\n    type: File\n    outputBinding:\n      glob: \"*.realigned.bam\"\n    secondaryFiles:\n      - ^.bai\n    \nlabel: ir\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "ir",
    "cwl_inputs": "[{'id': 'input', 'type': ['File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'position': 2, 'prefix': '-I'}, 'secondaryFiles': ['^.bai']}, {'id': 'rtc_intervals', 'type': 'File', 'inputBinding': {'position': 3, 'prefix': '-targetIntervals'}}, {'id': 'reference_genome', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-R'}, 'secondaryFiles': ['.fai']}, {'id': 'dict', 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'realigned_bam', 'type': 'File', 'outputBinding': {'glob': '*.realigned.bam'}, 'secondaryFiles': ['^.bai']}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 8, 'ramMin': 8000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['java', '-jar', '/usr/GenomeAnalysisTK.jar', '-T', 'IndelRealigner']",
    "cwl_arguments": "[{'position': 5, 'prefix': '-dt', 'valueFrom': 'NONE'}, {'position': 6, 'prefix': '--maxReadsForRealignment', 'valueFrom': '200000'}, {'position': 10, 'prefix': '-o', 'valueFrom': '$(inputs.input.nameroot).realigned.bam'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ir",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/gatk3-rtc.cwl",
    "sha": "5e58459c1e89077e2c32dbc358433bd4a963af03",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/gatk3-rtc.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nid: rtc\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: broadinstitute/gatk3:3.6-0\n  - class: ResourceRequirement\n    outdirMin: 12500\n    tmpdirMin: 12500\n  - class: InitialWorkDirRequirement\n    listing:\n      - entry: $(inputs.reference_genome)\n      - entry: $(inputs.dict)\n      - entry: $(inputs.known_indels)\nhints:\n  - class: ResourceRequirement\n    coresMin: 4\n    ramMin: 8000\n\nbaseCommand:\n  - java\n  - -jar\n  - /usr/GenomeAnalysisTK.jar\n  - '-T'\n  - RealignerTargetCreator\n\ninputs:\n  - id: input\n    type: File\n    inputBinding:\n      position: 2\n      prefix: '-I'\n    secondaryFiles:\n      - ^.bai\n   # must have .list\n  - id: rtc_intervals_name\n    type: string? \n    default: 'rtc_intervals.list'\n  - id: reference_genome\n    type: File\n    inputBinding:\n      position: 1\n      prefix: '-R'\n    secondaryFiles:\n      - .fai\n  - id: known_indels\n    type: File\n    inputBinding:\n      position: 4\n      prefix: '--known'\n  - id: dict\n    type: File\n      \narguments:\n  - position: 5\n    prefix: '-dt'\n    valueFrom: NONE\n  - position: 3\n    prefix: '-o'\n    valueFrom: $(inputs.rtc_intervals_name)\n\n\noutputs:\n  - id: rtc_intervals_file\n    type: File\n    outputBinding:\n      glob: \"*.list\" \nlabel: rtc \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "rtc",
    "cwl_inputs": "[{'id': 'input', 'type': 'File', 'inputBinding': {'position': 2, 'prefix': '-I'}, 'secondaryFiles': ['^.bai']}, {'id': 'rtc_intervals_name', 'type': 'string?', 'default': 'rtc_intervals.list'}, {'id': 'reference_genome', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-R'}, 'secondaryFiles': ['.fai']}, {'id': 'known_indels', 'type': 'File', 'inputBinding': {'position': 4, 'prefix': '--known'}}, {'id': 'dict', 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'rtc_intervals_file', 'type': 'File', 'outputBinding': {'glob': '*.list'}}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 4, 'ramMin': 8000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['java', '-jar', '/usr/GenomeAnalysisTK.jar', '-T', 'RealignerTargetCreator']",
    "cwl_arguments": "[{'position': 5, 'prefix': '-dt', 'valueFrom': 'NONE'}, {'position': 3, 'prefix': '-o', 'valueFrom': '$(inputs.rtc_intervals_name)'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "rtc",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/gunzip.cwl",
    "sha": "b46e15eef2fb64764609b1c366914b18e9cab700",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/gunzip.cwl",
    "content": "class: CommandLineTool\n\ncwlVersion: v1.0\n\nbaseCommand: [ \"gunzip\" ]\n\narguments: [ \"-c\",\"-v\" ]\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: jlaitinen/lftpalpine\n  - class: ResourceRequirement\n    outdirMin: 7500\n    tmpdirMin: 7500\nhints:\n  - class: ResourceRequirement\n    coresMin: 2\n    ramMin: 5000\n\ninputs:\n  - id: reference_file\n    type: File[]\n    inputBinding:\n      position: 2\noutputs:\n  - id: unzipped_fasta\n    type: stdout\n    streamable: true\n    #outputBinding:\n    #  glob: \".fa\"\nstdout: $(inputs.reference_file[0].nameroot)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'reference_file', 'type': 'File[]', 'inputBinding': {'position': 2}}]",
    "cwl_outputs": "[{'id': 'unzipped_fasta', 'type': 'stdout', 'streamable': True}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 2, 'ramMin': 5000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gunzip']",
    "cwl_arguments": "['-c', '-v']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.reference_file[0].nameroot)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/gunzip_known_sites.cwl",
    "sha": "9fabebc9d8bd7abb980ce40e651af6db3ceebff3",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/gunzip_known_sites.cwl",
    "content": "class: CommandLineTool\n\ncwlVersion: v1.0\n\nbaseCommand: [ \"gunzip\" ]\n\narguments: [ \"-c\" ]\n\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: jlaitinen/lftpalpine\n  - class: ResourceRequirement\n    coresMin: 2\n    ramMin: 2000\n    outdirMin: 12500\n    tmpdirMin: 12500\n\ninputs:\n  - id: known_sites_file\n    type: File\n    inputBinding:\n      position: 1\n\noutputs:\n  - id: unzipped_known_sites_file\n    type: stdout\n    #outputBinding:\n    #  glob: \"*.gvcf\"\nstdout: $(inputs.known_sites_file.nameroot)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'known_sites_file', 'type': 'File', 'inputBinding': {'position': 1}}]",
    "cwl_outputs": "[{'id': 'unzipped_known_sites_file', 'type': 'stdout'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gunzip']",
    "cwl_arguments": "['-c']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.known_sites_file.nameroot)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/lftp.cwl",
    "sha": "58cf86be2a6b1b3df173dcc53fd4a0ffd35ceccc",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/lftp.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: \"transfer file passed from the previous task to the remote ftp server\"\nrequirements:\n  - class: InlineJavascriptRequirement \n  - class: DockerRequirement\n    dockerPull: jlaitinen/lftpalpine\n  - class: MultipleInputFeatureRequirement\n  - class: InitialWorkDirRequirement\n    listing: ${\n        var r = [];\n        for (var i=0; i < inputs.files_to_send.length; i++) {\n          r.push(inputs.files_to_send[i]);\n        }\n        r.push(inputs.gvcf);\n        r.push(inputs.bam);\n        return r; \n      }\n  - class: ResourceRequirement\n    outdirMin: 7200\nhints:\n  - class: ResourceRequirement\n    coresMin: 1 \n    ramMin: 2000\n    \ninputs:\n  - id: lftp_out_conf\n    type: File\n    doc: \"The parameters file for lftp\"\n    inputBinding:\n      position: 1\n  - id: files_to_send\n    type:\n      type: array\n      items: File\n  - id: bam\n    type: File\n    secondaryFiles: \n      - ^.bai\n  - id: gvcf\n    type: File\n    secondaryFiles:\n      - .tbi\n\n#      inputBinding:\n#        valueFrom: $(self.basename)\noutputs:\n  - id: output\n    type: stdout\n\nbaseCommand: [\"lftp\"]\narguments: [\"-f\"]\n \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'lftp_out_conf', 'type': 'File', 'doc': 'The parameters file for lftp', 'inputBinding': {'position': 1}}, {'id': 'files_to_send', 'type': {'type': 'array', 'items': 'File'}}, {'id': 'bam', 'type': 'File', 'secondaryFiles': ['^.bai']}, {'id': 'gvcf', 'type': 'File', 'secondaryFiles': ['.tbi']}]",
    "cwl_outputs": "[{'id': 'output', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 2000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lftp']",
    "cwl_arguments": "['-f']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "transfer file passed from the previous task to the remote ftp server",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/lftp_in.cwl",
    "sha": "062bf256c6422dae96b8fc994b3629abaf4c1b39",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/lftp_in.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: \"transfer file from a remote FTP/HTTP server to the TES\"\nrequirements:\n#  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: jlaitinen/lftpalpine\n  - class: ResourceRequirement\n    coresMin: 2\n    ramMin: 2000\n    tmpdirMin: 7500\n    outdirMin: 7500  \n      \ninputs:\n  - id: curl_config_file\n    type: File\n    inputBinding:\n      prefix: -K \n      separate: true\n      position: 1\noutputs:\n  - id: raw_sequences\n    type: File[]\n    outputBinding:\n      glob: \"*.gz\"\n\nbaseCommand: [\"curl\"]\n\n \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'curl_config_file', 'type': 'File', 'inputBinding': {'prefix': '-K', 'separate': True, 'position': 1}}]",
    "cwl_outputs": "[{'id': 'raw_sequences', 'type': 'File[]', 'outputBinding': {'glob': '*.gz'}}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['curl']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "transfer file from a remote FTP/HTTP server to the TES",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/picard_dictionary.cwl",
    "sha": "8e0982038fe0a99b9deb59665b0bcbe59dfe5577",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/picard_dictionary.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nid: picard_markduplicates\nbaseCommand:\n  - picard\n  - CreateSequenceDictionary\n  \nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: cnag/picard:2.18.25\n  - class: ResourceRequirement\n    outdirMin: 7500\n    tmpdirMin: 7700\nhints:\n  - class: ResourceRequirement\n    coresMin: 4\n    ramMin: 4000\n\ninputs:\n  - id: reference_genome\n    type: File\n    inputBinding:\n      position: 1\n      prefix: 'R='\n      separate: false\n\narguments:\n  - position: 2\n    prefix: 'O='\n    separate: false\n    valueFrom: $(inputs.reference_genome.nameroot).dict\n\noutputs:\n  - id: dict\n    type: File\n    outputBinding:\n      glob: \"*.dict\"\n\n \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "picard_markduplicates",
    "cwl_inputs": "[{'id': 'reference_genome', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': 'R=', 'separate': False}}]",
    "cwl_outputs": "[{'id': 'dict', 'type': 'File', 'outputBinding': {'glob': '*.dict'}}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 4, 'ramMin': 4000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'CreateSequenceDictionary']",
    "cwl_arguments": "[{'position': 2, 'prefix': 'O=', 'separate': False, 'valueFrom': '$(inputs.reference_genome.nameroot).dict'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/picard_markduplicates.cwl",
    "sha": "ad3cab76251ad720c1d6408115dc6360c1f8d374",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/picard_markduplicates.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nid: picard_markduplicates\nbaseCommand:\n  - picard\n  - MarkDuplicates\n  \nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: cnag/picard:2.18.25\n  - class: ResourceRequirement\n    outdirMin: 7500\n    tmpdirMin: 7700\n\nhints:\n  - class: ResourceRequirement\n    coresMin: 4\n    ramMin: 4000\n\ninputs:\n  input:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: INPUT=\n      separate: false\n\narguments:\n  - position: 0\n    prefix: OPTICAL_DUPLICATE_PIXEL_DISTANCE=\n    valueFrom: '100'\n    separate: false\n  - position: 0\n    prefix: TAGGING_POLICY=\n    valueFrom: 'All'\n    separate: false\n  - position: 0\n    prefix: CREATE_INDEX=\n    valueFrom: 'true'\n    separate: false\n  - position: 0\n    prefix: REMOVE_DUPLICATES=\n    valueFrom: 'true'\n    separate: false\n  - position: 0\n    prefix: TAG_DUPLICATE_SET_MEMBERS=\n    valueFrom: 'true'\n    separate: false\n\n  - position: 0\n    prefix: ASSUME_SORT_ORDER=\n    valueFrom: 'coordinate'\n    separate: false\n  - position: 1\n    prefix: METRICS_FILE=\n    valueFrom: $(inputs.input.nameroot).metrics.txt\n    separate: false\n  - position: 3\n    prefix: OUTPUT=\n    valueFrom: $(inputs.input.nameroot).md.bam\n    separate: false\n\noutputs:\n  - id: md_bam\n    type: File\n    outputBinding:\n      glob: '*.md.bam'\n    secondaryFiles:\n     - ^.bai\n  - id: output_metrics\n    type: File\n    outputBinding:\n      glob: '*.metrics.txt'\n\nlabel: picard-MD\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "picard_markduplicates",
    "cwl_inputs": "{'input': {'type': 'File', 'inputBinding': {'position': 2, 'prefix': 'INPUT=', 'separate': False}}}",
    "cwl_outputs": "[{'id': 'md_bam', 'type': 'File', 'outputBinding': {'glob': '*.md.bam'}, 'secondaryFiles': ['^.bai']}, {'id': 'output_metrics', 'type': 'File', 'outputBinding': {'glob': '*.metrics.txt'}}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 4, 'ramMin': 4000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'MarkDuplicates']",
    "cwl_arguments": "[{'position': 0, 'prefix': 'OPTICAL_DUPLICATE_PIXEL_DISTANCE=', 'valueFrom': '100', 'separate': False}, {'position': 0, 'prefix': 'TAGGING_POLICY=', 'valueFrom': 'All', 'separate': False}, {'position': 0, 'prefix': 'CREATE_INDEX=', 'valueFrom': 'true', 'separate': False}, {'position': 0, 'prefix': 'REMOVE_DUPLICATES=', 'valueFrom': 'true', 'separate': False}, {'position': 0, 'prefix': 'TAG_DUPLICATE_SET_MEMBERS=', 'valueFrom': 'true', 'separate': False}, {'position': 0, 'prefix': 'ASSUME_SORT_ORDER=', 'valueFrom': 'coordinate', 'separate': False}, {'position': 1, 'prefix': 'METRICS_FILE=', 'valueFrom': '$(inputs.input.nameroot).metrics.txt', 'separate': False}, {'position': 3, 'prefix': 'OUTPUT=', 'valueFrom': '$(inputs.input.nameroot).md.bam', 'separate': False}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "picard-MD",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/samtools_index.cwl",
    "sha": "9abe268df62ef7c5a616cec5c0ef48739ff89192",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/samtools_index.cwl",
    "content": "cwlVersion: v1.0\nclass: CommandLineTool\nid: fastq_index\nbaseCommand:\n  - samtools\n  - faidx\n  \nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: biocontainers/samtools:1.3.1\n  - class: InitialWorkDirRequirement\n    listing: \n      - entry: $(inputs.input)\n  - class: ResourceRequirement\n    outdirMin: 7500\n    tmpdirMin: 7700\nhints:\n  - class: ResourceRequirement\n    coresMin: 8\n    ramMin: 8000\n\ninputs:\n  - id: input\n    type: File\n    inputBinding:\n      position: 1\n\noutputs:\n  - id: index_fai\n    type: File\n    outputBinding:\n      glob: \"*.fa\"\n    secondaryFiles:\n      - .fai\n\nlabel: samtools-faidx\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "fastq_index",
    "cwl_inputs": "[{'id': 'input', 'type': 'File', 'inputBinding': {'position': 1}}]",
    "cwl_outputs": "[{'id': 'index_fai', 'type': 'File', 'outputBinding': {'glob': '*.fa'}, 'secondaryFiles': ['.fai']}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 8, 'ramMin': 8000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'faidx']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "samtools-faidx",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/samtools_sort_bam.cwl",
    "sha": "c12155ec1052a539c296553c46b7bf3bcbddd3a4",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/samtools_sort_bam.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\nid: BAM_index\nbaseCommand:\n  - samtools\n  - sort\n  \nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: DockerRequirement\n    dockerPull: biocontainers/samtools:1.3.1\n  - class: ResourceRequirement\n    outdirMin: 7500\n    tmpdirMin: 7700\nhints:\n  - class: ResourceRequirement\n    coresMin: 8\n    ramMin: 8000\n\ninputs:\n  - id: input\n    type: File\n    inputBinding:\n      position: 2\n  - id: threads\n    type: string?\n    default: 8\n    inputBinding: \n      position: 1\n      prefix: '--threads'\narguments:\n  - position: 2\n    prefix: '-o'\n    valueFrom: $(inputs.input.nameroot).sorted.bam \noutputs:\n  - id: sorted_bam\n    type: File\n    outputBinding:\n      glob: \"*.sorted.bam\"\nlabel: samtools-bam_sort\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "BAM_index",
    "cwl_inputs": "[{'id': 'input', 'type': 'File', 'inputBinding': {'position': 2}}, {'id': 'threads', 'type': 'string?', 'default': 8, 'inputBinding': {'position': 1, 'prefix': '--threads'}}]",
    "cwl_outputs": "[{'id': 'sorted_bam', 'type': 'File', 'outputBinding': {'glob': '*.sorted.bam'}}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 8, 'ramMin': 8000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'sort']",
    "cwl_arguments": "[{'position': 2, 'prefix': '-o', 'valueFrom': '$(inputs.input.nameroot).sorted.bam'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "samtools-bam_sort",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/demonstrator/workflow.cwl",
    "sha": "901235aceb9d8fdc93a4253caa420152233a278e",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/workflow.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: rd_connect\nlabel: RD_Connect\n\ninputs:\n  - id: curl_reference_genome_url\n    type: File\n  - id: curl_fastq_urls\n    type: File\n  - id: curl_known_indels_url\n    type: File\n  - id: curl_known_sites_url\n    type: File\n  - id: readgroup_str\n    type: string\n  - id: chromosome\n    type: string?\n  # bwa mem, samtools sort, gatk haplotype caller \n  - id: threads\n    type: string?\n  - id: sample_name\n    type: string\n  - id: lftp_out_conf\n    type: File\n\noutputs: []\n\nsteps:\n  - id: fastqs_in\n    in:\n      - id: curl_config_file\n        source: curl_fastq_urls\n    out: \n      - id: in_files\n    run: curl.cwl\n\n  - id: reference_in\n    in:\n      - id: curl_config_file\n        source: curl_reference_genome_url\n    out: \n      - id: in_files\n    run: curl.cwl\n\n  - id: known_indels_in\n    in:\n      - id: curl_config_file\n        source: curl_known_indels_url\n    out:\n      - id: known_indels_file\n    run: curl_indels.cwl\n\n  - id: known_sites_in\n    in:\n      - id: curl_config_file\n        source: curl_known_sites_url\n    out:\n      - id: known_sites_file\n    run: curl_known_sites.cwl\n\n  - id: unzipped_known_sites\n    in:\n      - id: known_sites_file\n        source:\n          - known_sites_in/known_sites_file\n    out:\n      - id: unzipped_known_sites_file\n    run: gunzip_known_sites.cwl\n\n  - id: gunzip\n    in:\n      - id: reference_file\n        source:\n          - reference_in/in_files\n    out:\n      - id: unzipped_fasta\n    run: gunzip.cwl\n\n  - id: picard_dictionary\n    in:\n      - id: reference_genome\n        source:\n          - gunzip/unzipped_fasta\n    out:\n      - id: dict\n    run: picard_dictionary.cwl\n\n  - id: cutadapt2\n    in:\n      - id: raw_sequences\n        source:\n          - fastqs_in/in_files\n    out: \n      - id: trimmed_fastq\n    run: cutadapt-v.1.18.cwl\n\n  - id: bwa_index\n    in:\n      - id: reference_genome\n        source:\n          - gunzip/unzipped_fasta\n    out:\n      - id: output\n    run: bwa-index.cwl\n\n  - id: samtools_index\n    in:\n      - id: input\n        source:\n          - gunzip/unzipped_fasta\n    out:\n      - id: index_fai\n    run: samtools_index.cwl\n\n\n  - id: bwa_mem\n    in:\n      - id: trimmed_fastq\n        source:\n         - cutadapt2/trimmed_fastq\n      - id: read_group\n        source:\n          - readgroup_str\n      - id: sample_name\n        source:\n          - sample_name\n      - id: reference_genome\n        source:\n          - bwa_index/output\n      - id: threads\n        source: \n          - threads\n    out:\n      - id: aligned_sam\n    run: bwa-mem.cwl\n\n  - id: samtools_sort\n    in:\n      - id: input\n        source:\n          - bwa_mem/aligned_sam\n      - id: threads\n        source:\n          - threads\n    out:\n      - id: sorted_bam\n    run: samtools_sort_bam.cwl\n   \n  - id: picard_markduplicates\n    in:\n      - id: input\n        source: \n          - samtools_sort/sorted_bam\n    out:\n      - id: md_bam\n      - id: output_metrics\n    run: picard_markduplicates.cwl\n    label: picard-MD\n\n  - id: gatk3-rtc\n    in:\n      - id: input\n        source: \n          - picard_markduplicates/md_bam\n      - id: reference_genome\n        source: \n          - samtools_index/index_fai\n      - id: dict\n        source:\n          - picard_dictionary/dict\n      - id: known_indels\n        source:\n          - known_indels_in/known_indels_file\n    out:\n      - id: rtc_intervals_file\n    run: gatk3-rtc.cwl\n    label: gatk3-rtc\n\n  - id: gatk-ir\n    in:\n      - id: input\n        source: \n          - picard_markduplicates/md_bam\n      - id: rtc_intervals\n        source: \n          - gatk3-rtc/rtc_intervals_file\n      - id: reference_genome\n        source: \n           - samtools_index/index_fai\n      - id: dict\n        source:\n          - picard_dictionary/dict\n    out:\n      - id: realigned_bam\n    run: gatk-ir.cwl\n    label: gatk-ir\n\n  - id: gatk-base_recalibration\n    in:\n      - id: reference_genome\n        source: \n          - samtools_index/index_fai\n      - id: dict\n        source:\n          - picard_dictionary/dict\n      - id: input\n        source:\n          - gatk-ir/realigned_bam\n      - id: unzipped_known_sites_file\n        source:\n          - unzipped_known_sites/unzipped_known_sites_file\n      - id: known_indels_file\n        source:\n          - known_indels_in/known_indels_file\n      - id: threads\n        source:\n          - threads\n    out:\n      - id: br_model\n    run: gatk-base_recalibration.cwl\n    label: gatk-base_recalibration\n\n  - id: gatk-base_recalibration_print_reads\n    in:\n      - id: reference_genome\n        source: \n          - samtools_index/index_fai\n      - id: dict\n        source:\n          - picard_dictionary/dict\n      - id: input\n        source:\n          - gatk-ir/realigned_bam\n      - id: br_model\n        source:\n          - gatk-base_recalibration/br_model\n    out:\n      - id: bqsr_bam\n    run: gatk-base_recalibration_print_reads.cwl\n    label: gatk-base_recalibration_print_reads\n\n\n  - id: gatk_haplotype_caller\n    in:\n      - id: reference_genome\n        source: \n          - samtools_index/index_fai\n      - id: dict\n        source:\n          - picard_dictionary/dict\n      - id: input\n        source:\n          - gatk-base_recalibration_print_reads/bqsr_bam\n      - id: chromosome\n        source: \n          - chromosome\n      - id: threads\n        source: \n          - threads\n    out:\n      - id: gvcf\n    run: gatk-haplotype_caller.cwl\n    label: gatk-haplotype_caller\n\n  - id: lftp_out\n    in: \n      - id: lftp_out_conf\n        source: lftp_out_conf\n      - id: files_to_send\n        source:\n          - picard_markduplicates/output_metrics\n          - samtools_index/index_fai\n      - id: bam\n        source:\n          - gatk-base_recalibration_print_reads/bqsr_bam\n      - id: gvcf\n        source:      \n          - gatk_haplotype_caller/gvcf\n    out: []\n    run: lftp.cwl\n\nrequirements:\n  - class: MultipleInputFeatureRequirement\n",
    "cwl_class": "Workflow",
    "cwl_id": "rd_connect",
    "cwl_inputs": "[{'id': 'curl_reference_genome_url', 'type': 'File'}, {'id': 'curl_fastq_urls', 'type': 'File'}, {'id': 'curl_known_indels_url', 'type': 'File'}, {'id': 'curl_known_sites_url', 'type': 'File'}, {'id': 'readgroup_str', 'type': 'string'}, {'id': 'chromosome', 'type': 'string?'}, {'id': 'threads', 'type': 'string?'}, {'id': 'sample_name', 'type': 'string'}, {'id': 'lftp_out_conf', 'type': 'File'}]",
    "cwl_outputs": "[]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RD_Connect",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "cwl-workflows/demonstrator/workflow_localfiles.cwl",
    "sha": "1b71543db1a3c2e337e0c62b714ccd16e03d5051",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/demonstrator/workflow_localfiles.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: rd_connect\nlabel: RD_Connect\n\ninputs:\n  - id: fastq_files\n    type: File[]\n  - id: reference_genome\n    type: File[]\n  - id: known_indels_file\n    type: File\n  - id: known_sites_file\n    type: File\n  - id: chromosome\n    type: string\n  - id: readgroup_str\n    type: string\n  - id: sample_name\n    type: string\n\noutputs: \n  - id: metrics\n    outputSource:\n     - picard_markduplicates/output_metrics\n    type: File\n  - id: gvcf\n    outputSource:\n     - gatk_haplotype_caller/gvcf\n    type: File\n\nsteps:\n\n  - id: unzipped_known_sites\n    in:\n      - id: known_sites_file\n        source:\n          - known_sites_file\n    out:\n      - id: unzipped_known_sites_file\n    run: gunzip_known_sites.cwl\n\n  - id: gunzip\n    in:\n      - id: reference_file\n        source:\n          - reference_genome\n    out:\n      - id: unzipped_fasta\n    run: gunzip.cwl\n\n  - id: picard_dictionary\n    # from samtools reference genome\n    in:\n      - id: reference_genome\n        source:\n          - gunzip/unzipped_fasta\n    # produced .dict file\n    out:\n      - id: dict\n    run: picard_dictionary.cwl\n\n  - id: cutadapt2\n    in:\n      - id: raw_sequences\n        source:\n          - fastq_files\n    out: \n      - id: trimmed_fastq\n    run: cutadapt-v.1.18.cwl\n\n  - id: bwa_index\n    in:\n      - id: reference_genome\n        source:\n          - gunzip/unzipped_fasta\n    out:\n      - id: output\n    run: bwa-index.cwl\n\n  - id: samtools_index\n    in:\n      - id: input\n        source:\n          - gunzip/unzipped_fasta\n    out:\n      - id: index_fai\n    run: samtools_index.cwl\n\n\n  - id: bwa_mem\n    in:\n\n      - id: sample_name\n        source:\n          - sample_name\n      - id: trimmed_fastq\n        source:\n         - cutadapt2/trimmed_fastq\n      - id: read_group\n        source:\n          - readgroup_str\n      - id: reference_genome\n        source:\n          - bwa_index/output\n    out:\n      - id: aligned_sam\n    run: bwa-mem.cwl\n\n  - id: samtools_sort\n    in:\n      - id: input\n        source:\n          - bwa_mem/aligned_sam\n    out:\n      - id: sorted_bam\n    run: samtools_sort_bam.cwl\n   \n  - id: picard_markduplicates\n    in:\n      - id: input\n        source: \n          - samtools_sort/sorted_bam\n    out:\n      - id: md_bam\n      - id: output_metrics\n    run: picard_markduplicates.cwl\n    label: picard-MD\n\n\n  - id: gatk3-rtc\n    in:\n      - id: input\n        source: \n          - picard_markduplicates/md_bam\n      - id: reference_genome\n        source: \n          - samtools_index/index_fai\n      - id: dict\n        source:\n          - picard_dictionary/dict\n      - id: known_indels\n        source:\n          - known_indels_file\n    out:\n      - id: rtc_intervals_file\n    run: gatk3-rtc.cwl\n    label: gatk3-rtc\n\n  - id: gatk-ir\n    in:\n      - id: input\n        source: \n          - picard_markduplicates/md_bam\n      - id: rtc_intervals\n        source: \n          - gatk3-rtc/rtc_intervals_file\n      - id: reference_genome\n        source: \n           - samtools_index/index_fai\n      - id: dict\n        source:\n          - picard_dictionary/dict\n    out:\n      - id: realigned_bam\n    run: gatk-ir.cwl\n    label: gatk-ir\n\n  - id: gatk-base_recalibration\n    in:\n      - id: reference_genome\n        source: \n          - samtools_index/index_fai\n      - id: dict\n        source:\n          - picard_dictionary/dict\n      - id: input\n        source:\n          - gatk-ir/realigned_bam\n      - id: unzipped_known_sites_file\n        source:\n          - unzipped_known_sites/unzipped_known_sites_file\n      - id: known_indels_file\n        source:\n          - known_indels_file\n    out:\n      - id: br_model \n    run: gatk-base_recalibration.cwl\n    label: gatk-base_recalibration\n\n  - id: gatk-base_recalibration_print_reads\n    in:\n      - id: reference_genome\n        source: \n          - samtools_index/index_fai\n      - id: dict\n        source:\n          - picard_dictionary/dict\n      - id: input\n        source:\n          - gatk-ir/realigned_bam\n      - id: br_model\n        source:\n          - gatk-base_recalibration/br_model\n    out:\n      - id: bqsr_bam\n    run: gatk-base_recalibration_print_reads.cwl\n    label: gatk-base_recalibration_print_reads\n\n\n  - id: gatk_haplotype_caller\n    in:\n      - id: reference_genome\n        source: \n          - samtools_index/index_fai\n      - id: dict\n        source:\n          - picard_dictionary/dict\n      - id: input\n        source:\n          - gatk-base_recalibration_print_reads/bqsr_bam\n      - id: chromosome\n        source: \n          - chromosome\n    out:\n      - id: gvcf\n    run: gatk-haplotype_caller.cwl\n    label: gatk-haplotype_caller\n\nrequirements:\n  - class: MultipleInputFeatureRequirement\n",
    "cwl_class": "Workflow",
    "cwl_id": "rd_connect",
    "cwl_inputs": "[{'id': 'fastq_files', 'type': 'File[]'}, {'id': 'reference_genome', 'type': 'File[]'}, {'id': 'known_indels_file', 'type': 'File'}, {'id': 'known_sites_file', 'type': 'File'}, {'id': 'chromosome', 'type': 'string'}, {'id': 'readgroup_str', 'type': 'string'}, {'id': 'sample_name', 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'metrics', 'outputSource': ['picard_markduplicates/output_metrics'], 'type': 'File'}, {'id': 'gvcf', 'outputSource': ['gatk_haplotype_caller/gvcf'], 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RD_Connect",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "cwl-workflows/initial/rd_connect.cwl",
    "sha": "d21343918fa06f75eac1d0709be77320cd299597",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/initial/rd_connect.cwl",
    "content": "class: Workflow\ncwlVersion: v1.0\nid: rd_connect\nlabel: RD_Connect\n$namespaces:\n  sbg: 'https://www.sevenbridges.com/'\ninputs:\n  - id: raw_sequences\n    type:\n      - File\n      - type: array\n        items: File\n    'sbg:x': -607\n    'sbg:y': -208\n  - id: reference\n    type: File\n    'sbg:x': -57\n    'sbg:y': -641\n  - id: rtc_intervals_name\n    type: File\n    'sbg:x': 275.60113525390625\n    'sbg:y': -473.4110107421875\n  - id: known_sites\n    type:\n      - File\n      - type: array\n        items: File\n    'sbg:x': 360.4740905761719\n    'sbg:y': -608.6580200195312\noutputs:\n  - id: output_metrics\n    outputSource:\n      - picard_markduplicates/output_metrics\n    type: File\n    'sbg:x': -26.121828079223633\n    'sbg:y': -400.9543151855469\n  - id: gvcf\n    outputSource:\n      - gatk3_haplotypecaller/gvcf\n      - gatk3_haplotypecaller/br_model\n    type: File\n    'sbg:x': 1117.4185791015625\n    'sbg:y': -162.47743225097656\nsteps:\n  - id: cutadapt2\n    in:\n      - id: raw_sequences\n        source:\n          - raw_sequences\n    out:\n      - id: out_file\n    run: tools/cutadapt/cutadapt-v.1.18.cwl\n    label: cutadapt\n    'sbg:x': -444.3984375\n    'sbg:y': -209\n  - id: bwa_mem\n    in:\n      - id: reads\n        source:\n          - cutadapt2/out_file\n      - id: reference\n        source: reference\n    out:\n      - id: output\n    run: tools/bwa/bwa-mem.cwl\n    'sbg:x': -229\n    'sbg:y': -208\n  - id: picard_markduplicates\n    in:\n      - id: input\n        source:\n          - bwa_mem/output\n    out:\n      - id: md_bam\n      - id: output_metrics\n    run: tools/picard/picard-v.2.18.25-markduplicates.cwl\n    label: picard-MD\n    'sbg:x': -29\n    'sbg:y': -213\n  - id: rtc\n    in:\n      - id: input\n        source:\n          - picard_markduplicates/md_bam\n      - id: rtc_intervals_name\n        source: rtc_intervals_name\n      - id: reference_genome\n        source: reference\n    out:\n      - id: rtc_intervals_file\n    run: tools/gatk/gatk3-rtc.cwl\n    label: rtc\n    'sbg:x': 267\n    'sbg:y': -224\n  - id: ir\n    in:\n      - id: input\n        source:\n          - picard_markduplicates/md_bam\n      - id: rtc_intervals\n        source: rtc/rtc_intervals_file\n      - id: reference_genome\n        source: reference\n    out:\n      - id: realigned_bam\n    run: tools/gatk/gatk3-ir.cwl\n    label: ir\n    'sbg:x': 276\n    'sbg:y': -51\n  - id: gatk3_base_recalibration\n    in:\n      - id: reference_sequence\n        source: reference\n      - id: input\n        source:\n          - ir/realigned_bam\n      - id: known_sites\n        source:\n          - known_sites\n    out:\n      - id: br_model\n    run: tools/gatk/gatk3-base_recalibration.cwl\n    label: gatk3-base_recalibration\n    'sbg:x': 623.4722290039062\n    'sbg:y': -134.5416717529297\n  - id: gatk3_base_recalibration_print_reads\n    in:\n      - id: reference_sequence\n        source: reference\n      - id: input\n        source:\n          - ir/realigned_bam\n      - id: br_model\n        source:\n          - gatk3_base_recalibration/br_model\n    out:\n      - id: recalibrated_bam\n    run: tools/gatk/gatk3-base_recalibration_print_reads.cwl\n    label: gatk3-base_recalibration_print_reads\n    'sbg:x': 773.4443969726562\n    'sbg:y': 158.22222900390625\n  - id: gatk3_haplotypecaller\n    in:\n      - id: reference_sequence\n        source: reference\n      - id: input\n        source:\n          - gatk3_base_recalibration_print_reads/recalibrated_bam\n    out:\n      - id: br_model\n    run: tools/gatk/gatk3-haplotypecaller.cwl\n    label: gatk3-haplotypecaller\n    'sbg:x': 943.1527709960938\n    'sbg:y': -166.19444274902344\nrequirements: []\n",
    "cwl_class": "Workflow",
    "cwl_id": "rd_connect",
    "cwl_inputs": "[{'id': 'raw_sequences', 'type': ['File', {'type': 'array', 'items': 'File'}], 'sbg:x': -607, 'sbg:y': -208}, {'id': 'reference', 'type': 'File', 'sbg:x': -57, 'sbg:y': -641}, {'id': 'rtc_intervals_name', 'type': 'File', 'sbg:x': 275.60113525390625, 'sbg:y': -473.4110107421875}, {'id': 'known_sites', 'type': ['File', {'type': 'array', 'items': 'File'}], 'sbg:x': 360.4740905761719, 'sbg:y': -608.6580200195312}]",
    "cwl_outputs": "[{'id': 'output_metrics', 'outputSource': ['picard_markduplicates/output_metrics'], 'type': 'File', 'sbg:x': -26.121828079223633, 'sbg:y': -400.9543151855469}, {'id': 'gvcf', 'outputSource': ['gatk3_haplotypecaller/gvcf', 'gatk3_haplotypecaller/br_model'], 'type': 'File', 'sbg:x': 1117.4185791015625, 'sbg:y': -162.47743225097656}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "RD_Connect",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {},
    "error": "'list' object has no attribute 'items'"
  },
  {
    "path": "cwl-workflows/initial/tools/bwa/bwa-mem.cwl",
    "sha": "6c033d63414b066ecbb56286c5a89e44dc48ad18",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/initial/tools/bwa/bwa-mem.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  sbg: 'https://www.sevenbridges.com/'\nbaseCommand:\n  - bwa\n  - mem\ninputs:\n  - id: output_filename\n    type: string\n  - id: reads\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 4\n  - id: reference\n    type: File\n    inputBinding:\n      position: 3\n    secondaryFiles:\n      - .amb\n      - .ann\n      - .bwt\n      - .pac\n      - .sa\n  - id: threads\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: '-t'\n    doc: '-t INT        number of threads [1]'\n  - id: read_group\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: '-R'\noutputs:\n  - id: output\n    type: File\n    outputBinding:\n      glob: $(inputs.output_filename)\ndoc: >\n  Usage: bwa mem [options] <idxbase> <in1.fq> [in2.fq]\n\n\n  Algorithm options:\n         -w INT        band width for banded alignment [100]\n         -d INT        off-diagonal X-dropoff [100]\n         -r FLOAT      look for internal seeds inside a seed longer than {-k} * FLOAT [1.5]\n         -y INT        seed occurrence for the 3rd round seeding [20]\n         -c INT        skip seeds with more than INT occurrences [500]\n         -D FLOAT      drop chains shorter than FLOAT fraction of the longest overlapping chain [0.50]\n         -W INT        discard a chain if seeded bases shorter than INT [0]\n         -m INT        perform at most INT rounds of mate rescues for each read [50]\n         -S            skip mate rescue\n         -P            skip pairing; mate rescue performed unless -S also in use\n         -e            discard full-length exact matches\n\n  Scoring options:\n\n         -A INT        score for a sequence match, which scales options -TdBOELU unless overridden [1]\n         -B INT        penalty for a mismatch [4]\n         -O INT[,INT]  gap open penalties for deletions and insertions [6,6]\n         -E INT[,INT]  gap extension penalty; a gap of size k cost '{-O} + {-E}*k' [1,1]\n         -L INT[,INT]  penalty for 5'- and 3'-end clipping [5,5]\n         -U INT        penalty for an unpaired read pair [17]\n\n         -x STR        read type. Setting -x changes multiple parameters unless overriden [null]\n                       pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref)\n                       ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref)\n                       intractg: -B9 -O16 -L5  (intra-species contigs to ref)\n\n  Input/output options:\n\n         -p            smart pairing (ignoring in2.fq)\n         -R STR        read group header line such as '@RG\\tID:foo\\tSM:bar' [null]\n         -H STR/FILE   insert STR to header if it starts with @; or insert lines in FILE [null]\n         -j            treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file)\n\n         -v INT        verbose level: 1=error, 2=warning, 3=message, 4+=debugging [3]\n         -T INT        minimum score to output [30]\n         -h INT[,INT]  if there are <INT hits with score >80% of the max score, output all in XA [5,200]\n         -a            output all alignments for SE or unpaired PE\n         -C            append FASTA/FASTQ comment to SAM output\n         -V            output the reference FASTA header in the XR tag\n         -Y            use soft clipping for supplementary alignments\n         -M            mark shorter split hits as secondary\n\n         -I FLOAT[,FLOAT[,INT[,INT]]]\n                       specify the mean, standard deviation (10% of the mean if absent), max\n                       (4 sigma from the mean if absent) and min of the insert size distribution.\n                       FR orientation only. [inferred]\n\n  Note: Please read the man page for detailed description of the command line\n  and options.\nstdout: $(inputs.output_filename)\nrequirements:\n  - class: InlineJavascriptRequirement\n  - $import: bwa-docker.yml\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "[{'id': 'output_filename', 'type': 'string'}, {'id': 'reads', 'type': ['File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'position': 4}}, {'id': 'reference', 'type': 'File', 'inputBinding': {'position': 3}, 'secondaryFiles': ['.amb', '.ann', '.bwt', '.pac', '.sa']}, {'id': 'threads', 'type': 'int?', 'inputBinding': {'position': 1, 'prefix': '-t'}, 'doc': '-t INT        number of threads [1]'}, {'id': 'read_group', 'type': 'string?', 'inputBinding': {'position': 2, 'prefix': '-R'}}]",
    "cwl_outputs": "[{'id': 'output', 'type': 'File', 'outputBinding': {'glob': '$(inputs.output_filename)'}}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'mem']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Usage: bwa mem [options] <idxbase> <in1.fq> [in2.fq]\n\nAlgorithm options:\n       -w INT        band width for banded alignment [100]\n       -d INT        off-diagonal X-dropoff [100]\n       -r FLOAT      look for internal seeds inside a seed longer than {-k} * FLOAT [1.5]\n       -y INT        seed occurrence for the 3rd round seeding [20]\n       -c INT        skip seeds with more than INT occurrences [500]\n       -D FLOAT      drop chains shorter than FLOAT fraction of the longest overlapping chain [0.50]\n       -W INT        discard a chain if seeded bases shorter than INT [0]\n       -m INT        perform at most INT rounds of mate rescues for each read [50]\n       -S            skip mate rescue\n       -P            skip pairing; mate rescue performed unless -S also in use\n       -e            discard full-length exact matches\n\nScoring options:\n\n       -A INT        score for a sequence match, which scales options -TdBOELU unless overridden [1]\n       -B INT        penalty for a mismatch [4]\n       -O INT[,INT]  gap open penalties for deletions and insertions [6,6]\n       -E INT[,INT]  gap extension penalty; a gap of size k cost '{-O} + {-E}*k' [1,1]\n       -L INT[,INT]  penalty for 5'- and 3'-end clipping [5,5]\n       -U INT        penalty for an unpaired read pair [17]\n\n       -x STR        read type. Setting -x changes multiple parameters unless overriden [null]\n                     pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref)\n                     ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref)\n                     intractg: -B9 -O16 -L5  (intra-species contigs to ref)\n\nInput/output options:\n\n       -p            smart pairing (ignoring in2.fq)\n       -R STR        read group header line such as '@RG\\tID:foo\\tSM:bar' [null]\n       -H STR/FILE   insert STR to header if it starts with @; or insert lines in FILE [null]\n       -j            treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file)\n\n       -v INT        verbose level: 1=error, 2=warning, 3=message, 4+=debugging [3]\n       -T INT        minimum score to output [30]\n       -h INT[,INT]  if there are <INT hits with score >80% of the max score, output all in XA [5,200]\n       -a            output all alignments for SE or unpaired PE\n       -C            append FASTA/FASTQ comment to SAM output\n       -V            output the reference FASTA header in the XR tag\n       -Y            use soft clipping for supplementary alignments\n       -M            mark shorter split hits as secondary\n\n       -I FLOAT[,FLOAT[,INT[,INT]]]\n                     specify the mean, standard deviation (10% of the mean if absent), max\n                     (4 sigma from the mean if absent) and min of the insert size distribution.\n                     FR orientation only. [inferred]\n\nNote: Please read the man page for detailed description of the command line and options.\n",
    "cwl_stdout": "$(inputs.output_filename)",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/initial/tools/cutadapt/cutadapt-v.1.18.cwl",
    "sha": "ecdfc744fa6de09f46926d099bb856fce740439c",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/initial/tools/cutadapt/cutadapt-v.1.18.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  sbg: 'https://www.sevenbridges.com/'\nid: cutadapt2\nbaseCommand:\n  - cutadapt\ninputs:\n  - id: raw_sequences\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 2\n      prefix: ''\n      separate: false\n  - id: trimmed_sequences\n    type: string?\n    inputBinding:\n      position: 1\n      prefix: '-o'\n      valueFrom: '$(self? self : inputs.raw_sequences.basename + \".trimmed.fastq.gz\")'\n  - id: adaptors_file\n    type: File?\n    inputBinding:\n      position: 0\n      prefix: '-a'\noutputs:\n  - id: out_file\n    type:\n      - File\n      - type: array\n        items: File\n    outputBinding:\n      glob: $(inputs.trimmed_sequences)\nlabel: cutadapt\narguments:\n  - position: 0\n    prefix: '--overlap'\n    valueFrom: '6'\n  - position: 0\n    prefix: '--error-rate'\n    valueFrom: '0.2'\nrequirements:\n  - class: ScatterFeatureRequirement\n  - class: InlineJavascriptRequirement\nhints:\n  - class: DockerRequirement\n    dockerPull: 'cnag/cutadapt:1.18'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "cutadapt2",
    "cwl_inputs": "[{'id': 'raw_sequences', 'type': ['File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'position': 2, 'prefix': '', 'separate': False}}, {'id': 'trimmed_sequences', 'type': 'string?', 'inputBinding': {'position': 1, 'prefix': '-o', 'valueFrom': '$(self? self : inputs.raw_sequences.basename + \".trimmed.fastq.gz\")'}}, {'id': 'adaptors_file', 'type': 'File?', 'inputBinding': {'position': 0, 'prefix': '-a'}}]",
    "cwl_outputs": "[{'id': 'out_file', 'type': ['File', {'type': 'array', 'items': 'File'}], 'outputBinding': {'glob': '$(inputs.trimmed_sequences)'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'cnag/cutadapt:1.18'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cutadapt']",
    "cwl_arguments": "[{'position': 0, 'prefix': '--overlap', 'valueFrom': '6'}, {'position': 0, 'prefix': '--error-rate', 'valueFrom': '0.2'}]",
    "cwl_$namespaces": "{'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "cutadapt",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/initial/tools/gatk/gatk3-base_recalibration.cwl",
    "sha": "c0cebfc8d6d30cbed56cebf835f3ba24983ba602",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/initial/tools/gatk/gatk3-base_recalibration.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  sbg: 'https://www.sevenbridges.com/'\nid: gatk3_base_recalibration\nbaseCommand:\n  - gatk\n  - '-T'\n  - BaseRecalibrator\ninputs:\n  - id: reference_sequence\n    type: File\n    inputBinding:\n      position: 1\n      prefix: '-R'\n    secondaryFiles:\n      - .fai\n      - ^.dict\n  - id: input\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 2\n      prefix: '-I'\n    secondaryFiles:\n#      - .bai\n      - ^.bai\n  - id: output_filename\n    type: string\n    inputBinding:\n      position: 3\n      prefix: '-o'\n  - id: known_sites\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 4\n      prefix: '--knownSites'\noutputs:\n  - id: br_model\n    type: File\n    outputBinding:\n      glob: $(inputs.output_filename)\nlabel: gatk3-base_recalibration\narguments:\n  - position: 0\n    prefix: '-dt'\n    valueFrom: NONE\nrequirements:\n  - class: InlineJavascriptRequirement\n  - $import: gatk3-docker.yml",
    "cwl_class": "CommandLineTool",
    "cwl_id": "gatk3_base_recalibration",
    "cwl_inputs": "[{'id': 'reference_sequence', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-R'}, 'secondaryFiles': ['.fai', '^.dict']}, {'id': 'input', 'type': ['File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'position': 2, 'prefix': '-I'}, 'secondaryFiles': ['^.bai']}, {'id': 'output_filename', 'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-o'}}, {'id': 'known_sites', 'type': ['File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'position': 4, 'prefix': '--knownSites'}}]",
    "cwl_outputs": "[{'id': 'br_model', 'type': 'File', 'outputBinding': {'glob': '$(inputs.output_filename)'}}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', '-T', 'BaseRecalibrator']",
    "cwl_arguments": "[{'position': 0, 'prefix': '-dt', 'valueFrom': 'NONE'}]",
    "cwl_$namespaces": "{'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk3-base_recalibration",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/initial/tools/gatk/gatk3-base_recalibration_print_reads.cwl",
    "sha": "7aca0c77bbf88aeb2f0914cd157007797feec730",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/initial/tools/gatk/gatk3-base_recalibration_print_reads.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  sbg: 'https://www.sevenbridges.com/'\nid: gatk3_base_recalibration_print_reads\nbaseCommand:\n  - gatk\n  - '-T'\n  - PrintReads\ninputs:\n  - id: reference_sequence\n    type: File\n    inputBinding:\n      position: 1\n      prefix: '-R'\n    secondaryFiles:\n      - .fai\n      - ^.dict\n  - id: input\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 2\n      prefix: '-I'\n    secondaryFiles:\n      - ^.bai\n  - id: output_filename\n    type: string\n    inputBinding:\n      position: 3\n      prefix: '-o'\n  - id: br_model\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 4\n      prefix: '-BQSR'\noutputs:\n  - id: recalibrated_bam\n    type: File\n    outputBinding:\n      glob: $(inputs.output_filename)\nlabel: gatk3-base_recalibration_print_reads\narguments:\n  - position: 0\n    prefix: '-dt'\n    valueFrom: NONE\nrequirements:\n  - class: InlineJavascriptRequirement\n  - $import: gatk3-docker.yml",
    "cwl_class": "CommandLineTool",
    "cwl_id": "gatk3_base_recalibration_print_reads",
    "cwl_inputs": "[{'id': 'reference_sequence', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-R'}, 'secondaryFiles': ['.fai', '^.dict']}, {'id': 'input', 'type': ['File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'position': 2, 'prefix': '-I'}, 'secondaryFiles': ['^.bai']}, {'id': 'output_filename', 'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-o'}}, {'id': 'br_model', 'type': ['File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'position': 4, 'prefix': '-BQSR'}}]",
    "cwl_outputs": "[{'id': 'recalibrated_bam', 'type': 'File', 'outputBinding': {'glob': '$(inputs.output_filename)'}}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', '-T', 'PrintReads']",
    "cwl_arguments": "[{'position': 0, 'prefix': '-dt', 'valueFrom': 'NONE'}]",
    "cwl_$namespaces": "{'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk3-base_recalibration_print_reads",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/initial/tools/gatk/gatk3-haplotypecaller.cwl",
    "sha": "45ce35c7652f3ab57a589aab4095864f5e2cdf31",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/initial/tools/gatk/gatk3-haplotypecaller.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  sbg: 'https://www.sevenbridges.com/'\nid: gatk3_haplotypecaller\nbaseCommand:\n  - gatk\n  - '-T'\n  - HaplotypeCaller\ninputs:\n  - id: reference_sequence\n    type: File\n    inputBinding:\n      position: 1\n      prefix: '-R'\n    secondaryFiles:\n      - .fai\n      - ^.dict\n  - id: input\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 2\n      prefix: '-I'\n    secondaryFiles:\n      - .bai\n  - id: chromosome\n    type: string\n    inputBinding:\n      position: 3\n      prefix: '-L'\n  - id: output_filename\n    type: string\n    inputBinding:\n      position: 4\n      prefix: '-o'\n#  - 'sbg:toolDefaultValue': '2'\n#    id: ploidy\n#    type: int?\n#    inputBinding:\n#      position: 4\n#      prefix: '-ploidy'\noutputs:\n  - id: br_model\n    type: File\n    outputBinding:\n      glob: $(inputs.output_filename)\n    secondaryFiles:\n      - .tbi\nlabel: gatk3-haplotypecaller\narguments:\n  - position: 0\n    prefix: '-dt'\n    valueFrom: NONE\n  - position: 0\n    prefix: '-rf'\n    valueFrom: BadCigar\n  - position: 0\n    prefix: '-ERC'\n    valueFrom: GVCF\n  - position: 0\n    prefix: ''\n    valueFrom: '--never_trim_vcf_format_field'\nrequirements:\n  - class: InlineJavascriptRequirement\n  - $import: gatk3-docker.yml\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "gatk3_haplotypecaller",
    "cwl_inputs": "[{'id': 'reference_sequence', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-R'}, 'secondaryFiles': ['.fai', '^.dict']}, {'id': 'input', 'type': ['File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'position': 2, 'prefix': '-I'}, 'secondaryFiles': ['.bai']}, {'id': 'chromosome', 'type': 'string', 'inputBinding': {'position': 3, 'prefix': '-L'}}, {'id': 'output_filename', 'type': 'string', 'inputBinding': {'position': 4, 'prefix': '-o'}}]",
    "cwl_outputs": "[{'id': 'br_model', 'type': 'File', 'outputBinding': {'glob': '$(inputs.output_filename)'}, 'secondaryFiles': ['.tbi']}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', '-T', 'HaplotypeCaller']",
    "cwl_arguments": "[{'position': 0, 'prefix': '-dt', 'valueFrom': 'NONE'}, {'position': 0, 'prefix': '-rf', 'valueFrom': 'BadCigar'}, {'position': 0, 'prefix': '-ERC', 'valueFrom': 'GVCF'}, {'position': 0, 'prefix': '', 'valueFrom': '--never_trim_vcf_format_field'}]",
    "cwl_$namespaces": "{'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "gatk3-haplotypecaller",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cwl-workflows/initial/tools/gatk/gatk3-ir.cwl",
    "sha": "f1c465fde7d2de9f8f507c5c48730890a3c08af7",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/initial/tools/gatk/gatk3-ir.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  sbg: 'https://www.sevenbridges.com/'\nid: ir\nbaseCommand:\n  - gatk\n  - '-T'\n  - IndelRealigner\ninputs:\n  - id: input\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 2\n      prefix: '-I'\n  - id: rtc_intervals\n    type: File\n    inputBinding:\n      position: 3\n      prefix: '-targetIntervals'\n  - id: reference_genome\n    type: File\n    inputBinding:\n      position: 1\n      prefix: '-R'\n  - id: realigned_bam_name\n    type: File?\n    inputBinding:\n      position: 3\n      prefix: '-O'\noutputs:\n  - id: realigned_bam\n    type: File\n    secondaryFiles:\n      - ^.bai\n\nlabel: ir\narguments:\n  - position: 5\n    prefix: '-dt'\n    valueFrom: 'NONE'\n  - position: 6\n    prefix: '-maxReadsForRealignment'\n    valueFrom: '200000'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "ir",
    "cwl_inputs": "[{'id': 'input', 'type': ['File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'position': 2, 'prefix': '-I'}}, {'id': 'rtc_intervals', 'type': 'File', 'inputBinding': {'position': 3, 'prefix': '-targetIntervals'}}, {'id': 'reference_genome', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-R'}}, {'id': 'realigned_bam_name', 'type': 'File?', 'inputBinding': {'position': 3, 'prefix': '-O'}}]",
    "cwl_outputs": "[{'id': 'realigned_bam', 'type': 'File', 'secondaryFiles': ['^.bai']}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', '-T', 'IndelRealigner']",
    "cwl_arguments": "[{'position': 5, 'prefix': '-dt', 'valueFrom': 'NONE'}, {'position': 6, 'prefix': '-maxReadsForRealignment', 'valueFrom': '200000'}]",
    "cwl_$namespaces": "{'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "ir",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "cwl-workflows/initial/tools/gatk/gatk3-rtc.cwl",
    "sha": "4972e18642a1a3874e1db99a795b383520290375",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/initial/tools/gatk/gatk3-rtc.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  sbg: 'https://www.sevenbridges.com/'\nid: rtc\nbaseCommand:\n  - gatk\n  - '-T'\n  - RealignerTargetCreator\ninputs:\n  - id: input\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 2\n      prefix: '-I'\n  - id: rtc_intervals_name\n    type: File\n    inputBinding:\n      position: 3\n      prefix: '-O'\n  - id: reference_genome\n    type: File\n    inputBinding:\n      position: 1\n      prefix: '-R'\n  - id: known_indels\n    type:\n      - 'null'\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 4\n      prefix: '--known'\noutputs:\n  - id: rtc_intervals_file\n    type: File?\nlabel: rtc\narguments:\n  - position: 5\n    prefix: '-dt'\n    valueFrom: NONE\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "rtc",
    "cwl_inputs": "[{'id': 'input', 'type': ['File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'position': 2, 'prefix': '-I'}}, {'id': 'rtc_intervals_name', 'type': 'File', 'inputBinding': {'position': 3, 'prefix': '-O'}}, {'id': 'reference_genome', 'type': 'File', 'inputBinding': {'position': 1, 'prefix': '-R'}}, {'id': 'known_indels', 'type': ['null', 'File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'position': 4, 'prefix': '--known'}}]",
    "cwl_outputs": "[{'id': 'rtc_intervals_file', 'type': 'File?'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', '-T', 'RealignerTargetCreator']",
    "cwl_arguments": "[{'position': 5, 'prefix': '-dt', 'valueFrom': 'NONE'}]",
    "cwl_$namespaces": "{'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "rtc",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "cwl-workflows/initial/tools/picard/picard-v.2.18.25-markduplicates.cwl",
    "sha": "37a6681c0330d25e3c56f39e6a4163fc352642f1",
    "source": "https://github.com/inab/Wetlab2Variations/blob/master/cwl-workflows/initial/tools/picard/picard-v.2.18.25-markduplicates.cwl",
    "content": "class: CommandLineTool\ncwlVersion: v1.0\n$namespaces:\n  sbg: 'https://www.sevenbridges.com/'\nid: picard_markduplicates\nbaseCommand:\n  - picard\n  - MarkDuplicates\ninputs:\n  - id: input\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 2\n      prefix: INPUT=\n      separate: false\n    secondaryFiles:\n      - ^.bai\n  - id: metrics_file\n    type: string\n    inputBinding:\n      position: 1\n      prefix: METRICS_FILE=\n      separate: false\n      valueFrom: $(inputs.sample).markduplicates.metrics\n  - 'sbg:toolDefaultValue': $(inputs.sample).md.bam\n    id: md_out\n    type: string\n    inputBinding:\n      position: 3\n      prefix: OUTPUT=\n      separate: false\n      valueFrom: $(inputs.sample).md.bam\n    secondaryFiles:\n      - .bai\n  - id: sample\n    type: string\noutputs:\n  - id: md_bam\n    type: File\n    outputBinding:\n      glob: $(inputs.md_out)\n    secondaryFiles:\n      - ^.bai\n  - id: output_metrics\n    type: File\n    outputBinding:\n      glob: $(inputs.metrics_file)\nlabel: picard-MD\narguments:\n  - position: 0\n    prefix: OPTICAL_DUPLICATE_PIXEL_DISTANCE=\n    valueFrom: '100'\n  - position: 0\n    prefix: TAGGING_POLICY=\n    valueFrom: All\n  - position: 0\n    prefix: CREATE_INDEX=\n    valueFrom: 'true'\n  - position: 0\n    prefix: REMOVE_DUPLICATES=\n    valueFrom: 'true'\nhints:\n  - class: DockerRequirement\n    dockerPull: 'cnag/picard:2.18.25'\nrequirements:\n  - class: InlineJavascriptRequirement\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "picard_markduplicates",
    "cwl_inputs": "[{'id': 'input', 'type': ['File', {'type': 'array', 'items': 'File'}], 'inputBinding': {'position': 2, 'prefix': 'INPUT=', 'separate': False}, 'secondaryFiles': ['^.bai']}, {'id': 'metrics_file', 'type': 'string', 'inputBinding': {'position': 1, 'prefix': 'METRICS_FILE=', 'separate': False, 'valueFrom': '$(inputs.sample).markduplicates.metrics'}}, {'sbg:toolDefaultValue': '$(inputs.sample).md.bam', 'id': 'md_out', 'type': 'string', 'inputBinding': {'position': 3, 'prefix': 'OUTPUT=', 'separate': False, 'valueFrom': '$(inputs.sample).md.bam'}, 'secondaryFiles': ['.bai']}, {'id': 'sample', 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'md_bam', 'type': 'File', 'outputBinding': {'glob': '$(inputs.md_out)'}, 'secondaryFiles': ['^.bai']}, {'id': 'output_metrics', 'type': 'File', 'outputBinding': {'glob': '$(inputs.metrics_file)'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'cnag/picard:2.18.25'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'MarkDuplicates']",
    "cwl_arguments": "[{'position': 0, 'prefix': 'OPTICAL_DUPLICATE_PIXEL_DISTANCE=', 'valueFrom': '100'}, {'position': 0, 'prefix': 'TAGGING_POLICY=', 'valueFrom': 'All'}, {'position': 0, 'prefix': 'CREATE_INDEX=', 'valueFrom': 'true'}, {'position': 0, 'prefix': 'REMOVE_DUPLICATES=', 'valueFrom': 'true'}]",
    "cwl_$namespaces": "{'sbg': 'https://www.sevenbridges.com/'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "picard-MD",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "test/fixtures/files/workflows/rp2-to-rp2path-packed.cwl",
    "sha": "5b20a179cc9e0966e59f4c4e63dcf825f27abee0",
    "source": "https://github.com/seek4science/seek/blob/main/test/fixtures/files/workflows/rp2-to-rp2path-packed.cwl",
    "content": "{\n    \"$graph\": [\n        {\n            \"class\": \"CommandLineTool\",\n            \"baseCommand\": null,\n            \"arguments\": [\n                \"output.dir=$(runtime.outdir)\"\n            ],\n            \"hints\": [\n                {\n                    \"dockerPull\": \"ibisba/retropath2:latest\",\n                    \"class\": \"DockerRequirement\"\n                }\n            ],\n            \"inputs\": [\n                {\n                    \"type\": [\n                        \"null\",\n                        \"File\"\n                    ],\n                    \"inputBinding\": {\n                        \"prefix\": \"input.cofsfile=\",\n                        \"separate\": false\n                    },\n                    \"id\": \"#tool.cwl/input.cofsfile\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"int\"\n                    ],\n                    \"inputBinding\": {\n                        \"prefix\": \"input.dmax=\",\n                        \"separate\": false\n                    },\n                    \"id\": \"#tool.cwl/input.dmax\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"int\"\n                    ],\n                    \"inputBinding\": {\n                        \"prefix\": \"input.dmin=\",\n                        \"separate\": false\n                    },\n                    \"id\": \"#tool.cwl/input.dmin\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"int\"\n                    ],\n                    \"inputBinding\": {\n                        \"prefix\": \"input.max-steps=\",\n                        \"separate\": false\n                    },\n                    \"id\": \"#tool.cwl/input.max-steps\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"int\"\n                    ],\n                    \"inputBinding\": {\n                        \"prefix\": \"input.mwmax-cof=\",\n                        \"separate\": false\n                    },\n                    \"id\": \"#tool.cwl/input.mwmax-cof\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"int\"\n                    ],\n                    \"inputBinding\": {\n                        \"prefix\": \"input.mwmax-source=\",\n                        \"separate\": false\n                    },\n                    \"id\": \"#tool.cwl/input.mwmax-source\"\n                },\n                {\n                    \"type\": \"File\",\n                    \"inputBinding\": {\n                        \"prefix\": \"input.rulesfile=\",\n                        \"separate\": false\n                    },\n                    \"id\": \"#tool.cwl/input.rulesfile\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"File\"\n                    ],\n                    \"inputBinding\": {\n                        \"prefix\": \"input.sinkfile=\",\n                        \"separate\": false\n                    },\n                    \"id\": \"#tool.cwl/input.sinkfile\"\n                },\n                {\n                    \"type\": \"File\",\n                    \"inputBinding\": {\n                        \"prefix\": \"input.sourcefile=\",\n                        \"separate\": false\n                    },\n                    \"id\": \"#tool.cwl/input.sourcefile\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"string\"\n                    ],\n                    \"inputBinding\": {\n                        \"prefix\": \"input.std_mode=\",\n                        \"separate\": false\n                    },\n                    \"id\": \"#tool.cwl/input.std_mode\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"string\"\n                    ],\n                    \"inputBinding\": {\n                        \"prefix\": \"input.stereo_mode=\",\n                        \"separate\": false\n                    },\n                    \"id\": \"#tool.cwl/input.stereo_mode\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"int\"\n                    ],\n                    \"inputBinding\": {\n                        \"prefix\": \"input.topx=\",\n                        \"separate\": false\n                    },\n                    \"id\": \"#tool.cwl/input.topx\"\n                }\n            ],\n            \"outputs\": [\n                {\n                    \"type\": \"File\",\n                    \"outputBinding\": {\n                        \"glob\": \"results.csv\"\n                    },\n                    \"id\": \"#tool.cwl/solutionfile\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"File\"\n                    ],\n                    \"outputBinding\": {\n                        \"glob\": \"source-in-sink.csv\"\n                    },\n                    \"id\": \"#tool.cwl/sourceinsinkfile\"\n                },\n                {\n                    \"type\": \"File\",\n                    \"id\": \"#tool.cwl/stdout\",\n                    \"outputBinding\": {\n                        \"glob\": \"output.txt\"\n                    }\n                }\n            ],\n            \"stdout\": \"output.txt\",\n            \"id\": \"#tool.cwl\"\n        },\n        {\n            \"class\": \"CommandLineTool\",\n            \"baseCommand\": [\n                \"RP2paths.py\",\n                \"all\"\n            ],\n            \"hints\": [\n                {\n                    \"dockerPull\": \"ibisba/rp2paths\",\n                    \"class\": \"DockerRequirement\"\n                },\n                {\n                    \"packages\": [\n                        {\n                            \"version\": [\n                                \"1.0.0\",\n                                \"1.0.1\",\n                                \"1.0.2\"\n                            ],\n                            \"package\": \"rp2paths\"\n                        }\n                    ],\n                    \"class\": \"SoftwareRequirement\"\n                }\n            ],\n            \"doc\": \"Extract paths from RetroPath 2.0 output\\n\",\n            \"inputs\": [\n                {\n                    \"type\": [\n                        \"null\",\n                        \"File\"\n                    ],\n                    \"doc\": \"File with name of compounds.\",\n                    \"inputBinding\": {\n                        \"prefix\": \"--cmpdnamefile\"\n                    },\n                    \"id\": \"#tool.cwl_2/cmpdnamefile\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"File\"\n                    ],\n                    \"doc\": \"User-defined sink file, i.e. file listing compounds to consider as sink compounds.  Sink compounds should be provided by their IDs, as used in the reaction.erxn file.  If no file is provided then the sink file generated during the \\\"convert\\\" task is  used (default behavior). If a file is provided then **only** comppounds listed  in this file will be used.\\n\",\n                    \"inputBinding\": {\n                        \"prefix\": \"--customsinkfile\"\n                    },\n                    \"id\": \"#tool.cwl_2/customsinkfile\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"File\"\n                    ],\n                    \"doc\": \"Binary that enumerate the EFMs\",\n                    \"inputBinding\": {\n                        \"prefix\": \"--ebin\"\n                    },\n                    \"id\": \"#tool.cwl_2/ebin\"\n                },\n                {\n                    \"type\": \"File\",\n                    \"doc\": \"RetroPath file as outputed by the RetroPath2.0 workflow\",\n                    \"inputBinding\": {\n                        \"position\": 1\n                    },\n                    \"id\": \"#tool.cwl_2/infile\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"int\"\n                    ],\n                    \"default\": 150,\n                    \"doc\": \"cutoff on the maximum number of pathways\",\n                    \"inputBinding\": {\n                        \"prefix\": \"--maxpaths\"\n                    },\n                    \"id\": \"#tool.cwl_2/maxpaths\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"int\"\n                    ],\n                    \"default\": 10,\n                    \"doc\": \"cutoff on the maximum number of steps in a pathways\",\n                    \"inputBinding\": {\n                        \"prefix\": \"--maxsteps\"\n                    },\n                    \"id\": \"#tool.cwl_2/maxsteps\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"boolean\"\n                    ],\n                    \"default\": false,\n                    \"doc\": \"Use minimal depth scope, i.e. stop the scope computation as as soon an a first  minimal path linking target to sink is found (default - False).\\n\",\n                    \"inputBinding\": {\n                        \"prefix\": \"--minDepth\"\n                    },\n                    \"id\": \"#tool.cwl_2/minDepth\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        {\n                            \"type\": \"array\",\n                            \"items\": \"string\"\n                        }\n                    ],\n                    \"doc\": \"List of compounds IDs. If specifed, paths making use of  one of these compounds as unique initial substrate will  be filtered out\\n\",\n                    \"inputBinding\": {\n                        \"prefix\": \"--notPathsStartingBy\"\n                    },\n                    \"id\": \"#tool.cwl_2/notPathsStartingBy\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        {\n                            \"type\": \"array\",\n                            \"items\": \"string\"\n                        }\n                    ],\n                    \"doc\": \"List of compounds IDs to consider. If specified, only paths making use of  at least one of these compounds as initial substrate (first step of a pathway) are kept.\\n\",\n                    \"inputBinding\": {\n                        \"prefix\": \"--onlyPathsStartingBy\"\n                    },\n                    \"id\": \"#tool.cwl_2/onlyPathsStartingBy\"\n                },\n                {\n                    \"type\": \"boolean\",\n                    \"doc\": \"Consider reactions in the reverse direction\",\n                    \"inputBinding\": {\n                        \"prefix\": \"--reverse\"\n                    },\n                    \"id\": \"#tool.cwl_2/reverse\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"string\"\n                    ],\n                    \"doc\": \"Target compound internal ID. This internal ID specifies which compound  should be considered as the targeted compound. The default behavior is  to consider as the target the first compound used as a source compound  in a first iteration of a metabolic exploration. Let this value as it  is except if you know what you are doing.\\n\",\n                    \"inputBinding\": {\n                        \"prefix\": \"--target\"\n                    },\n                    \"id\": \"#tool.cwl_2/target\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"int\"\n                    ],\n                    \"default\": 900,\n                    \"doc\": \"Timeout before killing a process (in s)\",\n                    \"inputBinding\": {\n                        \"prefix\": \"--timeout\"\n                    },\n                    \"id\": \"#tool.cwl_2/timeout\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"boolean\"\n                    ],\n                    \"default\": false,\n                    \"doc\": \"Unfold pathways based on equivalencie of compounds (can lead to combinatorial explosion).\",\n                    \"inputBinding\": {\n                        \"prefix\": \"--unfold_compounds\"\n                    },\n                    \"id\": \"#tool.cwl_2/unfold_compounds\"\n                }\n            ],\n            \"outputs\": [\n                {\n                    \"type\": \"File\",\n                    \"outputBinding\": {\n                        \"glob\": \"compounds.txt\"\n                    },\n                    \"doc\": \"A list of compounds\\n\",\n                    \"id\": \"#tool.cwl_2/compounds\"\n                },\n                {\n                    \"type\": \"File\",\n                    \"outputBinding\": {\n                        \"glob\": \"reactions.erxn\"\n                    },\n                    \"doc\": \"A list of reactions  # which format?\\n\",\n                    \"id\": \"#tool.cwl_2/reactions\"\n                },\n                {\n                    \"type\": \"File\",\n                    \"outputBinding\": {\n                        \"glob\": \"sinks.txt\"\n                    },\n                    \"doc\": \"A list of sinks\\n\",\n                    \"id\": \"#tool.cwl_2/sinks\"\n                }\n            ],\n            \"id\": \"#tool.cwl_2\"\n        },\n        {\n            \"class\": \"Workflow\",\n            \"inputs\": [\n                {\n                    \"type\": [\n                        \"null\",\n                        \"int\"\n                    ],\n                    \"id\": \"#main/max-steps\"\n                },\n                {\n                    \"type\": [\n                        \"null\",\n                        \"boolean\"\n                    ],\n                    \"id\": \"#main/reverse\"\n                },\n                {\n                    \"type\": \"File\",\n                    \"id\": \"#main/rulesfile\"\n                },\n                {\n                    \"type\": \"File\",\n                    \"id\": \"#main/sinkfile\"\n                },\n                {\n                    \"type\": \"File\",\n                    \"id\": \"#main/sourcefile\"\n                }\n            ],\n            \"outputs\": [\n                {\n                    \"type\": \"File\",\n                    \"outputSource\": \"#main/rp2paths/compounds\",\n                    \"id\": \"#main/compounds\"\n                },\n                {\n                    \"type\": \"File\",\n                    \"outputSource\": \"#main/rp2paths/reactions\",\n                    \"id\": \"#main/reactions\"\n                },\n                {\n                    \"type\": \"File\",\n                    \"outputSource\": \"#main/rp2paths/sinks\",\n                    \"id\": \"#main/sinks\"\n                }\n            ],\n            \"steps\": [\n                {\n                    \"run\": \"#tool.cwl\",\n                    \"in\": [\n                        {\n                            \"source\": \"#main/max-steps\",\n                            \"id\": \"#main/rp2/input.max-steps\"\n                        },\n                        {\n                            \"source\": \"#main/rulesfile\",\n                            \"id\": \"#main/rp2/input.rulesfile\"\n                        },\n                        {\n                            \"source\": \"#main/sinkfile\",\n                            \"id\": \"#main/rp2/input.sinkfile\"\n                        },\n                        {\n                            \"source\": \"#main/sourcefile\",\n                            \"id\": \"#main/rp2/input.sourcefile\"\n                        }\n                    ],\n                    \"out\": [\n                        \"#main/rp2/solutionfile\"\n                    ],\n                    \"id\": \"#main/rp2\"\n                },\n                {\n                    \"run\": \"#tool.cwl_2\",\n                    \"in\": [\n                        {\n                            \"source\": \"#main/rp2/solutionfile\",\n                            \"id\": \"#main/rp2paths/infile\"\n                        },\n                        {\n                            \"source\": \"#main/reverse\",\n                            \"id\": \"#main/rp2paths/reverse\"\n                        }\n                    ],\n                    \"out\": [\n                        \"#main/rp2paths/compounds\",\n                        \"#main/rp2paths/reactions\",\n                        \"#main/rp2paths/sinks\"\n                    ],\n                    \"id\": \"#main/rp2paths\"\n                }\n            ],\n            \"id\": \"#main\"\n        }\n    ],\n    \"cwlVersion\": \"v1.0\"\n}",
    "cwl_class": null,
    "cwl_id": null,
    "cwl_inputs": null,
    "cwl_outputs": null,
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null,
    "cwl_$graph": "[{'class': 'CommandLineTool', 'baseCommand': None, 'arguments': ['output.dir=$(runtime.outdir)'], 'hints': [{'dockerPull': 'ibisba/retropath2:latest', 'class': 'DockerRequirement'}], 'inputs': [{'type': ['null', 'File'], 'inputBinding': {'prefix': 'input.cofsfile=', 'separate': False}, 'id': '#tool.cwl/input.cofsfile'}, {'type': ['null', 'int'], 'inputBinding': {'prefix': 'input.dmax=', 'separate': False}, 'id': '#tool.cwl/input.dmax'}, {'type': ['null', 'int'], 'inputBinding': {'prefix': 'input.dmin=', 'separate': False}, 'id': '#tool.cwl/input.dmin'}, {'type': ['null', 'int'], 'inputBinding': {'prefix': 'input.max-steps=', 'separate': False}, 'id': '#tool.cwl/input.max-steps'}, {'type': ['null', 'int'], 'inputBinding': {'prefix': 'input.mwmax-cof=', 'separate': False}, 'id': '#tool.cwl/input.mwmax-cof'}, {'type': ['null', 'int'], 'inputBinding': {'prefix': 'input.mwmax-source=', 'separate': False}, 'id': '#tool.cwl/input.mwmax-source'}, {'type': 'File', 'inputBinding': {'prefix': 'input.rulesfile=', 'separate': False}, 'id': '#tool.cwl/input.rulesfile'}, {'type': ['null', 'File'], 'inputBinding': {'prefix': 'input.sinkfile=', 'separate': False}, 'id': '#tool.cwl/input.sinkfile'}, {'type': 'File', 'inputBinding': {'prefix': 'input.sourcefile=', 'separate': False}, 'id': '#tool.cwl/input.sourcefile'}, {'type': ['null', 'string'], 'inputBinding': {'prefix': 'input.std_mode=', 'separate': False}, 'id': '#tool.cwl/input.std_mode'}, {'type': ['null', 'string'], 'inputBinding': {'prefix': 'input.stereo_mode=', 'separate': False}, 'id': '#tool.cwl/input.stereo_mode'}, {'type': ['null', 'int'], 'inputBinding': {'prefix': 'input.topx=', 'separate': False}, 'id': '#tool.cwl/input.topx'}], 'outputs': [{'type': 'File', 'outputBinding': {'glob': 'results.csv'}, 'id': '#tool.cwl/solutionfile'}, {'type': ['null', 'File'], 'outputBinding': {'glob': 'source-in-sink.csv'}, 'id': '#tool.cwl/sourceinsinkfile'}, {'type': 'File', 'id': '#tool.cwl/stdout', 'outputBinding': {'glob': 'output.txt'}}], 'stdout': 'output.txt', 'id': '#tool.cwl'}, {'class': 'CommandLineTool', 'baseCommand': ['RP2paths.py', 'all'], 'hints': [{'dockerPull': 'ibisba/rp2paths', 'class': 'DockerRequirement'}, {'packages': [{'version': ['1.0.0', '1.0.1', '1.0.2'], 'package': 'rp2paths'}], 'class': 'SoftwareRequirement'}], 'doc': 'Extract paths from RetroPath 2.0 output\\n', 'inputs': [{'type': ['null', 'File'], 'doc': 'File with name of compounds.', 'inputBinding': {'prefix': '--cmpdnamefile'}, 'id': '#tool.cwl_2/cmpdnamefile'}, {'type': ['null', 'File'], 'doc': 'User-defined sink file, i.e. file listing compounds to consider as sink compounds.  Sink compounds should be provided by their IDs, as used in the reaction.erxn file.  If no file is provided then the sink file generated during the \"convert\" task is  used (default behavior). If a file is provided then **only** comppounds listed  in this file will be used.\\n', 'inputBinding': {'prefix': '--customsinkfile'}, 'id': '#tool.cwl_2/customsinkfile'}, {'type': ['null', 'File'], 'doc': 'Binary that enumerate the EFMs', 'inputBinding': {'prefix': '--ebin'}, 'id': '#tool.cwl_2/ebin'}, {'type': 'File', 'doc': 'RetroPath file as outputed by the RetroPath2.0 workflow', 'inputBinding': {'position': 1}, 'id': '#tool.cwl_2/infile'}, {'type': ['null', 'int'], 'default': 150, 'doc': 'cutoff on the maximum number of pathways', 'inputBinding': {'prefix': '--maxpaths'}, 'id': '#tool.cwl_2/maxpaths'}, {'type': ['null', 'int'], 'default': 10, 'doc': 'cutoff on the maximum number of steps in a pathways', 'inputBinding': {'prefix': '--maxsteps'}, 'id': '#tool.cwl_2/maxsteps'}, {'type': ['null', 'boolean'], 'default': False, 'doc': 'Use minimal depth scope, i.e. stop the scope computation as as soon an a first  minimal path linking target to sink is found (default - False).\\n', 'inputBinding': {'prefix': '--minDepth'}, 'id': '#tool.cwl_2/minDepth'}, {'type': ['null', {'type': 'array', 'items': 'string'}], 'doc': 'List of compounds IDs. If specifed, paths making use of  one of these compounds as unique initial substrate will  be filtered out\\n', 'inputBinding': {'prefix': '--notPathsStartingBy'}, 'id': '#tool.cwl_2/notPathsStartingBy'}, {'type': ['null', {'type': 'array', 'items': 'string'}], 'doc': 'List of compounds IDs to consider. If specified, only paths making use of  at least one of these compounds as initial substrate (first step of a pathway) are kept.\\n', 'inputBinding': {'prefix': '--onlyPathsStartingBy'}, 'id': '#tool.cwl_2/onlyPathsStartingBy'}, {'type': 'boolean', 'doc': 'Consider reactions in the reverse direction', 'inputBinding': {'prefix': '--reverse'}, 'id': '#tool.cwl_2/reverse'}, {'type': ['null', 'string'], 'doc': 'Target compound internal ID. This internal ID specifies which compound  should be considered as the targeted compound. The default behavior is  to consider as the target the first compound used as a source compound  in a first iteration of a metabolic exploration. Let this value as it  is except if you know what you are doing.\\n', 'inputBinding': {'prefix': '--target'}, 'id': '#tool.cwl_2/target'}, {'type': ['null', 'int'], 'default': 900, 'doc': 'Timeout before killing a process (in s)', 'inputBinding': {'prefix': '--timeout'}, 'id': '#tool.cwl_2/timeout'}, {'type': ['null', 'boolean'], 'default': False, 'doc': 'Unfold pathways based on equivalencie of compounds (can lead to combinatorial explosion).', 'inputBinding': {'prefix': '--unfold_compounds'}, 'id': '#tool.cwl_2/unfold_compounds'}], 'outputs': [{'type': 'File', 'outputBinding': {'glob': 'compounds.txt'}, 'doc': 'A list of compounds\\n', 'id': '#tool.cwl_2/compounds'}, {'type': 'File', 'outputBinding': {'glob': 'reactions.erxn'}, 'doc': 'A list of reactions  # which format?\\n', 'id': '#tool.cwl_2/reactions'}, {'type': 'File', 'outputBinding': {'glob': 'sinks.txt'}, 'doc': 'A list of sinks\\n', 'id': '#tool.cwl_2/sinks'}], 'id': '#tool.cwl_2'}, {'class': 'Workflow', 'inputs': [{'type': ['null', 'int'], 'id': '#main/max-steps'}, {'type': ['null', 'boolean'], 'id': '#main/reverse'}, {'type': 'File', 'id': '#main/rulesfile'}, {'type': 'File', 'id': '#main/sinkfile'}, {'type': 'File', 'id': '#main/sourcefile'}], 'outputs': [{'type': 'File', 'outputSource': '#main/rp2paths/compounds', 'id': '#main/compounds'}, {'type': 'File', 'outputSource': '#main/rp2paths/reactions', 'id': '#main/reactions'}, {'type': 'File', 'outputSource': '#main/rp2paths/sinks', 'id': '#main/sinks'}], 'steps': [{'run': '#tool.cwl', 'in': [{'source': '#main/max-steps', 'id': '#main/rp2/input.max-steps'}, {'source': '#main/rulesfile', 'id': '#main/rp2/input.rulesfile'}, {'source': '#main/sinkfile', 'id': '#main/rp2/input.sinkfile'}, {'source': '#main/sourcefile', 'id': '#main/rp2/input.sourcefile'}], 'out': ['#main/rp2/solutionfile'], 'id': '#main/rp2'}, {'run': '#tool.cwl_2', 'in': [{'source': '#main/rp2/solutionfile', 'id': '#main/rp2paths/infile'}, {'source': '#main/reverse', 'id': '#main/rp2paths/reverse'}], 'out': ['#main/rp2paths/compounds', '#main/rp2paths/reactions', '#main/rp2paths/sinks'], 'id': '#main/rp2paths'}], 'id': '#main'}]"
  },
  {
    "path": "test/fixtures/files/workflows/rp2/tools/RetroPath2-cwl/tool.cwl",
    "sha": "52a84657a445a71a22cf55536dea1e6606564159",
    "source": "https://github.com/seek4science/seek/blob/main/test/fixtures/files/workflows/rp2/tools/RetroPath2-cwl/tool.cwl",
    "content": "#!/usr/bin/env cwl-runner\n\ncwlVersion: v1.0\nclass: CommandLineTool\nbaseCommand:\narguments: [\"output.dir=$(runtime.outdir)\"]\nhints:\n  DockerRequirement:\n    dockerPull: ibisba/retropath2:latest\ninputs:\n  input.rulesfile:\n    type: File\n    inputBinding:\n      prefix: input.rulesfile=\n      separate: false\n  input.sourcefile:\n    type: File\n    inputBinding:\n      prefix: input.sourcefile=\n      separate: false\n  input.sinkfile:\n    type: File?\n    inputBinding:\n      prefix: input.sinkfile=\n      separate: false\n  input.cofsfile:\n    type: File?\n    inputBinding:\n      prefix: input.cofsfile=\n      separate: false\n\n  input.topx:\n    type: int?\n    inputBinding:\n      prefix: input.topx=\n      separate: false\n  input.max-steps:\n    type: int?\n    inputBinding:\n      prefix: input.max-steps=\n      separate: false\n  input.dmin:\n    type: int?\n    inputBinding:\n      prefix: input.dmin=\n      separate: false\n  input.dmax:\n    type: int?\n    inputBinding:\n      prefix: input.dmax=\n      separate: false\n  input.mwmax-source:\n    type: int?\n    inputBinding:\n      prefix: input.mwmax-source=\n      separate: false\n  input.mwmax-cof:\n    type: int?\n    inputBinding:\n      prefix: input.mwmax-cof=\n      separate: false\n  input.stereo_mode:\n    type: string?\n    inputBinding:\n      prefix: input.stereo_mode=\n      separate: false\n  input.std_mode:\n    type: string?\n    inputBinding:\n      prefix: input.std_mode=\n      separate: false\n#dev.prefilter-rm-brakets int\n#dev.use-py-fire int\n#dev.py-fire-timeout int\n#dev.source-chunk-size int\n#dev.py-fire-procs int\n#dev.scope-filter-bootstraps int\n#dev.scope-filter-stepback int\n#dev.scope-filter-samestep int\n\noutputs:\n  solutionfile:\n    type: File\n    outputBinding:\n      glob: results.csv\n  sourceinsinkfile:\n    type: File?\n    outputBinding:\n      glob: source-in-sink.csv\n  stdout:\n    type: stdout\n\nstdout: output.txt\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'input.rulesfile': {'type': 'File', 'inputBinding': {'prefix': 'input.rulesfile=', 'separate': False}}, 'input.sourcefile': {'type': 'File', 'inputBinding': {'prefix': 'input.sourcefile=', 'separate': False}}, 'input.sinkfile': {'type': 'File?', 'inputBinding': {'prefix': 'input.sinkfile=', 'separate': False}}, 'input.cofsfile': {'type': 'File?', 'inputBinding': {'prefix': 'input.cofsfile=', 'separate': False}}, 'input.topx': {'type': 'int?', 'inputBinding': {'prefix': 'input.topx=', 'separate': False}}, 'input.max-steps': {'type': 'int?', 'inputBinding': {'prefix': 'input.max-steps=', 'separate': False}}, 'input.dmin': {'type': 'int?', 'inputBinding': {'prefix': 'input.dmin=', 'separate': False}}, 'input.dmax': {'type': 'int?', 'inputBinding': {'prefix': 'input.dmax=', 'separate': False}}, 'input.mwmax-source': {'type': 'int?', 'inputBinding': {'prefix': 'input.mwmax-source=', 'separate': False}}, 'input.mwmax-cof': {'type': 'int?', 'inputBinding': {'prefix': 'input.mwmax-cof=', 'separate': False}}, 'input.stereo_mode': {'type': 'string?', 'inputBinding': {'prefix': 'input.stereo_mode=', 'separate': False}}, 'input.std_mode': {'type': 'string?', 'inputBinding': {'prefix': 'input.std_mode=', 'separate': False}}}",
    "cwl_outputs": "{'solutionfile': {'type': 'File', 'outputBinding': {'glob': 'results.csv'}}, 'sourceinsinkfile': {'type': 'File?', 'outputBinding': {'glob': 'source-in-sink.csv'}}, 'stdout': {'type': 'stdout'}}",
    "cwl_hints": "{'DockerRequirement': {'dockerPull': 'ibisba/retropath2:latest'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "None",
    "cwl_arguments": "['output.dir=$(runtime.outdir)']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "output.txt",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "test/fixtures/files/workflows/rp2/tools/rp2paths-cwl/tool.cwl",
    "sha": "7b971841baf43008080000d7555bdd374e87f9e1",
    "source": "https://github.com/seek4science/seek/blob/main/test/fixtures/files/workflows/rp2/tools/rp2paths-cwl/tool.cwl",
    "content": "#!/usr/bin/env cwl-runner\n# This tool description was generated automatically by argparse2tool ver. 0.4.5\n# To generate again: $ RP2paths.py --generate_cwl_tool\n# Help: $ RP2paths.py --help_arg2cwl\n\ncwlVersion: v1.0\n\nclass: CommandLineTool\nbaseCommand: ['RP2paths.py', 'all']\n\nhints:\n  SoftwareRequirement:\n    packages:\n      rp2paths:\n        version: [ \"1.0.0\", \"1.0.1\", \"1.0.2\" ]\n  DockerRequirement:\n    dockerPull: ibisba/rp2paths\n\ndoc: |\n  Extract paths from RetroPath 2.0 output\n\ninputs:\n  \n  infile:\n    type: File\n    doc: RetroPath file as outputed by the RetroPath2.0 workflow\n    inputBinding:\n      position: 1\n\n#  outdir:\n#    type: [\"null\", string]\n#    default: /home/stain/src/rp2paths/\n#    doc: Folder to put all results\n#    inputBinding:\n#      prefix: --outdir \n\n  # TODO: Why is this boolean inverted? Rename to \"no-reverse\"?\n  reverse:\n    type: boolean\n    #default: True\n    doc: Consider reactions in the reverse direction\n    inputBinding:\n      prefix: --reverse\n\n  minDepth:\n    type: boolean?\n    default: False\n    doc: >\n      Use minimal depth scope, i.e. stop the scope computation as as soon an a first \n      minimal path linking target to sink is found (default - False).\n    inputBinding:\n      prefix: --minDepth \n\n  customsinkfile:\n    type: File?\n    doc: >\n      User-defined sink file, i.e. file listing compounds to consider as sink compounds. \n      Sink compounds should be provided by their IDs, as used in the reaction.erxn file. \n      If no file is provided then the sink file generated during the \"convert\" task is \n      used (default behavior). If a file is provided then **only** comppounds listed \n      in this file will be used.\n    inputBinding:\n      prefix: --customsinkfile \n\n  ebin:\n    type: File?\n    doc: Binary that enumerate the EFMs\n    inputBinding:\n      prefix: --ebin \n\n  timeout:\n    type: int?\n    default: 900\n    doc: Timeout before killing a process (in s)\n    inputBinding:\n      prefix: --timeout \n\n  maxsteps:\n    type: int?\n    default: 10\n    doc: cutoff on the maximum number of steps in a pathways\n    inputBinding:\n      prefix: --maxsteps \n\n  maxpaths:\n    type: int?\n    default: 150\n    doc: cutoff on the maximum number of pathways\n    inputBinding:\n      prefix: --maxpaths \n\n  unfold_compounds:\n    type: boolean?\n    default: False\n    doc: Unfold pathways based on equivalencie of compounds (can lead to combinatorial explosion).\n    inputBinding:\n      prefix: --unfold_compounds \n\n  onlyPathsStartingBy:\n    type: string[]?\n    doc: >\n      List of compounds IDs to consider. If specified, only paths making use of \n      at least one of these compounds as initial substrate (first step of a\n      pathway) are kept.\n    inputBinding:\n      prefix: --onlyPathsStartingBy \n\n  notPathsStartingBy:\n    type: string[]?\n    doc: >\n      List of compounds IDs. If specifed, paths making use of \n      one of these compounds as unique initial substrate will \n      be filtered out\n    inputBinding:\n      prefix: --notPathsStartingBy \n\n  cmpdnamefile:\n    type: File?\n    doc: File with name of compounds.\n    inputBinding:\n      prefix: --cmpdnamefile \n\n  target:\n    type: string?\n    doc: >\n      Target compound internal ID. This internal ID specifies which compound \n      should be considered as the targeted compound. The default behavior is \n      to consider as the target the first compound used as a source compound \n      in a first iteration of a metabolic exploration. Let this value as it \n      is except if you know what you are doing.\n    inputBinding:\n      prefix: --target \n\n\noutputs:\n\n    # From \"convert\"\n\n    compounds:\n      type: File\n      outputBinding:\n        glob: compounds.txt\n      doc: >\n        A list of compounds\n    \n    reactions:\n      type: File\n      outputBinding:\n        glob: reactions.erxn\n      doc: >\n        A list of reactions \n        # which format?\n    \n    sinks:\n      type: File\n      outputBinding:\n        glob: sinks.txt\n      doc: >\n        A list of sinks\n\n    \n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": null,
    "cwl_inputs": "{'infile': {'type': 'File', 'doc': 'RetroPath file as outputed by the RetroPath2.0 workflow', 'inputBinding': {'position': 1}}, 'reverse': {'type': 'boolean', 'doc': 'Consider reactions in the reverse direction', 'inputBinding': {'prefix': '--reverse'}}, 'minDepth': {'type': 'boolean?', 'default': False, 'doc': 'Use minimal depth scope, i.e. stop the scope computation as as soon an a first  minimal path linking target to sink is found (default - False).\\n', 'inputBinding': {'prefix': '--minDepth'}}, 'customsinkfile': {'type': 'File?', 'doc': 'User-defined sink file, i.e. file listing compounds to consider as sink compounds.  Sink compounds should be provided by their IDs, as used in the reaction.erxn file.  If no file is provided then the sink file generated during the \"convert\" task is  used (default behavior). If a file is provided then **only** comppounds listed  in this file will be used.\\n', 'inputBinding': {'prefix': '--customsinkfile'}}, 'ebin': {'type': 'File?', 'doc': 'Binary that enumerate the EFMs', 'inputBinding': {'prefix': '--ebin'}}, 'timeout': {'type': 'int?', 'default': 900, 'doc': 'Timeout before killing a process (in s)', 'inputBinding': {'prefix': '--timeout'}}, 'maxsteps': {'type': 'int?', 'default': 10, 'doc': 'cutoff on the maximum number of steps in a pathways', 'inputBinding': {'prefix': '--maxsteps'}}, 'maxpaths': {'type': 'int?', 'default': 150, 'doc': 'cutoff on the maximum number of pathways', 'inputBinding': {'prefix': '--maxpaths'}}, 'unfold_compounds': {'type': 'boolean?', 'default': False, 'doc': 'Unfold pathways based on equivalencie of compounds (can lead to combinatorial explosion).', 'inputBinding': {'prefix': '--unfold_compounds'}}, 'onlyPathsStartingBy': {'type': 'string[]?', 'doc': 'List of compounds IDs to consider. If specified, only paths making use of  at least one of these compounds as initial substrate (first step of a pathway) are kept.\\n', 'inputBinding': {'prefix': '--onlyPathsStartingBy'}}, 'notPathsStartingBy': {'type': 'string[]?', 'doc': 'List of compounds IDs. If specifed, paths making use of  one of these compounds as unique initial substrate will  be filtered out\\n', 'inputBinding': {'prefix': '--notPathsStartingBy'}}, 'cmpdnamefile': {'type': 'File?', 'doc': 'File with name of compounds.', 'inputBinding': {'prefix': '--cmpdnamefile'}}, 'target': {'type': 'string?', 'doc': 'Target compound internal ID. This internal ID specifies which compound  should be considered as the targeted compound. The default behavior is  to consider as the target the first compound used as a source compound  in a first iteration of a metabolic exploration. Let this value as it  is except if you know what you are doing.\\n', 'inputBinding': {'prefix': '--target'}}}",
    "cwl_outputs": "{'compounds': {'type': 'File', 'outputBinding': {'glob': 'compounds.txt'}, 'doc': 'A list of compounds\\n'}, 'reactions': {'type': 'File', 'outputBinding': {'glob': 'reactions.erxn'}, 'doc': 'A list of reactions  # which format?\\n'}, 'sinks': {'type': 'File', 'outputBinding': {'glob': 'sinks.txt'}, 'doc': 'A list of sinks\\n'}}",
    "cwl_hints": "{'SoftwareRequirement': {'packages': {'rp2paths': {'version': ['1.0.0', '1.0.1', '1.0.2']}}}, 'DockerRequirement': {'dockerPull': 'ibisba/rp2paths'}}",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['RP2paths.py', 'all']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Extract paths from RetroPath 2.0 output\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": null
  },
  {
    "path": "test/fixtures/files/workflows/rp2/workflows/rp2-to-rp2path.cwl",
    "sha": "b47c93f4def870030866a480ba3f07725ad9e072",
    "source": "https://github.com/seek4science/seek/blob/main/test/fixtures/files/workflows/rp2/workflows/rp2-to-rp2path.cwl",
    "content": "#!/usr/bin/env cwl-runner\n\ncwlVersion: v1.0\nclass: Workflow\ninputs:\n  rulesfile: File\n  sourcefile: File\n  sinkfile: File\n  reverse: boolean?\n  max-steps: int?\n\noutputs:\n  compounds:\n    type: File\n    outputSource: rp2paths/compounds\n  reactions:\n    type: File\n    outputSource: rp2paths/reactions\n  sinks:\n    type: File\n    outputSource: rp2paths/sinks\n\nsteps:\n  rp2:\n    run: ../tools/RetroPath2-cwl/tool.cwl\n    in:\n      input.rulesfile: rulesfile\n      input.sourcefile: sourcefile\n      input.sinkfile: sinkfile\n      input.max-steps: max-steps\n    out: [solutionfile]\n\n  rp2paths:\n    run: ../tools/rp2paths-cwl/tool.cwl\n    in:\n      infile: rp2/solutionfile\n      reverse: reverse\n    out: [compounds, reactions, sinks]\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'rulesfile': 'File', 'sourcefile': 'File', 'sinkfile': 'File', 'reverse': 'boolean?', 'max-steps': 'int?'}",
    "cwl_outputs": "{'compounds': {'type': 'File', 'outputSource': 'rp2paths/compounds'}, 'reactions': {'type': 'File', 'outputSource': 'rp2paths/reactions'}, 'sinks': {'type': 'File', 'outputSource': 'rp2paths/sinks'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "rp2": {
        "run": "../tools/RetroPath2-cwl/tool.cwl",
        "in": {
          "input.rulesfile": "rulesfile",
          "input.sourcefile": "sourcefile",
          "input.sinkfile": "sinkfile",
          "input.max-steps": "max-steps"
        },
        "out": [
          "solutionfile"
        ]
      },
      "rp2paths": {
        "run": "../tools/rp2paths-cwl/tool.cwl",
        "in": {
          "infile": "rp2/solutionfile",
          "reverse": "reverse"
        },
        "out": [
          "compounds",
          "reactions",
          "sinks"
        ]
      }
    }
  },
  {
    "path": "test/fixtures/files/workflows/with_quotes.cwl",
    "sha": "a127acf2b0cbe5e216f603a09c0894edb9c74087",
    "source": "https://github.com/seek4science/seek/blob/main/test/fixtures/files/workflows/with_quotes.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.2\nclass: Workflow\nrequirements:\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\nlabel: Kallisto RNAseq Workflow\ndoc: | \n  Workflow Kallisto RNAseq\n    - Workflow Illumina Quality: https://workflowhub.eu/workflows/336?version=1\t\n    - kallisto (pseudoalignment on transcripts)\n\n  **All tool CWL files and other workflows can be found here:**<br>\n    Tools: https://git.wur.nl/unlock/cwl/-/tree/master/cwl<br>\n    Workflows: https://git.wur.nl/unlock/cwl/-/tree/master/cwl/workflows<br>\n\n  The dependencies are either accessible from https://unlock-icat.irods.surfsara.nl (anonymous,anonymous)<br>\n  and/or<br>\n  By using the conda / pip environments as shown in https://git.wur.nl/unlock/docker/-/blob/master/kubernetes/scripts/setup.sh<br>\n\noutputs:\n  illumina_quality_stats:\n    label: Filtered statistics\n    doc: Statistics on quality and preprocessing of the reads\n    type: Directory\n    outputSource: workflow_quality/reports_folder\n  kallisto_output:\n    type: Directory\n    label: kallisto output\n    doc: kallisto results folder. Contains transcript abundances, run info and summary.\n    outputSource: kallisto_files_to_folder/results\n\ninputs:\n  identifier:\n    type: string\n    doc: Identifier for this dataset used in this workflow\n    label: identifier used\n  threads:\n    type: int?\n    doc: number of threads to use for computational processes\n    label: number of threads\n    default: 2\n  memory:\n    type: int?\n    doc: Maximum memory usage in megabytes\n    label: Maximum memory in MB\n    default: 40000\n  filter_rrna:\n    type: boolean\n    default: true\n  forward_reads:\n    type: string[]\n    doc: forward sequence file locally\n    label: forward reads\n  reverse_reads:\n    type: string[]\n    doc: reverse sequence file locally\n    label: reverse reads\n  kallisto_index:\n    type: Directory?\n    label: folder where the kallisto indices are\n  contamination_references:\n    type: string[]?\n    doc: bbmap reference fasta file for contamination filtering\n    label: contamination reference file\n\n  destination:\n    type: string?\n    label: Output Destination\n    doc: Optional Output destination used for cwl-prov reporting.\n\nsteps:\n  #########################################\n  # Workflow for quality and filtering of raw reads\n  workflow_quality:\n    label: Quality and filtering workflow\n    doc: Quality assessment of illumina reads with rRNA filtering option\n    run: workflow_illumina_quality.cwl\n    in:\n      forward_reads: forward_reads\n      reverse_reads: reverse_reads\n      filter_references: contamination_references\n      memory: memory\n      threads: threads\n      identifier: identifier\n      filter_rrna: filter_rrna\n      step:\n        default: 1\n    out: [QC_reverse_reads, QC_forward_reads, reports_folder]\n  #########################################\n  # kallisto transcript abundances\n  kallisto:\n    label: kallisto\n    doc: Calculates transcript abundances\n    in:\n      prefix: identifier\n      forward_reads: workflow_quality/QC_forward_reads\n      reverse_reads: workflow_quality/QC_reverse_reads\n      indexfolder: kallisto_index\n      threads: threads\n    run: ../RNAseq/kallisto/kallisto_quant.cwl\n    out:\n      [abundance.h5, abundance.tsv, run_info, summary]\n\n#############################################\n#### Move to folder if not part of a workflow\n  kallisto_files_to_folder:\n    label: kallisto output\n    doc: Preparation of kallisto output files to a specific output folder\n    in:\n      identifier: identifier\n      files:\n        source: [kallisto/abundance.h5, kallisto/abundance.tsv, kallisto/run_info, kallisto/summary]\n        linkMerge: merge_flattened\n        pickValue: all_non_null\n      destination:\n        default: $(inputs.identifier)\"_kallisto\"\n    run: ../expressions/files_to_folder.cwl\n    out:\n      [results]\n#############################################\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0001-8172-8981\n    s:email: mailto:jasper.koehorst@wur.nl\n    s:name: Jasper Koehorst\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0001-9524-5964\n    s:email: mailto:bart.nijsse@wur.nl\n    s:name: Bart Nijsse\n\ns:citation: https://m-unlock.nl\ns:codeRepository: https://gitlab.com/m-unlock/cwl\ns:dateCreated: \"2022-05-00\"\ns:license: https://spdx.org/licenses/Apache-2.0 \ns:copyrightHolder: \"UNLOCK - Unlocking Microbial Potential\"\n\n\n$namespaces:\n  s: https://schema.org/\n",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'identifier': {'type': 'string', 'doc': 'Identifier for this dataset used in this workflow', 'label': 'identifier used'}, 'threads': {'type': 'int?', 'doc': 'number of threads to use for computational processes', 'label': 'number of threads', 'default': 2}, 'memory': {'type': 'int?', 'doc': 'Maximum memory usage in megabytes', 'label': 'Maximum memory in MB', 'default': 40000}, 'filter_rrna': {'type': 'boolean', 'default': True}, 'forward_reads': {'type': 'string[]', 'doc': 'forward sequence file locally', 'label': 'forward reads'}, 'reverse_reads': {'type': 'string[]', 'doc': 'reverse sequence file locally', 'label': 'reverse reads'}, 'kallisto_index': {'type': 'Directory?', 'label': 'folder where the kallisto indices are'}, 'contamination_references': {'type': 'string[]?', 'doc': 'bbmap reference fasta file for contamination filtering', 'label': 'contamination reference file'}, 'destination': {'type': 'string?', 'label': 'Output Destination', 'doc': 'Optional Output destination used for cwl-prov reporting.'}}",
    "cwl_outputs": "{'illumina_quality_stats': {'label': 'Filtered statistics', 'doc': 'Statistics on quality and preprocessing of the reads', 'type': 'Directory', 'outputSource': 'workflow_quality/reports_folder'}, 'kallisto_output': {'type': 'Directory', 'label': 'kallisto output', 'doc': 'kallisto results folder. Contains transcript abundances, run info and summary.', 'outputSource': 'kallisto_files_to_folder/results'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.2",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'https://schema.org/'}",
    "cwl_$schemas": null,
    "cwl_requirements": "{'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "Workflow Kallisto RNAseq\n  - Workflow Illumina Quality: https://workflowhub.eu/workflows/336?version=1\t\n  - kallisto (pseudoalignment on transcripts)\n\n**All tool CWL files and other workflows can be found here:**<br>\n  Tools: https://git.wur.nl/unlock/cwl/-/tree/master/cwl<br>\n  Workflows: https://git.wur.nl/unlock/cwl/-/tree/master/cwl/workflows<br>\n\nThe dependencies are either accessible from https://unlock-icat.irods.surfsara.nl (anonymous,anonymous)<br>\nand/or<br>\nBy using the conda / pip environments as shown in https://git.wur.nl/unlock/docker/-/blob/master/kubernetes/scripts/setup.sh<br>\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "https://spdx.org/licenses/Apache-2.0",
    "cwl_s:creator": null,
    "cwl_label": "Kallisto RNAseq Workflow",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://gitlab.com/m-unlock/cwl",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0001-8172-8981', 's:email': 'mailto:jasper.koehorst@wur.nl', 's:name': 'Jasper Koehorst'}, {'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0001-9524-5964', 's:email': 'mailto:bart.nijsse@wur.nl', 's:name': 'Bart Nijsse'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "workflow_quality": {
        "label": "Quality and filtering workflow",
        "doc": "Quality assessment of illumina reads with rRNA filtering option",
        "run": "workflow_illumina_quality.cwl",
        "in": {
          "forward_reads": "forward_reads",
          "reverse_reads": "reverse_reads",
          "filter_references": "contamination_references",
          "memory": "memory",
          "threads": "threads",
          "identifier": "identifier",
          "filter_rrna": "filter_rrna",
          "step": {
            "default": 1
          }
        },
        "out": [
          "QC_reverse_reads",
          "QC_forward_reads",
          "reports_folder"
        ]
      },
      "kallisto": {
        "label": "kallisto",
        "doc": "Calculates transcript abundances",
        "in": {
          "prefix": "identifier",
          "forward_reads": "workflow_quality/QC_forward_reads",
          "reverse_reads": "workflow_quality/QC_reverse_reads",
          "indexfolder": "kallisto_index",
          "threads": "threads"
        },
        "run": "../RNAseq/kallisto/kallisto_quant.cwl",
        "out": [
          "abundance.h5",
          "abundance.tsv",
          "run_info",
          "summary"
        ]
      },
      "kallisto_files_to_folder": {
        "label": "kallisto output",
        "doc": "Preparation of kallisto output files to a specific output folder",
        "in": {
          "identifier": "identifier",
          "files": {
            "source": [
              "kallisto/abundance.h5",
              "kallisto/abundance.tsv",
              "kallisto/run_info",
              "kallisto/summary"
            ],
            "linkMerge": "merge_flattened",
            "pickValue": "all_non_null"
          },
          "destination": {
            "default": "$(inputs.identifier)\"_kallisto\""
          }
        },
        "run": "../expressions/files_to_folder.cwl",
        "out": [
          "results"
        ]
      }
    },
    "cwl_s:citation": "https://m-unlock.nl",
    "cwl_s:dateCreated": "2022-05-00",
    "cwl_s:copyrightHolder": "UNLOCK - Unlocking Microbial Potential"
  },
  {
    "path": "test/fixtures/files/workflows/workflow_microbial_annotation.cwl",
    "sha": "1c6844eacf6f6979b0216626aaa359ae9bfb37bf",
    "source": "https://github.com/seek4science/seek/blob/main/test/fixtures/files/workflows/workflow_microbial_annotation.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.2\nclass: Workflow\nrequirements:\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n  MultipleInputFeatureRequirement: {}\n  SubworkflowFeatureRequirement: {}\n  ScatterFeatureRequirement: {}\n\nlabel: Microbial (meta-) genome annotation\ndoc: Workflow for microbial genome annotation.\n\noutputs:\n  bakta_folder:\n    type: Directory\n    outputSource: bakta_to_folder/results\n  compressed_other_files:\n    type: File[]\n    outputSource: compressed_other/outfile\n    linkMerge: merge_flattened\n    pickValue: all_non_null\n  #when compression is turned off\n  uncompressed_other_files:\n    type: File[]?\n    outputSource: uncompressed_other/outfiles\n  sapp_hdt_file:\n    type: File?\n    outputSource: workflow_sapp_conversion/hdt_file\n\ninputs:\n  threads:\n    type: int?\n    default: 4\n    doc: Number of threads to use for computational processes. Default 4\n    label: Number of threads\n  genome_fasta:\n    type: File\n    label: Genome fasta file\n    doc: Genome fasta file used for annotation (required)\n  codon_table:\n    type: int\n    default: 11\n    doc: Codon table 11/4. Default = 11\n    label: Codon table\n  bakta_db:\n    type: Directory?\n    label: Bakta DB\n    doc: | \n      Bakta database directory (default bakta-db_v5.1-light built in the container) (optional)\n  metagenome:\n    type: boolean\n    label: metagenome\n    doc: Run in metagenome mode. Affects only protein prediction. Default false\n    default: false\n  skip_bakta_plot:\n    type: boolean\n    label: Skip plot\n    doc: Skip Bakta plotting\n    default: false\n  skip_bakta_crispr:\n    type: boolean\n    label: Skip bakta CRISPR array prediction using PILER-CR\n    doc: Skip CRISPR prediction\n    default: false\n  interproscan_directory:\n    type: Directory?\n    label: InterProScan 5 directory\n    doc: Directory of the (full) InterProScan 5 program. When not given InterProscan will not run. (optional)\n  \n  interproscan_applications:\n    type: string\n    default: 'Pfam'\n      # SFLD,SMART,AntiFam,NCBIfam not available yet\n    label: Interproscan applications\n    doc: |\n          Comma separated list of analyses:\n          FunFam,SFLD,PANTHER,Gene3D,Hamap,PRINTS,ProSiteProfiles,Coils,SUPERFAMILY,SMART,CDD,PIRSR,ProSitePatterns,AntiFam,Pfam,MobiDBLite,PIRSF,NCBIfam\n          default Pfam,SFLD,SMART,AntiFam,NCBIfam\n\n  eggnog_dbs:\n    type:\n      - 'null'\n      - type: record\n        name: eggnog_dbs\n        fields:\n          data_dir:\n            type: Directory?\n            doc: Directory containing all data files for the eggNOG database.\n          db:\n            type: File?\n            doc: eggNOG database file\n          diamond_db:\n            type: File?\n            doc: eggNOG database file for diamond blast search\n\n  run_kofamscan:\n    type: boolean\n    label: Run kofamscan\n    doc: Run with KEGG KO KoFamKOALA annotation. Default false\n    default: false\n  kofamscan_limit_sapp:\n    type: int?\n    label: SAPP kofamscan filter\n    doc: Limit max number of entries of kofamscan hits per locus in SAPP. Default 5\n    default: 5\n  run_eggnog:\n    type: boolean\n    label: Run eggNOG-mapper\n    doc: Run with eggNOG-mapper annotation. Requires eggnog database files. Default false\n    default: false\n  run_interproscan:\n    type: boolean\n    label: Run InterProScan\n    doc: Run with eggNOG-mapper annotation. Requires InterProScan v5 program files. Default false\n    default: false\n\n  compress_output:\n    type: boolean\n    doc: Compress output files. Default false\n    default: false\n  sapp_conversion:\n    type: boolean\n    doc: Run SAPP (Semantic Annotation Platform with Provenance) on the annotations. Default true\n    default: true\n  destination:\n    type: string?\n    label: Output Destination (prov only)\n    doc: Not used in this workflow. Output destination used in cwl-prov reporting only.\n\nsteps:\n  bakta:\n    label: \"Bakta\"\n    doc: \"Bacterial genome annotation tool\"\n    when: $(inputs.bakta_db !== null)\n    run: ../tools/bakta/bakta.cwl\n    in:\n      translation_table: codon_table\n      fasta_file: genome_fasta\n      db: bakta_db\n      skip_crispr: skip_bakta_crispr\n      meta: metagenome\n      keep_contig_headers:\n        default: true\n      skip_plot: skip_bakta_plot\n      threads: threads\n    out: [hypo_sequences_cds,hypo_annotation_tsv,annotation_tsv,summary_txt,annotation_json,annotation_gff3,annotation_gbff,annotation_embl,sequences_fna,sequences_ffn,sequences_cds,plot_png,plot_svg]\n############################\n  kofamscan:\n    label: \"KofamScan\"\n    when: $(inputs.run_kofamscan && inputs.input_fasta.size > 1024)\n    run: ../tools/kofamscan/kofamscan.cwl\n    in:\n      run_kofamscan: run_kofamscan\n      input_fasta: bakta/sequences_cds\n      threads: threads\n    out: [output]\n############################\n  interproscan:\n    label: \"InterProScan 5\"\n    when: $(inputs.run_interproscan && inputs.interproscan_directory !== null && inputs.protein_fasta.size > 1024)\n    run: ../tools/interproscan/interproscan_v5.cwl\n    in:\n      run_interproscan: run_interproscan\n      interproscan_directory: interproscan_directory\n      protein_fasta: bakta/sequences_cds\n      applications: interproscan_applications\n      threads: threads\n    out: [tsv_annotations, json_annotations]\n############################\n  eggnogmapper:\n    label: \"eggNOG-mapper\"\n    when: $(inputs.run_eggnog && inputs.eggnog !== null && inputs.input_fasta.size > 1024)\n    run: ../tools/eggnog/eggnog-mapper.cwl\n    in:\n      run_eggnog: run_eggnog\n      input_fasta: bakta/sequences_cds\n      eggnog_dbs: eggnog_dbs\n      cpu: threads\n    out: [output_annotations, output_orthologs]\n############################\n  compress_bakta:\n    label: Compress Bakta\n    run: ../tools/bash/pigz.cwl\n    when: $(inputs.compress_output)\n    scatter: [inputfile]\n    scatterMethod: dotproduct\n    in:\n      compress_output: compress_output\n\n      threads: threads\n      inputfile:\n        source: [bakta/hypo_sequences_cds, bakta/hypo_annotation_tsv, bakta/annotation_tsv, bakta/summary_txt, bakta/annotation_json, bakta/annotation_gff3, bakta/annotation_gbff, bakta/annotation_embl, bakta/sequences_fna, bakta/sequences_ffn, bakta/sequences_cds, bakta/plot_svg]\n        linkMerge: merge_flattened\n        pickValue: all_non_null\n    out: [outfile]\n\n  compressed_other:\n    label: Compressed other\n    doc: Compress files when compression is true\n    when: $(inputs.compress_output)\n    run: ../tools/bash/pigz.cwl\n    scatter: [inputfile]\n    scatterMethod: dotproduct\n    in:\n      compress_output: compress_output\n\n      threads: threads\n      inputfile:\n        source: [kofamscan/output, interproscan/json_annotations, interproscan/tsv_annotations, eggnogmapper/output_annotations, eggnogmapper/output_orthologs]\n        linkMerge: merge_flattened\n        pickValue: all_non_null\n    out: [outfile]\n\n  uncompressed_other:\n    label: Uncompressed other\n    doc: Gather files when compression is false\n    when: $(inputs.compress_output == false)\n    run:\n      class: ExpressionTool\n      requirements:\n        InlineJavascriptRequirement: {}\n      inputs:\n        files: File[]\n      outputs:\n        outfiles: File[]\n      expression: |\n                    ${return {'outfiles': inputs.files} }\n    in:\n      compress_output: compress_output\n      files:\n        source: [kofamscan/output, interproscan/json_annotations, interproscan/tsv_annotations, eggnogmapper/output_annotations, eggnogmapper/output_orthologs]\n        linkMerge: merge_flattened\n        pickValue: all_non_null\n    out:\n      [outfiles]\n\n############################\n  workflow_sapp_conversion:\n    run: ../workflows/workflow_sapp_conversion.cwl\n    when: $(inputs.sapp_conversion && inputs.embl_file.size > 1024)\n    in:\n      sapp_conversion: sapp_conversion\n#      genome_fasta: genome_fasta\n      identifier:\n       valueFrom: $(inputs.embl_file.nameroot)\n      embl_file: bakta/annotation_embl\n      interproscan_output: interproscan/json_annotations\n      kofamscan_output: kofamscan/output\n      kofamscan_limit: kofamscan_limit_sapp\n      threads: threads\n    out: [hdt_file]\n\n############################\n  bakta_to_folder:\n    label: Bakta to folder\n    doc: Move all Bakta files to a folder\n    run: ../tools/expressions/files_to_folder.cwl\n    when: $(inputs.bakta_db !== null)\n    in:\n      files: \n        source: [compress_bakta/outfile, bakta/plot_png]\n        linkMerge: merge_flattened\n        pickValue: all_non_null\n\n      destination:\n        source: genome_fasta\n        valueFrom: $(\"Bakta_\"+self.nameroot)\n    out:\n      [results]\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0001-8172-8981\n    s:email: mailto:jasper.koehorst@wur.nl\n    s:name: Jasper Koehorst\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0001-9524-5964\n    s:email: mailto:bart.nijsse@wur.nl\n    s:name: Bart Nijsse\n\ns:citation: https://m-unlock.nl\ns:codeRepository: https://gitlab.com/m-unlock/cwl\ns:dateCreated: \"2020-00-00\"\ns:dateModified: \"2024-08-05\"\ns:license: https://spdx.org/licenses/Apache-2.0 \ns:copyrightHolder: \"UNLOCK - Unlocking Microbial Potential\"\n\n\n$namespaces:\n  s: https://schema.org/",
    "cwl_class": "Workflow",
    "cwl_id": null,
    "cwl_inputs": "{'threads': {'type': 'int?', 'default': 4, 'doc': 'Number of threads to use for computational processes. Default 4', 'label': 'Number of threads'}, 'genome_fasta': {'type': 'File', 'label': 'Genome fasta file', 'doc': 'Genome fasta file used for annotation (required)'}, 'codon_table': {'type': 'int', 'default': 11, 'doc': 'Codon table 11/4. Default = 11', 'label': 'Codon table'}, 'bakta_db': {'type': 'Directory?', 'label': 'Bakta DB', 'doc': 'Bakta database directory (default bakta-db_v5.1-light built in the container) (optional)\\n'}, 'metagenome': {'type': 'boolean', 'label': 'metagenome', 'doc': 'Run in metagenome mode. Affects only protein prediction. Default false', 'default': False}, 'skip_bakta_plot': {'type': 'boolean', 'label': 'Skip plot', 'doc': 'Skip Bakta plotting', 'default': False}, 'skip_bakta_crispr': {'type': 'boolean', 'label': 'Skip bakta CRISPR array prediction using PILER-CR', 'doc': 'Skip CRISPR prediction', 'default': False}, 'interproscan_directory': {'type': 'Directory?', 'label': 'InterProScan 5 directory', 'doc': 'Directory of the (full) InterProScan 5 program. When not given InterProscan will not run. (optional)'}, 'interproscan_applications': {'type': 'string', 'default': 'Pfam', 'label': 'Interproscan applications', 'doc': 'Comma separated list of analyses:\\nFunFam,SFLD,PANTHER,Gene3D,Hamap,PRINTS,ProSiteProfiles,Coils,SUPERFAMILY,SMART,CDD,PIRSR,ProSitePatterns,AntiFam,Pfam,MobiDBLite,PIRSF,NCBIfam\\ndefault Pfam,SFLD,SMART,AntiFam,NCBIfam\\n'}, 'eggnog_dbs': {'type': ['null', {'type': 'record', 'name': 'eggnog_dbs', 'fields': {'data_dir': {'type': 'Directory?', 'doc': 'Directory containing all data files for the eggNOG database.'}, 'db': {'type': 'File?', 'doc': 'eggNOG database file'}, 'diamond_db': {'type': 'File?', 'doc': 'eggNOG database file for diamond blast search'}}}]}, 'run_kofamscan': {'type': 'boolean', 'label': 'Run kofamscan', 'doc': 'Run with KEGG KO KoFamKOALA annotation. Default false', 'default': False}, 'kofamscan_limit_sapp': {'type': 'int?', 'label': 'SAPP kofamscan filter', 'doc': 'Limit max number of entries of kofamscan hits per locus in SAPP. Default 5', 'default': 5}, 'run_eggnog': {'type': 'boolean', 'label': 'Run eggNOG-mapper', 'doc': 'Run with eggNOG-mapper annotation. Requires eggnog database files. Default false', 'default': False}, 'run_interproscan': {'type': 'boolean', 'label': 'Run InterProScan', 'doc': 'Run with eggNOG-mapper annotation. Requires InterProScan v5 program files. Default false', 'default': False}, 'compress_output': {'type': 'boolean', 'doc': 'Compress output files. Default false', 'default': False}, 'sapp_conversion': {'type': 'boolean', 'doc': 'Run SAPP (Semantic Annotation Platform with Provenance) on the annotations. Default true', 'default': True}, 'destination': {'type': 'string?', 'label': 'Output Destination (prov only)', 'doc': 'Not used in this workflow. Output destination used in cwl-prov reporting only.'}}",
    "cwl_outputs": "{'bakta_folder': {'type': 'Directory', 'outputSource': 'bakta_to_folder/results'}, 'compressed_other_files': {'type': 'File[]', 'outputSource': 'compressed_other/outfile', 'linkMerge': 'merge_flattened', 'pickValue': 'all_non_null'}, 'uncompressed_other_files': {'type': 'File[]?', 'outputSource': 'uncompressed_other/outfiles'}, 'sapp_hdt_file': {'type': 'File?', 'outputSource': 'workflow_sapp_conversion/hdt_file'}}",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.2",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'https://schema.org/'}",
    "cwl_$schemas": null,
    "cwl_requirements": "{'StepInputExpressionRequirement': {}, 'InlineJavascriptRequirement': {}, 'MultipleInputFeatureRequirement': {}, 'SubworkflowFeatureRequirement': {}, 'ScatterFeatureRequirement': {}}",
    "cwl_doc": "Workflow for microbial genome annotation.",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "https://spdx.org/licenses/Apache-2.0",
    "cwl_s:creator": null,
    "cwl_label": "Microbial (meta-) genome annotation",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://gitlab.com/m-unlock/cwl",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0001-8172-8981', 's:email': 'mailto:jasper.koehorst@wur.nl', 's:name': 'Jasper Koehorst'}, {'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0001-9524-5964', 's:email': 'mailto:bart.nijsse@wur.nl', 's:name': 'Bart Nijsse'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_steps": {
      "bakta": {
        "label": "Bakta",
        "doc": "Bacterial genome annotation tool",
        "when": "$(inputs.bakta_db !== null)",
        "run": "../tools/bakta/bakta.cwl",
        "in": {
          "translation_table": "codon_table",
          "fasta_file": "genome_fasta",
          "db": "bakta_db",
          "skip_crispr": "skip_bakta_crispr",
          "meta": "metagenome",
          "keep_contig_headers": {
            "default": true
          },
          "skip_plot": "skip_bakta_plot",
          "threads": "threads"
        },
        "out": [
          "hypo_sequences_cds",
          "hypo_annotation_tsv",
          "annotation_tsv",
          "summary_txt",
          "annotation_json",
          "annotation_gff3",
          "annotation_gbff",
          "annotation_embl",
          "sequences_fna",
          "sequences_ffn",
          "sequences_cds",
          "plot_png",
          "plot_svg"
        ]
      },
      "kofamscan": {
        "label": "KofamScan",
        "when": "$(inputs.run_kofamscan && inputs.input_fasta.size > 1024)",
        "run": "../tools/kofamscan/kofamscan.cwl",
        "in": {
          "run_kofamscan": "run_kofamscan",
          "input_fasta": "bakta/sequences_cds",
          "threads": "threads"
        },
        "out": [
          "output"
        ]
      },
      "interproscan": {
        "label": "InterProScan 5",
        "when": "$(inputs.run_interproscan && inputs.interproscan_directory !== null && inputs.protein_fasta.size > 1024)",
        "run": "../tools/interproscan/interproscan_v5.cwl",
        "in": {
          "run_interproscan": "run_interproscan",
          "interproscan_directory": "interproscan_directory",
          "protein_fasta": "bakta/sequences_cds",
          "applications": "interproscan_applications",
          "threads": "threads"
        },
        "out": [
          "tsv_annotations",
          "json_annotations"
        ]
      },
      "eggnogmapper": {
        "label": "eggNOG-mapper",
        "when": "$(inputs.run_eggnog && inputs.eggnog !== null && inputs.input_fasta.size > 1024)",
        "run": "../tools/eggnog/eggnog-mapper.cwl",
        "in": {
          "run_eggnog": "run_eggnog",
          "input_fasta": "bakta/sequences_cds",
          "eggnog_dbs": "eggnog_dbs",
          "cpu": "threads"
        },
        "out": [
          "output_annotations",
          "output_orthologs"
        ]
      },
      "compress_bakta": {
        "label": "Compress Bakta",
        "run": "../tools/bash/pigz.cwl",
        "when": "$(inputs.compress_output)",
        "scatter": [
          "inputfile"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "compress_output": "compress_output",
          "threads": "threads",
          "inputfile": {
            "source": [
              "bakta/hypo_sequences_cds",
              "bakta/hypo_annotation_tsv",
              "bakta/annotation_tsv",
              "bakta/summary_txt",
              "bakta/annotation_json",
              "bakta/annotation_gff3",
              "bakta/annotation_gbff",
              "bakta/annotation_embl",
              "bakta/sequences_fna",
              "bakta/sequences_ffn",
              "bakta/sequences_cds",
              "bakta/plot_svg"
            ],
            "linkMerge": "merge_flattened",
            "pickValue": "all_non_null"
          }
        },
        "out": [
          "outfile"
        ]
      },
      "compressed_other": {
        "label": "Compressed other",
        "doc": "Compress files when compression is true",
        "when": "$(inputs.compress_output)",
        "run": "../tools/bash/pigz.cwl",
        "scatter": [
          "inputfile"
        ],
        "scatterMethod": "dotproduct",
        "in": {
          "compress_output": "compress_output",
          "threads": "threads",
          "inputfile": {
            "source": [
              "kofamscan/output",
              "interproscan/json_annotations",
              "interproscan/tsv_annotations",
              "eggnogmapper/output_annotations",
              "eggnogmapper/output_orthologs"
            ],
            "linkMerge": "merge_flattened",
            "pickValue": "all_non_null"
          }
        },
        "out": [
          "outfile"
        ]
      },
      "uncompressed_other": {
        "label": "Uncompressed other",
        "doc": "Gather files when compression is false",
        "when": "$(inputs.compress_output == false)",
        "run": "{'class': 'ExpressionTool', 'requirements': {'InlineJavascriptRequirement': {}}, 'inputs': {'files': 'File[]'}, 'outputs': {'outfiles': 'File[]'}, 'expression': \"${return {'outfiles': inputs.files} }\\n\"}",
        "in": {
          "compress_output": "compress_output",
          "files": {
            "source": [
              "kofamscan/output",
              "interproscan/json_annotations",
              "interproscan/tsv_annotations",
              "eggnogmapper/output_annotations",
              "eggnogmapper/output_orthologs"
            ],
            "linkMerge": "merge_flattened",
            "pickValue": "all_non_null"
          }
        },
        "out": [
          "outfiles"
        ]
      },
      "workflow_sapp_conversion": {
        "run": "../workflows/workflow_sapp_conversion.cwl",
        "when": "$(inputs.sapp_conversion && inputs.embl_file.size > 1024)",
        "in": {
          "sapp_conversion": "sapp_conversion",
          "identifier": {
            "valueFrom": "$(inputs.embl_file.nameroot)"
          },
          "embl_file": "bakta/annotation_embl",
          "interproscan_output": "interproscan/json_annotations",
          "kofamscan_output": "kofamscan/output",
          "kofamscan_limit": "kofamscan_limit_sapp",
          "threads": "threads"
        },
        "out": [
          "hdt_file"
        ]
      },
      "bakta_to_folder": {
        "label": "Bakta to folder",
        "doc": "Move all Bakta files to a folder",
        "run": "../tools/expressions/files_to_folder.cwl",
        "when": "$(inputs.bakta_db !== null)",
        "in": {
          "files": {
            "source": [
              "compress_bakta/outfile",
              "bakta/plot_png"
            ],
            "linkMerge": "merge_flattened",
            "pickValue": "all_non_null"
          },
          "destination": {
            "source": "genome_fasta",
            "valueFrom": "$(\"Bakta_\"+self.nameroot)"
          }
        },
        "out": [
          "results"
        ]
      }
    },
    "cwl_s:citation": "https://m-unlock.nl",
    "cwl_s:dateCreated": "2020-00-00",
    "cwl_s:dateModified": "2024-08-05",
    "cwl_s:copyrightHolder": "UNLOCK - Unlocking Microbial Potential"
  }
]