[
  {
    "path": "GATK/GATK-ApplyBQSR.cwl",
    "sha": "0af21fc969babed968c01a33b9321cc1b2f1b655",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/GATK/GATK-ApplyBQSR.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gatk4:4.1.1.0--0\n  SoftwareRequirement:\n    packages:\n      gatk:\n        specs:\n          - https://identifiers.org/biotools/gatk\n          - https://anaconda.org/bioconda/gatk4\n        version: [ \"4.1.1.0\" ]\n\ninputs:\n  # REQUIRED ARGS\n\n  InputFile:\n    type: File\n    inputBinding:\n      prefix: \"--input\"\n\n  Output: \n    type: string\n    default: \"ApplyBQSR.bam\"\n    inputBinding:\n      prefix: \"--output\" \n      valueFrom: \"ApplyBQSR.bam\"\n\n  BaseRecalFile: \n    type: File\n    inputBinding:\n      prefix: \"--bqsr-recal-file\" \n\n  # OPTIONAL ARGS\n\n  isOutputSamProgramRecord:\n    type: boolean?\n    inputBinding:\n      prefix: \"--add-output-sam-program-record\"\n\n  isOutputVCFCommandLine:\n    type: boolean?\n    inputBinding:\n      prefix: \"--add-output-vcf-command-line\"\n\n  ArgumentsFile:\n    type: File?\n    inputBinding:\n      prefix: \"--arguments_file\"\n\n  CloudIndexPrefetchBuilder:\n    type: int?\n    inputBinding:\n      prefix: \"--cloud-index-prefetch-buffer\"\n\n  CloudPrefetchBuffer:\n    type: int?\n    inputBinding:\n      prefix: \"--cloud-prefetch-buffer\"\n\n  isCreateBamIndex:\n    type: boolean?\n    inputBinding:\n      prefix: \"--create-output-bam-index\"\n\n  isCreateMD5:\n    type: boolean?\n    inputBinding:\n      prefix: \"--create-output-bam-md5\"\n\n  isCreateOutputVariantIndex:\n    type: boolean?\n    inputBinding:\n      prefix: \"--create-output-variant-index\"\n\n  isCreateOutputVariantMD5:\n    type: boolean?\n    inputBinding:\n      prefix: \"--create-output-variant-md5\"\n\n  isDisableBamIndexCaching:\n    type: boolean?\n    inputBinding:\n      prefix: \"--disable-bam-index-caching\"\n\n  isDisableReadFilter:\n    type: boolean?\n    inputBinding:\n      prefix: \"--disable-read-filter\"\n\n  isDisableSequenceDictionaryValidation:\n    type: boolean?\n    inputBinding:\n      prefix: \"--disable-sequence-dictionary-validation\"\n\n  isDisableToolDefaultReadFilters:\n    type: boolean?\n    inputBinding:\n      prefix: \"--disable-tool-default-read-filters\"\n\n  isEmitOriginalQuals:\n    type: boolean?\n    inputBinding:\n      prefix: \"--emit-original-quals\"\n\n  ExcludeIntervals:\n    type: \n      - \"null\"\n      - type: array\n        items: string\n        inputBinding:\n          prefix: \"--exclude-intervals\"\n      - File\n    inputBinding:\n      prefix: \"--exclude-intervals\"\n\n  GatkConfigFile:\n    type: File?\n    inputBinding:\n      prefix: \"--gatk-config-file\"\n\n  GCSMaxRetries:\n    type: int?\n    inputBinding:\n      prefix: \"--gcs-max-retries\"\n  \n  GlobalScopePrior:\n    type: double?\n    inputBinding:\n      prefix: \"--global-qscore-prior\"\n\n  IntervalExclusionPadding:\n    type: int?\n    inputBinding:\n      prefix: \"--interval-exclusion-padding\"\n\n  IntervalMergingRule:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n          - ALL\n          - OVERLAPPING_ONLY\n    inputBinding:\n      prefix: \"--interval-merging-rule\"\n\n  IntervalPadding:\n    type: int?\n    inputBinding:\n      prefix: \"--interval-padding\"\n\n  IntervalSetRule:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n          - UNION\n          - INTERSECTION\n\n  Intervals:\n    type: string[]?\n    inputBinding:\n      prefix: \"--intervals\"\n\n  JavaOptions: \n    type: string?\n    inputBinding:\n      prefix: \"--java_options\" \n      position: -2\n\n  isLenient:\n    type: boolean?\n    inputBinding:\n      prefix: \"--lenient\"\n\n  PreserveQscoresLessThan:\n    type: int?\n    inputBinding:\n      prefix: \"--preserve-qscores-less-than\"\n\n  QuantizeQuals:\n    type:\n      - \"null\"\n      - type: record\n        name: QuantizeQuals\n        fields:\n          QuantizeQuals:\n              type: int\n              inputBinding:\n                prefix: \"--quantize-quals\"\n      - type: record\n        name: RoundDownQuantize\n        fields:\n          RoundDownQuantize:\n            type: boolean?\n            inputBinding:\n              prefix: \"--round-down-quantized\"\n\n          StaticQuantizedQuals:\n            type: boolean?\n            inputBinding:\n              prefix: \"--static-quantized-quals\"\n\n  ReadFilter:\n    type: string[]?\n    inputBinding:\n      prefix: \"--read-filter\"\n      itemSeparator: \",\"\n\n  ReadIndex:\n    type: string[]?\n    inputBinding:\n      prefix: \"--read-index\"\n      itemSeparator: \",\"\n\n  ReadValidationStringency:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n          - STRICT\n          - LENIENT\n          - SILENT\n    inputBinding:\n      prefix: \"--read-validation-stringency\"\n\n  Reference:\n    type: string?\n    inputBinding:\n      prefix: \"--reference\"\n\n  SecondsBetweenProgUpdates:\n    type: int?\n    inputBinding:\n      prefix: \"--seconds-between-progress-updates\"\n\n  SequenceDictionary:\n    type: File?\n    inputBinding:\n      prefix: \"--sequence-dictionary\"\n\n  isUseOriginalQualities:\n    type:  boolean?\n    inputBinding:\n      prefix: \"--use-original-qualities\"\n\n  isJDKDeflator:\n    type: boolean?\n    inputBinding:\n      prefix: \"--USE_JDK_DEFLATER\"  \n  \n  isJDKInflator:\n    type: boolean?\n    inputBinding:\n      prefix: \"--USE_JDK_INFLATER\"\n\nbaseCommand: [\"/gatk/gatk\"]\n\narguments: \n  - valueFrom: \"ApplyBQSR\"\n    position: -1\n\noutputs:\n  alignment:\n    type: File\n    outputBinding:\n      glob: \"ApplyBQSR.bam\"\n\n  index:\n    type: [\"null\", File]\n    outputBinding:\n      glob: \"ApplyBQSR.bai\"\n  vcf:\n    type: [\"null\", File]\n    format: edam:format_3016  # VCF\n    outputBinding:\n      glob: \"*.vcf\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'ArgumentsFile', 'inputBinding': {'prefix': '--arguments_file'}, 'type': ['null', 'File']}, {'id': 'BaseRecalFile', 'inputBinding': {'prefix': '--bqsr-recal-file'}, 'type': 'File'}, {'id': 'CloudIndexPrefetchBuilder', 'inputBinding': {'prefix': '--cloud-index-prefetch-buffer'}, 'type': ['null', 'int']}, {'id': 'CloudPrefetchBuffer', 'inputBinding': {'prefix': '--cloud-prefetch-buffer'}, 'type': ['null', 'int']}, {'id': 'ExcludeIntervals', 'inputBinding': {'prefix': '--exclude-intervals'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'prefix': '--exclude-intervals'}}, 'File']}, {'id': 'GCSMaxRetries', 'inputBinding': {'prefix': '--gcs-max-retries'}, 'type': ['null', 'int']}, {'id': 'GatkConfigFile', 'inputBinding': {'prefix': '--gatk-config-file'}, 'type': ['null', 'File']}, {'id': 'GlobalScopePrior', 'inputBinding': {'prefix': '--global-qscore-prior'}, 'type': ['null', 'double']}, {'id': 'InputFile', 'inputBinding': {'prefix': '--input'}, 'type': 'File'}, {'id': 'IntervalExclusionPadding', 'inputBinding': {'prefix': '--interval-exclusion-padding'}, 'type': ['null', 'int']}, {'id': 'IntervalMergingRule', 'inputBinding': {'prefix': '--interval-merging-rule'}, 'type': ['null', {'name': '_:c48051e6-c3d9-4842-a3fa-f20621ee57f7', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#IntervalMergingRule/ALL', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#IntervalMergingRule/OVERLAPPING_ONLY'], 'type': 'enum'}]}, {'id': 'IntervalPadding', 'inputBinding': {'prefix': '--interval-padding'}, 'type': ['null', 'int']}, {'id': 'IntervalSetRule', 'type': ['null', {'name': '_:da6c01ed-10ef-48ca-9c10-ac2e9c5905bb', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#IntervalSetRule/UNION', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#IntervalSetRule/INTERSECTION'], 'type': 'enum'}]}, {'id': 'Intervals', 'inputBinding': {'prefix': '--intervals'}, 'type': ['null', {'items': 'string', 'type': 'array'}]}, {'id': 'JavaOptions', 'inputBinding': {'position': -2, 'prefix': '--java_options'}, 'type': ['null', 'string']}, {'id': 'Output', 'inputBinding': {'prefix': '--output', 'valueFrom': 'ApplyBQSR.bam'}, 'default': 'ApplyBQSR.bam', 'type': 'string'}, {'id': 'PreserveQscoresLessThan', 'inputBinding': {'prefix': '--preserve-qscores-less-than'}, 'type': ['null', 'int']}, {'id': 'QuantizeQuals', 'type': ['null', {'name': 'QuantizeQuals', 'fields': [{'name': 'QuantizeQuals', 'type': 'int', 'inputBinding': {'prefix': '--quantize-quals'}}], 'type': 'record'}, {'name': 'RoundDownQuantize', 'fields': [{'name': 'RoundDownQuantize', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--round-down-quantized'}}, {'name': 'StaticQuantizedQuals', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--static-quantized-quals'}}], 'type': 'record'}]}, {'id': 'ReadFilter', 'inputBinding': {'prefix': '--read-filter', 'itemSeparator': ','}, 'type': ['null', {'items': 'string', 'type': 'array'}]}, {'id': 'ReadIndex', 'inputBinding': {'prefix': '--read-index', 'itemSeparator': ','}, 'type': ['null', {'items': 'string', 'type': 'array'}]}, {'id': 'ReadValidationStringency', 'inputBinding': {'prefix': '--read-validation-stringency'}, 'type': ['null', {'name': '_:f18fb214-6a95-4a34-8224-4b61c579e61b', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ReadValidationStringency/STRICT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ReadValidationStringency/LENIENT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ReadValidationStringency/SILENT'], 'type': 'enum'}]}, {'id': 'Reference', 'inputBinding': {'prefix': '--reference'}, 'type': ['null', 'string']}, {'id': 'SecondsBetweenProgUpdates', 'inputBinding': {'prefix': '--seconds-between-progress-updates'}, 'type': ['null', 'int']}, {'id': 'SequenceDictionary', 'inputBinding': {'prefix': '--sequence-dictionary'}, 'type': ['null', 'File']}, {'id': 'isCreateBamIndex', 'inputBinding': {'prefix': '--create-output-bam-index'}, 'type': ['null', 'boolean']}, {'id': 'isCreateMD5', 'inputBinding': {'prefix': '--create-output-bam-md5'}, 'type': ['null', 'boolean']}, {'id': 'isCreateOutputVariantIndex', 'inputBinding': {'prefix': '--create-output-variant-index'}, 'type': ['null', 'boolean']}, {'id': 'isCreateOutputVariantMD5', 'inputBinding': {'prefix': '--create-output-variant-md5'}, 'type': ['null', 'boolean']}, {'id': 'isDisableBamIndexCaching', 'inputBinding': {'prefix': '--disable-bam-index-caching'}, 'type': ['null', 'boolean']}, {'id': 'isDisableReadFilter', 'inputBinding': {'prefix': '--disable-read-filter'}, 'type': ['null', 'boolean']}, {'id': 'isDisableSequenceDictionaryValidation', 'inputBinding': {'prefix': '--disable-sequence-dictionary-validation'}, 'type': ['null', 'boolean']}, {'id': 'isDisableToolDefaultReadFilters', 'inputBinding': {'prefix': '--disable-tool-default-read-filters'}, 'type': ['null', 'boolean']}, {'id': 'isEmitOriginalQuals', 'inputBinding': {'prefix': '--emit-original-quals'}, 'type': ['null', 'boolean']}, {'id': 'isJDKDeflator', 'inputBinding': {'prefix': '--USE_JDK_DEFLATER'}, 'type': ['null', 'boolean']}, {'id': 'isJDKInflator', 'inputBinding': {'prefix': '--USE_JDK_INFLATER'}, 'type': ['null', 'boolean']}, {'id': 'isLenient', 'inputBinding': {'prefix': '--lenient'}, 'type': ['null', 'boolean']}, {'id': 'isOutputSamProgramRecord', 'inputBinding': {'prefix': '--add-output-sam-program-record'}, 'type': ['null', 'boolean']}, {'id': 'isOutputVCFCommandLine', 'inputBinding': {'prefix': '--add-output-vcf-command-line'}, 'type': ['null', 'boolean']}, {'id': 'isUseOriginalQualities', 'inputBinding': {'prefix': '--use-original-qualities'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'alignment', 'outputBinding': {'glob': 'ApplyBQSR.bam'}, 'type': 'File'}, {'id': 'index', 'outputBinding': {'glob': 'ApplyBQSR.bai'}, 'type': ['null', 'File']}, {'id': 'vcf', 'outputBinding': {'glob': '*.vcf'}, 'format': 'http://edamontology.org/format_3016', 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gatk4:4.1.1.0--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gatk', 'version': ['4.1.1.0'], 'specs': ['https://identifiers.org/biotools/gatk', 'https://anaconda.org/bioconda/gatk4']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['/gatk/gatk']",
    "cwl_arguments": "[{'position': -1, 'valueFrom': 'ApplyBQSR'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "GATK/GATK-BaseRecalibrator.cwl",
    "sha": "e388ac4b9404377cf57f59437e4c889893308167",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/GATK/GATK-BaseRecalibrator.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gatk4:4.1.1.0--0\n  SoftwareRequirement:\n    packages:\n      gatk:\n        specs:\n          - https://identifiers.org/biotools/gatk\n          - https://anaconda.org/bioconda/gatk4\n        version: [ \"4.1.1.0\" ]\n\ninputs:\n  # REQUIRED ARGS\n\n  InputFile:\n    type: File\n    inputBinding:\n      prefix: \"-I\"\n\n  Reference:\n    type: File\n    inputBinding:\n      prefix: \"-R\"\n    secondaryFiles:\n      - .dict\n\n  Output:\n    type: string\n    default: \"recal_data.table\"\n    inputBinding:\n      prefix: \"--output\"\n      valueFrom: \"recal_data.table\"\n\n  KnownSites: \n    type: File\n    inputBinding:\n      prefix: \"--known-sites\" \n    secondaryFiles:\n      - .idx\n\n  # OPTIONAL ARGS\n\n  Covariates:\n    type:\n      - \"null\"\n      - type: array\n        items: string\n    inputBinding:\n        prefix: \"--covariate\"\n\n  IndelsContextSize:\n    type: int?\n    inputBinding:\n      prefix: \"--indels_context_size\"\n\n  MaximumCycleValue:\n    type: int?\n    inputBinding:\n      prefix: \"--maximum_cycle_value\"\n\n  MismatchesContextSize:\n    type: int?\n    inputBinding:\n      prefix: \"--mismatches_context_size\"\n \n  SolidNoCallStrategy:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n          - THROW_EXCEPTION\n          - LEAVE_READ_UNRECALIBRATED\n          - PURGE_READ\n    inputBinding:\n      prefix: \"--solid_nocall_strategy\"\n\n  SolidRecalMode:\n    type:\n      - \"null\"\n      - type: enum\n        symbols:\n          - DO_NOTHING\n          - SET_Q_ZERO\n          - SET_Q_ZERO_BASE_N\n          - REMOVE_REF_BIAS\n    inputBinding:\n      prefix: \"--solid_recal_mode\"\n\n  isListCovariates:\n    type: boolean?\n    inputBinding:\n      prefix: \"--list\"\n\n  isLowMemoryMode:\n    type: boolean?\n    inputBinding:\n      prefix: \"--lowMemoryMode\"\n\n  #No standard covariates could be an issue\n\n  isSortAllColumns:\n    type: boolean?\n    inputBinding:\n      prefix: \"--sort_by_all_columns\"\n\n  BinaryTagName:\n    type: string?\n    inputBinding:\n      prefix: \"--binary_tag_name\"\n\n  bqsrBAQGapOpenPenalty:\n    type: float?\n    inputBinding:\n      prefix: \"--bqsrBAQGapOpenPenalty\"\n\n  DeletionsDefaultQuality:\n    type: int?\n    inputBinding:\n      prefix: \"--deletions_default_quality\"\n\n  InsertionsDefaultQuality:\n    type: int?\n    inputBinding:\n      prefix: \"--insertions_default_quality\"\n\n  LowQualityTail:\n    type: int?\n    inputBinding:\n      prefix: \"--low_quality_tail\"\n\n  MismatchesDefaultQuality:\n    type: int?\n    inputBinding:\n      prefix: \"--mismatches_default_quality\"\n\n  QuantizingLevels:\n    type: int?\n    inputBinding:\n      prefix: \"--quantizing_levels\"\n\n  RunWithoutdbSNP:\n    type: boolean?\n    inputBinding:\n      prefix: \"--run_without_dbsnp_potentially_ruining_quality\"\n  \n\narguments: \n  - valueFrom: \"BaseRecalibrator\"\n    position: -1\n\nbaseCommand: [\"/gatk/gatk\"]\n\noutputs:\n  table:\n    type: File\n    outputBinding:\n      glob: $(inputs.Output)\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'BinaryTagName', 'inputBinding': {'prefix': '--binary_tag_name'}, 'type': ['null', 'string']}, {'id': 'Covariates', 'inputBinding': {'prefix': '--covariate'}, 'type': ['null', {'items': 'string', 'type': 'array'}]}, {'id': 'DeletionsDefaultQuality', 'inputBinding': {'prefix': '--deletions_default_quality'}, 'type': ['null', 'int']}, {'id': 'IndelsContextSize', 'inputBinding': {'prefix': '--indels_context_size'}, 'type': ['null', 'int']}, {'id': 'InputFile', 'inputBinding': {'prefix': '-I'}, 'type': 'File'}, {'id': 'InsertionsDefaultQuality', 'inputBinding': {'prefix': '--insertions_default_quality'}, 'type': ['null', 'int']}, {'id': 'KnownSites', 'secondaryFiles': ['.idx'], 'inputBinding': {'prefix': '--known-sites'}, 'type': 'File'}, {'id': 'LowQualityTail', 'inputBinding': {'prefix': '--low_quality_tail'}, 'type': ['null', 'int']}, {'id': 'MaximumCycleValue', 'inputBinding': {'prefix': '--maximum_cycle_value'}, 'type': ['null', 'int']}, {'id': 'MismatchesContextSize', 'inputBinding': {'prefix': '--mismatches_context_size'}, 'type': ['null', 'int']}, {'id': 'MismatchesDefaultQuality', 'inputBinding': {'prefix': '--mismatches_default_quality'}, 'type': ['null', 'int']}, {'id': 'Output', 'inputBinding': {'prefix': '--output', 'valueFrom': 'recal_data.table'}, 'default': 'recal_data.table', 'type': 'string'}, {'id': 'QuantizingLevels', 'inputBinding': {'prefix': '--quantizing_levels'}, 'type': ['null', 'int']}, {'id': 'Reference', 'secondaryFiles': ['.dict'], 'inputBinding': {'prefix': '-R'}, 'type': 'File'}, {'id': 'RunWithoutdbSNP', 'inputBinding': {'prefix': '--run_without_dbsnp_potentially_ruining_quality'}, 'type': ['null', 'boolean']}, {'id': 'SolidNoCallStrategy', 'inputBinding': {'prefix': '--solid_nocall_strategy'}, 'type': ['null', {'name': '_:c42583ac-4a2e-44f6-8171-525e5708145b', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SolidNoCallStrategy/THROW_EXCEPTION', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SolidNoCallStrategy/LEAVE_READ_UNRECALIBRATED', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SolidNoCallStrategy/PURGE_READ'], 'type': 'enum'}]}, {'id': 'SolidRecalMode', 'inputBinding': {'prefix': '--solid_recal_mode'}, 'type': ['null', {'name': '_:9d3c84b6-ac02-4a66-9f06-500533a2df80', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SolidRecalMode/DO_NOTHING', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SolidRecalMode/SET_Q_ZERO', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SolidRecalMode/SET_Q_ZERO_BASE_N', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SolidRecalMode/REMOVE_REF_BIAS'], 'type': 'enum'}]}, {'id': 'bqsrBAQGapOpenPenalty', 'inputBinding': {'prefix': '--bqsrBAQGapOpenPenalty'}, 'type': ['null', 'float']}, {'id': 'isListCovariates', 'inputBinding': {'prefix': '--list'}, 'type': ['null', 'boolean']}, {'id': 'isLowMemoryMode', 'inputBinding': {'prefix': '--lowMemoryMode'}, 'type': ['null', 'boolean']}, {'id': 'isSortAllColumns', 'inputBinding': {'prefix': '--sort_by_all_columns'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'table', 'outputBinding': {'glob': '$(inputs.Output)'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gatk4:4.1.1.0--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gatk', 'version': ['4.1.1.0'], 'specs': ['https://identifiers.org/biotools/gatk', 'https://anaconda.org/bioconda/gatk4']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['/gatk/gatk']",
    "cwl_arguments": "[{'position': -1, 'valueFrom': 'BaseRecalibrator'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "GATK/GATK-CNNScoreVariants.cwl",
    "sha": "4aca19ed9ec011ad83d38c0ea4ea675226bd63a9",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/GATK/GATK-CNNScoreVariants.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gatk4:4.1.3.0--0\n  SoftwareRequirement:\n    packages:\n      gatk:\n        specs:\n          - https://identifiers.org/biotools/gatk\n          - https://anaconda.org/bioconda/gatk4\n        version: [ \"4.1.3.0\" ]\n\ninputs:\n  # REQUIRED ARGS\n\n  InputFile:\n    type: File\n    inputBinding:\n      prefix: \"-I\"\n    secondaryFiles:\n      - .bai\n\n  Variant:\n    type: File\n    inputBinding:\n      prefix: \"-V\"\n\n  Reference:\n    type: File\n    inputBinding:\n      prefix: \"-R\"\n    secondaryFiles:\n      - ^.dict\n      - .fai\n\n  Output:\n    type: string\n    default: \"annotated.vcf\"\n    inputBinding:\n      prefix: \"-O\"\n      valueFrom: \"annotated.vcf\"\n\n  # OPTIONAL ARGS\n  TensorType:\n    type: string?\n    inputBinding:\n      prefix: \"-tensor-type\"\n\n  Architecture:\n    type: string?\n    inputBinding:\n      prefix: \"-architecture\"\n\n  Weights:\n    type: File?\n    inputBinding:\n      prefix: \"-weights\"\n\nbaseCommand: [\"/gatk/gatk\"]\n\narguments:\n  - valueFrom: \"CNNScoreVariants\"\n    position: -1\n\noutputs:\n  filteredVCF:\n    type: File\n    format: edam:format_3016  # VCF\n    outputBinding:\n      glob: \"annotated.vcf\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'Architecture', 'inputBinding': {'prefix': '-architecture'}, 'type': ['null', 'string']}, {'id': 'InputFile', 'secondaryFiles': ['.bai'], 'inputBinding': {'prefix': '-I'}, 'type': 'File'}, {'id': 'Output', 'inputBinding': {'prefix': '-O', 'valueFrom': 'annotated.vcf'}, 'default': 'annotated.vcf', 'type': 'string'}, {'id': 'Reference', 'secondaryFiles': ['^.dict', '.fai'], 'inputBinding': {'prefix': '-R'}, 'type': 'File'}, {'id': 'TensorType', 'inputBinding': {'prefix': '-tensor-type'}, 'type': ['null', 'string']}, {'id': 'Variant', 'inputBinding': {'prefix': '-V'}, 'type': 'File'}, {'id': 'Weights', 'inputBinding': {'prefix': '-weights'}, 'type': ['null', 'File']}]",
    "cwl_outputs": "[{'id': 'filteredVCF', 'outputBinding': {'glob': 'annotated.vcf'}, 'format': 'http://edamontology.org/format_3016', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gatk4:4.1.3.0--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gatk', 'version': ['4.1.3.0'], 'specs': ['https://identifiers.org/biotools/gatk', 'https://anaconda.org/bioconda/gatk4']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['/gatk/gatk']",
    "cwl_arguments": "[{'position': -1, 'valueFrom': 'CNNScoreVariants'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "GATK/GATK-FilterMutectCalls.cwl",
    "sha": "ecee1f7bcd66dc19695d457aad5a01e0212bdf86",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/GATK/GATK-FilterMutectCalls.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gatk4:4.1.3.0--0\n  SoftwareRequirement:\n    packages:\n      gatk:\n        specs:\n          - https://identifiers.org/biotools/gatk\n          - https://anaconda.org/bioconda/gatk4\n        version: [ \"4.1.3.0\" ]\n\ninputs:\n  # REQUIRED ARGS\n\n  InputFile:\n    type: File\n    inputBinding:\n      prefix: \"--V\"\n    secondaryFiles:\n      - .stats\n\n  Reference:\n    type: File\n    inputBinding:\n      prefix: \"-R\"\n    secondaryFiles:\n      - .dict\n      - .fai\n\n  Output:\n    type: string\n    default: \"filtered.vcf.gz\"\n    inputBinding:\n      prefix: \"--O\"\n      valueFrom: \"filtered.vcf.gz\"\n\n  # OPTIONAL ARGS\n  ContaminationTable:\n    type: File?\n    inputBinding:\n      prefix: \"--contamination-table\"\n\nbaseCommand: [\"/gatk/gatk\"]\n\narguments:\n  - valueFrom: \"FilterMutectCalls\"\n    position: -1\n\noutputs:\n  filteredVCF:\n    type: File\n    format: edam:format_3016  # VCF\n    outputBinding:\n      glob: \"filtered.vcf.gz\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'ContaminationTable', 'inputBinding': {'prefix': '--contamination-table'}, 'type': ['null', 'File']}, {'id': 'InputFile', 'secondaryFiles': ['.stats'], 'inputBinding': {'prefix': '--V'}, 'type': 'File'}, {'id': 'Output', 'inputBinding': {'prefix': '--O', 'valueFrom': 'filtered.vcf.gz'}, 'default': 'filtered.vcf.gz', 'type': 'string'}, {'id': 'Reference', 'secondaryFiles': ['.dict', '.fai'], 'inputBinding': {'prefix': '-R'}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'filteredVCF', 'outputBinding': {'glob': 'filtered.vcf.gz'}, 'format': 'http://edamontology.org/format_3016', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gatk4:4.1.3.0--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gatk', 'version': ['4.1.3.0'], 'specs': ['https://identifiers.org/biotools/gatk', 'https://anaconda.org/bioconda/gatk4']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['/gatk/gatk']",
    "cwl_arguments": "[{'position': -1, 'valueFrom': 'FilterMutectCalls'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "GATK/GATK-FilterVariantTranches.cwl",
    "sha": "a0a328140ee0246ca454c4dabb8ef0a03dceaa41",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/GATK/GATK-FilterVariantTranches.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gatk4:4.1.3.0--0\n  SoftwareRequirement:\n    packages:\n      gatk:\n        specs:\n          - https://identifiers.org/biotools/gatk\n          - https://anaconda.org/bioconda/gatk4\n        version: [ \"4.1.3.0\" ]\n\ninputs:\n  # REQUIRED ARGS\n\n  Variant:\n    type: File\n    inputBinding:\n      prefix: \"-V\"\n\n  Resource:\n    type: File\n    inputBinding:\n      prefix: \"-resource\"\n    secondaryFiles:\n      - .idx\n\n  Output:\n    type: string\n    default: \"filtered.vcf\"\n    inputBinding:\n      prefix: \"-O\"\n      valueFrom: \"filtered.vcf\"\n\n  # OPTIONAL ARGS\n  Reference:\n    type: File?\n    inputBinding:\n      prefix: \"-R\"\n    secondaryFiles:\n      - ^.dict\n      - .fai\n\n  Architecture:\n    type: string?\n    inputBinding:\n      prefix: \"-architecture\"\n\n  Tranche:\n    type: int?\n    inputBinding:\n      prefix: \"-tranche\"\n\n  InfoKey:\n    type: string?\n    inputBinding:\n      prefix: \"--info-key\"\n\nbaseCommand: [\"/gatk/gatk\"]\n\narguments:\n  - valueFrom: \"FilterVariantTranches\"\n    position: -1\n\noutputs:\n  filteredVCF:\n    type: File\n    format: edam:format_3016  # VCF\n    outputBinding:\n      glob: \"filtered.vcf\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'Architecture', 'inputBinding': {'prefix': '-architecture'}, 'type': ['null', 'string']}, {'id': 'InfoKey', 'inputBinding': {'prefix': '--info-key'}, 'type': ['null', 'string']}, {'id': 'Output', 'inputBinding': {'prefix': '-O', 'valueFrom': 'filtered.vcf'}, 'default': 'filtered.vcf', 'type': 'string'}, {'id': 'Reference', 'secondaryFiles': ['^.dict', '.fai'], 'inputBinding': {'prefix': '-R'}, 'type': ['null', 'File']}, {'id': 'Resource', 'secondaryFiles': ['.idx'], 'inputBinding': {'prefix': '-resource'}, 'type': 'File'}, {'id': 'Tranche', 'inputBinding': {'prefix': '-tranche'}, 'type': ['null', 'int']}, {'id': 'Variant', 'inputBinding': {'prefix': '-V'}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'filteredVCF', 'outputBinding': {'glob': 'filtered.vcf'}, 'format': 'http://edamontology.org/format_3016', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gatk4:4.1.3.0--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gatk', 'version': ['4.1.3.0'], 'specs': ['https://identifiers.org/biotools/gatk', 'https://anaconda.org/bioconda/gatk4']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['/gatk/gatk']",
    "cwl_arguments": "[{'position': -1, 'valueFrom': 'FilterVariantTranches'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "GATK/GATK-FixMateInformation.cwl",
    "sha": "ef5f01d118352ab49bed091489f9917097126ba6",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/GATK/GATK-FixMateInformation.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gatk4:4.1.1.0--0\n  SoftwareRequirement:\n    packages:\n      gatk:\n        specs:\n          - https://identifiers.org/biotools/gatk\n          - https://anaconda.org/bioconda/gatk4\n        version: [ \"4.1.1.0\" ]\n\ninputs:\n  # REQUIRED ARGS\n\n  InputFile:\n    type: File\n    inputBinding:\n      prefix: \"--INPUT\"\n\n  Output: \n    type: string\n    default: \"fixmate.dat\"\n    inputBinding:\n      prefix: \"--OUTPUT\" \n      valueFrom: $(\"fixmate.dat\")\n\n  # OPTIONAL ARGS\n\n  isAddMateCigar:\n    type: boolean?\n    inputBinding:\n      prefix: \"--ADD_MATE_CIGAR\"\n\n  ArgumentsFile:\n    type: File?\n    inputBinding:\n      prefix: \"--arguments_file\"\n\n  isAssumedSorted:\n    type: boolean?\n    inputBinding:\n      prefix: \"--ASSUME_SORTED\"\n\n  isIgnoreMissingMates:\n    type: boolean?\n    inputBinding:\n      prefix: \"--IGNORE_MISSING_MATES\"\n\n  SortOrder:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n          - unsorted\n          - queryname\n          - coordinate\n          - duplicate\n          - unknown\n    inputBinding:\n      prefix: \"--SORT_ORDER\"\n\n  JavaOptions: \n    type: string?\n    inputBinding:\n      prefix: \"--java_options\" \n      position: -2\n\n  isJDKDeflator:\n    type: boolean?\n    inputBinding:\n      prefix: \"--USE_JDK_DEFLATER\"  \n  \n  isJDKInflator:\n    type: boolean?\n    inputBinding:\n      prefix: \"--USE_JDK_INFLATER\"\n\n  GH4Secrets:\n    type: File?\n    inputBinding:\n      prefix: \"--GA4GH_CLIENT_SECRETS\"\n\n  MaxRecordsRam:\n    type: int?\n    inputBinding:\n      prefix: \"--MAX_RECORDS_IN_RAM\"\n\n  isQuiet:\n    type: boolean?\n    inputBinding:\n      prefix: \"--QUIET\"\n\n  ReferenceSequence:\n    type: File?\n    inputBinding:\n      prefix: \"--REFERENCE_SEQUENCE\"\n\n  ValidationStringency: \n    type: \n     - \"null\"\n     - type: enum\n       symbols:\n        - STRICT\n        - LENIENT\n        - SILENT\n    inputBinding:\n      prefix: \"--VALIDATION_STRINGENCY\"\n\n  Verbosity: \n    type: \n     - \"null\"\n     - type: enum\n       symbols:\n        - ERROR\n        - WARNING\n        - INFO\n        - DEBUG\n    inputBinding:\n      prefix: \"--VERBOSITY\"\n \n  Version: \n    type: boolean?\n    inputBinding:\n      prefix: \"--version\" \n\nbaseCommand: [\"/gatk/gatk\"]\n\narguments: \n  - valueFrom: \"FixMateInformation\"\n    position: -1\n\noutputs:\n  alignment:\n    type: File\n    outputBinding:\n      glob: fixmate.dat\n  index:\n    type: [\"null\", File]\n    outputBinding:\n      glob: ^.bai\n  MD5:\n    type: [\"null\", File]\n    outputBinding:\n      glob: ^.MD5\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'ArgumentsFile', 'inputBinding': {'prefix': '--arguments_file'}, 'type': ['null', 'File']}, {'id': 'GH4Secrets', 'inputBinding': {'prefix': '--GA4GH_CLIENT_SECRETS'}, 'type': ['null', 'File']}, {'id': 'InputFile', 'inputBinding': {'prefix': '--INPUT'}, 'type': 'File'}, {'id': 'JavaOptions', 'inputBinding': {'position': -2, 'prefix': '--java_options'}, 'type': ['null', 'string']}, {'id': 'MaxRecordsRam', 'inputBinding': {'prefix': '--MAX_RECORDS_IN_RAM'}, 'type': ['null', 'int']}, {'id': 'Output', 'inputBinding': {'prefix': '--OUTPUT', 'valueFrom': '$(\"fixmate.dat\")'}, 'default': 'fixmate.dat', 'type': 'string'}, {'id': 'ReferenceSequence', 'inputBinding': {'prefix': '--REFERENCE_SEQUENCE'}, 'type': ['null', 'File']}, {'id': 'SortOrder', 'inputBinding': {'prefix': '--SORT_ORDER'}, 'type': ['null', {'name': '_:f635ce1e-e0f1-4eb9-aa8b-97590eb3b063', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SortOrder/unsorted', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SortOrder/queryname', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SortOrder/coordinate', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SortOrder/duplicate', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SortOrder/unknown'], 'type': 'enum'}]}, {'id': 'ValidationStringency', 'inputBinding': {'prefix': '--VALIDATION_STRINGENCY'}, 'type': ['null', {'name': '_:05f7bf2b-fe70-4018-89a8-0e679338a2eb', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ValidationStringency/STRICT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ValidationStringency/LENIENT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ValidationStringency/SILENT'], 'type': 'enum'}]}, {'id': 'Verbosity', 'inputBinding': {'prefix': '--VERBOSITY'}, 'type': ['null', {'name': '_:decfd856-39df-4028-91ff-4a235195af99', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#Verbosity/ERROR', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#Verbosity/WARNING', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#Verbosity/INFO', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#Verbosity/DEBUG'], 'type': 'enum'}]}, {'id': 'Version', 'inputBinding': {'prefix': '--version'}, 'type': ['null', 'boolean']}, {'id': 'isAddMateCigar', 'inputBinding': {'prefix': '--ADD_MATE_CIGAR'}, 'type': ['null', 'boolean']}, {'id': 'isAssumedSorted', 'inputBinding': {'prefix': '--ASSUME_SORTED'}, 'type': ['null', 'boolean']}, {'id': 'isIgnoreMissingMates', 'inputBinding': {'prefix': '--IGNORE_MISSING_MATES'}, 'type': ['null', 'boolean']}, {'id': 'isJDKDeflator', 'inputBinding': {'prefix': '--USE_JDK_DEFLATER'}, 'type': ['null', 'boolean']}, {'id': 'isJDKInflator', 'inputBinding': {'prefix': '--USE_JDK_INFLATER'}, 'type': ['null', 'boolean']}, {'id': 'isQuiet', 'inputBinding': {'prefix': '--QUIET'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'MD5', 'outputBinding': {'glob': '^.MD5'}, 'type': ['null', 'File']}, {'id': 'alignment', 'outputBinding': {'glob': 'fixmate.dat'}, 'type': 'File'}, {'id': 'index', 'outputBinding': {'glob': '^.bai'}, 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gatk4:4.1.1.0--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gatk', 'version': ['4.1.1.0'], 'specs': ['https://identifiers.org/biotools/gatk', 'https://anaconda.org/bioconda/gatk4']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['/gatk/gatk']",
    "cwl_arguments": "[{'position': -1, 'valueFrom': 'FixMateInformation'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "GATK/GATK-HaplotypeCaller.cwl",
    "sha": "5dfa48deaa8210e18dab3a6201b8b69459db5e3c",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/GATK/GATK-HaplotypeCaller.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nbaseCommand:\n- gatk\n- HaplotypeCaller\ndoc: |-\n  Call germline SNPs and indels via local re-assembly of haplotypes\n\n   <p>The HaplotypeCaller is capable of calling SNPs and indels simultaneously via local de-novo assembly of haplotypes in an active region. In other words, whenever the program encounters a region showing signs of variation, it discards the existing mapping information and completely reassembles the reads in that region. This allows the HaplotypeCaller to be more accurate when calling regions that are traditionally difficult to call, for example when they contain different types of variants close to each other. It also makes the HaplotypeCaller much better at calling indels than position-based callers like UnifiedGenotyper.</p>\n\n   <p>In the GVCF workflow used for scalable variant calling in DNA sequence data, HaplotypeCaller runs per-sample to generate an intermediate GVCF (not to be used in final analysis), which can then be used in GenotypeGVCFs for joint genotyping of multiple samples in a very efficient way. The GVCF workflow enables rapid incremental processing of samples as they roll off the sequencer, as well as scaling to very large cohort sizes (e.g. the 92K exomes of ExAC).</p>\n\n   <p>In addition, HaplotypeCaller is able to handle non-diploid organisms as well as pooled experiment data. Note however that the algorithms used to calculate variant likelihoods is not well suited to extreme allele frequencies (relative to ploidy) so its use is not recommended for somatic (cancer) variant discovery. For that purpose, use Mutect2 instead.</p>\n\n   <p>Finally, HaplotypeCaller is also able to correctly handle the splice junctions that make RNAseq a challenge for most variant callers,\n   on the condition that the input read data has previously been processed according to our recommendations as documented <a href='https://software.broadinstitute.org/gatk/documentation/article?id=4067'>here</a>.</p>\n\n   <h3>How HaplotypeCaller works</h3>\n\n   <br />\n   <h4><a href='https://software.broadinstitute.org/gatk/documentation/article?id=4147'>1. Define active regions </a></h4>\n\n   <p>The program determines which regions of the genome it needs to operate on (active regions), based on the presence of\n   evidence for variation.\n\n   <br />\n   <h4><a href='https://software.broadinstitute.org/gatk/documentation/article?id=4146'>2. Determine haplotypes by assembly of the active region </a></h4>\n\n   <p>For each active region, the program builds a De Bruijn-like graph to reassemble the active region and identifies\n   what are the possible haplotypes present in the data. The program then realigns each haplotype against the reference\n   haplotype using the Smith-Waterman algorithm in order to identify potentially variant sites. </p>\n\n   <br />\n   <h4><a href='https://software.broadinstitute.org/gatk/documentation/article?id=4441'>3. Determine likelihoods of the haplotypes given the read data </a></h4>\n\n   <p>For each active region, the program performs a pairwise alignment of each read against each haplotype using the\n   PairHMM algorithm. This produces a matrix of likelihoods of haplotypes given the read data. These likelihoods are\n   then marginalized to obtain the likelihoods of alleles for each potentially variant site given the read data.   </p>\n\n   <br />\n   <h4><a href='https://software.broadinstitute.org/gatk/documentation/article?id=4442'>4. Assign sample genotypes </a></h4>\n\n   <p>For each potentially variant site, the program applies Bayes' rule, using the likelihoods of alleles given the\n   read data to calculate the likelihoods of each genotype per sample given the read data observed for that\n   sample. The most likely genotype is then assigned to the sample.    </p>\n\n   <h3>Input</h3>\n   <p>\n   Input bam file(s) from which to make variant calls\n   </p>\n\n   <h3>Output</h3>\n   <p>\n   Either a VCF or GVCF file with raw, unfiltered SNP and indel calls. Regular VCFs must be filtered either by variant\n   recalibration (Best Practice) or hard-filtering before use in downstream analyses. If using the GVCF workflow, the\n   output is a GVCF file that must first be run through GenotypeGVCFs and then filtering before further analysis.\n   </p>\n\n   <h3>Caveats</h3>\n   <ul>\n   <li>We have not yet fully tested the interaction between the GVCF-based calling or the multisample calling and the\n   RNAseq-specific functionalities. Use those in combination at your own risk.</li>\n   </ul>\n\n   <h3>Special note on ploidy</h3>\n   <p>This tool is able to handle many non-diploid use cases; the desired ploidy can be specified using the -ploidy\n   argument. Note however that very high ploidies (such as are encountered in large pooled experiments) may cause\n   performance challenges including excessive slowness. We are working on resolving these limitations.</p>\n\n   <h3>Additional Notes</h3>\n   <ul>\n       <li>When working with PCR-free data, be sure to set `-pcr_indel_model NONE` (see argument below).</li>\n       <li>When running in `-ERC GVCF` or `-ERC BP_RESOLUTION` modes, the confidence threshold\n       is automatically set to 0. This cannot be overridden by the command line. The threshold can be set manually\n       to the desired level in the next step of the workflow (GenotypeGVCFs)</li>\n       <li>We recommend using a list of intervals to speed up analysis. See <a href='https://software.broadinstitute.org/gatk/documentation/article?id=4133'>this document</a> for details.</li>\n   </ul>\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement:\n    expressionLib:\n    - |\n      /**\n       * File of functions to be added to cwl files\n       */\n\n      function generateGATK4BooleanValue(){\n          /**\n           * Boolean types in GATK 4 are expressed on the command line as --<PREFIX> \"true\"/\"false\",\n           * so patch here\n           */\n          if(self === true || self === false){\n              return self.toString()\n          }\n\n          return self;\n      }\n\n      function applyTagsToArgument(prefix, tags){\n          /**\n           * Function to be used in the field valueFrom of File objects to add gatk tags.\n           */\n\n          if(!self){\n              return null;\n          }\n          else if(!tags){\n              return generateArrayCmd(prefix);\n          }\n          else{\n              function addTagToArgument(tagObject, argument){\n                  var allTags = Array.isArray(tagObject) ? tagObject.join(\",\") : tagObject;\n\n                  return [prefix + \":\" + allTags, argument];\n              }\n\n              if(Array.isArray(self)){\n                  if(!Array.isArray(tags) || self.length !== tags.length){\n                      throw new TypeError(\"Argument '\" + prefix + \"' tag field is invalid\");\n                  }\n\n                  var value = self.map(function(element, i) {\n                      return addTagToArgument(tags[i], element);\n                  }).reduce(function(a, b){return a.concat(b)})\n\n                  return value;\n              }\n              else{\n                  return addTagToArgument(tags, self);\n              }\n          }\n      }\n\n      function generateArrayCmd(prefix){\n          /**\n           * Function to be used in the field valueFrom of array objects, so that arrays are optional\n           * and prefixes are handled properly.\n           *\n           * The issue that this solves is documented here:\n           * https://www.biostars.org/p/258414/#260140\n           */\n          if(!self){\n              return null;\n          }\n\n          if(!Array.isArray(self)){\n              self = [self];\n          }\n\n          var output = [];\n          self.forEach(function(element) {\n              output.push(prefix);\n              output.push(element);\n          })\n\n          return output;\n      }\n\n      /* Polyfill String.endsWith (it was introduced in ES6, but CWL 1.0 only supports ES5) */\n      String.prototype.endsWith = String.prototype.endsWith || function(suffix) {\n          return this.indexOf(suffix, this.length - suffix.length) >= 0;\n      };\n  SchemaDefRequirement:\n    types:\n    - type: enum\n      name: annotation_type\n      symbols:\n      - AS_BaseQualityRankSumTest\n      - AS_FisherStrand\n      - AS_InbreedingCoeff\n      - AS_MappingQualityRankSumTest\n      - AS_QualByDepth\n      - AS_RMSMappingQuality\n      - AS_ReadPosRankSumTest\n      - AS_StrandOddsRatio\n      - AlleleFraction\n      - BaseQuality\n      - BaseQualityRankSumTest\n      - ChromosomeCounts\n      - ClippingRankSumTest\n      - CountNs\n      - Coverage\n      - DepthPerAlleleBySample\n      - DepthPerSampleHC\n      - ExcessHet\n      - FisherStrand\n      - FragmentLength\n      - GenotypeSummaries\n      - InbreedingCoeff\n      - LikelihoodRankSumTest\n      - MappingQuality\n      - MappingQualityRankSumTest\n      - MappingQualityZero\n      - OrientationBiasReadCounts\n      - OriginalAlignment\n      - PossibleDeNovo\n      - QualByDepth\n      - RMSMappingQuality\n      - ReadPosRankSumTest\n      - ReadPosition\n      - ReferenceBases\n      - SampleList\n      - StrandBiasBySample\n      - StrandOddsRatio\n      - TandemRepeat\n      - UniqueAltReadCount\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gatk4:4.1.6.0--py38_0\n  SoftwareRequirement:\n    packages:\n      gatk:\n        specs:\n          - https://identifiers.org/biotools/gatk\n          - https://anaconda.org/bioconda/gatk4\n        version: [ \"4.1.6.0\" ]\ninputs:\n- doc: Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise,\n    overrides threshold fraction.\n  id: ambig-filter-bases\n  type: int?\n  inputBinding:\n    prefix: --ambig-filter-bases\n- doc: Threshold fraction of ambiguous bases\n  id: ambig-filter-frac\n  type: double?\n  inputBinding:\n    prefix: --ambig-filter-frac\n- doc: Maximum length of fragment (insert size)\n  id: max-fragment-length\n  type: int?\n  inputBinding:\n    prefix: --max-fragment-length\n- doc: Minimum length of fragment (insert size)\n  id: min-fragment-length\n  type: int?\n  inputBinding:\n    prefix: --min-fragment-length\n- doc: One or more genomic intervals to keep\n  id: keep-intervals\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--keep-intervals\"))\n- doc: Name of the library to keep\n  id: library\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--library\"))\n- doc: Maximum mapping quality to keep (inclusive)\n  id: maximum-mapping-quality\n  type: int?\n  inputBinding:\n    prefix: --maximum-mapping-quality\n- doc: Minimum mapping quality to keep (inclusive)\n  id: minimum-mapping-quality\n  type: int?\n  inputBinding:\n    prefix: --minimum-mapping-quality\n- doc: Minimum start location difference at which mapped mates are considered distant\n  id: mate-too-distant-length\n  type: int?\n  inputBinding:\n    prefix: --mate-too-distant-length\n- doc: Allow a read to be filtered out based on having only 1 soft-clipped block.\n    By default, both ends must have a soft-clipped block, setting this flag requires\n    only 1 soft-clipped block\n  id: dont-require-soft-clips-both-ends\n  type: boolean?\n  inputBinding:\n    prefix: --dont-require-soft-clips-both-ends\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Minimum number of aligned bases\n  id: filter-too-short\n  type: int?\n  inputBinding:\n    prefix: --filter-too-short\n- doc: Platform attribute (PL) to match\n  id: platform-filter-name\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--platform-filter-name\"))\n- doc: Platform unit (PU) to filter out\n  id: black-listed-lanes\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--black-listed-lanes\"))\n- doc: A read group filter expression in the form \"attribute:value\", where \"attribute\"\n    is a two character read group attribute such as \"RG\" or \"PU\".\n  id: read-group-black-list\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--read-group-black-list\"))\n- doc: The name of the read group to keep\n  id: keep-read-group\n  type: string?\n  inputBinding:\n    prefix: --keep-read-group\n- doc: Keep only reads with length at most equal to the specified value\n  id: max-read-length\n  type: int?\n  inputBinding:\n    prefix: --max-read-length\n- doc: Keep only reads with length at least equal to the specified value\n  id: min-read-length\n  type: int?\n  inputBinding:\n    prefix: --min-read-length\n- doc: Keep only reads with this read name\n  id: read-name\n  type: string?\n  inputBinding:\n    prefix: --read-name\n- doc: Keep only reads on the reverse strand\n  id: keep-reverse-strand-only\n  type: boolean?\n  inputBinding:\n    prefix: --keep-reverse-strand-only\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: The name of the sample(s) to keep, filtering out all others\n  id: sample\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--sample\"))\n- doc: Inverts the results from this filter, causing all variants that would pass\n    to fail and visa-versa.\n  id: invert-soft-clip-ratio-filter\n  type: boolean?\n  inputBinding:\n    prefix: --invert-soft-clip-ratio-filter\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Threshold ratio of soft clipped bases (leading / trailing the cigar string)\n    to total bases in read for read to be filtered.\n  id: soft-clipped-leading-trailing-ratio\n  type: double?\n  inputBinding:\n    prefix: --soft-clipped-leading-trailing-ratio\n- doc: Threshold ratio of soft clipped bases (anywhere in the cigar string) to total\n    bases in read for read to be filtered.\n  id: soft-clipped-ratio-threshold\n  type: double?\n  inputBinding:\n    prefix: --soft-clipped-ratio-threshold\n- doc: Minimum probability for a locus to be considered active.\n  id: active-probability-threshold\n  type: double?\n  inputBinding:\n    prefix: --active-probability-threshold\n- doc: Use Mutect2's adaptive graph pruning algorithm\n  id: adaptive-pruning\n  type: boolean?\n  inputBinding:\n    prefix: --adaptive-pruning\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Initial base error rate estimate for adaptive pruning\n  id: adaptive-pruning-initial-error-rate\n  type: double?\n  inputBinding:\n    prefix: --adaptive-pruning-initial-error-rate\n- doc: If true, adds a PG tag to created SAM/BAM/CRAM files.\n  id: add-output-sam-program-record\n  type: boolean?\n  inputBinding:\n    prefix: --add-output-sam-program-record\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, adds a command line header line to created VCF files.\n  id: add-output-vcf-command-line\n  type: boolean?\n  inputBinding:\n    prefix: --add-output-vcf-command-line\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Annotate all sites with PLs\n  id: all-site-pls\n  type: boolean?\n  inputBinding:\n    prefix: --all-site-pls\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Likelihood and read-based annotations will only take into consideration reads\n    that overlap the variant or any base no further than this distance expressed in\n    base pairs\n  id: allele-informative-reads-overlap-margin\n  type: int?\n  inputBinding:\n    prefix: --allele-informative-reads-overlap-margin\n- doc: The set of alleles to force-call regardless of evidence\n  id: alleles\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--alleles\", inputs['alleles_tags']))\n- doc: A argument to set the tags of 'alleles'\n  id: alleles_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Allow graphs that have non-unique kmers in the reference\n  id: allow-non-unique-kmers-in-ref\n  type: boolean?\n  inputBinding:\n    prefix: --allow-non-unique-kmers-in-ref\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If provided, we will annotate records with the number of alternate alleles\n    that were discovered (but not necessarily genotyped) at a given site\n  id: annotate-with-num-discovered-alleles\n  type: boolean?\n  inputBinding:\n    prefix: --annotate-with-num-discovered-alleles\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: One or more specific annotations to add to variant calls [synonymous with -A]\n  id: annotation\n  type:\n  - 'null'\n  - annotation_type\n  - annotation_type[]\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--annotation\"))\n- doc: One or more groups of annotations to apply to variant calls [synonymous with\n    -G]\n  id: annotation-group\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--annotation-group\"))\n- doc: One or more specific annotations to exclude from variant calls [synonymous\n    with -AX]\n  id: annotations-to-exclude\n  type:\n  - 'null'\n  - annotation_type\n  - annotation_type[]\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--annotations-to-exclude\"))\n- doc: read one or more arguments files and add them to the command line\n  id: arguments_file\n  type:\n  - 'null'\n  - type: array\n    items: File\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--arguments_file\", inputs['arguments_file_tags']))\n- doc: A argument to set the tags of 'arguments_file'\n  id: arguments_file_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Output the assembly region to this IGV formatted file\n  id: assembly-region-out-filename\n  type: string?\n  inputBinding:\n    prefix: --assembly-region-out\n- doc: Number of additional bases of context to include around each assembly region\n  id: assembly-region-padding\n  type: int?\n  inputBinding:\n    prefix: --assembly-region-padding\n- doc: File to which assembled haplotypes should be written [synonymous with -bamout]\n  id: bam-output-filename\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--bam-output\", inputs['bam-output_tags']))\n- doc: A argument to set the tags of 'bam-output'\n  id: bam-output_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Which haplotypes should be written to the BAM\n  id: bam-writer-type\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - ALL_POSSIBLE_HAPLOTYPES\n    - CALLED_HAPLOTYPES\n  inputBinding:\n    prefix: --bam-writer-type\n- doc: Base qualities below this threshold will be reduced to the minimum (6)\n  id: base-quality-score-threshold\n  type: int?\n  inputBinding:\n    prefix: --base-quality-score-threshold\n- doc: Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer\n    if unset. [synonymous with -CIPB]\n  id: cloud-index-prefetch-buffer\n  type: int?\n  inputBinding:\n    prefix: --cloud-index-prefetch-buffer\n- doc: Size of the cloud-only prefetch buffer (in MB; 0 to disable). [synonymous with\n    -CPB]\n  id: cloud-prefetch-buffer\n  type: int?\n  inputBinding:\n    prefix: --cloud-prefetch-buffer\n- doc: Comparison VCF file(s) [synonymous with -comp]\n  id: comparison\n  type:\n  - 'null'\n  - type: array\n    items: File\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--comparison\", inputs['comparison_tags']))\n- doc: A argument to set the tags of 'comparison'\n  id: comparison_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Tab-separated File containing fraction of contamination in sequencing data\n    (per sample) to aggressively remove. Format should be \"<SampleID><TAB><Contamination>\"\n    (Contamination is double) per line; No header. [synonymous with -contamination-file]\n  id: contamination-fraction-per-sample-file\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--contamination-fraction-per-sample-file\", inputs['contamination-fraction-per-sample-file_tags']))\n- doc: A argument to set the tags of 'contamination-fraction-per-sample-file'\n  id: contamination-fraction-per-sample-file_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Fraction of contamination in sequencing data (for all samples) to aggressively\n    remove [synonymous with -contamination]\n  id: contamination-fraction-to-filter\n  type: double?\n  inputBinding:\n    prefix: --contamination-fraction-to-filter\n- doc: Undocumented option\n  id: correct-overlapping-quality\n  type: boolean?\n  inputBinding:\n    prefix: --correct-overlapping-quality\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM\n    file. [synonymous with -OBI]\n  id: create-output-bam-index\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-bam-index\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a MD5 digest for any BAM/SAM/CRAM file created [synonymous\n    with -OBM]\n  id: create-output-bam-md5\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-bam-md5\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a VCF index when writing a coordinate-sorted VCF file. [synonymous\n    with -OVI]\n  id: create-output-variant-index\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-variant-index\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a a MD5 digest any VCF file created. [synonymous with -OVM]\n  id: create-output-variant-md5\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-variant-md5\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: dbSNP file [synonymous with -D]\n  id: dbsnp\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--dbsnp\", inputs['dbsnp_tags']))\n- doc: A argument to set the tags of 'dbsnp'\n  id: dbsnp_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Print out verbose debug information about each assembly region [synonymous\n    with -debug]\n  id: debug-assembly\n  type: boolean?\n  inputBinding:\n    prefix: --debug-assembly\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, don't cache bam indexes, this will reduce memory requirements but\n    may harm performance if many intervals are specified.  Caching is automatically\n    disabled if there are no intervals specified. [synonymous with -DBIC]\n  id: disable-bam-index-caching\n  type: boolean?\n  inputBinding:\n    prefix: --disable-bam-index-caching\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Don't skip calculations in ActiveRegions with no variants\n  id: disable-optimizations\n  type: boolean?\n  inputBinding:\n    prefix: --disable-optimizations\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Read filters to be disabled before analysis [synonymous with -DF]\n  id: disable-read-filter\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--disable-read-filter\"))\n- doc: If specified, do not check the sequence dictionaries from our inputs for compatibility.\n    Use at your own risk!\n  id: disable-sequence-dictionary-validation\n  type: boolean?\n  inputBinding:\n    prefix: --disable-sequence-dictionary-validation\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Disable all tool default annotations\n  id: disable-tool-default-annotations\n  type: boolean?\n  inputBinding:\n    prefix: --disable-tool-default-annotations\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: 'Disable all tool default read filters (WARNING: many tools will not function\n    correctly without their default read filters on)'\n  id: disable-tool-default-read-filters\n  type: boolean?\n  inputBinding:\n    prefix: --disable-tool-default-read-filters\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Disable physical phasing\n  id: do-not-run-physical-phasing\n  type: boolean?\n  inputBinding:\n    prefix: --do-not-run-physical-phasing\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Disable iterating over kmer sizes when graph cycles are detected\n  id: dont-increase-kmer-sizes-for-cycles\n  type: boolean?\n  inputBinding:\n    prefix: --dont-increase-kmer-sizes-for-cycles\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Do not analyze soft clipped bases in the reads\n  id: dont-use-soft-clipped-bases\n  type: boolean?\n  inputBinding:\n    prefix: --dont-use-soft-clipped-bases\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Mode for emitting reference confidence scores (For Mutect2, this is a BETA\n    feature) [synonymous with -ERC]\n  id: emit-ref-confidence\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - NONE\n    - BP_RESOLUTION\n    - GVCF\n  inputBinding:\n    prefix: --emit-ref-confidence\n- doc: Use all possible annotations (not for the faint of heart)\n  id: enable-all-annotations\n  type: boolean?\n  inputBinding:\n    prefix: --enable-all-annotations\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: One or more genomic intervals to exclude from processing [synonymous with -XL]\n  id: exclude-intervals\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--exclude-intervals\"))\n- doc: Output the band lower bound for each GQ block regardless of the data it represents\n  id: floor-blocks\n  type: boolean?\n  inputBinding:\n    prefix: --floor-blocks\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If provided, all regions will be marked as active\n  id: force-active\n  type: boolean?\n  inputBinding:\n    prefix: --force-active\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Force-call filtered alleles included in the resource specified by --alleles\n    [synonymous with -genotype-filtered-alleles]\n  id: force-call-filtered-alleles\n  type: boolean?\n  inputBinding:\n    prefix: --force-call-filtered-alleles\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Samples representing the population \"founders\"\n  id: founder-id\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--founder-id\"))\n- doc: A configuration file to use with the GATK.\n  id: gatk-config-file\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--gatk-config-file\", inputs['gatk-config-file_tags']))\n- doc: A argument to set the tags of 'gatk-config-file'\n  id: gatk-config-file_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: If the GCS bucket channel errors out, how many times it will attempt to re-initiate\n    the connection [synonymous with -gcs-retries]\n  id: gcs-max-retries\n  type: int?\n  inputBinding:\n    prefix: --gcs-max-retries\n- doc: Project to bill when accessing \"requester pays\" buckets. If unset, these buckets\n    cannot be accessed.\n  id: gcs-project-for-requester-pays\n  type: string?\n  inputBinding:\n    prefix: --gcs-project-for-requester-pays\n- doc: Write debug assembly graph information to this file [synonymous with -graph]\n  id: graph-output-filename\n  type: string?\n  inputBinding:\n    prefix: --graph-output\n- doc: Exclusive upper bounds for reference confidence GQ bands (must be in [1, 100]\n    and specified in increasing order) [synonymous with -GQB]\n  id: gvcf-gq-bands\n  type:\n  - 'null'\n  - type: array\n    items: int\n    inputBinding:\n      valueFrom: $(null)\n  - int\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--gvcf-gq-bands\"))\n- doc: Heterozygosity value used to compute prior likelihoods for any locus.  See\n    the GATKDocs for full details on the meaning of this population genetics concept\n  id: heterozygosity\n  type: double?\n  inputBinding:\n    prefix: --heterozygosity\n- doc: Standard deviation of heterozygosity for SNP and indel calling.\n  id: heterozygosity-stdev\n  type: double?\n  inputBinding:\n    prefix: --heterozygosity-stdev\n- doc: Heterozygosity for indel calling.  See the GATKDocs for heterozygosity for\n    full details on the meaning of this population genetics concept\n  id: indel-heterozygosity\n  type: double?\n  inputBinding:\n    prefix: --indel-heterozygosity\n- doc: The size of an indel to check for in the reference model\n  id: indel-size-to-eliminate-in-ref-model\n  type: int?\n  inputBinding:\n    prefix: --indel-size-to-eliminate-in-ref-model\n- doc: BAM/SAM/CRAM file containing reads [synonymous with -I]\n  id: input\n  type:\n  - type: array\n    items: File\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--input\", inputs['input_tags']))\n  secondaryFiles: $(self.basename + self.nameext.replace('m','i'))\n- doc: A argument to set the tags of 'input'\n  id: input_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Amount of padding (in bp) to add to each interval you are excluding. [synonymous\n    with -ixp]\n  id: interval-exclusion-padding\n  type: int?\n  inputBinding:\n    prefix: --interval-exclusion-padding\n- doc: Interval merging rule for abutting intervals [synonymous with -imr]\n  id: interval-merging-rule\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - ALL\n    - OVERLAPPING_ONLY\n  inputBinding:\n    prefix: --interval-merging-rule\n- doc: Amount of padding (in bp) to add to each interval you are including. [synonymous\n    with -ip]\n  id: interval-padding\n  type: int?\n  inputBinding:\n    prefix: --interval-padding\n- doc: Set merging approach to use for combining interval inputs [synonymous with\n    -isr]\n  id: interval-set-rule\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - UNION\n    - INTERSECTION\n  inputBinding:\n    prefix: --interval-set-rule\n- doc: One or more genomic intervals over which to operate [synonymous with -L]\n  id: intervals\n  type:\n  - 'null'\n  - type: array\n    items:\n    - File\n    - string\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  - string\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--intervals\", inputs['intervals_tags']))\n- doc: A argument to set the tags of 'intervals'\n  id: intervals_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Kmer size to use in the read threading assembler\n  id: kmer-size\n  type:\n  - 'null'\n  - type: array\n    items: int\n    inputBinding:\n      valueFrom: $(null)\n  - int\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--kmer-size\"))\n- doc: Lenient processing of VCF files [synonymous with -LE]\n  id: lenient\n  type: boolean?\n  inputBinding:\n    prefix: --lenient\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Maximum number of alternate alleles to genotype\n  id: max-alternate-alleles\n  type: int?\n  inputBinding:\n    prefix: --max-alternate-alleles\n- doc: Maximum size of an assembly region\n  id: max-assembly-region-size\n  type: int?\n  inputBinding:\n    prefix: --max-assembly-region-size\n- doc: Maximum number of genotypes to consider at any site\n  id: max-genotype-count\n  type: int?\n  inputBinding:\n    prefix: --max-genotype-count\n- doc: Two or more phased substitutions separated by this distance or less are merged\n    into MNPs. [synonymous with -mnp-dist]\n  id: max-mnp-distance\n  type: int?\n  inputBinding:\n    prefix: --max-mnp-distance\n- doc: Maximum number of haplotypes to consider for your population\n  id: max-num-haplotypes-in-population\n  type: int?\n  inputBinding:\n    prefix: --max-num-haplotypes-in-population\n- doc: Upper limit on how many bases away probability mass can be moved around when\n    calculating the boundaries between active and inactive assembly regions\n  id: max-prob-propagation-distance\n  type: int?\n  inputBinding:\n    prefix: --max-prob-propagation-distance\n- doc: Maximum number of reads to retain per alignment start position. Reads above\n    this threshold will be downsampled. Set to 0 to disable.\n  id: max-reads-per-alignment-start\n  type: int?\n  inputBinding:\n    prefix: --max-reads-per-alignment-start\n- doc: Maximum number of variants in graph the adaptive pruner will allow\n  id: max-unpruned-variants\n  type: int?\n  inputBinding:\n    prefix: --max-unpruned-variants\n- doc: Minimum size of an assembly region\n  id: min-assembly-region-size\n  type: int?\n  inputBinding:\n    prefix: --min-assembly-region-size\n- doc: Minimum base quality required to consider a base for calling [synonymous with\n    -mbq]\n  id: min-base-quality-score\n  type: int?\n  inputBinding:\n    prefix: --min-base-quality-score\n- doc: Minimum length of a dangling branch to attempt recovery\n  id: min-dangling-branch-length\n  type: int?\n  inputBinding:\n    prefix: --min-dangling-branch-length\n- doc: Minimum support to not prune paths in the graph\n  id: min-pruning\n  type: int?\n  inputBinding:\n    prefix: --min-pruning\n- doc: How many threads should a native pairHMM implementation use\n  id: native-pair-hmm-threads\n  type: int?\n  inputBinding:\n    prefix: --native-pair-hmm-threads\n- doc: use double precision in the native pairHmm. This is slower but matches the\n    java implementation better\n  id: native-pair-hmm-use-double-precision\n  type: boolean?\n  inputBinding:\n    prefix: --native-pair-hmm-use-double-precision\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Number of samples that must pass the minPruning threshold\n  id: num-pruning-samples\n  type: int?\n  inputBinding:\n    prefix: --num-pruning-samples\n- doc: Number of hom-ref genotypes to infer at sites not present in a panel\n  id: num-reference-samples-if-no-call\n  type: int?\n  inputBinding:\n    prefix: --num-reference-samples-if-no-call\n- doc: File to which variants should be written [synonymous with -O]\n  id: output_filename\n  type: string\n  inputBinding:\n    prefix: --output\n- doc: Specifies which type of calls we should output\n  id: output_mode\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - EMIT_VARIANTS_ONLY\n    - EMIT_ALL_CONFIDENT_SITES\n    - EMIT_ALL_ACTIVE_SITES\n  inputBinding:\n    prefix: --output-mode\n- doc: Flat gap continuation penalty for use in the Pair HMM\n  id: pair-hmm-gap-continuation-penalty\n  type: int?\n  inputBinding:\n    prefix: --pair-hmm-gap-continuation-penalty\n- doc: The PairHMM implementation to use for genotype likelihood calculations [synonymous\n    with -pairHMM]\n  id: pair-hmm-implementation\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - EXACT\n    - ORIGINAL\n    - LOGLESS_CACHING\n    - AVX_LOGLESS_CACHING\n    - AVX_LOGLESS_CACHING_OMP\n    - EXPERIMENTAL_FPGA_LOGLESS_CACHING\n    - FASTEST_AVAILABLE\n  inputBinding:\n    prefix: --pair-hmm-implementation\n- doc: The PCR indel model to use\n  id: pcr-indel-model\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - NONE\n    - HOSTILE\n    - AGGRESSIVE\n    - CONSERVATIVE\n  inputBinding:\n    prefix: --pcr-indel-model\n- doc: Pedigree file for determining the population \"founders\" [synonymous with -ped]\n  id: pedigree\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--pedigree\", inputs['pedigree_tags']))\n- doc: A argument to set the tags of 'pedigree'\n  id: pedigree_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: The global assumed mismapping rate for reads\n  id: phred-scaled-global-read-mismapping-rate\n  type: int?\n  inputBinding:\n    prefix: --phred-scaled-global-read-mismapping-rate\n- doc: Callset to use in calculating genotype priors [synonymous with -population]\n  id: population-callset\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--population-callset\", inputs['population-callset_tags']))\n- doc: A argument to set the tags of 'population-callset'\n  id: population-callset_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Ln likelihood ratio threshold for adaptive pruning algorithm\n  id: pruning-lod-threshold\n  type: double?\n  inputBinding:\n    prefix: --pruning-lod-threshold\n- doc: Whether to suppress job-summary info on System.err.\n  id: QUIET\n  type: boolean?\n  inputBinding:\n    prefix: --QUIET\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Read filters to be applied before analysis [synonymous with -RF]\n  id: read-filter\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--read-filter\"))\n- doc: Indices to use for the read inputs. If specified, an index must be provided\n    for every read input and in the same order as the read inputs. If this argument\n    is not specified, the path to the index for each input will be inferred automatically.\n  id: read-index\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--read-index\"))\n- doc: Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The\n    default stringency value SILENT can improve performance when processing a BAM\n    file in which variable-length data (read, qualities, tags) do not otherwise need\n    to be decoded. [synonymous with -VS]\n  id: read-validation-stringency\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - STRICT\n    - LENIENT\n    - SILENT\n  inputBinding:\n    prefix: --read-validation-stringency\n- doc: Recover all dangling branches\n  id: recover-all-dangling-branches\n  type: boolean?\n  inputBinding:\n    prefix: --recover-all-dangling-branches\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: This argument is deprecated since version 3.3\n  id: recover-dangling-heads\n  type: boolean?\n  inputBinding:\n    prefix: --recover-dangling-heads\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Reference sequence file [synonymous with -R]\n  id: reference\n  type: File\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--reference\", inputs['reference_tags']))\n  secondaryFiles:\n  - .fai\n  - ^.dict\n- doc: A argument to set the tags of 'reference'\n  id: reference_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Name of single sample to use from a multi-sample bam [synonymous with -ALIAS]\n  id: sample-name\n  type: string?\n  inputBinding:\n    prefix: --sample-name\n- doc: Ploidy (number of chromosomes) per sample. For pooled data, set to (Number\n    of samples in each pool * Sample Ploidy). [synonymous with -ploidy]\n  id: sample-ploidy\n  type: int?\n  inputBinding:\n    prefix: --sample-ploidy\n- doc: Output traversal statistics every time this many seconds elapse\n  id: seconds-between-progress-updates\n  type: double?\n  inputBinding:\n    prefix: --seconds-between-progress-updates\n- doc: Use the given sequence dictionary as the master/canonical sequence dictionary.  Must\n    be a .dict file.\n  id: sequence-dictionary\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--sequence-dictionary\", inputs['sequence-dictionary_tags']))\n- doc: A argument to set the tags of 'sequence-dictionary'\n  id: sequence-dictionary_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: display hidden arguments\n  id: showHidden\n  type: boolean?\n  inputBinding:\n    prefix: --showHidden\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, don't emit genotype fields when writing vcf file output.\n  id: sites-only-vcf-output\n  type: boolean?\n  inputBinding:\n    prefix: --sites-only-vcf-output\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Which Smith-Waterman implementation to use, generally FASTEST_AVAILABLE is\n    the right choice\n  id: smith-waterman\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - FASTEST_AVAILABLE\n    - AVX_ENABLED\n    - JAVA\n  inputBinding:\n    prefix: --smith-waterman\n- doc: The minimum phred-scaled confidence threshold at which variants should be called\n    [synonymous with -stand-call-conf]\n  id: standard-min-confidence-threshold-for-calling\n  type: double?\n  inputBinding:\n    prefix: --standard-min-confidence-threshold-for-calling\n- doc: Temp directory to use.\n  id: tmp-dir\n  type: string?\n  inputBinding:\n    prefix: --tmp-dir\n- doc: Use the contamination-filtered read maps for the purposes of annotating variants\n  id: use-filtered-reads-for-annotations\n  type: boolean?\n  inputBinding:\n    prefix: --use-filtered-reads-for-annotations\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Whether to use the JdkDeflater (as opposed to IntelDeflater) [synonymous with\n    -jdk-deflater]\n  id: use-jdk-deflater\n  type: boolean?\n  inputBinding:\n    prefix: --use-jdk-deflater\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Whether to use the JdkInflater (as opposed to IntelInflater) [synonymous with\n    -jdk-inflater]\n  id: use-jdk-inflater\n  type: boolean?\n  inputBinding:\n    prefix: --use-jdk-inflater\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Control verbosity of logging.\n  id: verbosity\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - ERROR\n    - WARNING\n    - INFO\n    - DEBUG\n  inputBinding:\n    prefix: --verbosity\n- doc: display the version number for this tool\n  id: version\n  type: boolean?\n  inputBinding:\n    prefix: --version\n    valueFrom: $(generateGATK4BooleanValue())\noutputs:\n- id: assembly-region-out\n  doc: Output file from corresponding to the input argument assembly-region-out-filename\n  type: File?\n  outputBinding:\n    glob: $(inputs['assembly-region-out-filename'])\n- id: bam-output\n  doc: Output file from corresponding to the input argument bam-output-filename\n  type: File?\n  outputBinding:\n    glob: $(inputs['bam-output-filename'])\n  secondaryFiles:\n  - \"$(inputs['create-output-bam-index']? self.basename + self.nameext.replace('m',\\\n    \\ 'i') : [])\"\n  - \"$(inputs['create-output-bam-md5']? self.basename + '.md5' : [])\"\n- id: graph-output\n  doc: Output file from corresponding to the input argument graph-output-filename\n  type: File?\n  outputBinding:\n    glob: $(inputs['graph-output-filename'])\n- id: output\n  doc: Output file from corresponding to the input argument output-filename\n  type: File\n  outputBinding:\n    glob: $(inputs.output_filename)\n  secondaryFiles:\n  - \"$(inputs['create-output-variant-index']? self.basename + (inputs.output_filename.endsWith('.gz')?\\\n    \\ '.tbi':'.idx') : [])\"\n  - \"$(inputs['create-output-variant-md5']? self.basename + '.md5' : [])\"\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'ambig-filter-bases', 'doc': 'Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction.', 'inputBinding': {'prefix': '--ambig-filter-bases'}, 'type': ['null', 'int']}, {'id': 'ambig-filter-frac', 'doc': 'Threshold fraction of ambiguous bases', 'inputBinding': {'prefix': '--ambig-filter-frac'}, 'type': ['null', 'double']}, {'id': 'max-fragment-length', 'doc': 'Maximum length of fragment (insert size)', 'inputBinding': {'prefix': '--max-fragment-length'}, 'type': ['null', 'int']}, {'id': 'min-fragment-length', 'doc': 'Minimum length of fragment (insert size)', 'inputBinding': {'prefix': '--min-fragment-length'}, 'type': ['null', 'int']}, {'id': 'keep-intervals', 'doc': 'One or more genomic intervals to keep', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--keep-intervals\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'library', 'doc': 'Name of the library to keep', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--library\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'maximum-mapping-quality', 'doc': 'Maximum mapping quality to keep (inclusive)', 'inputBinding': {'prefix': '--maximum-mapping-quality'}, 'type': ['null', 'int']}, {'id': 'minimum-mapping-quality', 'doc': 'Minimum mapping quality to keep (inclusive)', 'inputBinding': {'prefix': '--minimum-mapping-quality'}, 'type': ['null', 'int']}, {'id': 'mate-too-distant-length', 'doc': 'Minimum start location difference at which mapped mates are considered distant', 'inputBinding': {'prefix': '--mate-too-distant-length'}, 'type': ['null', 'int']}, {'id': 'dont-require-soft-clips-both-ends', 'doc': 'Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block', 'inputBinding': {'prefix': '--dont-require-soft-clips-both-ends', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'filter-too-short', 'doc': 'Minimum number of aligned bases', 'inputBinding': {'prefix': '--filter-too-short'}, 'type': ['null', 'int']}, {'id': 'platform-filter-name', 'doc': 'Platform attribute (PL) to match', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--platform-filter-name\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'black-listed-lanes', 'doc': 'Platform unit (PU) to filter out', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--black-listed-lanes\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'read-group-black-list', 'doc': 'A read group filter expression in the form \"attribute:value\", where \"attribute\" is a two character read group attribute such as \"RG\" or \"PU\".', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--read-group-black-list\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'keep-read-group', 'doc': 'The name of the read group to keep', 'inputBinding': {'prefix': '--keep-read-group'}, 'type': ['null', 'string']}, {'id': 'max-read-length', 'doc': 'Keep only reads with length at most equal to the specified value', 'inputBinding': {'prefix': '--max-read-length'}, 'type': ['null', 'int']}, {'id': 'min-read-length', 'doc': 'Keep only reads with length at least equal to the specified value', 'inputBinding': {'prefix': '--min-read-length'}, 'type': ['null', 'int']}, {'id': 'read-name', 'doc': 'Keep only reads with this read name', 'inputBinding': {'prefix': '--read-name'}, 'type': ['null', 'string']}, {'id': 'keep-reverse-strand-only', 'doc': 'Keep only reads on the reverse strand', 'inputBinding': {'prefix': '--keep-reverse-strand-only', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'sample', 'doc': 'The name of the sample(s) to keep, filtering out all others', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--sample\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'invert-soft-clip-ratio-filter', 'doc': 'Inverts the results from this filter, causing all variants that would pass to fail and visa-versa.', 'inputBinding': {'prefix': '--invert-soft-clip-ratio-filter', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'soft-clipped-leading-trailing-ratio', 'doc': 'Threshold ratio of soft clipped bases (leading / trailing the cigar string) to total bases in read for read to be filtered.', 'inputBinding': {'prefix': '--soft-clipped-leading-trailing-ratio'}, 'type': ['null', 'double']}, {'id': 'soft-clipped-ratio-threshold', 'doc': 'Threshold ratio of soft clipped bases (anywhere in the cigar string) to total bases in read for read to be filtered.', 'inputBinding': {'prefix': '--soft-clipped-ratio-threshold'}, 'type': ['null', 'double']}, {'id': 'active-probability-threshold', 'doc': 'Minimum probability for a locus to be considered active.', 'inputBinding': {'prefix': '--active-probability-threshold'}, 'type': ['null', 'double']}, {'id': 'adaptive-pruning', 'doc': \"Use Mutect2's adaptive graph pruning algorithm\", 'inputBinding': {'prefix': '--adaptive-pruning', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'adaptive-pruning-initial-error-rate', 'doc': 'Initial base error rate estimate for adaptive pruning', 'inputBinding': {'prefix': '--adaptive-pruning-initial-error-rate'}, 'type': ['null', 'double']}, {'id': 'add-output-sam-program-record', 'doc': 'If true, adds a PG tag to created SAM/BAM/CRAM files.', 'inputBinding': {'prefix': '--add-output-sam-program-record', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'add-output-vcf-command-line', 'doc': 'If true, adds a command line header line to created VCF files.', 'inputBinding': {'prefix': '--add-output-vcf-command-line', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'all-site-pls', 'doc': 'Annotate all sites with PLs', 'inputBinding': {'prefix': '--all-site-pls', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'allele-informative-reads-overlap-margin', 'doc': 'Likelihood and read-based annotations will only take into consideration reads that overlap the variant or any base no further than this distance expressed in base pairs', 'inputBinding': {'prefix': '--allele-informative-reads-overlap-margin'}, 'type': ['null', 'int']}, {'id': 'alleles', 'doc': 'The set of alleles to force-call regardless of evidence', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--alleles\", inputs[\\'alleles_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'alleles_tags', 'doc': \"A argument to set the tags of 'alleles'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'allow-non-unique-kmers-in-ref', 'doc': 'Allow graphs that have non-unique kmers in the reference', 'inputBinding': {'prefix': '--allow-non-unique-kmers-in-ref', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'annotate-with-num-discovered-alleles', 'doc': 'If provided, we will annotate records with the number of alternate alleles that were discovered (but not necessarily genotyped) at a given site', 'inputBinding': {'prefix': '--annotate-with-num-discovered-alleles', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'annotation', 'doc': 'One or more specific annotations to add to variant calls [synonymous with -A]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--annotation\"))'}, 'type': ['null', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#annotation_type', {'items': 'annotation_type', 'type': 'array'}]}, {'id': 'annotation-group', 'doc': 'One or more groups of annotations to apply to variant calls [synonymous with -G]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--annotation-group\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'annotations-to-exclude', 'doc': 'One or more specific annotations to exclude from variant calls [synonymous with -AX]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--annotations-to-exclude\"))'}, 'type': ['null', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#annotation_type', {'items': 'annotation_type', 'type': 'array'}]}, {'id': 'arguments_file', 'doc': 'read one or more arguments files and add them to the command line', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--arguments_file\", inputs[\\'arguments_file_tags\\']))'}, 'type': ['null', {'items': 'File', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File']}, {'id': 'arguments_file_tags', 'doc': \"A argument to set the tags of 'arguments_file'\", 'type': ['null', {'items': ['string', {'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'assembly-region-out-filename', 'doc': 'Output the assembly region to this IGV formatted file', 'inputBinding': {'prefix': '--assembly-region-out'}, 'type': ['null', 'string']}, {'id': 'assembly-region-padding', 'doc': 'Number of additional bases of context to include around each assembly region', 'inputBinding': {'prefix': '--assembly-region-padding'}, 'type': ['null', 'int']}, {'id': 'bam-output-filename', 'doc': 'File to which assembled haplotypes should be written [synonymous with -bamout]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--bam-output\", inputs[\\'bam-output_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'bam-output_tags', 'doc': \"A argument to set the tags of 'bam-output'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'bam-writer-type', 'doc': 'Which haplotypes should be written to the BAM', 'inputBinding': {'prefix': '--bam-writer-type'}, 'type': ['null', {'name': '_:97516521-c260-4bbf-ac3f-0228911bf5c9', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#bam-writer-type/ALL_POSSIBLE_HAPLOTYPES', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#bam-writer-type/CALLED_HAPLOTYPES'], 'type': 'enum'}]}, {'id': 'base-quality-score-threshold', 'doc': 'Base qualities below this threshold will be reduced to the minimum (6)', 'inputBinding': {'prefix': '--base-quality-score-threshold'}, 'type': ['null', 'int']}, {'id': 'cloud-index-prefetch-buffer', 'doc': 'Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. [synonymous with -CIPB]', 'inputBinding': {'prefix': '--cloud-index-prefetch-buffer'}, 'type': ['null', 'int']}, {'id': 'cloud-prefetch-buffer', 'doc': 'Size of the cloud-only prefetch buffer (in MB; 0 to disable). [synonymous with -CPB]', 'inputBinding': {'prefix': '--cloud-prefetch-buffer'}, 'type': ['null', 'int']}, {'id': 'comparison', 'doc': 'Comparison VCF file(s) [synonymous with -comp]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--comparison\", inputs[\\'comparison_tags\\']))'}, 'type': ['null', {'items': 'File', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File']}, {'id': 'comparison_tags', 'doc': \"A argument to set the tags of 'comparison'\", 'type': ['null', {'items': ['string', {'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'contamination-fraction-per-sample-file', 'doc': 'Tab-separated File containing fraction of contamination in sequencing data (per sample) to aggressively remove. Format should be \"<SampleID><TAB><Contamination>\" (Contamination is double) per line; No header. [synonymous with -contamination-file]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--contamination-fraction-per-sample-file\", inputs[\\'contamination-fraction-per-sample-file_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'contamination-fraction-per-sample-file_tags', 'doc': \"A argument to set the tags of 'contamination-fraction-per-sample-file'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'contamination-fraction-to-filter', 'doc': 'Fraction of contamination in sequencing data (for all samples) to aggressively remove [synonymous with -contamination]', 'inputBinding': {'prefix': '--contamination-fraction-to-filter'}, 'type': ['null', 'double']}, {'id': 'correct-overlapping-quality', 'doc': 'Undocumented option', 'inputBinding': {'prefix': '--correct-overlapping-quality', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'create-output-bam-index', 'doc': 'If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. [synonymous with -OBI]', 'inputBinding': {'prefix': '--create-output-bam-index', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'create-output-bam-md5', 'doc': 'If true, create a MD5 digest for any BAM/SAM/CRAM file created [synonymous with -OBM]', 'inputBinding': {'prefix': '--create-output-bam-md5', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'create-output-variant-index', 'doc': 'If true, create a VCF index when writing a coordinate-sorted VCF file. [synonymous with -OVI]', 'inputBinding': {'prefix': '--create-output-variant-index', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'create-output-variant-md5', 'doc': 'If true, create a a MD5 digest any VCF file created. [synonymous with -OVM]', 'inputBinding': {'prefix': '--create-output-variant-md5', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'dbsnp', 'doc': 'dbSNP file [synonymous with -D]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--dbsnp\", inputs[\\'dbsnp_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'dbsnp_tags', 'doc': \"A argument to set the tags of 'dbsnp'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'debug-assembly', 'doc': 'Print out verbose debug information about each assembly region [synonymous with -debug]', 'inputBinding': {'prefix': '--debug-assembly', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'disable-bam-index-caching', 'doc': \"If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified.  Caching is automatically disabled if there are no intervals specified. [synonymous with -DBIC]\", 'inputBinding': {'prefix': '--disable-bam-index-caching', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'disable-optimizations', 'doc': \"Don't skip calculations in ActiveRegions with no variants\", 'inputBinding': {'prefix': '--disable-optimizations', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'disable-read-filter', 'doc': 'Read filters to be disabled before analysis [synonymous with -DF]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--disable-read-filter\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'disable-sequence-dictionary-validation', 'doc': 'If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk!', 'inputBinding': {'prefix': '--disable-sequence-dictionary-validation', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'disable-tool-default-annotations', 'doc': 'Disable all tool default annotations', 'inputBinding': {'prefix': '--disable-tool-default-annotations', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'disable-tool-default-read-filters', 'doc': 'Disable all tool default read filters (WARNING: many tools will not function correctly without their default read filters on)', 'inputBinding': {'prefix': '--disable-tool-default-read-filters', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'do-not-run-physical-phasing', 'doc': 'Disable physical phasing', 'inputBinding': {'prefix': '--do-not-run-physical-phasing', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'dont-increase-kmer-sizes-for-cycles', 'doc': 'Disable iterating over kmer sizes when graph cycles are detected', 'inputBinding': {'prefix': '--dont-increase-kmer-sizes-for-cycles', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'dont-use-soft-clipped-bases', 'doc': 'Do not analyze soft clipped bases in the reads', 'inputBinding': {'prefix': '--dont-use-soft-clipped-bases', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'emit-ref-confidence', 'doc': 'Mode for emitting reference confidence scores (For Mutect2, this is a BETA feature) [synonymous with -ERC]', 'inputBinding': {'prefix': '--emit-ref-confidence'}, 'type': ['null', {'name': '_:4a1adef4-1dd3-45eb-b849-df001476085f', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#emit-ref-confidence/NONE', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#emit-ref-confidence/BP_RESOLUTION', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#emit-ref-confidence/GVCF'], 'type': 'enum'}]}, {'id': 'enable-all-annotations', 'doc': 'Use all possible annotations (not for the faint of heart)', 'inputBinding': {'prefix': '--enable-all-annotations', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'exclude-intervals', 'doc': 'One or more genomic intervals to exclude from processing [synonymous with -XL]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--exclude-intervals\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'floor-blocks', 'doc': 'Output the band lower bound for each GQ block regardless of the data it represents', 'inputBinding': {'prefix': '--floor-blocks', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'force-active', 'doc': 'If provided, all regions will be marked as active', 'inputBinding': {'prefix': '--force-active', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'force-call-filtered-alleles', 'doc': 'Force-call filtered alleles included in the resource specified by --alleles [synonymous with -genotype-filtered-alleles]', 'inputBinding': {'prefix': '--force-call-filtered-alleles', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'founder-id', 'doc': 'Samples representing the population \"founders\"', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--founder-id\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'gatk-config-file', 'doc': 'A configuration file to use with the GATK.', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--gatk-config-file\", inputs[\\'gatk-config-file_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'gatk-config-file_tags', 'doc': \"A argument to set the tags of 'gatk-config-file'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'gcs-max-retries', 'doc': 'If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection [synonymous with -gcs-retries]', 'inputBinding': {'prefix': '--gcs-max-retries'}, 'type': ['null', 'int']}, {'id': 'gcs-project-for-requester-pays', 'doc': 'Project to bill when accessing \"requester pays\" buckets. If unset, these buckets cannot be accessed.', 'inputBinding': {'prefix': '--gcs-project-for-requester-pays'}, 'type': ['null', 'string']}, {'id': 'graph-output-filename', 'doc': 'Write debug assembly graph information to this file [synonymous with -graph]', 'inputBinding': {'prefix': '--graph-output'}, 'type': ['null', 'string']}, {'id': 'gvcf-gq-bands', 'doc': 'Exclusive upper bounds for reference confidence GQ bands (must be in [1, 100] and specified in increasing order) [synonymous with -GQB]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--gvcf-gq-bands\"))'}, 'type': ['null', {'items': 'int', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'int']}, {'id': 'heterozygosity', 'doc': 'Heterozygosity value used to compute prior likelihoods for any locus.  See the GATKDocs for full details on the meaning of this population genetics concept', 'inputBinding': {'prefix': '--heterozygosity'}, 'type': ['null', 'double']}, {'id': 'heterozygosity-stdev', 'doc': 'Standard deviation of heterozygosity for SNP and indel calling.', 'inputBinding': {'prefix': '--heterozygosity-stdev'}, 'type': ['null', 'double']}, {'id': 'indel-heterozygosity', 'doc': 'Heterozygosity for indel calling.  See the GATKDocs for heterozygosity for full details on the meaning of this population genetics concept', 'inputBinding': {'prefix': '--indel-heterozygosity'}, 'type': ['null', 'double']}, {'id': 'indel-size-to-eliminate-in-ref-model', 'doc': 'The size of an indel to check for in the reference model', 'inputBinding': {'prefix': '--indel-size-to-eliminate-in-ref-model'}, 'type': ['null', 'int']}, {'id': 'input', 'secondaryFiles': \"$(self.basename + self.nameext.replace('m','i'))\", 'doc': 'BAM/SAM/CRAM file containing reads [synonymous with -I]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--input\", inputs[\\'input_tags\\']))'}, 'type': [{'items': 'File', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File']}, {'id': 'input_tags', 'doc': \"A argument to set the tags of 'input'\", 'type': ['null', {'items': ['string', {'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'interval-exclusion-padding', 'doc': 'Amount of padding (in bp) to add to each interval you are excluding. [synonymous with -ixp]', 'inputBinding': {'prefix': '--interval-exclusion-padding'}, 'type': ['null', 'int']}, {'id': 'interval-merging-rule', 'doc': 'Interval merging rule for abutting intervals [synonymous with -imr]', 'inputBinding': {'prefix': '--interval-merging-rule'}, 'type': ['null', {'name': '_:addcef54-bba7-43e6-ab61-63fec7ac8a7d', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-merging-rule/ALL', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-merging-rule/OVERLAPPING_ONLY'], 'type': 'enum'}]}, {'id': 'interval-padding', 'doc': 'Amount of padding (in bp) to add to each interval you are including. [synonymous with -ip]', 'inputBinding': {'prefix': '--interval-padding'}, 'type': ['null', 'int']}, {'id': 'interval-set-rule', 'doc': 'Set merging approach to use for combining interval inputs [synonymous with -isr]', 'inputBinding': {'prefix': '--interval-set-rule'}, 'type': ['null', {'name': '_:4f131790-011c-4c3a-bf58-972c2b0b91df', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-set-rule/UNION', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-set-rule/INTERSECTION'], 'type': 'enum'}]}, {'id': 'intervals', 'doc': 'One or more genomic intervals over which to operate [synonymous with -L]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--intervals\", inputs[\\'intervals_tags\\']))'}, 'type': ['null', {'items': ['File', 'string'], 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File', 'string']}, {'id': 'intervals_tags', 'doc': \"A argument to set the tags of 'intervals'\", 'type': ['null', {'items': ['string', {'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'kmer-size', 'doc': 'Kmer size to use in the read threading assembler', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--kmer-size\"))'}, 'type': ['null', {'items': 'int', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'int']}, {'id': 'lenient', 'doc': 'Lenient processing of VCF files [synonymous with -LE]', 'inputBinding': {'prefix': '--lenient', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'max-alternate-alleles', 'doc': 'Maximum number of alternate alleles to genotype', 'inputBinding': {'prefix': '--max-alternate-alleles'}, 'type': ['null', 'int']}, {'id': 'max-assembly-region-size', 'doc': 'Maximum size of an assembly region', 'inputBinding': {'prefix': '--max-assembly-region-size'}, 'type': ['null', 'int']}, {'id': 'max-genotype-count', 'doc': 'Maximum number of genotypes to consider at any site', 'inputBinding': {'prefix': '--max-genotype-count'}, 'type': ['null', 'int']}, {'id': 'max-mnp-distance', 'doc': 'Two or more phased substitutions separated by this distance or less are merged into MNPs. [synonymous with -mnp-dist]', 'inputBinding': {'prefix': '--max-mnp-distance'}, 'type': ['null', 'int']}, {'id': 'max-num-haplotypes-in-population', 'doc': 'Maximum number of haplotypes to consider for your population', 'inputBinding': {'prefix': '--max-num-haplotypes-in-population'}, 'type': ['null', 'int']}, {'id': 'max-prob-propagation-distance', 'doc': 'Upper limit on how many bases away probability mass can be moved around when calculating the boundaries between active and inactive assembly regions', 'inputBinding': {'prefix': '--max-prob-propagation-distance'}, 'type': ['null', 'int']}, {'id': 'max-reads-per-alignment-start', 'doc': 'Maximum number of reads to retain per alignment start position. Reads above this threshold will be downsampled. Set to 0 to disable.', 'inputBinding': {'prefix': '--max-reads-per-alignment-start'}, 'type': ['null', 'int']}, {'id': 'max-unpruned-variants', 'doc': 'Maximum number of variants in graph the adaptive pruner will allow', 'inputBinding': {'prefix': '--max-unpruned-variants'}, 'type': ['null', 'int']}, {'id': 'min-assembly-region-size', 'doc': 'Minimum size of an assembly region', 'inputBinding': {'prefix': '--min-assembly-region-size'}, 'type': ['null', 'int']}, {'id': 'min-base-quality-score', 'doc': 'Minimum base quality required to consider a base for calling [synonymous with -mbq]', 'inputBinding': {'prefix': '--min-base-quality-score'}, 'type': ['null', 'int']}, {'id': 'min-dangling-branch-length', 'doc': 'Minimum length of a dangling branch to attempt recovery', 'inputBinding': {'prefix': '--min-dangling-branch-length'}, 'type': ['null', 'int']}, {'id': 'min-pruning', 'doc': 'Minimum support to not prune paths in the graph', 'inputBinding': {'prefix': '--min-pruning'}, 'type': ['null', 'int']}, {'id': 'native-pair-hmm-threads', 'doc': 'How many threads should a native pairHMM implementation use', 'inputBinding': {'prefix': '--native-pair-hmm-threads'}, 'type': ['null', 'int']}, {'id': 'native-pair-hmm-use-double-precision', 'doc': 'use double precision in the native pairHmm. This is slower but matches the java implementation better', 'inputBinding': {'prefix': '--native-pair-hmm-use-double-precision', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'num-pruning-samples', 'doc': 'Number of samples that must pass the minPruning threshold', 'inputBinding': {'prefix': '--num-pruning-samples'}, 'type': ['null', 'int']}, {'id': 'num-reference-samples-if-no-call', 'doc': 'Number of hom-ref genotypes to infer at sites not present in a panel', 'inputBinding': {'prefix': '--num-reference-samples-if-no-call'}, 'type': ['null', 'int']}, {'id': 'output_filename', 'doc': 'File to which variants should be written [synonymous with -O]', 'inputBinding': {'prefix': '--output'}, 'type': 'string'}, {'id': 'output_mode', 'doc': 'Specifies which type of calls we should output', 'inputBinding': {'prefix': '--output-mode'}, 'type': ['null', {'name': '_:6885b8b6-fbe1-472c-a186-63105481f290', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#output_mode/EMIT_VARIANTS_ONLY', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#output_mode/EMIT_ALL_CONFIDENT_SITES', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#output_mode/EMIT_ALL_ACTIVE_SITES'], 'type': 'enum'}]}, {'id': 'pair-hmm-gap-continuation-penalty', 'doc': 'Flat gap continuation penalty for use in the Pair HMM', 'inputBinding': {'prefix': '--pair-hmm-gap-continuation-penalty'}, 'type': ['null', 'int']}, {'id': 'pair-hmm-implementation', 'doc': 'The PairHMM implementation to use for genotype likelihood calculations [synonymous with -pairHMM]', 'inputBinding': {'prefix': '--pair-hmm-implementation'}, 'type': ['null', {'name': '_:444c01df-d659-4095-9d61-b69b9d5fcf87', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#pair-hmm-implementation/EXACT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#pair-hmm-implementation/ORIGINAL', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#pair-hmm-implementation/LOGLESS_CACHING', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#pair-hmm-implementation/AVX_LOGLESS_CACHING', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#pair-hmm-implementation/AVX_LOGLESS_CACHING_OMP', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#pair-hmm-implementation/EXPERIMENTAL_FPGA_LOGLESS_CACHING', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#pair-hmm-implementation/FASTEST_AVAILABLE'], 'type': 'enum'}]}, {'id': 'pcr-indel-model', 'doc': 'The PCR indel model to use', 'inputBinding': {'prefix': '--pcr-indel-model'}, 'type': ['null', {'name': '_:f80e1ff2-2a2a-47b4-b4e7-7072f8a85264', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#pcr-indel-model/NONE', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#pcr-indel-model/HOSTILE', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#pcr-indel-model/AGGRESSIVE', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#pcr-indel-model/CONSERVATIVE'], 'type': 'enum'}]}, {'id': 'pedigree', 'doc': 'Pedigree file for determining the population \"founders\" [synonymous with -ped]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--pedigree\", inputs[\\'pedigree_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'pedigree_tags', 'doc': \"A argument to set the tags of 'pedigree'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'phred-scaled-global-read-mismapping-rate', 'doc': 'The global assumed mismapping rate for reads', 'inputBinding': {'prefix': '--phred-scaled-global-read-mismapping-rate'}, 'type': ['null', 'int']}, {'id': 'population-callset', 'doc': 'Callset to use in calculating genotype priors [synonymous with -population]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--population-callset\", inputs[\\'population-callset_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'population-callset_tags', 'doc': \"A argument to set the tags of 'population-callset'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'pruning-lod-threshold', 'doc': 'Ln likelihood ratio threshold for adaptive pruning algorithm', 'inputBinding': {'prefix': '--pruning-lod-threshold'}, 'type': ['null', 'double']}, {'id': 'QUIET', 'doc': 'Whether to suppress job-summary info on System.err.', 'inputBinding': {'prefix': '--QUIET', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'read-filter', 'doc': 'Read filters to be applied before analysis [synonymous with -RF]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--read-filter\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'read-index', 'doc': 'Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically.', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--read-index\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'read-validation-stringency', 'doc': 'Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. [synonymous with -VS]', 'inputBinding': {'prefix': '--read-validation-stringency'}, 'type': ['null', {'name': '_:22a82f99-76b8-490c-baba-2ae4c6c2fa58', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read-validation-stringency/STRICT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read-validation-stringency/LENIENT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read-validation-stringency/SILENT'], 'type': 'enum'}]}, {'id': 'recover-all-dangling-branches', 'doc': 'Recover all dangling branches', 'inputBinding': {'prefix': '--recover-all-dangling-branches', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'recover-dangling-heads', 'doc': 'This argument is deprecated since version 3.3', 'inputBinding': {'prefix': '--recover-dangling-heads', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'reference', 'secondaryFiles': ['.fai', '^.dict'], 'doc': 'Reference sequence file [synonymous with -R]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--reference\", inputs[\\'reference_tags\\']))'}, 'type': 'File'}, {'id': 'reference_tags', 'doc': \"A argument to set the tags of 'reference'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'sample-name', 'doc': 'Name of single sample to use from a multi-sample bam [synonymous with -ALIAS]', 'inputBinding': {'prefix': '--sample-name'}, 'type': ['null', 'string']}, {'id': 'sample-ploidy', 'doc': 'Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy). [synonymous with -ploidy]', 'inputBinding': {'prefix': '--sample-ploidy'}, 'type': ['null', 'int']}, {'id': 'seconds-between-progress-updates', 'doc': 'Output traversal statistics every time this many seconds elapse', 'inputBinding': {'prefix': '--seconds-between-progress-updates'}, 'type': ['null', 'double']}, {'id': 'sequence-dictionary', 'doc': 'Use the given sequence dictionary as the master/canonical sequence dictionary.  Must be a .dict file.', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--sequence-dictionary\", inputs[\\'sequence-dictionary_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'sequence-dictionary_tags', 'doc': \"A argument to set the tags of 'sequence-dictionary'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'showHidden', 'doc': 'display hidden arguments', 'inputBinding': {'prefix': '--showHidden', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'sites-only-vcf-output', 'doc': \"If true, don't emit genotype fields when writing vcf file output.\", 'inputBinding': {'prefix': '--sites-only-vcf-output', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'smith-waterman', 'doc': 'Which Smith-Waterman implementation to use, generally FASTEST_AVAILABLE is the right choice', 'inputBinding': {'prefix': '--smith-waterman'}, 'type': ['null', {'name': '_:68a5222c-62dd-4951-ba7e-179c0dafdbb0', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#smith-waterman/FASTEST_AVAILABLE', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#smith-waterman/AVX_ENABLED', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#smith-waterman/JAVA'], 'type': 'enum'}]}, {'id': 'standard-min-confidence-threshold-for-calling', 'doc': 'The minimum phred-scaled confidence threshold at which variants should be called [synonymous with -stand-call-conf]', 'inputBinding': {'prefix': '--standard-min-confidence-threshold-for-calling'}, 'type': ['null', 'double']}, {'id': 'tmp-dir', 'doc': 'Temp directory to use.', 'inputBinding': {'prefix': '--tmp-dir'}, 'type': ['null', 'string']}, {'id': 'use-filtered-reads-for-annotations', 'doc': 'Use the contamination-filtered read maps for the purposes of annotating variants', 'inputBinding': {'prefix': '--use-filtered-reads-for-annotations', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'use-jdk-deflater', 'doc': 'Whether to use the JdkDeflater (as opposed to IntelDeflater) [synonymous with -jdk-deflater]', 'inputBinding': {'prefix': '--use-jdk-deflater', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'use-jdk-inflater', 'doc': 'Whether to use the JdkInflater (as opposed to IntelInflater) [synonymous with -jdk-inflater]', 'inputBinding': {'prefix': '--use-jdk-inflater', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'verbosity', 'doc': 'Control verbosity of logging.', 'inputBinding': {'prefix': '--verbosity'}, 'type': ['null', {'name': '_:7b24ef9a-1d7b-4bc1-83b8-a2d337d23fd2', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/ERROR', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/WARNING', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/INFO', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/DEBUG'], 'type': 'enum'}]}, {'id': 'version', 'doc': 'display the version number for this tool', 'inputBinding': {'prefix': '--version', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'assembly-region-out', 'doc': 'Output file from corresponding to the input argument assembly-region-out-filename', 'outputBinding': {'glob': \"$(inputs['assembly-region-out-filename'])\"}, 'type': ['null', 'File']}, {'id': 'bam-output', 'secondaryFiles': [\"$(inputs['create-output-bam-index']? self.basename + self.nameext.replace('m', 'i') : [])\", \"$(inputs['create-output-bam-md5']? self.basename + '.md5' : [])\"], 'doc': 'Output file from corresponding to the input argument bam-output-filename', 'outputBinding': {'glob': \"$(inputs['bam-output-filename'])\"}, 'type': ['null', 'File']}, {'id': 'graph-output', 'doc': 'Output file from corresponding to the input argument graph-output-filename', 'outputBinding': {'glob': \"$(inputs['graph-output-filename'])\"}, 'type': ['null', 'File']}, {'id': 'output', 'secondaryFiles': [\"$(inputs['create-output-variant-index']? self.basename + (inputs.output_filename.endsWith('.gz')? '.tbi':'.idx') : [])\", \"$(inputs['create-output-variant-md5']? self.basename + '.md5' : [])\"], 'doc': 'Output file from corresponding to the input argument output-filename', 'outputBinding': {'glob': '$(inputs.output_filename)'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gatk4:4.1.6.0--py38_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gatk', 'version': ['4.1.6.0'], 'specs': ['https://identifiers.org/biotools/gatk', 'https://anaconda.org/bioconda/gatk4']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'HaplotypeCaller']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['/**\\n * File of functions to be added to cwl files\\n */\\n\\nfunction generateGATK4BooleanValue(){\\n    /**\\n     * Boolean types in GATK 4 are expressed on the command line as --<PREFIX> \"true\"/\"false\",\\n     * so patch here\\n     */\\n    if(self === true || self === false){\\n        return self.toString()\\n    }\\n\\n    return self;\\n}\\n\\nfunction applyTagsToArgument(prefix, tags){\\n    /**\\n     * Function to be used in the field valueFrom of File objects to add gatk tags.\\n     */\\n\\n    if(!self){\\n        return null;\\n    }\\n    else if(!tags){\\n        return generateArrayCmd(prefix);\\n    }\\n    else{\\n        function addTagToArgument(tagObject, argument){\\n            var allTags = Array.isArray(tagObject) ? tagObject.join(\",\") : tagObject;\\n\\n            return [prefix + \":\" + allTags, argument];\\n        }\\n\\n        if(Array.isArray(self)){\\n            if(!Array.isArray(tags) || self.length !== tags.length){\\n                throw new TypeError(\"Argument \\'\" + prefix + \"\\' tag field is invalid\");\\n            }\\n\\n            var value = self.map(function(element, i) {\\n                return addTagToArgument(tags[i], element);\\n            }).reduce(function(a, b){return a.concat(b)})\\n\\n            return value;\\n        }\\n        else{\\n            return addTagToArgument(tags, self);\\n        }\\n    }\\n}\\n\\nfunction generateArrayCmd(prefix){\\n    /**\\n     * Function to be used in the field valueFrom of array objects, so that arrays are optional\\n     * and prefixes are handled properly.\\n     *\\n     * The issue that this solves is documented here:\\n     * https://www.biostars.org/p/258414/#260140\\n     */\\n    if(!self){\\n        return null;\\n    }\\n\\n    if(!Array.isArray(self)){\\n        self = [self];\\n    }\\n\\n    var output = [];\\n    self.forEach(function(element) {\\n        output.push(prefix);\\n        output.push(element);\\n    })\\n\\n    return output;\\n}\\n\\n/* Polyfill String.endsWith (it was introduced in ES6, but CWL 1.0 only supports ES5) */\\nString.prototype.endsWith = String.prototype.endsWith || function(suffix) {\\n    return this.indexOf(suffix, this.length - suffix.length) >= 0;\\n};\\n']}, {'class': 'SchemaDefRequirement', 'types': [{'name': 'annotation_type', 'symbols': ['AS_BaseQualityRankSumTest', 'AS_FisherStrand', 'AS_InbreedingCoeff', 'AS_MappingQualityRankSumTest', 'AS_QualByDepth', 'AS_RMSMappingQuality', 'AS_ReadPosRankSumTest', 'AS_StrandOddsRatio', 'AlleleFraction', 'BaseQuality', 'BaseQualityRankSumTest', 'ChromosomeCounts', 'ClippingRankSumTest', 'CountNs', 'Coverage', 'DepthPerAlleleBySample', 'DepthPerSampleHC', 'ExcessHet', 'FisherStrand', 'FragmentLength', 'GenotypeSummaries', 'InbreedingCoeff', 'LikelihoodRankSumTest', 'MappingQuality', 'MappingQualityRankSumTest', 'MappingQualityZero', 'OrientationBiasReadCounts', 'OriginalAlignment', 'PossibleDeNovo', 'QualByDepth', 'RMSMappingQuality', 'ReadPosRankSumTest', 'ReadPosition', 'ReferenceBases', 'SampleList', 'StrandBiasBySample', 'StrandOddsRatio', 'TandemRepeat', 'UniqueAltReadCount'], 'type': 'enum'}]}, {'class': 'ShellCommandRequirement'}]",
    "cwl_doc": "Call germline SNPs and indels via local re-assembly of haplotypes\n\n <p>The HaplotypeCaller is capable of calling SNPs and indels simultaneously via local de-novo assembly of haplotypes in an active region. In other words, whenever the program encounters a region showing signs of variation, it discards the existing mapping information and completely reassembles the reads in that region. This allows the HaplotypeCaller to be more accurate when calling regions that are traditionally difficult to call, for example when they contain different types of variants close to each other. It also makes the HaplotypeCaller much better at calling indels than position-based callers like UnifiedGenotyper.</p>\n\n <p>In the GVCF workflow used for scalable variant calling in DNA sequence data, HaplotypeCaller runs per-sample to generate an intermediate GVCF (not to be used in final analysis), which can then be used in GenotypeGVCFs for joint genotyping of multiple samples in a very efficient way. The GVCF workflow enables rapid incremental processing of samples as they roll off the sequencer, as well as scaling to very large cohort sizes (e.g. the 92K exomes of ExAC).</p>\n\n <p>In addition, HaplotypeCaller is able to handle non-diploid organisms as well as pooled experiment data. Note however that the algorithms used to calculate variant likelihoods is not well suited to extreme allele frequencies (relative to ploidy) so its use is not recommended for somatic (cancer) variant discovery. For that purpose, use Mutect2 instead.</p>\n\n <p>Finally, HaplotypeCaller is also able to correctly handle the splice junctions that make RNAseq a challenge for most variant callers,\n on the condition that the input read data has previously been processed according to our recommendations as documented <a href='https://software.broadinstitute.org/gatk/documentation/article?id=4067'>here</a>.</p>\n\n <h3>How HaplotypeCaller works</h3>\n\n <br />\n <h4><a href='https://software.broadinstitute.org/gatk/documentation/article?id=4147'>1. Define active regions </a></h4>\n\n <p>The program determines which regions of the genome it needs to operate on (active regions), based on the presence of\n evidence for variation.\n\n <br />\n <h4><a href='https://software.broadinstitute.org/gatk/documentation/article?id=4146'>2. Determine haplotypes by assembly of the active region </a></h4>\n\n <p>For each active region, the program builds a De Bruijn-like graph to reassemble the active region and identifies\n what are the possible haplotypes present in the data. The program then realigns each haplotype against the reference\n haplotype using the Smith-Waterman algorithm in order to identify potentially variant sites. </p>\n\n <br />\n <h4><a href='https://software.broadinstitute.org/gatk/documentation/article?id=4441'>3. Determine likelihoods of the haplotypes given the read data </a></h4>\n\n <p>For each active region, the program performs a pairwise alignment of each read against each haplotype using the\n PairHMM algorithm. This produces a matrix of likelihoods of haplotypes given the read data. These likelihoods are\n then marginalized to obtain the likelihoods of alleles for each potentially variant site given the read data.   </p>\n\n <br />\n <h4><a href='https://software.broadinstitute.org/gatk/documentation/article?id=4442'>4. Assign sample genotypes </a></h4>\n\n <p>For each potentially variant site, the program applies Bayes' rule, using the likelihoods of alleles given the\n read data to calculate the likelihoods of each genotype per sample given the read data observed for that\n sample. The most likely genotype is then assigned to the sample.    </p>\n\n <h3>Input</h3>\n <p>\n Input bam file(s) from which to make variant calls\n </p>\n\n <h3>Output</h3>\n <p>\n Either a VCF or GVCF file with raw, unfiltered SNP and indel calls. Regular VCFs must be filtered either by variant\n recalibration (Best Practice) or hard-filtering before use in downstream analyses. If using the GVCF workflow, the\n output is a GVCF file that must first be run through GenotypeGVCFs and then filtering before further analysis.\n </p>\n\n <h3>Caveats</h3>\n <ul>\n <li>We have not yet fully tested the interaction between the GVCF-based calling or the multisample calling and the\n RNAseq-specific functionalities. Use those in combination at your own risk.</li>\n </ul>\n\n <h3>Special note on ploidy</h3>\n <p>This tool is able to handle many non-diploid use cases; the desired ploidy can be specified using the -ploidy\n argument. Note however that very high ploidies (such as are encountered in large pooled experiments) may cause\n performance challenges including excessive slowness. We are working on resolving these limitations.</p>\n\n <h3>Additional Notes</h3>\n <ul>\n     <li>When working with PCR-free data, be sure to set `-pcr_indel_model NONE` (see argument below).</li>\n     <li>When running in `-ERC GVCF` or `-ERC BP_RESOLUTION` modes, the confidence threshold\n     is automatically set to 0. This cannot be overridden by the command line. The threshold can be set manually\n     to the desired level in the next step of the workflow (GenotypeGVCFs)</li>\n     <li>We recommend using a list of intervals to speed up analysis. See <a href='https://software.broadinstitute.org/gatk/documentation/article?id=4133'>this document</a> for details.</li>\n </ul>",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "GATK/GATK-MarkDuplicates.cwl",
    "sha": "14d41baf107150dae7a246e5243609bd65736ff3",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/GATK/GATK-MarkDuplicates.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gatk4:4.1.1.0--0\n  SoftwareRequirement:\n    packages:\n      gatk:\n        specs:\n          - https://identifiers.org/biotools/gatk\n          - https://anaconda.org/bioconda/gatk4\n        version: [ \"4.1.1.0\" ]\n\ninputs:\n  # REQUIRED ARGS\n\n  InputFile:\n    type: File\n    inputBinding:\n      prefix: \"--INPUT\"\n\n  Output: \n    type: string\n    default: MarkDuplicatesOut$(inputs.InputFile.nameext)\n    inputBinding:\n      prefix: \"--OUTPUT\" \n      valueFrom: MarkDuplicatesOut$(inputs.InputFile.nameext)\n\n  MetricsFile: \n    type: string\n    default: \"MarkDuplicatesMetrics.txt\"\n    inputBinding:\n      prefix: \"--METRICS_FILE\" \n      valueFrom: \"MarkDuplicatesMetrics.txt\"\n\n  # OPTIONAL ARGS\n\n  ArgumentsFile:\n    type: File[]?\n    inputBinding:\n      prefix: \"--arguments_file\"\n\n  isAssumeSortOrder:\n    type: boolean?\n    inputBinding:\n      prefix: \"--ASSUME_SORT_ORDER\"\n\n  isBarcodeTag:\n    type: boolean?\n    inputBinding:\n      prefix: \"--BARCODE_TAG\"\n  \n  isClearDT:\n    type: boolean?\n    inputBinding:\n      prefix: \"--CLEAR_DT\"\n\n  Comment:\n    type: string[]?\n    inputBinding:\n      itemSeparator: \",\"\n      prefix: \"--COMMENT\"\n  \n  DuplicateScoringStrategy:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n    inputBinding:\n      prefix: \"--DUPLICATE_SCORING_STRATEGY\"\n\n  JavaOptions: \n    type: string?\n    inputBinding:\n      prefix: \"--java_options\" \n      position: -2\n\n  MaxFileHandles:\n    type: int?\n    inputBinding:\n      prefix: \"--MAX_FILE_HANDLES_FOR_READ_ENDS_MAP\"\n\n  MaxOpticalDuplicate:\n    type: int?\n    inputBinding:\n      prefix: \"--MAX_OPTICAL_DUPLICATE_SET_SIZE\"\n\n  MaxSequenceDiskReadMap:\n    type: int?\n    inputBinding:\n      prefix: \"--MAX_SEQUENCES_FOR_DISK_READ_ENDS_MAP\"\n\n  OpticalDuplicatePixelDistance:\n    type: int?\n    inputBinding:\n      prefix: \"--OPTICAL_DUPLICATE_PIXEL_DISTANCE\"\n\n  ProgramGroupCommandLine:\n    type: string?\n    inputBinding:\n      prefix: \"--PROGRAM_GROUP_COMMAND_LINE\"\n\n  ProgramGroupName:\n    type: string?\n    inputBinding:\n      prefix: \"--PROGRAM_GROUP_NAME\"\n\n  ProgramGroupVersion:\n    type: string?\n    inputBinding:\n      prefix: \"--PROGRAM_GROUP_VERSION\"\n\n  ProgramRecordId:\n    type: string?\n    inputBinding:\n      prefix: \"--PROGRAM_RECORD_ID\"\n\n  ReadNameRegex:\n    type: string?\n    inputBinding:\n      prefix: \"--READ_NAME_REGEX\"\n\n  ReadOneBarcodeTag:\n    type: string?\n    inputBinding:\n      prefix: \"--READ_ONE_BARCODE_TAG\"\n\n  ReadTwoBarcodeTag:\n    type: string?\n    inputBinding:\n      prefix: \"--READ_TWO_BARCODE_TAG\"\n\n  isRemoveDuplicates:\n    type: boolean?\n    inputBinding:\n      prefix: \"--REMOVE_DUPLICATES\"\n\n  isRemoveSequenceDuplicates:\n    type: boolean?\n    inputBinding:\n      prefix: \"--REMOVE_SEQUENCING_DUPLICATES\"\n\n  SortingCollectionSizeRatio:\n    type: boolean?\n    inputBinding:\n      prefix: \"--SORTING_COLLECTION_SIZE_RATIO\"\n\n  isTagDuplicateSetMembers:\n    type: boolean?\n    inputBinding:\n      prefix: \"--TAG_DUPLICATE_SET_MEMBERS\"\n\n  TaggingPolicy:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n          - DontTag\n          - OpticalOnly\n          - All\n    inputBinding:\n      prefix: \"--TAGGING_POLICY\"\n\n  AddPGTagToReads:\n    type: boolean?\n    inputBinding:\n      prefix: \"--ADD_PG_TAG_TO_READS\"\n\n  CompresionLevel:\n    type: int?\n    inputBinding:\n      prefix: \"--COMPRESSION_LEVEL\"\n\n  isCreateIndex:\n    type: boolean?\n    inputBinding:\n      prefix: \"--CREATE_INDEX\"\n\n  isCreateMD5:\n    type: boolean?\n    inputBinding:\n      prefix: \"--CREATE_MD5_FILE\"\n\n  GH4Secrets:\n    type: File?\n    inputBinding:\n      prefix: \"--GA4GH_CLIENT_SECRETS\"\n\n  MaxRecordsRam:\n    type: int?\n    inputBinding:\n      prefix: \"--MAX_RECORDS_IN_RAM\"\n\n  isQuiet:\n    type: boolean?\n    inputBinding:\n      prefix: \"--QUIET\"\n\n  ReferenceSequence:\n    type: File?\n    inputBinding:\n      prefix: \"--REFERENCE_SEQUENCE\"\n\n  isJDKDeflator:\n    type: boolean?\n    inputBinding:\n      prefix: \"--USE_JDK_DEFLATER\"\n\n  isJDKInflator:\n    type: boolean?\n    inputBinding:\n      prefix: \"--USE_JDK_INFLATER\"\n\n  ValidationStringency: \n    type: \n     - \"null\"\n     - type: enum\n       symbols:\n        - STRICT\n        - LENIENT\n        - SILENT\n    inputBinding:\n      prefix: \"--VALIDATION_STRINGENCY\"\n\n  Verbosity: \n    type: \n     - \"null\"\n     - type: enum\n       symbols:\n        - ERROR\n        - WARNING\n        - INFO\n        - DEBUG\n    inputBinding:\n      prefix: \"--VERBOSITY\"\n \n  Version: \n    type: boolean?\n    inputBinding:\n      prefix: \"--version\" \n\narguments: \n  - valueFrom: \"MarkDuplicates\"\n    position: -1\n\nbaseCommand: [\"/gatk/gatk\"]\n\noutputs:\n  alignment:\n    type: File\n    outputBinding:\n      glob: MarkDuplicatesOut$(inputs.InputFile.nameext)\n  metrics:\n    type: File\n    outputBinding:\n      glob: \"MarkDuplicatesMetrics.txt\"\n  index:\n    type: File?\n    outputBinding:\n      glob: \"*.bai\"\n  vcf:\n    type: File?\n    format: edam:format_3016  # VCF\n    outputBinding:\n      glob: \"*.vcf\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'AddPGTagToReads', 'inputBinding': {'prefix': '--ADD_PG_TAG_TO_READS'}, 'type': ['null', 'boolean']}, {'id': 'ArgumentsFile', 'inputBinding': {'prefix': '--arguments_file'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'Comment', 'inputBinding': {'prefix': '--COMMENT', 'itemSeparator': ','}, 'type': ['null', {'items': 'string', 'type': 'array'}]}, {'id': 'CompresionLevel', 'inputBinding': {'prefix': '--COMPRESSION_LEVEL'}, 'type': ['null', 'int']}, {'id': 'DuplicateScoringStrategy', 'inputBinding': {'prefix': '--DUPLICATE_SCORING_STRATEGY'}, 'type': ['null', {'name': '_:0a1ff17d-0d16-4d59-8a31-ba42b463ea02', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#DuplicateScoringStrategy/SUM_OF_BASE_QUALITIES', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#DuplicateScoringStrategy/TOTAL_MAPPED_REFERENCE_LENGTH', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#DuplicateScoringStrategy/RANDOM'], 'type': 'enum'}]}, {'id': 'GH4Secrets', 'inputBinding': {'prefix': '--GA4GH_CLIENT_SECRETS'}, 'type': ['null', 'File']}, {'id': 'InputFile', 'inputBinding': {'prefix': '--INPUT'}, 'type': 'File'}, {'id': 'JavaOptions', 'inputBinding': {'position': -2, 'prefix': '--java_options'}, 'type': ['null', 'string']}, {'id': 'MaxFileHandles', 'inputBinding': {'prefix': '--MAX_FILE_HANDLES_FOR_READ_ENDS_MAP'}, 'type': ['null', 'int']}, {'id': 'MaxOpticalDuplicate', 'inputBinding': {'prefix': '--MAX_OPTICAL_DUPLICATE_SET_SIZE'}, 'type': ['null', 'int']}, {'id': 'MaxRecordsRam', 'inputBinding': {'prefix': '--MAX_RECORDS_IN_RAM'}, 'type': ['null', 'int']}, {'id': 'MaxSequenceDiskReadMap', 'inputBinding': {'prefix': '--MAX_SEQUENCES_FOR_DISK_READ_ENDS_MAP'}, 'type': ['null', 'int']}, {'id': 'MetricsFile', 'inputBinding': {'prefix': '--METRICS_FILE', 'valueFrom': 'MarkDuplicatesMetrics.txt'}, 'default': 'MarkDuplicatesMetrics.txt', 'type': 'string'}, {'id': 'OpticalDuplicatePixelDistance', 'inputBinding': {'prefix': '--OPTICAL_DUPLICATE_PIXEL_DISTANCE'}, 'type': ['null', 'int']}, {'id': 'Output', 'inputBinding': {'prefix': '--OUTPUT', 'valueFrom': 'MarkDuplicatesOut$(inputs.InputFile.nameext)'}, 'default': 'MarkDuplicatesOut$(inputs.InputFile.nameext)', 'type': 'string'}, {'id': 'ProgramGroupCommandLine', 'inputBinding': {'prefix': '--PROGRAM_GROUP_COMMAND_LINE'}, 'type': ['null', 'string']}, {'id': 'ProgramGroupName', 'inputBinding': {'prefix': '--PROGRAM_GROUP_NAME'}, 'type': ['null', 'string']}, {'id': 'ProgramGroupVersion', 'inputBinding': {'prefix': '--PROGRAM_GROUP_VERSION'}, 'type': ['null', 'string']}, {'id': 'ProgramRecordId', 'inputBinding': {'prefix': '--PROGRAM_RECORD_ID'}, 'type': ['null', 'string']}, {'id': 'ReadNameRegex', 'inputBinding': {'prefix': '--READ_NAME_REGEX'}, 'type': ['null', 'string']}, {'id': 'ReadOneBarcodeTag', 'inputBinding': {'prefix': '--READ_ONE_BARCODE_TAG'}, 'type': ['null', 'string']}, {'id': 'ReadTwoBarcodeTag', 'inputBinding': {'prefix': '--READ_TWO_BARCODE_TAG'}, 'type': ['null', 'string']}, {'id': 'ReferenceSequence', 'inputBinding': {'prefix': '--REFERENCE_SEQUENCE'}, 'type': ['null', 'File']}, {'id': 'SortingCollectionSizeRatio', 'inputBinding': {'prefix': '--SORTING_COLLECTION_SIZE_RATIO'}, 'type': ['null', 'boolean']}, {'id': 'TaggingPolicy', 'inputBinding': {'prefix': '--TAGGING_POLICY'}, 'type': ['null', {'name': '_:cb19f6bc-efb3-4c05-8577-0681b2dd2aac', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#TaggingPolicy/DontTag', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#TaggingPolicy/OpticalOnly', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#TaggingPolicy/All'], 'type': 'enum'}]}, {'id': 'ValidationStringency', 'inputBinding': {'prefix': '--VALIDATION_STRINGENCY'}, 'type': ['null', {'name': '_:5156c4de-7cd9-4f04-962c-b567f57c2297', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ValidationStringency/STRICT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ValidationStringency/LENIENT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ValidationStringency/SILENT'], 'type': 'enum'}]}, {'id': 'Verbosity', 'inputBinding': {'prefix': '--VERBOSITY'}, 'type': ['null', {'name': '_:2ae233df-77f3-4d14-a95c-75f8fcebd5af', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#Verbosity/ERROR', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#Verbosity/WARNING', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#Verbosity/INFO', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#Verbosity/DEBUG'], 'type': 'enum'}]}, {'id': 'Version', 'inputBinding': {'prefix': '--version'}, 'type': ['null', 'boolean']}, {'id': 'isAssumeSortOrder', 'inputBinding': {'prefix': '--ASSUME_SORT_ORDER'}, 'type': ['null', 'boolean']}, {'id': 'isBarcodeTag', 'inputBinding': {'prefix': '--BARCODE_TAG'}, 'type': ['null', 'boolean']}, {'id': 'isClearDT', 'inputBinding': {'prefix': '--CLEAR_DT'}, 'type': ['null', 'boolean']}, {'id': 'isCreateIndex', 'inputBinding': {'prefix': '--CREATE_INDEX'}, 'type': ['null', 'boolean']}, {'id': 'isCreateMD5', 'inputBinding': {'prefix': '--CREATE_MD5_FILE'}, 'type': ['null', 'boolean']}, {'id': 'isJDKDeflator', 'inputBinding': {'prefix': '--USE_JDK_DEFLATER'}, 'type': ['null', 'boolean']}, {'id': 'isJDKInflator', 'inputBinding': {'prefix': '--USE_JDK_INFLATER'}, 'type': ['null', 'boolean']}, {'id': 'isQuiet', 'inputBinding': {'prefix': '--QUIET'}, 'type': ['null', 'boolean']}, {'id': 'isRemoveDuplicates', 'inputBinding': {'prefix': '--REMOVE_DUPLICATES'}, 'type': ['null', 'boolean']}, {'id': 'isRemoveSequenceDuplicates', 'inputBinding': {'prefix': '--REMOVE_SEQUENCING_DUPLICATES'}, 'type': ['null', 'boolean']}, {'id': 'isTagDuplicateSetMembers', 'inputBinding': {'prefix': '--TAG_DUPLICATE_SET_MEMBERS'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'alignment', 'outputBinding': {'glob': 'MarkDuplicatesOut$(inputs.InputFile.nameext)'}, 'type': 'File'}, {'id': 'index', 'outputBinding': {'glob': '*.bai'}, 'type': ['null', 'File']}, {'id': 'metrics', 'outputBinding': {'glob': 'MarkDuplicatesMetrics.txt'}, 'type': 'File'}, {'id': 'vcf', 'outputBinding': {'glob': '*.vcf'}, 'format': 'http://edamontology.org/format_3016', 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gatk4:4.1.1.0--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gatk', 'version': ['4.1.1.0'], 'specs': ['https://identifiers.org/biotools/gatk', 'https://anaconda.org/bioconda/gatk4']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['/gatk/gatk']",
    "cwl_arguments": "[{'position': -1, 'valueFrom': 'MarkDuplicates'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "GATK/GATK-SelectVariants.cwl",
    "sha": "ffd5c4e2dcb154d9c97027e9c756310de481bba9",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/GATK/GATK-SelectVariants.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand:\n- gatk\n- SelectVariants\n\ndoc: |-\n  Select a subset of variants from a VCF file\n\n   <p>This tool makes it possible to select a subset of variants based on various criteria in order to facilitate certain\n   analyses. Examples of such analyses include comparing and contrasting cases vs. controls, extracting variant or\n   non-variant loci that meet certain requirements, or troubleshooting some unexpected results, to name a few.</p>\n\n   <p>\n   There are many different options for selecting subsets of variants from a larger callset:\n   <ul>\n       <li>Extract one or more samples from a callset based on either a complete sample name or a pattern match.</li>\n       <li>Specify criteria for inclusion that place thresholds on annotation values, e.g. \"DP > 1000\" (depth of\n       coverage greater than 1000x), \"AF < 0.25\" (sites with allele frequency less than 0.25). These criteria are written\n       as \"JEXL expressions\", which are documented in the\n       <a href=\"https://www.broadinstitute.org/gatk/guide/article?id=1255\">article about using JEXL expressions</a>.</li>\n       <li>Provide concordance or discordance tracks in order to include or exclude variants that are also present\n       in other given callsets.</li>\n       <li>Select variants based on criteria like their type (e.g. INDELs only), evidence of mendelian violation,\n       filtering status, allelicity, etc.</li>\n   </ul>\n   </p>\n\n   <p>There are also several options for recording the original values of certain annotations which are recalculated\n   when one subsets the new callset, trims alleles, etc.</p>\n\n   <h3>Input</h3>\n   <p>\n   A variant call set in VCF format from which a subset can be selected.\n   </p>\n\n   <h3>Output</h3>\n   <p>\n   A new VCF file containing the selected subset of variants.\n   </p>\n\n   * <h3>Usage examples</h3>\n   <h4>Select SNPs</h4>\n   <pre>\n       gatk SelectVariants \\\n       -R Homo_sapiens_assembly38.fasta \\\n       -V input.vcf \\\n       --select-type-to-include SNP \\\n       -O output.vcf\n   </pre>\n\n   <h4>Query Chromosome 20 Variants from a GenomicsDB</h4>\n   <pre>\n       gatk SelectVariants \\\n       -R Homo_sapiens_assembly38.fasta \\\n       -V gendb://genomicsDB \\\n       -L 20 \\\n       -O output.chr20.vcf\n   </pre>\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement:\n    expressionLib:\n    - |\n      /**\n       * File of functions to be added to cwl files\n       */\n\n      function generateGATK4BooleanValue(){\n          /**\n           * Boolean types in GATK 4 are expressed on the command line as --<PREFIX> \"true\"/\"false\",\n           * so patch here\n           */\n          if(self === true || self === false){\n              return self.toString()\n          }\n\n          return self;\n      }\n\n      function applyTagsToArgument(prefix, tags){\n          /**\n           * Function to be used in the field valueFrom of File objects to add gatk tags.\n           */\n\n          if(!self){\n              return null;\n          }\n          else if(!tags){\n              return generateArrayCmd(prefix);\n          }\n          else{\n              function addTagToArgument(tagObject, argument){\n                  var allTags = Array.isArray(tagObject) ? tagObject.join(\",\") : tagObject;\n\n                  return [prefix + \":\" + allTags, argument];\n              }\n\n              if(Array.isArray(self)){\n                  if(!Array.isArray(tags) || self.length !== tags.length){\n                      throw new TypeError(\"Argument '\" + prefix + \"' tag field is invalid\");\n                  }\n\n                  var value = self.map(function(element, i) {\n                      return addTagToArgument(tags[i], element);\n                  }).reduce(function(a, b){return a.concat(b)})\n\n                  return value;\n              }\n              else{\n                  return addTagToArgument(tags, self);\n              }\n          }\n      }\n\n      function generateArrayCmd(prefix){\n          /**\n           * Function to be used in the field valueFrom of array objects, so that arrays are optional\n           * and prefixes are handled properly.\n           *\n           * The issue that this solves is documented here:\n           * https://www.biostars.org/p/258414/#260140\n           */\n          if(!self){\n              return null;\n          }\n\n          if(!Array.isArray(self)){\n              self = [self];\n          }\n\n          var output = [];\n          self.forEach(function(element) {\n              output.push(prefix);\n              output.push(element);\n          })\n\n          return output;\n      }\n\n      /* Polyfill String.endsWith (it was introduced in ES6, but CWL 1.0 only supports ES5) */\n      String.prototype.endsWith = String.prototype.endsWith || function(suffix) {\n          return this.indexOf(suffix, this.length - suffix.length) >= 0;\n      };\n  SchemaDefRequirement:\n    types:\n      - type: enum\n        name: variants_type\n        symbols:\n         - INDEL\n         - SNP\n         - MIXED\n         - MNP\n         - SYMBOLIC\n         - NO_VARIATION\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gatk4:4.1.6.0--py38_0\n  SoftwareRequirement:\n    packages:\n      gatk:\n        specs:\n          - https://identifiers.org/biotools/gatk\n          - https://anaconda.org/bioconda/gatk4\n        version: [ \"4.1.6.0\" ]\ninputs:\n- doc: Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise,\n    overrides threshold fraction.\n  id: ambig-filter-bases\n  type: int?\n  inputBinding:\n    prefix: --ambig-filter-bases\n- doc: Threshold fraction of ambiguous bases\n  id: ambig-filter-frac\n  type: double?\n  inputBinding:\n    prefix: --ambig-filter-frac\n- doc: Maximum length of fragment (insert size)\n  id: max-fragment-length\n  type: int?\n  inputBinding:\n    prefix: --max-fragment-length\n- doc: Minimum length of fragment (insert size)\n  id: min-fragment-length\n  type: int?\n  inputBinding:\n    prefix: --min-fragment-length\n- doc: One or more genomic intervals to keep\n  id: keep-intervals\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--keep-intervals\"))\n- doc: Name of the library to keep\n  id: library\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--library\"))\n- doc: Maximum mapping quality to keep (inclusive)\n  id: maximum-mapping-quality\n  type: int?\n  inputBinding:\n    prefix: --maximum-mapping-quality\n- doc: Minimum mapping quality to keep (inclusive)\n  id: minimum-mapping-quality\n  type: int?\n  inputBinding:\n    prefix: --minimum-mapping-quality\n- doc: Minimum start location difference at which mapped mates are considered distant\n  id: mate-too-distant-length\n  type: int?\n  inputBinding:\n    prefix: --mate-too-distant-length\n- doc: Allow a read to be filtered out based on having only 1 soft-clipped block.\n    By default, both ends must have a soft-clipped block, setting this flag requires\n    only 1 soft-clipped block\n  id: dont-require-soft-clips-both-ends\n  type: boolean?\n  inputBinding:\n    prefix: --dont-require-soft-clips-both-ends\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Minimum number of aligned bases\n  id: filter-too-short\n  type: int?\n  inputBinding:\n    prefix: --filter-too-short\n- doc: Platform attribute (PL) to match\n  id: platform-filter-name\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--platform-filter-name\"))\n- doc: Platform unit (PU) to filter out\n  id: black-listed-lanes\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--black-listed-lanes\"))\n- doc: A read group filter expression in the form \"attribute:value\", where \"attribute\"\n    is a two character read group attribute such as \"RG\" or \"PU\".\n  id: read-group-black-list\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--read-group-black-list\"))\n- doc: The name of the read group to keep\n  id: keep-read-group\n  type: string?\n  inputBinding:\n    prefix: --keep-read-group\n- doc: Keep only reads with length at most equal to the specified value\n  id: max-read-length\n  type: int?\n  inputBinding:\n    prefix: --max-read-length\n- doc: Keep only reads with length at least equal to the specified value\n  id: min-read-length\n  type: int?\n  inputBinding:\n    prefix: --min-read-length\n- doc: Keep only reads with this read name\n  id: read-name\n  type: string?\n  inputBinding:\n    prefix: --read-name\n- doc: Keep only reads on the reverse strand\n  id: keep-reverse-strand-only\n  type: boolean?\n  inputBinding:\n    prefix: --keep-reverse-strand-only\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: The name of the sample(s) to keep, filtering out all others\n  id: sample\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--sample\"))\n- doc: Inverts the results from this filter, causing all variants that would pass\n    to fail and visa-versa.\n  id: invert-soft-clip-ratio-filter\n  type: boolean?\n  inputBinding:\n    prefix: --invert-soft-clip-ratio-filter\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Threshold ratio of soft clipped bases (leading / trailing the cigar string)\n    to total bases in read for read to be filtered.\n  id: soft-clipped-leading-trailing-ratio\n  type: double?\n  inputBinding:\n    prefix: --soft-clipped-leading-trailing-ratio\n- doc: Threshold ratio of soft clipped bases (anywhere in the cigar string) to total\n    bases in read for read to be filtered.\n  id: soft-clipped-ratio-threshold\n  type: double?\n  inputBinding:\n    prefix: --soft-clipped-ratio-threshold\n- doc: If true, adds a PG tag to created SAM/BAM/CRAM files.\n  id: add-output-sam-program-record\n  type: boolean?\n  inputBinding:\n    prefix: --add-output-sam-program-record\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, adds a command line header line to created VCF files.\n  id: add-output-vcf-command-line\n  type: boolean?\n  inputBinding:\n    prefix: --add-output-vcf-command-line\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: read one or more arguments files and add them to the command line\n  id: arguments_file\n  type:\n  - 'null'\n  - type: array\n    items: File\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--arguments_file\", inputs['arguments_file_tags']))\n- doc: A argument to set the tags of 'arguments_file'\n  id: arguments_file_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer\n    if unset. [synonymous with -CIPB]\n  id: cloud-index-prefetch-buffer\n  type: int?\n  inputBinding:\n    prefix: --cloud-index-prefetch-buffer\n- doc: Size of the cloud-only prefetch buffer (in MB; 0 to disable). [synonymous with\n    -CPB]\n  id: cloud-prefetch-buffer\n  type: int?\n  inputBinding:\n    prefix: --cloud-prefetch-buffer\n- doc: Output variants also called in this comparison track [synonymous with -conc]\n  id: concordance\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--concordance\", inputs['concordance_tags']))\n- doc: A argument to set the tags of 'concordance'\n  id: concordance_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM\n    file. [synonymous with -OBI]\n  id: create-output-bam-index\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-bam-index\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a MD5 digest for any BAM/SAM/CRAM file created [synonymous\n    with -OBM]\n  id: create-output-bam-md5\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-bam-md5\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a VCF index when writing a coordinate-sorted VCF file. [synonymous\n    with -OVI]\n  id: create-output-variant-index\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-variant-index\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a a MD5 digest any VCF file created. [synonymous with -OVM]\n  id: create-output-variant-md5\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-variant-md5\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, don't cache bam indexes, this will reduce memory requirements but\n    may harm performance if many intervals are specified.  Caching is automatically\n    disabled if there are no intervals specified. [synonymous with -DBIC]\n  id: disable-bam-index-caching\n  type: boolean?\n  inputBinding:\n    prefix: --disable-bam-index-caching\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Read filters to be disabled before analysis [synonymous with -DF]\n  id: disable-read-filter\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--disable-read-filter\"))\n- doc: If specified, do not check the sequence dictionaries from our inputs for compatibility.\n    Use at your own risk!\n  id: disable-sequence-dictionary-validation\n  type: boolean?\n  inputBinding:\n    prefix: --disable-sequence-dictionary-validation\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: 'Disable all tool default read filters (WARNING: many tools will not function\n    correctly without their default read filters on)'\n  id: disable-tool-default-read-filters\n  type: boolean?\n  inputBinding:\n    prefix: --disable-tool-default-read-filters\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Output variants not called in this comparison track [synonymous with -disc]\n  id: discordance\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--discordance\", inputs['discordance_tags']))\n- doc: A argument to set the tags of 'discordance'\n  id: discordance_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Genotype annotations to drop from output vcf.  Annotations to be dropped are\n    specified by their key. [synonymous with -DGA]\n  id: drop-genotype-annotation\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--drop-genotype-annotation\"))\n- doc: Info annotations to drop from output vcf.  Annotations to be dropped are specified\n    by their key. [synonymous with -DA]\n  id: drop-info-annotation\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--drop-info-annotation\"))\n- doc: Don't include filtered sites\n  id: exclude-filtered\n  type: boolean?\n  inputBinding:\n    prefix: --exclude-filtered\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: List of variant rsIDs to exclude [synonymous with -xl-ids]\n  id: exclude-ids\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--exclude-ids\"))\n- doc: One or more genomic intervals to exclude from processing [synonymous with -XL]\n  id: exclude-intervals\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--exclude-intervals\"))\n- doc: Don't include non-variant sites\n  id: exclude-non-variants\n  type: boolean?\n  inputBinding:\n    prefix: --exclude-non-variants\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: List of sample expressions to exclude [synonymous with -xl-se]\n  id: exclude-sample-expressions\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--exclude-sample-expressions\"))\n- doc: Exclude genotypes from this sample [synonymous with -xl-sn]\n  id: exclude-sample-name\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--exclude-sample-name\"))\n- doc: A configuration file to use with the GATK.\n  id: gatk-config-file\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--gatk-config-file\", inputs['gatk-config-file_tags']))\n- doc: A argument to set the tags of 'gatk-config-file'\n  id: gatk-config-file_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: If the GCS bucket channel errors out, how many times it will attempt to re-initiate\n    the connection [synonymous with -gcs-retries]\n  id: gcs-max-retries\n  type: int?\n  inputBinding:\n    prefix: --gcs-max-retries\n- doc: Project to bill when accessing \"requester pays\" buckets. If unset, these buckets\n    cannot be accessed.\n  id: gcs-project-for-requester-pays\n  type: string?\n  inputBinding:\n    prefix: --gcs-project-for-requester-pays\n- doc: Use VCF Codec Streaming for data from GenomicsDB instead of the default BCF\n  id: genomicsdb-use-vcf-codec\n  type: boolean?\n  inputBinding:\n    prefix: --genomicsdb-use-vcf-codec\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: BAM/SAM/CRAM file containing reads [synonymous with -I]\n  id: input\n  type:\n  - 'null'\n  - type: array\n    items: File\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--input\", inputs['input_tags']))\n  secondaryFiles: $(self.basename + self.nameext.replace('m','i'))\n- doc: A argument to set the tags of 'input'\n  id: input_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Amount of padding (in bp) to add to each interval you are excluding. [synonymous\n    with -ixp]\n  id: interval-exclusion-padding\n  type: int?\n  inputBinding:\n    prefix: --interval-exclusion-padding\n- doc: Interval merging rule for abutting intervals [synonymous with -imr]\n  id: interval-merging-rule\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - ALL\n    - OVERLAPPING_ONLY\n  inputBinding:\n    prefix: --interval-merging-rule\n- doc: Amount of padding (in bp) to add to each interval you are including. [synonymous\n    with -ip]\n  id: interval-padding\n  type: int?\n  inputBinding:\n    prefix: --interval-padding\n- doc: Set merging approach to use for combining interval inputs [synonymous with\n    -isr]\n  id: interval-set-rule\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - UNION\n    - INTERSECTION\n  inputBinding:\n    prefix: --interval-set-rule\n- doc: One or more genomic intervals over which to operate [synonymous with -L]\n  id: intervals\n  type:\n  - 'null'\n  - type: array\n    items:\n    - File\n    - string\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  - string\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--intervals\", inputs['intervals_tags']))\n- doc: A argument to set the tags of 'intervals'\n  id: intervals_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Output non-mendelian violation sites only\n  id: invert-mendelian-violation\n  type: boolean?\n  inputBinding:\n    prefix: --invert-mendelian-violation\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Invert the selection criteria for -select [synonymous with -invert-select]\n  id: invertSelect\n  type: boolean?\n  inputBinding:\n    prefix: --invertSelect\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: List of variant rsIDs to select [synonymous with -ids]\n  id: keep-ids\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--keep-ids\"))\n- doc: Store the original AC, AF, and AN values after subsetting\n  id: keep-original-ac\n  type: boolean?\n  inputBinding:\n    prefix: --keep-original-ac\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Store the original DP value after subsetting\n  id: keep-original-dp\n  type: boolean?\n  inputBinding:\n    prefix: --keep-original-dp\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Lenient processing of VCF files [synonymous with -LE]\n  id: lenient\n  type: boolean?\n  inputBinding:\n    prefix: --lenient\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Maximum number of samples filtered at the genotype level\n  id: max-filtered-genotypes\n  type: int?\n  inputBinding:\n    prefix: --max-filtered-genotypes\n- doc: Maximum fraction of samples filtered at the genotype level\n  id: max-fraction-filtered-genotypes\n  type: double?\n  inputBinding:\n    prefix: --max-fraction-filtered-genotypes\n- doc: Maximum size of indels to include\n  id: max-indel-size\n  type: int?\n  inputBinding:\n    prefix: --max-indel-size\n- doc: Maximum fraction of samples with no-call genotypes\n  id: max-nocall-fraction\n  type: double?\n  inputBinding:\n    prefix: --max-nocall-fraction\n- doc: Maximum number of samples with no-call genotypes\n  id: max-nocall-number\n  type: int?\n  inputBinding:\n    prefix: --max-nocall-number\n- doc: Output mendelian violation sites only\n  id: mendelian-violation\n  type: boolean?\n  inputBinding:\n    prefix: --mendelian-violation\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Minimum GQ score for each trio member to accept a site as a violation\n  id: mendelian-violation-qual-threshold\n  type: double?\n  inputBinding:\n    prefix: --mendelian-violation-qual-threshold\n- doc: Minimum number of samples filtered at the genotype level\n  id: min-filtered-genotypes\n  type: int?\n  inputBinding:\n    prefix: --min-filtered-genotypes\n- doc: Maximum fraction of samples filtered at the genotype level\n  id: min-fraction-filtered-genotypes\n  type: double?\n  inputBinding:\n    prefix: --min-fraction-filtered-genotypes\n- doc: Minimum size of indels to include\n  id: min-indel-size\n  type: int?\n  inputBinding:\n    prefix: --min-indel-size\n- doc: Path to which variants should be written [synonymous with -O]\n  id: output_filename\n  type: string\n  inputBinding:\n    prefix: --output\n- doc: Pedigree file [synonymous with -ped]\n  id: pedigree\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--pedigree\", inputs['pedigree_tags']))\n- doc: A argument to set the tags of 'pedigree'\n  id: pedigree_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Preserve original alleles, do not trim\n  id: preserve-alleles\n  type: boolean?\n  inputBinding:\n    prefix: --preserve-alleles\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Whether to suppress job-summary info on System.err.\n  id: QUIET\n  type: boolean?\n  inputBinding:\n    prefix: --QUIET\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Read filters to be applied before analysis [synonymous with -RF]\n  id: read-filter\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--read-filter\"))\n- doc: Indices to use for the read inputs. If specified, an index must be provided\n    for every read input and in the same order as the read inputs. If this argument\n    is not specified, the path to the index for each input will be inferred automatically.\n  id: read-index\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--read-index\"))\n- doc: Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The\n    default stringency value SILENT can improve performance when processing a BAM\n    file in which variable-length data (read, qualities, tags) do not otherwise need\n    to be decoded. [synonymous with -VS]\n  id: read-validation-stringency\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - STRICT\n    - LENIENT\n    - SILENT\n  inputBinding:\n    prefix: --read-validation-stringency\n- doc: Reference sequence [synonymous with -R]\n  id: reference\n  type: File?\n  inputBinding:\n    prefix: --reference\n  secondaryFiles:\n  - .fai\n  - ^.dict\n- doc: Select a fraction of genotypes at random from the input and sets them to no-call\n  id: remove-fraction-genotypes\n  type: double?\n  inputBinding:\n    prefix: --remove-fraction-genotypes\n- doc: Remove alternate alleles not present in any genotypes\n  id: remove-unused-alternates\n  type: boolean?\n  inputBinding:\n    prefix: --remove-unused-alternates\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Select only variants of a particular allelicity\n  id: restrict-alleles-to\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - ALL\n    - BIALLELIC\n    - MULTIALLELIC\n  inputBinding:\n    prefix: --restrict-alleles-to\n- doc: Regular expression to select multiple samples [synonymous with -se]\n  id: sample-expressions\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--sample-expressions\"))\n- doc: Include genotypes from this sample [synonymous with -sn]\n  id: sample-name\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--sample-name\"))\n- doc: Output traversal statistics every time this many seconds elapse\n  id: seconds-between-progress-updates\n  type: double?\n  inputBinding:\n    prefix: --seconds-between-progress-updates\n- doc: Select a fraction of variants at random from the input [synonymous with -fraction]\n  id: select-random-fraction\n  type: double?\n  inputBinding:\n    prefix: --select-random-fraction\n# - doc: Do not select certain type of variants from the input file [synonymous with\n#     -xl-select-type]\n#   id: select_type_to_exclude\n#   type:\n#   - 'null'\n#   - type: array\n#     items: variants_type\n#     inputBinding:\n#       valueFrom: $(null)\n#   - variants_type\n#   inputBinding:\n#     valueFrom: $(generateArrayCmd(\"--select-type-to-exclude\"))\n- doc: Select only a certain type of variants from the input file [synonymous with\n    -select-type]\n  id: select_type_to_include\n  type: string # \"variants_type?\"\n  # - 'null'\n  # - type: array\n  #   items: variants_type\n  #   inputBinding:\n  #     valueFrom: $(null)\n  # - variants_type\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--select-type-to-include\"))\n- doc: One or more criteria to use when selecting the data [synonymous with -select]\n  id: selectExpressions\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--selectExpressions\"))\n- doc: Use the given sequence dictionary as the master/canonical sequence dictionary.  Must\n    be a .dict file.\n  id: sequence-dictionary\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--sequence-dictionary\", inputs['sequence-dictionary_tags']))\n- doc: A argument to set the tags of 'sequence-dictionary'\n  id: sequence-dictionary_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Set filtered genotypes to no-call\n  id: set-filtered-gt-to-nocall\n  type: boolean?\n  inputBinding:\n    prefix: --set-filtered-gt-to-nocall\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: display hidden arguments\n  id: showHidden\n  type: boolean?\n  inputBinding:\n    prefix: --showHidden\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, don't emit genotype fields when writing vcf file output.\n  id: sites-only-vcf-output\n  type: boolean?\n  inputBinding:\n    prefix: --sites-only-vcf-output\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Temp directory to use.\n  id: tmp-dir\n  type: string?\n  inputBinding:\n    prefix: --tmp-dir\n- doc: Whether to use the JdkDeflater (as opposed to IntelDeflater) [synonymous with\n    -jdk-deflater]\n  id: use-jdk-deflater\n  type: boolean?\n  inputBinding:\n    prefix: --use-jdk-deflater\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Whether to use the JdkInflater (as opposed to IntelInflater) [synonymous with\n    -jdk-inflater]\n  id: use-jdk-inflater\n  type: boolean?\n  inputBinding:\n    prefix: --use-jdk-inflater\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: A VCF file containing variants [synonymous with -V]\n  id: variant\n  type: File\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--variant\", inputs['variant_tags']))\n- doc: A argument to set the tags of 'variant'\n  id: variant_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Control verbosity of logging.\n  id: verbosity\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - ERROR\n    - WARNING\n    - INFO\n    - DEBUG\n  inputBinding:\n    prefix: --verbosity\n- doc: display the version number for this tool\n  id: version\n  type: boolean?\n  inputBinding:\n    prefix: --version\n    valueFrom: $(generateGATK4BooleanValue())\noutputs:\n- id: output\n  doc: Output file from corresponding to the input argument output-filename\n  type: File\n  outputBinding:\n    glob: $(inputs.output_filename)\n  secondaryFiles:\n  - \"$(inputs['create-output-variant-index']? self.basename + (inputs.output_filename.endsWith('.gz')?\\\n    \\ '.tbi':'.idx') : [])\"\n  - \"$(inputs['create-output-variant-md5']? self.basename + '.md5' : [])\"\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'ambig-filter-bases', 'doc': 'Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction.', 'inputBinding': {'prefix': '--ambig-filter-bases'}, 'type': ['null', 'int']}, {'id': 'ambig-filter-frac', 'doc': 'Threshold fraction of ambiguous bases', 'inputBinding': {'prefix': '--ambig-filter-frac'}, 'type': ['null', 'double']}, {'id': 'max-fragment-length', 'doc': 'Maximum length of fragment (insert size)', 'inputBinding': {'prefix': '--max-fragment-length'}, 'type': ['null', 'int']}, {'id': 'min-fragment-length', 'doc': 'Minimum length of fragment (insert size)', 'inputBinding': {'prefix': '--min-fragment-length'}, 'type': ['null', 'int']}, {'id': 'keep-intervals', 'doc': 'One or more genomic intervals to keep', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--keep-intervals\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'library', 'doc': 'Name of the library to keep', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--library\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'maximum-mapping-quality', 'doc': 'Maximum mapping quality to keep (inclusive)', 'inputBinding': {'prefix': '--maximum-mapping-quality'}, 'type': ['null', 'int']}, {'id': 'minimum-mapping-quality', 'doc': 'Minimum mapping quality to keep (inclusive)', 'inputBinding': {'prefix': '--minimum-mapping-quality'}, 'type': ['null', 'int']}, {'id': 'mate-too-distant-length', 'doc': 'Minimum start location difference at which mapped mates are considered distant', 'inputBinding': {'prefix': '--mate-too-distant-length'}, 'type': ['null', 'int']}, {'id': 'dont-require-soft-clips-both-ends', 'doc': 'Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block', 'inputBinding': {'prefix': '--dont-require-soft-clips-both-ends', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'filter-too-short', 'doc': 'Minimum number of aligned bases', 'inputBinding': {'prefix': '--filter-too-short'}, 'type': ['null', 'int']}, {'id': 'platform-filter-name', 'doc': 'Platform attribute (PL) to match', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--platform-filter-name\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'black-listed-lanes', 'doc': 'Platform unit (PU) to filter out', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--black-listed-lanes\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'read-group-black-list', 'doc': 'A read group filter expression in the form \"attribute:value\", where \"attribute\" is a two character read group attribute such as \"RG\" or \"PU\".', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--read-group-black-list\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'keep-read-group', 'doc': 'The name of the read group to keep', 'inputBinding': {'prefix': '--keep-read-group'}, 'type': ['null', 'string']}, {'id': 'max-read-length', 'doc': 'Keep only reads with length at most equal to the specified value', 'inputBinding': {'prefix': '--max-read-length'}, 'type': ['null', 'int']}, {'id': 'min-read-length', 'doc': 'Keep only reads with length at least equal to the specified value', 'inputBinding': {'prefix': '--min-read-length'}, 'type': ['null', 'int']}, {'id': 'read-name', 'doc': 'Keep only reads with this read name', 'inputBinding': {'prefix': '--read-name'}, 'type': ['null', 'string']}, {'id': 'keep-reverse-strand-only', 'doc': 'Keep only reads on the reverse strand', 'inputBinding': {'prefix': '--keep-reverse-strand-only', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'sample', 'doc': 'The name of the sample(s) to keep, filtering out all others', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--sample\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'invert-soft-clip-ratio-filter', 'doc': 'Inverts the results from this filter, causing all variants that would pass to fail and visa-versa.', 'inputBinding': {'prefix': '--invert-soft-clip-ratio-filter', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'soft-clipped-leading-trailing-ratio', 'doc': 'Threshold ratio of soft clipped bases (leading / trailing the cigar string) to total bases in read for read to be filtered.', 'inputBinding': {'prefix': '--soft-clipped-leading-trailing-ratio'}, 'type': ['null', 'double']}, {'id': 'soft-clipped-ratio-threshold', 'doc': 'Threshold ratio of soft clipped bases (anywhere in the cigar string) to total bases in read for read to be filtered.', 'inputBinding': {'prefix': '--soft-clipped-ratio-threshold'}, 'type': ['null', 'double']}, {'id': 'add-output-sam-program-record', 'doc': 'If true, adds a PG tag to created SAM/BAM/CRAM files.', 'inputBinding': {'prefix': '--add-output-sam-program-record', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'add-output-vcf-command-line', 'doc': 'If true, adds a command line header line to created VCF files.', 'inputBinding': {'prefix': '--add-output-vcf-command-line', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'arguments_file', 'doc': 'read one or more arguments files and add them to the command line', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--arguments_file\", inputs[\\'arguments_file_tags\\']))'}, 'type': ['null', {'items': 'File', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File']}, {'id': 'arguments_file_tags', 'doc': \"A argument to set the tags of 'arguments_file'\", 'type': ['null', {'items': ['string', {'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'cloud-index-prefetch-buffer', 'doc': 'Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. [synonymous with -CIPB]', 'inputBinding': {'prefix': '--cloud-index-prefetch-buffer'}, 'type': ['null', 'int']}, {'id': 'cloud-prefetch-buffer', 'doc': 'Size of the cloud-only prefetch buffer (in MB; 0 to disable). [synonymous with -CPB]', 'inputBinding': {'prefix': '--cloud-prefetch-buffer'}, 'type': ['null', 'int']}, {'id': 'concordance', 'doc': 'Output variants also called in this comparison track [synonymous with -conc]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--concordance\", inputs[\\'concordance_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'concordance_tags', 'doc': \"A argument to set the tags of 'concordance'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'create-output-bam-index', 'doc': 'If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. [synonymous with -OBI]', 'inputBinding': {'prefix': '--create-output-bam-index', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'create-output-bam-md5', 'doc': 'If true, create a MD5 digest for any BAM/SAM/CRAM file created [synonymous with -OBM]', 'inputBinding': {'prefix': '--create-output-bam-md5', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'create-output-variant-index', 'doc': 'If true, create a VCF index when writing a coordinate-sorted VCF file. [synonymous with -OVI]', 'inputBinding': {'prefix': '--create-output-variant-index', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'create-output-variant-md5', 'doc': 'If true, create a a MD5 digest any VCF file created. [synonymous with -OVM]', 'inputBinding': {'prefix': '--create-output-variant-md5', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'disable-bam-index-caching', 'doc': \"If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified.  Caching is automatically disabled if there are no intervals specified. [synonymous with -DBIC]\", 'inputBinding': {'prefix': '--disable-bam-index-caching', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'disable-read-filter', 'doc': 'Read filters to be disabled before analysis [synonymous with -DF]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--disable-read-filter\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'disable-sequence-dictionary-validation', 'doc': 'If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk!', 'inputBinding': {'prefix': '--disable-sequence-dictionary-validation', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'disable-tool-default-read-filters', 'doc': 'Disable all tool default read filters (WARNING: many tools will not function correctly without their default read filters on)', 'inputBinding': {'prefix': '--disable-tool-default-read-filters', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'discordance', 'doc': 'Output variants not called in this comparison track [synonymous with -disc]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--discordance\", inputs[\\'discordance_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'discordance_tags', 'doc': \"A argument to set the tags of 'discordance'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'drop-genotype-annotation', 'doc': 'Genotype annotations to drop from output vcf.  Annotations to be dropped are specified by their key. [synonymous with -DGA]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--drop-genotype-annotation\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'drop-info-annotation', 'doc': 'Info annotations to drop from output vcf.  Annotations to be dropped are specified by their key. [synonymous with -DA]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--drop-info-annotation\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'exclude-filtered', 'doc': \"Don't include filtered sites\", 'inputBinding': {'prefix': '--exclude-filtered', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'exclude-ids', 'doc': 'List of variant rsIDs to exclude [synonymous with -xl-ids]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--exclude-ids\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'exclude-intervals', 'doc': 'One or more genomic intervals to exclude from processing [synonymous with -XL]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--exclude-intervals\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'exclude-non-variants', 'doc': \"Don't include non-variant sites\", 'inputBinding': {'prefix': '--exclude-non-variants', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'exclude-sample-expressions', 'doc': 'List of sample expressions to exclude [synonymous with -xl-se]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--exclude-sample-expressions\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'exclude-sample-name', 'doc': 'Exclude genotypes from this sample [synonymous with -xl-sn]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--exclude-sample-name\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'gatk-config-file', 'doc': 'A configuration file to use with the GATK.', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--gatk-config-file\", inputs[\\'gatk-config-file_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'gatk-config-file_tags', 'doc': \"A argument to set the tags of 'gatk-config-file'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'gcs-max-retries', 'doc': 'If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection [synonymous with -gcs-retries]', 'inputBinding': {'prefix': '--gcs-max-retries'}, 'type': ['null', 'int']}, {'id': 'gcs-project-for-requester-pays', 'doc': 'Project to bill when accessing \"requester pays\" buckets. If unset, these buckets cannot be accessed.', 'inputBinding': {'prefix': '--gcs-project-for-requester-pays'}, 'type': ['null', 'string']}, {'id': 'genomicsdb-use-vcf-codec', 'doc': 'Use VCF Codec Streaming for data from GenomicsDB instead of the default BCF', 'inputBinding': {'prefix': '--genomicsdb-use-vcf-codec', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'input', 'secondaryFiles': \"$(self.basename + self.nameext.replace('m','i'))\", 'doc': 'BAM/SAM/CRAM file containing reads [synonymous with -I]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--input\", inputs[\\'input_tags\\']))'}, 'type': ['null', {'items': 'File', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File']}, {'id': 'input_tags', 'doc': \"A argument to set the tags of 'input'\", 'type': ['null', {'items': ['string', {'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'interval-exclusion-padding', 'doc': 'Amount of padding (in bp) to add to each interval you are excluding. [synonymous with -ixp]', 'inputBinding': {'prefix': '--interval-exclusion-padding'}, 'type': ['null', 'int']}, {'id': 'interval-merging-rule', 'doc': 'Interval merging rule for abutting intervals [synonymous with -imr]', 'inputBinding': {'prefix': '--interval-merging-rule'}, 'type': ['null', {'name': '_:06090ef8-b6f1-4fe3-9cc9-24e2aa82c620', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-merging-rule/ALL', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-merging-rule/OVERLAPPING_ONLY'], 'type': 'enum'}]}, {'id': 'interval-padding', 'doc': 'Amount of padding (in bp) to add to each interval you are including. [synonymous with -ip]', 'inputBinding': {'prefix': '--interval-padding'}, 'type': ['null', 'int']}, {'id': 'interval-set-rule', 'doc': 'Set merging approach to use for combining interval inputs [synonymous with -isr]', 'inputBinding': {'prefix': '--interval-set-rule'}, 'type': ['null', {'name': '_:c7bfaa16-ee5f-4e5b-9cee-236551671050', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-set-rule/UNION', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-set-rule/INTERSECTION'], 'type': 'enum'}]}, {'id': 'intervals', 'doc': 'One or more genomic intervals over which to operate [synonymous with -L]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--intervals\", inputs[\\'intervals_tags\\']))'}, 'type': ['null', {'items': ['File', 'string'], 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File', 'string']}, {'id': 'intervals_tags', 'doc': \"A argument to set the tags of 'intervals'\", 'type': ['null', {'items': ['string', {'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'invert-mendelian-violation', 'doc': 'Output non-mendelian violation sites only', 'inputBinding': {'prefix': '--invert-mendelian-violation', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'invertSelect', 'doc': 'Invert the selection criteria for -select [synonymous with -invert-select]', 'inputBinding': {'prefix': '--invertSelect', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'keep-ids', 'doc': 'List of variant rsIDs to select [synonymous with -ids]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--keep-ids\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'keep-original-ac', 'doc': 'Store the original AC, AF, and AN values after subsetting', 'inputBinding': {'prefix': '--keep-original-ac', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'keep-original-dp', 'doc': 'Store the original DP value after subsetting', 'inputBinding': {'prefix': '--keep-original-dp', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'lenient', 'doc': 'Lenient processing of VCF files [synonymous with -LE]', 'inputBinding': {'prefix': '--lenient', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'max-filtered-genotypes', 'doc': 'Maximum number of samples filtered at the genotype level', 'inputBinding': {'prefix': '--max-filtered-genotypes'}, 'type': ['null', 'int']}, {'id': 'max-fraction-filtered-genotypes', 'doc': 'Maximum fraction of samples filtered at the genotype level', 'inputBinding': {'prefix': '--max-fraction-filtered-genotypes'}, 'type': ['null', 'double']}, {'id': 'max-indel-size', 'doc': 'Maximum size of indels to include', 'inputBinding': {'prefix': '--max-indel-size'}, 'type': ['null', 'int']}, {'id': 'max-nocall-fraction', 'doc': 'Maximum fraction of samples with no-call genotypes', 'inputBinding': {'prefix': '--max-nocall-fraction'}, 'type': ['null', 'double']}, {'id': 'max-nocall-number', 'doc': 'Maximum number of samples with no-call genotypes', 'inputBinding': {'prefix': '--max-nocall-number'}, 'type': ['null', 'int']}, {'id': 'mendelian-violation', 'doc': 'Output mendelian violation sites only', 'inputBinding': {'prefix': '--mendelian-violation', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'mendelian-violation-qual-threshold', 'doc': 'Minimum GQ score for each trio member to accept a site as a violation', 'inputBinding': {'prefix': '--mendelian-violation-qual-threshold'}, 'type': ['null', 'double']}, {'id': 'min-filtered-genotypes', 'doc': 'Minimum number of samples filtered at the genotype level', 'inputBinding': {'prefix': '--min-filtered-genotypes'}, 'type': ['null', 'int']}, {'id': 'min-fraction-filtered-genotypes', 'doc': 'Maximum fraction of samples filtered at the genotype level', 'inputBinding': {'prefix': '--min-fraction-filtered-genotypes'}, 'type': ['null', 'double']}, {'id': 'min-indel-size', 'doc': 'Minimum size of indels to include', 'inputBinding': {'prefix': '--min-indel-size'}, 'type': ['null', 'int']}, {'id': 'output_filename', 'doc': 'Path to which variants should be written [synonymous with -O]', 'inputBinding': {'prefix': '--output'}, 'type': 'string'}, {'id': 'pedigree', 'doc': 'Pedigree file [synonymous with -ped]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--pedigree\", inputs[\\'pedigree_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'pedigree_tags', 'doc': \"A argument to set the tags of 'pedigree'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'preserve-alleles', 'doc': 'Preserve original alleles, do not trim', 'inputBinding': {'prefix': '--preserve-alleles', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'QUIET', 'doc': 'Whether to suppress job-summary info on System.err.', 'inputBinding': {'prefix': '--QUIET', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'read-filter', 'doc': 'Read filters to be applied before analysis [synonymous with -RF]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--read-filter\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'read-index', 'doc': 'Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically.', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--read-index\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'read-validation-stringency', 'doc': 'Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. [synonymous with -VS]', 'inputBinding': {'prefix': '--read-validation-stringency'}, 'type': ['null', {'name': '_:4223eea3-e764-4e52-9805-698333575f0e', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read-validation-stringency/STRICT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read-validation-stringency/LENIENT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read-validation-stringency/SILENT'], 'type': 'enum'}]}, {'id': 'reference', 'secondaryFiles': ['.fai', '^.dict'], 'doc': 'Reference sequence [synonymous with -R]', 'inputBinding': {'prefix': '--reference'}, 'type': ['null', 'File']}, {'id': 'remove-fraction-genotypes', 'doc': 'Select a fraction of genotypes at random from the input and sets them to no-call', 'inputBinding': {'prefix': '--remove-fraction-genotypes'}, 'type': ['null', 'double']}, {'id': 'remove-unused-alternates', 'doc': 'Remove alternate alleles not present in any genotypes', 'inputBinding': {'prefix': '--remove-unused-alternates', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'restrict-alleles-to', 'doc': 'Select only variants of a particular allelicity', 'inputBinding': {'prefix': '--restrict-alleles-to'}, 'type': ['null', {'name': '_:c00eeb1a-75e9-42c6-be44-68d0da736874', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#restrict-alleles-to/ALL', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#restrict-alleles-to/BIALLELIC', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#restrict-alleles-to/MULTIALLELIC'], 'type': 'enum'}]}, {'id': 'sample-expressions', 'doc': 'Regular expression to select multiple samples [synonymous with -se]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--sample-expressions\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'sample-name', 'doc': 'Include genotypes from this sample [synonymous with -sn]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--sample-name\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'seconds-between-progress-updates', 'doc': 'Output traversal statistics every time this many seconds elapse', 'inputBinding': {'prefix': '--seconds-between-progress-updates'}, 'type': ['null', 'double']}, {'id': 'select-random-fraction', 'doc': 'Select a fraction of variants at random from the input [synonymous with -fraction]', 'inputBinding': {'prefix': '--select-random-fraction'}, 'type': ['null', 'double']}, {'id': 'select_type_to_include', 'doc': 'Select only a certain type of variants from the input file [synonymous with -select-type]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--select-type-to-include\"))'}, 'type': 'string'}, {'id': 'selectExpressions', 'doc': 'One or more criteria to use when selecting the data [synonymous with -select]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--selectExpressions\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'sequence-dictionary', 'doc': 'Use the given sequence dictionary as the master/canonical sequence dictionary.  Must be a .dict file.', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--sequence-dictionary\", inputs[\\'sequence-dictionary_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'sequence-dictionary_tags', 'doc': \"A argument to set the tags of 'sequence-dictionary'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'set-filtered-gt-to-nocall', 'doc': 'Set filtered genotypes to no-call', 'inputBinding': {'prefix': '--set-filtered-gt-to-nocall', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'showHidden', 'doc': 'display hidden arguments', 'inputBinding': {'prefix': '--showHidden', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'sites-only-vcf-output', 'doc': \"If true, don't emit genotype fields when writing vcf file output.\", 'inputBinding': {'prefix': '--sites-only-vcf-output', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'tmp-dir', 'doc': 'Temp directory to use.', 'inputBinding': {'prefix': '--tmp-dir'}, 'type': ['null', 'string']}, {'id': 'use-jdk-deflater', 'doc': 'Whether to use the JdkDeflater (as opposed to IntelDeflater) [synonymous with -jdk-deflater]', 'inputBinding': {'prefix': '--use-jdk-deflater', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'use-jdk-inflater', 'doc': 'Whether to use the JdkInflater (as opposed to IntelInflater) [synonymous with -jdk-inflater]', 'inputBinding': {'prefix': '--use-jdk-inflater', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'variant', 'doc': 'A VCF file containing variants [synonymous with -V]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--variant\", inputs[\\'variant_tags\\']))'}, 'type': 'File'}, {'id': 'variant_tags', 'doc': \"A argument to set the tags of 'variant'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'verbosity', 'doc': 'Control verbosity of logging.', 'inputBinding': {'prefix': '--verbosity'}, 'type': ['null', {'name': '_:9622427d-9049-4772-b9c8-e4e905cde325', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/ERROR', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/WARNING', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/INFO', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/DEBUG'], 'type': 'enum'}]}, {'id': 'version', 'doc': 'display the version number for this tool', 'inputBinding': {'prefix': '--version', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'output', 'secondaryFiles': [\"$(inputs['create-output-variant-index']? self.basename + (inputs.output_filename.endsWith('.gz')? '.tbi':'.idx') : [])\", \"$(inputs['create-output-variant-md5']? self.basename + '.md5' : [])\"], 'doc': 'Output file from corresponding to the input argument output-filename', 'outputBinding': {'glob': '$(inputs.output_filename)'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gatk4:4.1.6.0--py38_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gatk', 'version': ['4.1.6.0'], 'specs': ['https://identifiers.org/biotools/gatk', 'https://anaconda.org/bioconda/gatk4']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'SelectVariants']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['/**\\n * File of functions to be added to cwl files\\n */\\n\\nfunction generateGATK4BooleanValue(){\\n    /**\\n     * Boolean types in GATK 4 are expressed on the command line as --<PREFIX> \"true\"/\"false\",\\n     * so patch here\\n     */\\n    if(self === true || self === false){\\n        return self.toString()\\n    }\\n\\n    return self;\\n}\\n\\nfunction applyTagsToArgument(prefix, tags){\\n    /**\\n     * Function to be used in the field valueFrom of File objects to add gatk tags.\\n     */\\n\\n    if(!self){\\n        return null;\\n    }\\n    else if(!tags){\\n        return generateArrayCmd(prefix);\\n    }\\n    else{\\n        function addTagToArgument(tagObject, argument){\\n            var allTags = Array.isArray(tagObject) ? tagObject.join(\",\") : tagObject;\\n\\n            return [prefix + \":\" + allTags, argument];\\n        }\\n\\n        if(Array.isArray(self)){\\n            if(!Array.isArray(tags) || self.length !== tags.length){\\n                throw new TypeError(\"Argument \\'\" + prefix + \"\\' tag field is invalid\");\\n            }\\n\\n            var value = self.map(function(element, i) {\\n                return addTagToArgument(tags[i], element);\\n            }).reduce(function(a, b){return a.concat(b)})\\n\\n            return value;\\n        }\\n        else{\\n            return addTagToArgument(tags, self);\\n        }\\n    }\\n}\\n\\nfunction generateArrayCmd(prefix){\\n    /**\\n     * Function to be used in the field valueFrom of array objects, so that arrays are optional\\n     * and prefixes are handled properly.\\n     *\\n     * The issue that this solves is documented here:\\n     * https://www.biostars.org/p/258414/#260140\\n     */\\n    if(!self){\\n        return null;\\n    }\\n\\n    if(!Array.isArray(self)){\\n        self = [self];\\n    }\\n\\n    var output = [];\\n    self.forEach(function(element) {\\n        output.push(prefix);\\n        output.push(element);\\n    })\\n\\n    return output;\\n}\\n\\n/* Polyfill String.endsWith (it was introduced in ES6, but CWL 1.0 only supports ES5) */\\nString.prototype.endsWith = String.prototype.endsWith || function(suffix) {\\n    return this.indexOf(suffix, this.length - suffix.length) >= 0;\\n};\\n']}, {'class': 'SchemaDefRequirement', 'types': [{'name': 'variants_type', 'symbols': ['INDEL', 'SNP', 'MIXED', 'MNP', 'SYMBOLIC', 'NO_VARIATION'], 'type': 'enum'}]}, {'class': 'ShellCommandRequirement'}]",
    "cwl_doc": "Select a subset of variants from a VCF file\n\n <p>This tool makes it possible to select a subset of variants based on various criteria in order to facilitate certain\n analyses. Examples of such analyses include comparing and contrasting cases vs. controls, extracting variant or\n non-variant loci that meet certain requirements, or troubleshooting some unexpected results, to name a few.</p>\n\n <p>\n There are many different options for selecting subsets of variants from a larger callset:\n <ul>\n     <li>Extract one or more samples from a callset based on either a complete sample name or a pattern match.</li>\n     <li>Specify criteria for inclusion that place thresholds on annotation values, e.g. \"DP > 1000\" (depth of\n     coverage greater than 1000x), \"AF < 0.25\" (sites with allele frequency less than 0.25). These criteria are written\n     as \"JEXL expressions\", which are documented in the\n     <a href=\"https://www.broadinstitute.org/gatk/guide/article?id=1255\">article about using JEXL expressions</a>.</li>\n     <li>Provide concordance or discordance tracks in order to include or exclude variants that are also present\n     in other given callsets.</li>\n     <li>Select variants based on criteria like their type (e.g. INDELs only), evidence of mendelian violation,\n     filtering status, allelicity, etc.</li>\n </ul>\n </p>\n\n <p>There are also several options for recording the original values of certain annotations which are recalculated\n when one subsets the new callset, trims alleles, etc.</p>\n\n <h3>Input</h3>\n <p>\n A variant call set in VCF format from which a subset can be selected.\n </p>\n\n <h3>Output</h3>\n <p>\n A new VCF file containing the selected subset of variants.\n </p>\n\n * <h3>Usage examples</h3>\n <h4>Select SNPs</h4>\n <pre>\n     gatk SelectVariants \\\n     -R Homo_sapiens_assembly38.fasta \\\n     -V input.vcf \\\n     --select-type-to-include SNP \\\n     -O output.vcf\n </pre>\n\n <h4>Query Chromosome 20 Variants from a GenomicsDB</h4>\n <pre>\n     gatk SelectVariants \\\n     -R Homo_sapiens_assembly38.fasta \\\n     -V gendb://genomicsDB \\\n     -L 20 \\\n     -O output.chr20.vcf\n </pre>",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "GATK/GATK-SplitNCigarReads.cwl",
    "sha": "9ebd94e120d099ee8a91435c7a25d7b71f29c316",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/GATK/GATK-SplitNCigarReads.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.1\nclass: CommandLineTool\n\nbaseCommand:\n- gatk\n- SplitNCigarReads\ndoc: |-\n  Splits reads that contain Ns in their cigar string (e.g. spanning splicing events in RNAseq data).\n\n   Identifies all N cigar elements and creates k+1 new reads (where k is the number of N cigar elements).\n   The first read includes the bases that are to the left of the first N element, while the part of the read that is to the right of the N\n   (including the Ns) is hard clipped and so on for the rest of the new reads. Used for post-processing RNA reads aligned against the full reference.\n\n   <h3>Input</h3>\n    <p>\n  \t    BAM file\n    </p>\n\n\n   <h3>Output</h3>\n    <p>\n        BAM file with reads split at N CIGAR elements and CIGAR strings updated.\n    </p>\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gatk4:4.1.6.0--py38_0\n  SoftwareRequirement:\n    packages:\n      gatk:\n        specs:\n          - https://identifiers.org/biotools/gatk\n          - https://anaconda.org/bioconda/gatk4\n        version: [ \"4.1.6.0\" ]\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement:\n    expressionLib:\n    - |\n      /**\n       * File of functions to be added to cwl files\n       */\n\n      function generateGATK4BooleanValue(){\n          /**\n           * Boolean types in GATK 4 are expressed on the command line as --<PREFIX> \"true\"/\"false\",\n           * so patch here\n           */\n          if(self === true || self === false){\n              return self.toString()\n          }\n\n          return self;\n      }\n\n      function applyTagsToArgument(prefix, tags){\n          /**\n           * Function to be used in the field valueFrom of File objects to add gatk tags.\n           */\n\n          if(!self){\n              return null;\n          }\n          else if(!tags){\n              return generateArrayCmd(prefix);\n          }\n          else{\n              function addTagToArgument(tagObject, argument){\n                  var allTags = Array.isArray(tagObject) ? tagObject.join(\",\") : tagObject;\n\n                  return [prefix + \":\" + allTags, argument];\n              }\n\n              if(Array.isArray(self)){\n                  if(!Array.isArray(tags) || self.length !== tags.length){\n                      throw new TypeError(\"Argument '\" + prefix + \"' tag field is invalid\");\n                  }\n\n                  var value = self.map(function(element, i) {\n                      return addTagToArgument(tags[i], element);\n                  }).reduce(function(a, b){return a.concat(b)})\n\n                  return value;\n              }\n              else{\n                  return addTagToArgument(tags, self);\n              }\n          }\n      }\n\n      function generateArrayCmd(prefix){\n          /**\n           * Function to be used in the field valueFrom of array objects, so that arrays are optional\n           * and prefixes are handled properly.\n           *\n           * The issue that this solves is documented here:\n           * https://www.biostars.org/p/258414/#260140\n           */\n          if(!self){\n              return null;\n          }\n\n          if(!Array.isArray(self)){\n              self = [self];\n          }\n\n          var output = [];\n          self.forEach(function(element) {\n              output.push(prefix);\n              output.push(element);\n          })\n\n          return output;\n      }\n\n      /* Polyfill String.endsWith (it was introduced in ES6, but CWL 1.0 only supports ES5) */\n      String.prototype.endsWith = String.prototype.endsWith || function(suffix) {\n          return this.indexOf(suffix, this.length - suffix.length) >= 0;\n      };\ninputs:\n- doc: Reference sequence file [synonymous with -R]\n  id: reference\n  type: File\n  inputBinding:\n    prefix: --reference\n  secondaryFiles:\n  - .fai\n  - ^.dict\n- doc: BAM/SAM/CRAM file containing reads [synonymous with -I]\n  id: reads\n  type:\n  - type: array\n    items: File\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  inputBinding:\n    prefix: --input\n  secondaryFiles: $(self.basename)$(self.nameext.replace('m','i'))?\n- doc: Write output to this BAM filename [synonymous with -O]\n  id: output_filename\n  type: string\n  inputBinding:\n    prefix: --output\n- doc: Read filters to be applied before analysis [synonymous with -RF]\n  id: read_filter\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--read-filter\"))\n- doc: Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise,\n    overrides threshold fraction.\n  id: ambig-filter-bases\n  type: int?\n  inputBinding:\n    prefix: --ambig-filter-bases\n- doc: Threshold fraction of ambiguous bases\n  id: ambig-filter-frac\n  type: double?\n  inputBinding:\n    prefix: --ambig-filter-frac\n- doc: Maximum length of fragment (insert size)\n  id: max-fragment-length\n  type: int?\n  inputBinding:\n    prefix: --max-fragment-length\n- doc: Minimum length of fragment (insert size)\n  id: min-fragment-length\n  type: int?\n  inputBinding:\n    prefix: --min-fragment-length\n- doc: One or more genomic intervals to keep\n  id: keep-intervals\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--keep-intervals\"))\n- doc: Name of the library to keep\n  id: library\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--library\"))\n- doc: Maximum mapping quality to keep (inclusive)\n  id: maximum-mapping-quality\n  type: int?\n  inputBinding:\n    prefix: --maximum-mapping-quality\n- doc: Minimum mapping quality to keep (inclusive)\n  id: minimum-mapping-quality\n  type: int?\n  inputBinding:\n    prefix: --minimum-mapping-quality\n- doc: Minimum start location difference at which mapped mates are considered distant\n  id: mate-too-distant-length\n  type: int?\n  inputBinding:\n    prefix: --mate-too-distant-length\n- doc: Allow a read to be filtered out based on having only 1 soft-clipped block.\n    By default, both ends must have a soft-clipped block, setting this flag requires\n    only 1 soft-clipped block\n  id: dont-require-soft-clips-both-ends\n  type: boolean?\n  inputBinding:\n    prefix: --dont-require-soft-clips-both-ends\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Minimum number of aligned bases\n  id: filter-too-short\n  type: int?\n  inputBinding:\n    prefix: --filter-too-short\n- doc: Platform attribute (PL) to match\n  id: platform-filter-name\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--platform-filter-name\"))\n- doc: Platform unit (PU) to filter out\n  id: black-listed-lanes\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--black-listed-lanes\"))\n- doc: A read group filter expression in the form \"attribute:value\", where \"attribute\"\n    is a two character read group attribute such as \"RG\" or \"PU\".\n  id: read-group-black-list\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--read-group-black-list\"))\n- doc: The name of the read group to keep\n  id: keep-read-group\n  type: string?\n  inputBinding:\n    prefix: --keep-read-group\n- doc: Keep only reads with length at most equal to the specified value\n  id: max-read-length\n  type: int?\n  inputBinding:\n    prefix: --max-read-length\n- doc: Keep only reads with length at least equal to the specified value\n  id: min-read-length\n  type: int?\n  inputBinding:\n    prefix: --min-read-length\n- doc: Keep only reads with this read name\n  id: read-name\n  type: string?\n  inputBinding:\n    prefix: --read-name\n- doc: Keep only reads on the reverse strand\n  id: keep-reverse-strand-only\n  type: boolean?\n  inputBinding:\n    prefix: --keep-reverse-strand-only\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: The name of the sample(s) to keep, filtering out all others\n  id: sample\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--sample\"))\n- doc: Inverts the results from this filter, causing all variants that would pass\n    to fail and visa-versa.\n  id: invert-soft-clip-ratio-filter\n  type: boolean?\n  inputBinding:\n    prefix: --invert-soft-clip-ratio-filter\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Threshold ratio of soft clipped bases (leading / trailing the cigar string)\n    to total bases in read for read to be filtered.\n  id: soft-clipped-leading-trailing-ratio\n  type: double?\n  inputBinding:\n    prefix: --soft-clipped-leading-trailing-ratio\n- doc: Threshold ratio of soft clipped bases (anywhere in the cigar string) to total\n    bases in read for read to be filtered.\n  id: soft-clipped-ratio-threshold\n  type: double?\n  inputBinding:\n    prefix: --soft-clipped-ratio-threshold\n- doc: If true, adds a PG tag to created SAM/BAM/CRAM files.\n  id: add-output-sam-program-record\n  type: boolean?\n  inputBinding:\n    prefix: --add-output-sam-program-record\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, adds a command line header line to created VCF files.\n  id: add-output-vcf-command-line\n  type: boolean?\n  inputBinding:\n    prefix: --add-output-vcf-command-line\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: read one or more arguments files and add them to the command line\n  id: arguments_file\n  type:\n  - 'null'\n  - type: array\n    items: File\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--arguments_file\", inputs['arguments_file_tags']))\n- doc: A argument to set the tags of 'arguments_file'\n  id: arguments_file_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer\n    if unset. [synonymous with -CIPB]\n  id: cloud-index-prefetch-buffer\n  type: int?\n  inputBinding:\n    prefix: --cloud-index-prefetch-buffer\n- doc: Size of the cloud-only prefetch buffer (in MB; 0 to disable). [synonymous with\n    -CPB]\n  id: cloud-prefetch-buffer\n  type: int?\n  inputBinding:\n    prefix: --cloud-prefetch-buffer\n- doc: If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM\n    file. [synonymous with -OBI]\n  id: create-output-bam-index\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-bam-index\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a MD5 digest for any BAM/SAM/CRAM file created [synonymous\n    with -OBM]\n  id: create-output-bam-md5\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-bam-md5\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a VCF index when writing a coordinate-sorted VCF file. [synonymous\n    with -OVI]\n  id: create-output-variant-index\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-variant-index\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a a MD5 digest any VCF file created. [synonymous with -OVM]\n  id: create-output-variant-md5\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-variant-md5\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, don't cache bam indexes, this will reduce memory requirements but\n    may harm performance if many intervals are specified.  Caching is automatically\n    disabled if there are no intervals specified. [synonymous with -DBIC]\n  id: disable-bam-index-caching\n  type: boolean?\n  inputBinding:\n    prefix: --disable-bam-index-caching\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Read filters to be disabled before analysis [synonymous with -DF]\n  id: disable-read-filter\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--disable-read-filter\"))\n- doc: If specified, do not check the sequence dictionaries from our inputs for compatibility.\n    Use at your own risk!\n  id: disable-sequence-dictionary-validation\n  type: boolean?\n  inputBinding:\n    prefix: --disable-sequence-dictionary-validation\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: 'Disable all tool default read filters (WARNING: many tools will not function\n    correctly without their default read filters on)'\n  id: disable-tool-default-read-filters\n  type: boolean?\n  inputBinding:\n    prefix: --disable-tool-default-read-filters\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: do not have the walker soft-clip overhanging sections of the reads\n  id: do-not-fix-overhangs\n  type: boolean?\n  inputBinding:\n    prefix: --do-not-fix-overhangs\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: One or more genomic intervals to exclude from processing [synonymous with -XL]\n  id: exclude-intervals\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--exclude-intervals\"))\n- doc: A configuration file to use with the GATK.\n  id: gatk-config-file\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--gatk-config-file\", inputs['gatk-config-file_tags']))\n- doc: A argument to set the tags of 'gatk-config-file'\n  id: gatk-config-file_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: If the GCS bucket channel errors out, how many times it will attempt to re-initiate\n    the connection [synonymous with -gcs-retries]\n  id: gcs-max-retries\n  type: int?\n  inputBinding:\n    prefix: --gcs-max-retries\n- doc: Project to bill when accessing \"requester pays\" buckets. If unset, these buckets\n    cannot be accessed.\n  id: gcs-project-for-requester-pays\n  type: string?\n  inputBinding:\n    prefix: --gcs-project-for-requester-pays\n- doc: A argument to set the tags of 'input'\n  id: input_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Amount of padding (in bp) to add to each interval you are excluding. [synonymous\n    with -ixp]\n  id: interval-exclusion-padding\n  type: int?\n  inputBinding:\n    prefix: --interval-exclusion-padding\n- doc: Interval merging rule for abutting intervals [synonymous with -imr]\n  id: interval-merging-rule\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - ALL\n    - OVERLAPPING_ONLY\n  inputBinding:\n    prefix: --interval-merging-rule\n- doc: Amount of padding (in bp) to add to each interval you are including. [synonymous\n    with -ip]\n  id: interval-padding\n  type: int?\n  inputBinding:\n    prefix: --interval-padding\n- doc: Set merging approach to use for combining interval inputs [synonymous with\n    -isr]\n  id: interval-set-rule\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - UNION\n    - INTERSECTION\n  inputBinding:\n    prefix: --interval-set-rule\n- doc: One or more genomic intervals over which to operate [synonymous with -L]\n  id: intervals\n  type:\n  - 'null'\n  - type: array\n    items:\n    - File\n    - string\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  - string\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--intervals\", inputs['intervals_tags']))\n- doc: A argument to set the tags of 'intervals'\n  id: intervals_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Lenient processing of VCF files [synonymous with -LE]\n  id: lenient\n  type: boolean?\n  inputBinding:\n    prefix: --lenient\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: max number of bases allowed in the overhang\n  id: max-bases-in-overhang\n  type: int?\n  inputBinding:\n    prefix: --max-bases-in-overhang\n- doc: max number of mismatches allowed in the overhang\n  id: max-mismatches-in-overhang\n  type: int?\n  inputBinding:\n    prefix: --max-mismatches-in-overhang\n- doc: max reads allowed to be kept in memory at a time by the BAM writer\n  id: max-reads-in-memory\n  type: int?\n  inputBinding:\n    prefix: --max-reads-in-memory\n- doc: have the walker split secondary alignments (will still repair MC tag without\n    it)\n  id: process-secondary-alignments\n  type: boolean?\n  inputBinding:\n    prefix: --process-secondary-alignments\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Whether to suppress job-summary info on System.err.\n  id: QUIET\n  type: boolean?\n  inputBinding:\n    prefix: --QUIET\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Indices to use for the read inputs. If specified, an index must be provided\n    for every read input and in the same order as the read inputs. If this argument\n    is not specified, the path to the index for each input will be inferred automatically.\n  id: read-index\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--read-index\"))\n- doc: Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The\n    default stringency value SILENT can improve performance when processing a BAM\n    file in which variable-length data (read, qualities, tags) do not otherwise need\n    to be decoded. [synonymous with -VS]\n  id: read-validation-stringency\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - STRICT\n    - LENIENT\n    - SILENT\n  inputBinding:\n    prefix: --read-validation-stringency\n- doc: refactor cigar string with NDN elements to one element [synonymous with -fixNDN]\n  id: refactor-cigar-string\n  type: boolean?\n  inputBinding:\n    prefix: --refactor-cigar-string\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: A argument to set the tags of 'reference'\n  id: reference_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Output traversal statistics every time this many seconds elapse\n  id: seconds-between-progress-updates\n  type: double?\n  inputBinding:\n    prefix: --seconds-between-progress-updates\n- doc: Use the given sequence dictionary as the master/canonical sequence dictionary.  Must\n    be a .dict file.\n  id: sequence-dictionary\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--sequence-dictionary\", inputs['sequence-dictionary_tags']))\n- doc: A argument to set the tags of 'sequence-dictionary'\n  id: sequence-dictionary_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: display hidden arguments\n  id: showHidden\n  type: boolean?\n  inputBinding:\n    prefix: --showHidden\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, don't emit genotype fields when writing vcf file output.\n  id: sites-only-vcf-output\n  type: boolean?\n  inputBinding:\n    prefix: --sites-only-vcf-output\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: skip the 255 -> 60 MQ read transform [synonymous with -skip-mq-transform]\n  id: skip-mapping-quality-transform\n  type: boolean?\n  inputBinding:\n    prefix: --skip-mapping-quality-transform\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Temp directory to use.\n  id: tmp-dir\n  type: string?\n  inputBinding:\n    prefix: --tmp-dir\n- doc: Whether to use the JdkDeflater (as opposed to IntelDeflater) [synonymous with\n    -jdk-deflater]\n  id: use-jdk-deflater\n  type: boolean?\n  inputBinding:\n    prefix: --use-jdk-deflater\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Whether to use the JdkInflater (as opposed to IntelInflater) [synonymous with\n    -jdk-inflater]\n  id: use-jdk-inflater\n  type: boolean?\n  inputBinding:\n    prefix: --use-jdk-inflater\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Control verbosity of logging.\n  id: verbosity\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - ERROR\n    - WARNING\n    - INFO\n    - DEBUG\n  inputBinding:\n    prefix: --verbosity\n- doc: display the version number for this tool\n  id: version\n  type: boolean?\n  inputBinding:\n    prefix: --version\n    valueFrom: $(generateGATK4BooleanValue())\noutputs:\n- id: output\n  doc: Output file from corresponding to the input argument output-filename\n  type: File\n  outputBinding:\n    glob: $(inputs.output_filename)\n  secondaryFiles:\n  - \"$(inputs['create-output-bam-index']? self.basename + self.nameext.replace('m',\\\n    \\ 'i') : [])\"\n  - \"$(inputs['create-output-bam-md5']? self.basename + '.md5' : [])\"\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'reference', 'secondaryFiles': [{'pattern': '.fai'}, {'pattern': '^.dict'}], 'doc': 'Reference sequence file [synonymous with -R]', 'type': 'File', 'inputBinding': {'prefix': '--reference'}}, {'id': 'reads', 'secondaryFiles': [{'pattern': \"$(self.basename)$(self.nameext.replace('m','i'))\", 'required': False}], 'doc': 'BAM/SAM/CRAM file containing reads [synonymous with -I]', 'type': [{'name': '_:bcb42c98-0f38-41d9-910e-cbb842de9416', 'items': 'File', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File'], 'inputBinding': {'prefix': '--input'}}, {'id': 'output_filename', 'doc': 'Write output to this BAM filename [synonymous with -O]', 'type': 'string', 'inputBinding': {'prefix': '--output'}}, {'id': 'read_filter', 'doc': 'Read filters to be applied before analysis [synonymous with -RF]', 'type': ['null', {'name': '_:1628b16b-2030-4612-a77d-08a39defc498', 'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string'], 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--read-filter\"))'}}, {'id': 'ambig-filter-bases', 'doc': 'Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction.', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--ambig-filter-bases'}}, {'id': 'ambig-filter-frac', 'doc': 'Threshold fraction of ambiguous bases', 'type': ['null', 'double'], 'inputBinding': {'prefix': '--ambig-filter-frac'}}, {'id': 'max-fragment-length', 'doc': 'Maximum length of fragment (insert size)', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--max-fragment-length'}}, {'id': 'min-fragment-length', 'doc': 'Minimum length of fragment (insert size)', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--min-fragment-length'}}, {'id': 'keep-intervals', 'doc': 'One or more genomic intervals to keep', 'type': ['null', {'name': '_:62e0fdb3-e55d-4b10-b349-c658980ed460', 'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string'], 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--keep-intervals\"))'}}, {'id': 'library', 'doc': 'Name of the library to keep', 'type': ['null', {'name': '_:7a29b87d-4372-4273-84f5-177a143e19a1', 'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string'], 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--library\"))'}}, {'id': 'maximum-mapping-quality', 'doc': 'Maximum mapping quality to keep (inclusive)', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--maximum-mapping-quality'}}, {'id': 'minimum-mapping-quality', 'doc': 'Minimum mapping quality to keep (inclusive)', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--minimum-mapping-quality'}}, {'id': 'mate-too-distant-length', 'doc': 'Minimum start location difference at which mapped mates are considered distant', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--mate-too-distant-length'}}, {'id': 'dont-require-soft-clips-both-ends', 'doc': 'Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--dont-require-soft-clips-both-ends', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'filter-too-short', 'doc': 'Minimum number of aligned bases', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--filter-too-short'}}, {'id': 'platform-filter-name', 'doc': 'Platform attribute (PL) to match', 'type': ['null', {'name': '_:f3942310-7c8c-499a-bc7f-fde0d800296b', 'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string'], 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--platform-filter-name\"))'}}, {'id': 'black-listed-lanes', 'doc': 'Platform unit (PU) to filter out', 'type': ['null', {'name': '_:755171ef-31e9-4955-be27-200ca38abd36', 'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string'], 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--black-listed-lanes\"))'}}, {'id': 'read-group-black-list', 'doc': 'A read group filter expression in the form \"attribute:value\", where \"attribute\" is a two character read group attribute such as \"RG\" or \"PU\".', 'type': ['null', {'name': '_:dfbc0ba0-a961-47c6-aeb4-9c3a783233e7', 'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string'], 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--read-group-black-list\"))'}}, {'id': 'keep-read-group', 'doc': 'The name of the read group to keep', 'type': ['null', 'string'], 'inputBinding': {'prefix': '--keep-read-group'}}, {'id': 'max-read-length', 'doc': 'Keep only reads with length at most equal to the specified value', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--max-read-length'}}, {'id': 'min-read-length', 'doc': 'Keep only reads with length at least equal to the specified value', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--min-read-length'}}, {'id': 'read-name', 'doc': 'Keep only reads with this read name', 'type': ['null', 'string'], 'inputBinding': {'prefix': '--read-name'}}, {'id': 'keep-reverse-strand-only', 'doc': 'Keep only reads on the reverse strand', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--keep-reverse-strand-only', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'sample', 'doc': 'The name of the sample(s) to keep, filtering out all others', 'type': ['null', {'name': '_:7d77dd79-75b0-44ea-827b-d7e5369321ed', 'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string'], 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--sample\"))'}}, {'id': 'invert-soft-clip-ratio-filter', 'doc': 'Inverts the results from this filter, causing all variants that would pass to fail and visa-versa.', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--invert-soft-clip-ratio-filter', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'soft-clipped-leading-trailing-ratio', 'doc': 'Threshold ratio of soft clipped bases (leading / trailing the cigar string) to total bases in read for read to be filtered.', 'type': ['null', 'double'], 'inputBinding': {'prefix': '--soft-clipped-leading-trailing-ratio'}}, {'id': 'soft-clipped-ratio-threshold', 'doc': 'Threshold ratio of soft clipped bases (anywhere in the cigar string) to total bases in read for read to be filtered.', 'type': ['null', 'double'], 'inputBinding': {'prefix': '--soft-clipped-ratio-threshold'}}, {'id': 'add-output-sam-program-record', 'doc': 'If true, adds a PG tag to created SAM/BAM/CRAM files.', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--add-output-sam-program-record', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'add-output-vcf-command-line', 'doc': 'If true, adds a command line header line to created VCF files.', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--add-output-vcf-command-line', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'arguments_file', 'doc': 'read one or more arguments files and add them to the command line', 'type': ['null', {'name': '_:9c4346a9-a0f9-43b6-aac6-9d8c2f3d2950', 'items': 'File', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File'], 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--arguments_file\", inputs[\\'arguments_file_tags\\']))'}}, {'id': 'arguments_file_tags', 'doc': \"A argument to set the tags of 'arguments_file'\", 'type': ['null', {'name': '_:1230ebce-2318-48a1-bd0c-079e7291bbdb', 'items': ['string', {'name': '_:ddbd343b-c93d-4808-a6cb-2727ddec9039', 'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'cloud-index-prefetch-buffer', 'doc': 'Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. [synonymous with -CIPB]', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--cloud-index-prefetch-buffer'}}, {'id': 'cloud-prefetch-buffer', 'doc': 'Size of the cloud-only prefetch buffer (in MB; 0 to disable). [synonymous with -CPB]', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--cloud-prefetch-buffer'}}, {'id': 'create-output-bam-index', 'doc': 'If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. [synonymous with -OBI]', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--create-output-bam-index', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'create-output-bam-md5', 'doc': 'If true, create a MD5 digest for any BAM/SAM/CRAM file created [synonymous with -OBM]', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--create-output-bam-md5', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'create-output-variant-index', 'doc': 'If true, create a VCF index when writing a coordinate-sorted VCF file. [synonymous with -OVI]', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--create-output-variant-index', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'create-output-variant-md5', 'doc': 'If true, create a a MD5 digest any VCF file created. [synonymous with -OVM]', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--create-output-variant-md5', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'disable-bam-index-caching', 'doc': \"If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified.  Caching is automatically disabled if there are no intervals specified. [synonymous with -DBIC]\", 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--disable-bam-index-caching', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'disable-read-filter', 'doc': 'Read filters to be disabled before analysis [synonymous with -DF]', 'type': ['null', {'name': '_:9b5a4f0f-f22f-4701-847a-a3d0e2448cca', 'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string'], 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--disable-read-filter\"))'}}, {'id': 'disable-sequence-dictionary-validation', 'doc': 'If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk!', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--disable-sequence-dictionary-validation', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'disable-tool-default-read-filters', 'doc': 'Disable all tool default read filters (WARNING: many tools will not function correctly without their default read filters on)', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--disable-tool-default-read-filters', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'do-not-fix-overhangs', 'doc': 'do not have the walker soft-clip overhanging sections of the reads', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--do-not-fix-overhangs', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'exclude-intervals', 'doc': 'One or more genomic intervals to exclude from processing [synonymous with -XL]', 'type': ['null', {'name': '_:4f1ed19c-257d-4142-badf-007070ed20c2', 'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string'], 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--exclude-intervals\"))'}}, {'id': 'gatk-config-file', 'doc': 'A configuration file to use with the GATK.', 'type': ['null', 'File'], 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--gatk-config-file\", inputs[\\'gatk-config-file_tags\\']))'}}, {'id': 'gatk-config-file_tags', 'doc': \"A argument to set the tags of 'gatk-config-file'\", 'type': ['null', 'string', {'name': '_:8777bacf-c9ac-45f6-863a-f09b86d51623', 'items': 'string', 'type': 'array'}]}, {'id': 'gcs-max-retries', 'doc': 'If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection [synonymous with -gcs-retries]', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--gcs-max-retries'}}, {'id': 'gcs-project-for-requester-pays', 'doc': 'Project to bill when accessing \"requester pays\" buckets. If unset, these buckets cannot be accessed.', 'type': ['null', 'string'], 'inputBinding': {'prefix': '--gcs-project-for-requester-pays'}}, {'id': 'input_tags', 'doc': \"A argument to set the tags of 'input'\", 'type': ['null', {'name': '_:2f1091ad-1b1a-46c1-8254-2bd520e2a847', 'items': ['string', {'name': '_:bb9c0437-c5b3-4604-bacd-d4e4018b4e98', 'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'interval-exclusion-padding', 'doc': 'Amount of padding (in bp) to add to each interval you are excluding. [synonymous with -ixp]', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--interval-exclusion-padding'}}, {'id': 'interval-merging-rule', 'doc': 'Interval merging rule for abutting intervals [synonymous with -imr]', 'type': ['null', {'name': '_:3a7cc0f2-97d2-4bd4-a1a7-9245b1950ccf', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-merging-rule/ALL', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-merging-rule/OVERLAPPING_ONLY'], 'type': 'enum'}], 'inputBinding': {'prefix': '--interval-merging-rule'}}, {'id': 'interval-padding', 'doc': 'Amount of padding (in bp) to add to each interval you are including. [synonymous with -ip]', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--interval-padding'}}, {'id': 'interval-set-rule', 'doc': 'Set merging approach to use for combining interval inputs [synonymous with -isr]', 'type': ['null', {'name': '_:2787a35a-818f-4dca-a29c-7e9983320c29', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-set-rule/UNION', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-set-rule/INTERSECTION'], 'type': 'enum'}], 'inputBinding': {'prefix': '--interval-set-rule'}}, {'id': 'intervals', 'doc': 'One or more genomic intervals over which to operate [synonymous with -L]', 'type': ['null', {'name': '_:1c654d28-6c52-41e8-88e1-bcf3d79acb95', 'items': ['File', 'string'], 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File', 'string'], 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--intervals\", inputs[\\'intervals_tags\\']))'}}, {'id': 'intervals_tags', 'doc': \"A argument to set the tags of 'intervals'\", 'type': ['null', {'name': '_:000775db-ad19-4213-811e-82dd82b4ec16', 'items': ['string', {'name': '_:e06ca53a-78f3-4d75-b62a-658f414b940d', 'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'lenient', 'doc': 'Lenient processing of VCF files [synonymous with -LE]', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--lenient', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'max-bases-in-overhang', 'doc': 'max number of bases allowed in the overhang', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--max-bases-in-overhang'}}, {'id': 'max-mismatches-in-overhang', 'doc': 'max number of mismatches allowed in the overhang', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--max-mismatches-in-overhang'}}, {'id': 'max-reads-in-memory', 'doc': 'max reads allowed to be kept in memory at a time by the BAM writer', 'type': ['null', 'int'], 'inputBinding': {'prefix': '--max-reads-in-memory'}}, {'id': 'process-secondary-alignments', 'doc': 'have the walker split secondary alignments (will still repair MC tag without it)', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--process-secondary-alignments', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'QUIET', 'doc': 'Whether to suppress job-summary info on System.err.', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--QUIET', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'read-index', 'doc': 'Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically.', 'type': ['null', {'name': '_:6b85f05c-1818-491f-a055-b7bfe46ba0fb', 'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string'], 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--read-index\"))'}}, {'id': 'read-validation-stringency', 'doc': 'Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. [synonymous with -VS]', 'type': ['null', {'name': '_:b222783d-aa7c-4c8b-86b1-b18e4d3bc377', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read-validation-stringency/STRICT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read-validation-stringency/LENIENT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read-validation-stringency/SILENT'], 'type': 'enum'}], 'inputBinding': {'prefix': '--read-validation-stringency'}}, {'id': 'refactor-cigar-string', 'doc': 'refactor cigar string with NDN elements to one element [synonymous with -fixNDN]', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--refactor-cigar-string', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'reference_tags', 'doc': \"A argument to set the tags of 'reference'\", 'type': ['null', 'string', {'name': '_:2771df91-81e7-42c2-99a8-5694a3658243', 'items': 'string', 'type': 'array'}]}, {'id': 'seconds-between-progress-updates', 'doc': 'Output traversal statistics every time this many seconds elapse', 'type': ['null', 'double'], 'inputBinding': {'prefix': '--seconds-between-progress-updates'}}, {'id': 'sequence-dictionary', 'doc': 'Use the given sequence dictionary as the master/canonical sequence dictionary.  Must be a .dict file.', 'type': ['null', 'File'], 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--sequence-dictionary\", inputs[\\'sequence-dictionary_tags\\']))'}}, {'id': 'sequence-dictionary_tags', 'doc': \"A argument to set the tags of 'sequence-dictionary'\", 'type': ['null', 'string', {'name': '_:8acaf56c-8184-4ca7-9db6-353edad9423a', 'items': 'string', 'type': 'array'}]}, {'id': 'showHidden', 'doc': 'display hidden arguments', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--showHidden', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'sites-only-vcf-output', 'doc': \"If true, don't emit genotype fields when writing vcf file output.\", 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--sites-only-vcf-output', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'skip-mapping-quality-transform', 'doc': 'skip the 255 -> 60 MQ read transform [synonymous with -skip-mq-transform]', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--skip-mapping-quality-transform', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'tmp-dir', 'doc': 'Temp directory to use.', 'type': ['null', 'string'], 'inputBinding': {'prefix': '--tmp-dir'}}, {'id': 'use-jdk-deflater', 'doc': 'Whether to use the JdkDeflater (as opposed to IntelDeflater) [synonymous with -jdk-deflater]', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--use-jdk-deflater', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'use-jdk-inflater', 'doc': 'Whether to use the JdkInflater (as opposed to IntelInflater) [synonymous with -jdk-inflater]', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--use-jdk-inflater', 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'verbosity', 'doc': 'Control verbosity of logging.', 'type': ['null', {'name': '_:8b8a6d95-7c6d-434b-8f0e-5577d5bc49c5', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/ERROR', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/WARNING', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/INFO', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/DEBUG'], 'type': 'enum'}], 'inputBinding': {'prefix': '--verbosity'}}, {'id': 'version', 'doc': 'display the version number for this tool', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--version', 'valueFrom': '$(generateGATK4BooleanValue())'}}]",
    "cwl_outputs": "[{'id': 'output', 'secondaryFiles': [{'pattern': \"$(inputs['create-output-bam-index']? self.basename + self.nameext.replace('m', 'i') : [])\"}, {'pattern': \"$(inputs['create-output-bam-md5']? self.basename + '.md5' : [])\"}], 'doc': 'Output file from corresponding to the input argument output-filename', 'type': 'File', 'outputBinding': {'glob': '$(inputs.output_filename)'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gatk4:4.1.6.0--py38_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gatk', 'version': ['4.1.6.0'], 'specs': ['https://identifiers.org/biotools/gatk', 'https://anaconda.org/bioconda/gatk4']}]}]",
    "cwl_cwlVersion": "v1.1",
    "cwl_baseCommand": "['gatk', 'SplitNCigarReads']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['/**\\n * File of functions to be added to cwl files\\n */\\n\\nfunction generateGATK4BooleanValue(){\\n    /**\\n     * Boolean types in GATK 4 are expressed on the command line as --<PREFIX> \"true\"/\"false\",\\n     * so patch here\\n     */\\n    if(self === true || self === false){\\n        return self.toString()\\n    }\\n\\n    return self;\\n}\\n\\nfunction applyTagsToArgument(prefix, tags){\\n    /**\\n     * Function to be used in the field valueFrom of File objects to add gatk tags.\\n     */\\n\\n    if(!self){\\n        return null;\\n    }\\n    else if(!tags){\\n        return generateArrayCmd(prefix);\\n    }\\n    else{\\n        function addTagToArgument(tagObject, argument){\\n            var allTags = Array.isArray(tagObject) ? tagObject.join(\",\") : tagObject;\\n\\n            return [prefix + \":\" + allTags, argument];\\n        }\\n\\n        if(Array.isArray(self)){\\n            if(!Array.isArray(tags) || self.length !== tags.length){\\n                throw new TypeError(\"Argument \\'\" + prefix + \"\\' tag field is invalid\");\\n            }\\n\\n            var value = self.map(function(element, i) {\\n                return addTagToArgument(tags[i], element);\\n            }).reduce(function(a, b){return a.concat(b)})\\n\\n            return value;\\n        }\\n        else{\\n            return addTagToArgument(tags, self);\\n        }\\n    }\\n}\\n\\nfunction generateArrayCmd(prefix){\\n    /**\\n     * Function to be used in the field valueFrom of array objects, so that arrays are optional\\n     * and prefixes are handled properly.\\n     *\\n     * The issue that this solves is documented here:\\n     * https://www.biostars.org/p/258414/#260140\\n     */\\n    if(!self){\\n        return null;\\n    }\\n\\n    if(!Array.isArray(self)){\\n        self = [self];\\n    }\\n\\n    var output = [];\\n    self.forEach(function(element) {\\n        output.push(prefix);\\n        output.push(element);\\n    })\\n\\n    return output;\\n}\\n\\n/* Polyfill String.endsWith (it was introduced in ES6, but CWL 1.0 only supports ES5) */\\nString.prototype.endsWith = String.prototype.endsWith || function(suffix) {\\n    return this.indexOf(suffix, this.length - suffix.length) >= 0;\\n};\\n']}, {'class': 'ShellCommandRequirement'}]",
    "cwl_doc": "Splits reads that contain Ns in their cigar string (e.g. spanning splicing events in RNAseq data).\n\n Identifies all N cigar elements and creates k+1 new reads (where k is the number of N cigar elements).\n The first read includes the bases that are to the left of the first N element, while the part of the read that is to the right of the N\n (including the Ns) is hard clipped and so on for the rest of the new reads. Used for post-processing RNA reads aligned against the full reference.\n\n <h3>Input</h3>\n  <p>\n\t    BAM file\n  </p>\n\n\n <h3>Output</h3>\n  <p>\n      BAM file with reads split at N CIGAR elements and CIGAR strings updated.\n  </p>",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "GATK/GATK-VariantFiltration.cwl",
    "sha": "e56e3b72a439a41498f6bfa8fdc4e1d891215195",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/GATK/GATK-VariantFiltration.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand:\n- gatk\n- VariantFiltration\n\ndoc: |-\n  Filter variant calls based on INFO and/or FORMAT annotations\n\n   <p>\n   This tool is designed for hard-filtering variant calls based on certain criteria. Records are hard-filtered by\n   changing the value in the FILTER field to something other than PASS. Filtered records will be preserved in the output\n   unless their removal is requested in the command line. </p>\n\n   <h3>Inputs</h3>\n   <ul>\n       <li>A VCF of variant calls to filter.</li>\n       <li>One or more filtering expressions and corresponding filter names.</li>\n   </ul>\n\n   <h3>Output</h3>\n   <p>\n   A filtered VCF in which passing variants are annotated as PASS and failing variants are annotated with the name(s) of\n   the filter(s) they failed.\n   </p>\n\n   <h3>Usage example</h3>\n   <pre>\n     gatk VariantFiltration \\\n     -R reference.fasta \\\n     -V input.vcf.gz \\\n     -O output.vcf.gz \\\n     --filter-name \"my_filter1\" \\\n     --filter-expression \"AB < 0.2\" \\\n     --filter-name \"my_filter2\" \\\n     --filter-expression \"MQ0 > 50\"\n   </pre>\n\n   <h3>Note</h3>\n   <p>\n   Composing filtering expressions can range from very simple to extremely complicated depending on what you're\n   trying to do.\n   <p>\n   Compound expressions (ones that specify multiple conditions connected by &&, AND, ||, or OR, and reference\n   multiple attributes) require special consideration. By default, variants that are missing one or more of the\n   attributes referenced in a compound expression are treated as PASS for the entire expression, even if the variant\n   would satisfy the filter criteria for another part of the expression. This can lead to unexpected results if any\n   of the attributes referenced in a compound expression are present for some variants, but missing for others.\n   <p>\n   It is strongly recommended that such expressions be provided as individual arguments, each referencing a\n   single attribute and specifying a single criteria. This ensures that all of the individual expression are\n   applied to each variant, even if a given variant is missing values for some of the expression conditions.\n   <p>\n   As an example, multiple individual expressions provided like this:\n   <pre>\n     gatk VariantFiltration \\\n     -R reference.fasta \\\n     -V input.vcf.gz \\\n     -O output.vcf.gz \\\n     --filter-name \"my_filter1\" \\\n     --filter-expression \"AB < 0.2\" \\\n     --filter-name \"my_filter2\" \\\n     --filter-expression \"MQ0 > 50\"\n   </pre>\n\n   are preferable to a single compound expression such as this:\n\n    <pre>\n      gatk VariantFiltration \\\n      -R reference.fasta \\\n      -V input.vcf.gz \\\n      -O output.vcf.gz \\\n      --filter-name \"my_filter\" \\\n      --filter-expression \"AB < 0.2 || MQ0 > 50\"\n    </pre>\n   See this <a href=\"https://www.broadinstitute.org/gatk/guide/article?id=1255\">article about using JEXL expressions</a>\n   for more information.\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement:\n    expressionLib:\n    - |\n      /**\n       * File of functions to be added to cwl files\n       */\n\n      function generateGATK4BooleanValue(){\n          /**\n           * Boolean types in GATK 4 are expressed on the command line as --<PREFIX> \"true\"/\"false\",\n           * so patch here\n           */\n          if(self === true || self === false){\n              return self.toString()\n          }\n\n          return self;\n      }\n\n      function applyTagsToArgument(prefix, tags){\n          /**\n           * Function to be used in the field valueFrom of File objects to add gatk tags.\n           */\n\n          if(!self){\n              return null;\n          }\n          else if(!tags){\n              return generateArrayCmd(prefix);\n          }\n          else{\n              function addTagToArgument(tagObject, argument){\n                  var allTags = Array.isArray(tagObject) ? tagObject.join(\",\") : tagObject;\n\n                  return [prefix + \":\" + allTags, argument];\n              }\n\n              if(Array.isArray(self)){\n                  if(!Array.isArray(tags) || self.length !== tags.length){\n                      throw new TypeError(\"Argument '\" + prefix + \"' tag field is invalid\");\n                  }\n\n                  var value = self.map(function(element, i) {\n                      return addTagToArgument(tags[i], element);\n                  }).reduce(function(a, b){return a.concat(b)})\n\n                  return value;\n              }\n              else{\n                  return addTagToArgument(tags, self);\n              }\n          }\n      }\n\n      function generateArrayCmd(prefix){\n          /**\n           * Function to be used in the field valueFrom of array objects, so that arrays are optional\n           * and prefixes are handled properly.\n           *\n           * The issue that this solves is documented here:\n           * https://www.biostars.org/p/258414/#260140\n           */\n          if(!self){\n              return null;\n          }\n\n          if(!Array.isArray(self)){\n              self = [self];\n          }\n\n          var output = [];\n          self.forEach(function(element) {\n              output.push(prefix);\n              output.push(element);\n          })\n\n          return output;\n      }\n\n      /* Polyfill String.endsWith (it was introduced in ES6, but CWL 1.0 only supports ES5) */\n      String.prototype.endsWith = String.prototype.endsWith || function(suffix) {\n          return this.indexOf(suffix, this.length - suffix.length) >= 0;\n      };\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gatk4:4.1.6.0--py38_0\n  SoftwareRequirement:\n    packages:\n      gatk:\n        specs:\n          - https://identifiers.org/biotools/gatk\n          - https://anaconda.org/bioconda/gatk4\n        version: [ \"4.1.6.0\" ]\ninputs:\n- doc: Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise,\n    overrides threshold fraction.\n  id: ambig-filter-bases\n  type: int?\n  inputBinding:\n    prefix: --ambig-filter-bases\n- doc: Threshold fraction of ambiguous bases\n  id: ambig-filter-frac\n  type: double?\n  inputBinding:\n    prefix: --ambig-filter-frac\n- doc: Maximum length of fragment (insert size)\n  id: max-fragment-length\n  type: int?\n  inputBinding:\n    prefix: --max-fragment-length\n- doc: Minimum length of fragment (insert size)\n  id: min-fragment-length\n  type: int?\n  inputBinding:\n    prefix: --min-fragment-length\n- doc: One or more genomic intervals to keep\n  id: keep-intervals\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--keep-intervals\"))\n- doc: Name of the library to keep\n  id: library\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--library\"))\n- doc: Maximum mapping quality to keep (inclusive)\n  id: maximum-mapping-quality\n  type: int?\n  inputBinding:\n    prefix: --maximum-mapping-quality\n- doc: Minimum mapping quality to keep (inclusive)\n  id: minimum-mapping-quality\n  type: int?\n  inputBinding:\n    prefix: --minimum-mapping-quality\n- doc: Minimum start location difference at which mapped mates are considered distant\n  id: mate-too-distant-length\n  type: int?\n  inputBinding:\n    prefix: --mate-too-distant-length\n- doc: Allow a read to be filtered out based on having only 1 soft-clipped block.\n    By default, both ends must have a soft-clipped block, setting this flag requires\n    only 1 soft-clipped block\n  id: dont-require-soft-clips-both-ends\n  type: boolean?\n  inputBinding:\n    prefix: --dont-require-soft-clips-both-ends\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Minimum number of aligned bases\n  id: filter-too-short\n  type: int?\n  inputBinding:\n    prefix: --filter-too-short\n- doc: Platform attribute (PL) to match\n  id: platform-filter-name\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--platform-filter-name\"))\n- doc: Platform unit (PU) to filter out\n  id: black-listed-lanes\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--black-listed-lanes\"))\n- doc: A read group filter expression in the form \"attribute:value\", where \"attribute\"\n    is a two character read group attribute such as \"RG\" or \"PU\".\n  id: read-group-black-list\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--read-group-black-list\"))\n- doc: The name of the read group to keep\n  id: keep-read-group\n  type: string?\n  inputBinding:\n    prefix: --keep-read-group\n- doc: Keep only reads with length at most equal to the specified value\n  id: max-read-length\n  type: int?\n  inputBinding:\n    prefix: --max-read-length\n- doc: Keep only reads with length at least equal to the specified value\n  id: min-read-length\n  type: int?\n  inputBinding:\n    prefix: --min-read-length\n- doc: Keep only reads with this read name\n  id: read-name\n  type: string?\n  inputBinding:\n    prefix: --read-name\n- doc: Keep only reads on the reverse strand\n  id: keep-reverse-strand-only\n  type: boolean?\n  inputBinding:\n    prefix: --keep-reverse-strand-only\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: The name of the sample(s) to keep, filtering out all others\n  id: sample\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--sample\"))\n- doc: Inverts the results from this filter, causing all variants that would pass\n    to fail and visa-versa.\n  id: invert-soft-clip-ratio-filter\n  type: boolean?\n  inputBinding:\n    prefix: --invert-soft-clip-ratio-filter\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Threshold ratio of soft clipped bases (leading / trailing the cigar string)\n    to total bases in read for read to be filtered.\n  id: soft-clipped-leading-trailing-ratio\n  type: double?\n  inputBinding:\n    prefix: --soft-clipped-leading-trailing-ratio\n- doc: Threshold ratio of soft clipped bases (anywhere in the cigar string) to total\n    bases in read for read to be filtered.\n  id: soft-clipped-ratio-threshold\n  type: double?\n  inputBinding:\n    prefix: --soft-clipped-ratio-threshold\n- doc: If true, adds a PG tag to created SAM/BAM/CRAM files.\n  id: add-output-sam-program-record\n  type: boolean?\n  inputBinding:\n    prefix: --add-output-sam-program-record\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, adds a command line header line to created VCF files.\n  id: add-output-vcf-command-line\n  type: boolean?\n  inputBinding:\n    prefix: --add-output-vcf-command-line\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: read one or more arguments files and add them to the command line\n  id: arguments_file\n  type:\n  - 'null'\n  - type: array\n    items: File\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--arguments_file\", inputs['arguments_file_tags']))\n- doc: A argument to set the tags of 'arguments_file'\n  id: arguments_file_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer\n    if unset. [synonymous with -CIPB]\n  id: cloud-index-prefetch-buffer\n  type: int?\n  inputBinding:\n    prefix: --cloud-index-prefetch-buffer\n- doc: Size of the cloud-only prefetch buffer (in MB; 0 to disable). [synonymous with\n    -CPB]\n  id: cloud-prefetch-buffer\n  type: int?\n  inputBinding:\n    prefix: --cloud-prefetch-buffer\n- doc: The number of SNPs which make up a cluster. Must be at least 2 [synonymous\n    with -cluster]\n  id: cluster-size\n  type: int?\n  inputBinding:\n    prefix: --cluster-size\n- doc: The window size (in bases) in which to evaluate clustered SNPs [synonymous\n    with -window]\n  id: cluster-window-size\n  type: int?\n  inputBinding:\n    prefix: --cluster-window-size\n- doc: If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM\n    file. [synonymous with -OBI]\n  id: create-output-bam-index\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-bam-index\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a MD5 digest for any BAM/SAM/CRAM file created [synonymous\n    with -OBM]\n  id: create-output-bam-md5\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-bam-md5\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a VCF index when writing a coordinate-sorted VCF file. [synonymous\n    with -OVI]\n  id: create-output-variant-index\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-variant-index\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, create a a MD5 digest any VCF file created. [synonymous with -OVM]\n  id: create-output-variant-md5\n  type: boolean?\n  inputBinding:\n    prefix: --create-output-variant-md5\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, don't cache bam indexes, this will reduce memory requirements but\n    may harm performance if many intervals are specified.  Caching is automatically\n    disabled if there are no intervals specified. [synonymous with -DBIC]\n  id: disable-bam-index-caching\n  type: boolean?\n  inputBinding:\n    prefix: --disable-bam-index-caching\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Read filters to be disabled before analysis [synonymous with -DF]\n  id: disable-read-filter\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--disable-read-filter\"))\n- doc: If specified, do not check the sequence dictionaries from our inputs for compatibility.\n    Use at your own risk!\n  id: disable-sequence-dictionary-validation\n  type: boolean?\n  inputBinding:\n    prefix: --disable-sequence-dictionary-validation\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: 'Disable all tool default read filters (WARNING: many tools will not function\n    correctly without their default read filters on)'\n  id: disable-tool-default-read-filters\n  type: boolean?\n  inputBinding:\n    prefix: --disable-tool-default-read-filters\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: One or more genomic intervals to exclude from processing [synonymous with -XL]\n  id: exclude-intervals\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--exclude-intervals\"))\n- doc: One or more expressions used with INFO fields to filter [synonymous with -filter]\n  id: filter-expression\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--filter-expression\"))\n- doc: Names to use for the list of filters\n  id: filter-name\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--filter-name\"))\n- doc: Filter records NOT in given input mask.\n  id: filter-not-in-mask\n  type: boolean?\n  inputBinding:\n    prefix: --filter-not-in-mask\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: A configuration file to use with the GATK.\n  id: gatk-config-file\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--gatk-config-file\", inputs['gatk-config-file_tags']))\n- doc: A argument to set the tags of 'gatk-config-file'\n  id: gatk-config-file_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: If the GCS bucket channel errors out, how many times it will attempt to re-initiate\n    the connection [synonymous with -gcs-retries]\n  id: gcs-max-retries\n  type: int?\n  inputBinding:\n    prefix: --gcs-max-retries\n- doc: Project to bill when accessing \"requester pays\" buckets. If unset, these buckets\n    cannot be accessed.\n  id: gcs-project-for-requester-pays\n  type: string?\n  inputBinding:\n    prefix: --gcs-project-for-requester-pays\n- doc: One or more expressions used with FORMAT (sample/genotype-level) fields to\n    filter (see documentation guide for more info) [synonymous with -G-filter]\n  id: genotype-filter-expression\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--genotype-filter-expression\"))\n- doc: Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping);\n    this name is put in the FILTER field for variants that get filtered [synonymous\n    with -G-filter-name]\n  id: genotype-filter-name\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--genotype-filter-name\"))\n- doc: BAM/SAM/CRAM file containing reads [synonymous with -I]\n  id: input\n  type:\n  - 'null'\n  - type: array\n    items: File\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--input\", inputs['input_tags']))\n  secondaryFiles: $(self.basename + self.nameext.replace('m','i'))\n- doc: A argument to set the tags of 'input'\n  id: input_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Amount of padding (in bp) to add to each interval you are excluding. [synonymous\n    with -ixp]\n  id: interval-exclusion-padding\n  type: int?\n  inputBinding:\n    prefix: --interval-exclusion-padding\n- doc: Interval merging rule for abutting intervals [synonymous with -imr]\n  id: interval-merging-rule\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - ALL\n    - OVERLAPPING_ONLY\n  inputBinding:\n    prefix: --interval-merging-rule\n- doc: Amount of padding (in bp) to add to each interval you are including. [synonymous\n    with -ip]\n  id: interval-padding\n  type: int?\n  inputBinding:\n    prefix: --interval-padding\n- doc: Set merging approach to use for combining interval inputs [synonymous with\n    -isr]\n  id: interval-set-rule\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - UNION\n    - INTERSECTION\n  inputBinding:\n    prefix: --interval-set-rule\n- doc: One or more genomic intervals over which to operate [synonymous with -L]\n  id: intervals\n  type:\n  - 'null'\n  - type: array\n    items:\n    - File\n    - string\n    inputBinding:\n      valueFrom: $(null)\n  - File\n  - string\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--intervals\", inputs['intervals_tags']))\n- doc: A argument to set the tags of 'intervals'\n  id: intervals_tags\n  type:\n  - 'null'\n  - type: array\n    items:\n    - string\n    - type: array\n      items: string\n- doc: Remove previous filters applied to the VCF\n  id: invalidate-previous-filters\n  type: boolean?\n  inputBinding:\n    prefix: --invalidate-previous-filters\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Invert the selection criteria for --filter-expression [synonymous with -invfilter]\n  id: invert-filter-expression\n  type: boolean?\n  inputBinding:\n    prefix: --invert-filter-expression\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Invert the selection criteria for --genotype-filter-expression [synonymous\n    with -invG-filter]\n  id: invert-genotype-filter-expression\n  type: boolean?\n  inputBinding:\n    prefix: --invert-genotype-filter-expression\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Lenient processing of VCF files [synonymous with -LE]\n  id: lenient\n  type: boolean?\n  inputBinding:\n    prefix: --lenient\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Input mask\n  id: mask\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--mask\", inputs['mask_tags']))\n- doc: A argument to set the tags of 'mask'\n  id: mask_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: How many bases beyond records from a provided 'mask' should variants be filtered\n  id: mask-extension\n  type: int?\n  inputBinding:\n    prefix: --mask-extension\n- doc: The text to put in the FILTER field if a 'mask' is provided and overlaps with\n    a variant call\n  id: mask-name\n  type: string?\n  inputBinding:\n    prefix: --mask-name\n- doc: When evaluating the JEXL expressions, missing values should be considered failing\n    the expression\n  id: missing-values-evaluate-as-failing\n  type: boolean?\n  inputBinding:\n    prefix: --missing-values-evaluate-as-failing\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: File to which variants should be written [synonymous with -O]\n  id: output_filename\n  type: string\n  inputBinding:\n    prefix: --output\n- doc: Whether to suppress job-summary info on System.err.\n  id: QUIET\n  type: boolean?\n  inputBinding:\n    prefix: --QUIET\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Read filters to be applied before analysis [synonymous with -RF]\n  id: read-filter\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--read-filter\"))\n- doc: Indices to use for the read inputs. If specified, an index must be provided\n    for every read input and in the same order as the read inputs. If this argument\n    is not specified, the path to the index for each input will be inferred automatically.\n  id: read-index\n  type:\n  - 'null'\n  - type: array\n    items: string\n    inputBinding:\n      valueFrom: $(null)\n  - string\n  inputBinding:\n    valueFrom: $(generateArrayCmd(\"--read-index\"))\n- doc: Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The\n    default stringency value SILENT can improve performance when processing a BAM\n    file in which variable-length data (read, qualities, tags) do not otherwise need\n    to be decoded. [synonymous with -VS]\n  id: read-validation-stringency\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - STRICT\n    - LENIENT\n    - SILENT\n  inputBinding:\n    prefix: --read-validation-stringency\n- doc: Reference sequence [synonymous with -R]\n  id: reference\n  type: File?\n  inputBinding:\n    prefix: --reference\n  secondaryFiles:\n  - .fai\n  - ^.dict\n- doc: Output traversal statistics every time this many seconds elapse\n  id: seconds-between-progress-updates\n  type: double?\n  inputBinding:\n    prefix: --seconds-between-progress-updates\n- doc: Use the given sequence dictionary as the master/canonical sequence dictionary.  Must\n    be a .dict file.\n  id: sequence-dictionary\n  type: File?\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--sequence-dictionary\", inputs['sequence-dictionary_tags']))\n- doc: A argument to set the tags of 'sequence-dictionary'\n  id: sequence-dictionary_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Set filtered genotypes to no-call\n  id: set-filtered-genotype-to-no-call\n  type: boolean?\n  inputBinding:\n    prefix: --set-filtered-genotype-to-no-call\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: display hidden arguments\n  id: showHidden\n  type: boolean?\n  inputBinding:\n    prefix: --showHidden\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: If true, don't emit genotype fields when writing vcf file output.\n  id: sites-only-vcf-output\n  type: boolean?\n  inputBinding:\n    prefix: --sites-only-vcf-output\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Temp directory to use.\n  id: tmp-dir\n  type: string?\n  inputBinding:\n    prefix: --tmp-dir\n- doc: Whether to use the JdkDeflater (as opposed to IntelDeflater) [synonymous with\n    -jdk-deflater]\n  id: use-jdk-deflater\n  type: boolean?\n  inputBinding:\n    prefix: --use-jdk-deflater\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Whether to use the JdkInflater (as opposed to IntelInflater) [synonymous with\n    -jdk-inflater]\n  id: use-jdk-inflater\n  type: boolean?\n  inputBinding:\n    prefix: --use-jdk-inflater\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: A VCF file containing variants [synonymous with -V]\n  id: variant\n  type: File\n  inputBinding:\n    valueFrom: $(applyTagsToArgument(\"--variant\", inputs['variant_tags']))\n- doc: A argument to set the tags of 'variant'\n  id: variant_tags\n  type:\n  - 'null'\n  - string\n  - string[]\n- doc: Control verbosity of logging.\n  id: verbosity\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - ERROR\n    - WARNING\n    - INFO\n    - DEBUG\n  inputBinding:\n    prefix: --verbosity\n- doc: display the version number for this tool\n  id: version\n  type: boolean?\n  inputBinding:\n    prefix: --version\n    valueFrom: $(generateGATK4BooleanValue())\noutputs:\n- id: output\n  doc: Output file from corresponding to the input argument output-filename\n  type: File\n  outputBinding:\n    glob: $(inputs.output_filename)\n  secondaryFiles:\n  - \"$(inputs['create-output-variant-index']? self.basename + (inputs.output_filename.endsWith('.gz')?\\\n    \\ '.tbi':'.idx') : [])\"\n  - \"$(inputs['create-output-variant-md5']? self.basename + '.md5' : [])\"\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'ambig-filter-bases', 'doc': 'Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction.', 'inputBinding': {'prefix': '--ambig-filter-bases'}, 'type': ['null', 'int']}, {'id': 'ambig-filter-frac', 'doc': 'Threshold fraction of ambiguous bases', 'inputBinding': {'prefix': '--ambig-filter-frac'}, 'type': ['null', 'double']}, {'id': 'max-fragment-length', 'doc': 'Maximum length of fragment (insert size)', 'inputBinding': {'prefix': '--max-fragment-length'}, 'type': ['null', 'int']}, {'id': 'min-fragment-length', 'doc': 'Minimum length of fragment (insert size)', 'inputBinding': {'prefix': '--min-fragment-length'}, 'type': ['null', 'int']}, {'id': 'keep-intervals', 'doc': 'One or more genomic intervals to keep', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--keep-intervals\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'library', 'doc': 'Name of the library to keep', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--library\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'maximum-mapping-quality', 'doc': 'Maximum mapping quality to keep (inclusive)', 'inputBinding': {'prefix': '--maximum-mapping-quality'}, 'type': ['null', 'int']}, {'id': 'minimum-mapping-quality', 'doc': 'Minimum mapping quality to keep (inclusive)', 'inputBinding': {'prefix': '--minimum-mapping-quality'}, 'type': ['null', 'int']}, {'id': 'mate-too-distant-length', 'doc': 'Minimum start location difference at which mapped mates are considered distant', 'inputBinding': {'prefix': '--mate-too-distant-length'}, 'type': ['null', 'int']}, {'id': 'dont-require-soft-clips-both-ends', 'doc': 'Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block', 'inputBinding': {'prefix': '--dont-require-soft-clips-both-ends', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'filter-too-short', 'doc': 'Minimum number of aligned bases', 'inputBinding': {'prefix': '--filter-too-short'}, 'type': ['null', 'int']}, {'id': 'platform-filter-name', 'doc': 'Platform attribute (PL) to match', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--platform-filter-name\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'black-listed-lanes', 'doc': 'Platform unit (PU) to filter out', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--black-listed-lanes\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'read-group-black-list', 'doc': 'A read group filter expression in the form \"attribute:value\", where \"attribute\" is a two character read group attribute such as \"RG\" or \"PU\".', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--read-group-black-list\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'keep-read-group', 'doc': 'The name of the read group to keep', 'inputBinding': {'prefix': '--keep-read-group'}, 'type': ['null', 'string']}, {'id': 'max-read-length', 'doc': 'Keep only reads with length at most equal to the specified value', 'inputBinding': {'prefix': '--max-read-length'}, 'type': ['null', 'int']}, {'id': 'min-read-length', 'doc': 'Keep only reads with length at least equal to the specified value', 'inputBinding': {'prefix': '--min-read-length'}, 'type': ['null', 'int']}, {'id': 'read-name', 'doc': 'Keep only reads with this read name', 'inputBinding': {'prefix': '--read-name'}, 'type': ['null', 'string']}, {'id': 'keep-reverse-strand-only', 'doc': 'Keep only reads on the reverse strand', 'inputBinding': {'prefix': '--keep-reverse-strand-only', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'sample', 'doc': 'The name of the sample(s) to keep, filtering out all others', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--sample\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'invert-soft-clip-ratio-filter', 'doc': 'Inverts the results from this filter, causing all variants that would pass to fail and visa-versa.', 'inputBinding': {'prefix': '--invert-soft-clip-ratio-filter', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'soft-clipped-leading-trailing-ratio', 'doc': 'Threshold ratio of soft clipped bases (leading / trailing the cigar string) to total bases in read for read to be filtered.', 'inputBinding': {'prefix': '--soft-clipped-leading-trailing-ratio'}, 'type': ['null', 'double']}, {'id': 'soft-clipped-ratio-threshold', 'doc': 'Threshold ratio of soft clipped bases (anywhere in the cigar string) to total bases in read for read to be filtered.', 'inputBinding': {'prefix': '--soft-clipped-ratio-threshold'}, 'type': ['null', 'double']}, {'id': 'add-output-sam-program-record', 'doc': 'If true, adds a PG tag to created SAM/BAM/CRAM files.', 'inputBinding': {'prefix': '--add-output-sam-program-record', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'add-output-vcf-command-line', 'doc': 'If true, adds a command line header line to created VCF files.', 'inputBinding': {'prefix': '--add-output-vcf-command-line', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'arguments_file', 'doc': 'read one or more arguments files and add them to the command line', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--arguments_file\", inputs[\\'arguments_file_tags\\']))'}, 'type': ['null', {'items': 'File', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File']}, {'id': 'arguments_file_tags', 'doc': \"A argument to set the tags of 'arguments_file'\", 'type': ['null', {'items': ['string', {'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'cloud-index-prefetch-buffer', 'doc': 'Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. [synonymous with -CIPB]', 'inputBinding': {'prefix': '--cloud-index-prefetch-buffer'}, 'type': ['null', 'int']}, {'id': 'cloud-prefetch-buffer', 'doc': 'Size of the cloud-only prefetch buffer (in MB; 0 to disable). [synonymous with -CPB]', 'inputBinding': {'prefix': '--cloud-prefetch-buffer'}, 'type': ['null', 'int']}, {'id': 'cluster-size', 'doc': 'The number of SNPs which make up a cluster. Must be at least 2 [synonymous with -cluster]', 'inputBinding': {'prefix': '--cluster-size'}, 'type': ['null', 'int']}, {'id': 'cluster-window-size', 'doc': 'The window size (in bases) in which to evaluate clustered SNPs [synonymous with -window]', 'inputBinding': {'prefix': '--cluster-window-size'}, 'type': ['null', 'int']}, {'id': 'create-output-bam-index', 'doc': 'If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. [synonymous with -OBI]', 'inputBinding': {'prefix': '--create-output-bam-index', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'create-output-bam-md5', 'doc': 'If true, create a MD5 digest for any BAM/SAM/CRAM file created [synonymous with -OBM]', 'inputBinding': {'prefix': '--create-output-bam-md5', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'create-output-variant-index', 'doc': 'If true, create a VCF index when writing a coordinate-sorted VCF file. [synonymous with -OVI]', 'inputBinding': {'prefix': '--create-output-variant-index', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'create-output-variant-md5', 'doc': 'If true, create a a MD5 digest any VCF file created. [synonymous with -OVM]', 'inputBinding': {'prefix': '--create-output-variant-md5', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'disable-bam-index-caching', 'doc': \"If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified.  Caching is automatically disabled if there are no intervals specified. [synonymous with -DBIC]\", 'inputBinding': {'prefix': '--disable-bam-index-caching', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'disable-read-filter', 'doc': 'Read filters to be disabled before analysis [synonymous with -DF]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--disable-read-filter\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'disable-sequence-dictionary-validation', 'doc': 'If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk!', 'inputBinding': {'prefix': '--disable-sequence-dictionary-validation', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'disable-tool-default-read-filters', 'doc': 'Disable all tool default read filters (WARNING: many tools will not function correctly without their default read filters on)', 'inputBinding': {'prefix': '--disable-tool-default-read-filters', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'exclude-intervals', 'doc': 'One or more genomic intervals to exclude from processing [synonymous with -XL]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--exclude-intervals\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'filter-expression', 'doc': 'One or more expressions used with INFO fields to filter [synonymous with -filter]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--filter-expression\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'filter-name', 'doc': 'Names to use for the list of filters', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--filter-name\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'filter-not-in-mask', 'doc': 'Filter records NOT in given input mask.', 'inputBinding': {'prefix': '--filter-not-in-mask', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'gatk-config-file', 'doc': 'A configuration file to use with the GATK.', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--gatk-config-file\", inputs[\\'gatk-config-file_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'gatk-config-file_tags', 'doc': \"A argument to set the tags of 'gatk-config-file'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'gcs-max-retries', 'doc': 'If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection [synonymous with -gcs-retries]', 'inputBinding': {'prefix': '--gcs-max-retries'}, 'type': ['null', 'int']}, {'id': 'gcs-project-for-requester-pays', 'doc': 'Project to bill when accessing \"requester pays\" buckets. If unset, these buckets cannot be accessed.', 'inputBinding': {'prefix': '--gcs-project-for-requester-pays'}, 'type': ['null', 'string']}, {'id': 'genotype-filter-expression', 'doc': 'One or more expressions used with FORMAT (sample/genotype-level) fields to filter (see documentation guide for more info) [synonymous with -G-filter]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--genotype-filter-expression\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'genotype-filter-name', 'doc': 'Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered [synonymous with -G-filter-name]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--genotype-filter-name\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'input', 'secondaryFiles': \"$(self.basename + self.nameext.replace('m','i'))\", 'doc': 'BAM/SAM/CRAM file containing reads [synonymous with -I]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--input\", inputs[\\'input_tags\\']))'}, 'type': ['null', {'items': 'File', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File']}, {'id': 'input_tags', 'doc': \"A argument to set the tags of 'input'\", 'type': ['null', {'items': ['string', {'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'interval-exclusion-padding', 'doc': 'Amount of padding (in bp) to add to each interval you are excluding. [synonymous with -ixp]', 'inputBinding': {'prefix': '--interval-exclusion-padding'}, 'type': ['null', 'int']}, {'id': 'interval-merging-rule', 'doc': 'Interval merging rule for abutting intervals [synonymous with -imr]', 'inputBinding': {'prefix': '--interval-merging-rule'}, 'type': ['null', {'name': '_:e6f5ecb2-f67f-495c-a6e2-9ca79b313fff', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-merging-rule/ALL', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-merging-rule/OVERLAPPING_ONLY'], 'type': 'enum'}]}, {'id': 'interval-padding', 'doc': 'Amount of padding (in bp) to add to each interval you are including. [synonymous with -ip]', 'inputBinding': {'prefix': '--interval-padding'}, 'type': ['null', 'int']}, {'id': 'interval-set-rule', 'doc': 'Set merging approach to use for combining interval inputs [synonymous with -isr]', 'inputBinding': {'prefix': '--interval-set-rule'}, 'type': ['null', {'name': '_:d7e7d937-624f-4520-82e6-5185e2c6cf51', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-set-rule/UNION', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#interval-set-rule/INTERSECTION'], 'type': 'enum'}]}, {'id': 'intervals', 'doc': 'One or more genomic intervals over which to operate [synonymous with -L]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--intervals\", inputs[\\'intervals_tags\\']))'}, 'type': ['null', {'items': ['File', 'string'], 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'File', 'string']}, {'id': 'intervals_tags', 'doc': \"A argument to set the tags of 'intervals'\", 'type': ['null', {'items': ['string', {'items': 'string', 'type': 'array'}], 'type': 'array'}]}, {'id': 'invalidate-previous-filters', 'doc': 'Remove previous filters applied to the VCF', 'inputBinding': {'prefix': '--invalidate-previous-filters', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'invert-filter-expression', 'doc': 'Invert the selection criteria for --filter-expression [synonymous with -invfilter]', 'inputBinding': {'prefix': '--invert-filter-expression', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'invert-genotype-filter-expression', 'doc': 'Invert the selection criteria for --genotype-filter-expression [synonymous with -invG-filter]', 'inputBinding': {'prefix': '--invert-genotype-filter-expression', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'lenient', 'doc': 'Lenient processing of VCF files [synonymous with -LE]', 'inputBinding': {'prefix': '--lenient', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'mask', 'doc': 'Input mask', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--mask\", inputs[\\'mask_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'mask_tags', 'doc': \"A argument to set the tags of 'mask'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'mask-extension', 'doc': \"How many bases beyond records from a provided 'mask' should variants be filtered\", 'inputBinding': {'prefix': '--mask-extension'}, 'type': ['null', 'int']}, {'id': 'mask-name', 'doc': \"The text to put in the FILTER field if a 'mask' is provided and overlaps with a variant call\", 'inputBinding': {'prefix': '--mask-name'}, 'type': ['null', 'string']}, {'id': 'missing-values-evaluate-as-failing', 'doc': 'When evaluating the JEXL expressions, missing values should be considered failing the expression', 'inputBinding': {'prefix': '--missing-values-evaluate-as-failing', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'output_filename', 'doc': 'File to which variants should be written [synonymous with -O]', 'inputBinding': {'prefix': '--output'}, 'type': 'string'}, {'id': 'QUIET', 'doc': 'Whether to suppress job-summary info on System.err.', 'inputBinding': {'prefix': '--QUIET', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'read-filter', 'doc': 'Read filters to be applied before analysis [synonymous with -RF]', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--read-filter\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'read-index', 'doc': 'Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically.', 'inputBinding': {'valueFrom': '$(generateArrayCmd(\"--read-index\"))'}, 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'valueFrom': '$(null)'}}, 'string']}, {'id': 'read-validation-stringency', 'doc': 'Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. [synonymous with -VS]', 'inputBinding': {'prefix': '--read-validation-stringency'}, 'type': ['null', {'name': '_:fbffb445-9d25-4fa4-99bb-361a5decb125', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read-validation-stringency/STRICT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read-validation-stringency/LENIENT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read-validation-stringency/SILENT'], 'type': 'enum'}]}, {'id': 'reference', 'secondaryFiles': ['.fai', '^.dict'], 'doc': 'Reference sequence [synonymous with -R]', 'inputBinding': {'prefix': '--reference'}, 'type': ['null', 'File']}, {'id': 'seconds-between-progress-updates', 'doc': 'Output traversal statistics every time this many seconds elapse', 'inputBinding': {'prefix': '--seconds-between-progress-updates'}, 'type': ['null', 'double']}, {'id': 'sequence-dictionary', 'doc': 'Use the given sequence dictionary as the master/canonical sequence dictionary.  Must be a .dict file.', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--sequence-dictionary\", inputs[\\'sequence-dictionary_tags\\']))'}, 'type': ['null', 'File']}, {'id': 'sequence-dictionary_tags', 'doc': \"A argument to set the tags of 'sequence-dictionary'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'set-filtered-genotype-to-no-call', 'doc': 'Set filtered genotypes to no-call', 'inputBinding': {'prefix': '--set-filtered-genotype-to-no-call', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'showHidden', 'doc': 'display hidden arguments', 'inputBinding': {'prefix': '--showHidden', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'sites-only-vcf-output', 'doc': \"If true, don't emit genotype fields when writing vcf file output.\", 'inputBinding': {'prefix': '--sites-only-vcf-output', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'tmp-dir', 'doc': 'Temp directory to use.', 'inputBinding': {'prefix': '--tmp-dir'}, 'type': ['null', 'string']}, {'id': 'use-jdk-deflater', 'doc': 'Whether to use the JdkDeflater (as opposed to IntelDeflater) [synonymous with -jdk-deflater]', 'inputBinding': {'prefix': '--use-jdk-deflater', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'use-jdk-inflater', 'doc': 'Whether to use the JdkInflater (as opposed to IntelInflater) [synonymous with -jdk-inflater]', 'inputBinding': {'prefix': '--use-jdk-inflater', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'variant', 'doc': 'A VCF file containing variants [synonymous with -V]', 'inputBinding': {'valueFrom': '$(applyTagsToArgument(\"--variant\", inputs[\\'variant_tags\\']))'}, 'type': 'File'}, {'id': 'variant_tags', 'doc': \"A argument to set the tags of 'variant'\", 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'verbosity', 'doc': 'Control verbosity of logging.', 'inputBinding': {'prefix': '--verbosity'}, 'type': ['null', {'name': '_:71f8f251-68a6-425b-8ddf-a2c0913f33cb', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/ERROR', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/WARNING', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/INFO', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#verbosity/DEBUG'], 'type': 'enum'}]}, {'id': 'version', 'doc': 'display the version number for this tool', 'inputBinding': {'prefix': '--version', 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'output', 'secondaryFiles': [\"$(inputs['create-output-variant-index']? self.basename + (inputs.output_filename.endsWith('.gz')? '.tbi':'.idx') : [])\", \"$(inputs['create-output-variant-md5']? self.basename + '.md5' : [])\"], 'doc': 'Output file from corresponding to the input argument output-filename', 'outputBinding': {'glob': '$(inputs.output_filename)'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gatk4:4.1.6.0--py38_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gatk', 'version': ['4.1.6.0'], 'specs': ['https://identifiers.org/biotools/gatk', 'https://anaconda.org/bioconda/gatk4']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gatk', 'VariantFiltration']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['/**\\n * File of functions to be added to cwl files\\n */\\n\\nfunction generateGATK4BooleanValue(){\\n    /**\\n     * Boolean types in GATK 4 are expressed on the command line as --<PREFIX> \"true\"/\"false\",\\n     * so patch here\\n     */\\n    if(self === true || self === false){\\n        return self.toString()\\n    }\\n\\n    return self;\\n}\\n\\nfunction applyTagsToArgument(prefix, tags){\\n    /**\\n     * Function to be used in the field valueFrom of File objects to add gatk tags.\\n     */\\n\\n    if(!self){\\n        return null;\\n    }\\n    else if(!tags){\\n        return generateArrayCmd(prefix);\\n    }\\n    else{\\n        function addTagToArgument(tagObject, argument){\\n            var allTags = Array.isArray(tagObject) ? tagObject.join(\",\") : tagObject;\\n\\n            return [prefix + \":\" + allTags, argument];\\n        }\\n\\n        if(Array.isArray(self)){\\n            if(!Array.isArray(tags) || self.length !== tags.length){\\n                throw new TypeError(\"Argument \\'\" + prefix + \"\\' tag field is invalid\");\\n            }\\n\\n            var value = self.map(function(element, i) {\\n                return addTagToArgument(tags[i], element);\\n            }).reduce(function(a, b){return a.concat(b)})\\n\\n            return value;\\n        }\\n        else{\\n            return addTagToArgument(tags, self);\\n        }\\n    }\\n}\\n\\nfunction generateArrayCmd(prefix){\\n    /**\\n     * Function to be used in the field valueFrom of array objects, so that arrays are optional\\n     * and prefixes are handled properly.\\n     *\\n     * The issue that this solves is documented here:\\n     * https://www.biostars.org/p/258414/#260140\\n     */\\n    if(!self){\\n        return null;\\n    }\\n\\n    if(!Array.isArray(self)){\\n        self = [self];\\n    }\\n\\n    var output = [];\\n    self.forEach(function(element) {\\n        output.push(prefix);\\n        output.push(element);\\n    })\\n\\n    return output;\\n}\\n\\n/* Polyfill String.endsWith (it was introduced in ES6, but CWL 1.0 only supports ES5) */\\nString.prototype.endsWith = String.prototype.endsWith || function(suffix) {\\n    return this.indexOf(suffix, this.length - suffix.length) >= 0;\\n};\\n']}, {'class': 'ShellCommandRequirement'}]",
    "cwl_doc": "Filter variant calls based on INFO and/or FORMAT annotations\n\n <p>\n This tool is designed for hard-filtering variant calls based on certain criteria. Records are hard-filtered by\n changing the value in the FILTER field to something other than PASS. Filtered records will be preserved in the output\n unless their removal is requested in the command line. </p>\n\n <h3>Inputs</h3>\n <ul>\n     <li>A VCF of variant calls to filter.</li>\n     <li>One or more filtering expressions and corresponding filter names.</li>\n </ul>\n\n <h3>Output</h3>\n <p>\n A filtered VCF in which passing variants are annotated as PASS and failing variants are annotated with the name(s) of\n the filter(s) they failed.\n </p>\n\n <h3>Usage example</h3>\n <pre>\n   gatk VariantFiltration \\\n   -R reference.fasta \\\n   -V input.vcf.gz \\\n   -O output.vcf.gz \\\n   --filter-name \"my_filter1\" \\\n   --filter-expression \"AB < 0.2\" \\\n   --filter-name \"my_filter2\" \\\n   --filter-expression \"MQ0 > 50\"\n </pre>\n\n <h3>Note</h3>\n <p>\n Composing filtering expressions can range from very simple to extremely complicated depending on what you're\n trying to do.\n <p>\n Compound expressions (ones that specify multiple conditions connected by &&, AND, ||, or OR, and reference\n multiple attributes) require special consideration. By default, variants that are missing one or more of the\n attributes referenced in a compound expression are treated as PASS for the entire expression, even if the variant\n would satisfy the filter criteria for another part of the expression. This can lead to unexpected results if any\n of the attributes referenced in a compound expression are present for some variants, but missing for others.\n <p>\n It is strongly recommended that such expressions be provided as individual arguments, each referencing a\n single attribute and specifying a single criteria. This ensures that all of the individual expression are\n applied to each variant, even if a given variant is missing values for some of the expression conditions.\n <p>\n As an example, multiple individual expressions provided like this:\n <pre>\n   gatk VariantFiltration \\\n   -R reference.fasta \\\n   -V input.vcf.gz \\\n   -O output.vcf.gz \\\n   --filter-name \"my_filter1\" \\\n   --filter-expression \"AB < 0.2\" \\\n   --filter-name \"my_filter2\" \\\n   --filter-expression \"MQ0 > 50\"\n </pre>\n\n are preferable to a single compound expression such as this:\n\n  <pre>\n    gatk VariantFiltration \\\n    -R reference.fasta \\\n    -V input.vcf.gz \\\n    -O output.vcf.gz \\\n    --filter-name \"my_filter\" \\\n    --filter-expression \"AB < 0.2 || MQ0 > 50\"\n  </pre>\n See this <a href=\"https://www.broadinstitute.org/gatk/guide/article?id=1255\">article about using JEXL expressions</a>\n for more information.",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "Kallisto/Kallisto-Index.cwl",
    "sha": "5247fce7d3a0c35931083ad154f0ca96fe69c1b9",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/Kallisto/Kallisto-Index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/kallisto:0.45.0--hdcc98e5_0\n  SoftwareRequirement:\n    packages:\n      kallisto:\n        version: [ \"0.45.0\" ]\n        specs: [ https://identifiers.org/biotools/kallisto ]\n\ninputs:\n  InputFiles:\n    type: File[]\n    format: edam:format_1929 # FASTA\n    inputBinding:\n      position: 200\n    \n  IndexName:\n    type: string\n    inputBinding:\n      prefix: \"--index=\"\n      separate: false\n      valueFrom: $(self).kl\n\n#Optional arguments\n\n  kmerSize:\n    type: int?\n    inputBinding:\n      prefix: \"--kmer-size=\"\n      separate: false\n\n  makeUnique:\n    type: boolean?\n    inputBinding:\n      prefix: \"--make-unique\"\n\nbaseCommand: [kallisto, index]\n\noutputs:\n\n  index:\n    type: File\n    outputBinding:\n      glob: $(inputs.IndexName)\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'IndexName', 'inputBinding': {'prefix': '--index=', 'separate': False, 'valueFrom': '$(self).kl'}, 'type': 'string'}, {'id': 'InputFiles', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'position': 200}, 'type': {'items': 'File', 'type': 'array'}}, {'id': 'kmerSize', 'inputBinding': {'prefix': '--kmer-size=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'makeUnique', 'inputBinding': {'prefix': '--make-unique'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'index', 'outputBinding': {'glob': '$(inputs.IndexName)'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/kallisto:0.45.0--hdcc98e5_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'kallisto', 'version': ['0.45.0'], 'specs': ['https://identifiers.org/biotools/kallisto']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['kallisto', 'index']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "Kallisto/Kallisto-Quant.cwl",
    "sha": "431ee3f0e4b4eb9a79033bbbb20b0965531a22f7",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/Kallisto/Kallisto-Quant.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/kallisto:0.45.0--hdcc98e5_0\n  SoftwareRequirement:\n    packages:\n      kallisto:\n        version: [ \"0.45.0\" ]\n        specs: [ https://identifiers.org/biotools/kallisto ]\n\ninputs:\n  InputReads:\n    type: File[]\n    format: edam:format_1930  # FASTA\n    inputBinding:\n      position: 200\n\n  Index:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: \"--index\"\n\n  isSingle:\n    type: boolean\n    inputBinding:\n      position: 2\n      prefix: \"--single\"\n\n  #Optional Inputs\n\n  isBias:\n    type: boolean?\n    inputBinding:\n      prefix: \"--bias\"\n\n  isFusion:\n    type: boolean?\n    inputBinding:\n      prefix: \"--fusion\"\n\n  isSingleOverhang:\n    type: boolean?\n    inputBinding:\n      prefix: \"--single-overhang\"\n  \n  FragmentLength:\n    type: double?\n    inputBinding:\n      separate: false\n      prefix: \"--fragment-length=\"\n  \n  StandardDeviation:\n    type: double?\n    inputBinding:\n      prefix: \"--sd\"\n  \n  BootstrapSamples:\n    type: int?\n    inputBinding:\n      separate: false\n      prefix: \"--bootstrap-samples=\"\n  \n  Seed:\n    type: int?\n    inputBinding:\n      prefix: \"--seed\"\n\n#Using record inputs to create mutually exclusive inputs\n  Strand:\n    type:\n      - \"null\"\n      - type: record\n        name: forward\n        fields:\n          forward:\n              type: boolean\n              inputBinding:\n                prefix: \"--fr-stranded\"\n\n      - type: record\n        name: reverse\n        fields:\n          reverse:\n            type: boolean\n            inputBinding:\n              prefix: \"--rf-stranded\"\n\n  PseudoBam:\n    type: boolean?\n    inputBinding:\n      prefix: \"--pseudobam\"\n\n#Using record inputs to create dependent inputs\n  \n  GenomeBam:\n    type:\n      - \"null\"\n      - type: record\n        name: genome_bam\n        fields:\n          genomebam:\n            type: boolean\n            inputBinding:\n              prefix: \"--genomebam\"\n\n          gtf:\n            type: File\n            inputBinding:\n              prefix: \"--gtf\"\n\n          chromosomes:\n            type: File\n            inputBinding:\n              prefix: \"--chromosomes\"\n\nbaseCommand: [ kallisto, quant ]\n\narguments: [ \"--output-dir\", out ]\n\noutputs:\n\n  quantification_h5:\n    type: File\n    outputBinding:\n      glob: out/abundances.h5\n\n# Long form method for defining optional outputs\n\n  quantification_tsv:\n    type: File\n    outputBinding:\n      glob: out/abundances.tsv\n\n  bam:\n    type: [\"null\", File]\n    outputBinding:\n      glob: \"out/*.bam\"\n\n  fusions:\n    type: [\"null\", File]\n    outputBinding:\n      glob: \"fusion.txt\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'BootstrapSamples', 'inputBinding': {'prefix': '--bootstrap-samples=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'FragmentLength', 'inputBinding': {'prefix': '--fragment-length=', 'separate': False}, 'type': ['null', 'double']}, {'id': 'GenomeBam', 'type': ['null', {'name': 'genome_bam', 'fields': [{'name': 'chromosomes', 'type': 'File', 'inputBinding': {'prefix': '--chromosomes'}}, {'name': 'genomebam', 'type': 'boolean', 'inputBinding': {'prefix': '--genomebam'}}, {'name': 'gtf', 'type': 'File', 'inputBinding': {'prefix': '--gtf'}}], 'type': 'record'}]}, {'id': 'Index', 'inputBinding': {'position': 1, 'prefix': '--index'}, 'type': 'File'}, {'id': 'InputReads', 'format': 'http://edamontology.org/format_1930', 'inputBinding': {'position': 200}, 'type': {'items': 'File', 'type': 'array'}}, {'id': 'PseudoBam', 'inputBinding': {'prefix': '--pseudobam'}, 'type': ['null', 'boolean']}, {'id': 'Seed', 'inputBinding': {'prefix': '--seed'}, 'type': ['null', 'int']}, {'id': 'StandardDeviation', 'inputBinding': {'prefix': '--sd'}, 'type': ['null', 'double']}, {'id': 'Strand', 'type': ['null', {'name': 'forward', 'fields': [{'name': 'forward', 'type': 'boolean', 'inputBinding': {'prefix': '--fr-stranded'}}], 'type': 'record'}, {'name': 'reverse', 'fields': [{'name': 'reverse', 'type': 'boolean', 'inputBinding': {'prefix': '--rf-stranded'}}], 'type': 'record'}]}, {'id': 'isBias', 'inputBinding': {'prefix': '--bias'}, 'type': ['null', 'boolean']}, {'id': 'isFusion', 'inputBinding': {'prefix': '--fusion'}, 'type': ['null', 'boolean']}, {'id': 'isSingle', 'inputBinding': {'position': 2, 'prefix': '--single'}, 'type': 'boolean'}, {'id': 'isSingleOverhang', 'inputBinding': {'prefix': '--single-overhang'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'bam', 'outputBinding': {'glob': 'out/*.bam'}, 'type': ['null', 'File']}, {'id': 'fusions', 'outputBinding': {'glob': 'fusion.txt'}, 'type': ['null', 'File']}, {'id': 'quantification_h5', 'outputBinding': {'glob': 'out/abundances.h5'}, 'type': 'File'}, {'id': 'quantification_tsv', 'outputBinding': {'glob': 'out/abundances.tsv'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/kallisto:0.45.0--hdcc98e5_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'kallisto', 'version': ['0.45.0'], 'specs': ['https://identifiers.org/biotools/kallisto']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['kallisto', 'quant']",
    "cwl_arguments": "['--output-dir', 'out']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "Lancet/Lancet.cwl",
    "sha": "93020ad0ff937767674395c9b453237895738d51",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/Lancet/Lancet.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: docker.io/sinaiiidgst/lancet:latest\n  SoftwareRequirement:\n    packages:\n      lancet:\n        version: [ \"1.0.7\" ]\n        specs: [ https://identifiers.org/biotools/lancet ]\n\ninputs:\n  # REQUIRED ARGS\n\n  TumorInput:\n    type: File\n    inputBinding:\n      prefix: \"--tumor\"\n    secondaryFiles:\n      - .bai\n\n  NormalInput:\n    type: File\n    inputBinding:\n      prefix: \"--normal\"\n    secondaryFiles:\n      - .bai\n\n  Reference: \n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: \"--ref\"\n\n  GenomicRegion:\n    type:\n      - \"null\"\n      - type: record\n        name: GenomicRegion\n        fields:\n          Chromosome:\n            type: string\n          RegionStart:\n            type: int\n          RegionEnd:\n            type: int\n          GenomicRegion:\n            type: string\n         # default: $(inputs.Chromosome + \":\" + inputs.RegionStart + \"-\" + inputs.RegionEnd)\n            inputBinding:\n              prefix: \"--reg\"\n              valueFrom: $(inputs.GenomicRegion.Chromosome):$(inputs.GenomicRegion.RegionStart)-$(inputs.GenomicRegion.RegionEnd)\n    \n  BedFile:\n    type: File?\n    inputBinding:\n      prefix: \"--bed\"\n\n# OPTIONAL ARGS\n\n  MinKmer:\n    type: int?\n    inputBinding:\n      prefix: \"--min-k\"\n\n  MaxKmer:\n    type: int?\n    inputBinding:\n      prefix: \"--max-k\"\n\n  TrimLowQuality:\n    type: int?\n    inputBinding:\n      prefix: \"--trim-lowqual\"\n\n  MinBaseQual:\n    type: int?\n    inputBinding:\n      prefix: \"--min-base-qual\"\n\n  QualityRange:\n    type: string?\n    inputBinding:\n      prefix: \"--quality-range\"\n\n  MinMapQual:\n    type: int?\n    inputBinding:\n      prefix: \"--min-map-qual\"\n\n  ASXSDifMax:\n    type: int?\n    inputBinding:\n      prefix: \"--max-as-xs-diff\"\n\n  MaxTipLen:\n    type: int?\n    inputBinding:\n      prefix: \"--tip-len\"\n\n  MinCovThres:\n    type: int?\n    inputBinding:\n      prefix: \"--cov-thr\"\n\n  MinCovRatio:\n    type: float?\n    inputBinding:\n      prefix: \"--cov-ratio\"\n\n  LowCovThres:\n    type: int?\n    inputBinding:\n      prefix: \"--low-cov\"\n\n  MaxAvgCov:\n    type: int?\n    inputBinding:\n      prefix: \"--max-avg-cov\"\n\n  WinSize:\n    type: int?\n    inputBinding:\n      prefix: \"--window-size\"\n\n  Padding:\n    type: int?\n    inputBinding:\n      prefix: \"--padding\"\n\n  DFSLimit:\n    type: int?\n    inputBinding:\n      prefix: \"--dfs-limit\"\n\n  MaxIndelLen:\n    type: int?\n    inputBinding:\n      prefix: \"--max-inde-len\"\n\n  MaxMismatch:\n    type: int?\n    inputBinding:\n      prefix: \"--max-mismatch\"\n\n  Threads:\n    type: int?\n    inputBinding:\n      prefix: \"--num-threads\"\n\n  NodeStrLen:\n    type: int?\n    inputBinding:\n      prefix: \"--node-str-len\"\n\n  MinAltCountTumor:\n    type: int?\n    inputBinding:\n      prefix: \"--min-alt-count-tumor\"\n\n  MaxAltCountNormal:\n    type: int?\n    inputBinding:\n      prefix: \"--max-alt-count-normal\"\n\n  MinVAFTumor:\n    type: float?\n    inputBinding:\n      prefix: \"--min-vaf-tumor\"\n\n  MaxVAFNormal:\n    type: float?\n    inputBinding:\n      prefix: \"--max-vaf-normal\"\n\n  MinCovTumor:\n    type: int?\n    inputBinding:\n      prefix: \"--min-coverage-tumor\"\n\n  MaxCovTumor:\n    type: int?\n    inputBinding:\n      prefix: \"--max-coverage-tumor\"\n\n  MinCovNormal:\n    type: int?\n    inputBinding:\n      prefix: \"--min-coverage-normal\"\n\n  MaxCovNormal:\n    type: int?\n    inputBinding:\n      prefix: \"--max-coverage-normal\"\n\n  MinPhredFisher:\n    type: float?\n    inputBinding:\n      prefix: \"--min-phred-fisher\"\n\n  MinPhredFisherSTR:\n    type: float?\n    inputBinding:\n      prefix: \"--min-phred-fisher-str\"\n\n  MinStrandBias:\n    type: float?\n    inputBinding:\n      prefix: \"--min-strand-bias\"\n\n  MaxUnitLen:\n    type: int?\n    inputBinding:\n      prefix: \"--max-unit-length\"\n\n  MinReportUnit:\n    type: int?\n    inputBinding:\n      prefix: \"--min-report-unit\"\n\n  MinReportLen:\n    type: int?\n    inputBinding:\n      prefix: \"--min-report-len\"\n\n  DistFrSTR:\n    type: int?\n    inputBinding:\n      prefix: \"--dist-from-str\"\n\n  ActRegOff:\n    type: boolean?\n    inputBinding:\n      prefix: \"--active-region-off\"\n\n  KmerRecov:\n    type: boolean?\n    inputBinding:\n      prefix: \"--kmer-recovery\"\n\n  PrintGraph:\n    type: boolean?\n    inputBinding:\n      prefix: \"--print-graph\"\n\n  Verbose:\n    type: boolean?\n    inputBinding:\n      prefix: \"--verbose\"\n\nbaseCommand: lancet\n\noutputs:\n  vcf:\n    format: edam:format_3016  # VCF\n    type: stdout\n\nstdout: \"lancet-out.vcf\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'ASXSDifMax', 'inputBinding': {'prefix': '--max-as-xs-diff'}, 'type': ['null', 'int']}, {'id': 'ActRegOff', 'inputBinding': {'prefix': '--active-region-off'}, 'type': ['null', 'boolean']}, {'id': 'BedFile', 'inputBinding': {'prefix': '--bed'}, 'type': ['null', 'File']}, {'id': 'DFSLimit', 'inputBinding': {'prefix': '--dfs-limit'}, 'type': ['null', 'int']}, {'id': 'DistFrSTR', 'inputBinding': {'prefix': '--dist-from-str'}, 'type': ['null', 'int']}, {'id': 'GenomicRegion', 'type': ['null', {'name': 'GenomicRegion', 'fields': [{'name': 'Chromosome', 'type': 'string'}, {'name': 'GenomicRegion', 'type': 'string', 'inputBinding': {'prefix': '--reg', 'valueFrom': '$(inputs.GenomicRegion.Chromosome):$(inputs.GenomicRegion.RegionStart)-$(inputs.GenomicRegion.RegionEnd)'}}, {'name': 'RegionEnd', 'type': 'int'}, {'name': 'RegionStart', 'type': 'int'}], 'type': 'record'}]}, {'id': 'KmerRecov', 'inputBinding': {'prefix': '--kmer-recovery'}, 'type': ['null', 'boolean']}, {'id': 'LowCovThres', 'inputBinding': {'prefix': '--low-cov'}, 'type': ['null', 'int']}, {'id': 'MaxAltCountNormal', 'inputBinding': {'prefix': '--max-alt-count-normal'}, 'type': ['null', 'int']}, {'id': 'MaxAvgCov', 'inputBinding': {'prefix': '--max-avg-cov'}, 'type': ['null', 'int']}, {'id': 'MaxCovNormal', 'inputBinding': {'prefix': '--max-coverage-normal'}, 'type': ['null', 'int']}, {'id': 'MaxCovTumor', 'inputBinding': {'prefix': '--max-coverage-tumor'}, 'type': ['null', 'int']}, {'id': 'MaxIndelLen', 'inputBinding': {'prefix': '--max-inde-len'}, 'type': ['null', 'int']}, {'id': 'MaxKmer', 'inputBinding': {'prefix': '--max-k'}, 'type': ['null', 'int']}, {'id': 'MaxMismatch', 'inputBinding': {'prefix': '--max-mismatch'}, 'type': ['null', 'int']}, {'id': 'MaxTipLen', 'inputBinding': {'prefix': '--tip-len'}, 'type': ['null', 'int']}, {'id': 'MaxUnitLen', 'inputBinding': {'prefix': '--max-unit-length'}, 'type': ['null', 'int']}, {'id': 'MaxVAFNormal', 'inputBinding': {'prefix': '--max-vaf-normal'}, 'type': ['null', 'float']}, {'id': 'MinAltCountTumor', 'inputBinding': {'prefix': '--min-alt-count-tumor'}, 'type': ['null', 'int']}, {'id': 'MinBaseQual', 'inputBinding': {'prefix': '--min-base-qual'}, 'type': ['null', 'int']}, {'id': 'MinCovNormal', 'inputBinding': {'prefix': '--min-coverage-normal'}, 'type': ['null', 'int']}, {'id': 'MinCovRatio', 'inputBinding': {'prefix': '--cov-ratio'}, 'type': ['null', 'float']}, {'id': 'MinCovThres', 'inputBinding': {'prefix': '--cov-thr'}, 'type': ['null', 'int']}, {'id': 'MinCovTumor', 'inputBinding': {'prefix': '--min-coverage-tumor'}, 'type': ['null', 'int']}, {'id': 'MinKmer', 'inputBinding': {'prefix': '--min-k'}, 'type': ['null', 'int']}, {'id': 'MinMapQual', 'inputBinding': {'prefix': '--min-map-qual'}, 'type': ['null', 'int']}, {'id': 'MinPhredFisher', 'inputBinding': {'prefix': '--min-phred-fisher'}, 'type': ['null', 'float']}, {'id': 'MinPhredFisherSTR', 'inputBinding': {'prefix': '--min-phred-fisher-str'}, 'type': ['null', 'float']}, {'id': 'MinReportLen', 'inputBinding': {'prefix': '--min-report-len'}, 'type': ['null', 'int']}, {'id': 'MinReportUnit', 'inputBinding': {'prefix': '--min-report-unit'}, 'type': ['null', 'int']}, {'id': 'MinStrandBias', 'inputBinding': {'prefix': '--min-strand-bias'}, 'type': ['null', 'float']}, {'id': 'MinVAFTumor', 'inputBinding': {'prefix': '--min-vaf-tumor'}, 'type': ['null', 'float']}, {'id': 'NodeStrLen', 'inputBinding': {'prefix': '--node-str-len'}, 'type': ['null', 'int']}, {'id': 'NormalInput', 'secondaryFiles': ['.bai'], 'inputBinding': {'prefix': '--normal'}, 'type': 'File'}, {'id': 'Padding', 'inputBinding': {'prefix': '--padding'}, 'type': ['null', 'int']}, {'id': 'PrintGraph', 'inputBinding': {'prefix': '--print-graph'}, 'type': ['null', 'boolean']}, {'id': 'QualityRange', 'inputBinding': {'prefix': '--quality-range'}, 'type': ['null', 'string']}, {'id': 'Reference', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'prefix': '--ref'}, 'type': 'File'}, {'id': 'Threads', 'inputBinding': {'prefix': '--num-threads'}, 'type': ['null', 'int']}, {'id': 'TrimLowQuality', 'inputBinding': {'prefix': '--trim-lowqual'}, 'type': ['null', 'int']}, {'id': 'TumorInput', 'secondaryFiles': ['.bai'], 'inputBinding': {'prefix': '--tumor'}, 'type': 'File'}, {'id': 'Verbose', 'inputBinding': {'prefix': '--verbose'}, 'type': ['null', 'boolean']}, {'id': 'WinSize', 'inputBinding': {'prefix': '--window-size'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'vcf', 'format': 'http://edamontology.org/format_3016', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'docker.io/sinaiiidgst/lancet:latest'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'lancet', 'version': ['1.0.7'], 'specs': ['https://identifiers.org/biotools/lancet']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "lancet",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "lancet-out.vcf",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "Pizzly/Pizzly.cwl",
    "sha": "ac2ef7227c4503c90eb72db9ef329a10b1fe60e4",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/Pizzly/Pizzly.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/pizzly:0.37.3--0\n  SoftwareRequirement:\n    packages:\n      pizzly:\n        version: [ \"0.37.3\" ]\n        specs: [ https://identifiers.org/biotools/pizzly ]\n\ninputs:\n  InputFile:\n    type: File\n    inputBinding:\n      position: 100\n\n  Reference:\n    type: File\n    inputBinding:\n      prefix: \"--fasta\"\n\n  Kmer:\n    type: int\n    inputBinding:\n      prefix: \"-k\"\n\n  Gtf:\n    type: File\n    inputBinding:\n      prefix: \"--gtf\"\n\n  Output:\n    type: string\n    default: \"pizzly_out\"\n    inputBinding:\n      prefix: \"--output\"\n      valueFrom: \"pizzly_out\"\n\n  #Optional Inputs\n\n  Cache:\n    type: string?\n    default: \"index.cache.txt\"\n    inputBinding:\n      prefix: \"--cache\"\n  \n  InsertSize:\n    type: int?\n    inputBinding:\n      prefix: \"--insert-size\"\n\n  isIgnoreProtein:\n    type: boolean?\n    inputBinding:\n      prefix: \"--ignore-protein\"\n\nbaseCommand: [\"pizzly\"]\n\noutputs:\n\n  Fusion_fasta:\n    type: File\n    outputBinding:\n      glob: .fusions.fasta\n\n  Fusion_json:\n    type: File\n    outputBinding:\n      glob: .json\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'Cache', 'inputBinding': {'prefix': '--cache'}, 'default': 'index.cache.txt', 'type': ['null', 'string']}, {'id': 'Gtf', 'inputBinding': {'prefix': '--gtf'}, 'type': 'File'}, {'id': 'InputFile', 'inputBinding': {'position': 100}, 'type': 'File'}, {'id': 'InsertSize', 'inputBinding': {'prefix': '--insert-size'}, 'type': ['null', 'int']}, {'id': 'Kmer', 'inputBinding': {'prefix': '-k'}, 'type': 'int'}, {'id': 'Output', 'inputBinding': {'prefix': '--output', 'valueFrom': 'pizzly_out'}, 'default': 'pizzly_out', 'type': 'string'}, {'id': 'Reference', 'inputBinding': {'prefix': '--fasta'}, 'type': 'File'}, {'id': 'isIgnoreProtein', 'inputBinding': {'prefix': '--ignore-protein'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'Fusion_fasta', 'outputBinding': {'glob': '.fusions.fasta'}, 'type': 'File'}, {'id': 'Fusion_json', 'outputBinding': {'glob': '.json'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/pizzly:0.37.3--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'pizzly', 'version': ['0.37.3'], 'specs': ['https://identifiers.org/biotools/pizzly']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['pizzly']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "STAR/STAR-Align.cwl",
    "sha": "155746d6f9449dc121a8676236cfba5c1b8501d9",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/STAR/STAR-Align.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/star:2.7.5c--0\n  SoftwareRequirement:\n    packages:\n      star:\n        specs: [ https://identifiers.org/biotools/star ]\n        version: [ \"2.7.5c\" ]\n\ninputs:\n  # Required Inputs\n  RunThreadN:\n    type: int\n    inputBinding:\n      prefix: \"--runThreadN\"\n\n  GenomeDir:\n    type: Directory\n    inputBinding:\n      prefix: \"--genomeDir\"\n\n  ForwardReads:\n    format: edam:format_1930  # FASTQ\n    type:\n     - File\n     - File[]\n    inputBinding:\n      prefix: \"--readFilesIn\"\n      itemSeparator: \",\"\n      position: 1\n  # If paired-end reads (like Illumina), both 1 and 2 must be provided.\n  ReverseReads:\n    format: edam:format_1930  # FASTQ\n    type:\n     - \"null\"\n     - File\n     - File[]\n    inputBinding:\n      prefix: \"\"\n      separate: false\n      itemSeparator: \",\"\n      position: 2\n\n  # Optional Inputs\n  Gtf:\n    type: File?\n    inputBinding:\n      prefix: \"--sjdbGTFfile\"\n\n  Overhang:\n    type: int?\n    inputBinding:\n      prefix: \"--sjdbOverhang\"\n\n  OutFilterType:\n    type:\n     - \"null\"\n     - type: enum\n       symbols:\n        - Normal\n        - BySJout\n    inputBinding:\n      prefix: \"--outFilterType\"\n\n  OutFilterIntronMotifs:\n    type:\n     - \"null\"\n     - type: enum\n       symbols:\n        - None\n        - RemoveNoncanonical\n        - RemoveNoncanonicalUnannotated\n    inputBinding:\n      prefix: \"--outFilterIntronMotifs\"\n\n  OutSAMtype:\n    type:\n     - \"null\"\n     - type: enum\n       symbols:\n        - \"BAM\"\n        - \"SAM\"\n    inputBinding:\n      prefix: \"--outSAMtype\"\n      position: 3\n\n  Unsorted:\n    type: boolean?\n    inputBinding:\n      prefix: \"Unsorted\"\n      position: 4\n\n  SortedByCoordinate:\n    type: boolean?\n    inputBinding:\n      prefix: \"SortedByCoordinate\"\n      position: 5\n\n  ReadFilesCommand:\n    type: string?\n    inputBinding:\n      prefix: \"--readFilesCommand\"\n\n  AlignIntronMin:\n    type: int?\n    inputBinding:\n      prefix: \"--alignIntronMin\"\n\n  AlignIntronMax:\n    type: int?\n    inputBinding:\n      prefix: \"--alignIntronMax\"\n\n  AlignMatesGapMax:\n    type: int?\n    inputBinding:\n      prefix: \"--alignMatesGapMax\"\n\n  AlignSJoverhangMin:\n    type: int?\n    inputBinding:\n      prefix: \"--alignSJoverhangMin\"\n\n  AlignSJDBoverhangMin:\n    type: int?\n    inputBinding:\n      prefix: \"--alignSJDBoverhangMin\"\n\n  SeedSearchStartLmax:\n    type: int?\n    inputBinding:\n      prefix: \"--seedSearchStartLmax\"\n\n  ChimOutType:\n    type:\n     - \"null\"\n     - type: enum\n       symbols:\n        - Junctions\n        - SeparateSAMold\n        - WithinBAM\n        - \"WithinBAM HardClip\"\n        - \"WithinBAM SoftClip\"\n\n  ChimSegmentMin:\n    type: int?\n    inputBinding:\n      prefix: \"--chimSegmentMin\"\n\n  ChimJunctionOverhangMin:\n    type: int?\n    inputBinding:\n      prefix: \"--chimJunctionOverhangMin\"\n\n  OutFilterMultimapNmax:\n    type: int?\n    inputBinding:\n      prefix: \"--outFilterMultimapNmax\"\n\n  OutFilterMismatchNmax:\n    type: int?\n    inputBinding:\n      prefix: \"--outFilterMismatchNmax\"\n\n  OutFilterMismatchNoverLmax:\n    type: double?\n    inputBinding:\n      prefix: \"--outFilterMismatchNoverLmax\"\n\n  OutReadsUnmapped:\n    type:\n     - \"null\"\n     - type: enum\n       symbols:\n        - None\n        - Fastx\n    inputBinding:\n      prefix: \"--outReadsUnmapped\"\n\n  OutSAMstrandField:\n    type:\n     - \"null\"\n     - type: enum\n       symbols:\n        - None\n        - intronMotif\n    inputBinding:\n      prefix: \"--outSAMstrandField\"\n\n  OutSAMunmapped:\n    type:\n     - \"null\"\n     - type: enum\n       symbols:\n        - None\n        - Within\n        - \"Within KeepPairs\"\n    inputBinding:\n      prefix: \"--outSAMunmapped\"\n\n  OutSAMmapqUnique:\n    type: int?\n    inputBinding:\n      prefix: \"--outSAMmapqUnique\"\n\n  OutSamMode:\n    type:\n     - \"null\"\n     - type: enum\n       symbols:\n        - None\n        - Full\n        - NoQS\n    inputBinding:\n      prefix: \"--outSAMmode\"\n\n  LimitOutSAMoneReadBytes:\n    type: int?\n    inputBinding:\n      prefix: \"--limitOutSAMoneReadBytes\"\n\n  OutFileNamePrefix:\n    type: string?\n    inputBinding:\n      prefix: \"--outFileNamePrefix\"\n\n  GenomeLoad:\n    type:\n     - \"null\"\n     - type: enum\n       symbols:\n        - LoadAndKeep\n        - LoadAndRemove\n        - LoadAndExit\n        - Remove\n        - NoSharedMemory\n    inputBinding:\n      prefix: \"--genomeLoad\"\n\nbaseCommand: [STAR, --runMode, alignReads]\n\noutputs:\n  alignment:\n    type:\n     - File\n     - File[]\n    outputBinding:\n      glob: \"*.bam\"\n  unmapped_reads:\n    type: [\"null\", File]\n    outputBinding:\n      glob: \"Unmapped.out*\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'AlignIntronMax', 'inputBinding': {'prefix': '--alignIntronMax'}, 'type': ['null', 'int']}, {'id': 'AlignIntronMin', 'inputBinding': {'prefix': '--alignIntronMin'}, 'type': ['null', 'int']}, {'id': 'AlignMatesGapMax', 'inputBinding': {'prefix': '--alignMatesGapMax'}, 'type': ['null', 'int']}, {'id': 'AlignSJDBoverhangMin', 'inputBinding': {'prefix': '--alignSJDBoverhangMin'}, 'type': ['null', 'int']}, {'id': 'AlignSJoverhangMin', 'inputBinding': {'prefix': '--alignSJoverhangMin'}, 'type': ['null', 'int']}, {'id': 'ChimJunctionOverhangMin', 'inputBinding': {'prefix': '--chimJunctionOverhangMin'}, 'type': ['null', 'int']}, {'id': 'ChimOutType', 'type': ['null', {'name': '_:4ce19269-4317-465f-b8d5-5fc03653686d', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ChimOutType/Junctions', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ChimOutType/SeparateSAMold', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ChimOutType/WithinBAM', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ChimOutType/WithinBAM HardClip', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#ChimOutType/WithinBAM SoftClip'], 'type': 'enum'}]}, {'id': 'ChimSegmentMin', 'inputBinding': {'prefix': '--chimSegmentMin'}, 'type': ['null', 'int']}, {'id': 'ForwardReads', 'format': 'http://edamontology.org/format_1930', 'inputBinding': {'position': 1, 'prefix': '--readFilesIn', 'itemSeparator': ','}, 'type': ['File', {'items': 'File', 'type': 'array'}]}, {'id': 'GenomeDir', 'inputBinding': {'prefix': '--genomeDir'}, 'type': 'Directory'}, {'id': 'GenomeLoad', 'inputBinding': {'prefix': '--genomeLoad'}, 'type': ['null', {'name': '_:b62b65dc-20b9-4a4e-b2e7-593064e72196', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#GenomeLoad/LoadAndKeep', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#GenomeLoad/LoadAndRemove', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#GenomeLoad/LoadAndExit', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#GenomeLoad/Remove', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#GenomeLoad/NoSharedMemory'], 'type': 'enum'}]}, {'id': 'Gtf', 'inputBinding': {'prefix': '--sjdbGTFfile'}, 'type': ['null', 'File']}, {'id': 'LimitOutSAMoneReadBytes', 'inputBinding': {'prefix': '--limitOutSAMoneReadBytes'}, 'type': ['null', 'int']}, {'id': 'OutFileNamePrefix', 'inputBinding': {'prefix': '--outFileNamePrefix'}, 'type': ['null', 'string']}, {'id': 'OutFilterIntronMotifs', 'inputBinding': {'prefix': '--outFilterIntronMotifs'}, 'type': ['null', {'name': '_:7404f848-52ef-41be-bcec-41da3f713569', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutFilterIntronMotifs/None', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutFilterIntronMotifs/RemoveNoncanonical', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutFilterIntronMotifs/RemoveNoncanonicalUnannotated'], 'type': 'enum'}]}, {'id': 'OutFilterMismatchNmax', 'inputBinding': {'prefix': '--outFilterMismatchNmax'}, 'type': ['null', 'int']}, {'id': 'OutFilterMismatchNoverLmax', 'inputBinding': {'prefix': '--outFilterMismatchNoverLmax'}, 'type': ['null', 'double']}, {'id': 'OutFilterMultimapNmax', 'inputBinding': {'prefix': '--outFilterMultimapNmax'}, 'type': ['null', 'int']}, {'id': 'OutFilterType', 'inputBinding': {'prefix': '--outFilterType'}, 'type': ['null', {'name': '_:effd7903-76e2-4f94-a22c-0a813c4be5ad', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutFilterType/Normal', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutFilterType/BySJout'], 'type': 'enum'}]}, {'id': 'OutReadsUnmapped', 'inputBinding': {'prefix': '--outReadsUnmapped'}, 'type': ['null', {'name': '_:399b3c3b-8ba5-4cff-b777-9fb769d0dac3', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutReadsUnmapped/None', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutReadsUnmapped/Fastx'], 'type': 'enum'}]}, {'id': 'OutSAMmapqUnique', 'inputBinding': {'prefix': '--outSAMmapqUnique'}, 'type': ['null', 'int']}, {'id': 'OutSAMstrandField', 'inputBinding': {'prefix': '--outSAMstrandField'}, 'type': ['null', {'name': '_:85a75670-eafe-4b1f-ba5e-c523537f228f', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutSAMstrandField/None', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutSAMstrandField/intronMotif'], 'type': 'enum'}]}, {'id': 'OutSAMtype', 'inputBinding': {'position': 3, 'prefix': '--outSAMtype'}, 'type': ['null', {'name': '_:7a617df4-6eda-41f5-80bd-010509cca5c8', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutSAMtype/BAM', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutSAMtype/SAM'], 'type': 'enum'}]}, {'id': 'OutSAMunmapped', 'inputBinding': {'prefix': '--outSAMunmapped'}, 'type': ['null', {'name': '_:1fff9f25-9e8a-433a-9955-a56db70e3e8e', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutSAMunmapped/None', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutSAMunmapped/Within', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutSAMunmapped/Within KeepPairs'], 'type': 'enum'}]}, {'id': 'OutSamMode', 'inputBinding': {'prefix': '--outSAMmode'}, 'type': ['null', {'name': '_:cfb3adc4-3aba-4b77-bef0-c6a6654dbca0', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutSamMode/None', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutSamMode/Full', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#OutSamMode/NoQS'], 'type': 'enum'}]}, {'id': 'Overhang', 'inputBinding': {'prefix': '--sjdbOverhang'}, 'type': ['null', 'int']}, {'id': 'ReadFilesCommand', 'inputBinding': {'prefix': '--readFilesCommand'}, 'type': ['null', 'string']}, {'id': 'ReverseReads', 'format': 'http://edamontology.org/format_1930', 'inputBinding': {'position': 2, 'prefix': '', 'separate': False, 'itemSeparator': ','}, 'type': ['null', 'File', {'items': 'File', 'type': 'array'}]}, {'id': 'RunThreadN', 'inputBinding': {'prefix': '--runThreadN'}, 'type': 'int'}, {'id': 'SeedSearchStartLmax', 'inputBinding': {'prefix': '--seedSearchStartLmax'}, 'type': ['null', 'int']}, {'id': 'SortedByCoordinate', 'inputBinding': {'position': 5, 'prefix': 'SortedByCoordinate'}, 'type': ['null', 'boolean']}, {'id': 'Unsorted', 'inputBinding': {'position': 4, 'prefix': 'Unsorted'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'alignment', 'outputBinding': {'glob': '*.bam'}, 'type': ['File', {'items': 'File', 'type': 'array'}]}, {'id': 'unmapped_reads', 'outputBinding': {'glob': 'Unmapped.out*'}, 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/star:2.7.5c--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'star', 'version': ['2.7.5c'], 'specs': ['https://identifiers.org/biotools/star']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['STAR', '--runMode', 'alignReads']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "STAR/STAR-Index.cwl",
    "sha": "fa95b231e033ca1cd3f4a66dce0b50d3a5d6e5df",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/STAR/STAR-Index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/star:2.7.5c--0\n  SoftwareRequirement:\n    packages:\n      star:\n        specs: [ https://identifiers.org/biotools/star ]\n        version: [ \"2.7.5c\" ]\n\ninputs:\n\n  InputFiles:\n    format: edam:format_1929  # FASTA\n    type: File[]\n    inputBinding:\n      prefix: \"--genomeFastaFiles\"\n\n  IndexName:\n    type: string\n    inputBinding:\n      prefix: \"--genomeDir\"\n      valueFrom: ./$(self)\n\n#Optional Inputs\n\n  Gtf:\n    type: File?\n    inputBinding:\n      prefix: \"--sjdbGTFfile\"\n\n  Overhang:\n    type: int?\n    inputBinding:\n      prefix: \"--sjdbOverhang\"\n\n  Junctions:\n    type: File?\n    inputBinding:\n      prefix: \"--sjdbFileChrStartEnd\"\n\n  GenomeSize:\n    type: int?\n    inputBinding:\n      prefix: \"--genomeSAindexNbases\"\n\n  GenomeBits:\n    type: int?\n    inputBinding:\n      prefix: \"--genomeChrBinNbits\"\n\nbaseCommand: [STAR, --runMode, genomeGenerate]\n\narguments: [--runThreadN, $(runtime.cores)]\n\noutputs:\n  indexes:\n    type: Directory\n    outputBinding:\n      glob: ./$(inputs.IndexName)/\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas: [ https://edamontology.org/EDAM_1.25.owl ]\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'GenomeBits', 'inputBinding': {'prefix': '--genomeChrBinNbits'}, 'type': ['null', 'int']}, {'id': 'GenomeSize', 'inputBinding': {'prefix': '--genomeSAindexNbases'}, 'type': ['null', 'int']}, {'id': 'Gtf', 'inputBinding': {'prefix': '--sjdbGTFfile'}, 'type': ['null', 'File']}, {'id': 'IndexName', 'inputBinding': {'prefix': '--genomeDir', 'valueFrom': './$(self)'}, 'type': 'string'}, {'id': 'InputFiles', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'prefix': '--genomeFastaFiles'}, 'type': {'items': 'File', 'type': 'array'}}, {'id': 'Junctions', 'inputBinding': {'prefix': '--sjdbFileChrStartEnd'}, 'type': ['null', 'File']}, {'id': 'Overhang', 'inputBinding': {'prefix': '--sjdbOverhang'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'indexes', 'outputBinding': {'glob': './$(inputs.IndexName)/'}, 'type': 'Directory'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/star:2.7.5c--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'star', 'version': ['2.7.5c'], 'specs': ['https://identifiers.org/biotools/star']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['STAR', '--runMode', 'genomeGenerate']",
    "cwl_arguments": "['--runThreadN', '$(runtime.cores)']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.25.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "bamtools/bamtools_stats.cwl",
    "sha": "aa07e7f1368e4fd4e826bdb66997a7cd8bf30ddd",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bamtools/bamtools_stats.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ShellCommandRequirement: {}\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/bamtools:v2.4.1\n  SoftwareRequirement:\n    packages:\n      bamtools:\n        specs: [ \"https://identifiers.org/biotools/bamtools\" ]\n        version: [ \"2.4.1\" ]\n\ninputs:\n\n  bam_file:\n    type:\n      - File\n    inputBinding:\n      position: 2\n      prefix: -in\n    doc: |\n      the input BAM file\n\noutputs:\n\n  log_file:\n    type: File\n    outputBinding:\n      glob: \"stats.log\"\n\n  total_reads_number:\n    type: int\n    outputBinding:\n      loadContents: true\n      glob: \"stats.log\"\n      outputEval: |\n        ${\n          var s = self[0].contents.replace(/ /g,'').replace(/ *\\([^)]*\\) */g,'');\n          var totalReads = parseInt(s.substring ( s.indexOf(\"Totalreads\")+11, s.indexOf(\"\\t\", (s.indexOf(\"Totalreads\")))  ));\n          return totalReads;\n        }\n\n  mapped_reads_number:\n    type: int\n    outputBinding:\n      loadContents: true\n      glob: \"stats.log\"\n      outputEval: |\n        ${\n          var s = self[0].contents.replace(/ /g,'').replace(/ *\\([^)]*\\) */g,'');\n          var mappedreads = parseInt(s.substring ( s.indexOf(\"Mappedreads\")+12, s.indexOf(\"\\t\", (s.indexOf(\"Mappedreads\")))  ));\n          return mappedreads;\n        }\n\n  forward_strand_reads_number:\n    type: int\n    outputBinding:\n      loadContents: true\n      glob: \"stats.log\"\n      outputEval: |\n        ${\n          var s = self[0].contents.replace(/ /g,'').replace(/ *\\([^)]*\\) */g,'');\n          var forwardstrand = parseInt(s.substring ( s.indexOf(\"Forwardstrand\")+14, s.indexOf(\"\\t\", (s.indexOf(\"Forwardstrand\")))  ));\n          return forwardstrand;\n        }\n\n  reverse_strand_reads_number:\n    type: int\n    outputBinding:\n      loadContents: true\n      glob: \"stats.log\"\n      outputEval: |\n        ${\n          var s = self[0].contents.replace(/ /g,'').replace(/ *\\([^)]*\\) */g,'');\n          var reversestrand = parseInt(s.substring ( s.indexOf(\"Reversestrand\")+14, s.indexOf(\"\\t\", (s.indexOf(\"Reversestrand\")))  ));\n          return reversestrand;\n        }\n\n  failed_QC_reads_number:\n    type: int\n    outputBinding:\n      loadContents: true\n      glob: \"stats.log\"\n      outputEval: |\n        ${\n          var s = self[0].contents.replace(/ /g,'').replace(/ *\\([^)]*\\) */g,'');\n          var failedQC = parseInt(s.substring ( s.indexOf(\"FailedQC\")+9, s.indexOf(\"\\t\", (s.indexOf(\"FailedQC\")))  ));\n          return failedQC;\n        }\n\n  duplicate_reads_number:\n    type: int\n    outputBinding:\n      loadContents: true\n      glob: \"stats.log\"\n      outputEval: |\n        ${\n          var s = self[0].contents.replace(/ /g,'').replace(/ *\\([^)]*\\) */g,'');\n          var duplicates = parseInt(s.substring ( s.indexOf(\"Duplicates\")+11, s.indexOf(\"\\t\", (s.indexOf(\"Duplicates\")))  ));\n          return duplicates;\n        }\n\n  pairedend_reads_number:\n    type: int\n    outputBinding:\n      loadContents: true\n      glob: \"stats.log\"\n      outputEval: |\n        ${\n          var s = self[0].contents.replace(/ /g,'').replace(/ *\\([^)]*\\) */g,'');\n          var pairedendreads = parseInt(s.substring ( s.indexOf(\"Paired-endreads\")+16, s.indexOf(\"\\t\", (s.indexOf(\"Paired-endreads\")))  ));\n          return pairedendreads;\n        }\n\nbaseCommand: [bamtools, stats]\narguments:\n  - valueFrom: $('> ' + 'stats.log')\n    position: 1000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bamtools_stats\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs `bamtools stats' to calculate general alignment statistics from the input BAM file\n\n  `-insert` parameter is not implemented\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam_file', 'doc': 'the input BAM file\\n', 'inputBinding': {'position': 2, 'prefix': '-in'}, 'type': ['File']}]",
    "cwl_outputs": "[{'id': 'duplicate_reads_number', 'outputBinding': {'glob': 'stats.log', 'loadContents': True, 'outputEval': '${\\n  var s = self[0].contents.replace(/ /g,\\'\\').replace(/ *\\\\([^)]*\\\\) */g,\\'\\');\\n  var duplicates = parseInt(s.substring ( s.indexOf(\"Duplicates\")+11, s.indexOf(\"\\\\t\", (s.indexOf(\"Duplicates\")))  ));\\n  return duplicates;\\n}\\n'}, 'type': 'int'}, {'id': 'failed_QC_reads_number', 'outputBinding': {'glob': 'stats.log', 'loadContents': True, 'outputEval': '${\\n  var s = self[0].contents.replace(/ /g,\\'\\').replace(/ *\\\\([^)]*\\\\) */g,\\'\\');\\n  var failedQC = parseInt(s.substring ( s.indexOf(\"FailedQC\")+9, s.indexOf(\"\\\\t\", (s.indexOf(\"FailedQC\")))  ));\\n  return failedQC;\\n}\\n'}, 'type': 'int'}, {'id': 'forward_strand_reads_number', 'outputBinding': {'glob': 'stats.log', 'loadContents': True, 'outputEval': '${\\n  var s = self[0].contents.replace(/ /g,\\'\\').replace(/ *\\\\([^)]*\\\\) */g,\\'\\');\\n  var forwardstrand = parseInt(s.substring ( s.indexOf(\"Forwardstrand\")+14, s.indexOf(\"\\\\t\", (s.indexOf(\"Forwardstrand\")))  ));\\n  return forwardstrand;\\n}\\n'}, 'type': 'int'}, {'id': 'log_file', 'outputBinding': {'glob': 'stats.log'}, 'type': 'File'}, {'id': 'mapped_reads_number', 'outputBinding': {'glob': 'stats.log', 'loadContents': True, 'outputEval': '${\\n  var s = self[0].contents.replace(/ /g,\\'\\').replace(/ *\\\\([^)]*\\\\) */g,\\'\\');\\n  var mappedreads = parseInt(s.substring ( s.indexOf(\"Mappedreads\")+12, s.indexOf(\"\\\\t\", (s.indexOf(\"Mappedreads\")))  ));\\n  return mappedreads;\\n}\\n'}, 'type': 'int'}, {'id': 'pairedend_reads_number', 'outputBinding': {'glob': 'stats.log', 'loadContents': True, 'outputEval': '${\\n  var s = self[0].contents.replace(/ /g,\\'\\').replace(/ *\\\\([^)]*\\\\) */g,\\'\\');\\n  var pairedendreads = parseInt(s.substring ( s.indexOf(\"Paired-endreads\")+16, s.indexOf(\"\\\\t\", (s.indexOf(\"Paired-endreads\")))  ));\\n  return pairedendreads;\\n}\\n'}, 'type': 'int'}, {'id': 'reverse_strand_reads_number', 'outputBinding': {'glob': 'stats.log', 'loadContents': True, 'outputEval': '${\\n  var s = self[0].contents.replace(/ /g,\\'\\').replace(/ *\\\\([^)]*\\\\) */g,\\'\\');\\n  var reversestrand = parseInt(s.substring ( s.indexOf(\"Reversestrand\")+14, s.indexOf(\"\\\\t\", (s.indexOf(\"Reversestrand\")))  ));\\n  return reversestrand;\\n}\\n'}, 'type': 'int'}, {'id': 'total_reads_number', 'outputBinding': {'glob': 'stats.log', 'loadContents': True, 'outputEval': '${\\n  var s = self[0].contents.replace(/ /g,\\'\\').replace(/ *\\\\([^)]*\\\\) */g,\\'\\');\\n  var totalReads = parseInt(s.substring ( s.indexOf(\"Totalreads\")+11, s.indexOf(\"\\\\t\", (s.indexOf(\"Totalreads\")))  ));\\n  return totalReads;\\n}\\n'}, 'type': 'int'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bamtools:v2.4.1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bamtools', 'version': ['2.4.1'], 'specs': ['https://identifiers.org/biotools/bamtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bamtools', 'stats']",
    "cwl_arguments": "[{'position': 1000, 'valueFrom': \"$('> ' + 'stats.log')\", 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}, {'class': 'ShellCommandRequirement'}]",
    "cwl_doc": "Tool runs `bamtools stats' to calculate general alignment statistics from the input BAM file\n\n`-insert` parameter is not implemented\n",
    "cwl_stdout": null,
    "cwl_s:name": "bamtools_stats",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bandage/bandage-image.cwl",
    "sha": "76d6b0e62371eb81c2643502148aa7244bc1e452",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bandage/bandage-image.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biocontainers/bandage:v0.8.1-1-deb_cv1\n  SoftwareRequirement:\n    packages:\n      bandage:\n        version: [ \"0.8\" ]\n        specs: [ https://identifiers.org/biotools/bandage ]\n\nrequirements:\n  EnvVarRequirement:\n    envDef:\n      XDG_RUNTIME_DIR: $(runtime.tmpdir)\n      QT_QPA_PLATFORM: minimal\n\nlabel: Bandage image\ndoc: |\n  an hybrid assembly pipeline for bacterial genomes\n  *Bandage Overview**\n  Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \n  such as Velvet, SPAdes,   MEGAHIT and others.\n  De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \n  which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \n  Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \n  with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \n  By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \n  that are not possible by looking at contigs alone. \n  Bandage works with Graphical Fragment Assembly (GFA) files. \n  For more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n\nbaseCommand: [ Bandage, image ]\n\ninputs:\n  graph:\n    type: File\n    doc: |\n        Graphical Fragment Assembly\n        Supports multiple assembly graph formats: \n        LastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\n    inputBinding:\n      position: 1\n\n  format:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - jpg\n          - png\n          - svg\n    default: jpg\n    inputBinding:\n      position: 2\n      valueFrom: $(inputs.graph.nameroot).$(self) \n    doc: |\n        Produce jpg, png or svg file\n\n  height:\n    type: int\n    default: 1000\n    inputBinding:\n      prefix: --height\n      position: 3\n    doc: |\n        Image height.If only height or width is set,\n        the other will be determined automatically.\n        If both are set, the image will be exactly that size.\n\n  width:\n    inputBinding:\n      prefix: --width\n      position: 3\n    type:  int?\n    doc: |\n        Image width. If only height or width is set, the other will be determined automatically.\n        If both are set, the image will be exactly that size.\n\n  node_length:\n    type:  boolean?\n    default: true\n    inputBinding:\n      prefix: --names\n      valueFrom: --lengths\n      position: 3\n    doc: |\n        If true, define Node labels as lengths\n\noutputs:\n image:\n   type: File\n   outputBinding:\n      glob: $(inputs.graph.nameroot).$(inputs.format)\n   doc: \"Assembly Graph Image\"\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'format', 'doc': 'Produce jpg, png or svg file\\n', 'inputBinding': {'position': 2, 'valueFrom': '$(inputs.graph.nameroot).$(self)'}, 'default': 'jpg', 'type': ['null', {'name': '_:b1610272-eb36-4a18-a3fc-b4d10526fb2f', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/jpg', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/png', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/svg'], 'type': 'enum'}]}, {'id': 'graph', 'doc': 'Graphical Fragment Assembly\\nSupports multiple assembly graph formats: \\nLastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\\n', 'inputBinding': {'position': 1}, 'type': 'File'}, {'id': 'height', 'doc': 'Image height.If only height or width is set,\\nthe other will be determined automatically.\\nIf both are set, the image will be exactly that size.\\n', 'inputBinding': {'position': 3, 'prefix': '--height'}, 'default': 1000, 'type': 'int'}, {'id': 'node_length', 'doc': 'If true, define Node labels as lengths\\n', 'inputBinding': {'position': 3, 'prefix': '--names', 'valueFrom': '--lengths'}, 'default': True, 'type': ['null', 'boolean']}, {'id': 'width', 'doc': 'Image width. If only height or width is set, the other will be determined automatically.\\nIf both are set, the image will be exactly that size.\\n', 'inputBinding': {'position': 3, 'prefix': '--width'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'image', 'doc': 'Assembly Graph Image', 'outputBinding': {'glob': '$(inputs.graph.nameroot).$(inputs.format)'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/bandage:v0.8.1-1-deb_cv1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bandage', 'version': ['0.8'], 'specs': ['https://identifiers.org/biotools/bandage']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Bandage', 'image']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'EnvVarRequirement', 'envDef': [{'envName': 'QT_QPA_PLATFORM', 'envValue': 'minimal'}, {'envName': 'XDG_RUNTIME_DIR', 'envValue': '$(runtime.tmpdir)'}]}]",
    "cwl_doc": "an hybrid assembly pipeline for bacterial genomes\n*Bandage Overview**\nBandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \nsuch as Velvet, SPAdes,   MEGAHIT and others.\nDe novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \nwhich were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \nNodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \nwith the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \nBy displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \nthat are not possible by looking at contigs alone. \nBandage works with Graphical Fragment Assembly (GFA) files. \nFor more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Bandage image",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bandage/bandage-info.cwl",
    "sha": "1c13170da1aef910583efe25be5f584301c5f0a2",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bandage/bandage-info.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biocontainers/bandage:v0.8.1-1-deb_cv1\n  SoftwareRequirement:\n    packages:\n      bandage:\n        version: [ \"0.8\" ]\n        specs: [ https://identifiers.org/biotools/bandage ]\n\nrequirements:\n  EnvVarRequirement:\n    envDef:\n      XDG_RUNTIME_DIR: $(runtime.tmpdir)\n      QT_QPA_PLATFORM: minimal\n\nlabel: Bandage info\ndoc: |\n  an hybrid assembly pipeline for bacterial genomes\n  *Bandage Overview**\n  Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \n  such as Velvet, SPAdes,   MEGAHIT and others.\n  De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \n  which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \n  Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \n  with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \n  By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \n  that are not possible by looking at contigs alone. \n  Bandage works with Graphical Fragment Assembly (GFA) files. \n  For more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n\nbaseCommand: [ Bandage, info ]\n\ninputs:\n  graph:\n    type: File\n    doc: |\n        Graphical Fragment Assembly\n        Supports multiple assembly graph formats: \n        LastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\n    inputBinding:\n      position: 0\n\n  tsv:\n    type: boolean?\n    inputBinding:\n      prefix: --tsv\n      position: 1\n    doc: |\n        If true, output the information in a single tab-delimited line \n        starting with the graph file\n\nstdout: assembly_graph_info.txt\n\noutputs:\n assembly_graph_info:\n   type: stdout\n   doc: \"Assembly Graph Information\"\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'graph', 'doc': 'Graphical Fragment Assembly\\nSupports multiple assembly graph formats: \\nLastGraph (Velvet), FASTG (SPAdes), Trinity.fasta, ASQG and GFA.\\n', 'inputBinding': {'position': 0}, 'type': 'File'}, {'id': 'tsv', 'doc': 'If true, output the information in a single tab-delimited line \\nstarting with the graph file\\n', 'inputBinding': {'position': 1, 'prefix': '--tsv'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'assembly_graph_info', 'doc': 'Assembly Graph Information', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/bandage:v0.8.1-1-deb_cv1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bandage', 'version': ['0.8'], 'specs': ['https://identifiers.org/biotools/bandage']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Bandage', 'info']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'EnvVarRequirement', 'envDef': [{'envName': 'QT_QPA_PLATFORM', 'envValue': 'minimal'}, {'envName': 'XDG_RUNTIME_DIR', 'envValue': '$(runtime.tmpdir)'}]}]",
    "cwl_doc": "an hybrid assembly pipeline for bacterial genomes\n*Bandage Overview**\nBandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers \nsuch as Velvet, SPAdes,   MEGAHIT and others.\nDe novo assembly graphs contain not only assembled contigs but also the connections between those contigs, \nwhich were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. \nNodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact \nwith the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. \nBy displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies \nthat are not possible by looking at contigs alone. \nBandage works with Graphical Fragment Assembly (GFA) files. \nFor more information about this file format, see https://gfa-spec.github.io/GFA-spec/GFA2.html\n",
    "cwl_stdout": "assembly_graph_info.txt",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Bandage info",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bash/Gunzip.cwl",
    "sha": "d6ee51717d2939ab9abdf953f2bfe4af8614e16f",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bash/Gunzip.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: ubuntu:xenial\n\ninputs:\n  InputFile:\n    type: File\n    inputBinding:\n      position: 1\n\nbaseCommand: [ \"gunzip\" ]\n\narguments: [ \"-c\" ]\n\noutputs:\n  unzipped_file:\n    type: stdout\n\nstdout: unzippedfile.stdout\n# Source used from https://github.com/griffithlab/pmbio.org/blob/master/assets/CWL/gunzip.cwl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'InputFile', 'inputBinding': {'position': 1}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'unzipped_file', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'ubuntu:xenial'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gunzip']",
    "cwl_arguments": "['-c']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "unzippedfile.stdout",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "bash/bedgraph_sort.cwl",
    "sha": "fe242074599088757d2f829bafcc734b9f3c5f98",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bash/bedgraph_sort.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: docker.io/debian:stable-slim\n  SoftwareRequirement:\n    packages:\n      coreutils:\n        specs: [ https://anaconda.org/conda-forge/coreutils ]\n\ndoc: |\n  sorting a bedgraph file by genomic coordinates\n  \nbaseCommand: [\"bash\", \"-c\"]\narguments:\n  - LC_COLLATE=C sort -k1,1 -k2,2n $(inputs.bedgraph.path)\nstdout: |\n  ${\n    if( inputs.output_name == null ){\n      return inputs.bedgraph.basename;\n    }\n    else{\n      return inputs.output_name;\n    }\n  }\n\ninputs:\n  bedgraph:\n    type: File\n  output_name:\n    doc: optional, if not specified, output file will be named as input file\n    type: string?\n\noutputs:\n  bedgraph_sorted:\n    type: stdout\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bedgraph', 'type': 'File'}, {'id': 'output_name', 'doc': 'optional, if not specified, output file will be named as input file', 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'bedgraph_sorted', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'docker.io/debian:stable-slim'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 15000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'coreutils', 'specs': ['https://anaconda.org/conda-forge/coreutils']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', '-c']",
    "cwl_arguments": "['LC_COLLATE=C sort -k1,1 -k2,2n $(inputs.bedgraph.path)']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "sorting a bedgraph file by genomic coordinates\n",
    "cwl_stdout": "${\n  if( inputs.output_name == null ){\n    return inputs.bedgraph.basename;\n  }\n  else{\n    return inputs.output_name;\n  }\n}\n",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bash/custom_bash.cwl",
    "sha": "42fb1a8a5b35f1490457362a533b1003b1d3d0f9",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bash/custom_bash.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Tool to run custom script set as `script` input with arguments from `param`.\n  Default script runs sed command over the input file and exports results to the file with the same name as input's basename\n\nhints:\n  DockerRequirement:\n    dockerPull: debian:stable\n\ninputs:\n\n  script:\n    type: string?\n    default: |\n      cat \"$0\" | grep \"$1\" | sed \"s/$1//g\"  > `basename $0`\n    inputBinding:\n      position: 1\n\n  input_file:\n    type:\n      - File\n      - File[]\n    inputBinding:\n      position: 2\n\n  param:\n    type:\n    - string?\n    - string[]\n    inputBinding:\n      position: 3\n\noutputs:\n\n  output_file:\n    type: File\n    outputBinding:\n      glob: \"*\"\n\nbaseCommand: [bash, '-c']\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"custom_bash\"\ns:downloadUrl: https://raw.githubusercontent.com/common-workflow-library/bio-cwl-tools/release/tools/bash/custom_bash.cwl\ns:codeRepository: https://github.com/common-workflow-library/bio-cwl-tools\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ns:about: |\n  Custom bash script runner\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'input_file', 'inputBinding': {'position': 2}, 'type': ['File', {'items': 'File', 'type': 'array'}]}, {'id': 'param', 'inputBinding': {'position': 3}, 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'script', 'inputBinding': {'position': 1}, 'default': 'cat \"$0\" | grep \"$1\" | sed \"s/$1//g\"  > `basename $0`\\n', 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'output_file', 'outputBinding': {'glob': '*'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'debian:stable'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', '-c']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool to run custom script set as `script` input with arguments from `param`.\nDefault script runs sed command over the input file and exports results to the file with the same name as input's basename\n",
    "cwl_stdout": null,
    "cwl_s:name": "custom_bash",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": "https://raw.githubusercontent.com/common-workflow-library/bio-cwl-tools/release/tools/bash/custom_bash.cwl",
    "cwl_s:codeRepository": "https://github.com/common-workflow-library/bio-cwl-tools",
    "cwl_s:about": "Custom bash script runner\n",
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "bash/extract_fastq.cwl",
    "sha": "d1a0c77552750e40a1703f44cf214479a585016c",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bash/extract_fastq.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Tool to decompress input FASTQ file\n  Bash script's logic:\n  - disable case sensitive glob check\n  - check if root name of input file already include '.fastq' or '.fq' extension. If yes, set DEFAULT_EXT to \"\"\n  - check file type, decompress if needed\n  - return 1, if file type is not recognized\n  This script also works of input file doesn't have any extension at all\n\nrequirements:\n  ShellCommandRequirement: {}\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/scidap:v0.0.3\n\ninputs:\n\n  script:\n    type: string?\n    default: |\n      #!/bin/bash\n      shopt -s nocaseglob\n\n      FILE=$0\n      DEFAULT_EXT=$1\n\n      EXT_LIST=( \".fastq\" \".fq\" )\n\n      BASENAME=$(basename \"$FILE\")\n      ROOT_NAME=\"${BASENAME%.*}\"\n\n      for ITEM in $EXT_LIST; do\n        if [[ $ROOT_NAME == *$ITEM ]]; then\n          DEFAULT_EXT=\"\"\n        fi\n      done\n\n      T=`file -b \"${FILE}\" | awk '{print $1}'`\n      case \"${T}\" in\n        \"bzip2\"|\"gzip\"|\"Zip\")\n          7z e -so \"${FILE}\" > \"${ROOT_NAME}${DEFAULT_EXT}\"\n          ;;\n        \"ASCII\")\n          cp \"${FILE}\" \"${ROOT_NAME}${DEFAULT_EXT}\" || true\n          ;;\n        *)\n          echo \"Error: file type unknown\"\n          exit 1\n      esac\n    inputBinding:\n      position: 5\n    doc: |\n      Bash script to extract compressed FASTQ file\n\n  compressed_file:\n    type: File\n    inputBinding:\n      position: 6\n    doc: |\n      Compressed or uncompressed FASTQ file\n\n  output_file_ext:\n    type: string?\n    inputBinding:\n      position: 7\n    default: \".fastq\"\n    doc: |\n      Default extension for the extracted file\n\noutputs:\n\n  fastq_file:\n    type: File\n    outputBinding:\n      glob: \"*\"\n\nbaseCommand: [bash, '-c']\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"extract_fastq\"\ns:downloadUrl: https://raw.githubusercontent.com/common-workflow-library/bio-cwl-tools/release/tools/bash/extract_fastq.cwl\ns:codeRepository: https://github.com/common-workflow-library/bio-cwl-tools\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ns:about: |\n  Tool to decompress input FASTQ file\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'compressed_file', 'doc': 'Compressed or uncompressed FASTQ file\\n', 'inputBinding': {'position': 6}, 'type': 'File'}, {'id': 'output_file_ext', 'doc': 'Default extension for the extracted file\\n', 'inputBinding': {'position': 7}, 'default': '.fastq', 'type': ['null', 'string']}, {'id': 'script', 'doc': 'Bash script to extract compressed FASTQ file\\n', 'inputBinding': {'position': 5}, 'default': '#!/bin/bash\\nshopt -s nocaseglob\\n\\nFILE=$0\\nDEFAULT_EXT=$1\\n\\nEXT_LIST=( \".fastq\" \".fq\" )\\n\\nBASENAME=$(basename \"$FILE\")\\nROOT_NAME=\"${BASENAME%.*}\"\\n\\nfor ITEM in $EXT_LIST; do\\n  if [[ $ROOT_NAME == *$ITEM ]]; then\\n    DEFAULT_EXT=\"\"\\n  fi\\ndone\\n\\nT=`file -b \"${FILE}\" | awk \\'{print $1}\\'`\\ncase \"${T}\" in\\n  \"bzip2\"|\"gzip\"|\"Zip\")\\n    7z e -so \"${FILE}\" > \"${ROOT_NAME}${DEFAULT_EXT}\"\\n    ;;\\n  \"ASCII\")\\n    cp \"${FILE}\" \"${ROOT_NAME}${DEFAULT_EXT}\" || true\\n    ;;\\n  *)\\n    echo \"Error: file type unknown\"\\n    exit 1\\nesac\\n', 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'fastq_file', 'outputBinding': {'glob': '*'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/scidap:v0.0.3'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', '-c']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'ShellCommandRequirement'}]",
    "cwl_doc": "Tool to decompress input FASTQ file\nBash script's logic:\n- disable case sensitive glob check\n- check if root name of input file already include '.fastq' or '.fq' extension. If yes, set DEFAULT_EXT to \"\"\n- check file type, decompress if needed\n- return 1, if file type is not recognized\nThis script also works of input file doesn't have any extension at all\n",
    "cwl_stdout": null,
    "cwl_s:name": "extract_fastq",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": "https://raw.githubusercontent.com/common-workflow-library/bio-cwl-tools/release/tools/bash/extract_fastq.cwl",
    "cwl_s:codeRepository": "https://github.com/common-workflow-library/bio-cwl-tools",
    "cwl_s:about": "Tool to decompress input FASTQ file\n",
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bedtools/bedtools_bamtobed_1.cwl",
    "sha": "c38d278d422f6c9616372f30a8acb11a36d6fa78",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bedtools/bedtools_bamtobed_1.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  convert BAM file to BED or BEDPE (in case of paired end)\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: biocontainers/bedtools:2.25.0\n  SoftwareRequirement:\n    packages:\n      bedtools:\n        specs: [ https://identifiers.org/biotools/bedtools ]\n        version: [ \"2.25.0\" ]\n\nbaseCommand: [\"bedtools\", \"bamtobed\"]\nstdout: |\n  ${\n    if( inputs.is_paired_end ){\n      return( inputs.bam.nameroot + \".bedpe\")\n    } else{\n      return( inputs.bam.nameroot + \".bed\")\n    }\n  }\n\ninputs:\n  bam:\n    type: File\n    inputBinding:\n      prefix: -i\n      position: 10\n  is_paired_end:\n    type: boolean\n    default: False\n    inputBinding:\n      prefix: -bedpe\n      position: 1\n \noutputs:\n  bed:\n    type: stdout\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam', 'inputBinding': {'position': 10, 'prefix': '-i'}, 'type': 'File'}, {'id': 'is_paired_end', 'inputBinding': {'position': 1, 'prefix': '-bedpe'}, 'default': False, 'type': 'boolean'}]",
    "cwl_outputs": "[{'id': 'bed', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/bedtools:2.25.0'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 15000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bedtools', 'version': ['2.25.0'], 'specs': ['https://identifiers.org/biotools/bedtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bedtools', 'bamtobed']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "convert BAM file to BED or BEDPE (in case of paired end)\n",
    "cwl_stdout": "${\n  if( inputs.is_paired_end ){\n    return( inputs.bam.nameroot + \".bedpe\")\n  } else{\n    return( inputs.bam.nameroot + \".bed\")\n  }\n}\n",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bedtools/bedtools_bamtobed_2.cwl",
    "sha": "118780b1481f8b5ac645b4534fdecca517e28b70",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bedtools/bedtools_bamtobed_2.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n InlineJavascriptRequirement:\n   expressionLib:\n    - var default_output_filename = function() {\n            if (inputs.output_filename == \"\"){\n              var root = inputs.bam_file.basename.split('.').slice(0,-1).join('.');\n              return (root == \"\")?inputs.bam_file.basename+\".bed\":root+\".bed\";\n            } else {\n              return inputs.output_filename;\n            }\n          };\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/bedtools2:v2.26.0\n  SoftwareRequirement:\n    packages:\n      bedtools:\n        specs: [ https://identifiers.org/biotools/bedtools ]\n        version: [ \"2.26.0\" ]\n\ninputs:\n\n  bam_file:\n    type: File\n    inputBinding:\n      position: 5\n      prefix: \"-i\"\n    doc: \"Input BAM file (not necessary sorted or indexed)\"\n\n  output_filename:\n    type: string?\n    default: \"\"\n    doc: \"Output BED filename\"\n\noutputs:\n\n  bed_file:\n    type: File\n    outputBinding:\n      glob: $(default_output_filename())\n    doc: \"Sequences file\"\n\nbaseCommand: [\"bedtools\", \"bamtobed\"]\nstdout: $(default_output_filename())\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bedtools_bamtobed_2\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Converts BAM to BED. All additional options are not implemented.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam_file', 'doc': 'Input BAM file (not necessary sorted or indexed)', 'inputBinding': {'position': 5, 'prefix': '-i'}, 'type': 'File'}, {'id': 'output_filename', 'doc': 'Output BED filename', 'default': '', 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'bed_file', 'doc': 'Sequences file', 'outputBinding': {'glob': '$(default_output_filename())'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bedtools2:v2.26.0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bedtools', 'version': ['2.26.0'], 'specs': ['https://identifiers.org/biotools/bedtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bedtools', 'bamtobed']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { if (inputs.output_filename == \"\"){ var root = inputs.bam_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.bam_file.basename+\".bed\":root+\".bed\"; } else { return inputs.output_filename; } };']}]",
    "cwl_doc": "Converts BAM to BED. All additional options are not implemented.\n",
    "cwl_stdout": "$(default_output_filename())",
    "cwl_s:name": "bedtools_bamtobed_2",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bedtools/bedtools_bedtobam.cwl",
    "sha": "c73da6db187f51f10a0283d4ba3adbe9cbd8e819",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bedtools/bedtools_bedtobam.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Convert reads in BED format to BAM.\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: biocontainers/bedtools:2.25.0\n  SoftwareRequirement:\n    packages:\n      bedtools:\n        specs: [ https://identifiers.org/biotools/bedtools ]\n        version: [ \"2.25.0\" ]\n  \nbaseCommand: [\"bedtools\", \"bedtobam\"]\nstdout: $(inputs.bed.nameroot).bam      \n\ninputs:\n  bed:\n    type: File\n    inputBinding:\n      position: 1\n      prefix: \"-i\"\n  reference_info:\n    type: File\n    inputBinding:\n      position: 2\n      prefix: \"-g\"\n    \noutputs:\n  bam:\n    type: stdout\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bed', 'inputBinding': {'position': 1, 'prefix': '-i'}, 'type': 'File'}, {'id': 'reference_info', 'inputBinding': {'position': 2, 'prefix': '-g'}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'bam', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/bedtools:2.25.0'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 15000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bedtools', 'version': ['2.25.0'], 'specs': ['https://identifiers.org/biotools/bedtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bedtools', 'bedtobam']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Convert reads in BED format to BAM.\n",
    "cwl_stdout": "$(inputs.bed.nameroot).bam",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bedtools/bedtools_genomecov.cwl",
    "sha": "da1cb23a48d58be584ee89adeea7e015fb0c6ec4",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bedtools/bedtools_genomecov.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n     - var default_output_filename = function() {\n             var ext = (inputs.depth == \"-bg\" || inputs.depth == \"-bga\")?\".bedGraph\":\".tab\";\n             return inputs.input_file.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.') + ext;\n           };\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/bedtools2:v2.26.0\n  SoftwareRequirement:\n    packages:\n      bedtools:\n        specs: [ https://identifiers.org/biotools/bedtools ]\n        version: [ \"2.26.0\" ]\n\ninputs:\n  input_file:\n    type: File\n    inputBinding:\n      position: 16\n      valueFrom: |\n          ${\n            var prefix = ((/.*\\.bam$/i).test(inputs.input_file.path))?'-ibam':'-i';\n            return [prefix, inputs.input_file.path];\n          }\n    doc: |\n      The input file can be in BAM format (Note: BAM must be sorted by position) or <bed/gff/vcf>.\n      Prefix is selected on the base of input file extension\n\n  chrom_length_file:\n    type:\n    - \"null\"\n    - File\n    inputBinding:\n      position: 17\n      prefix: \"-g\"\n    doc: |\n      Input genome file. Needed only when -i flag. The genome file is tab delimited <chromName><TAB><chromSize>\n\n  depth:\n    type:\n    - \"null\"\n    - type: enum\n      name: \"depth\"\n      symbols: [\"-bg\",\"-bga\",\"-d\", \"-dz\"]\n    inputBinding:\n      position: 5\n    doc: |\n      Report the depth type. By default, bedtools genomecov will compute a histogram of coverage\n      for the genome file provided (intputs.chrom_length_file)\n\n  scale:\n    type:\n    - \"null\"\n    - float\n    inputBinding:\n      position: 6\n      prefix: -scale\n    doc: |\n      Scale the coverage by a constant factor.\n      Each coverage value is multiplied by this factor before being reported.\n      Useful for normalizing coverage by, e.g., reads per million (RPM).\n      - Default is 1.0; i.e., unscaled.\n      - (FLOAT)\n\n  mapped_reads_number:\n    type:\n    - \"null\"\n    - int\n    inputBinding:\n      position: 7\n      prefix: -scale\n      valueFrom: |\n        ${\n          if (inputs.scale){\n            return null;\n          } else if (inputs.mapped_reads_number) {\n            return 1000000/inputs.mapped_reads_number;\n          } else {\n            return null;\n          }\n        }\n    doc: |\n      Optional parameter to calculate scale as 1000000/mapped_reads_number if inputs.scale is not provided\n\n  split:\n    type:\n    - \"null\"\n    - boolean\n    inputBinding:\n      position: 8\n      prefix: \"-split\"\n    doc: |\n      treat \"split\" BAM or BED12 entries as distinct BED intervals.\n      when computing coverage.\n      For BAM files, this uses the CIGAR \"N\" and \"D\" operations\n      to infer the blocks for computing coverage.\n      For BED12 files, this uses the BlockCount, BlockStarts, and BlockEnds\n      fields (i.e., columns 10,11,12).\n\n  strand:\n    type:\n    - \"null\"\n    - string\n    inputBinding:\n      position: 9\n      prefix: \"-strand\"\n    doc: |\n      Calculate coverage of intervals from a specific strand.\n      With BED files, requires at least 6 columns (strand is column 6).\n      - (STRING): can be + or -\n\n  pairchip:\n    type:\n    - \"null\"\n    - boolean\n    inputBinding:\n      position: 10\n      prefix: \"-pc\"\n    doc: |\n      pair-end chip seq experiment\n\n  du:\n    type:\n    - \"null\"\n    - boolean\n    inputBinding:\n      position: 11\n      prefix: \"-du\"\n    doc: |\n      Change strand af the mate read (so both reads from the same strand) useful for strand specific.\n      Works for BAM files only\n\n  fragment_size:\n    type:\n    - \"null\"\n    - int\n    inputBinding:\n      position: 12\n      prefix: \"-fs\"\n    doc: |\n      Set fixed fragment size\n\n  max:\n    type:\n    - \"null\"\n    - int\n    inputBinding:\n      position: 13\n      prefix: \"-max\"\n    doc: |\n      Combine all positions with a depth >= max into\n      a single bin in the histogram. Irrelevant\n      for -d and -bedGraph\n      - (INTEGER)\n\n  m5:\n    type:\n    - \"null\"\n    - boolean\n    inputBinding:\n      position: 14\n      prefix: \"-5\"\n    doc: |\n      Calculate coverage of 5\" positions (instead of entire interval)\n\n  m3:\n    type:\n    - \"null\"\n    - boolean\n    inputBinding:\n      position: 15\n      prefix: \"-3\"\n    doc: |\n      Calculate coverage of 3\" positions (instead of entire interval)\n\n  output_filename:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      Name for generated output file\n\noutputs:\n\n  genome_coverage_file:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n          if (inputs.output_filename == null){\n            return default_output_filename();\n          } else {\n            return inputs.output_filename;\n          }\n        }\n    doc: |\n      Generated genome coverage output file\n\nbaseCommand: [\"bedtools\", \"genomecov\"]\nstdout: |\n  ${\n    if (inputs.output_filename == null){\n      return default_output_filename();\n    } else {\n      return inputs.output_filename;\n    }\n  }\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bedtools_genomecov\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool calculates genome coverage from input bam/bed/gff/vcf using `bedtools genomecov`\n\n  Depending on `input_file` extension additional prefix is used: if `*.bam` use `-ibam`, else use `-i`.\n\n  `scale` and `mapped_reads_number` inputs result in the same parameter `-scale`. If `scale` is not provided, check if\n  `mapped_reads_number` is not null and calculate `-scale` as `1000000/mapped_reads_number`. If both inputs are\n  null, `bedtools genomecov` will use its default scaling value.\n\n  `default_output_filename` function returns default output filename and is used when `output_filename` is not provided.\n  Default output file extention is `.tab`. If bedGraph should be generated (check flags `inputs.depth`), extension is\n  updated to `.bedGraph`. Default basename of the output file is generated on the base of `input_file` basename.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'chrom_length_file', 'doc': 'Input genome file. Needed only when -i flag. The genome file is tab delimited <chromName><TAB><chromSize>\\n', 'inputBinding': {'position': 17, 'prefix': '-g'}, 'type': ['null', 'File']}, {'id': 'depth', 'doc': 'Report the depth type. By default, bedtools genomecov will compute a histogram of coverage\\nfor the genome file provided (intputs.chrom_length_file)\\n', 'inputBinding': {'position': 5}, 'type': ['null', {'name': 'depth', 'symbols': ['-bg', '-bga', '-d', '-dz'], 'type': 'enum'}]}, {'id': 'du', 'doc': 'Change strand af the mate read (so both reads from the same strand) useful for strand specific.\\nWorks for BAM files only\\n', 'inputBinding': {'position': 11, 'prefix': '-du'}, 'type': ['null', 'boolean']}, {'id': 'fragment_size', 'doc': 'Set fixed fragment size\\n', 'inputBinding': {'position': 12, 'prefix': '-fs'}, 'type': ['null', 'int']}, {'id': 'input_file', 'doc': 'The input file can be in BAM format (Note: BAM must be sorted by position) or <bed/gff/vcf>.\\nPrefix is selected on the base of input file extension\\n', 'inputBinding': {'position': 16, 'valueFrom': \"${\\n  var prefix = ((/.*\\\\.bam$/i).test(inputs.input_file.path))?'-ibam':'-i';\\n  return [prefix, inputs.input_file.path];\\n}\\n\"}, 'type': 'File'}, {'id': 'm3', 'doc': 'Calculate coverage of 3\" positions (instead of entire interval)\\n', 'inputBinding': {'position': 15, 'prefix': '-3'}, 'type': ['null', 'boolean']}, {'id': 'm5', 'doc': 'Calculate coverage of 5\" positions (instead of entire interval)\\n', 'inputBinding': {'position': 14, 'prefix': '-5'}, 'type': ['null', 'boolean']}, {'id': 'mapped_reads_number', 'doc': 'Optional parameter to calculate scale as 1000000/mapped_reads_number if inputs.scale is not provided\\n', 'inputBinding': {'position': 7, 'prefix': '-scale', 'valueFrom': '${\\n  if (inputs.scale){\\n    return null;\\n  } else if (inputs.mapped_reads_number) {\\n    return 1000000/inputs.mapped_reads_number;\\n  } else {\\n    return null;\\n  }\\n}\\n'}, 'type': ['null', 'int']}, {'id': 'max', 'doc': 'Combine all positions with a depth >= max into\\na single bin in the histogram. Irrelevant\\nfor -d and -bedGraph\\n- (INTEGER)\\n', 'inputBinding': {'position': 13, 'prefix': '-max'}, 'type': ['null', 'int']}, {'id': 'output_filename', 'doc': 'Name for generated output file\\n', 'type': ['null', 'string']}, {'id': 'pairchip', 'doc': 'pair-end chip seq experiment\\n', 'inputBinding': {'position': 10, 'prefix': '-pc'}, 'type': ['null', 'boolean']}, {'id': 'scale', 'doc': 'Scale the coverage by a constant factor.\\nEach coverage value is multiplied by this factor before being reported.\\nUseful for normalizing coverage by, e.g., reads per million (RPM).\\n- Default is 1.0; i.e., unscaled.\\n- (FLOAT)\\n', 'inputBinding': {'position': 6, 'prefix': '-scale'}, 'type': ['null', 'float']}, {'id': 'split', 'doc': 'treat \"split\" BAM or BED12 entries as distinct BED intervals.\\nwhen computing coverage.\\nFor BAM files, this uses the CIGAR \"N\" and \"D\" operations\\nto infer the blocks for computing coverage.\\nFor BED12 files, this uses the BlockCount, BlockStarts, and BlockEnds\\nfields (i.e., columns 10,11,12).\\n', 'inputBinding': {'position': 8, 'prefix': '-split'}, 'type': ['null', 'boolean']}, {'id': 'strand', 'doc': 'Calculate coverage of intervals from a specific strand.\\nWith BED files, requires at least 6 columns (strand is column 6).\\n- (STRING): can be + or -\\n', 'inputBinding': {'position': 9, 'prefix': '-strand'}, 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'genome_coverage_file', 'doc': 'Generated genome coverage output file\\n', 'outputBinding': {'glob': '${\\n  if (inputs.output_filename == null){\\n    return default_output_filename();\\n  } else {\\n    return inputs.output_filename;\\n  }\\n}\\n'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bedtools2:v2.26.0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bedtools', 'version': ['2.26.0'], 'specs': ['https://identifiers.org/biotools/bedtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bedtools', 'genomecov']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { var ext = (inputs.depth == \"-bg\" || inputs.depth == \"-bga\")?\".bedGraph\":\".tab\"; return inputs.input_file.location.split(\\'/\\').slice(-1)[0].split(\\'.\\').slice(0,-1).join(\\'.\\') + ext; };']}]",
    "cwl_doc": "Tool calculates genome coverage from input bam/bed/gff/vcf using `bedtools genomecov`\n\nDepending on `input_file` extension additional prefix is used: if `*.bam` use `-ibam`, else use `-i`.\n\n`scale` and `mapped_reads_number` inputs result in the same parameter `-scale`. If `scale` is not provided, check if\n`mapped_reads_number` is not null and calculate `-scale` as `1000000/mapped_reads_number`. If both inputs are\nnull, `bedtools genomecov` will use its default scaling value.\n\n`default_output_filename` function returns default output filename and is used when `output_filename` is not provided.\nDefault output file extention is `.tab`. If bedGraph should be generated (check flags `inputs.depth`), extension is\nupdated to `.bedGraph`. Default basename of the output file is generated on the base of `input_file` basename.\n",
    "cwl_stdout": "${\n  if (inputs.output_filename == null){\n    return default_output_filename();\n  } else {\n    return inputs.output_filename;\n  }\n}\n",
    "cwl_s:name": "bedtools_genomecov",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bedtools/bedtools_genomecov_bed2bedgraph.cwl",
    "sha": "9d8524e9b80ab1b048715dfc14e3a7cb883bc414",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bedtools/bedtools_genomecov_bed2bedgraph.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  generate coverage tracks in bedgraph format from reads in BED\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: biocontainers/bedtools:2.25.0\n  SoftwareRequirement:\n    packages:\n      bedtools:\n        specs: [ https://identifiers.org/biotools/bedtools ]\n        version: [ \"2.25.0\" ]\n  \nbaseCommand: [\"bedtools\", \"genomecov\"]\narguments:\n  - valueFrom: \"-bg\"\n    position: 1\nstdout: $(inputs.bed.nameroot).bedgraph\n\ninputs:\n  bed:\n    type: File\n    inputBinding:\n      prefix: \"-i\"\n      position: 2\n  reference_info:\n    type: File\n    inputBinding:\n      prefix: \"-g\"\n      position: 3\n\noutputs:\n  bedgraph:\n    type: stdout\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bed', 'inputBinding': {'position': 2, 'prefix': '-i'}, 'type': 'File'}, {'id': 'reference_info', 'inputBinding': {'position': 3, 'prefix': '-g'}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'bedgraph', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/bedtools:2.25.0'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 15000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bedtools', 'version': ['2.25.0'], 'specs': ['https://identifiers.org/biotools/bedtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bedtools', 'genomecov']",
    "cwl_arguments": "[{'position': 1, 'valueFrom': '-bg'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "generate coverage tracks in bedgraph format from reads in BED\n",
    "cwl_stdout": "$(inputs.bed.nameroot).bedgraph",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "bedtools/bedtools_getfasta.cwl",
    "sha": "59d294dbfd2956716fbb344464b86492ac3afdc4",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bedtools/bedtools_getfasta.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var default_output_filename = function() {\n            if (inputs.output_filename == \"\"){\n              var root = inputs.intervals_file.basename.split('.').slice(0,-1).join('.');\n              return (root == \"\")?inputs.intervals_file.basename+\".fa\":root+\".fa\";\n            } else {\n              return inputs.output_filename;\n            }\n          };\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/bedtools2:v2.26.0\n  SoftwareRequirement:\n    packages:\n      bedtools:\n        specs: [ https://identifiers.org/biotools/bedtools ]\n        version: [ \"2.26.0\" ]\n\ninputs:\n\n  genome_fasta_file:\n    type: File\n    secondaryFiles: $(self.basename+\".fai\")  # due to bug in cwltool==1.0.20190621234233\n    inputBinding:\n      position: 5\n      prefix: \"-fi\"\n    doc: \"Genome file in FASTA format\"\n\n  intervals_file:\n    type: File\n    inputBinding:\n      position: 6\n      prefix: \"-bed\"\n    doc: \"Intervals file defined in a BED/GFF/VCF format\"\n\n  output_filename:\n    type: string?\n    default: \"\"\n    doc: \"Output file name\"\n\noutputs:\n\n  sequences_file:\n    type: File\n    outputBinding:\n      glob: $(default_output_filename())\n    doc: \"Sequences file\"\n\nbaseCommand: [\"bedtools\", \"getfasta\"]\nstdout: $(default_output_filename())\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bedtools_getfasta\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Extracts sequences from a FASTA file for each of the intervals defined in a BED/GFF/VCF file. Only selected parameters are implemented.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'genome_fasta_file', 'secondaryFiles': '$(self.basename+\".fai\")', 'doc': 'Genome file in FASTA format', 'inputBinding': {'position': 5, 'prefix': '-fi'}, 'type': 'File'}, {'id': 'intervals_file', 'doc': 'Intervals file defined in a BED/GFF/VCF format', 'inputBinding': {'position': 6, 'prefix': '-bed'}, 'type': 'File'}, {'id': 'output_filename', 'doc': 'Output file name', 'default': '', 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'sequences_file', 'doc': 'Sequences file', 'outputBinding': {'glob': '$(default_output_filename())'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bedtools2:v2.26.0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bedtools', 'version': ['2.26.0'], 'specs': ['https://identifiers.org/biotools/bedtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bedtools', 'getfasta']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { if (inputs.output_filename == \"\"){ var root = inputs.intervals_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.intervals_file.basename+\".fa\":root+\".fa\"; } else { return inputs.output_filename; } };']}]",
    "cwl_doc": "Extracts sequences from a FASTA file for each of the intervals defined in a BED/GFF/VCF file. Only selected parameters are implemented.\n",
    "cwl_stdout": "$(default_output_filename())",
    "cwl_s:name": "bedtools_getfasta",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bedtools/bedtools_intersect.cwl",
    "sha": "a5ece4f635663c2848bdad1bed8c6f8ae232ae16",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bedtools/bedtools_intersect.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var default_output_filename = function() {\n            if (inputs.output_filename == \"\"){\n              return inputs.file_a.basename;\n            } else {\n              return inputs.output_filename;\n            }\n          };\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/bedtools2:v2.26.0\n  SoftwareRequirement:\n    packages:\n      bedtools:\n        specs: [ https://identifiers.org/biotools/bedtools ]\n        version: [ \"2.26.0\" ]\n\ninputs:\n\n  file_a:\n    type: File\n    inputBinding:\n      position: 5\n      prefix: \"-a\"\n    doc: \"BAM/BED/GFF/VCF file A. Each feature in A is compared to B in search of overlaps\"\n\n  file_b:\n    type: File\n    inputBinding:\n      position: 6\n      prefix: \"-b\"\n    doc: \"BAM/BED/GFF/VCF file B. Each feature in A is compared to B in search of overlaps\"\n\n  count:\n    type: boolean?\n    inputBinding:\n      position: 7\n      prefix: \"-c\"\n    doc: \"For each entry in A, report the number of hits in B. Reports 0 for A entries that have no overlap with B\" \n\n  no_overlaps:\n    type: boolean?\n    inputBinding:\n      position: 8\n      prefix: \"-v\"\n    doc: \"Only report those entries in A that have _no overlaps_ with B\" \n\n  output_filename:\n    type: string?\n    default: \"\"\n    doc: \"Output file name\"\n\noutputs:\n\n  intersected_file:\n    type: File\n    outputBinding:\n      glob: $(default_output_filename())\n    doc: \"Intersected BED file\"\n\nbaseCommand: [\"bedtools\", \"intersect\"]\nstdout: $(default_output_filename())\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bedtools_intersect\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Intersect features from A and B file. Only selected parameters are implemented.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'count', 'doc': 'For each entry in A, report the number of hits in B. Reports 0 for A entries that have no overlap with B', 'inputBinding': {'position': 7, 'prefix': '-c'}, 'type': ['null', 'boolean']}, {'id': 'file_a', 'doc': 'BAM/BED/GFF/VCF file A. Each feature in A is compared to B in search of overlaps', 'inputBinding': {'position': 5, 'prefix': '-a'}, 'type': 'File'}, {'id': 'file_b', 'doc': 'BAM/BED/GFF/VCF file B. Each feature in A is compared to B in search of overlaps', 'inputBinding': {'position': 6, 'prefix': '-b'}, 'type': 'File'}, {'id': 'no_overlaps', 'doc': 'Only report those entries in A that have _no overlaps_ with B', 'inputBinding': {'position': 8, 'prefix': '-v'}, 'type': ['null', 'boolean']}, {'id': 'output_filename', 'doc': 'Output file name', 'default': '', 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'intersected_file', 'doc': 'Intersected BED file', 'outputBinding': {'glob': '$(default_output_filename())'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bedtools2:v2.26.0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bedtools', 'version': ['2.26.0'], 'specs': ['https://identifiers.org/biotools/bedtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bedtools', 'intersect']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { if (inputs.output_filename == \"\"){ return inputs.file_a.basename; } else { return inputs.output_filename; } };']}]",
    "cwl_doc": "Intersect features from A and B file. Only selected parameters are implemented.\n",
    "cwl_stdout": "$(default_output_filename())",
    "cwl_s:name": "bedtools_intersect",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bedtools/bedtools_merge.cwl",
    "sha": "32e85dc7e2d144dd6e0165b3eeae06f7b69f8726",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bedtools/bedtools_merge.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var default_output_filename = function() {\n            if (inputs.output_filename == \"\"){\n              return inputs.bed_file.basename;\n            } else {\n              return inputs.output_filename;\n            }\n          };\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/bedtools2:v2.26.0\n  SoftwareRequirement:\n    packages:\n      bedtools:\n        specs: [ https://identifiers.org/biotools/bedtools ]\n        version: [ \"2.26.0\" ]\n\ninputs:\n\n  bed_file:\n    type: File\n    inputBinding:\n      position: 5\n      prefix: \"-i\"\n    doc: \"The input BED file must be sorted by chrom, then start\"\n\n  max_distance:\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: \"-d\"\n    doc: \"Maximum distance between features to be merged\" \n\n  output_filename:\n    type: string?\n    default: \"\"\n    doc: \"Output file name\"\n\noutputs:\n\n  merged_bed_file:\n    type: File\n    outputBinding:\n      glob: $(default_output_filename())\n    doc: \"Merged BED file\"\n\nbaseCommand: [\"bedtools\", \"merge\"]\nstdout: $(default_output_filename())\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bedtools_merge\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Merges features from BED file. Only selected parameters are implemented.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bed_file', 'doc': 'The input BED file must be sorted by chrom, then start', 'inputBinding': {'position': 5, 'prefix': '-i'}, 'type': 'File'}, {'id': 'max_distance', 'doc': 'Maximum distance between features to be merged', 'inputBinding': {'position': 6, 'prefix': '-d'}, 'type': ['null', 'int']}, {'id': 'output_filename', 'doc': 'Output file name', 'default': '', 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'merged_bed_file', 'doc': 'Merged BED file', 'outputBinding': {'glob': '$(default_output_filename())'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bedtools2:v2.26.0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bedtools', 'version': ['2.26.0'], 'specs': ['https://identifiers.org/biotools/bedtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bedtools', 'merge']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { if (inputs.output_filename == \"\"){ return inputs.bed_file.basename; } else { return inputs.output_filename; } };']}]",
    "cwl_doc": "Merges features from BED file. Only selected parameters are implemented.\n",
    "cwl_stdout": "$(default_output_filename())",
    "cwl_s:name": "bedtools_merge",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bedtools/bedtools_slop_clip_to_chrom_boundaries.cwl",
    "sha": "a190df83a672ee839c68d704e82fd6eb123f218e",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bedtools/bedtools_slop_clip_to_chrom_boundaries.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Clips regions in a bed file that are exceeding chromosome boundaries.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: biocontainers/bedtools:2.25.0\n  SoftwareRequirement:\n    packages:\n      bedtools:\n        specs: [ https://identifiers.org/biotools/bedtools ]\n        version: [ \"2.26.0\" ]\n\nbaseCommand: [\"bedtools\", \"slop\"]\narguments:\n  - valueFrom: \"0\"\n    prefix: -b\n    position: 1\nstdout: $(inputs.bed.nameroot)_clipped.bed\n  \ninputs:\n  bed:\n    type: File\n    inputBinding:\n      prefix: \"-i\"\n      position: 2\n  reference_info:\n    type: File\n    inputBinding:\n      prefix: \"-g\"\n      position: 3\n\noutputs:\n  bed_clipped:\n    type: stdout\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bed', 'inputBinding': {'position': 2, 'prefix': '-i'}, 'type': 'File'}, {'id': 'reference_info', 'inputBinding': {'position': 3, 'prefix': '-g'}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'bed_clipped', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/bedtools:2.25.0'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 15000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bedtools', 'version': ['2.26.0'], 'specs': ['https://identifiers.org/biotools/bedtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bedtools', 'slop']",
    "cwl_arguments": "[{'position': 1, 'prefix': '-b', 'valueFrom': '0'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Clips regions in a bed file that are exceeding chromosome boundaries.\n",
    "cwl_stdout": "$(inputs.bed.nameroot)_clipped.bed",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "bismark/bismark_align.cwl",
    "sha": "6fe8675c0bbb02f9a7c9dedc330bd16bdec06713",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bismark/bismark_align.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/bismark:v0.0.2\n  SoftwareRequirement:\n    packages:\n      bismark:\n        specs: [ https://identifiers.org/biotools/bismark ]\n        version: [ \"0.0.2\" ]\n\ninputs:\n\n  indices_folder:\n    type: Directory\n    inputBinding:\n      position: 3\n    label: \"Bismark indices folder\"\n    doc: \"Path to Bismark generated indices folder\"\n\n  fastq_file:\n    type: File\n    inputBinding:\n      position: 4\n    label: \"FASTQ file\"\n    doc: \"Uncompressed or gzipped FASTQ file, single-end\"\n\n  processes:\n    type: int?\n    inputBinding:\n      position: 1\n      prefix: \"--multicore\"\n    label: \"Number of Bismark instances to run\"\n    doc: \"Set the number of parallel Bismark instances to run concurrently. Each Bismark instance runs four Bowtie2 aligners\"\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: \"-p\"\n    label: \"Number of Bowtie2 threads to use\"\n    doc: \"Set the number of threads for each Bowtie2 aligner\"\n\noutputs:\n\n  bam_file:\n    type: File\n    label: \"BAM alignment file\"\n    doc: \"Bismark generated BAM alignment file\"\n    outputBinding:\n      glob: \"*.bam\"\n\n  alignment_report:\n    type: File\n    label: \"Bismark alignment and methylation report\"\n    doc: \"Bismark generated alignment and methylation summary report\"\n    outputBinding:\n      glob: \"*.txt\"\n\nbaseCommand: [\"bismark\", \"--non_directional\"]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bismark_align\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Default aligner - Bowtie2.\n  Only Single-End supported.\n  Parameters used:\n  --non_directional\n    The sequencing library was constructed in a non strand-specific manner, alignments to all four bisulfite strands\n    will be reported. (The current Illumina protocol for BS-Seq is directional, in which case the strands complementary\n    to the original strands are merely theoretical and should not exist in reality. Specifying directional alignments\n    (which is the default) will only run 2 alignment threads to the original top (OT) or bottom (OB) strands in parallel\n    and report these alignments. This is the recommended option for strand-specific libraries).\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'fastq_file', 'label': 'FASTQ file', 'doc': 'Uncompressed or gzipped FASTQ file, single-end', 'inputBinding': {'position': 4}, 'type': 'File'}, {'id': 'indices_folder', 'label': 'Bismark indices folder', 'doc': 'Path to Bismark generated indices folder', 'inputBinding': {'position': 3}, 'type': 'Directory'}, {'id': 'processes', 'label': 'Number of Bismark instances to run', 'doc': 'Set the number of parallel Bismark instances to run concurrently. Each Bismark instance runs four Bowtie2 aligners', 'inputBinding': {'position': 1, 'prefix': '--multicore'}, 'type': ['null', 'int']}, {'id': 'threads', 'label': 'Number of Bowtie2 threads to use', 'doc': 'Set the number of threads for each Bowtie2 aligner', 'inputBinding': {'position': 2, 'prefix': '-p'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'alignment_report', 'label': 'Bismark alignment and methylation report', 'doc': 'Bismark generated alignment and methylation summary report', 'outputBinding': {'glob': '*.txt'}, 'type': 'File'}, {'id': 'bam_file', 'label': 'BAM alignment file', 'doc': 'Bismark generated BAM alignment file', 'outputBinding': {'glob': '*.bam'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bismark:v0.0.2'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bismark', 'version': ['0.0.2'], 'specs': ['https://identifiers.org/biotools/bismark']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bismark', '--non_directional']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Default aligner - Bowtie2.\nOnly Single-End supported.\nParameters used:\n--non_directional\n  The sequencing library was constructed in a non strand-specific manner, alignments to all four bisulfite strands\n  will be reported. (The current Illumina protocol for BS-Seq is directional, in which case the strands complementary\n  to the original strands are merely theoretical and should not exist in reality. Specifying directional alignments\n  (which is the default) will only run 2 alignment threads to the original top (OT) or bottom (OB) strands in parallel\n  and report these alignments. This is the recommended option for strand-specific libraries).\n",
    "cwl_stdout": null,
    "cwl_s:name": "bismark_align",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "bismark/bismark_extract_methylation.cwl",
    "sha": "251c8c10a487c61a7f7385b26189cee514ed4622",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bismark/bismark_extract_methylation.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/bismark:v0.0.2\n  SoftwareRequirement:\n    packages:\n      bismark:\n        specs: [ https://identifiers.org/biotools/bismark ]\n        version: [ \"0.0.2\" ]\n\ninputs:\n\n  genome_folder:\n    type: Directory\n    label: \"Genome folder\"\n    doc: |\n      \"Genome folder with FASTA (fa, fasta) files.\n       Bismark generated indices folder can be used also\"\n    inputBinding:\n      position: 2\n      prefix: \"--genome_folder\"\n\n  bam_file:\n    type: File\n    label: \"BAM alignment file\"\n    doc: \"Bismark generated BAM alignment file\"\n    inputBinding:\n      position: 3\n\n  processes:\n    type: int?\n    label: \"Number of Bismark instances to run\"\n    doc: |\n      \"Set the number of parallel Bismark instances to run concurrently.\n       Each Bismark instance simultainously runs the methylation extractor,\n       samtools stream and GZIP streams\"\n    inputBinding:\n      position: 1\n      prefix: \"--multicore\"\n\noutputs:\n\n  chg_context_file:\n    type: File\n    label: \"CHG methylation call\"\n    doc: \"CHG methylation call\"\n    outputBinding:\n      glob: \"CHG_context*\"\n\n  chh_context_file:\n    type: File\n    label: \"CHH methylation call\"\n    doc: \"CHH methylation call\"\n    outputBinding:\n      glob: \"CHH_context*\"\n\n  cpg_context_file:\n    type: File\n    label: \"CpG methylation call\"\n    doc: \"CpG methylation call\"\n    outputBinding:\n      glob: \"CpG_context*\"\n\n  mbias_plot:\n    type: File\n    label: \"Methylation bias plot\"\n    doc: \"QC data showing methylation bias across read lengths\"\n    outputBinding:\n      glob: \"*M-bias.txt\"\n\n  mbias_plot_png:\n    type: File\n    label: \"Methylation bias plot (PNG)\"\n    doc: \"QC data showing methylation bias across read lengths\"\n    outputBinding:\n      glob: \"*.png\"\n\n  bedgraph_coverage_file:\n    type: File\n    label: \"Methylation statuses bedGraph coverage file\"\n    doc: \"Coverage text file summarising cytosine methylation values in bedGraph format (tab-delimited; 0-based start coords, 1-based end coords)\"\n    outputBinding:\n      glob: \"*bedGraph.gz\"\n\n  bismark_coverage_file:\n    type: File\n    label: \"Methylation statuses Bismark coverage file\"\n    doc: \"Coverage text file summarising cytosine methylation values in Bismark format (tab-delimited, 1-based genomic coords)\"\n    outputBinding:\n      glob: \"*bismark.cov.gz\"\n\n  genome_wide_methylation_report:\n    type: File\n    label: \"Genome-wide cytosine methylation report\"\n    doc: \"Genome-wide methylation report for all cytosines in the genome\"\n    outputBinding:\n      glob: \"*CpG_report.txt\"\n\n  splitting_report:\n    type: File\n    label: \"Methylation extraction log\"\n    doc: \"Log file giving summary statistics about methylation extraction\"\n    outputBinding:\n      glob: \"*splitting_report.txt\"\n\nbaseCommand: [\"bismark_methylation_extractor\", \"--comprehensive\", \"--bedgraph\", \"--cytosine_report\"]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bismark_extract_methylation\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  bismark_methylation_extractor script operates on Bismark result files and extracts the methylation call\n  for every single C analysed. The position of every single C will be written out to a new output file,\n  depending on its context (CpG, CHG or CHH), whereby methylated Cs will be labelled as forward reads (+),\n  non-methylated Cs as reverse reads (-).\n\n  Options used:\n  --comprehensive\n    If strand-specific methylation is not of interest, all available methylation information can be pooled\n    into a single context-dependent file (information from any of the four strands will be pooled). This\n    will default to three output files (CpG-context, CHG-context and CHH-context).\n  --bedgraph\n    The Bismark methylation extractor can optionally also output a file in bedGraph format which uses 0-based\n    genomic start and 1- based end coordinates. It will be sorted by chromosomal coordinates and looks like this:\n    <chromosome> <start position> <end position> <methylation percentage> <count methylated> <count unmethylated>\n  --genome_folder\n    Bismark methylation extractor can also output a genome-wide cytosine methylation report. It is also sorted by\n    chromosomal coordinates but also contains the sequence context and is in the following format:\n    <chromosome> <position> <strand> <count methylated> <count unmethylated> <C-context> <trinucleotide context>\n    The main difference to the bedGraph or coverage output is that every cytosine on both the top and bottom strands\n    will be considered irrespective of whether they were actually covered by any reads in the experiment or not.\n    For this to work one has to also specify the genome that was used for the Bismark alignments using the\n    option --genome_folder <path>. As for the bedGraph mode, this will only consider cytosines in CpG context.\n  --cytosine_report\n    After the conversion to bedGraph has completed, the option '--cytosine_report' produces a\n    genome-wide methylation report for all cytosines in the genome. By default, the output uses 1-based\n    chromosome coordinates (zero-based start coords are optional) and reports CpG context only (all\n    cytosine context is optional). The output considers all Cs on both forward and reverse strands and\n    reports their position, strand, trinucleotide content and methylation state (counts are 0 if not\n    covered). The cytosine report conversion step is performed by the external module\n    'coverage2cytosine'; this script needs to reside in the same folder as the bismark_methylation_extractor\n    itself.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam_file', 'label': 'BAM alignment file', 'doc': 'Bismark generated BAM alignment file', 'inputBinding': {'position': 3}, 'type': 'File'}, {'id': 'genome_folder', 'label': 'Genome folder', 'doc': '\"Genome folder with FASTA (fa, fasta) files.\\n Bismark generated indices folder can be used also\"\\n', 'inputBinding': {'position': 2, 'prefix': '--genome_folder'}, 'type': 'Directory'}, {'id': 'processes', 'label': 'Number of Bismark instances to run', 'doc': '\"Set the number of parallel Bismark instances to run concurrently.\\n Each Bismark instance simultainously runs the methylation extractor,\\n samtools stream and GZIP streams\"\\n', 'inputBinding': {'position': 1, 'prefix': '--multicore'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'bedgraph_coverage_file', 'label': 'Methylation statuses bedGraph coverage file', 'doc': 'Coverage text file summarising cytosine methylation values in bedGraph format (tab-delimited; 0-based start coords, 1-based end coords)', 'outputBinding': {'glob': '*bedGraph.gz'}, 'type': 'File'}, {'id': 'bismark_coverage_file', 'label': 'Methylation statuses Bismark coverage file', 'doc': 'Coverage text file summarising cytosine methylation values in Bismark format (tab-delimited, 1-based genomic coords)', 'outputBinding': {'glob': '*bismark.cov.gz'}, 'type': 'File'}, {'id': 'chg_context_file', 'label': 'CHG methylation call', 'doc': 'CHG methylation call', 'outputBinding': {'glob': 'CHG_context*'}, 'type': 'File'}, {'id': 'chh_context_file', 'label': 'CHH methylation call', 'doc': 'CHH methylation call', 'outputBinding': {'glob': 'CHH_context*'}, 'type': 'File'}, {'id': 'cpg_context_file', 'label': 'CpG methylation call', 'doc': 'CpG methylation call', 'outputBinding': {'glob': 'CpG_context*'}, 'type': 'File'}, {'id': 'genome_wide_methylation_report', 'label': 'Genome-wide cytosine methylation report', 'doc': 'Genome-wide methylation report for all cytosines in the genome', 'outputBinding': {'glob': '*CpG_report.txt'}, 'type': 'File'}, {'id': 'mbias_plot', 'label': 'Methylation bias plot', 'doc': 'QC data showing methylation bias across read lengths', 'outputBinding': {'glob': '*M-bias.txt'}, 'type': 'File'}, {'id': 'mbias_plot_png', 'label': 'Methylation bias plot (PNG)', 'doc': 'QC data showing methylation bias across read lengths', 'outputBinding': {'glob': '*.png'}, 'type': 'File'}, {'id': 'splitting_report', 'label': 'Methylation extraction log', 'doc': 'Log file giving summary statistics about methylation extraction', 'outputBinding': {'glob': '*splitting_report.txt'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bismark:v0.0.2'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bismark', 'version': ['0.0.2'], 'specs': ['https://identifiers.org/biotools/bismark']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bismark_methylation_extractor', '--comprehensive', '--bedgraph', '--cytosine_report']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "bismark_methylation_extractor script operates on Bismark result files and extracts the methylation call\nfor every single C analysed. The position of every single C will be written out to a new output file,\ndepending on its context (CpG, CHG or CHH), whereby methylated Cs will be labelled as forward reads (+),\nnon-methylated Cs as reverse reads (-).\n\nOptions used:\n--comprehensive\n  If strand-specific methylation is not of interest, all available methylation information can be pooled\n  into a single context-dependent file (information from any of the four strands will be pooled). This\n  will default to three output files (CpG-context, CHG-context and CHH-context).\n--bedgraph\n  The Bismark methylation extractor can optionally also output a file in bedGraph format which uses 0-based\n  genomic start and 1- based end coordinates. It will be sorted by chromosomal coordinates and looks like this:\n  <chromosome> <start position> <end position> <methylation percentage> <count methylated> <count unmethylated>\n--genome_folder\n  Bismark methylation extractor can also output a genome-wide cytosine methylation report. It is also sorted by\n  chromosomal coordinates but also contains the sequence context and is in the following format:\n  <chromosome> <position> <strand> <count methylated> <count unmethylated> <C-context> <trinucleotide context>\n  The main difference to the bedGraph or coverage output is that every cytosine on both the top and bottom strands\n  will be considered irrespective of whether they were actually covered by any reads in the experiment or not.\n  For this to work one has to also specify the genome that was used for the Bismark alignments using the\n  option --genome_folder <path>. As for the bedGraph mode, this will only consider cytosines in CpG context.\n--cytosine_report\n  After the conversion to bedGraph has completed, the option '--cytosine_report' produces a\n  genome-wide methylation report for all cytosines in the genome. By default, the output uses 1-based\n  chromosome coordinates (zero-based start coords are optional) and reports CpG context only (all\n  cytosine context is optional). The output considers all Cs on both forward and reverse strands and\n  reports their position, strand, trinucleotide content and methylation state (counts are 0 if not\n  covered). The cytosine report conversion step is performed by the external module\n  'coverage2cytosine'; this script needs to reside in the same folder as the bismark_methylation_extractor\n  itself.\n",
    "cwl_stdout": null,
    "cwl_s:name": "bismark_extract_methylation",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "bismark/bismark_prepare_genome.cwl",
    "sha": "c29290b28ed5a7107d557d77704a460f760de9e9",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bismark/bismark_prepare_genome.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n InitialWorkDirRequirement:\n   listing:\n    - entry: inputs.genome_folder\n      writable: true\n\nhints:\n DockerRequirement:\n   dockerPull: biowardrobe2/bismark:v0.0.2\n SoftwareRequirement:\n   packages:\n     bismark:\n       specs: [ https://identifiers.org/biotools/bismark ]\n       version: [ \"0.0.2\" ]\n\ninputs:\n\n  genome_folder:\n    type: Directory\n    inputBinding:\n      position: 2\n    label: \"Genome folder\"\n    doc: \"Genome folder with FASTA files\"\n\noutputs:\n\n  indices_folder:\n    type: Directory\n    label: \"Bismark indices folder\"\n    doc: \"Bismark generated indices folder\"\n    outputBinding:\n      glob: \"*\"\n\nbaseCommand: [\"bismark_genome_preparation\"]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bismark_prepare_genome\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  bismark_genome_preparation script generates indices using Bowtie2 aligners by default.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'genome_folder', 'label': 'Genome folder', 'doc': 'Genome folder with FASTA files', 'inputBinding': {'position': 2}, 'type': 'Directory'}]",
    "cwl_outputs": "[{'id': 'indices_folder', 'label': 'Bismark indices folder', 'doc': 'Bismark generated indices folder', 'outputBinding': {'glob': '*'}, 'type': 'Directory'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bismark:v0.0.2'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bismark', 'version': ['0.0.2'], 'specs': ['https://identifiers.org/biotools/bismark']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bismark_genome_preparation']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': [{'entry': 'inputs.genome_folder', 'writable': True}]}]",
    "cwl_doc": "bismark_genome_preparation script generates indices using Bowtie2 aligners by default.\n",
    "cwl_stdout": null,
    "cwl_s:name": "bismark_prepare_genome",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bismark/bismark_report.cwl",
    "sha": "46ed2c8dd72a6f30ecdbb5bb4397f2d4b2988642",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bismark/bismark_report.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/bismark:v0.0.2\n  SoftwareRequirement:\n    packages:\n      bismark:\n        specs: [ https://identifiers.org/biotools/bismark ]\n        version: [ \"0.0.2\" ]\n\ninputs:\n\n  alignment_report:\n    type: File\n    inputBinding:\n      prefix: \"--alignment_report\"\n    label: \"Bismark alignment and methylation report\"\n    doc: \"Bismark generated alignment and methylation summary report\"\n\n  splitting_report:\n    type: File?\n    inputBinding:\n      prefix: \"--splitting_report\"\n    label: \"Methylation extraction log\"\n    doc: \"Log file giving summary statistics about methylation extraction\"\n\n  mbias_report:\n    type: File?\n    inputBinding:\n      prefix: \"--mbias_report\"\n    label: \"Methylation bias plot\"\n    doc: \"QC data showing methylation bias across read lengths\"\n\n  deduplication_report:\n    type: File?\n    inputBinding:\n      prefix: \"--dedup_report\"\n    label: \"Bismark deduplication report\"\n    doc: \"Bismark generated deduplication report\"\n\n  nucleotide_report:\n    type: File?\n    inputBinding:\n      prefix: \"--nucleotide_report\"\n    label: \"Nucleotide coverage report\"\n    doc: \"Bismark nucleotide coverage report\"\n\noutputs:\n\n  collected_report:\n    type: File\n    label: \"HTML report page\"\n    doc: \"Bismark generated graphical HTML report page\"\n    outputBinding:\n      glob: \"*\"\n\nbaseCommand: [\"bismark2report\"]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bismark_report\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  This tool uses a Bismark alignment report to generate a graphical HTML report page. Optionally, further reports of\n  the Bismark suite such as deduplication, methylation extractor splitting or M-bias reports can be specified as well.\n\n  Skipped arguments:\n    -o/--output\n    --dir\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'alignment_report', 'label': 'Bismark alignment and methylation report', 'doc': 'Bismark generated alignment and methylation summary report', 'inputBinding': {'prefix': '--alignment_report'}, 'type': 'File'}, {'id': 'deduplication_report', 'label': 'Bismark deduplication report', 'doc': 'Bismark generated deduplication report', 'inputBinding': {'prefix': '--dedup_report'}, 'type': ['null', 'File']}, {'id': 'mbias_report', 'label': 'Methylation bias plot', 'doc': 'QC data showing methylation bias across read lengths', 'inputBinding': {'prefix': '--mbias_report'}, 'type': ['null', 'File']}, {'id': 'nucleotide_report', 'label': 'Nucleotide coverage report', 'doc': 'Bismark nucleotide coverage report', 'inputBinding': {'prefix': '--nucleotide_report'}, 'type': ['null', 'File']}, {'id': 'splitting_report', 'label': 'Methylation extraction log', 'doc': 'Log file giving summary statistics about methylation extraction', 'inputBinding': {'prefix': '--splitting_report'}, 'type': ['null', 'File']}]",
    "cwl_outputs": "[{'id': 'collected_report', 'label': 'HTML report page', 'doc': 'Bismark generated graphical HTML report page', 'outputBinding': {'glob': '*'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bismark:v0.0.2'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bismark', 'version': ['0.0.2'], 'specs': ['https://identifiers.org/biotools/bismark']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bismark2report']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This tool uses a Bismark alignment report to generate a graphical HTML report page. Optionally, further reports of\nthe Bismark suite such as deduplication, methylation extractor splitting or M-bias reports can be specified as well.\n\nSkipped arguments:\n  -o/--output\n  --dir\n",
    "cwl_stdout": null,
    "cwl_s:name": "bismark_report",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "bowtie/bowtie_align.cwl",
    "sha": "03b5cf55223fe5c78e9412cbed1bed6518c3f694",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bowtie/bowtie_align.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n- class: ShellCommandRequirement\n- class: InlineJavascriptRequirement\n  expressionLib:\n  - var default_output_filename = function(ext) {\n      if (inputs.output_filename != \"\" && !ext){\n         return inputs.output_filename;\n      }\n      ext = ext || \".sam\";\n      var root = \"\";\n      if (inputs.output_filename != \"\"){\n         root = inputs.output_filename.split('.').slice(0,-1).join('.');\n         return (root == \"\")?inputs.output_filename+ext:root+ext;\n      } else\n        if (Array.isArray(inputs.upstream_filelist) && inputs.upstream_filelist.length > 0){\n          root = inputs.upstream_filelist[0].basename.split('.').slice(0,-1).join('.');\n          return (root == \"\")?inputs.upstream_filelist[0].basename+ext:root+ext;\n        } else\n          if (inputs.upstream_filelist != null){\n            root = inputs.upstream_filelist.basename.split('.').slice(0,-1).join('.');\n            return (root == \"\")?inputs.upstream_filelist.basename+ext:root+ext;\n          } else\n            if (Array.isArray(inputs.downstream_filelist) && inputs.downstream_filelist.length > 0){\n              root = inputs.downstream_filelist[0].basename.split('.').slice(0,-1).join('.');\n              return (root == \"\")?inputs.downstream_filelist[0].basename+ext:root+ext;\n            } else\n              if (inputs.downstream_filelist != null){\n                root = inputs.downstream_filelist.basename.split('.').slice(0,-1).join('.');\n                return (root == \"\")?inputs.downstream_filelist.basename+ext:root+ext;\n              } else\n                if (Array.isArray(inputs.crossbow_filelist) && inputs.crossbow_filelist.length > 0){\n                  root = inputs.crossbow_filelist[0].basename.split('.').slice(0,-1).join('.');\n                  return (root == \"\")?inputs.crossbow_filelist[0].basename+ext:root+ext;\n                } else\n                  if (inputs.crossbow_filelist != null){\n                    root = inputs.crossbow_filelist.basename.split('.').slice(0,-1).join('.');\n                    return (root == \"\")?inputs.crossbow_filelist.basename+ext:root+ext;\n                  } else {\n                    return null;\n                  }\n    };\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/bowtie:v1.2.0\n  SoftwareRequirement:\n    packages:\n      bowtie:\n        specs: [ https://identifiers.org/biotools/bowtie ]\n        version: [ \"1.2.0\" ]\n\ninputs:\n\n  indices_folder:\n    type: Directory\n    inputBinding:\n      position: 81\n      valueFrom: |\n        ${\n            for (var i = 0; i < self.listing.length; i++) {\n                if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.ebwt' ||\n                    self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.ebwtl'){\n                  return self.listing[i].path.split('.').slice(0,-3).join('.');\n                }\n            }\n            return null;\n        }\n    doc: |\n      Folder with Bowtie indices\n\n  upstream_filelist:\n    type:\n      - \"null\"\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      itemSeparator: \",\"\n      position: 83\n    doc: |\n      Comma-separated list of files containing upstream mates (or the\n      sequences themselves, if -c is set) paired with mates in <m2>\n\n  downstream_filelist:\n    type:\n      - \"null\"\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      itemSeparator: \",\"\n      position: 85\n    doc: |\n      Comma-separated list of files containing downstream mates (or the\n      sequences themselves if -c is set) paired with mates in <m1>\n\n  crossbow_filelist:\n    type:\n      - \"null\"\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      itemSeparator: \",\"\n      position: 86\n      prefix: \"-12\"\n    doc: |\n      Comma-separated list of files containing Crossbow-style reads.\n      Can be a mixture of paired and unpaired.  Specify \"-\"for stdin.\n\n  output_filename:\n    type:\n      - \"null\"\n      - string\n    inputBinding:\n      position: 90\n      valueFrom: $(default_output_filename())\n    default: \"\"\n    doc: |\n      Generates default output filename on the base of upstream_filelist/downstream_filelist files\n\n  q:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '-q'\n    doc: |\n      query input files are FASTQ .fq/.fastq (default)\n\n  f:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '-f'\n    doc: |\n      query input files are (multi-)FASTA .fa/.mfa\n\n  r:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '-r'\n    doc: |\n      query input files are raw one-sequence-per-line\n\n  c:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '-c'\n    doc: |\n      query sequences given on cmd line (as <mates>, <singles>)\n\n  C:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '-C'\n    doc: |\n      reads and index are in colorspace\n\n  Q:\n    type:\n      - \"null\"\n      - File\n    inputBinding:\n      position: 1\n      prefix: '-Q'\n    doc: |\n      QV file(s) corresponding to CSFASTA inputs; use with -f -C\n\n  Q1:\n    type:\n      - \"null\"\n      - File\n    inputBinding:\n      position: 1\n      prefix: '--Q1'\n    doc: |\n      --Q1/--Q2 <file>   same as -Q, but for mate files 1 and 2 respectively\n\n  Q2:\n    type:\n      - \"null\"\n      - File\n    inputBinding:\n      position: 1\n      prefix: '--Q2'\n    doc: |\n      --Q1/--Q2 <file>   same as -Q, but for mate files 1 and 2 respectively\n\n  s:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-s'\n    doc: |\n      --skip <int>    skip the first <int> reads/pairs in the input\n\n  u:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-u'\n    doc: |\n      --qupto <int>   stop after first <int> reads/pairs (excl. skipped reads)\n\n  clip_5p_end:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-5'\n    doc: |\n      --trim5 <int>   trim <int> bases from 5' (left) end of reads\n\n  clip_3p_end:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-3'\n    doc: |\n      --trim3 <int>   trim <int> bases from 3' (right) end of reads\n\n  phred33_quals:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--phred33-quals'\n    doc: |\n      input quals are Phred+33 (default)\n\n  phred64_quals:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--phred64-quals'\n    doc: |\n      input quals are Phred+64 (same as --solexa1.3-quals)\n\n  solexa_quals:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--solexa-quals'\n    doc: |\n      input quals are from GA Pipeline ver. < 1.3\n\n  solexa1.3_quals:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--solexa1.3-quals'\n    doc: |\n      input quals are from GA Pipeline ver. >= 1.3\n\n  integer_quals:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--integer-quals'\n    doc: |\n      qualities are given as space-separated integers (not ASCII)\n\n  large_index:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--large-index'\n    doc: |\n      force usage of a 'large' index, even if a small one is present\n\n  v:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-v'\n    doc: |\n      report end-to-end hits w/ <=v mismatches; ignore qualities\n\n  n:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-n'\n    doc: |\n      --seedmms <int> max mismatches in seed (can be 0-3, default: -n 2)\n\n  e:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-e'\n    doc: |\n      --maqerr <int>  max sum of mismatch quals across alignment for -n (def: 70)\n\n  l:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-l'\n    doc: |\n      --seedlen <int> seed length for -n (default: 28)\n\n  nomaqround:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--nomaqround'\n    doc: |\n      disable Maq-like quality rounding for -n (nearest 10 <= 30)\n\n  I:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-I'\n    doc: |\n      --minins <int>  minimum insert size for paired-end alignment (default: 0)\n\n  X:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-X'\n    doc: |\n      --maxins <int>  maximum insert size for paired-end alignment (default: 250)\n\n  fr:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--fr'\n    doc: |\n      --fr/--rf/--ff     -1, -2 mates align fw/rev, rev/fw, fw/fw (default: --fr)\n\n  rf:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--rf'\n    doc: |\n      --fr/--rf/--ff     -1, -2 mates align fw/rev, rev/fw, fw/fw (default: --fr)\n\n  ff:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--ff'\n    doc: |\n      --fr/--rf/--ff     -1, -2 mates align fw/rev, rev/fw, fw/fw (default: --fr)\n\n  nofw:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--nofw'\n    doc: |\n      --norc      do not align to forward/reverse-complement reference strand\n\n  maxbts:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '--maxbts'\n    doc: |\n      <int>     max # backtracks for -n 2/3 (default: 125, 800 for --best)\n\n  pairtries:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '--pairtries'\n    doc: |\n      <int>  max # attempts to find mate for anchor hit (default: 100)\n\n  y:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '-y'\n    doc: |\n      --tryhard try hard to find valid alignments, at the expense of speed\n\n  chunkmbs:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '--chunkmbs'\n    doc: |\n      <int>   max megabytes of RAM for best-first search frames (def: 64)\n\n  reads_per_batch:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '--reads-per-batch'\n    doc: |\n      # of reads to read from input file at once (default: 16)\n\n  k:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-k'\n    doc: |\n      <int>           report up to <int> good alignments per read (default: 1)\n\n  a:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '-a'\n    doc: |\n      --all           report all alignments per read (much slower than low -k)\n\n  m:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-m'\n    doc: |\n      <int>           suppress all alignments if > <int> exist (def: no limit)\n\n  M:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-M'\n    doc: |\n      <int> like -m, but reports 1 random hit (MAPQ=0)\n\n  best:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--best'\n    doc: |\n      hits guaranteed best stratum; ties broken by quality\n\n  strata:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--strata'\n    doc: |\n      hits in sub-optimal strata aren't reported (requires --best)\n\n  t:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '-t'\n    doc: |\n      --time          print wall-clock time taken by search phases\n\n  B:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-B'\n    doc: |\n      --offbase <int> leftmost ref offset = <int> in bowtie output (default: 0)\n\n  quiet:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--quiet'\n    doc: |\n      print nothing but the alignments\n\n  refout:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--refout'\n    doc: |\n      write alignments to files refXXXXX.map, 1 map per reference\n\n  refidx:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--refidx'\n    doc: |\n      refer to ref. seqs by 0-based index rather than name\n\n  al:\n    type:\n      - \"null\"\n      - string\n    inputBinding:\n      position: 1\n      prefix: '--al'\n    doc: |\n      <fname>       write aligned reads/pairs to file(s) <fname>\n\n  un:\n    type:\n      - \"null\"\n      - string\n    inputBinding:\n      position: 1\n      prefix: '--un'\n    doc: |\n      <fname>       write unaligned reads/pairs to file(s) <fname>\n\n  max:\n    type:\n      - \"null\"\n      - string\n    inputBinding:\n      position: 1\n      prefix: '--max'\n    doc: |\n      <fname>      write reads/pairs over -m limit to file(s) <fname>\n\n  suppress:\n    type:\n      - \"null\"\n      - string\n    inputBinding:\n      position: 1\n      prefix: '--suppress'\n    doc: |\n      <cols>  suppresses given columns (comma-delim'ed) in default output\n\n  fullref:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--fullref'\n    doc: |\n      write entire ref name (default: only up to 1st space)\n\n  snpphred:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '--snpphred'\n    doc: |\n      <int>   Phred penalty for SNP when decoding colorspace (def: 30)\n\n  snpfrac:\n    type:\n      - \"null\"\n      - float\n    inputBinding:\n      position: 1\n      prefix: '--snpfrac'\n    doc: |\n      <dec>    approx. fraction of SNP bases (e.g. 0.001); sets --snpphred\n\n  col_cseq:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--col-cseq'\n    doc: |\n      print aligned colorspace seqs as colors, not decoded bases\n\n  col_cqual:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--col-cqual'\n    doc: |\n      print original colorspace quals, not decoded quals\n\n  col_keepends:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--col-keepends'\n    doc: |\n      keep nucleotides at extreme ends of decoded alignment\n\n  sam:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '-S'\n    doc: |\n      --sam write hits in SAM format\n\n  mapq:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '--mapq'\n    doc: |\n      <int>       default mapping quality (MAPQ) to print for SAM alignments\n\n  sam_nohead:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--sam-nohead'\n    doc: |\n      supppress header lines (starting with @) for SAM output\n\n  sam_nosq:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--sam-nosq'\n    doc: |\n      supppress @SQ header lines for SAM output\n\n  sam_RG:\n    type:\n      - \"null\"\n      - string\n    inputBinding:\n      position: 1\n      prefix: '--sam-RG'\n    doc: |\n      <text>    add <text> (usually \"lab=value\") to @RG line of SAM header\n\n  o:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-o'\n    doc: |\n      --offrate <int> override offrate of index; must be >= index's offrate\n\n  threads:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '-p'\n    doc: |\n      --threads <int> number of alignment threads to launch (default: 1)\n\n  mm:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--mm'\n    doc: |\n      use memory-mapped I/O for index; many 'bowtie's can share\n\n  shmem:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--shmem'\n    doc: |\n      use shared mem for index\n\n  seed:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 1\n      prefix: '--seed'\n    doc: |\n      <int>       seed for random number generator\n\n  verbose:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 1\n      prefix: '--verbose'\n    doc: |\n      verbose output (for debugging)\n\noutputs:\n\n  sam_file:\n    type: File?\n    outputBinding:\n      glob: $(default_output_filename())\n\n  refout_file:\n    type: File[]?\n    outputBinding:\n      glob: \"*ref*.map*\"\n\n  unaligned_file:\n    type: File?\n    outputBinding:\n      glob: $(inputs.un)\n\n  aligned_file:\n    type: File?\n    outputBinding:\n      glob: $(inputs.al)\n\n  multimapped_file:\n    type: File?\n    outputBinding:\n      glob: $(inputs.max)\n\n  log_file:\n    type: File\n    outputBinding:\n      glob: $(default_output_filename(\".bw\"))\n\n  unmapped_reads_number:\n    type: int\n    outputBinding:\n      loadContents: true\n      glob: $(default_output_filename(\".bw\"))\n      outputEval: |\n        ${\n          var unmappedRegex = /align\\:.*/;\n          return parseInt(self[0].contents.match(unmappedRegex)[0].split(\" \")[1]);\n        }\n\n  mapped_reads_number:\n    type: int\n    outputBinding:\n      loadContents: true\n      glob: $(default_output_filename(\".bw\"))\n      outputEval: |\n        ${\n          var mappedRegex = /alignment\\:.*/;\n          return parseInt(self[0].contents.match(mappedRegex)[0].split(\" \")[1]);\n        }\n\n  total_reads_number:\n    type: int\n    outputBinding:\n      loadContents: true\n      glob: $(default_output_filename(\".bw\"))\n      outputEval: |\n        ${\n          var totalRegex = /processed\\:.*/;\n          return parseInt(self[0].contents.match(totalRegex)[0].split(\" \")[1]);\n        }\n\nbaseCommand:\n  - bowtie\n\narguments:\n  - valueFrom: |\n      ${\n        if (inputs.upstream_filelist && inputs.downstream_filelist){\n          return \"-1\";\n        }\n        return null;\n      }\n    position: 82\n  - valueFrom: |\n      ${\n        if (inputs.upstream_filelist && inputs.downstream_filelist){\n          return \"-2\";\n        }\n        return null;\n      }\n    position: 84\n  - valueFrom: |\n      ${\n        return ' 2> ' + default_output_filename(\".bw\");\n      }\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bowtie_align\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool maps input raw reads files to reference genome using Bowtie.\n\n  `default_output_filename` function returns default name for SAM output and log files. In case when `sam` and\n  `output_filename` inputs are not set, default filename will have `.sam` extension but format may not correspond SAM\n  specification. To set output filename manually use `output_filename` input. Default output filename is based on\n  `output_filename` or basename of `upstream_filelist`, `downstream_filelist` or `crossbow_filelist` file (if array,\n  the first file in array is taken). If function is called without argenments and `output_filename` input is set, it\n  will be returned from the function.\n\n  For single-end input data any of the `upstream_filelist` or `downstream_filelist` inputs can be used.\n\n  Log filename (`log_file` output) is generated by `default_output_filename` function with ex='.bw'\n\n  `indices_folder` defines folder to contain Bowtie indices. Based on the first found file with `rev.1.ebwt` or\n  `rev.1.ebwtl` extension, bowtie index prefix is returned from input's `valueFrom` field.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'B', 'doc': '--offbase <int> leftmost ref offset = <int> in bowtie output (default: 0)\\n', 'inputBinding': {'position': 1, 'prefix': '-B'}, 'type': ['null', 'int']}, {'id': 'C', 'doc': 'reads and index are in colorspace\\n', 'inputBinding': {'position': 1, 'prefix': '-C'}, 'type': ['null', 'boolean']}, {'id': 'I', 'doc': '--minins <int>  minimum insert size for paired-end alignment (default: 0)\\n', 'inputBinding': {'position': 1, 'prefix': '-I'}, 'type': ['null', 'int']}, {'id': 'M', 'doc': '<int> like -m, but reports 1 random hit (MAPQ=0)\\n', 'inputBinding': {'position': 1, 'prefix': '-M'}, 'type': ['null', 'int']}, {'id': 'Q', 'doc': 'QV file(s) corresponding to CSFASTA inputs; use with -f -C\\n', 'inputBinding': {'position': 1, 'prefix': '-Q'}, 'type': ['null', 'File']}, {'id': 'Q1', 'doc': '--Q1/--Q2 <file>   same as -Q, but for mate files 1 and 2 respectively\\n', 'inputBinding': {'position': 1, 'prefix': '--Q1'}, 'type': ['null', 'File']}, {'id': 'Q2', 'doc': '--Q1/--Q2 <file>   same as -Q, but for mate files 1 and 2 respectively\\n', 'inputBinding': {'position': 1, 'prefix': '--Q2'}, 'type': ['null', 'File']}, {'id': 'X', 'doc': '--maxins <int>  maximum insert size for paired-end alignment (default: 250)\\n', 'inputBinding': {'position': 1, 'prefix': '-X'}, 'type': ['null', 'int']}, {'id': 'a', 'doc': '--all           report all alignments per read (much slower than low -k)\\n', 'inputBinding': {'position': 1, 'prefix': '-a'}, 'type': ['null', 'boolean']}, {'id': 'al', 'doc': '<fname>       write aligned reads/pairs to file(s) <fname>\\n', 'inputBinding': {'position': 1, 'prefix': '--al'}, 'type': ['null', 'string']}, {'id': 'best', 'doc': 'hits guaranteed best stratum; ties broken by quality\\n', 'inputBinding': {'position': 1, 'prefix': '--best'}, 'type': ['null', 'boolean']}, {'id': 'c', 'doc': 'query sequences given on cmd line (as <mates>, <singles>)\\n', 'inputBinding': {'position': 1, 'prefix': '-c'}, 'type': ['null', 'boolean']}, {'id': 'chunkmbs', 'doc': '<int>   max megabytes of RAM for best-first search frames (def: 64)\\n', 'inputBinding': {'position': 1, 'prefix': '--chunkmbs'}, 'type': ['null', 'int']}, {'id': 'clip_3p_end', 'doc': \"--trim3 <int>   trim <int> bases from 3' (right) end of reads\\n\", 'inputBinding': {'position': 1, 'prefix': '-3'}, 'type': ['null', 'int']}, {'id': 'clip_5p_end', 'doc': \"--trim5 <int>   trim <int> bases from 5' (left) end of reads\\n\", 'inputBinding': {'position': 1, 'prefix': '-5'}, 'type': ['null', 'int']}, {'id': 'col_cqual', 'doc': 'print original colorspace quals, not decoded quals\\n', 'inputBinding': {'position': 1, 'prefix': '--col-cqual'}, 'type': ['null', 'boolean']}, {'id': 'col_cseq', 'doc': 'print aligned colorspace seqs as colors, not decoded bases\\n', 'inputBinding': {'position': 1, 'prefix': '--col-cseq'}, 'type': ['null', 'boolean']}, {'id': 'col_keepends', 'doc': 'keep nucleotides at extreme ends of decoded alignment\\n', 'inputBinding': {'position': 1, 'prefix': '--col-keepends'}, 'type': ['null', 'boolean']}, {'id': 'crossbow_filelist', 'doc': 'Comma-separated list of files containing Crossbow-style reads.\\nCan be a mixture of paired and unpaired.  Specify \"-\"for stdin.\\n', 'inputBinding': {'position': 86, 'prefix': '-12', 'itemSeparator': ','}, 'type': ['null', 'File', {'items': 'File', 'type': 'array'}]}, {'id': 'downstream_filelist', 'doc': 'Comma-separated list of files containing downstream mates (or the\\nsequences themselves if -c is set) paired with mates in <m1>\\n', 'inputBinding': {'position': 85, 'itemSeparator': ','}, 'type': ['null', 'File', {'items': 'File', 'type': 'array'}]}, {'id': 'e', 'doc': '--maqerr <int>  max sum of mismatch quals across alignment for -n (def: 70)\\n', 'inputBinding': {'position': 1, 'prefix': '-e'}, 'type': ['null', 'int']}, {'id': 'f', 'doc': 'query input files are (multi-)FASTA .fa/.mfa\\n', 'inputBinding': {'position': 1, 'prefix': '-f'}, 'type': ['null', 'boolean']}, {'id': 'ff', 'doc': '--fr/--rf/--ff     -1, -2 mates align fw/rev, rev/fw, fw/fw (default: --fr)\\n', 'inputBinding': {'position': 1, 'prefix': '--ff'}, 'type': ['null', 'boolean']}, {'id': 'fr', 'doc': '--fr/--rf/--ff     -1, -2 mates align fw/rev, rev/fw, fw/fw (default: --fr)\\n', 'inputBinding': {'position': 1, 'prefix': '--fr'}, 'type': ['null', 'boolean']}, {'id': 'fullref', 'doc': 'write entire ref name (default: only up to 1st space)\\n', 'inputBinding': {'position': 1, 'prefix': '--fullref'}, 'type': ['null', 'boolean']}, {'id': 'indices_folder', 'doc': 'Folder with Bowtie indices\\n', 'inputBinding': {'position': 81, 'valueFrom': \"${\\n    for (var i = 0; i < self.listing.length; i++) {\\n        if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.ebwt' ||\\n            self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.ebwtl'){\\n          return self.listing[i].path.split('.').slice(0,-3).join('.');\\n        }\\n    }\\n    return null;\\n}\\n\"}, 'type': 'Directory'}, {'id': 'integer_quals', 'doc': 'qualities are given as space-separated integers (not ASCII)\\n', 'inputBinding': {'position': 1, 'prefix': '--integer-quals'}, 'type': ['null', 'boolean']}, {'id': 'k', 'doc': '<int>           report up to <int> good alignments per read (default: 1)\\n', 'inputBinding': {'position': 1, 'prefix': '-k'}, 'type': ['null', 'int']}, {'id': 'l', 'doc': '--seedlen <int> seed length for -n (default: 28)\\n', 'inputBinding': {'position': 1, 'prefix': '-l'}, 'type': ['null', 'int']}, {'id': 'large_index', 'doc': \"force usage of a 'large' index, even if a small one is present\\n\", 'inputBinding': {'position': 1, 'prefix': '--large-index'}, 'type': ['null', 'boolean']}, {'id': 'm', 'doc': '<int>           suppress all alignments if > <int> exist (def: no limit)\\n', 'inputBinding': {'position': 1, 'prefix': '-m'}, 'type': ['null', 'int']}, {'id': 'mapq', 'doc': '<int>       default mapping quality (MAPQ) to print for SAM alignments\\n', 'inputBinding': {'position': 1, 'prefix': '--mapq'}, 'type': ['null', 'int']}, {'id': 'max', 'doc': '<fname>      write reads/pairs over -m limit to file(s) <fname>\\n', 'inputBinding': {'position': 1, 'prefix': '--max'}, 'type': ['null', 'string']}, {'id': 'maxbts', 'doc': '<int>     max # backtracks for -n 2/3 (default: 125, 800 for --best)\\n', 'inputBinding': {'position': 1, 'prefix': '--maxbts'}, 'type': ['null', 'int']}, {'id': 'mm', 'doc': \"use memory-mapped I/O for index; many 'bowtie's can share\\n\", 'inputBinding': {'position': 1, 'prefix': '--mm'}, 'type': ['null', 'boolean']}, {'id': 'n', 'doc': '--seedmms <int> max mismatches in seed (can be 0-3, default: -n 2)\\n', 'inputBinding': {'position': 1, 'prefix': '-n'}, 'type': ['null', 'int']}, {'id': 'nofw', 'doc': '--norc      do not align to forward/reverse-complement reference strand\\n', 'inputBinding': {'position': 1, 'prefix': '--nofw'}, 'type': ['null', 'boolean']}, {'id': 'nomaqround', 'doc': 'disable Maq-like quality rounding for -n (nearest 10 <= 30)\\n', 'inputBinding': {'position': 1, 'prefix': '--nomaqround'}, 'type': ['null', 'boolean']}, {'id': 'o', 'doc': \"--offrate <int> override offrate of index; must be >= index's offrate\\n\", 'inputBinding': {'position': 1, 'prefix': '-o'}, 'type': ['null', 'int']}, {'id': 'output_filename', 'doc': 'Generates default output filename on the base of upstream_filelist/downstream_filelist files\\n', 'inputBinding': {'position': 90, 'valueFrom': '$(default_output_filename())'}, 'default': '', 'type': ['null', 'string']}, {'id': 'pairtries', 'doc': '<int>  max # attempts to find mate for anchor hit (default: 100)\\n', 'inputBinding': {'position': 1, 'prefix': '--pairtries'}, 'type': ['null', 'int']}, {'id': 'phred33_quals', 'doc': 'input quals are Phred+33 (default)\\n', 'inputBinding': {'position': 1, 'prefix': '--phred33-quals'}, 'type': ['null', 'boolean']}, {'id': 'phred64_quals', 'doc': 'input quals are Phred+64 (same as --solexa1.3-quals)\\n', 'inputBinding': {'position': 1, 'prefix': '--phred64-quals'}, 'type': ['null', 'boolean']}, {'id': 'q', 'doc': 'query input files are FASTQ .fq/.fastq (default)\\n', 'inputBinding': {'position': 1, 'prefix': '-q'}, 'type': ['null', 'boolean']}, {'id': 'quiet', 'doc': 'print nothing but the alignments\\n', 'inputBinding': {'position': 1, 'prefix': '--quiet'}, 'type': ['null', 'boolean']}, {'id': 'r', 'doc': 'query input files are raw one-sequence-per-line\\n', 'inputBinding': {'position': 1, 'prefix': '-r'}, 'type': ['null', 'boolean']}, {'id': 'reads_per_batch', 'doc': '# of reads to read from input file at once (default: 16)\\n', 'inputBinding': {'position': 1, 'prefix': '--reads-per-batch'}, 'type': ['null', 'int']}, {'id': 'refidx', 'doc': 'refer to ref. seqs by 0-based index rather than name\\n', 'inputBinding': {'position': 1, 'prefix': '--refidx'}, 'type': ['null', 'boolean']}, {'id': 'refout', 'doc': 'write alignments to files refXXXXX.map, 1 map per reference\\n', 'inputBinding': {'position': 1, 'prefix': '--refout'}, 'type': ['null', 'boolean']}, {'id': 'rf', 'doc': '--fr/--rf/--ff     -1, -2 mates align fw/rev, rev/fw, fw/fw (default: --fr)\\n', 'inputBinding': {'position': 1, 'prefix': '--rf'}, 'type': ['null', 'boolean']}, {'id': 's', 'doc': '--skip <int>    skip the first <int> reads/pairs in the input\\n', 'inputBinding': {'position': 1, 'prefix': '-s'}, 'type': ['null', 'int']}, {'id': 'sam', 'doc': '--sam write hits in SAM format\\n', 'inputBinding': {'position': 1, 'prefix': '-S'}, 'type': ['null', 'boolean']}, {'id': 'sam_RG', 'doc': '<text>    add <text> (usually \"lab=value\") to @RG line of SAM header\\n', 'inputBinding': {'position': 1, 'prefix': '--sam-RG'}, 'type': ['null', 'string']}, {'id': 'sam_nohead', 'doc': 'supppress header lines (starting with @) for SAM output\\n', 'inputBinding': {'position': 1, 'prefix': '--sam-nohead'}, 'type': ['null', 'boolean']}, {'id': 'sam_nosq', 'doc': 'supppress @SQ header lines for SAM output\\n', 'inputBinding': {'position': 1, 'prefix': '--sam-nosq'}, 'type': ['null', 'boolean']}, {'id': 'seed', 'doc': '<int>       seed for random number generator\\n', 'inputBinding': {'position': 1, 'prefix': '--seed'}, 'type': ['null', 'int']}, {'id': 'shmem', 'doc': 'use shared mem for index\\n', 'inputBinding': {'position': 1, 'prefix': '--shmem'}, 'type': ['null', 'boolean']}, {'id': 'snpfrac', 'doc': '<dec>    approx. fraction of SNP bases (e.g. 0.001); sets --snpphred\\n', 'inputBinding': {'position': 1, 'prefix': '--snpfrac'}, 'type': ['null', 'float']}, {'id': 'snpphred', 'doc': '<int>   Phred penalty for SNP when decoding colorspace (def: 30)\\n', 'inputBinding': {'position': 1, 'prefix': '--snpphred'}, 'type': ['null', 'int']}, {'id': 'solexa1.3_quals', 'doc': 'input quals are from GA Pipeline ver. >= 1.3\\n', 'inputBinding': {'position': 1, 'prefix': '--solexa1.3-quals'}, 'type': ['null', 'boolean']}, {'id': 'solexa_quals', 'doc': 'input quals are from GA Pipeline ver. < 1.3\\n', 'inputBinding': {'position': 1, 'prefix': '--solexa-quals'}, 'type': ['null', 'boolean']}, {'id': 'strata', 'doc': \"hits in sub-optimal strata aren't reported (requires --best)\\n\", 'inputBinding': {'position': 1, 'prefix': '--strata'}, 'type': ['null', 'boolean']}, {'id': 'suppress', 'doc': \"<cols>  suppresses given columns (comma-delim'ed) in default output\\n\", 'inputBinding': {'position': 1, 'prefix': '--suppress'}, 'type': ['null', 'string']}, {'id': 't', 'doc': '--time          print wall-clock time taken by search phases\\n', 'inputBinding': {'position': 1, 'prefix': '-t'}, 'type': ['null', 'boolean']}, {'id': 'threads', 'doc': '--threads <int> number of alignment threads to launch (default: 1)\\n', 'inputBinding': {'position': 1, 'prefix': '-p'}, 'type': ['null', 'int']}, {'id': 'u', 'doc': '--qupto <int>   stop after first <int> reads/pairs (excl. skipped reads)\\n', 'inputBinding': {'position': 1, 'prefix': '-u'}, 'type': ['null', 'int']}, {'id': 'un', 'doc': '<fname>       write unaligned reads/pairs to file(s) <fname>\\n', 'inputBinding': {'position': 1, 'prefix': '--un'}, 'type': ['null', 'string']}, {'id': 'upstream_filelist', 'doc': 'Comma-separated list of files containing upstream mates (or the\\nsequences themselves, if -c is set) paired with mates in <m2>\\n', 'inputBinding': {'position': 83, 'itemSeparator': ','}, 'type': ['null', 'File', {'items': 'File', 'type': 'array'}]}, {'id': 'v', 'doc': 'report end-to-end hits w/ <=v mismatches; ignore qualities\\n', 'inputBinding': {'position': 1, 'prefix': '-v'}, 'type': ['null', 'int']}, {'id': 'verbose', 'doc': 'verbose output (for debugging)\\n', 'inputBinding': {'position': 1, 'prefix': '--verbose'}, 'type': ['null', 'boolean']}, {'id': 'y', 'doc': '--tryhard try hard to find valid alignments, at the expense of speed\\n', 'inputBinding': {'position': 1, 'prefix': '-y'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'aligned_file', 'outputBinding': {'glob': '$(inputs.al)'}, 'type': ['null', 'File']}, {'id': 'log_file', 'outputBinding': {'glob': '$(default_output_filename(\".bw\"))'}, 'type': 'File'}, {'id': 'mapped_reads_number', 'outputBinding': {'glob': '$(default_output_filename(\".bw\"))', 'loadContents': True, 'outputEval': '${\\n  var mappedRegex = /alignment\\\\:.*/;\\n  return parseInt(self[0].contents.match(mappedRegex)[0].split(\" \")[1]);\\n}\\n'}, 'type': 'int'}, {'id': 'multimapped_file', 'outputBinding': {'glob': '$(inputs.max)'}, 'type': ['null', 'File']}, {'id': 'refout_file', 'outputBinding': {'glob': '*ref*.map*'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'sam_file', 'outputBinding': {'glob': '$(default_output_filename())'}, 'type': ['null', 'File']}, {'id': 'total_reads_number', 'outputBinding': {'glob': '$(default_output_filename(\".bw\"))', 'loadContents': True, 'outputEval': '${\\n  var totalRegex = /processed\\\\:.*/;\\n  return parseInt(self[0].contents.match(totalRegex)[0].split(\" \")[1]);\\n}\\n'}, 'type': 'int'}, {'id': 'unaligned_file', 'outputBinding': {'glob': '$(inputs.un)'}, 'type': ['null', 'File']}, {'id': 'unmapped_reads_number', 'outputBinding': {'glob': '$(default_output_filename(\".bw\"))', 'loadContents': True, 'outputEval': '${\\n  var unmappedRegex = /align\\\\:.*/;\\n  return parseInt(self[0].contents.match(unmappedRegex)[0].split(\" \")[1]);\\n}\\n'}, 'type': 'int'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bowtie:v1.2.0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bowtie', 'version': ['1.2.0'], 'specs': ['https://identifiers.org/biotools/bowtie']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie']",
    "cwl_arguments": "[{'position': 82, 'valueFrom': '${\\n  if (inputs.upstream_filelist && inputs.downstream_filelist){\\n    return \"-1\";\\n  }\\n  return null;\\n}\\n'}, {'position': 84, 'valueFrom': '${\\n  if (inputs.upstream_filelist && inputs.downstream_filelist){\\n    return \"-2\";\\n  }\\n  return null;\\n}\\n'}, {'position': 100000, 'valueFrom': '${\\n  return \\' 2> \\' + default_output_filename(\".bw\");\\n}\\n', 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'ShellCommandRequirement'}, {'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function(ext) { if (inputs.output_filename != \"\" && !ext){ return inputs.output_filename; } ext = ext || \".sam\"; var root = \"\"; if (inputs.output_filename != \"\"){ root = inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.output_filename+ext:root+ext; } else if (Array.isArray(inputs.upstream_filelist) && inputs.upstream_filelist.length > 0){ root = inputs.upstream_filelist[0].basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.upstream_filelist[0].basename+ext:root+ext; } else if (inputs.upstream_filelist != null){ root = inputs.upstream_filelist.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.upstream_filelist.basename+ext:root+ext; } else if (Array.isArray(inputs.downstream_filelist) && inputs.downstream_filelist.length > 0){ root = inputs.downstream_filelist[0].basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.downstream_filelist[0].basename+ext:root+ext; } else if (inputs.downstream_filelist != null){ root = inputs.downstream_filelist.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.downstream_filelist.basename+ext:root+ext; } else if (Array.isArray(inputs.crossbow_filelist) && inputs.crossbow_filelist.length > 0){ root = inputs.crossbow_filelist[0].basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.crossbow_filelist[0].basename+ext:root+ext; } else if (inputs.crossbow_filelist != null){ root = inputs.crossbow_filelist.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.crossbow_filelist.basename+ext:root+ext; } else { return null; } };']}]",
    "cwl_doc": "Tool maps input raw reads files to reference genome using Bowtie.\n\n`default_output_filename` function returns default name for SAM output and log files. In case when `sam` and\n`output_filename` inputs are not set, default filename will have `.sam` extension but format may not correspond SAM\nspecification. To set output filename manually use `output_filename` input. Default output filename is based on\n`output_filename` or basename of `upstream_filelist`, `downstream_filelist` or `crossbow_filelist` file (if array,\nthe first file in array is taken). If function is called without argenments and `output_filename` input is set, it\nwill be returned from the function.\n\nFor single-end input data any of the `upstream_filelist` or `downstream_filelist` inputs can be used.\n\nLog filename (`log_file` output) is generated by `default_output_filename` function with ex='.bw'\n\n`indices_folder` defines folder to contain Bowtie indices. Based on the first found file with `rev.1.ebwt` or\n`rev.1.ebwtl` extension, bowtie index prefix is returned from input's `valueFrom` field.\n",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie_align",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bowtie/bowtie_build.cwl",
    "sha": "2d41a1509e26ad428aeac0ef49ae0c5f7433171a",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bowtie/bowtie_build.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement: {}\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/bowtie:v1.2.0\n  SoftwareRequirement:\n    packages:\n      bowtie:\n        specs: [ https://identifiers.org/biotools/bowtie ]\n        version: [ \"1.2.0\" ]\n\ninputs:\n\n  fasta_file:\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      itemSeparator: \",\"\n      position: 25\n    doc: |\n      comma-separated list of files with ref sequences\n\n  index_base_name:\n    type: string\n    inputBinding:\n      position: 26\n    doc: |\n      write Ebwt data to files with this dir/basename\n\n  force_large_index:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 3\n      prefix: '--large-index'\n    doc: |\n      force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\n\n  color:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 4\n      prefix: '--color'\n    doc: |\n      build a colorspace index\n\n  noauto:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 5\n      prefix: '--noauto'\n    doc: |\n      disable automatic -p/--bmax/--dcv memory-fitting\n\n  packed:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 6\n      prefix: '--packed'\n    doc: |\n      use packed strings internally; slower, less memory\n\n  bmax:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 7\n      prefix: '--bmax'\n    doc: |\n      max bucket sz for blockwise suffix-array builder\n\n  bmaxdivn:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 8\n      prefix: '--bmaxdivn'\n    doc: |\n      max bucket sz as divisor of ref len (default: 4)\n\n  dcv:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 9\n      prefix: '--dcv'\n    doc: |\n      diff-cover period for blockwise (default: 1024)\n\n  nodc:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 10\n      prefix: '--nodc'\n    doc: |\n      disable diff-cover (algorithm becomes quadratic)\n\n  noref:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 11\n      prefix: '--noref'\n    doc: |\n      don't build .3/.4 index files\n\n  justref:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 12\n      prefix: '--justref'\n    doc: |\n      just build .3/.4 index files\n\n  offrate:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 13\n      prefix: '--offrate'\n    doc: |\n      SA is sampled every 2^<int> BWT chars (default: 5)\n\n  ftabchars:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 14\n      prefix: '--ftabchars'\n    doc: |\n      # of chars consumed in initial lookup (default: 10)\n\n  ntoa:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 15\n      prefix: '--ntoa'\n    doc: |\n      convert Ns in reference to As\n\n  seed:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 16\n      prefix: '--seed'\n    doc: |\n      seed for random number generator\n\n  quiet:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 17\n      prefix: '--quiet'\n    doc: |\n      verbose output (for debugging)\n\noutputs:\n\n  indices:\n    type: File[]\n    outputBinding:\n      glob: \"*\"\n      outputEval: |\n        ${\n          var output_array = [];\n          for (var i = 0; i < self.length; i++){\n            if (self[i].class == \"File\"){\n              output_array.push(self[i]);\n            }\n          }\n          return output_array;\n        }\n\nbaseCommand:\n  - bowtie-build\n\narguments:\n  - valueFrom: $('> ' + inputs.index_base_name + '.log')\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bowtie_build\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie-build\n  Not supported parameters:\n    -c  -  reference sequences given on cmd line (as <seq_in>)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bmax', 'doc': 'max bucket sz for blockwise suffix-array builder\\n', 'inputBinding': {'position': 7, 'prefix': '--bmax'}, 'type': ['null', 'int']}, {'id': 'bmaxdivn', 'doc': 'max bucket sz as divisor of ref len (default: 4)\\n', 'inputBinding': {'position': 8, 'prefix': '--bmaxdivn'}, 'type': ['null', 'int']}, {'id': 'color', 'doc': 'build a colorspace index\\n', 'inputBinding': {'position': 4, 'prefix': '--color'}, 'type': ['null', 'boolean']}, {'id': 'dcv', 'doc': 'diff-cover period for blockwise (default: 1024)\\n', 'inputBinding': {'position': 9, 'prefix': '--dcv'}, 'type': ['null', 'int']}, {'id': 'fasta_file', 'doc': 'comma-separated list of files with ref sequences\\n', 'inputBinding': {'position': 25, 'itemSeparator': ','}, 'type': ['File', {'items': 'File', 'type': 'array'}]}, {'id': 'force_large_index', 'doc': \"force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\\n\", 'inputBinding': {'position': 3, 'prefix': '--large-index'}, 'type': ['null', 'boolean']}, {'id': 'ftabchars', 'doc': '# of chars consumed in initial lookup (default: 10)\\n', 'inputBinding': {'position': 14, 'prefix': '--ftabchars'}, 'type': ['null', 'int']}, {'id': 'index_base_name', 'doc': 'write Ebwt data to files with this dir/basename\\n', 'inputBinding': {'position': 26}, 'type': 'string'}, {'id': 'justref', 'doc': 'just build .3/.4 index files\\n', 'inputBinding': {'position': 12, 'prefix': '--justref'}, 'type': ['null', 'boolean']}, {'id': 'noauto', 'doc': 'disable automatic -p/--bmax/--dcv memory-fitting\\n', 'inputBinding': {'position': 5, 'prefix': '--noauto'}, 'type': ['null', 'boolean']}, {'id': 'nodc', 'doc': 'disable diff-cover (algorithm becomes quadratic)\\n', 'inputBinding': {'position': 10, 'prefix': '--nodc'}, 'type': ['null', 'boolean']}, {'id': 'noref', 'doc': \"don't build .3/.4 index files\\n\", 'inputBinding': {'position': 11, 'prefix': '--noref'}, 'type': ['null', 'boolean']}, {'id': 'ntoa', 'doc': 'convert Ns in reference to As\\n', 'inputBinding': {'position': 15, 'prefix': '--ntoa'}, 'type': ['null', 'boolean']}, {'id': 'offrate', 'doc': 'SA is sampled every 2^<int> BWT chars (default: 5)\\n', 'inputBinding': {'position': 13, 'prefix': '--offrate'}, 'type': ['null', 'int']}, {'id': 'packed', 'doc': 'use packed strings internally; slower, less memory\\n', 'inputBinding': {'position': 6, 'prefix': '--packed'}, 'type': ['null', 'boolean']}, {'id': 'quiet', 'doc': 'verbose output (for debugging)\\n', 'inputBinding': {'position': 17, 'prefix': '--quiet'}, 'type': ['null', 'boolean']}, {'id': 'seed', 'doc': 'seed for random number generator\\n', 'inputBinding': {'position': 16, 'prefix': '--seed'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'indices', 'outputBinding': {'glob': '*', 'outputEval': '${\\n  var output_array = [];\\n  for (var i = 0; i < self.length; i++){\\n    if (self[i].class == \"File\"){\\n      output_array.push(self[i]);\\n    }\\n  }\\n  return output_array;\\n}\\n'}, 'type': {'items': 'File', 'type': 'array'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/bowtie:v1.2.0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bowtie', 'version': ['1.2.0'], 'specs': ['https://identifiers.org/biotools/bowtie']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie-build']",
    "cwl_arguments": "[{'position': 100000, 'valueFrom': \"$('> ' + inputs.index_base_name + '.log')\", 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}, {'class': 'ShellCommandRequirement'}]",
    "cwl_doc": "Tool runs bowtie-build\nNot supported parameters:\n  -c  -  reference sequences given on cmd line (as <seq_in>)\n",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie_build",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bowtie2/bowtie2.cwl",
    "sha": "ea2d841d384cac16456fa250560b152b9385fd8e",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bowtie2/bowtie2.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Aligns reads from ATAC-seq or ChIP-seq to an indexed reference genome\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 4\n    ramMin: 30000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bowtie2:2.3.0--py36_1\n  SoftwareRequirement:\n    packages:\n      bowtie2:\n        specs: [ https://identifiers.org/biotools/bowtie2 ]\n        version: [ \"2.3.0\" ]\n\n\nbaseCommand: [\"bowtie2\"]\narguments:\n  - valueFrom: --very-sensitive\n    position: 1\n  - valueFrom: $(runtime.cores) # set the number of threads\n    prefix: \"-p\"\n    position: 1\n  - position: 10 # prefix for fastq1, differs for paired/single end\n    valueFrom: |\n      ${\n        if ( inputs.is_paired_end ){\n           return \"-1\";\n        }\n        else {\n          return \"-U\";\n        }\n      }\n  - valueFrom: $(inputs.fastq1.nameroot).sam\n    prefix: \"-S\"\n    position: 6\nstderr: $(inputs.fastq1.nameroot).bowtie2_stderr # log file\n  \n\ninputs:\n  reference_index:\n    doc: path to the FM-index files for the chosen reference genome\n    type: File\n    secondaryFiles:\n      - .fai\n      - ^.1.bt2\n      - ^.2.bt2\n      - ^.3.bt2\n      - ^.4.bt2\n      - ^.rev.1.bt2\n      - ^.rev.2.bt2\n    inputBinding:\n      position: 2\n      prefix: \"-x\"\n      valueFrom: $(self.path.replace(/\\.fa/i,\"\"))\n  fastq1:\n    type: File\n    inputBinding:\n      position: 11\n  is_paired_end:\n    type: boolean\n    default: True\n  fastq2:\n    type: File?\n    inputBinding:\n      valueFrom: |\n        ${\n            if ( inputs.is_paired_end ){\n                return self;\n            }\n            else {\n              return null;\n            }\n        }  \n      position: 12\n      prefix: \"-2\"\n  max_mapping_insert_length:\n    doc: useful for very long fragments, as expected for ATAC\n    type: long?\n    default: 2000\n    inputBinding:\n      prefix: --maxins\n      position: 1\n\n      \noutputs:\n  sam:\n    type: File\n    outputBinding:\n      glob: \"*.sam\"\n  bowtie2_log:\n    type: stderr\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'fastq1', 'inputBinding': {'position': 11}, 'type': 'File'}, {'id': 'fastq2', 'inputBinding': {'position': 12, 'prefix': '-2', 'valueFrom': '${\\n    if ( inputs.is_paired_end ){\\n        return self;\\n    }\\n    else {\\n      return null;\\n    }\\n}  \\n'}, 'type': ['null', 'File']}, {'id': 'is_paired_end', 'default': True, 'type': 'boolean'}, {'id': 'max_mapping_insert_length', 'doc': 'useful for very long fragments, as expected for ATAC', 'inputBinding': {'position': 1, 'prefix': '--maxins'}, 'default': 2000, 'type': ['null', 'long']}, {'id': 'reference_index', 'secondaryFiles': ['.fai', '^.1.bt2', '^.2.bt2', '^.3.bt2', '^.4.bt2', '^.rev.1.bt2', '^.rev.2.bt2'], 'doc': 'path to the FM-index files for the chosen reference genome', 'inputBinding': {'position': 2, 'prefix': '-x', 'valueFrom': '$(self.path.replace(/\\\\.fa/i,\"\"))'}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'bowtie2_log', 'type': 'stderr'}, {'id': 'sam', 'outputBinding': {'glob': '*.sam'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/bowtie2:2.3.0--py36_1'}, {'class': 'ResourceRequirement', 'coresMin': 4, 'ramMin': 30000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bowtie2', 'version': ['2.3.0'], 'specs': ['https://identifiers.org/biotools/bowtie2']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": "[{'position': 1, 'valueFrom': '--very-sensitive'}, {'position': 1, 'prefix': '-p', 'valueFrom': '$(runtime.cores)'}, {'position': 10, 'valueFrom': '${\\n  if ( inputs.is_paired_end ){\\n     return \"-1\";\\n  }\\n  else {\\n    return \"-U\";\\n  }\\n}\\n'}, {'position': 6, 'prefix': '-S', 'valueFrom': '$(inputs.fastq1.nameroot).sam'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}, {'class': 'StepInputExpressionRequirement'}]",
    "cwl_doc": "Aligns reads from ATAC-seq or ChIP-seq to an indexed reference genome\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "$(inputs.fastq1.nameroot).bowtie2_stderr",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bowtie2/bowtie2_align.cwl",
    "sha": "7ad614693a865836b428a1feafa39ecded13c20f",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bowtie2/bowtie2_align.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var default_output_filename = function() {\n          if (Array.isArray(inputs.filelist) && inputs.filelist.length > 0){\n            return inputs.filelist[0].location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n          } else\n            if (inputs.filelist != null){\n              return inputs.filelist.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n            } else\n              if (Array.isArray(inputs.filelist_mates) && inputs.filelist_mates.length > 0){\n                return inputs.filelist_mates[0].location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n              } else\n                if (inputs.filelist_mates != null){\n                  return inputs.filelist_mates.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".sam\";\n                } else {\n                  return null;\n                }\n      };\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bowtie2:2.3.0--py36_1\n  SoftwareRequirement:\n    packages:\n      bowtie2:\n        specs: [ https://identifiers.org/biotools/bowtie2 ]\n        version: [ \"2.3.0\" ]\n\ninputs:\n\n  indices_file:\n    type: File?\n    doc: File with secondaryFiles containing all the indices\n    inputBinding:\n      position: 81\n      prefix: -x\n      valueFrom: $(self.path.split('.').slice(0,-2).join('.'))\n\n  indices_folder:\n    type: Directory?\n    doc: \"Folder with indices files\"\n    inputBinding:\n      position: 81\n      prefix: '-x'\n      valueFrom: |\n        ${\n            for (var i = 0; i < self.listing.length; i++) {\n                if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2' ||\n                    self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2l'){\n                  return self.listing[i].path.split('.').slice(0,-3).join('.');\n                }\n            }\n            return null;\n        }\n\n  filelist:\n    type:\n    - \"null\"\n    - File\n    - type: array\n      items: File\n    doc: |\n      {-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\n      <m1>       Files with #1 mates, paired with files in <m2>.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n      <m2>       Files with #2 mates, paired with files in <m1>.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n      <r>        Files with unpaired reads.\n                 Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n    inputBinding:\n      itemSeparator: \",\"\n      position: 83\n\n  filelist_mates:\n    type:\n    - \"null\"\n    - File\n    - type: array\n      items: File\n    inputBinding:\n      itemSeparator: \",\"\n      position: 85\n\n  output_filename:\n    type: string\n    inputBinding:\n      position: 90\n      prefix: \"-S\"\n      valueFrom: |\n        ${\n            if (self == \"\"){\n              return default_output_filename();\n            } else {\n              return self;\n            }\n        }\n    default: \"\"\n    doc: |\n      File for SAM output (default: stdout)\n\n  q:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are FASTQ .fq/.fastq (default)\"\n    inputBinding:\n      position: 1\n      prefix: '-q'\n\n  qseq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are in Illumina's qseq format\"\n    inputBinding:\n      position: 1\n      prefix: '--qseq'\n\n  f:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are (multi-)FASTA .fa/.mfa\"\n    inputBinding:\n      position: 1\n      prefix: '-f'\n\n  raw:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"query input files are raw one-sequence-per-line\"\n    inputBinding:\n      position: 1\n      prefix: '-r'\n\n  c:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"<m1>, <m2>, <r> are sequences themselves, not files\"\n    inputBinding:\n      position: 1\n      prefix: '-c'\n\n  s:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      skip the first <int> reads/pairs in the input (none)\n    inputBinding:\n      position: 2\n      prefix: '-s'\n\n  u:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      stop after first <int> reads/pairs (no limit)\n    inputBinding:\n      position: 3\n      prefix: '-u'\n\n  clip_5p_end:\n    type: int?\n    doc: |\n      trim <int> bases from 5'/left end of reads (0)\n    inputBinding:\n      position: 4\n      prefix: '-5'\n\n  clip_3p_end:\n    type: int?\n    doc: |\n      trim <int> bases from 3'/right end of reads (0)\n    inputBinding:\n      position: 5\n      prefix: '-3'\n\n  phred33_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities are Phred+33 (default)\"\n    inputBinding:\n      position: 6\n      prefix: '--phred33'\n\n  phred64_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities are Phred+64\"\n    inputBinding:\n      position: 6\n      prefix: '--phred64'\n\n  integer_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"qualities encoded as space-delimited integers\"\n    inputBinding:\n      position: 6\n      prefix: '--int-quals'\n\n  n:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      max # mismatches in seed alignment; can be 0 or 1 (0)\n    inputBinding:\n      position: 7\n      prefix: '-N'\n\n  l:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      length of seed substrings; must be >3, <32 (22)\n    inputBinding:\n      position: 8\n      prefix: '-L'\n\n  i:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      interval between seed substrings w/r/t read len (S,1,1.15)\n    inputBinding:\n      position: 9\n      prefix: '-i'\n\n  n_ceil:\n    type:\n    - \"null\"\n    - string\n    doc: >\n      func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)\n    inputBinding:\n      position: 10\n      prefix: '--n-ceil'\n\n  dpad:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      include <int> extra ref chars on sides of DP table (15)\n    inputBinding:\n      position: 11\n      prefix: '--dpad'\n\n  gbar:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      disallow gaps within <int> nucs of read extremes (4)\n    inputBinding:\n      position: 12\n      prefix: '--gbar'\n\n  ignore_quals:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      treat all quality values as 30 on Phred scale (off)\n    inputBinding:\n      position: 13\n      prefix: '--ignore-quals'\n\n  nofw:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not align forward (original) version of read (off)\n    inputBinding:\n      position: 14\n      prefix: '--nofw'\n\n  norc:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not align reverse-complement version of read (off)\n    inputBinding:\n      position: 15\n      prefix: '--norc'\n\n  no_1mm_upfront:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments\n    inputBinding:\n      position: 16\n      prefix: '--no-1mm-upfront'\n\n  end_to_end:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      entire read must align; no clipping (on)\n      Options:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n        --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50\n        --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\n        --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 17\n      prefix: '--end-to-end'\n\n  end_to_end_very_fast:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n    inputBinding:\n      position: 18\n      prefix: '--very-fast'\n\n  end_to_end_fast:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\n    inputBinding:\n      position: 18\n      prefix: '--fast'\n\n  end_to_end_sensitive:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\n    inputBinding:\n      position: 18\n      prefix: '--sensitive'\n\n  end_to_end_very_sensitive:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for end_to_end:\n        --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 18\n      prefix: '--very-sensitive'\n\n  local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      local alignment; ends might be soft clipped (off)\n      Options:\n        --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\n        --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\n        --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\n        --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 19\n      prefix: '--local'\n\n  local_very_fast_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\n    inputBinding:\n      position: 20\n      prefix: '--very-fast-local'\n\n  local_fast_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\n    inputBinding:\n      position: 20\n      prefix: '--fast-local'\n\n  local_sensitive_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\n    inputBinding:\n      position: 20\n      prefix: '--sensitive-local'\n\n  local_very_sensitive_local:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      Option for local:\n        --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\n    inputBinding:\n      position: 20\n      prefix: '--very-sensitive-local'\n\n  ma:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      match bonus (0 for --end-to-end, 2 for --local)\n    inputBinding:\n      position: 21\n      prefix: '--ma'\n\n  mp:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      max penalty for mismatch; lower qual = lower penalty (6)\n    inputBinding:\n      position: 22\n      prefix: '--mp'\n\n  np:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      penalty for non-A/C/G/Ts in read/ref (1)\n    inputBinding:\n      position: 23\n      prefix: '--np'\n\n  rdg:\n    type:\n    - \"null\"\n    - int[]\n    doc: |\n      read gap open, extend penalties (5,3)\n    inputBinding:\n      position: 24\n      itemSeparator: \",\"\n      prefix: '--rdg'\n\n  rfg:\n    type:\n    - \"null\"\n    - int[]\n    doc: |\n      reference gap open, extend penalties (5,3)\n    inputBinding:\n      position: 25\n      itemSeparator: \",\"\n      prefix: '--rfg'\n\n  score_min:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)\n    inputBinding:\n      position: 26\n      prefix: '--score-min'\n\n  k:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      report up to <int> alns per read; MAPQ not meaningful\n    inputBinding:\n      position: 27\n      prefix: '-k'\n\n  a:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      report all alignments; very slow, MAPQ not meaningful\n    inputBinding:\n      position: 27\n      prefix: '-a'\n\n  d:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      give up extending after <int> failed extends in a row (15)\n    inputBinding:\n      position: 28\n      prefix: '-D'\n\n  r:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      for reads w/ repetitive seeds, try <int> sets of seeds (2)\n    inputBinding:\n      position: 29\n      prefix: '-R'\n\n  minins:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      minimum fragment length (0)\n    inputBinding:\n      position: 30\n      prefix: '--minins'\n\n  maxins:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      maxins fragment length (0)\n    inputBinding:\n      position: 30\n      prefix: '--maxins'\n\n  fr:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--fr'\n\n  rf:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--rf'\n\n  ff:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\n    inputBinding:\n      position: 31\n      prefix: '--ff'\n\n  no_mixed:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      suppress unpaired alignments for paired reads\n    inputBinding:\n      position: 32\n      prefix: '--no-mixed'\n\n  no_discordant:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      suppress discordant alignments for paired reads\n    inputBinding:\n      position: 33\n      prefix: '--no-discordant'\n\n  no_dovetail:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when mates extend past each other\n    inputBinding:\n      position: 34\n      prefix: '--no-dovetail'\n\n  no_contain:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when one mate alignment contains other\n    inputBinding:\n      position: 35\n      prefix: '--no-contain'\n\n  no_overlap:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      not concordant when mates overlap at all\n    inputBinding:\n      position: 36\n      prefix: '--no-overlap'\n\n  t:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      print wall-clock time taken by search phases\n    inputBinding:\n      position: 37\n      prefix: '-t'\n\n  un:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write unpaired reads that didn't align to <path>\n    inputBinding:\n      position: 38\n      prefix: '--un'\n\n  al:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write unpaired reads that aligned at least once to <path>\n    inputBinding:\n      position: 39\n      prefix: '--al'\n\n  un_conc:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write pairs that didn't align concordantly to <path>\n    inputBinding:\n      position: 40\n      prefix: '--un-conc'\n\n  al_conc:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      write pairs that aligned concordantly at least once to <path>\n    inputBinding:\n      position: 41\n      prefix: '--al-conc'\n\n  quiet:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"print nothing to stderr except serious errors\"\n    inputBinding:\n      position: 42\n      prefix: '--quiet'\n\n  met_file:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      send metrics to file at <path> (off)\n    inputBinding:\n      position: 43\n      prefix: '--met-file'\n\n  met_stderr:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"send metrics to stderr (off)\"\n    inputBinding:\n      position: 44\n      prefix: '--met-stderr'\n\n  met:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      report internal counters & metrics every <int> secs (1)\n    inputBinding:\n      position: 45\n      prefix: '--met'\n\n  no_unal:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress SAM records for unaligned reads\"\n    inputBinding:\n      position: 46\n      prefix: '--no-unal'\n\n  no_head:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress header lines, i.e. lines starting with @\"\n    inputBinding:\n      position: 47\n      prefix: '--no-head'\n\n  no_sq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"suppress @SQ header lines\"\n    inputBinding:\n      position: 48\n      prefix: '--no-sq'\n\n  rg_id:\n    type:\n    - \"null\"\n    - string\n    doc: \"set read group id, reflected in @RG line and RG:Z: opt field\"\n    inputBinding:\n      position: 49\n      prefix: '--rg-id'\n\n  rg:\n    type:\n    - \"null\"\n    - string\n    doc: |\n      add <text> (\"lab:value\") to @RG line of SAM header.\n      Note: @RG line only printed when --rg-id is set.\n    inputBinding:\n      position: 50\n      prefix: '--rg'\n\n  omit_sec_seq:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"put '*' in SEQ and QUAL fields for secondary alignments\"\n    inputBinding:\n      position: 51\n      prefix: '--omit-sec-seq'\n\n  threads:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      number of alignment threads to launch (1)\n    inputBinding:\n      position: 52\n      prefix: '-p'\n\n  reorder:\n    type:\n    - \"null\"\n    - boolean\n    doc: |\n      force SAM output order to match order of input reads\n    inputBinding:\n      position: 53\n      prefix: '--reorder'\n\n  mm:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"use memory-mapped I/O for index; many 'bowtie's can share\"\n    inputBinding:\n      position: 54\n      prefix: '--mm'\n\n  qc_filter:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"filter out reads that are bad according to QSEQ filter\"\n    inputBinding:\n      position: 55\n      prefix: '--qc-filter'\n#\n  seed:\n    type:\n    - \"null\"\n    - int\n    doc: |\n      seed for random number generator (0)\n    inputBinding:\n      position: 56\n      prefix: '--seed'\n\n  non_deterministic:\n    type:\n    - \"null\"\n    - boolean\n    doc: \"seed rand. gen. arbitrarily instead of using read attributes\"\n    inputBinding:\n      position: 57\n      prefix: '--non-deterministic'\n\noutputs:\n\n  output:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n           if (inputs.output_filename == \"\"){\n             return default_output_filename();\n           } else {\n             return inputs.output_filename;\n           }\n        }\n\n  output_log:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n           if (inputs.output_filename == \"\"){\n             return default_output_filename().split('.').slice(0,-1).join('.') + \".log\";\n           } else {\n             return inputs.output_filename.split('.').slice(0,-1).join('.') + \".log\";\n           }\n        }\n\nbaseCommand:\n  - bowtie2\n\narguments:\n  - valueFrom: |\n      ${\n        if (inputs.filelist && inputs.filelist_mates){\n          return \"-1\";\n        } else if (inputs.filelist){\n          return \"-U\";\n        } else {\n          return null;\n        }\n      }\n    position: 82\n  - valueFrom: |\n      ${\n        if (inputs.filelist && inputs.filelist_mates){\n          return \"-2\";\n        } else if (inputs.filelist_mates){\n          return \"-U\";\n        } else {\n          return null;\n        }\n      }\n    position: 84\n  - valueFrom: |\n      ${\n        if (inputs.output_filename == \"\"){\n          return ' 2> ' + default_output_filename().split('.').slice(0,-1).join('.') + '.log';\n        } else {\n          return ' 2> ' + inputs.output_filename.split('.').slice(0,-1).join('.') + '.log';\n        }\n      }\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bowtie2_align\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie aligner to align input FASTQ file(s) to reference genome\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'a', 'doc': 'report all alignments; very slow, MAPQ not meaningful\\n', 'inputBinding': {'position': 27, 'prefix': '-a'}, 'type': ['null', 'boolean']}, {'id': 'al', 'doc': 'write unpaired reads that aligned at least once to <path>\\n', 'inputBinding': {'position': 39, 'prefix': '--al'}, 'type': ['null', 'string']}, {'id': 'al_conc', 'doc': 'write pairs that aligned concordantly at least once to <path>\\n', 'inputBinding': {'position': 41, 'prefix': '--al-conc'}, 'type': ['null', 'string']}, {'id': 'c', 'doc': '<m1>, <m2>, <r> are sequences themselves, not files', 'inputBinding': {'position': 1, 'prefix': '-c'}, 'type': ['null', 'boolean']}, {'id': 'clip_3p_end', 'doc': \"trim <int> bases from 3'/right end of reads (0)\\n\", 'inputBinding': {'position': 5, 'prefix': '-3'}, 'type': ['null', 'int']}, {'id': 'clip_5p_end', 'doc': \"trim <int> bases from 5'/left end of reads (0)\\n\", 'inputBinding': {'position': 4, 'prefix': '-5'}, 'type': ['null', 'int']}, {'id': 'd', 'doc': 'give up extending after <int> failed extends in a row (15)\\n', 'inputBinding': {'position': 28, 'prefix': '-D'}, 'type': ['null', 'int']}, {'id': 'dpad', 'doc': 'include <int> extra ref chars on sides of DP table (15)\\n', 'inputBinding': {'position': 11, 'prefix': '--dpad'}, 'type': ['null', 'int']}, {'id': 'end_to_end', 'doc': 'entire read must align; no clipping (on)\\nOptions:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n  --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50\\n  --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\\n  --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 17, 'prefix': '--end-to-end'}, 'type': ['null', 'boolean']}, {'id': 'end_to_end_fast', 'doc': 'Option for end_to_end:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n', 'inputBinding': {'position': 18, 'prefix': '--fast'}, 'type': ['null', 'boolean']}, {'id': 'end_to_end_sensitive', 'doc': 'Option for end_to_end:\\n  --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)\\n', 'inputBinding': {'position': 18, 'prefix': '--sensitive'}, 'type': ['null', 'boolean']}, {'id': 'end_to_end_very_fast', 'doc': 'Option for end_to_end:\\n  --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50\\n', 'inputBinding': {'position': 18, 'prefix': '--very-fast'}, 'type': ['null', 'boolean']}, {'id': 'end_to_end_very_sensitive', 'doc': 'Option for end_to_end:\\n  --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 18, 'prefix': '--very-sensitive'}, 'type': ['null', 'boolean']}, {'id': 'f', 'doc': 'query input files are (multi-)FASTA .fa/.mfa', 'inputBinding': {'position': 1, 'prefix': '-f'}, 'type': ['null', 'boolean']}, {'id': 'ff', 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--ff'}, 'type': ['null', 'boolean']}, {'id': 'filelist', 'doc': \"{-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\\n<m1>       Files with #1 mates, paired with files in <m2>.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n<m2>       Files with #2 mates, paired with files in <m1>.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n<r>        Files with unpaired reads.\\n           Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\\n\", 'inputBinding': {'position': 83, 'itemSeparator': ','}, 'type': ['null', 'File', {'items': 'File', 'type': 'array'}]}, {'id': 'filelist_mates', 'inputBinding': {'position': 85, 'itemSeparator': ','}, 'type': ['null', 'File', {'items': 'File', 'type': 'array'}]}, {'id': 'fr', 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--fr'}, 'type': ['null', 'boolean']}, {'id': 'gbar', 'doc': 'disallow gaps within <int> nucs of read extremes (4)\\n', 'inputBinding': {'position': 12, 'prefix': '--gbar'}, 'type': ['null', 'int']}, {'id': 'i', 'doc': 'interval between seed substrings w/r/t read len (S,1,1.15)\\n', 'inputBinding': {'position': 9, 'prefix': '-i'}, 'type': ['null', 'int']}, {'id': 'ignore_quals', 'doc': 'treat all quality values as 30 on Phred scale (off)\\n', 'inputBinding': {'position': 13, 'prefix': '--ignore-quals'}, 'type': ['null', 'boolean']}, {'id': 'indices_file', 'doc': 'File with secondaryFiles containing all the indices', 'inputBinding': {'position': 81, 'prefix': '-x', 'valueFrom': \"$(self.path.split('.').slice(0,-2).join('.'))\"}, 'type': ['null', 'File']}, {'id': 'indices_folder', 'doc': 'Folder with indices files', 'inputBinding': {'position': 81, 'prefix': '-x', 'valueFrom': \"${\\n    for (var i = 0; i < self.listing.length; i++) {\\n        if (self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2' ||\\n            self.listing[i].path.split('.').slice(-3).join('.') == 'rev.1.bt2l'){\\n          return self.listing[i].path.split('.').slice(0,-3).join('.');\\n        }\\n    }\\n    return null;\\n}\\n\"}, 'type': ['null', 'Directory']}, {'id': 'integer_quals', 'doc': 'qualities encoded as space-delimited integers', 'inputBinding': {'position': 6, 'prefix': '--int-quals'}, 'type': ['null', 'boolean']}, {'id': 'k', 'doc': 'report up to <int> alns per read; MAPQ not meaningful\\n', 'inputBinding': {'position': 27, 'prefix': '-k'}, 'type': ['null', 'int']}, {'id': 'l', 'doc': 'length of seed substrings; must be >3, <32 (22)\\n', 'inputBinding': {'position': 8, 'prefix': '-L'}, 'type': ['null', 'int']}, {'id': 'local', 'doc': 'local alignment; ends might be soft clipped (off)\\nOptions:\\n  --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\\n  --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\\n  --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\\n  --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 19, 'prefix': '--local'}, 'type': ['null', 'boolean']}, {'id': 'local_fast_local', 'doc': 'Option for local:\\n  --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75\\n', 'inputBinding': {'position': 20, 'prefix': '--fast-local'}, 'type': ['null', 'boolean']}, {'id': 'local_sensitive_local', 'doc': 'Option for local:\\n  --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)\\n', 'inputBinding': {'position': 20, 'prefix': '--sensitive-local'}, 'type': ['null', 'boolean']}, {'id': 'local_very_fast_local', 'doc': 'Option for local:\\n  --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00\\n', 'inputBinding': {'position': 20, 'prefix': '--very-fast-local'}, 'type': ['null', 'boolean']}, {'id': 'local_very_sensitive_local', 'doc': 'Option for local:\\n  --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50\\n', 'inputBinding': {'position': 20, 'prefix': '--very-sensitive-local'}, 'type': ['null', 'boolean']}, {'id': 'ma', 'doc': 'match bonus (0 for --end-to-end, 2 for --local)\\n', 'inputBinding': {'position': 21, 'prefix': '--ma'}, 'type': ['null', 'int']}, {'id': 'maxins', 'doc': 'maxins fragment length (0)\\n', 'inputBinding': {'position': 30, 'prefix': '--maxins'}, 'type': ['null', 'int']}, {'id': 'met', 'doc': 'report internal counters & metrics every <int> secs (1)\\n', 'inputBinding': {'position': 45, 'prefix': '--met'}, 'type': ['null', 'int']}, {'id': 'met_file', 'doc': 'send metrics to file at <path> (off)\\n', 'inputBinding': {'position': 43, 'prefix': '--met-file'}, 'type': ['null', 'string']}, {'id': 'met_stderr', 'doc': 'send metrics to stderr (off)', 'inputBinding': {'position': 44, 'prefix': '--met-stderr'}, 'type': ['null', 'boolean']}, {'id': 'minins', 'doc': 'minimum fragment length (0)\\n', 'inputBinding': {'position': 30, 'prefix': '--minins'}, 'type': ['null', 'int']}, {'id': 'mm', 'doc': \"use memory-mapped I/O for index; many 'bowtie's can share\", 'inputBinding': {'position': 54, 'prefix': '--mm'}, 'type': ['null', 'boolean']}, {'id': 'mp', 'doc': 'max penalty for mismatch; lower qual = lower penalty (6)\\n', 'inputBinding': {'position': 22, 'prefix': '--mp'}, 'type': ['null', 'int']}, {'id': 'n', 'doc': 'max # mismatches in seed alignment; can be 0 or 1 (0)\\n', 'inputBinding': {'position': 7, 'prefix': '-N'}, 'type': ['null', 'int']}, {'id': 'n_ceil', 'doc': 'func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)\\n', 'inputBinding': {'position': 10, 'prefix': '--n-ceil'}, 'type': ['null', 'string']}, {'id': 'no_1mm_upfront', 'doc': 'do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments\\n', 'inputBinding': {'position': 16, 'prefix': '--no-1mm-upfront'}, 'type': ['null', 'boolean']}, {'id': 'no_contain', 'doc': 'not concordant when one mate alignment contains other\\n', 'inputBinding': {'position': 35, 'prefix': '--no-contain'}, 'type': ['null', 'boolean']}, {'id': 'no_discordant', 'doc': 'suppress discordant alignments for paired reads\\n', 'inputBinding': {'position': 33, 'prefix': '--no-discordant'}, 'type': ['null', 'boolean']}, {'id': 'no_dovetail', 'doc': 'not concordant when mates extend past each other\\n', 'inputBinding': {'position': 34, 'prefix': '--no-dovetail'}, 'type': ['null', 'boolean']}, {'id': 'no_head', 'doc': 'suppress header lines, i.e. lines starting with @', 'inputBinding': {'position': 47, 'prefix': '--no-head'}, 'type': ['null', 'boolean']}, {'id': 'no_mixed', 'doc': 'suppress unpaired alignments for paired reads\\n', 'inputBinding': {'position': 32, 'prefix': '--no-mixed'}, 'type': ['null', 'boolean']}, {'id': 'no_overlap', 'doc': 'not concordant when mates overlap at all\\n', 'inputBinding': {'position': 36, 'prefix': '--no-overlap'}, 'type': ['null', 'boolean']}, {'id': 'no_sq', 'doc': 'suppress @SQ header lines', 'inputBinding': {'position': 48, 'prefix': '--no-sq'}, 'type': ['null', 'boolean']}, {'id': 'no_unal', 'doc': 'suppress SAM records for unaligned reads', 'inputBinding': {'position': 46, 'prefix': '--no-unal'}, 'type': ['null', 'boolean']}, {'id': 'nofw', 'doc': 'do not align forward (original) version of read (off)\\n', 'inputBinding': {'position': 14, 'prefix': '--nofw'}, 'type': ['null', 'boolean']}, {'id': 'non_deterministic', 'doc': 'seed rand. gen. arbitrarily instead of using read attributes', 'inputBinding': {'position': 57, 'prefix': '--non-deterministic'}, 'type': ['null', 'boolean']}, {'id': 'norc', 'doc': 'do not align reverse-complement version of read (off)\\n', 'inputBinding': {'position': 15, 'prefix': '--norc'}, 'type': ['null', 'boolean']}, {'id': 'np', 'doc': 'penalty for non-A/C/G/Ts in read/ref (1)\\n', 'inputBinding': {'position': 23, 'prefix': '--np'}, 'type': ['null', 'int']}, {'id': 'omit_sec_seq', 'doc': \"put '*' in SEQ and QUAL fields for secondary alignments\", 'inputBinding': {'position': 51, 'prefix': '--omit-sec-seq'}, 'type': ['null', 'boolean']}, {'id': 'output_filename', 'doc': 'File for SAM output (default: stdout)\\n', 'inputBinding': {'position': 90, 'prefix': '-S', 'valueFrom': '${\\n    if (self == \"\"){\\n      return default_output_filename();\\n    } else {\\n      return self;\\n    }\\n}\\n'}, 'default': '', 'type': 'string'}, {'id': 'phred33_quals', 'doc': 'qualities are Phred+33 (default)', 'inputBinding': {'position': 6, 'prefix': '--phred33'}, 'type': ['null', 'boolean']}, {'id': 'phred64_quals', 'doc': 'qualities are Phred+64', 'inputBinding': {'position': 6, 'prefix': '--phred64'}, 'type': ['null', 'boolean']}, {'id': 'q', 'doc': 'query input files are FASTQ .fq/.fastq (default)', 'inputBinding': {'position': 1, 'prefix': '-q'}, 'type': ['null', 'boolean']}, {'id': 'qc_filter', 'doc': 'filter out reads that are bad according to QSEQ filter', 'inputBinding': {'position': 55, 'prefix': '--qc-filter'}, 'type': ['null', 'boolean']}, {'id': 'qseq', 'doc': \"query input files are in Illumina's qseq format\", 'inputBinding': {'position': 1, 'prefix': '--qseq'}, 'type': ['null', 'boolean']}, {'id': 'quiet', 'doc': 'print nothing to stderr except serious errors', 'inputBinding': {'position': 42, 'prefix': '--quiet'}, 'type': ['null', 'boolean']}, {'id': 'r', 'doc': 'for reads w/ repetitive seeds, try <int> sets of seeds (2)\\n', 'inputBinding': {'position': 29, 'prefix': '-R'}, 'type': ['null', 'int']}, {'id': 'raw', 'doc': 'query input files are raw one-sequence-per-line', 'inputBinding': {'position': 1, 'prefix': '-r'}, 'type': ['null', 'boolean']}, {'id': 'rdg', 'doc': 'read gap open, extend penalties (5,3)\\n', 'inputBinding': {'position': 24, 'prefix': '--rdg', 'itemSeparator': ','}, 'type': ['null', {'items': 'int', 'type': 'array'}]}, {'id': 'reorder', 'doc': 'force SAM output order to match order of input reads\\n', 'inputBinding': {'position': 53, 'prefix': '--reorder'}, 'type': ['null', 'boolean']}, {'id': 'rf', 'doc': '-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)\\n', 'inputBinding': {'position': 31, 'prefix': '--rf'}, 'type': ['null', 'boolean']}, {'id': 'rfg', 'doc': 'reference gap open, extend penalties (5,3)\\n', 'inputBinding': {'position': 25, 'prefix': '--rfg', 'itemSeparator': ','}, 'type': ['null', {'items': 'int', 'type': 'array'}]}, {'id': 'rg', 'doc': 'add <text> (\"lab:value\") to @RG line of SAM header.\\nNote: @RG line only printed when --rg-id is set.\\n', 'inputBinding': {'position': 50, 'prefix': '--rg'}, 'type': ['null', 'string']}, {'id': 'rg_id', 'doc': 'set read group id, reflected in @RG line and RG:Z: opt field', 'inputBinding': {'position': 49, 'prefix': '--rg-id'}, 'type': ['null', 'string']}, {'id': 's', 'doc': 'skip the first <int> reads/pairs in the input (none)\\n', 'inputBinding': {'position': 2, 'prefix': '-s'}, 'type': ['null', 'int']}, {'id': 'score_min', 'doc': 'min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)\\n', 'inputBinding': {'position': 26, 'prefix': '--score-min'}, 'type': ['null', 'string']}, {'id': 'seed', 'doc': 'seed for random number generator (0)\\n', 'inputBinding': {'position': 56, 'prefix': '--seed'}, 'type': ['null', 'int']}, {'id': 't', 'doc': 'print wall-clock time taken by search phases\\n', 'inputBinding': {'position': 37, 'prefix': '-t'}, 'type': ['null', 'boolean']}, {'id': 'threads', 'doc': 'number of alignment threads to launch (1)\\n', 'inputBinding': {'position': 52, 'prefix': '-p'}, 'type': ['null', 'int']}, {'id': 'u', 'doc': 'stop after first <int> reads/pairs (no limit)\\n', 'inputBinding': {'position': 3, 'prefix': '-u'}, 'type': ['null', 'int']}, {'id': 'un', 'doc': \"write unpaired reads that didn't align to <path>\\n\", 'inputBinding': {'position': 38, 'prefix': '--un'}, 'type': ['null', 'string']}, {'id': 'un_conc', 'doc': \"write pairs that didn't align concordantly to <path>\\n\", 'inputBinding': {'position': 40, 'prefix': '--un-conc'}, 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'output', 'outputBinding': {'glob': '${\\n   if (inputs.output_filename == \"\"){\\n     return default_output_filename();\\n   } else {\\n     return inputs.output_filename;\\n   }\\n}\\n'}, 'type': 'File'}, {'id': 'output_log', 'outputBinding': {'glob': '${\\n   if (inputs.output_filename == \"\"){\\n     return default_output_filename().split(\\'.\\').slice(0,-1).join(\\'.\\') + \".log\";\\n   } else {\\n     return inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\') + \".log\";\\n   }\\n}\\n'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/bowtie2:2.3.0--py36_1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bowtie2', 'version': ['2.3.0'], 'specs': ['https://identifiers.org/biotools/bowtie2']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2']",
    "cwl_arguments": "[{'position': 82, 'valueFrom': '${\\n  if (inputs.filelist && inputs.filelist_mates){\\n    return \"-1\";\\n  } else if (inputs.filelist){\\n    return \"-U\";\\n  } else {\\n    return null;\\n  }\\n}\\n'}, {'position': 84, 'valueFrom': '${\\n  if (inputs.filelist && inputs.filelist_mates){\\n    return \"-2\";\\n  } else if (inputs.filelist_mates){\\n    return \"-U\";\\n  } else {\\n    return null;\\n  }\\n}\\n'}, {'position': 100000, 'valueFrom': '${\\n  if (inputs.output_filename == \"\"){\\n    return \\' 2> \\' + default_output_filename().split(\\'.\\').slice(0,-1).join(\\'.\\') + \\'.log\\';\\n  } else {\\n    return \\' 2> \\' + inputs.output_filename.split(\\'.\\').slice(0,-1).join(\\'.\\') + \\'.log\\';\\n  }\\n}\\n', 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { if (Array.isArray(inputs.filelist) && inputs.filelist.length > 0){ return inputs.filelist[0].location.split(\\'/\\').slice(-1)[0].split(\\'.\\').slice(0,-1).join(\\'.\\')+\".sam\"; } else if (inputs.filelist != null){ return inputs.filelist.location.split(\\'/\\').slice(-1)[0].split(\\'.\\').slice(0,-1).join(\\'.\\')+\".sam\"; } else if (Array.isArray(inputs.filelist_mates) && inputs.filelist_mates.length > 0){ return inputs.filelist_mates[0].location.split(\\'/\\').slice(-1)[0].split(\\'.\\').slice(0,-1).join(\\'.\\')+\".sam\"; } else if (inputs.filelist_mates != null){ return inputs.filelist_mates.location.split(\\'/\\').slice(-1)[0].split(\\'.\\').slice(0,-1).join(\\'.\\')+\".sam\"; } else { return null; } };']}, {'class': 'ShellCommandRequirement'}]",
    "cwl_doc": "Tool runs bowtie aligner to align input FASTQ file(s) to reference genome\n",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie2_align",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bowtie2/bowtie2_build.cwl",
    "sha": "ab1684c0c90030a9bc79a8194f7ae352d30220fb",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bowtie2/bowtie2_build.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n ShellCommandRequirement: {}\n InlineJavascriptRequirement: {}\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bowtie2:2.3.0--py36_1\n  SoftwareRequirement:\n    packages:\n      bowtie2:\n        specs: [ https://identifiers.org/biotools/bowtie2 ]\n        version: [ \"2.3.0\" ]\n\ninputs:\n\n  reference_in:\n    type:\n      - File\n      - type: array\n        items: File\n    doc: >\n      comma-separated list of files with ref sequences\n    inputBinding:\n      itemSeparator: \",\"\n      position: 25\n\n  bt2_index_base:\n    type: string?\n    doc: |\n      write bt2 data to files with this dir/basename\n    inputBinding:\n      position: 26\n      shellQuote: false\n    default: bowtie2_indices\n\n  f:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      reference files are Fasta (default)\n    inputBinding:\n      position: 1\n      prefix: '-f'\n\n  c:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      reference sequences given on cmd line (as <reference_in>)\n    inputBinding:\n      position: 2\n      prefix: '-c'\n\n  large_index:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\n    inputBinding:\n      position: 3\n      prefix: '--large-index'\n\n  noauto:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      disable automatic -p/--bmax/--dcv memory-fitting\n    inputBinding:\n      position: 4\n      prefix: '--noauto'\n\n  packed:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      use packed strings internally; slower, less memory\n    inputBinding:\n      position: 5\n      prefix: '--packed'\n\n  bmax:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      max bucket sz for blockwise suffix-array builder\n    inputBinding:\n      position: 6\n      prefix: '--bmax'\n\n  bmaxdivn:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      max bucket sz as divisor of ref len (default: 4)\n    inputBinding:\n      position: 7\n      prefix: '--bmaxdivn'\n\n  dcv:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      diff-cover period for blockwise (default: 1024)\n    inputBinding:\n      position: 8\n      prefix: '--dcv'\n\n  nodc:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      disable diff-cover (algorithm becomes quadratic)\n    inputBinding:\n      position: 9\n      prefix: '--nodc'\n\n  noref:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      don't build .3/.4 index files\n    inputBinding:\n      position: 10\n      prefix: '--noref'\n\n  justref:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      just build .3/.4 index files\n    inputBinding:\n      position: 11\n      prefix: '--justref'\n\n  offrate:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      SA is sampled every 2^<int> BWT chars (default: 5)\n    inputBinding:\n      position: 12\n      prefix: '--offrate'\n\n  ftabchars:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      # of chars consumed in initial lookup (default: 10)\n    inputBinding:\n      position: 13\n      prefix: '--ftabchars'\n\n  threads:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      # of threads\n    inputBinding:\n      position: 14\n      prefix: '--threads'\n\n  seed:\n    type:\n      - \"null\"\n      - int\n    doc: |\n      seed for random number generator\n    inputBinding:\n      position: 15\n      prefix: '--seed'\n\n  quiet:\n    type:\n      - \"null\"\n      - boolean\n    doc: |\n      verbose output (for debugging)\n    inputBinding:\n      position: 15\n      prefix: '--quiet'\n\noutputs:\n\n  indices:\n    type: File\n    outputBinding:\n      glob: $(inputs.bt2_index_base).1.bt2*\n    secondaryFiles: |\n      ${\n        var ext = self.location.split('/').slice(-1)[0].split('.').slice(-1)[0];\n        var basename = self.location.split(\"/\").slice(-1)[0].split(\".\").slice(0, -2).join (\".\");\n        var dirname = self.location.split(\"/\").slice(0,-1).join(\"/\");\n        return [{\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".2.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".3.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".4.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.1.\" + ext},\n                {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.2.\" + ext}\n        ]\n      }\n\n  output_log:\n    type: File\n    outputBinding:\n      glob: $(inputs.bt2_index_base + \".log\")\n\nbaseCommand:\n  - bowtie2-build\n\narguments:\n  - valueFrom: $('2> ' + inputs.bt2_index_base + '.log')\n    position: 100000\n    shellQuote: false\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bowtie2_build\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:michael.kotliar@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs bowtie2-build to generate indices from input FASTA files\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bmax', 'doc': 'max bucket sz for blockwise suffix-array builder\\n', 'inputBinding': {'position': 6, 'prefix': '--bmax'}, 'type': ['null', 'int']}, {'id': 'bmaxdivn', 'doc': 'max bucket sz as divisor of ref len (default: 4)\\n', 'inputBinding': {'position': 7, 'prefix': '--bmaxdivn'}, 'type': ['null', 'int']}, {'id': 'bt2_index_base', 'doc': 'write bt2 data to files with this dir/basename\\n', 'inputBinding': {'position': 26, 'shellQuote': False}, 'default': 'bowtie2_indices', 'type': ['null', 'string']}, {'id': 'c', 'doc': 'reference sequences given on cmd line (as <reference_in>)\\n', 'inputBinding': {'position': 2, 'prefix': '-c'}, 'type': ['null', 'boolean']}, {'id': 'dcv', 'doc': 'diff-cover period for blockwise (default: 1024)\\n', 'inputBinding': {'position': 8, 'prefix': '--dcv'}, 'type': ['null', 'int']}, {'id': 'f', 'doc': 'reference files are Fasta (default)\\n', 'inputBinding': {'position': 1, 'prefix': '-f'}, 'type': ['null', 'boolean']}, {'id': 'ftabchars', 'doc': '# of chars consumed in initial lookup (default: 10)\\n', 'inputBinding': {'position': 13, 'prefix': '--ftabchars'}, 'type': ['null', 'int']}, {'id': 'justref', 'doc': 'just build .3/.4 index files\\n', 'inputBinding': {'position': 11, 'prefix': '--justref'}, 'type': ['null', 'boolean']}, {'id': 'large_index', 'doc': \"force generated index to be 'large', even if ref has fewer than 4 billion nucleotides\\n\", 'inputBinding': {'position': 3, 'prefix': '--large-index'}, 'type': ['null', 'boolean']}, {'id': 'noauto', 'doc': 'disable automatic -p/--bmax/--dcv memory-fitting\\n', 'inputBinding': {'position': 4, 'prefix': '--noauto'}, 'type': ['null', 'boolean']}, {'id': 'nodc', 'doc': 'disable diff-cover (algorithm becomes quadratic)\\n', 'inputBinding': {'position': 9, 'prefix': '--nodc'}, 'type': ['null', 'boolean']}, {'id': 'noref', 'doc': \"don't build .3/.4 index files\\n\", 'inputBinding': {'position': 10, 'prefix': '--noref'}, 'type': ['null', 'boolean']}, {'id': 'offrate', 'doc': 'SA is sampled every 2^<int> BWT chars (default: 5)\\n', 'inputBinding': {'position': 12, 'prefix': '--offrate'}, 'type': ['null', 'int']}, {'id': 'packed', 'doc': 'use packed strings internally; slower, less memory\\n', 'inputBinding': {'position': 5, 'prefix': '--packed'}, 'type': ['null', 'boolean']}, {'id': 'quiet', 'doc': 'verbose output (for debugging)\\n', 'inputBinding': {'position': 15, 'prefix': '--quiet'}, 'type': ['null', 'boolean']}, {'id': 'reference_in', 'doc': 'comma-separated list of files with ref sequences\\n', 'inputBinding': {'position': 25, 'itemSeparator': ','}, 'type': ['File', {'items': 'File', 'type': 'array'}]}, {'id': 'seed', 'doc': 'seed for random number generator\\n', 'inputBinding': {'position': 15, 'prefix': '--seed'}, 'type': ['null', 'int']}, {'id': 'threads', 'doc': '# of threads\\n', 'inputBinding': {'position': 14, 'prefix': '--threads'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'indices', 'secondaryFiles': '${\\n  var ext = self.location.split(\\'/\\').slice(-1)[0].split(\\'.\\').slice(-1)[0];\\n  var basename = self.location.split(\"/\").slice(-1)[0].split(\".\").slice(0, -2).join (\".\");\\n  var dirname = self.location.split(\"/\").slice(0,-1).join(\"/\");\\n  return [{\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".2.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".3.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".4.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.1.\" + ext},\\n          {\"class\": \"File\", \"path\": dirname + \"/\" + basename + \".rev.2.\" + ext}\\n  ]\\n}\\n', 'outputBinding': {'glob': '$(inputs.bt2_index_base).1.bt2*'}, 'type': 'File'}, {'id': 'output_log', 'outputBinding': {'glob': '$(inputs.bt2_index_base + \".log\")'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/bowtie2:2.3.0--py36_1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bowtie2', 'version': ['2.3.0'], 'specs': ['https://identifiers.org/biotools/bowtie2']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bowtie2-build']",
    "cwl_arguments": "[{'position': 100000, 'valueFrom': \"$('2> ' + inputs.bt2_index_base + '.log')\", 'shellQuote': False}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}, {'class': 'ShellCommandRequirement'}]",
    "cwl_doc": "Tool runs bowtie2-build to generate indices from input FASTA files\n",
    "cwl_stdout": null,
    "cwl_s:name": "bowtie2_build",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:michael.kotliar@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bwa/BWA-Index.cwl",
    "sha": "d271a965a393c472aafeef20eb323f386a52e241",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bwa/BWA-Index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bwa:0.7.17--ha92aebf_3\n  SoftwareRequirement:\n    packages:\n      bwa:\n        version: [ \"0.7.17\" ]\n        specs: [ https://identifiers.org/biotools/bwa ]\n          \ninputs:\n  sequences:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      position: 200\n\n#Optional arguments\n\n  algo_type:\n    type: \n      - \"null\"\n      - type: enum\n        symbols:\n        - is\n        - bwtsw\n    inputBinding:\n      prefix: \"-a\"\n  index_name:\n    type: string?\n\n# the expressions for the index name prefix are needed because 'default:' on an optional\n# parameter does not accept an expression\narguments:\n  - -p\n  - '$(((inputs.index_name !== null) ? inputs.index_name : inputs.sequences.nameroot))'\n\nbaseCommand: [bwa, index]\n\noutputs:\n  index:\n    type: File\n    secondaryFiles: \n      - ^.amb\n      - ^.ann\n      - ^.pac\n      - ^.sa\n    outputBinding:\n      glob: \"*.bwt\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'algo_type', 'inputBinding': {'prefix': '-a'}, 'type': ['null', {'name': '_:0783c5bf-40b7-4344-a4d4-f59f7c71ee9c', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#algo_type/is', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#algo_type/bwtsw'], 'type': 'enum'}]}, {'id': 'index_name', 'type': ['null', 'string']}, {'id': 'sequences', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'position': 200}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'index', 'secondaryFiles': ['^.amb', '^.ann', '^.pac', '^.sa'], 'outputBinding': {'glob': '*.bwt'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/bwa:0.7.17--ha92aebf_3'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bwa', 'version': ['0.7.17'], 'specs': ['https://identifiers.org/biotools/bwa']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'index']",
    "cwl_arguments": "['-p', '$(((inputs.index_name !== null) ? inputs.index_name : inputs.sequences.nameroot))']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bwa/BWA-Mem.cwl",
    "sha": "966d0ed048ee54cc696edfcff9c6cf02d6012146",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bwa/BWA-Mem.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bwa:0.7.17--ha92aebf_3\n  SoftwareRequirement:\n    packages:\n      bwa:\n        version: [ \"0.7.17\" ]\n        specs: [ https://identifiers.org/biotools/bwa ]\n\ninputs:\n  index:\n    type: File\n    secondaryFiles:\n      - ^.amb\n      - ^.ann\n      - ^.pac\n      - ^.sa\n    inputBinding:\n      position: 200\n      valueFrom: $(self.dirname)/$(self.nameroot)\n    \n  input_files:\n    type: File[]\n    format:\n      - edam:format_1930 # FASTQ (no quality score encoding specified)\n      - edam:format_1931 # FASTQ-Illumina\n      - edam:format_1932 # FASTQ-Sanger\n      - edam:format_1933 # FASTQ-Solexa\n    inputBinding:\n      position: 201\n    \n#Optional arguments\n\n  threads:\n    type: int?\n    inputBinding:\n      prefix: \"-t\"\n\n  min_seed_len:\n    type: int?\n    inputBinding:\n      prefix: \"-k\"\n  \n  band_width:\n    type: int?\n    inputBinding:\n      prefix: \"-w\"\n\n  z_dropoff:\n    type: int?\n    inputBinding:\n      prefix: \"-d\"\n\n  seed_split_ratio:\n    type: float?\n    inputBinding:\n      prefix: \"-r\"\n    \n  max_occ:\n    type: int?\n    inputBinding:\n      prefix: \"-c\"\n\n  match_score:\n    type: int?\n    inputBinding:\n      prefix: \"-A\"\n\n  mm_penalty:\n    type: int?\n    inputBinding:\n      prefix: \"-B\"\n\n  gap_open_penalty:\n    type: int?\n    inputBinding:\n      prefix: \"-O\"\n\n  gap_ext_penalty:\n    type: int?\n    inputBinding:\n      prefix: \"-E\"\n\n  clip_penalty:\n    type: int?\n    inputBinding:\n      prefix: \"-L\"\n\n  unpair_pen:\n    type: int?\n    inputBinding:\n      prefix: \"-U\"\n\n  rg_line:\n    type: string?\n    inputBinding:\n      prefix: \"-R\"\n\n  verbose_level:\n    type: int?\n    inputBinding:\n      prefix: \"-v\"\n\n  is_out_sec_align:\n    type: boolean?\n    inputBinding:\n      prefix: \"-a\"\n\n  is_mark_short_split:\n    type: boolean?\n    inputBinding:\n      prefix: \"-M\"\n\n  is_use_hard_clip:\n    type: boolean?\n    inputBinding:\n      prefix: \"-H\"\n\n  is_multiplexed_pair:\n    type: boolean?\n    inputBinding:\n      prefix: \"-p\"\n      \n\nbaseCommand: [bwa, mem]\n    \nstdout: unsorted_reads.sam\n\noutputs:\n  reads_stdout:\n    type: stdout\n    format: edam:format_2573 # SAM format\n    \n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'band_width', 'inputBinding': {'prefix': '-w'}, 'type': ['null', 'int']}, {'id': 'clip_penalty', 'inputBinding': {'prefix': '-L'}, 'type': ['null', 'int']}, {'id': 'gap_ext_penalty', 'inputBinding': {'prefix': '-E'}, 'type': ['null', 'int']}, {'id': 'gap_open_penalty', 'inputBinding': {'prefix': '-O'}, 'type': ['null', 'int']}, {'id': 'index', 'secondaryFiles': ['^.amb', '^.ann', '^.pac', '^.sa'], 'inputBinding': {'position': 200, 'valueFrom': '$(self.dirname)/$(self.nameroot)'}, 'type': 'File'}, {'id': 'input_files', 'format': ['http://edamontology.org/format_1930', 'http://edamontology.org/format_1931', 'http://edamontology.org/format_1932', 'http://edamontology.org/format_1933'], 'inputBinding': {'position': 201}, 'type': {'items': 'File', 'type': 'array'}}, {'id': 'is_mark_short_split', 'inputBinding': {'prefix': '-M'}, 'type': ['null', 'boolean']}, {'id': 'is_multiplexed_pair', 'inputBinding': {'prefix': '-p'}, 'type': ['null', 'boolean']}, {'id': 'is_out_sec_align', 'inputBinding': {'prefix': '-a'}, 'type': ['null', 'boolean']}, {'id': 'is_use_hard_clip', 'inputBinding': {'prefix': '-H'}, 'type': ['null', 'boolean']}, {'id': 'match_score', 'inputBinding': {'prefix': '-A'}, 'type': ['null', 'int']}, {'id': 'max_occ', 'inputBinding': {'prefix': '-c'}, 'type': ['null', 'int']}, {'id': 'min_seed_len', 'inputBinding': {'prefix': '-k'}, 'type': ['null', 'int']}, {'id': 'mm_penalty', 'inputBinding': {'prefix': '-B'}, 'type': ['null', 'int']}, {'id': 'rg_line', 'inputBinding': {'prefix': '-R'}, 'type': ['null', 'string']}, {'id': 'seed_split_ratio', 'inputBinding': {'prefix': '-r'}, 'type': ['null', 'float']}, {'id': 'threads', 'inputBinding': {'prefix': '-t'}, 'type': ['null', 'int']}, {'id': 'unpair_pen', 'inputBinding': {'prefix': '-U'}, 'type': ['null', 'int']}, {'id': 'verbose_level', 'inputBinding': {'prefix': '-v'}, 'type': ['null', 'int']}, {'id': 'z_dropoff', 'inputBinding': {'prefix': '-d'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'reads_stdout', 'format': 'http://edamontology.org/format_2573', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/bwa:0.7.17--ha92aebf_3'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bwa', 'version': ['0.7.17'], 'specs': ['https://identifiers.org/biotools/bwa']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa', 'mem']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "unsorted_reads.sam",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "bwa/BWA-Mem2-index.cwl",
    "sha": "2f2c65639fe8c291b9ca39c4e371be3c07a958fe",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bwa/BWA-Mem2-index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.1\nclass: CommandLineTool\n\ninputs:\n  sequences:\n    type: File\n    format: edam:format_1929  # FASTA\n \nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bwa-mem2:2.2.1--hd03093a_2\n  SoftwareRequirement:\n    packages:\n      bwa-mem2:\n        version: [ 2.2.1 ]                                                      \n        specs: [ https://identifiers.org/biotools/bwa-mem2 ]\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing:\n      - entry: $(inputs.sequences)  \n   \nbaseCommand: [bwa-mem2, index]\n\narguments:\n  - $(inputs.sequences)\n\noutputs:\n  indexed_sequences:\n    type: File\n    format: edam:format_1929  # FASTA\n    outputBinding:\n      glob: $(inputs.sequences.basename)\n    secondaryFiles:\n      - .bwt.2bit.64\n      - .ann\n      - .amb\n      - .pac\n      - \".0123\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'sequences', 'format': 'http://edamontology.org/format_1929', 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'indexed_sequences', 'secondaryFiles': [{'pattern': '.bwt.2bit.64'}, {'pattern': '.ann'}, {'pattern': '.amb'}, {'pattern': '.pac'}, {'pattern': '.0123'}], 'format': 'http://edamontology.org/format_1929', 'type': 'File', 'outputBinding': {'glob': '$(inputs.sequences.basename)'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/bwa-mem2:2.2.1--hd03093a_2'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bwa-mem2', 'version': ['2.2.1'], 'specs': ['https://identifiers.org/biotools/bwa-mem2']}]}]",
    "cwl_cwlVersion": "v1.1",
    "cwl_baseCommand": "['bwa-mem2', 'index']",
    "cwl_arguments": "['$(inputs.sequences)']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': [{'entry': '$(inputs.sequences)'}]}]",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bwa/BWA-Mem2-paired.cwl",
    "sha": "73478b2eb825230ac548be6f52b51971c83018ab",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bwa/BWA-Mem2-paired.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.2\nclass: Workflow\n\nlabel: |\n  map medium and long reads (greater than 100 bp) against reference genome\n\ninputs:\n  reference_genome:\n    type: File\n    label: \"Reference genome sequences, optionally already indexed for BWA-Mem2.\"\n    format: edam:format_1929 # FASTA\n    secondaryFiles:\n     - .bwt.2bit.64?\n     - .ann?\n     - .amb?\n     - .pac?\n     - \".0123?\"\n  paired_reads_1:\n    type: File\n    label: \"First (forward) set of the paired reads\"\n    format:\n       - edam:format_1929 # FASTA\n       - edam:format_1932 # FASTQ-sanger\n  paired_reads_2:\n    type: File\n    label: \"Second (reverse) set of the paired reads\"\n    format:\n       - edam:format_1929 # FASTA\n       - edam:format_1932 # FASTQ-sanger\n  do_auto_name:\n    type: boolean\n    default: False\n    label: \"Auto-assign read groups\"\n    doc: \"If true, use the file name to automatically assign the read groups value.\"\n  read_group:\n    type: ReadGroupType.yml#ReadGroupDetails?\n    label: \"Specify read group details manually.\"\n  sort_mode:\n    type:\n      type: enum\n      symbols: [ coordinate, name, unsorted ]\n    label: How to sort the alignments, if at all\n    doc: |\n      * coordinate: Sort by chromosomal coordinates\n      * name: Sort by read names  (i.e., the QNAME field)\n      * unsorted: Not sorted (sorted as input)\n    default: coordinate\n\noutputs:\n  alignments:\n    type: File\n    format: edam:format_2572  # BAM\n    label: \"Alignments of the reads to the references genome\"\n    outputSource: [ sort/sorted_alignments, convert_unsorted_alignments_to_bam/bam ]\n    pickValue: the_only_non_null\n\nsteps:\n  index_genome:\n    run: BWA-Mem2-index.cwl\n    label: \"Index the reference genome, if it isn't already indexed\"\n    in:\n      sequences: reference_genome\n    when: |\n      $(inputs.sequences.secondaryFiles !== undefined)\n    out: [ indexed_sequences ]\n  compute_read_group_header:\n    run: ReadGroup.cwl\n    when: $(inputs.do_auto_name !== null || inputs.details !== null)\n    in:\n      do_auto_name: do_auto_name\n      details: read_group\n      input1: paired_reads_1\n      input2: paired_reads_2\n    out: [ read_group_name ]\n  align:\n    run: BWA-Mem2.cwl\n    in:\n      reference_genome:\n        source: [ index_genome/indexed_sequences, reference_genome ]\n        pickValue: first_non_null\n      reads: paired_reads_1\n      paired_reads_2: paired_reads_2\n      read_group_header_line: compute_read_group_header/read_group_name\n    out: [ aligned_reads ]\n  sort:\n    run: ../samtools/samtools_sort.cwl\n    when: $(inputs.sort_mode !== \"unsorted\")\n    label: \"Sort the reads, if requested\"\n    in:\n      sort_mode: sort_mode\n      by_name:\n        source: sort_mode\n        valueFrom: '$(self === \"name\" ? true : false)'\n      unsorted_alignments: align/aligned_reads\n      force_format:\n        default: BAM\n    out: [ sorted_alignments ]\n  convert_unsorted_alignments_to_bam:\n    run: ../samtools/samtools_view_sam2bam.cwl\n    when: $(inputs.sort_mode === \"unsorted\")\n    label: \"If not sorting the reads; convert textual alignments (SAM) to binary (BAM) format\"\n    in:\n      sort_mode: sort_mode\n      sam: align/aligned_reads \n    out: [ bam ]\n\nrequirements:\n  MultipleInputFeatureRequirement: {}\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SchemaDefRequirement:\n    types:\n      - $import: ReadGroupType.yml\n \n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_validation_error": "../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:2:1:     Object `` is not\n                                                                                           valid because:\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:108:1:   * the\n                                                                                             `requirements`\n                                                                                             field is not valid\n                                                                                             because:\n                                                                                               Expected a\n                                                                                               <class 'NoneType'>\n                                                                                               but got list\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:58:1:     * the `steps`\n                                                                                             field is not valid\n                                                                                             because:\n                                                                                               array item is\n                                                                                               invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:76:3:         checking\n                                                                                                 object `#align`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:77:5:           the `run`\n                                                                                                   field is not valid\n                                                                                                   because:\n                                                                                                     contains\n                                                                                                     undefined reference\n                                                                                                     to\n                                                                                                     `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/BWA-Mem2.cwl`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:58:1:       array item is\n                                                                                               invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:67:3:         checking\n                                                                                                 object\n                                                                                                 `#compute_read_group_header`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:68:5:           the `run`\n                                                                                                   field is not valid\n                                                                                                   because:\n                                                                                                     contains\n                                                                                                     undefined reference\n                                                                                                     to\n                                                                                                     `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/ReadGroup.cwl`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:58:1:       array item is\n                                                                                               invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:99:3:         checking\n                                                                                                 object\n                                                                                                 `#convert_unsorted_alignments_to_bam`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:100:5:         the `run`\n                                                                                                   field is not valid\n                                                                                                   because:\n                                                                                                     contains\n                                                                                                     undefined reference\n                                                                                                     to\n                                                                                                     `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/samtools/samtools_view_sam2bam.cwl`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:58:1:       array item is\n                                                                                               invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:59:3:         checking\n                                                                                                 object\n                                                                                                 `#index_genome`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:60:5:           the `run`\n                                                                                                   field is not valid\n                                                                                                   because:\n                                                                                                     contains\n                                                                                                     undefined reference\n                                                                                                     to\n                                                                                                     `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/BWA-Mem2-index.cwl`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:58:1:       array item is\n                                                                                               invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:86:3:         checking\n                                                                                                 object `#sort`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:87:5:           the `run`\n                                                                                                   field is not valid\n                                                                                                   because:\n                                                                                                     contains\n                                                                                                     undefined reference\n                                                                                                     to\n                                                                                                     `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/samtools/samtools_sort.cwl`"
  },
  {
    "path": "bwa/BWA-Mem2-single.cwl",
    "sha": "edb655da1af5cb75617433bc60d40e1785606f97",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bwa/BWA-Mem2-single.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.2\nclass: Workflow\n\nlabel: |\n  map medium and long reads (> 100 bp) against reference genome\n\ninputs:\n  reference_genome:\n    type: File\n    label: \"Reference genome sequences, optionally already indexed for BWA-Mem2.\"\n    format: edam:format_1929 # FASTA\n    secondaryFiles:\n     - .bwt.2bit.64?\n     - .ann?\n     - .amb?\n     - .pac?\n     - \".0123?\"\n  reads:\n    type: File\n    label: \"Sequences to map to the reference genome.\"\n    format:\n       - edam:format_1929 # FASTA\n       - edam:format_1932 # FASTQ-sanger\n  do_auto_name:\n    type: boolean\n    default: False\n    label: \"Auto-assign read groups\"\n    doc: \"If true, use the file name to automatically assign the read groups value.\"\n  read_group:\n    type: ReadGroupType.yml#ReadGroupDetails?\n    label: \"Specify read group details manually.\"\n  sort_mode:\n    type:\n      type: enum\n      symbols: [ coordinate, name, unsorted ]\n    label: How to sort the alignments, if at all\n    doc: |\n      * coordinate: Sort by chromosomal coordinates\n      * name: Sort by read names  (i.e., the QNAME field)\n      * unsorted: Not sorted (sorted as input)\n    default: coordinate\n\noutputs:\n  alignments:\n    type: File\n    format: edam:format_2572  # BAM\n    label: \"Alignments of the reads to the references genome\"\n    outputSource: [ sort/sorted_alignments, convert_unsorted_alignments_to_bam/bam ]\n    pickValue: the_only_non_null\n\nsteps:\n  index_genome:\n    run: BWA-Mem2-index.cwl\n    label: \"Index the reference genome, if it isn't already indexed\"\n    in:\n      sequences: reference_genome\n    when: |\n      $(inputs.sequences.secondaryFiles !== undefined)\n    out: [ indexed_sequences ]\n  compute_read_group_header:\n    run: ReadGroup.cwl\n    when: $(inputs.do_auto_name !== null || inputs.details !== null)\n    in:\n      do_auto_name: do_auto_name\n      details: read_group\n      input1: reads\n    out: [ read_group_name ]\n  align:\n    run: BWA-Mem2.cwl\n    in:\n      reference_genome:\n        source: [ index_genome/indexed_sequences, reference_genome ]\n        pickValue: first_non_null\n      reads: reads\n      read_group_header_line: compute_read_group_header/read_group_name\n    out: [ aligned_reads ]\n  sort:\n    run: ../samtools/samtools_sort.cwl\n    when: $(inputs.sort_mode !== \"unsorted\")\n    label: \"Sort the reads, if requested\"\n    in:\n      sort_mode: sort_mode\n      by_name:\n        source: sort_mode\n        valueFrom: '$(self === \"name\" ? true : false)'\n      unsorted_alignments: align/aligned_reads\n      force_format:\n        default: BAM\n    out: [ sorted_alignments ]\n  convert_unsorted_alignments_to_bam:\n    run: ../samtools/samtools_view_sam2bam.cwl\n    when: $(inputs.sort_mode === \"unsorted\")\n    label: \"If not sorting the reads; convert textual alignments (SAM) to binary (BAM) format\"\n    in:\n      sort_mode: sort_mode\n      sam: align/aligned_reads \n    out: [ bam ]\n\nrequirements:\n  MultipleInputFeatureRequirement: {}\n  InlineJavascriptRequirement: {}\n  StepInputExpressionRequirement: {}\n  SchemaDefRequirement:\n    types:\n      - $import: ReadGroupType.yml\n \n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_validation_error": "../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:2:1:     Object `` is not\n                                                                                           valid because:\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:100:1:   * the\n                                                                                             `requirements`\n                                                                                             field is not valid\n                                                                                             because:\n                                                                                               Expected a\n                                                                                               <class 'NoneType'>\n                                                                                               but got list\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:52:1:     * the `steps`\n                                                                                             field is not valid\n                                                                                             because:\n                                                                                               array item is\n                                                                                               invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:69:3:         checking\n                                                                                                 object `#align`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:70:5:           the `run`\n                                                                                                   field is not valid\n                                                                                                   because:\n                                                                                                     contains\n                                                                                                     undefined reference\n                                                                                                     to\n                                                                                                     `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/BWA-Mem2.cwl`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:52:1:       array item is\n                                                                                               invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:61:3:         checking\n                                                                                                 object\n                                                                                                 `#compute_read_group_header`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:62:5:           the `run`\n                                                                                                   field is not valid\n                                                                                                   because:\n                                                                                                     contains\n                                                                                                     undefined reference\n                                                                                                     to\n                                                                                                     `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/ReadGroup.cwl`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:52:1:       array item is\n                                                                                               invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:91:3:         checking\n                                                                                                 object\n                                                                                                 `#convert_unsorted_alignments_to_bam`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:92:5:           the `run`\n                                                                                                   field is not valid\n                                                                                                   because:\n                                                                                                     contains\n                                                                                                     undefined reference\n                                                                                                     to\n                                                                                                     `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/samtools/samtools_view_sam2bam.cwl`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:52:1:       array item is\n                                                                                               invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:53:3:         checking\n                                                                                                 object\n                                                                                                 `#index_genome`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:54:5:           the `run`\n                                                                                                   field is not valid\n                                                                                                   because:\n                                                                                                     contains\n                                                                                                     undefined reference\n                                                                                                     to\n                                                                                                     `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/BWA-Mem2-index.cwl`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:52:1:       array item is\n                                                                                               invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:78:3:         checking\n                                                                                                 object `#sort`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:79:5:           the `run`\n                                                                                                   field is not valid\n                                                                                                   because:\n                                                                                                     contains\n                                                                                                     undefined reference\n                                                                                                     to\n                                                                                                     `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/samtools/samtools_sort.cwl`"
  },
  {
    "path": "bwa/BWA-Mem2.cwl",
    "sha": "92953d9ee2590274409f7954b4c9f7c79185b636",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bwa/BWA-Mem2.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: |\n  map medium and long reads (> 100 bp) against reference genome\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/bwa-mem2:2.2.1--hd03093a_2\n  SoftwareRequirement:\n    packages:\n      bwa-mem2:\n        version: [ 2.2.1 ]\n        specs: [ https://identifiers.org/biotools/bwa-mem2 ]\n\nbaseCommand: [ bwa-mem2, mem ]\n\ninputs:\n  reference_genome:\n    type: File\n    format: edam:format_1929 # FASTA\n    secondaryFiles:\n     - .bwt.2bit.64\n     - .ann\n     - .amb\n     - .pac\n     - \".0123\"\n    inputBinding:\n      position: 1\n  reads:\n    type: File\n    label: \"First (forward) set of reads (or unpaired reads).\"\n    format:\n       - edam:format_1929 # FASTA\n       - edam:format_1932 # FASTQ-sanger\n    inputBinding:\n      position: 2\n  paired_reads_2:\n    type: File?\n    label: \"Second (reverse) set of reads (if using paired reads).\"\n    format:\n       - edam:format_1929 # FASTA\n       - edam:format_1932 # FASTQ-sanger\n    inputBinding:\n      position: 3\n  read_group_header_line:\n    type: string?\n    doc: |\n      read group header line such as '@RG\\tID:foo\\tSM:bar'\n    inputBinding:\n      prefix: \"-R\"\n\n      \narguments:\n - -t\n - $(runtime.cores)\n - -v\n - \"1\" # Verbosity is set to 1 (errors only)\n\nstdout: |\n ${\n    var filename = inputs.reads.nameroot;\n    if (inputs.paired_reads_2) {\n      filename += \"_\" + inputs.paired_reads_2.nameroot;\n    }\n    return filename += \".sam\"\n  }\n\noutputs:\n  aligned_reads:\n    type: File\n    format: edam:format_2573  # SAM\n    outputBinding:\n      glob: \"*.sam\"\n    \n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'paired_reads_2', 'label': 'Second (reverse) set of reads (if using paired reads).', 'format': ['http://edamontology.org/format_1929', 'http://edamontology.org/format_1932'], 'inputBinding': {'position': 3}, 'type': ['null', 'File']}, {'id': 'read_group_header_line', 'doc': \"read group header line such as '@RG\\\\tID:foo\\\\tSM:bar'\\n\", 'inputBinding': {'prefix': '-R'}, 'type': ['null', 'string']}, {'id': 'reads', 'label': 'First (forward) set of reads (or unpaired reads).', 'format': ['http://edamontology.org/format_1929', 'http://edamontology.org/format_1932'], 'inputBinding': {'position': 2}, 'type': 'File'}, {'id': 'reference_genome', 'secondaryFiles': ['.bwt.2bit.64', '.ann', '.amb', '.pac', '.0123'], 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'position': 1}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'aligned_reads', 'outputBinding': {'glob': '*.sam'}, 'format': 'http://edamontology.org/format_2573', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/bwa-mem2:2.2.1--hd03093a_2'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bwa-mem2', 'version': ['2.2.1'], 'specs': ['https://identifiers.org/biotools/bwa-mem2']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bwa-mem2', 'mem']",
    "cwl_arguments": "['-t', '$(runtime.cores)', '-v', '1']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": null,
    "cwl_stdout": "${\n   var filename = inputs.reads.nameroot;\n   if (inputs.paired_reads_2) {\n     filename += \"_\" + inputs.paired_reads_2.nameroot;\n   }\n   return filename += \".sam\"\n }\n",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "map medium and long reads (> 100 bp) against reference genome\n",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "bwa/ReadGroup.cwl",
    "sha": "85ba2f31fa6c6c8cfbb0a396ee459814ffb7b8fb",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bwa/ReadGroup.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: ExpressionTool\n\n# Inspired by https://github.com/galaxyproject/tools-iuc/blob/master/macros/read_group_macros.xml\n\nrequirements:\n  SchemaDefRequirement:\n    types:\n      - $import: ReadGroupType.yml\n  InlineJavascriptRequirement:\n    expressionLib:\n     - |\n         function clean(name) {\n           return name.replace(/[^\\w\\-_\\.]/, '_');\n         };\n         function read_group_name_default(input1, input2) {\n           // input1: File\n           // input2: File?\n           var input_name1 = clean(input1.nameroot);\n           if (input2 === null) {\n             return input_name1;\n           }\n           var input_name2 = clean(input2.nameroot);\n           var common_prefix = \"\";\n           for (var index = 0; index < input_name1.length; index++) {\n             if (input_name1.charAt(index) == input_name2.charAt(index)) {\n              common_prefix += input_name1.charAt(index);\n             }\n           }\n           if (common_prefix.length > 3) {\n             return common_prefix;\n           }\n           return input_name1;\n         };\n\ninputs:\n  input1: File\n  input2: File?\n  details: ReadGroupType.yml#ReadGroupDetails?\n\n# '@RG\\tID:bwa-mem-fastq'\n\nexpression: |\n  ${\n    var rg_auto_name = read_group_name_default(inputs.input1, inputs.input2);\n    var rg_id = rg_auto_name;\n    var rg_string = \"\";\n    if (inputs.details) {\n      rg_string = \"@RG\\\\tID:\" + inputs.details.identifier;\n      rg_string += \"\\\\tPL:\" + inputs.details.platform;\n      rg_string += \"\\\\tLB:\" + inputs.details.library;\n    } else {\n      rg_string = \"@RG\\\\tID:\" + rg_id;\n    }\n    return {\"read_group_name\": rg_string};\n   }\n\noutputs:\n  read_group_name: string\n",
    "cwl_validation_error": "../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:2:1: Object `` is not\n                                                                                         valid because:\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:7:1:   the\n                                                                                           `requirements`\n                                                                                           field is not valid\n                                                                                           because:\n                                                                                             Expected a\n                                                                                             <class 'NoneType'>\n                                                                                             but got list"
  },
  {
    "path": "bzip2/bzip2_compress.cwl",
    "sha": "744e5c4da54d05674687c3a2f958abd6663f8c95",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/bzip2/bzip2_compress.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n InitialWorkDirRequirement:\n   listing:\n     - entry: inputs.input_file\n       entryname: inputs.input_file.basename\n       writable: true\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/scidap:v0.0.2\n\ninputs:\n\n  input_file:\n    type:\n      - File\n    inputBinding:\n      position: 1\n    doc: |\n      File to be compressed\n\n  fast:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 2\n    doc: |\n      Set block size to 100k\n\n  best:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 3\n    doc: |\n      Set block size to 900k\n\noutputs:\n\n  output_file:\n    type:\n      - File\n    outputBinding:\n      glob: $(inputs.input_file.basename).bz2\n\nbaseCommand: [bzip2]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"bzip2_compress\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool compresses `input_file` to `*.bz2`.\n  Output file has the same basename, as input file, but with updated `.bz2` extension. `bzip2` exports compressed\n  output file alognside the input file. To prevent tool from failing, `input_file` should be staged into output\n  directory using `\"writable\": true`. Setting `writable: true` makes cwl-runner to make a copy of input file and\n  mount it to docker container with `rw` mode as part of `--workdir` (if set to false, the file staged into output\n  directory will be mounted to docker container separately with `ro` mode)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'best', 'doc': 'Set block size to 900k\\n', 'inputBinding': {'position': 3}, 'type': ['null', 'boolean']}, {'id': 'fast', 'doc': 'Set block size to 100k\\n', 'inputBinding': {'position': 2}, 'type': ['null', 'boolean']}, {'id': 'input_file', 'doc': 'File to be compressed\\n', 'inputBinding': {'position': 1}, 'type': ['File']}]",
    "cwl_outputs": "[{'id': 'output_file', 'outputBinding': {'glob': '$(inputs.input_file.basename).bz2'}, 'type': ['File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/scidap:v0.0.2'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bzip2']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': [{'entryname': 'inputs.input_file.basename', 'entry': 'inputs.input_file', 'writable': True}]}]",
    "cwl_doc": "Tool compresses `input_file` to `*.bz2`.\nOutput file has the same basename, as input file, but with updated `.bz2` extension. `bzip2` exports compressed\noutput file alognside the input file. To prevent tool from failing, `input_file` should be staged into output\ndirectory using `\"writable\": true`. Setting `writable: true` makes cwl-runner to make a copy of input file and\nmount it to docker container with `rw` mode as part of `--workdir` (if set to false, the file staged into output\ndirectory will be mounted to docker container separately with `ro` mode)\n",
    "cwl_stdout": null,
    "cwl_s:name": "bzip2_compress",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cellranger/cellranger-aggr.cwl",
    "sha": "b60a76e1c39f2955802b71c221c2515aa56e9160",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/cellranger/cellranger-aggr.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var get_label = function(i) {\n          var rootname = inputs.molecule_info_h5[i].basename.split('.').slice(0,-1).join('.');\n          rootname = (rootname==\"\")?inputs.molecule_info_h5[i].basename:rootname;\n          return inputs.gem_well_labels?inputs.gem_well_labels[i].replace(/,/g, \"_\"):rootname;\n      };\n  InitialWorkDirRequirement:\n    listing: |\n      ${\n        var entry = \"library_id,molecule_h5\\n\"\n        for (var i=0; i < inputs.molecule_info_h5.length; i++){\n          entry += get_label(i) + \",\" + inputs.molecule_info_h5[i].path + \"\\n\"\n        }\n        return [{\n          \"entry\": entry,\n          \"entryname\": \"metadata.csv\"\n        }];\n      }\nhints:\n  DockerRequirement:\n    dockerPull: cumulusprod/cellranger:4.0.0\n\ninputs:  \n  molecule_info_h5:\n    type: File[]\n    format: edam:format_3590  # HDF5\n    doc: |\n      Array of molecule-level information files in HDF5 format.\n      Outputs from \"cellranger count\" command\n  \n  gem_well_labels:\n    type:\n    - \"null\"\n    - string[]\n    doc: |\n      Array of GEM well identifiers to be used for labeling purposes only.\n      If not provided use rootnames of files from the molecule_info_h5 input\n\n  normalization_mode:\n    type:\n    - \"null\"\n    - type: enum\n      name: \"normalization\"\n      symbols: [\"none\", \"mapped\"]\n    inputBinding:\n      position: 5\n      prefix: \"--normalize\"\n    doc: |\n      Library depth normalization mode: mapped, none.\n      Default: mapped\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: \"--localcores\"\n    doc: |\n      Set max cores the pipeline may request at one time.\n      Default: all available\n\n  memory_limit:\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: \"--localmem\"\n    doc: |\n      Set max GB the pipeline may request at one time\n      Default: all available\n\n  virt_memory_limit:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: \"--localvmem\"\n    doc: |\n      Set max virtual address space in GB for the pipeline\n      Default: all available\n\n\noutputs:\n\n  web_summary_report:\n    type: File\n    format: iana:text/html\n    outputBinding:\n      glob: \"aggregated/outs/web_summary.html\"\n    doc: |\n      Aggregated run summary metrics and charts in HTML format\n\n  metrics_summary_report_json:\n    type: File\n    format: iana:application/json\n    outputBinding:\n      glob: \"aggregated/outs/summary.json\"\n    doc: |\n      Aggregated run summary metrics in JSON format\n  \n  secondary_analysis_report_folder:\n    type: Directory\n    outputBinding:\n      glob: \"aggregated/outs/analysis\"\n    doc: |\n      Folder with secondary analysis results including dimensionality reduction,\n      cell clustering, and differential expression for aggregated results\n\n  filtered_feature_bc_matrix_folder:\n    type: Directory\n    outputBinding:\n      glob: \"aggregated/outs/filtered_feature_bc_matrix\"\n    doc: |\n      Folder with aggregated filtered feature-barcode matrices containing only cellular barcodes in MEX format\n\n  filtered_feature_bc_matrix_h5:\n    type: File\n    format: edam:format_3590  # HDF5\n    outputBinding:\n      glob: \"aggregated/outs/filtered_feature_bc_matrix.h5\"\n    doc: |\n      Aggregated filtered feature-barcode matrices containing only cellular barcodes in HDF5 format\n\n  raw_feature_bc_matrices_folder:\n    type: Directory\n    outputBinding:\n      glob: \"aggregated/outs/raw_feature_bc_matrix\"\n    doc: |\n      Folder with aggregated unfiltered feature-barcode matrices containing all barcodes in MEX format\n\n  raw_feature_bc_matrices_h5:\n    type: File\n    format: edam:format_3590  # HDF5\n    outputBinding:\n      glob: \"aggregated/outs/raw_feature_bc_matrix.h5\"\n    doc: |\n      Aggregated unfiltered feature-barcode matrices containing all barcodes in HDF5 format\n\n  aggregation_metadata:\n    type: File\n    format: iana:text/csv\n    outputBinding:\n      glob: \"aggregated/outs/aggregation.csv\"\n    doc: |\n      Copy of the input aggregation CSV file\n\n  loupe_browser_track:\n    type: File\n    outputBinding:\n      glob: \"aggregated/outs/cloupe.cloupe\"\n    doc: |\n      Loupe Browser visualization and analysis file for aggregated results\n\n  stdout_log:\n    type: stdout\n\n  stderr_log:\n    type: stderr\n\n\nbaseCommand: [\"cellranger\", \"aggr\", \"--disable-ui\", \"--id\", \"aggregated\", \"--csv\", \"metadata.csv\"]\n\n\nstdout: cellranger_aggr_stdout.log\nstderr: cellranger_aggr_stderr.log\n\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"Cellranger aggr - aggregates data from multiple Cellranger runs\"\ns:alternateName: \"Cellranger aggr takes a list of cellranger count output files and produces a single feature-barcode matrix containing all the data\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  Tool calls \"cellranger aggr\" command to combine output files from \"cellranger count\"\n  (the molecule_info.h5 file from each run) into a single feature-barcode matrix containing\n  all the data. When combining multiple GEM wells, the barcode sequences for each channel\n  are distinguished by a GEM well suffix appended to the barcode sequence. Each GEM well is\n  a physically distinct set of GEM partitions, but draws barcode sequences randomly from the\n  pool of valid barcodes, known as the barcode whitelist. To keep the barcodes unique when\n  aggregating multiple libraries, we append a small integer identifying the GEM well to the\n  barcode nucleotide sequence, and use that nucleotide sequence plus ID as the unique identifier\n  in the feature-barcode matrix. For example, AGACCATTGAGACTTA-1 and AGACCATTGAGACTTA-2 are\n  distinct cell barcodes from different GEM wells, despite having the same barcode nucleotide\n  sequence. This number, which tells us which GEM well this barcode sequence came from, is\n  called the GEM well suffix. The numbering of the GEM wells will reflect the order that the\n  GEM wells were provided in the \"molecule_info_h5\" and \"gem_well_labels\" inputs.\n\n  When combining data from multiple GEM wells, the \"cellranger aggr\" pipeline automatically\n  equalizes the average read depth per cell between groups before merging. This approach avoids\n  artifacts that may be introduced due to differences in sequencing depth. It is possible to turn\n  off normalization or change the way normalization is done through the \"normalization_mode\"\n  input. The \"none\" value may be appropriate if you want to maximize sensitivity and plan to deal\n  with depth normalization in a downstream step.\n\n  Parameters set by default:\n  --disable-ui - no need in any UI when running in Docker container\n  --id - hardcoded to `aggregated` as we want to return the content of the\n         outputs folder as separate outputs\n\n  Skipped parameters:\n  --nosecondary\n  --dry\n  --noexit\n  --nopreflight\n  --description\n  --jobmode\n  --mempercore\n  --maxjobs\n  --jobinterval\n  --overrides\n  --uiport\n\n  Not supported features:\n  - Batch correction caused by different versions of the Single Cell Gene Expression chemistry is\n    not supported as the generated metadata file doesn't include \"batch\" field.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'gem_well_labels', 'doc': 'Array of GEM well identifiers to be used for labeling purposes only.\\nIf not provided use rootnames of files from the molecule_info_h5 input\\n', 'type': ['null', {'items': 'string', 'type': 'array'}]}, {'id': 'memory_limit', 'doc': 'Set max GB the pipeline may request at one time\\nDefault: all available\\n', 'inputBinding': {'position': 7, 'prefix': '--localmem'}, 'type': ['null', 'int']}, {'id': 'molecule_info_h5', 'doc': 'Array of molecule-level information files in HDF5 format.\\nOutputs from \"cellranger count\" command\\n', 'format': 'http://edamontology.org/format_3590', 'type': {'items': 'File', 'type': 'array'}}, {'id': 'normalization_mode', 'doc': 'Library depth normalization mode: mapped, none.\\nDefault: mapped\\n', 'inputBinding': {'position': 5, 'prefix': '--normalize'}, 'type': ['null', {'name': 'normalization', 'symbols': ['none', 'mapped'], 'type': 'enum'}]}, {'id': 'threads', 'doc': 'Set max cores the pipeline may request at one time.\\nDefault: all available\\n', 'inputBinding': {'position': 6, 'prefix': '--localcores'}, 'type': ['null', 'int']}, {'id': 'virt_memory_limit', 'doc': 'Set max virtual address space in GB for the pipeline\\nDefault: all available\\n', 'inputBinding': {'position': 8, 'prefix': '--localvmem'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'aggregation_metadata', 'doc': 'Copy of the input aggregation CSV file\\n', 'outputBinding': {'glob': 'aggregated/outs/aggregation.csv'}, 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'type': 'File'}, {'id': 'filtered_feature_bc_matrix_folder', 'doc': 'Folder with aggregated filtered feature-barcode matrices containing only cellular barcodes in MEX format\\n', 'outputBinding': {'glob': 'aggregated/outs/filtered_feature_bc_matrix'}, 'type': 'Directory'}, {'id': 'filtered_feature_bc_matrix_h5', 'doc': 'Aggregated filtered feature-barcode matrices containing only cellular barcodes in HDF5 format\\n', 'outputBinding': {'glob': 'aggregated/outs/filtered_feature_bc_matrix.h5'}, 'format': 'http://edamontology.org/format_3590', 'type': 'File'}, {'id': 'loupe_browser_track', 'doc': 'Loupe Browser visualization and analysis file for aggregated results\\n', 'outputBinding': {'glob': 'aggregated/outs/cloupe.cloupe'}, 'type': 'File'}, {'id': 'metrics_summary_report_json', 'doc': 'Aggregated run summary metrics in JSON format\\n', 'outputBinding': {'glob': 'aggregated/outs/summary.json'}, 'format': 'https://www.iana.org/assignments/media-types/application/json', 'type': 'File'}, {'id': 'raw_feature_bc_matrices_folder', 'doc': 'Folder with aggregated unfiltered feature-barcode matrices containing all barcodes in MEX format\\n', 'outputBinding': {'glob': 'aggregated/outs/raw_feature_bc_matrix'}, 'type': 'Directory'}, {'id': 'raw_feature_bc_matrices_h5', 'doc': 'Aggregated unfiltered feature-barcode matrices containing all barcodes in HDF5 format\\n', 'outputBinding': {'glob': 'aggregated/outs/raw_feature_bc_matrix.h5'}, 'format': 'http://edamontology.org/format_3590', 'type': 'File'}, {'id': 'secondary_analysis_report_folder', 'doc': 'Folder with secondary analysis results including dimensionality reduction,\\ncell clustering, and differential expression for aggregated results\\n', 'outputBinding': {'glob': 'aggregated/outs/analysis'}, 'type': 'Directory'}, {'id': 'stderr_log', 'type': 'stderr'}, {'id': 'stdout_log', 'type': 'stdout'}, {'id': 'web_summary_report', 'doc': 'Aggregated run summary metrics and charts in HTML format\\n', 'outputBinding': {'glob': 'aggregated/outs/web_summary.html'}, 'format': 'https://www.iana.org/assignments/media-types/text/html', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'cumulusprod/cellranger:4.0.0'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cellranger', 'aggr', '--disable-ui', '--id', 'aggregated', '--csv', 'metadata.csv']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': '${\\n  var entry = \"library_id,molecule_h5\\\\n\"\\n  for (var i=0; i < inputs.molecule_info_h5.length; i++){\\n    entry += get_label(i) + \",\" + inputs.molecule_info_h5[i].path + \"\\\\n\"\\n  }\\n  return [{\\n    \"entry\": entry,\\n    \"entryname\": \"metadata.csv\"\\n  }];\\n}\\n'}, {'class': 'InlineJavascriptRequirement', 'expressionLib': ['var get_label = function(i) { var rootname = inputs.molecule_info_h5[i].basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); rootname = (rootname==\"\")?inputs.molecule_info_h5[i].basename:rootname; return inputs.gem_well_labels?inputs.gem_well_labels[i].replace(/,/g, \"_\"):rootname; };']}]",
    "cwl_doc": "Tool calls \"cellranger aggr\" command to combine output files from \"cellranger count\"\n(the molecule_info.h5 file from each run) into a single feature-barcode matrix containing\nall the data. When combining multiple GEM wells, the barcode sequences for each channel\nare distinguished by a GEM well suffix appended to the barcode sequence. Each GEM well is\na physically distinct set of GEM partitions, but draws barcode sequences randomly from the\npool of valid barcodes, known as the barcode whitelist. To keep the barcodes unique when\naggregating multiple libraries, we append a small integer identifying the GEM well to the\nbarcode nucleotide sequence, and use that nucleotide sequence plus ID as the unique identifier\nin the feature-barcode matrix. For example, AGACCATTGAGACTTA-1 and AGACCATTGAGACTTA-2 are\ndistinct cell barcodes from different GEM wells, despite having the same barcode nucleotide\nsequence. This number, which tells us which GEM well this barcode sequence came from, is\ncalled the GEM well suffix. The numbering of the GEM wells will reflect the order that the\nGEM wells were provided in the \"molecule_info_h5\" and \"gem_well_labels\" inputs.\n\nWhen combining data from multiple GEM wells, the \"cellranger aggr\" pipeline automatically\nequalizes the average read depth per cell between groups before merging. This approach avoids\nartifacts that may be introduced due to differences in sequencing depth. It is possible to turn\noff normalization or change the way normalization is done through the \"normalization_mode\"\ninput. The \"none\" value may be appropriate if you want to maximize sensitivity and plan to deal\nwith depth normalization in a downstream step.\n\nParameters set by default:\n--disable-ui - no need in any UI when running in Docker container\n--id - hardcoded to `aggregated` as we want to return the content of the\n       outputs folder as separate outputs\n\nSkipped parameters:\n--nosecondary\n--dry\n--noexit\n--nopreflight\n--description\n--jobmode\n--mempercore\n--maxjobs\n--jobinterval\n--overrides\n--uiport\n\nNot supported features:\n- Batch correction caused by different versions of the Single Cell Gene Expression chemistry is\n  not supported as the generated metadata file doesn't include \"batch\" field.\n",
    "cwl_stdout": "cellranger_aggr_stdout.log",
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "Cellranger aggr - aggregates data from multiple Cellranger runs",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "cellranger_aggr_stderr.log",
    "cwl_s:alternateName": "Cellranger aggr takes a list of cellranger count output files and produces a single feature-barcode matrix containing all the data",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cellranger/cellranger-arc-aggr.cwl",
    "sha": "d9db4c2338b6a5c103e0011d86cd898b5bf558d9",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/cellranger/cellranger-arc-aggr.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\n\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var get_label = function(i) {\n          var rootname = inputs.gex_molecule_info_h5[i].basename.split('.').slice(0,-1).join('.');\n          rootname = (rootname==\"\")?inputs.gex_molecule_info_h5[i].basename:rootname;\n          return inputs.gem_well_labels?inputs.gem_well_labels[i].replace(/\\t|\\s|\\[|\\]|\\>|\\<|,|\\./g, \"_\"):rootname;\n      };\n  InitialWorkDirRequirement:\n    listing: |\n      ${\n        var entry = \"library_id,atac_fragments,per_barcode_metrics,gex_molecule_info\\n\"\n        for (var i=0; i < inputs.gex_molecule_info_h5.length; i++){\n          entry += get_label(i) + \",\" + inputs.atac_fragments_file[i].path + \",\" + inputs.barcode_metrics_report[i].path + \",\" + inputs.gex_molecule_info_h5[i].path + \"\\n\"\n        }\n        return [{\n          \"entry\": entry,\n          \"entryname\": \"metadata.csv\"\n        }];\n      }\nhints:\n  DockerRequirement:\n    dockerPull: cumulusprod/cellranger-arc:2.0.0\n\ninputs:\n  atac_fragments_file:\n    type: File[]\n    format: iana:text/tab-separated-values\n    secondaryFiles:\n    - .tbi\n    doc: |\n      Array of files containing count and barcode information for every ATAC\n      fragment observed in the experiment in TSV format. Outputs from\n      \"cellranger-arc count\" command.\n\n  barcode_metrics_report:\n    type: File[]\n    doc: |\n      Array of files with the ATAC and GEX read count summaries generated for every\n      barcode observed in the experiment. Outputs from \"cellranger-arc count\" command.\n\n  gex_molecule_info_h5:\n    type: File[]\n    format: edam:format_3590  # HDF5\n    doc: |\n      Array of GEX molecule-level information files in HDF5 format.\n      Outputs from \"cellranger-arc count\" command.\n\n  gem_well_labels:\n    type:\n    - \"null\"\n    - string[]\n    doc: |\n      Array of GEM well identifiers to be used for labeling purposes only.\n      If not provided use rootnames of files from the gex_molecule_info_h5\n      input\n\n  indices_folder:\n    type: Directory\n    inputBinding:\n      position: 5\n      prefix: \"--reference\"\n    doc: |\n      Compatible with Cell Ranger ARC reference folder that includes\n      STAR and BWA indices. Should be generated by \"cellranger-arc mkref\"\n      command\n\n  normalization_mode:\n    type:\n    - \"null\"\n    - type: enum\n      name: \"normalization\"\n      symbols: [\"none\", \"depth\"]\n    inputBinding:\n      position: 6\n      prefix: \"--normalize\"\n    doc: |\n      Library depth normalization mode: depth, none.\n      Default: depth\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: \"--localcores\"\n    doc: |\n      Set max cores the pipeline may request at one time.\n      Default: all available\n\n  memory_limit:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: \"--localmem\"\n    doc: |\n      Set max GB the pipeline may request at one time\n      Default: all available\n\n  virt_memory_limit:\n    type: int?\n    inputBinding:\n      position: 9\n      prefix: \"--localvmem\"\n    doc: |\n      Set max virtual address space in GB for the pipeline\n      Default: all available\n\n\noutputs:\n\n  web_summary_report:\n    type: File\n    format: iana:text/html\n    outputBinding:\n      glob: \"aggregated/outs/web_summary.html\"\n    doc: |\n      Aggregated run summary metrics and charts in HTML format\n\n  metrics_summary_report:\n    type: File\n    format: iana:text/csv\n    outputBinding:\n      glob: \"aggregated/outs/summary.csv\"\n    doc: |\n      Aggregated run summary metrics in CSV format\n\n  atac_fragments_file:\n    type: File\n    format: iana:text/tab-separated-values\n    outputBinding:\n      glob: \"aggregated/outs/atac_fragments.tsv.gz\"\n    secondaryFiles:\n    - .tbi\n    doc: |\n      Count and barcode information for every ATAC fragment observed in the\n      aggregated experiment in TSV format\n\n  atac_peaks_bed_file:\n    type: File\n    format: edam:format_3003  # BED\n    outputBinding:\n      glob: \"aggregated/outs/atac_peaks.bed\"\n    doc: |\n      Locations of open-chromatin regions identified in aggregated experiment\n      (these regions are referred to as \"peaks\")\n\n  atac_peak_annotation_file:\n    type: File\n    format: iana:text/tab-separated-values\n    outputBinding:\n      glob: \"aggregated/outs/atac_peak_annotation.tsv\"\n    doc: |\n      Annotations of peaks based on genomic proximity alone (for aggregated\n      experiment). Note that these are not functional annotations and they\n      do not make use of linkage with GEX data.\n\n  secondary_analysis_report_folder:\n    type: Directory\n    outputBinding:\n      glob: \"aggregated/outs/analysis\"\n    doc: |\n      Folder with secondary analysis results including dimensionality reduction,\n      cell clustering, and differential expression for aggregated results\n\n  filtered_feature_bc_matrix_folder:\n    type: Directory\n    outputBinding:\n      glob: \"aggregated/outs/filtered_feature_bc_matrix\"\n    doc: |\n      Folder with aggregated filtered feature-barcode matrices containing only\n      cellular barcodes in MEX format\n\n  filtered_feature_bc_matrix_h5:\n    type: File\n    format: edam:format_3590  # HDF5\n    outputBinding:\n      glob: \"aggregated/outs/filtered_feature_bc_matrix.h5\"\n    doc: |\n      Aggregated filtered feature-barcode matrices containing only cellular barcodes\n      in HDF5 format\n\n  raw_feature_bc_matrices_folder:\n    type: Directory\n    outputBinding:\n      glob: \"aggregated/outs/raw_feature_bc_matrix\"\n    doc: |\n      Folder with aggregated unfiltered feature-barcode matrices containing all barcodes\n      in MEX format\n\n  raw_feature_bc_matrices_h5:\n    type: File\n    format: edam:format_3590  # HDF5\n    outputBinding:\n      glob: \"aggregated/outs/raw_feature_bc_matrix.h5\"\n    doc: |\n      Aggregated unfiltered feature-barcode matrices containing all barcodes\n      in HDF5 format\n\n  aggregation_metadata:\n    type: File\n    format: iana:text/csv\n    outputBinding:\n      glob: \"aggregated/outs/aggr.csv\"\n    doc: |\n      Copy of the input aggregation CSV file\n\n  loupe_browser_track:\n    type: File\n    outputBinding:\n      glob: \"aggregated/outs/cloupe.cloupe\"\n    doc: |\n      Loupe Browser visualization and analysis file for aggregated results\n\nbaseCommand: [\"cellranger-arc\", \"aggr\", \"--disable-ui\", \"--id\", \"aggregated\", \"--csv\", \"metadata.csv\"]\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"Cellranger ARC aggr - aggregates data from multiple Cellranger ARC runs\"\ns:alternateName: \"Cellranger ARC aggr takes a list of cellranger ARC count output files and produces a single feature-barcode matrix containing all the data\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n\n  Tool calls \"cellranger-arc aggr\" command that takes as input a CSV file specifying a list\n  of cellranger-arc count output files for each GEM well being aggregated and produces a\n  single feature-barcode matrix containing all the data. When combining multiple GEM wells,\n  the barcode sequences for each channel are distinguished by a GEM well suffix appended to\n  the barcode sequence. By default, the reads from each GEM well are subsampled such that all\n  GEM wells have the same effective sequencing depth for both ATAC and gene expression modalities;\n  for the ATAC data it is measured in terms of median unique fragments per cell and for gene\n  expression it is measured in terms of the average number of reads that are confidently mapped\n  to the transcriptome per cell. However, it is possible to turn off this normalization altogether.\n\n  Parameters set by default:\n  --disable-ui - no need in any UI when running in Docker container\n  --id - hardcoded to `aggregated` as we want to return the content of the\n         outputs folder as separate outputs\n\n  Skipped parameters:\n  --nosecondary\n  --dry\n  --noexit\n  --nopreflight\n  --description\n  --peaks\n  --jobmode\n  --mempercore\n  --maxjobs\n  --jobinterval\n  --overrides\n  --uiport\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'atac_fragments_file', 'secondaryFiles': ['.tbi'], 'doc': 'Array of files containing count and barcode information for every ATAC\\nfragment observed in the experiment in TSV format. Outputs from\\n\"cellranger-arc count\" command.\\n', 'format': 'https://www.iana.org/assignments/media-types/text/tab-separated-values', 'type': {'items': 'File', 'type': 'array'}}, {'id': 'barcode_metrics_report', 'doc': 'Array of files with the ATAC and GEX read count summaries generated for every\\nbarcode observed in the experiment. Outputs from \"cellranger-arc count\" command.\\n', 'type': {'items': 'File', 'type': 'array'}}, {'id': 'gem_well_labels', 'doc': 'Array of GEM well identifiers to be used for labeling purposes only.\\nIf not provided use rootnames of files from the gex_molecule_info_h5\\ninput\\n', 'type': ['null', {'items': 'string', 'type': 'array'}]}, {'id': 'gex_molecule_info_h5', 'doc': 'Array of GEX molecule-level information files in HDF5 format.\\nOutputs from \"cellranger-arc count\" command.\\n', 'format': 'http://edamontology.org/format_3590', 'type': {'items': 'File', 'type': 'array'}}, {'id': 'indices_folder', 'doc': 'Compatible with Cell Ranger ARC reference folder that includes\\nSTAR and BWA indices. Should be generated by \"cellranger-arc mkref\"\\ncommand\\n', 'inputBinding': {'position': 5, 'prefix': '--reference'}, 'type': 'Directory'}, {'id': 'memory_limit', 'doc': 'Set max GB the pipeline may request at one time\\nDefault: all available\\n', 'inputBinding': {'position': 8, 'prefix': '--localmem'}, 'type': ['null', 'int']}, {'id': 'normalization_mode', 'doc': 'Library depth normalization mode: depth, none.\\nDefault: depth\\n', 'inputBinding': {'position': 6, 'prefix': '--normalize'}, 'type': ['null', {'name': 'normalization', 'symbols': ['none', 'depth'], 'type': 'enum'}]}, {'id': 'threads', 'doc': 'Set max cores the pipeline may request at one time.\\nDefault: all available\\n', 'inputBinding': {'position': 7, 'prefix': '--localcores'}, 'type': ['null', 'int']}, {'id': 'virt_memory_limit', 'doc': 'Set max virtual address space in GB for the pipeline\\nDefault: all available\\n', 'inputBinding': {'position': 9, 'prefix': '--localvmem'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'aggregation_metadata', 'doc': 'Copy of the input aggregation CSV file\\n', 'outputBinding': {'glob': 'aggregated/outs/aggr.csv'}, 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'type': 'File'}, {'id': 'atac_fragments_file', 'secondaryFiles': ['.tbi'], 'doc': 'Count and barcode information for every ATAC fragment observed in the\\naggregated experiment in TSV format\\n', 'outputBinding': {'glob': 'aggregated/outs/atac_fragments.tsv.gz'}, 'format': 'https://www.iana.org/assignments/media-types/text/tab-separated-values', 'type': 'File'}, {'id': 'atac_peak_annotation_file', 'doc': 'Annotations of peaks based on genomic proximity alone (for aggregated\\nexperiment). Note that these are not functional annotations and they\\ndo not make use of linkage with GEX data.\\n', 'outputBinding': {'glob': 'aggregated/outs/atac_peak_annotation.tsv'}, 'format': 'https://www.iana.org/assignments/media-types/text/tab-separated-values', 'type': 'File'}, {'id': 'atac_peaks_bed_file', 'doc': 'Locations of open-chromatin regions identified in aggregated experiment\\n(these regions are referred to as \"peaks\")\\n', 'outputBinding': {'glob': 'aggregated/outs/atac_peaks.bed'}, 'format': 'http://edamontology.org/format_3003', 'type': 'File'}, {'id': 'filtered_feature_bc_matrix_folder', 'doc': 'Folder with aggregated filtered feature-barcode matrices containing only\\ncellular barcodes in MEX format\\n', 'outputBinding': {'glob': 'aggregated/outs/filtered_feature_bc_matrix'}, 'type': 'Directory'}, {'id': 'filtered_feature_bc_matrix_h5', 'doc': 'Aggregated filtered feature-barcode matrices containing only cellular barcodes\\nin HDF5 format\\n', 'outputBinding': {'glob': 'aggregated/outs/filtered_feature_bc_matrix.h5'}, 'format': 'http://edamontology.org/format_3590', 'type': 'File'}, {'id': 'loupe_browser_track', 'doc': 'Loupe Browser visualization and analysis file for aggregated results\\n', 'outputBinding': {'glob': 'aggregated/outs/cloupe.cloupe'}, 'type': 'File'}, {'id': 'metrics_summary_report', 'doc': 'Aggregated run summary metrics in CSV format\\n', 'outputBinding': {'glob': 'aggregated/outs/summary.csv'}, 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'type': 'File'}, {'id': 'raw_feature_bc_matrices_folder', 'doc': 'Folder with aggregated unfiltered feature-barcode matrices containing all barcodes\\nin MEX format\\n', 'outputBinding': {'glob': 'aggregated/outs/raw_feature_bc_matrix'}, 'type': 'Directory'}, {'id': 'raw_feature_bc_matrices_h5', 'doc': 'Aggregated unfiltered feature-barcode matrices containing all barcodes\\nin HDF5 format\\n', 'outputBinding': {'glob': 'aggregated/outs/raw_feature_bc_matrix.h5'}, 'format': 'http://edamontology.org/format_3590', 'type': 'File'}, {'id': 'secondary_analysis_report_folder', 'doc': 'Folder with secondary analysis results including dimensionality reduction,\\ncell clustering, and differential expression for aggregated results\\n', 'outputBinding': {'glob': 'aggregated/outs/analysis'}, 'type': 'Directory'}, {'id': 'web_summary_report', 'doc': 'Aggregated run summary metrics and charts in HTML format\\n', 'outputBinding': {'glob': 'aggregated/outs/web_summary.html'}, 'format': 'https://www.iana.org/assignments/media-types/text/html', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'cumulusprod/cellranger-arc:2.0.0'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cellranger-arc', 'aggr', '--disable-ui', '--id', 'aggregated', '--csv', 'metadata.csv']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': '${\\n  var entry = \"library_id,atac_fragments,per_barcode_metrics,gex_molecule_info\\\\n\"\\n  for (var i=0; i < inputs.gex_molecule_info_h5.length; i++){\\n    entry += get_label(i) + \",\" + inputs.atac_fragments_file[i].path + \",\" + inputs.barcode_metrics_report[i].path + \",\" + inputs.gex_molecule_info_h5[i].path + \"\\\\n\"\\n  }\\n  return [{\\n    \"entry\": entry,\\n    \"entryname\": \"metadata.csv\"\\n  }];\\n}\\n'}, {'class': 'InlineJavascriptRequirement', 'expressionLib': ['var get_label = function(i) { var rootname = inputs.gex_molecule_info_h5[i].basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); rootname = (rootname==\"\")?inputs.gex_molecule_info_h5[i].basename:rootname; return inputs.gem_well_labels?inputs.gem_well_labels[i].replace(/\\\\t|\\\\s|\\\\[|\\\\]|\\\\>|\\\\<|,|\\\\./g, \"_\"):rootname; };']}]",
    "cwl_doc": "\nTool calls \"cellranger-arc aggr\" command that takes as input a CSV file specifying a list\nof cellranger-arc count output files for each GEM well being aggregated and produces a\nsingle feature-barcode matrix containing all the data. When combining multiple GEM wells,\nthe barcode sequences for each channel are distinguished by a GEM well suffix appended to\nthe barcode sequence. By default, the reads from each GEM well are subsampled such that all\nGEM wells have the same effective sequencing depth for both ATAC and gene expression modalities;\nfor the ATAC data it is measured in terms of median unique fragments per cell and for gene\nexpression it is measured in terms of the average number of reads that are confidently mapped\nto the transcriptome per cell. However, it is possible to turn off this normalization altogether.\n\nParameters set by default:\n--disable-ui - no need in any UI when running in Docker container\n--id - hardcoded to `aggregated` as we want to return the content of the\n       outputs folder as separate outputs\n\nSkipped parameters:\n--nosecondary\n--dry\n--noexit\n--nopreflight\n--description\n--peaks\n--jobmode\n--mempercore\n--maxjobs\n--jobinterval\n--overrides\n--uiport\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "Cellranger ARC aggr - aggregates data from multiple Cellranger ARC runs",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "Cellranger ARC aggr takes a list of cellranger ARC count output files and produces a single feature-barcode matrix containing all the data",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cellranger/cellranger-arc-count.cwl",
    "sha": "a496c857a1413eebffe7efdfa828c167d202111e",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/cellranger/cellranger-arc-count.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing: |\n      ${\n        var listing = [\n          {\n            \"entry\": inputs.gex_fastq_file_r1,\n            \"entryname\": \"gex_S1_L001_R1_001.fastq\",\n            \"writable\": true\n          },\n          {\n            \"entry\": inputs.gex_fastq_file_r2,\n            \"entryname\": \"gex_S1_L001_R2_001.fastq\",\n            \"writable\": true\n          },\n          {\n            \"entry\": inputs.atac_fastq_file_r1,\n            \"entryname\": \"atac_S1_L001_R1_001.fastq\",\n            \"writable\": true\n          },\n          {\n            \"entry\": inputs.atac_fastq_file_r2,\n            \"entryname\": \"atac_S1_L001_R2_001.fastq\",\n            \"writable\": true\n          },\n          {\n            \"entry\": inputs.atac_fastq_file_r3,\n            \"entryname\": \"atac_S1_L001_R3_001.fastq\",\n            \"writable\": true\n          },\n          {\n            \"entry\":`fastqs,sample,library_type\n            ${runtime.outdir},gex,Gene Expression\n            ${runtime.outdir},atac,Chromatin Accessibility`,\n            \"entryname\": \"libraries.csv\"\n          }\n        ]\n        if (inputs.gex_fastq_file_i1){\n          listing.push(\n            {\n              \"entry\": inputs.gex_fastq_file_i1,\n              \"entryname\": \"gex_S1_L001_I1_001.fastq\",\n              \"writable\": true\n            }\n          );\n        };\n        if (inputs.gex_fastq_file_i2){\n          listing.push(\n            {\n              \"entry\": inputs.gex_fastq_file_i2,\n              \"entryname\": \"gex_S1_L001_I2_001.fastq\",\n              \"writable\": true\n            }\n          );\n        };\n        if (inputs.atac_fastq_file_i1){\n          listing.push(\n            {\n              \"entry\": inputs.atac_fastq_file_i1,\n              \"entryname\": \"atac_S1_L001_I1_001.fastq\",\n              \"writable\": true\n            }\n          );\n        };\n        return listing;\n      }\n\n\nhints:\n- class: DockerRequirement\n  dockerPull: cumulusprod/cellranger-arc:2.0.0\n\n\ninputs:\n  \n  gex_fastq_file_r1:\n    type: File\n    format: edam:format_1930  # FASTQ (generic)\n    doc: |\n      GEX FASTQ read 1 file (will be staged into workdir as gex_S1_L001_R1_001.fastq)\n\n  gex_fastq_file_r2:\n    type: File\n    format: edam:format_1930  # FASTQ (generic)\n    doc: |\n      GEX FASTQ read 2 file (will be staged into workdir as gex_S1_L001_R2_001.fastq)\n\n  gex_fastq_file_i1:\n    type: File?\n    format: edam:format_1930  # FASTQ (generic)\n    doc: |\n      GEX FASTQ index i7 file (will be staged into workdir as gex_S1_L001_I1_001.fastq)\n\n  gex_fastq_file_i2:\n    type: File?\n    format: edam:format_1930  # FASTQ (generic)\n    doc: |\n      GEX FASTQ index i5 file (will be staged into workdir as gex_S1_L001_I2_001.fastq)\n\n  atac_fastq_file_r1:\n    type: File\n    format: edam:format_1930  # FASTQ (generic)\n    doc: |\n      ATAC FASTQ read 1 file (will be staged into workdir as atac_S1_L001_R1_001.fastq)\n\n  atac_fastq_file_r2:\n    type: File\n    format: edam:format_1930  # FASTQ (generic)\n    doc: |\n      ATAC FASTQ read 2 (it's actually index i5) file (will be staged into workdir as atac_S1_L001_R2_001.fastq)\n\n  atac_fastq_file_r3:\n    type: File\n    format: edam:format_1930  # FASTQ (generic)\n    doc: |\n      ATAC FASTQ read 3 (it's actually read 2) file (will be staged into workdir as atac_S1_L001_R3_001.fastq)\n\n  atac_fastq_file_i1:\n    type: File?\n    format: edam:format_1930  # FASTQ (generic)\n    doc: |\n      ATAC FASTQ index i7 file (will be staged into workdir as atac_S1_L001_I1_001.fastq)\n\n  indices_folder:\n    type: Directory\n    inputBinding:\n      position: 5\n      prefix: \"--reference\"\n    doc: |\n      Compatible with Cell Ranger ARC reference folder that includes\n      STAR and BWA indices. Should be generated by \"cellranger-arc mkref\"\n      command\n\n  exclude_introns:\n    type: boolean?\n    inputBinding:\n      position: 6\n      prefix: \"--gex-exclude-introns\"\n    doc: |\n      Disable counting of intronic reads. In this mode, only reads that are exonic\n      and compatible with annotated splice junctions in the reference are counted.\n      Note: using this mode will reduce the UMI counts in the feature-barcode matrix\n\n  force_min_atac_counts:\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: \"--min-atac-count\"\n    doc: |\n      Cell caller override: define the minimum number of ATAC transposition events\n      in peaks (ATAC counts) for a cell barcode.\n      Note: this option must be specified in conjunction with `--min-gex-count`.\n      With `--min-atac-count=X` and `--min-gex-count=Y` a barcode is defined as a cell\n      if it contains at least X ATAC counts AND at least Y GEX UMI counts\n\n  force_min_gex_counts:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: \"--min-gex-count\"\n    doc: |\n      Cell caller override: define the minimum number of GEX UMI counts for a cell barcode.\n      Note: this option must be specified in conjunction with `--min-atac-count`.\n      With `--min-atac-count=X` and `--min-gex-count=Y` a barcode is defined as a cell\n      if it contains at least X ATAC counts AND at least Y GEX UMI counts\n\n  force_peaks_bed_file:\n    type: File?\n    format: edam:format_3003  # BED\n    inputBinding:\n      position: 9\n      prefix: \"--peaks\"\n    doc: |\n      Peak caller override: specify peaks to use in downstream analyses from supplied 3-column BED file.\n      The supplied peaks file must be sorted by position and not contain overlapping peaks;\n      comment lines beginning with `#` are allowed\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 10\n      prefix: \"--localcores\"\n    doc: |\n      Set max cores the pipeline may request at one time.\n      Default: all available\n\n  memory_limit:\n    type: int?\n    inputBinding:\n      position: 11\n      prefix: \"--localmem\"\n    doc: |\n      Set max GB the pipeline may request at one time\n      Default: all available\n\n  virt_memory_limit:\n    type: int?\n    inputBinding:\n      position: 12\n      prefix: \"--localvmem\"\n    doc: |\n      Set max virtual address space in GB for the pipeline\n      Default: all available\n\n\noutputs:\n\n  web_summary_report:\n    type: File\n    format: iana:text/html\n    outputBinding:\n      glob: \"sample/outs/web_summary.html\"\n    doc: |\n      Run summary metrics and charts in HTML format\n\n  metrics_summary_report:\n    type: File\n    format: iana:text/csv\n    outputBinding:\n      glob: \"sample/outs/summary.csv\"\n    doc: |\n      Run summary metrics in CSV format\n\n  barcode_metrics_report:\n    type: File\n    format: iana:text/csv\n    outputBinding:\n      glob: \"sample/outs/per_barcode_metrics.csv\"\n    doc: |\n      ATAC and GEX read count summaries generated for every\n      barcode observed in the experiment. The columns contain\n      the paired ATAC and Gene Expression barcode sequences,\n      ATAC and Gene Expression QC metrics for that barcode,\n      as well as whether this barcode was identified as a\n      cell-associated partition by the pipeline.\n      More details:\n      https://support.10xgenomics.com/single-cell-multiome-atac-gex/software/pipelines/latest/output/per_barcode_metrics\n\n  gex_possorted_genome_bam_bai:\n    type: File\n    format: edam:format_2572  # BAM\n    outputBinding:\n      glob: \"sample/outs/gex_possorted_bam.bam\"\n    secondaryFiles:\n    - .bai\n    doc: |\n      GEX position-sorted reads aligned to the genome and transcriptome annotated with barcode\n      information in BAM format\n  \n  atac_possorted_genome_bam_bai:\n    type: File\n    format: edam:format_2572  # BAM\n    outputBinding:\n      glob: \"sample/outs/atac_possorted_bam.bam\"\n    secondaryFiles:\n    - .bai\n    doc: |\n      ATAC position-sorted reads aligned to the genome annotated with barcode\n      information in BAM format\n\n  filtered_feature_bc_matrix_folder:\n    type: Directory\n    outputBinding:\n      glob: \"sample/outs/filtered_feature_bc_matrix\"\n    doc: |\n      Filtered feature barcode matrix stored as a CSC sparse matrix in MEX format.\n      The rows consist of all the gene and peak features concatenated together\n      (identical to raw feature barcode matrix) and the columns are restricted to\n      those barcodes that are identified as cells.\n\n  filtered_feature_bc_matrix_h5:\n    type: File\n    format: edam:format_3590  # HDF5\n    outputBinding:\n      glob: \"sample/outs/filtered_feature_bc_matrix.h5\"\n    doc: |\n      Filtered feature barcode matrix stored as a CSC sparse matrix in hdf5 format.\n      The rows consist of all the gene and peak features concatenated together\n      (identical to raw feature barcode matrix) and the columns are restricted to\n      those barcodes that are identified as cells.\n\n  raw_feature_bc_matrices_folder:\n    type: Directory\n    outputBinding:\n      glob: \"sample/outs/raw_feature_bc_matrix\"\n    doc: |\n      Raw feature barcode matrix stored as a CSC sparse matrix in MEX format.\n      The rows consist of all the gene and peak features concatenated together\n      and the columns consist of all observed barcodes with non-zero signal for\n      either ATAC or gene expression.\n\n  raw_feature_bc_matrices_h5:\n    type: File\n    format: edam:format_3590  # HDF5\n    outputBinding:\n      glob: \"sample/outs/raw_feature_bc_matrix.h5\"\n    doc: |\n      Raw feature barcode matrix stored as a CSC sparse matrix in hdf5 format.\n      The rows consist of all the gene and peak features concatenated together\n      and the columns consist of all observed barcodes with non-zero signal for\n      either ATAC or gene expression.   \n\n  secondary_analysis_report_folder:\n    type: Directory\n    outputBinding:\n      glob: \"sample/outs/analysis\"\n    doc: |\n      Various secondary analyses that utilize the ATAC data, the GEX data, and their\n      linkage: dimensionality reduction and clustering results for the ATAC and GEX\n      data, differential expression, and differential accessibility for all clustering\n      results above and linkage between ATAC and GEX data.\n\n  gex_molecule_info_h5:\n    type: File\n    format: edam:format_3590  # HDF5\n    outputBinding:\n      glob: \"sample/outs/gex_molecule_info.h5\"\n    doc: |\n      Count and barcode information for every GEX molecule observed in the experiment\n      in hdf5 format.\n\n  loupe_browser_track:\n    type: File\n    outputBinding:\n      glob: \"sample/outs/cloupe.cloupe\"\n    doc: |\n      Loupe Browser visualization file with all the analysis outputs\n\n  atac_fragments_file:\n    type: File\n    format: iana:text/tab-separated-values\n    outputBinding:\n      glob: \"sample/outs/atac_fragments.tsv.gz\"\n    secondaryFiles:\n    - .tbi\n    doc: |\n      Count and barcode information for every ATAC fragment observed in\n      the experiment in TSV format.\n\n  atac_peaks_bed_file:\n    type: File\n    format: edam:format_3003  # BED\n    outputBinding:\n      glob: \"sample/outs/atac_peaks.bed\"\n    doc: |\n      Locations of open-chromatin regions identified in this sample.\n      These regions are referred to as \"peaks\".\n\n  atac_cut_sites_bigwig_file:\n    type: File\n    format: edam:format_3006  # bigWig\n    outputBinding:\n      glob: \"sample/outs/atac_cut_sites.bigwig\"\n    doc: |\n      Genome track of observed transposition sites in the experiment\n      smoothed at a resolution of 400 bases in BIGWIG format.\n\n  atac_peak_annotation_file:\n    type: File\n    format: iana:text/tab-separated-values\n    outputBinding:\n      glob: \"sample/outs/atac_peak_annotation.tsv\"\n    doc: |\n      Annotations of peaks based on genomic proximity alone.\n      Note that these are not functional annotations and they\n      do not make use of linkage with GEX data.\n\nbaseCommand: [\"cellranger-arc\", \"count\", \"--disable-ui\", \"--libraries\", \"libraries.csv\", \"--id\", \"sample\"]\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"Cell Ranger ARC count - generates single cell feature counts for a single multiome library\"\ns:alternateName: \"Counts ATAC and gene expression reads from a single 10x Genomics Cell Ranger Multiome ATAC + Gene Expression library\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  Count ATAC and gene expression reads from a single library.\n\n  Cell Ranger ARC count performs alignment, filtering, barcode counting,\n  peak calling and counting of both ATAC and GEX molecules. Furthermore,\n  it uses the Chromium cellular barcodes to generate feature-barcode matrices,\n  perform dimensionality reduction, determine clusters, perform differential\n  analysis on clusters and identify linkages between peaks and genes. The\n  count pipeline can take input from multiple sequencing runs on the same\n  GEM well.\n\n  Parameters set by default:\n  --disable-ui - no need in any UI when running in Docker container\n  --id - hardcoded to `sample` to simplify output files location\n  --libraries - points to the file libraries.csv generated based on the input FASTQ files\n\n  No implemented parameters:\n  --no-bam - we want to always generate BAM files\n  --dry\n  --noexit\n  --nopreflight\n  --description\n  --uiport\n  --overrides\n  --jobinterval\n  --maxjobs\n  --mempercore\n  --jobmode (we will use local by default)\n\n  Why do we need to rename input files?\n  https://support.10xgenomics.com/single-cell-multiome-atac-gex/software/pipelines/latest/using/using/fastq-input\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'atac_fastq_file_i1', 'doc': 'ATAC FASTQ index i7 file (will be staged into workdir as atac_S1_L001_I1_001.fastq)\\n', 'format': 'http://edamontology.org/format_1930', 'type': ['null', 'File']}, {'id': 'atac_fastq_file_r1', 'doc': 'ATAC FASTQ read 1 file (will be staged into workdir as atac_S1_L001_R1_001.fastq)\\n', 'format': 'http://edamontology.org/format_1930', 'type': 'File'}, {'id': 'atac_fastq_file_r2', 'doc': \"ATAC FASTQ read 2 (it's actually index i5) file (will be staged into workdir as atac_S1_L001_R2_001.fastq)\\n\", 'format': 'http://edamontology.org/format_1930', 'type': 'File'}, {'id': 'atac_fastq_file_r3', 'doc': \"ATAC FASTQ read 3 (it's actually read 2) file (will be staged into workdir as atac_S1_L001_R3_001.fastq)\\n\", 'format': 'http://edamontology.org/format_1930', 'type': 'File'}, {'id': 'exclude_introns', 'doc': 'Disable counting of intronic reads. In this mode, only reads that are exonic\\nand compatible with annotated splice junctions in the reference are counted.\\nNote: using this mode will reduce the UMI counts in the feature-barcode matrix\\n', 'inputBinding': {'position': 6, 'prefix': '--gex-exclude-introns'}, 'type': ['null', 'boolean']}, {'id': 'force_min_atac_counts', 'doc': 'Cell caller override: define the minimum number of ATAC transposition events\\nin peaks (ATAC counts) for a cell barcode.\\nNote: this option must be specified in conjunction with `--min-gex-count`.\\nWith `--min-atac-count=X` and `--min-gex-count=Y` a barcode is defined as a cell\\nif it contains at least X ATAC counts AND at least Y GEX UMI counts\\n', 'inputBinding': {'position': 7, 'prefix': '--min-atac-count'}, 'type': ['null', 'int']}, {'id': 'force_min_gex_counts', 'doc': 'Cell caller override: define the minimum number of GEX UMI counts for a cell barcode.\\nNote: this option must be specified in conjunction with `--min-atac-count`.\\nWith `--min-atac-count=X` and `--min-gex-count=Y` a barcode is defined as a cell\\nif it contains at least X ATAC counts AND at least Y GEX UMI counts\\n', 'inputBinding': {'position': 8, 'prefix': '--min-gex-count'}, 'type': ['null', 'int']}, {'id': 'force_peaks_bed_file', 'doc': 'Peak caller override: specify peaks to use in downstream analyses from supplied 3-column BED file.\\nThe supplied peaks file must be sorted by position and not contain overlapping peaks;\\ncomment lines beginning with `#` are allowed\\n', 'format': 'http://edamontology.org/format_3003', 'inputBinding': {'position': 9, 'prefix': '--peaks'}, 'type': ['null', 'File']}, {'id': 'gex_fastq_file_i1', 'doc': 'GEX FASTQ index i7 file (will be staged into workdir as gex_S1_L001_I1_001.fastq)\\n', 'format': 'http://edamontology.org/format_1930', 'type': ['null', 'File']}, {'id': 'gex_fastq_file_i2', 'doc': 'GEX FASTQ index i5 file (will be staged into workdir as gex_S1_L001_I2_001.fastq)\\n', 'format': 'http://edamontology.org/format_1930', 'type': ['null', 'File']}, {'id': 'gex_fastq_file_r1', 'doc': 'GEX FASTQ read 1 file (will be staged into workdir as gex_S1_L001_R1_001.fastq)\\n', 'format': 'http://edamontology.org/format_1930', 'type': 'File'}, {'id': 'gex_fastq_file_r2', 'doc': 'GEX FASTQ read 2 file (will be staged into workdir as gex_S1_L001_R2_001.fastq)\\n', 'format': 'http://edamontology.org/format_1930', 'type': 'File'}, {'id': 'indices_folder', 'doc': 'Compatible with Cell Ranger ARC reference folder that includes\\nSTAR and BWA indices. Should be generated by \"cellranger-arc mkref\"\\ncommand\\n', 'inputBinding': {'position': 5, 'prefix': '--reference'}, 'type': 'Directory'}, {'id': 'memory_limit', 'doc': 'Set max GB the pipeline may request at one time\\nDefault: all available\\n', 'inputBinding': {'position': 11, 'prefix': '--localmem'}, 'type': ['null', 'int']}, {'id': 'threads', 'doc': 'Set max cores the pipeline may request at one time.\\nDefault: all available\\n', 'inputBinding': {'position': 10, 'prefix': '--localcores'}, 'type': ['null', 'int']}, {'id': 'virt_memory_limit', 'doc': 'Set max virtual address space in GB for the pipeline\\nDefault: all available\\n', 'inputBinding': {'position': 12, 'prefix': '--localvmem'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'atac_cut_sites_bigwig_file', 'doc': 'Genome track of observed transposition sites in the experiment\\nsmoothed at a resolution of 400 bases in BIGWIG format.\\n', 'outputBinding': {'glob': 'sample/outs/atac_cut_sites.bigwig'}, 'format': 'http://edamontology.org/format_3006', 'type': 'File'}, {'id': 'atac_fragments_file', 'secondaryFiles': ['.tbi'], 'doc': 'Count and barcode information for every ATAC fragment observed in\\nthe experiment in TSV format.\\n', 'outputBinding': {'glob': 'sample/outs/atac_fragments.tsv.gz'}, 'format': 'https://www.iana.org/assignments/media-types/text/tab-separated-values', 'type': 'File'}, {'id': 'atac_peak_annotation_file', 'doc': 'Annotations of peaks based on genomic proximity alone.\\nNote that these are not functional annotations and they\\ndo not make use of linkage with GEX data.\\n', 'outputBinding': {'glob': 'sample/outs/atac_peak_annotation.tsv'}, 'format': 'https://www.iana.org/assignments/media-types/text/tab-separated-values', 'type': 'File'}, {'id': 'atac_peaks_bed_file', 'doc': 'Locations of open-chromatin regions identified in this sample.\\nThese regions are referred to as \"peaks\".\\n', 'outputBinding': {'glob': 'sample/outs/atac_peaks.bed'}, 'format': 'http://edamontology.org/format_3003', 'type': 'File'}, {'id': 'atac_possorted_genome_bam_bai', 'secondaryFiles': ['.bai'], 'doc': 'ATAC position-sorted reads aligned to the genome annotated with barcode\\ninformation in BAM format\\n', 'outputBinding': {'glob': 'sample/outs/atac_possorted_bam.bam'}, 'format': 'http://edamontology.org/format_2572', 'type': 'File'}, {'id': 'barcode_metrics_report', 'doc': 'ATAC and GEX read count summaries generated for every\\nbarcode observed in the experiment. The columns contain\\nthe paired ATAC and Gene Expression barcode sequences,\\nATAC and Gene Expression QC metrics for that barcode,\\nas well as whether this barcode was identified as a\\ncell-associated partition by the pipeline.\\nMore details:\\nhttps://support.10xgenomics.com/single-cell-multiome-atac-gex/software/pipelines/latest/output/per_barcode_metrics\\n', 'outputBinding': {'glob': 'sample/outs/per_barcode_metrics.csv'}, 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'type': 'File'}, {'id': 'filtered_feature_bc_matrix_folder', 'doc': 'Filtered feature barcode matrix stored as a CSC sparse matrix in MEX format.\\nThe rows consist of all the gene and peak features concatenated together\\n(identical to raw feature barcode matrix) and the columns are restricted to\\nthose barcodes that are identified as cells.\\n', 'outputBinding': {'glob': 'sample/outs/filtered_feature_bc_matrix'}, 'type': 'Directory'}, {'id': 'filtered_feature_bc_matrix_h5', 'doc': 'Filtered feature barcode matrix stored as a CSC sparse matrix in hdf5 format.\\nThe rows consist of all the gene and peak features concatenated together\\n(identical to raw feature barcode matrix) and the columns are restricted to\\nthose barcodes that are identified as cells.\\n', 'outputBinding': {'glob': 'sample/outs/filtered_feature_bc_matrix.h5'}, 'format': 'http://edamontology.org/format_3590', 'type': 'File'}, {'id': 'gex_molecule_info_h5', 'doc': 'Count and barcode information for every GEX molecule observed in the experiment\\nin hdf5 format.\\n', 'outputBinding': {'glob': 'sample/outs/gex_molecule_info.h5'}, 'format': 'http://edamontology.org/format_3590', 'type': 'File'}, {'id': 'gex_possorted_genome_bam_bai', 'secondaryFiles': ['.bai'], 'doc': 'GEX position-sorted reads aligned to the genome and transcriptome annotated with barcode\\ninformation in BAM format\\n', 'outputBinding': {'glob': 'sample/outs/gex_possorted_bam.bam'}, 'format': 'http://edamontology.org/format_2572', 'type': 'File'}, {'id': 'loupe_browser_track', 'doc': 'Loupe Browser visualization file with all the analysis outputs\\n', 'outputBinding': {'glob': 'sample/outs/cloupe.cloupe'}, 'type': 'File'}, {'id': 'metrics_summary_report', 'doc': 'Run summary metrics in CSV format\\n', 'outputBinding': {'glob': 'sample/outs/summary.csv'}, 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'type': 'File'}, {'id': 'raw_feature_bc_matrices_folder', 'doc': 'Raw feature barcode matrix stored as a CSC sparse matrix in MEX format.\\nThe rows consist of all the gene and peak features concatenated together\\nand the columns consist of all observed barcodes with non-zero signal for\\neither ATAC or gene expression.\\n', 'outputBinding': {'glob': 'sample/outs/raw_feature_bc_matrix'}, 'type': 'Directory'}, {'id': 'raw_feature_bc_matrices_h5', 'doc': 'Raw feature barcode matrix stored as a CSC sparse matrix in hdf5 format.\\nThe rows consist of all the gene and peak features concatenated together\\nand the columns consist of all observed barcodes with non-zero signal for\\neither ATAC or gene expression.   \\n', 'outputBinding': {'glob': 'sample/outs/raw_feature_bc_matrix.h5'}, 'format': 'http://edamontology.org/format_3590', 'type': 'File'}, {'id': 'secondary_analysis_report_folder', 'doc': 'Various secondary analyses that utilize the ATAC data, the GEX data, and their\\nlinkage: dimensionality reduction and clustering results for the ATAC and GEX\\ndata, differential expression, and differential accessibility for all clustering\\nresults above and linkage between ATAC and GEX data.\\n', 'outputBinding': {'glob': 'sample/outs/analysis'}, 'type': 'Directory'}, {'id': 'web_summary_report', 'doc': 'Run summary metrics and charts in HTML format\\n', 'outputBinding': {'glob': 'sample/outs/web_summary.html'}, 'format': 'https://www.iana.org/assignments/media-types/text/html', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'cumulusprod/cellranger-arc:2.0.0'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cellranger-arc', 'count', '--disable-ui', '--libraries', 'libraries.csv', '--id', 'sample']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': '${\\n  var listing = [\\n    {\\n      \"entry\": inputs.gex_fastq_file_r1,\\n      \"entryname\": \"gex_S1_L001_R1_001.fastq\",\\n      \"writable\": true\\n    },\\n    {\\n      \"entry\": inputs.gex_fastq_file_r2,\\n      \"entryname\": \"gex_S1_L001_R2_001.fastq\",\\n      \"writable\": true\\n    },\\n    {\\n      \"entry\": inputs.atac_fastq_file_r1,\\n      \"entryname\": \"atac_S1_L001_R1_001.fastq\",\\n      \"writable\": true\\n    },\\n    {\\n      \"entry\": inputs.atac_fastq_file_r2,\\n      \"entryname\": \"atac_S1_L001_R2_001.fastq\",\\n      \"writable\": true\\n    },\\n    {\\n      \"entry\": inputs.atac_fastq_file_r3,\\n      \"entryname\": \"atac_S1_L001_R3_001.fastq\",\\n      \"writable\": true\\n    },\\n    {\\n      \"entry\":`fastqs,sample,library_type\\n      ${runtime.outdir},gex,Gene Expression\\n      ${runtime.outdir},atac,Chromatin Accessibility`,\\n      \"entryname\": \"libraries.csv\"\\n    }\\n  ]\\n  if (inputs.gex_fastq_file_i1){\\n    listing.push(\\n      {\\n        \"entry\": inputs.gex_fastq_file_i1,\\n        \"entryname\": \"gex_S1_L001_I1_001.fastq\",\\n        \"writable\": true\\n      }\\n    );\\n  };\\n  if (inputs.gex_fastq_file_i2){\\n    listing.push(\\n      {\\n        \"entry\": inputs.gex_fastq_file_i2,\\n        \"entryname\": \"gex_S1_L001_I2_001.fastq\",\\n        \"writable\": true\\n      }\\n    );\\n  };\\n  if (inputs.atac_fastq_file_i1){\\n    listing.push(\\n      {\\n        \"entry\": inputs.atac_fastq_file_i1,\\n        \"entryname\": \"atac_S1_L001_I1_001.fastq\",\\n        \"writable\": true\\n      }\\n    );\\n  };\\n  return listing;\\n}\\n'}, {'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Count ATAC and gene expression reads from a single library.\n\nCell Ranger ARC count performs alignment, filtering, barcode counting,\npeak calling and counting of both ATAC and GEX molecules. Furthermore,\nit uses the Chromium cellular barcodes to generate feature-barcode matrices,\nperform dimensionality reduction, determine clusters, perform differential\nanalysis on clusters and identify linkages between peaks and genes. The\ncount pipeline can take input from multiple sequencing runs on the same\nGEM well.\n\nParameters set by default:\n--disable-ui - no need in any UI when running in Docker container\n--id - hardcoded to `sample` to simplify output files location\n--libraries - points to the file libraries.csv generated based on the input FASTQ files\n\nNo implemented parameters:\n--no-bam - we want to always generate BAM files\n--dry\n--noexit\n--nopreflight\n--description\n--uiport\n--overrides\n--jobinterval\n--maxjobs\n--mempercore\n--jobmode (we will use local by default)\n\nWhy do we need to rename input files?\nhttps://support.10xgenomics.com/single-cell-multiome-atac-gex/software/pipelines/latest/using/using/fastq-input\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "Cell Ranger ARC count - generates single cell feature counts for a single multiome library",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "Counts ATAC and gene expression reads from a single 10x Genomics Cell Ranger Multiome ATAC + Gene Expression library",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cellranger/cellranger-arc-mkref.cwl",
    "sha": "87171a1099a81ff8b172c99b291be612ecd7f1b8",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/cellranger/cellranger-arc-mkref.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n   expressionLib:\n    - |\n      var get_output_folder_name = function() {\n        if (inputs.output_folder_name == \"\"){\n          var root = inputs.genome_fasta_file.basename.split('.').slice(0,-1).join('.');\n          return (root == \"\") ? inputs.genome_fasta_file.basename : root;\n        } else {\n          return inputs.output_folder_name;\n        }          \n      };\n  InitialWorkDirRequirement:\n    listing: |\n      ${\n        var exclude_chr = \"[]\";\n        if (inputs.exclude_chr && inputs.exclude_chr.length > 0){\n          exclude_chr = '[\"' + inputs.exclude_chr.join('\", \"') + '\"]'\n        }\n        var entry = `\n        {\n            genome: [\"${get_output_folder_name()}\"]\n            input_fasta: [\"${inputs.genome_fasta_file.path}\"]\n            input_gtf: [\"${inputs.annotation_gtf_file.path}\"]\n            non_nuclear_contigs: ${exclude_chr}\n        }`\n        return [{\n          \"entry\": entry,\n          \"entryname\": \"config.txt\"\n        }];\n      }\n\nhints:\n  DockerRequirement:\n    dockerPull: cumulusprod/cellranger-arc:2.0.0\n\ninputs:\n  \n  genome_fasta_file:\n    type: File\n    format: edam:format_1929  # FASTA\n    doc: \"Genome FASTA file\"\n\n  annotation_gtf_file:\n    type: File\n    format: edam:format_2306  # GTF\n    doc: \"GTF annotation file.\"\n\n  exclude_chr:\n    type:\n      - \"null\"\n      - string[]\n    doc: |\n      Contigs that do not have any chromatin structure, for example,\n      mitochondria or plastids. These contigs are excluded from peak\n      calling since the entire contig will be \"open\" due to a lack of\n      chromatin structure\n\n  output_folder_name:\n    type: string?\n    default: \"\"\n    doc: |\n      Unique genome name, used to name output folder\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: \"--nthreads\"\n    doc: |\n      Number of threads used during STAR genome indexing\n      Default: 1\n\n  memory_limit:\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: \"--memgb\"\n    doc: |\n      Maximum memory (GB) used when aligning reads with STAR\n      Defaults: 16\n\n\noutputs:\n  indices_folder:\n    type: Directory\n    outputBinding:\n      glob: $(get_output_folder_name())\n    doc: |\n      Compatible with Cell Ranger ARC reference folder that includes\n      STAR and BWA indices\n\nbaseCommand: [\"cellranger-arc\", \"mkref\", \"--config\", \"config.txt\"]\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"Cell Ranger ARC mkref - builds compatible with Cell Ranger ARC indices\"\ns:alternateName: \"Builds compatible with Cell Ranger ARC reference folder from user-supplied genome FASTA and gene GTF files\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  Reference preparation tool for 10x Genomics Cell Ranger Multiome ATAC + Gene Expression\n\n  Notes:\n  - `input_motifs` parameter in the `config.txt` file is not implemented\n  - if GTF file provided in `annotation_gtf_file` has duplicate gene_id, they should be\n    grouped together. Applicable to to USCS RefGene annotations.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'annotation_gtf_file', 'doc': 'GTF annotation file.', 'format': 'http://edamontology.org/format_2306', 'type': 'File'}, {'id': 'exclude_chr', 'doc': 'Contigs that do not have any chromatin structure, for example,\\nmitochondria or plastids. These contigs are excluded from peak\\ncalling since the entire contig will be \"open\" due to a lack of\\nchromatin structure\\n', 'type': ['null', {'items': 'string', 'type': 'array'}]}, {'id': 'genome_fasta_file', 'doc': 'Genome FASTA file', 'format': 'http://edamontology.org/format_1929', 'type': 'File'}, {'id': 'memory_limit', 'doc': 'Maximum memory (GB) used when aligning reads with STAR\\nDefaults: 16\\n', 'inputBinding': {'position': 6, 'prefix': '--memgb'}, 'type': ['null', 'int']}, {'id': 'output_folder_name', 'doc': 'Unique genome name, used to name output folder\\n', 'default': '', 'type': ['null', 'string']}, {'id': 'threads', 'doc': 'Number of threads used during STAR genome indexing\\nDefault: 1\\n', 'inputBinding': {'position': 5, 'prefix': '--nthreads'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'indices_folder', 'doc': 'Compatible with Cell Ranger ARC reference folder that includes\\nSTAR and BWA indices\\n', 'outputBinding': {'glob': '$(get_output_folder_name())'}, 'type': 'Directory'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'cumulusprod/cellranger-arc:2.0.0'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cellranger-arc', 'mkref', '--config', 'config.txt']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': '${\\n  var exclude_chr = \"[]\";\\n  if (inputs.exclude_chr && inputs.exclude_chr.length > 0){\\n    exclude_chr = \\'[\"\\' + inputs.exclude_chr.join(\\'\", \"\\') + \\'\"]\\'\\n  }\\n  var entry = `\\n  {\\n      genome: [\"${get_output_folder_name()}\"]\\n      input_fasta: [\"${inputs.genome_fasta_file.path}\"]\\n      input_gtf: [\"${inputs.annotation_gtf_file.path}\"]\\n      non_nuclear_contigs: ${exclude_chr}\\n  }`\\n  return [{\\n    \"entry\": entry,\\n    \"entryname\": \"config.txt\"\\n  }];\\n}\\n'}, {'class': 'InlineJavascriptRequirement', 'expressionLib': ['var get_output_folder_name = function() {\\n  if (inputs.output_folder_name == \"\"){\\n    var root = inputs.genome_fasta_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\');\\n    return (root == \"\") ? inputs.genome_fasta_file.basename : root;\\n  } else {\\n    return inputs.output_folder_name;\\n  }          \\n};\\n']}]",
    "cwl_doc": "Reference preparation tool for 10x Genomics Cell Ranger Multiome ATAC + Gene Expression\n\nNotes:\n- `input_motifs` parameter in the `config.txt` file is not implemented\n- if GTF file provided in `annotation_gtf_file` has duplicate gene_id, they should be\n  grouped together. Applicable to to USCS RefGene annotations.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "Cell Ranger ARC mkref - builds compatible with Cell Ranger ARC indices",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "Builds compatible with Cell Ranger ARC reference folder from user-supplied genome FASTA and gene GTF files",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cellranger/cellranger-count.cwl",
    "sha": "c7580c67d5518c554152a9b1f8cfeae3695b4008",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/cellranger/cellranger-count.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n   listing: |\n     ${\n       var listing = [\n         {\n           \"entry\": inputs.fastq_file_r1,\n           \"entryname\": \"sample_S1_L001_R1_001.fastq\",\n           \"writable\": true\n         },\n         {\n           \"entry\": inputs.fastq_file_r2,\n           \"entryname\": \"sample_S1_L001_R2_001.fastq\",\n           \"writable\": true\n         }\n       ];\n       if (inputs.fastq_file_i1){\n         listing.push(\n           {\n             \"entry\": inputs.fastq_file_i1,\n             \"entryname\": \"sample_S1_L001_I1_001.fastq\",\n             \"writable\": true\n           }\n         );\n       };\n       return listing;\n     }\n\nhints:\n  DockerRequirement:\n    dockerPull: cumulusprod/cellranger:4.0.0\n\ninputs: \n  fastq_file_r1:\n    type: File\n    format: edam:format_1931  # FASTQ (generic)\n    doc: |\n      FASTQ read 1 file (will be staged into workdir as sample_S1_L001_R1_001.fastq)\n\n  fastq_file_r2:\n    type: File\n    format: edam:format_1931  # FASTQ (generic)\n    doc: |\n      FASTQ read 2 file (will be staged into workdir as sample_S1_L001_R2_001.fastq)\n\n  fastq_file_i1:\n    type: File?\n    format: edam:format_1931  # FASTQ (generic)\n    doc: |\n      FASTQ index file (if provided, will be staged into workdir as sample_S1_L001_I1_001.fastq)\n\n  indices_folder:\n    type: Directory\n    inputBinding:\n      position: 5\n      prefix: \"--transcriptome\"\n    doc: |\n      Path of folder containing 10x-compatible transcriptome reference.\n      Should be generated by \"cellranger mkref\" command\n\n  expect_cells:\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: \"--expect-cells\"\n    doc: |\n      Expected number of recovered cells.\n      Default: 3,000 cells\n\n  force_cells:\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: \"--force-cells\"\n    doc: |\n      Force pipeline to use this number of cells, bypassing the cell detection algorithm.\n      Use this if the number of cells estimated by Cell Ranger is not consistent with the\n      barcode rank plot.\n\n  include_introns:\n    type: boolean?\n    inputBinding:\n      position: 8\n      prefix: \"--include-introns\"\n    doc: |\n      Add this flag to count reads mapping to intronic regions.\n      This may improve sensitivity for samples with a significant\n      amount of pre-mRNA molecules, such as nuclei.\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 9\n      prefix: \"--localcores\"\n    doc: |\n      Set max cores the pipeline may request at one time.\n      Default: all available\n\n  memory_limit:\n    type: int?\n    inputBinding:\n      position: 10\n      prefix: \"--localmem\"\n    doc: |\n      Set max GB the pipeline may request at one time\n      Default: all available\n\n  virt_memory_limit:\n    type: int?\n    inputBinding:\n      position: 11\n      prefix: \"--localvmem\"\n    doc: |\n      Set max virtual address space in GB for the pipeline\n      Default: all available\n\n\noutputs:\n\n  web_summary_report:\n    type: File\n    format: iana:text/html\n    outputBinding:\n      glob: \"sample/outs/web_summary.html\"\n    doc: |\n      Run summary metrics and charts in HTML format\n\n  metrics_summary_report:\n    type: File\n    format: iana:text/csv\n    outputBinding:\n      glob: \"sample/outs/metrics_summary.csv\"\n    doc: |\n      Run summary metrics in CSV format\n\n  possorted_genome_bam_bai:\n    type: File\n    format: edam:format_2572  # BAM\n    outputBinding:\n      glob: \"sample/outs/possorted_genome_bam.bam\"\n    secondaryFiles:\n    - .bai\n    doc: |\n      Indexed reads aligned to the genome and transcriptome annotated with barcode information\n  \n  filtered_feature_bc_matrix_folder:\n    type: Directory\n    outputBinding:\n      glob: \"sample/outs/filtered_feature_bc_matrix\"\n    doc: |\n      Folder with filtered feature-barcode matrices containing only cellular barcodes in MEX format.\n      When implemented, in Targeted Gene Expression samples, the non-targeted genes won't be present.\n\n  filtered_feature_bc_matrix_h5:\n    type: File\n    format: edam:format_3590  # HDF5\n    outputBinding:\n      glob: \"sample/outs/filtered_feature_bc_matrix.h5\"\n    doc: |\n      Filtered feature-barcode matrices containing only cellular barcodes in HDF5 format.\n      When implemented, in Targeted Gene Expression samples, the non-targeted genes won't\n      be present.\n  \n  raw_feature_bc_matrices_folder:\n    type: Directory\n    outputBinding:\n      glob: \"sample/outs/raw_feature_bc_matrix\"\n    doc: |\n      Folder with unfiltered feature-barcode matrices containing all barcodes in MEX format\n\n  raw_feature_bc_matrices_h5:\n    type: File\n    format: edam:format_3590  # HDF5\n    outputBinding:\n      glob: \"sample/outs/raw_feature_bc_matrix.h5\"\n    doc: |\n      Unfiltered feature-barcode matrices containing all barcodes in HDF5 format\n\n  secondary_analysis_report_folder:\n    type: Directory\n    outputBinding:\n      glob: \"sample/outs/analysis\"\n    doc: |\n      Folder with secondary analysis results including dimensionality reduction,\n      cell clustering, and differential expression\n\n  molecule_info_h5:\n    type: File\n    format: edam:format_3590  # HDF5\n    outputBinding:\n      glob: \"sample/outs/molecule_info.h5\"\n    doc: |\n      Molecule-level information used by cellranger aggr to aggregate samples into\n      larger datasets\n\n  loupe_browser_track:\n    type: File\n    outputBinding:\n      glob: \"sample/outs/cloupe.cloupe\"\n    doc: |\n      Loupe Browser visualization and analysis file\n\nbaseCommand: [\"cellranger\", \"count\", \"--disable-ui\", \"--fastqs\", \".\", \"--id\", \"sample\"]\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"Cellranger count - generates single cell feature counts for a single library\"\ns:alternateName: \"Counts gene expression and feature barcoding reads from a single sample and GEM well\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  Generates single cell feature counts for a single library.\n\n  Input parameters for Feature Barcode, Targeted Gene Expression and CRISPR-specific\n  analyses are not implemented, therefore the correspondent outputs are also excluded.\n\n  Parameters set by default:\n  --disable-ui - no need in any UI when running in Docker container\n  --id - can be hardcoded as we rename input files anyway\n  --fastqs - points to the current directory, because input FASTQ files are staged there\n\n  Why do we need to rename input files?\n  Refer to the \"My FASTQs are not named like any of the above examples\" section of\n  https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/fastq-input\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'expect_cells', 'doc': 'Expected number of recovered cells.\\nDefault: 3,000 cells\\n', 'inputBinding': {'position': 6, 'prefix': '--expect-cells'}, 'type': ['null', 'int']}, {'id': 'fastq_file_i1', 'doc': 'FASTQ index file (if provided, will be staged into workdir as sample_S1_L001_I1_001.fastq)\\n', 'format': 'http://edamontology.org/format_1931', 'type': ['null', 'File']}, {'id': 'fastq_file_r1', 'doc': 'FASTQ read 1 file (will be staged into workdir as sample_S1_L001_R1_001.fastq)\\n', 'format': 'http://edamontology.org/format_1931', 'type': 'File'}, {'id': 'fastq_file_r2', 'doc': 'FASTQ read 2 file (will be staged into workdir as sample_S1_L001_R2_001.fastq)\\n', 'format': 'http://edamontology.org/format_1931', 'type': 'File'}, {'id': 'force_cells', 'doc': 'Force pipeline to use this number of cells, bypassing the cell detection algorithm.\\nUse this if the number of cells estimated by Cell Ranger is not consistent with the\\nbarcode rank plot.\\n', 'inputBinding': {'position': 7, 'prefix': '--force-cells'}, 'type': ['null', 'int']}, {'id': 'include_introns', 'doc': 'Add this flag to count reads mapping to intronic regions.\\nThis may improve sensitivity for samples with a significant\\namount of pre-mRNA molecules, such as nuclei.\\n', 'inputBinding': {'position': 8, 'prefix': '--include-introns'}, 'type': ['null', 'boolean']}, {'id': 'indices_folder', 'doc': 'Path of folder containing 10x-compatible transcriptome reference.\\nShould be generated by \"cellranger mkref\" command\\n', 'inputBinding': {'position': 5, 'prefix': '--transcriptome'}, 'type': 'Directory'}, {'id': 'memory_limit', 'doc': 'Set max GB the pipeline may request at one time\\nDefault: all available\\n', 'inputBinding': {'position': 10, 'prefix': '--localmem'}, 'type': ['null', 'int']}, {'id': 'threads', 'doc': 'Set max cores the pipeline may request at one time.\\nDefault: all available\\n', 'inputBinding': {'position': 9, 'prefix': '--localcores'}, 'type': ['null', 'int']}, {'id': 'virt_memory_limit', 'doc': 'Set max virtual address space in GB for the pipeline\\nDefault: all available\\n', 'inputBinding': {'position': 11, 'prefix': '--localvmem'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'filtered_feature_bc_matrix_folder', 'doc': \"Folder with filtered feature-barcode matrices containing only cellular barcodes in MEX format.\\nWhen implemented, in Targeted Gene Expression samples, the non-targeted genes won't be present.\\n\", 'outputBinding': {'glob': 'sample/outs/filtered_feature_bc_matrix'}, 'type': 'Directory'}, {'id': 'filtered_feature_bc_matrix_h5', 'doc': \"Filtered feature-barcode matrices containing only cellular barcodes in HDF5 format.\\nWhen implemented, in Targeted Gene Expression samples, the non-targeted genes won't\\nbe present.\\n\", 'outputBinding': {'glob': 'sample/outs/filtered_feature_bc_matrix.h5'}, 'format': 'http://edamontology.org/format_3590', 'type': 'File'}, {'id': 'loupe_browser_track', 'doc': 'Loupe Browser visualization and analysis file\\n', 'outputBinding': {'glob': 'sample/outs/cloupe.cloupe'}, 'type': 'File'}, {'id': 'metrics_summary_report', 'doc': 'Run summary metrics in CSV format\\n', 'outputBinding': {'glob': 'sample/outs/metrics_summary.csv'}, 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'type': 'File'}, {'id': 'molecule_info_h5', 'doc': 'Molecule-level information used by cellranger aggr to aggregate samples into\\nlarger datasets\\n', 'outputBinding': {'glob': 'sample/outs/molecule_info.h5'}, 'format': 'http://edamontology.org/format_3590', 'type': 'File'}, {'id': 'possorted_genome_bam_bai', 'secondaryFiles': ['.bai'], 'doc': 'Indexed reads aligned to the genome and transcriptome annotated with barcode information\\n', 'outputBinding': {'glob': 'sample/outs/possorted_genome_bam.bam'}, 'format': 'http://edamontology.org/format_2572', 'type': 'File'}, {'id': 'raw_feature_bc_matrices_folder', 'doc': 'Folder with unfiltered feature-barcode matrices containing all barcodes in MEX format\\n', 'outputBinding': {'glob': 'sample/outs/raw_feature_bc_matrix'}, 'type': 'Directory'}, {'id': 'raw_feature_bc_matrices_h5', 'doc': 'Unfiltered feature-barcode matrices containing all barcodes in HDF5 format\\n', 'outputBinding': {'glob': 'sample/outs/raw_feature_bc_matrix.h5'}, 'format': 'http://edamontology.org/format_3590', 'type': 'File'}, {'id': 'secondary_analysis_report_folder', 'doc': 'Folder with secondary analysis results including dimensionality reduction,\\ncell clustering, and differential expression\\n', 'outputBinding': {'glob': 'sample/outs/analysis'}, 'type': 'Directory'}, {'id': 'web_summary_report', 'doc': 'Run summary metrics and charts in HTML format\\n', 'outputBinding': {'glob': 'sample/outs/web_summary.html'}, 'format': 'https://www.iana.org/assignments/media-types/text/html', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'cumulusprod/cellranger:4.0.0'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cellranger', 'count', '--disable-ui', '--fastqs', '.', '--id', 'sample']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': '${\\n  var listing = [\\n    {\\n      \"entry\": inputs.fastq_file_r1,\\n      \"entryname\": \"sample_S1_L001_R1_001.fastq\",\\n      \"writable\": true\\n    },\\n    {\\n      \"entry\": inputs.fastq_file_r2,\\n      \"entryname\": \"sample_S1_L001_R2_001.fastq\",\\n      \"writable\": true\\n    }\\n  ];\\n  if (inputs.fastq_file_i1){\\n    listing.push(\\n      {\\n        \"entry\": inputs.fastq_file_i1,\\n        \"entryname\": \"sample_S1_L001_I1_001.fastq\",\\n        \"writable\": true\\n      }\\n    );\\n  };\\n  return listing;\\n}\\n'}, {'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Generates single cell feature counts for a single library.\n\nInput parameters for Feature Barcode, Targeted Gene Expression and CRISPR-specific\nanalyses are not implemented, therefore the correspondent outputs are also excluded.\n\nParameters set by default:\n--disable-ui - no need in any UI when running in Docker container\n--id - can be hardcoded as we rename input files anyway\n--fastqs - points to the current directory, because input FASTQ files are staged there\n\nWhy do we need to rename input files?\nRefer to the \"My FASTQs are not named like any of the above examples\" section of\nhttps://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/fastq-input\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "Cellranger count - generates single cell feature counts for a single library",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "Counts gene expression and feature barcoding reads from a single sample and GEM well",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cellranger/cellranger-mkref.cwl",
    "sha": "53d2cda87d09ced22fe27341c1e1011d5a349333",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/cellranger/cellranger-mkref.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var get_output_folder_name = function() {\n            if (inputs.output_folder_name == \"\"){\n              var root = inputs.genome_fasta_file.basename.split('.').slice(0,-1).join('.');\n              return (root == \"\")?inputs.genome_fasta_file.basename:root;\n            } else {\n              return inputs.output_folder_name;\n            }          \n          };\nhints:\n  DockerRequirement:\n    dockerPull: cumulusprod/cellranger:4.0.0\n\ninputs:\n  \n  genome_fasta_file:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      position: 5\n      prefix: \"--fasta\"\n    doc: |\n      Genome FASTA file\n\n  annotation_gtf_file:\n    type: File\n    format: edam:format_2306  # GTF\n    inputBinding:\n      position: 6\n      prefix: \"--genes\"\n    doc: |\n      GTF annotation file\n\n  output_folder_name:\n    type: string?\n    inputBinding:\n      position: 7\n      prefix: \"--genome\"\n      valueFrom: $(get_output_folder_name())\n    default: \"\"\n    doc: |\n      Unique genome name, used to name output folder\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: \"--nthreads\"\n    doc: |\n      Number of threads used during STAR genome index\n      Default: 1\n\n  memory_limit:\n    type: int?\n    inputBinding:\n      position: 9\n      prefix: \"--memgb\"\n    doc: |\n      Maximum memory (GB) used when aligning reads with STAR\n      Defaults: 16\n\n\noutputs:\n\n  indices_folder:\n    type: Directory\n    outputBinding:\n      glob: $(get_output_folder_name())\n    doc: |\n      Cellranger-compatible reference folder that includes\n      STAR indices and some additional files\n\nbaseCommand: [\"cellranger\", \"mkref\"]\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"Cell Ranger mkref - builds a Cell Ranger compatible indices\"\ndoc: |\n  Builds a Cell Ranger compatible reference folder from user-supplied\n  genome FASTA and gene GTF files.\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'annotation_gtf_file', 'doc': 'GTF annotation file\\n', 'format': 'http://edamontology.org/format_2306', 'inputBinding': {'position': 6, 'prefix': '--genes'}, 'type': 'File'}, {'id': 'genome_fasta_file', 'doc': 'Genome FASTA file\\n', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'position': 5, 'prefix': '--fasta'}, 'type': 'File'}, {'id': 'memory_limit', 'doc': 'Maximum memory (GB) used when aligning reads with STAR\\nDefaults: 16\\n', 'inputBinding': {'position': 9, 'prefix': '--memgb'}, 'type': ['null', 'int']}, {'id': 'output_folder_name', 'doc': 'Unique genome name, used to name output folder\\n', 'inputBinding': {'position': 7, 'prefix': '--genome', 'valueFrom': '$(get_output_folder_name())'}, 'default': '', 'type': ['null', 'string']}, {'id': 'threads', 'doc': 'Number of threads used during STAR genome index\\nDefault: 1\\n', 'inputBinding': {'position': 8, 'prefix': '--nthreads'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'indices_folder', 'doc': 'Cellranger-compatible reference folder that includes\\nSTAR indices and some additional files\\n', 'outputBinding': {'glob': '$(get_output_folder_name())'}, 'type': 'Directory'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'cumulusprod/cellranger:4.0.0'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cellranger', 'mkref']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var get_output_folder_name = function() { if (inputs.output_folder_name == \"\"){ var root = inputs.genome_fasta_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.genome_fasta_file.basename:root; } else { return inputs.output_folder_name; } };']}]",
    "cwl_doc": "Builds a Cell Ranger compatible reference folder from user-supplied\ngenome FASTA and gene GTF files.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "Cell Ranger mkref - builds a Cell Ranger compatible indices",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cellranger/cellranger-reanalyze.cwl",
    "sha": "5cea8e560713e72092fbf82cef7c4a4409ef6ff7",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/cellranger/cellranger-reanalyze.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  DockerRequirement:\n    dockerPull: cumulusprod/cellranger:4.0.0\n  InitialWorkDirRequirement:\n    listing: |\n      ${\n          const skipped_ids = [\n            \"feature_bc_matrix_h5\",\n            \"aggregation_metadata\",\n            \"selected_barcodes\",\n            \"selected_genes\",\n            \"excluded_genes\",\n            \"force_cells_num\",\n            \"threads\",\n            \"memory_limit\",\n            \"virt_memory_limit\"\n          ]\n          var entry = \"\";\n          for (const id in inputs){\n            if (skipped_ids.includes(id) || !inputs[id]){\n              continue;\n            }\n            entry += id + \",\" + inputs[id] + \"\\n\";\n          }\n          return [{\n            \"entry\": entry,\n            \"entryname\": runtime.outdir + \"/params.csv\"\n          }];\n      }\n\ninputs:\n  feature_bc_matrix_h5:\n    type: File\n    format: edam:format_3590  # HDF5\n    inputBinding:\n      position: 5\n      prefix: \"--matrix\"\n    doc: |\n      Filtered or raw feature-barcode matrices in HDF5 format\n\n  aggregation_metadata:\n    type: File?\n    format: iana:text/csv\n    inputBinding:\n      position: 6\n      prefix: \"--agg\"\n    doc: |\n      Aggregation CSV metadata file obtained from cellranger aggr.\n      This allows you to retain any metadata associated with the\n      samples for display in Loupe Browser.\n\n  selected_barcodes:\n    type: File?\n    format: iana:text/csv\n    inputBinding:\n      position: 7\n      prefix: \"--barcodes\"\n    doc: |\n      A CSV file containing a list of cell barcodes to use for reanalysis,\n      e.g. barcodes exported from Loupe Browser. All barcodes must be present\n      in the matrix.\n\n  selected_genes:\n    type: File?\n    format: iana:text/csv\n    inputBinding:\n      position: 8\n      prefix: \"--genes\"\n    doc: |\n      A CSV file containing a list of gene IDs to use for reanalysis (corresponding\n      to the gene_id field of the reference GTF). All gene IDs must be present in\n      the matrix. Note that only gene features are used in secondary analysis.\n      Feature Barcode features are ignored.\n\n  excluded_genes:\n    type: File?\n    format: iana:text/csv\n    inputBinding:\n      position: 9\n      prefix: \"--exclude-genes\"\n    doc: |\n      A CSV file containing a list of gene IDs to exclude for reanalysis (corresponding\n      to the gene_id field of the reference GTF). All gene IDs must be present in\n      the matrix. The exclusion is applied after setting the gene list with --genes.\n      Note that only gene features are used in secondary analysis. Feature Barcode features\n      are ignored.\n\n  force_cells_num:\n    type: int?\n    inputBinding:\n      position: 10\n      prefix: \"--force-cells\"\n    doc: |\n      Force pipeline to use this number of cells, bypassing the cell detection algorithm.\n      Use this if the number of cells estimated by Cell Ranger is not consistent with the\n      barcode rank plot. If specifying a value that exceeds the original cell count, you\n      must use the raw_gene_bc_matrices_h5.h5\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 11\n      prefix: \"--localcores\"\n    doc: |\n      Set max cores the pipeline may request at one time.\n      Default: all available\n\n  memory_limit:\n    type: int?\n    inputBinding:\n      position: 12\n      prefix: \"--localmem\"\n    doc: |\n      Set max GB the pipeline may request at one time\n      Default: all available\n\n  virt_memory_limit:\n    type: int?\n    inputBinding:\n      position: 13\n      prefix: \"--localvmem\"\n    doc: |\n      Set max virtual address space in GB for the pipeline\n      Default: all available\n\n  num_analysis_bcs:\n    type: int?\n    doc: |\n      Randomly subset data to N barcodes for all analysis. Reduce this parameter if you\n      want to improve performance or simulate results from lower cell counts. Cannot be\n      set higher than the available number of cells.\n      Default: null\n\n  num_pca_bcs:\n    type: int?\n    doc: |\n      Randomly subset data to N barcodes when computing PCA projection (the most memory-intensive\n      step). The PCA projection will still be applied to the full dataset, i.e. your final results\n      will still reflect all the data. Try reducing this parameter if your analysis is running out\n      of memory. Cannot be set higher than the available number of cells.\n      Default: null\n\n  num_pca_genes:\n    type: int?\n    doc: |\n      Subset data to the top N genes (ranked by normalized dispersion) when computing PCA.\n      Differential expression will still reflect all genes. Try reducing this parameter if\n      your analysis is running out of memory. Cannot be set higher than the number of genes\n      in the reference transcriptome.\n      Default: null\n\n  num_principal_comps:\n    type: int?\n    doc: |\n      Compute N principal components for PCA. Setting this too high may cause spurious clusters\n      to be called. The default value is 100 when the chemistry batch correction is enabled.\n      Set from 10 to 100, depending on the number of cell populations/clusters you expect to see.\n      Default: 10\n\n  cbc_knn:\n    type: int?\n    doc: |\n      Specify the number of nearest neighbors used to identify mutual nearest neighbors.\n      Setting this too high will increase runtime and may cause out of memory error.\n      See Chemistry Batch Correction page for more details. Ranges from 5 to 20.\n      Default: 10\n\n  cbc_alpha:\n    type: float?\n    doc: |\n      Specify the threshold of the percentage of matched cells between two batches,\n      which is used to determine if the batch pair will be merged. See Chemistry\n      Batch Correction page for more details. Ranges from 0.05 to 0.5.\n      Default: 0.1\n      \n  cbc_sigma:\n    type: float?\n    doc: |\n      Specify the bandwidth of the Gaussian smoothing kernel used to compute the correction\n      vector for each cell. See Chemistry Batch Correction page for more details. Ranges\n      from 10 to 500.\n      Default: 150\n\n  cbc_realign_panorama:\n    type: boolean?\n    doc: |\n      Specify if two batches will be merged if they are already in the same panorama. Setting\n      this to True will usually improve the performance, but will also increase runtime and\n      memory usage. See Chemistry Batch Correction page for more details. One of true or false.\n      Default: false\n\n  graphclust_neighbors:\n    type: int?\n    doc: |\n      Number of nearest-neighbors to use in the graph-based clustering. Lower values result in\n      higher-granularity clustering. The actual number of neighbors used is the maximum of this\n      value and that determined by neighbor_a and neighbor_b. Set this value to zero to use those\n      values instead. Ranged from 10 to 500, depending on desired granularity.\n      Default: 0\n\n  neighbor_a:\n    type: float?\n    doc: |\n      The number of nearest neighbors, k, used in the graph-based clustering is computed as follows:\n      k = neighbor_a + neighbor_b * log10(n_cells). The actual number of neighbors used is the maximum\n      of this value and graphclust_neighbors. Determines how clustering granularity scales with cell count.\n      Default: -230.0\n\n  neighbor_b:\n    type: float?\n    doc: |\n      The number of nearest neighbors, k, used in the graph-based clustering is computed as follows:\n      k = neighbor_a + neighbor_b * log10(n_cells). The actual number of neighbors used is the maximum of\n      this value and graphclust_neighbors. Determines how clustering granularity scales with cell count.\n      Default: 120.0\n\n  max_clusters:\n    type: int?\n    doc: |\n      Compute K-means clustering using K values of 2 to N. Setting this too high may cause spurious clusters\n      to be called. Ranges from 10 to 50, depending on the number of cell populations / clusters you expect to see.\n      Default: 10\n\n  tsne_input_pcs:\n    type: int?\n    doc: |\n      Subset to top N principal components for TSNE. Change this parameter if you want to see how the TSNE plot\n      changes when using fewer PCs, independent of the clustering / differential expression. You may find that TSNE\n      is faster and/or the output looks better when using fewer PCs. Cannot be set higher than\n      the num_principal_comps parameter.\n      Default: null\n\n  tsne_perplexity:\n    type: int?\n    doc: |\n      TSNE perplexity parameter (see the TSNE FAQ for more details). When analyzing 100k+ cells, increasing this\n      parameter may improve TSNE results, but the algorithm will be slower. Ranges from 30 to 50.\n      Default: 30\n\n  tsne_theta:\n    type: float?\n    doc: |\n      TSNE theta parameter (see the TSNE FAQ for more details). Higher values yield faster, more approximate results\n      (and vice versa). The runtime and memory performance of TSNE will increase dramatically if you set this below 0.25.\n      Ranges from 0 to 1.\n      Default: 0.5\n\n  tsne_max_dims:\n    type: int?\n    doc: |\n      Maximum number of TSNE output dimensions. Set this to 3 to produce both 2D and 3D TSNE projections\n      (note: runtime will increase significantly). Ranges from 2 to 3.\n      Default: 2\n\n  tsne_max_iter:\n    type: int?\n    doc: |\n      Number of total TSNE iterations. Try increasing this if TSNE results do not look good on larger numbers\n      of cells. Runtime increases linearly with number of iterations. Ranges from 1000 to 10000.\n      Default: 1000\n\n  tsne_stop_lying_iter:\n    type: int?\n    doc: |\n      Iteration at which TSNE learning rate is reduced. Try increasing this if TSNE results do not look good\n      on larger numbers of cells. Cannot be set higher than tsne_max_iter.\n      Default: 250\n\n  tsne_mom_switch_iter:\n    type: int?\n    doc: |\n      Iteration at which TSNE momentum is reduced. Try increasing this if TSNE results do not look good on\n      larger numbers of cells. Cannot be set higher than tsne_max_iter. Cannot be set higher than tsne_max_iter.\n      Default: 250\n\n  umap_input_pcs:\n    type: int?\n    doc: |\n      Subset to top N principal components for UMAP. Change this parameter if you want to see how the UMAP plot\n      changes when using fewer PCs, independent of the clustering / differential expression. You may find that\n      UMAP is faster and/or the output looks better when using fewer PCs. Cannot be set higher than the\n      num_principal_comps parameter.\n      Default: null\n\n  umap_n_neighbors:\n    type: int?\n    doc: |\n      Determines the number of neighboring points used in local approximations of manifold structure.\n      Larger values will usually result in more global structure at the loss of detailed local structure.\n      Ranges from 5 to 50.\n      Default: 30\n\n  umap_max_dims:\n    type: int?\n    doc: |\n      Maximum number of UMAP output dimensions. Set this to 3 to produce both 2D and 3D UMAP projections.\n      Ranges from 2 to 3.\n      Default: 2\n\n  umap_min_dist:\n    type: float?\n    doc: |\n      Controls how tightly the embedding is allowed to pack points together. Larger values make embedded\n      points are more evenly distributed, while smaller values make the embedding more accurately with\n      regard to the local structure. Ranges from 0.001 to 0.5.\n      Default: 0.3\n\n  umap_metric:\n    type:\n    - \"null\"\n    - type: enum\n      symbols:\n      - euclidean\n      - manhattan\n      - chebyshev\n      - minkowski\n      - canberra\n      - braycurtis\n      - haversine\n      - mahalanobis\n      - wminkowski\n      - seuclidean\n      - cosine\n      - correlation\n      - hamming\n      - jaccard\n      - dice\n      - russellrao\n      - kulsinski\n      - rogerstanimoto\n      - sokalmichener\n      - sokalsneath\n      - yule\n    doc: |\n      Determines how the distance is computed in the input space.\n      Default: \"correlation\"\n\n  random_seed:\n    type: int?\n    doc: |\n      Random seed. Due to the randomized nature of the algorithms, changing this will produce slightly\n      different results. If the TSNE or UMAP results don't look good, try running multiple times with\n      different seeds and pick the TSNE or UMAP that looks best.\n      Default: 0\n\noutputs:\n\n  secondary_analysis_report_folder:\n    type: Directory\n    outputBinding:\n      glob: \"reanalyzed/outs/analysis\"\n    doc: |\n      Folder with secondary analysis results including dimensionality reduction,\n      cell clustering, and differential expression for reanalyzed results\n\n  web_summary_report:\n    type: File\n    format: iana:text/html\n    outputBinding:\n      glob: \"reanalyzed/outs/web_summary.html\"\n    doc: |\n      Reanalyzed run summary metrics and charts in HTML format\n\n  reanalyze_params:\n    type: File\n    format: iana:text/csv\n    outputBinding:\n      glob: \"reanalyzed/outs/params.csv\"\n    doc: |\n      Copy of the input params CSV file\n\n  loupe_browser_track:\n    type: File\n    outputBinding:\n      glob: \"reanalyzed/outs/cloupe.cloupe\"\n    doc: |\n      Loupe Browser visualization and analysis file for reanalyzed results\n\nbaseCommand: [\"cellranger\", \"reanalyze\", \"--disable-ui\",  \"--id\", \"reanalyzed\"]\n\narguments:\n- valueFrom: $(runtime.outdir)/params.csv    # fails if it's not absolute path\n  prefix: \"--params\"\n  position: 15\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"Cellranger reanalyze - reruns secondary analysis performed on the feature-barcode matrix\"\ns:alternateName: \"Reruns secondary analysis performed on the feature-barcode matrix (dimensionality reduction, clustering and visualization) using different parameter settings\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  Tool runs cellranger reanalyze command to rerun secondary analysis performed on\n  the feature-barcode matrix (dimensionality reduction, clustering and visualization)\n  using different parameter settings.\n\n  Parameters set by default:\n  --disable-ui - no need in any UI when running in Docker container\n  --id - hardcoded to `reanalyzed` as we want to return the content of the\n         output folder as separate outputs\n\n  Skipped parameters:\n  --dry\n  --noexit\n  --nopreflight\n  --description\n  --jobmode\n  --mempercore\n  --maxjobs\n  --jobinterval\n  --overrides\n  --uiport\n\n  Skipped outputs as they are identical to inputs:\n  - Filtered feature-barcode matrices MEX\n  - Filtered feature-barcode matrices HDF5\n  - Copy of the input aggregation CSV\n\n  Notes:\n  - Passing `aggregation_metadata` might not work as it will require additional inputs for\n    all files from that CSV file. Otherwise cellranger will fail to parse it. Address this\n    question when needed.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'aggregation_metadata', 'doc': 'Aggregation CSV metadata file obtained from cellranger aggr.\\nThis allows you to retain any metadata associated with the\\nsamples for display in Loupe Browser.\\n', 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'inputBinding': {'position': 6, 'prefix': '--agg'}, 'type': ['null', 'File']}, {'id': 'cbc_alpha', 'doc': 'Specify the threshold of the percentage of matched cells between two batches,\\nwhich is used to determine if the batch pair will be merged. See Chemistry\\nBatch Correction page for more details. Ranges from 0.05 to 0.5.\\nDefault: 0.1\\n', 'type': ['null', 'float']}, {'id': 'cbc_knn', 'doc': 'Specify the number of nearest neighbors used to identify mutual nearest neighbors.\\nSetting this too high will increase runtime and may cause out of memory error.\\nSee Chemistry Batch Correction page for more details. Ranges from 5 to 20.\\nDefault: 10\\n', 'type': ['null', 'int']}, {'id': 'cbc_realign_panorama', 'doc': 'Specify if two batches will be merged if they are already in the same panorama. Setting\\nthis to True will usually improve the performance, but will also increase runtime and\\nmemory usage. See Chemistry Batch Correction page for more details. One of true or false.\\nDefault: false\\n', 'type': ['null', 'boolean']}, {'id': 'cbc_sigma', 'doc': 'Specify the bandwidth of the Gaussian smoothing kernel used to compute the correction\\nvector for each cell. See Chemistry Batch Correction page for more details. Ranges\\nfrom 10 to 500.\\nDefault: 150\\n', 'type': ['null', 'float']}, {'id': 'excluded_genes', 'doc': 'A CSV file containing a list of gene IDs to exclude for reanalysis (corresponding\\nto the gene_id field of the reference GTF). All gene IDs must be present in\\nthe matrix. The exclusion is applied after setting the gene list with --genes.\\nNote that only gene features are used in secondary analysis. Feature Barcode features\\nare ignored.\\n', 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'inputBinding': {'position': 9, 'prefix': '--exclude-genes'}, 'type': ['null', 'File']}, {'id': 'feature_bc_matrix_h5', 'doc': 'Filtered or raw feature-barcode matrices in HDF5 format\\n', 'format': 'http://edamontology.org/format_3590', 'inputBinding': {'position': 5, 'prefix': '--matrix'}, 'type': 'File'}, {'id': 'force_cells_num', 'doc': 'Force pipeline to use this number of cells, bypassing the cell detection algorithm.\\nUse this if the number of cells estimated by Cell Ranger is not consistent with the\\nbarcode rank plot. If specifying a value that exceeds the original cell count, you\\nmust use the raw_gene_bc_matrices_h5.h5\\n', 'inputBinding': {'position': 10, 'prefix': '--force-cells'}, 'type': ['null', 'int']}, {'id': 'graphclust_neighbors', 'doc': 'Number of nearest-neighbors to use in the graph-based clustering. Lower values result in\\nhigher-granularity clustering. The actual number of neighbors used is the maximum of this\\nvalue and that determined by neighbor_a and neighbor_b. Set this value to zero to use those\\nvalues instead. Ranged from 10 to 500, depending on desired granularity.\\nDefault: 0\\n', 'type': ['null', 'int']}, {'id': 'max_clusters', 'doc': 'Compute K-means clustering using K values of 2 to N. Setting this too high may cause spurious clusters\\nto be called. Ranges from 10 to 50, depending on the number of cell populations / clusters you expect to see.\\nDefault: 10\\n', 'type': ['null', 'int']}, {'id': 'memory_limit', 'doc': 'Set max GB the pipeline may request at one time\\nDefault: all available\\n', 'inputBinding': {'position': 12, 'prefix': '--localmem'}, 'type': ['null', 'int']}, {'id': 'neighbor_a', 'doc': 'The number of nearest neighbors, k, used in the graph-based clustering is computed as follows:\\nk = neighbor_a + neighbor_b * log10(n_cells). The actual number of neighbors used is the maximum\\nof this value and graphclust_neighbors. Determines how clustering granularity scales with cell count.\\nDefault: -230.0\\n', 'type': ['null', 'float']}, {'id': 'neighbor_b', 'doc': 'The number of nearest neighbors, k, used in the graph-based clustering is computed as follows:\\nk = neighbor_a + neighbor_b * log10(n_cells). The actual number of neighbors used is the maximum of\\nthis value and graphclust_neighbors. Determines how clustering granularity scales with cell count.\\nDefault: 120.0\\n', 'type': ['null', 'float']}, {'id': 'num_analysis_bcs', 'doc': 'Randomly subset data to N barcodes for all analysis. Reduce this parameter if you\\nwant to improve performance or simulate results from lower cell counts. Cannot be\\nset higher than the available number of cells.\\nDefault: null\\n', 'type': ['null', 'int']}, {'id': 'num_pca_bcs', 'doc': 'Randomly subset data to N barcodes when computing PCA projection (the most memory-intensive\\nstep). The PCA projection will still be applied to the full dataset, i.e. your final results\\nwill still reflect all the data. Try reducing this parameter if your analysis is running out\\nof memory. Cannot be set higher than the available number of cells.\\nDefault: null\\n', 'type': ['null', 'int']}, {'id': 'num_pca_genes', 'doc': 'Subset data to the top N genes (ranked by normalized dispersion) when computing PCA.\\nDifferential expression will still reflect all genes. Try reducing this parameter if\\nyour analysis is running out of memory. Cannot be set higher than the number of genes\\nin the reference transcriptome.\\nDefault: null\\n', 'type': ['null', 'int']}, {'id': 'num_principal_comps', 'doc': 'Compute N principal components for PCA. Setting this too high may cause spurious clusters\\nto be called. The default value is 100 when the chemistry batch correction is enabled.\\nSet from 10 to 100, depending on the number of cell populations/clusters you expect to see.\\nDefault: 10\\n', 'type': ['null', 'int']}, {'id': 'random_seed', 'doc': \"Random seed. Due to the randomized nature of the algorithms, changing this will produce slightly\\ndifferent results. If the TSNE or UMAP results don't look good, try running multiple times with\\ndifferent seeds and pick the TSNE or UMAP that looks best.\\nDefault: 0\\n\", 'type': ['null', 'int']}, {'id': 'selected_barcodes', 'doc': 'A CSV file containing a list of cell barcodes to use for reanalysis,\\ne.g. barcodes exported from Loupe Browser. All barcodes must be present\\nin the matrix.\\n', 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'inputBinding': {'position': 7, 'prefix': '--barcodes'}, 'type': ['null', 'File']}, {'id': 'selected_genes', 'doc': 'A CSV file containing a list of gene IDs to use for reanalysis (corresponding\\nto the gene_id field of the reference GTF). All gene IDs must be present in\\nthe matrix. Note that only gene features are used in secondary analysis.\\nFeature Barcode features are ignored.\\n', 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'inputBinding': {'position': 8, 'prefix': '--genes'}, 'type': ['null', 'File']}, {'id': 'threads', 'doc': 'Set max cores the pipeline may request at one time.\\nDefault: all available\\n', 'inputBinding': {'position': 11, 'prefix': '--localcores'}, 'type': ['null', 'int']}, {'id': 'tsne_input_pcs', 'doc': 'Subset to top N principal components for TSNE. Change this parameter if you want to see how the TSNE plot\\nchanges when using fewer PCs, independent of the clustering / differential expression. You may find that TSNE\\nis faster and/or the output looks better when using fewer PCs. Cannot be set higher than\\nthe num_principal_comps parameter.\\nDefault: null\\n', 'type': ['null', 'int']}, {'id': 'tsne_max_dims', 'doc': 'Maximum number of TSNE output dimensions. Set this to 3 to produce both 2D and 3D TSNE projections\\n(note: runtime will increase significantly). Ranges from 2 to 3.\\nDefault: 2\\n', 'type': ['null', 'int']}, {'id': 'tsne_max_iter', 'doc': 'Number of total TSNE iterations. Try increasing this if TSNE results do not look good on larger numbers\\nof cells. Runtime increases linearly with number of iterations. Ranges from 1000 to 10000.\\nDefault: 1000\\n', 'type': ['null', 'int']}, {'id': 'tsne_mom_switch_iter', 'doc': 'Iteration at which TSNE momentum is reduced. Try increasing this if TSNE results do not look good on\\nlarger numbers of cells. Cannot be set higher than tsne_max_iter. Cannot be set higher than tsne_max_iter.\\nDefault: 250\\n', 'type': ['null', 'int']}, {'id': 'tsne_perplexity', 'doc': 'TSNE perplexity parameter (see the TSNE FAQ for more details). When analyzing 100k+ cells, increasing this\\nparameter may improve TSNE results, but the algorithm will be slower. Ranges from 30 to 50.\\nDefault: 30\\n', 'type': ['null', 'int']}, {'id': 'tsne_stop_lying_iter', 'doc': 'Iteration at which TSNE learning rate is reduced. Try increasing this if TSNE results do not look good\\non larger numbers of cells. Cannot be set higher than tsne_max_iter.\\nDefault: 250\\n', 'type': ['null', 'int']}, {'id': 'tsne_theta', 'doc': 'TSNE theta parameter (see the TSNE FAQ for more details). Higher values yield faster, more approximate results\\n(and vice versa). The runtime and memory performance of TSNE will increase dramatically if you set this below 0.25.\\nRanges from 0 to 1.\\nDefault: 0.5\\n', 'type': ['null', 'float']}, {'id': 'umap_input_pcs', 'doc': 'Subset to top N principal components for UMAP. Change this parameter if you want to see how the UMAP plot\\nchanges when using fewer PCs, independent of the clustering / differential expression. You may find that\\nUMAP is faster and/or the output looks better when using fewer PCs. Cannot be set higher than the\\nnum_principal_comps parameter.\\nDefault: null\\n', 'type': ['null', 'int']}, {'id': 'umap_max_dims', 'doc': 'Maximum number of UMAP output dimensions. Set this to 3 to produce both 2D and 3D UMAP projections.\\nRanges from 2 to 3.\\nDefault: 2\\n', 'type': ['null', 'int']}, {'id': 'umap_metric', 'doc': 'Determines how the distance is computed in the input space.\\nDefault: \"correlation\"\\n', 'type': ['null', {'name': '_:11adf527-08cc-4cf4-8119-9592771160e7', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/euclidean', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/manhattan', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/chebyshev', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/minkowski', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/canberra', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/braycurtis', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/haversine', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/mahalanobis', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/wminkowski', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/seuclidean', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/cosine', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/correlation', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/hamming', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/jaccard', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/dice', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/russellrao', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/kulsinski', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/rogerstanimoto', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/sokalmichener', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/sokalsneath', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#umap_metric/yule'], 'type': 'enum'}]}, {'id': 'umap_min_dist', 'doc': 'Controls how tightly the embedding is allowed to pack points together. Larger values make embedded\\npoints are more evenly distributed, while smaller values make the embedding more accurately with\\nregard to the local structure. Ranges from 0.001 to 0.5.\\nDefault: 0.3\\n', 'type': ['null', 'float']}, {'id': 'umap_n_neighbors', 'doc': 'Determines the number of neighboring points used in local approximations of manifold structure.\\nLarger values will usually result in more global structure at the loss of detailed local structure.\\nRanges from 5 to 50.\\nDefault: 30\\n', 'type': ['null', 'int']}, {'id': 'virt_memory_limit', 'doc': 'Set max virtual address space in GB for the pipeline\\nDefault: all available\\n', 'inputBinding': {'position': 13, 'prefix': '--localvmem'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'loupe_browser_track', 'doc': 'Loupe Browser visualization and analysis file for reanalyzed results\\n', 'outputBinding': {'glob': 'reanalyzed/outs/cloupe.cloupe'}, 'type': 'File'}, {'id': 'reanalyze_params', 'doc': 'Copy of the input params CSV file\\n', 'outputBinding': {'glob': 'reanalyzed/outs/params.csv'}, 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'type': 'File'}, {'id': 'secondary_analysis_report_folder', 'doc': 'Folder with secondary analysis results including dimensionality reduction,\\ncell clustering, and differential expression for reanalyzed results\\n', 'outputBinding': {'glob': 'reanalyzed/outs/analysis'}, 'type': 'Directory'}, {'id': 'web_summary_report', 'doc': 'Reanalyzed run summary metrics and charts in HTML format\\n', 'outputBinding': {'glob': 'reanalyzed/outs/web_summary.html'}, 'format': 'https://www.iana.org/assignments/media-types/text/html', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'cumulusprod/cellranger:4.0.0'}, {'class': 'InitialWorkDirRequirement', 'listing': '${\\n    const skipped_ids = [\\n      \"feature_bc_matrix_h5\",\\n      \"aggregation_metadata\",\\n      \"selected_barcodes\",\\n      \"selected_genes\",\\n      \"excluded_genes\",\\n      \"force_cells_num\",\\n      \"threads\",\\n      \"memory_limit\",\\n      \"virt_memory_limit\"\\n    ]\\n    var entry = \"\";\\n    for (const id in inputs){\\n      if (skipped_ids.includes(id) || !inputs[id]){\\n        continue;\\n      }\\n      entry += id + \",\" + inputs[id] + \"\\\\n\";\\n    }\\n    return [{\\n      \"entry\": entry,\\n      \"entryname\": runtime.outdir + \"/params.csv\"\\n    }];\\n}\\n'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['cellranger', 'reanalyze', '--disable-ui', '--id', 'reanalyzed']",
    "cwl_arguments": "[{'position': 15, 'prefix': '--params', 'valueFrom': '$(runtime.outdir)/params.csv'}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Tool runs cellranger reanalyze command to rerun secondary analysis performed on\nthe feature-barcode matrix (dimensionality reduction, clustering and visualization)\nusing different parameter settings.\n\nParameters set by default:\n--disable-ui - no need in any UI when running in Docker container\n--id - hardcoded to `reanalyzed` as we want to return the content of the\n       output folder as separate outputs\n\nSkipped parameters:\n--dry\n--noexit\n--nopreflight\n--description\n--jobmode\n--mempercore\n--maxjobs\n--jobinterval\n--overrides\n--uiport\n\nSkipped outputs as they are identical to inputs:\n- Filtered feature-barcode matrices MEX\n- Filtered feature-barcode matrices HDF5\n- Copy of the input aggregation CSV\n\nNotes:\n- Passing `aggregation_metadata` might not work as it will require additional inputs for\n  all files from that CSV file. Otherwise cellranger will fail to parse it. Address this\n  question when needed.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "Cellranger reanalyze - reruns secondary analysis performed on the feature-barcode matrix",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "Reruns secondary analysis performed on the feature-barcode matrix (dimensionality reduction, clustering and visualization) using different parameter settings",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "crossmap/crossmap.cwl",
    "sha": "9befbfd44098b748687634924a06524131a03269",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/crossmap/crossmap.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  - class: InlineJavascriptRequirement\n    expressionLib:\n    - var get_output_filename = function(ext) {\n        var alt_ext = \"\";\n        if (inputs.input_file_type == \"bam\") {\n          alt_ext = \".sorted.bam\";\n        } else if (inputs.input_file_type == \"bigwig\") {\n          alt_ext = \".bw\";\n        } else if (inputs.input_file_type == \"bed\") {\n          ext = \".bedGraph\";\n        } else {\n          alt_ext = \"\";\n        }\n        ext = (ext || ext==\"\")?ext:alt_ext;\n        if (inputs.output_basename == \"\"){\n          var root = inputs.input_file.basename.split('.').slice(0,-1).join('.');\n          return (root == \"\")?inputs.input_file.basename+ext:root+ext;\n        } else {\n          return inputs.output_basename+ext;\n        }\n      };\n    - var get_log_filename = function() {\n        var ext = \".log\";\n        if (inputs.output_basename == \"\"){\n          var root = inputs.input_file.basename.split('.').slice(0,-1).join('.');\n          return (root == \"\")?inputs.input_file.basename+ext:root+ext;\n        } else {\n          return inputs.output_basename+ext;\n        }\n      };\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/crossmap:0.2.7--py27_0\n  SoftwareRequirement:\n    packages:\n      bwa:\n        version: [ \"0.2.7\" ]\n        specs: [ https://identifiers.org/biotools/crossmap ]\n\ninputs:\n\n  input_file_type:\n    type: string\n    inputBinding:\n      position: 1\n    doc: |\n      bam\t    convert alignment file in BAM format.\n      bed\t    convert genome cooridnate or annotation file in BED or BED-like format.\n      bigwig\tconvert genome coordinate file in BigWig format.\n\n  chain_file:\n    type: File\n    inputBinding:\n      position: 2\n    doc: |\n      Chain file\n\n  input_file:\n    type: File\n    inputBinding:\n      position: 3\n    secondaryFiles: |\n      ${\n        return (inputs.input_file_type == \"bam\")?self.basename+\".bai\":[];\n      }\n    doc: |\n      Input file BAM(+bai), BED, BigWig.\n\n  output_basename:\n    type: string?\n    inputBinding:\n      position: 4\n      valueFrom: $(get_output_filename(\"\"))\n    default: \"\"\n    doc: |\n      Name for the generated output file\n\n  bam_insert_size:\n    type: int?\n    inputBinding:\n      position: 5\n      prefix: -m\n    doc: |\n      For BAM only: Average insert size of pair-end sequencing (bp). [default=200.0]\n\n  bam_stdev:\n    type: float?\n    inputBinding:\n      position: 6\n      prefix: -s\n    doc: |\n      For BAM only: Stanadard deviation of insert size. [default=30.0]\n\n  bam_fold:\n    type: float?\n    inputBinding:\n      position: 7\n      prefix: -t\n    doc: |\n      For BAM only: A mapped pair is considered as \"proper pair\" if both\n                    ends mapped to different strand and the distance\n                    between them is less then '-t' * stdev from the mean.\n                    [default=3.0]\n\n  bam_append_tags:\n    type: boolean?\n    inputBinding:\n      position: 8\n      prefix: -a\n    doc: |\n      For BAM only: Add tag to each alignment\n\noutputs:\n\n  projected_file:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n          return get_output_filename();\n        }\n    secondaryFiles: |\n      ${\n        if (inputs.input_file_type == \"bam\") {\n          return self.basename + \".bai\";\n        } else {\n          return \"null\";\n        }\n      }\n    doc: |\n      Projected output file\n\n  unmap_file:\n    type: File?\n    outputBinding:\n      glob: \"*.unmap\"\n    doc: |\n      Unmap output file\n\n  log_file:\n    type: File\n    outputBinding:\n      glob: $(get_log_filename())\n    doc: |\n      Log file\n\nstdout: $(get_log_filename())\n\nbaseCommand: [\"CrossMap.py\"]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"crossmap\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Runs CrossMap.py script to project input BAM, BED, BIGWIG file based on input chain file.\n  Not supported input file types: SAM, GFF, VCF, WIG\n\n  If `output_basename` is not set, call get_output_filename() and get_log_filename() functions to\n  get default output and log filenames. Input `output_basename` should not include extension.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam_append_tags', 'doc': 'For BAM only: Add tag to each alignment\\n', 'inputBinding': {'position': 8, 'prefix': '-a'}, 'type': ['null', 'boolean']}, {'id': 'bam_fold', 'doc': 'For BAM only: A mapped pair is considered as \"proper pair\" if both\\n              ends mapped to different strand and the distance\\n              between them is less then \\'-t\\' * stdev from the mean.\\n              [default=3.0]\\n', 'inputBinding': {'position': 7, 'prefix': '-t'}, 'type': ['null', 'float']}, {'id': 'bam_insert_size', 'doc': 'For BAM only: Average insert size of pair-end sequencing (bp). [default=200.0]\\n', 'inputBinding': {'position': 5, 'prefix': '-m'}, 'type': ['null', 'int']}, {'id': 'bam_stdev', 'doc': 'For BAM only: Stanadard deviation of insert size. [default=30.0]\\n', 'inputBinding': {'position': 6, 'prefix': '-s'}, 'type': ['null', 'float']}, {'id': 'chain_file', 'doc': 'Chain file\\n', 'inputBinding': {'position': 2}, 'type': 'File'}, {'id': 'input_file', 'secondaryFiles': '${\\n  return (inputs.input_file_type == \"bam\")?self.basename+\".bai\":[];\\n}\\n', 'doc': 'Input file BAM(+bai), BED, BigWig.\\n', 'inputBinding': {'position': 3}, 'type': 'File'}, {'id': 'input_file_type', 'doc': 'bam\\t    convert alignment file in BAM format.\\nbed\\t    convert genome cooridnate or annotation file in BED or BED-like format.\\nbigwig\\tconvert genome coordinate file in BigWig format.\\n', 'inputBinding': {'position': 1}, 'type': 'string'}, {'id': 'output_basename', 'doc': 'Name for the generated output file\\n', 'inputBinding': {'position': 4, 'valueFrom': '$(get_output_filename(\"\"))'}, 'default': '', 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'log_file', 'doc': 'Log file\\n', 'outputBinding': {'glob': '$(get_log_filename())'}, 'type': 'File'}, {'id': 'projected_file', 'secondaryFiles': '${\\n  if (inputs.input_file_type == \"bam\") {\\n    return self.basename + \".bai\";\\n  } else {\\n    return \"null\";\\n  }\\n}\\n', 'doc': 'Projected output file\\n', 'outputBinding': {'glob': '${\\n  return get_output_filename();\\n}\\n'}, 'type': 'File'}, {'id': 'unmap_file', 'doc': 'Unmap output file\\n', 'outputBinding': {'glob': '*.unmap'}, 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/crossmap:0.2.7--py27_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bwa', 'version': ['0.2.7'], 'specs': ['https://identifiers.org/biotools/crossmap']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['CrossMap.py']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var get_output_filename = function(ext) { var alt_ext = \"\"; if (inputs.input_file_type == \"bam\") { alt_ext = \".sorted.bam\"; } else if (inputs.input_file_type == \"bigwig\") { alt_ext = \".bw\"; } else if (inputs.input_file_type == \"bed\") { ext = \".bedGraph\"; } else { alt_ext = \"\"; } ext = (ext || ext==\"\")?ext:alt_ext; if (inputs.output_basename == \"\"){ var root = inputs.input_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.input_file.basename+ext:root+ext; } else { return inputs.output_basename+ext; } };', 'var get_log_filename = function() { var ext = \".log\"; if (inputs.output_basename == \"\"){ var root = inputs.input_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.input_file.basename+ext:root+ext; } else { return inputs.output_basename+ext; } };']}]",
    "cwl_doc": "Runs CrossMap.py script to project input BAM, BED, BIGWIG file based on input chain file.\nNot supported input file types: SAM, GFF, VCF, WIG\n\nIf `output_basename` is not set, call get_output_filename() and get_log_filename() functions to\nget default output and log filenames. Input `output_basename` should not include extension.\n",
    "cwl_stdout": "$(get_log_filename())",
    "cwl_s:name": "crossmap",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "cutadapt/cutadapt-paired.cwl",
    "sha": "3368f9740ea5bf2007e75757bd53348a97db13e5",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/cutadapt/cutadapt-paired.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n   dockerPull: quay.io/biocontainers/cutadapt:3.7--py39hbf8eff0_1\n  SoftwareRequirement:\n    packages:\n      cutadapt:\n        version: [ \"3.7\" ]\n        specs: [ https://identifiers.org/biotools/cutadapt ]\n\nbaseCommand: cutadapt\n\ninputs:\n  reads_1:\n    type: File\n    inputBinding: {}\n  reads_2:\n    type: File\n    inputBinding: {}\n  minimum_length:\n    type: int?\n    inputBinding:\n      prefix: --minimum-length\n\n  quality_cutoff:\n    type: int?\n    inputBinding:\n      prefix: --quality-cutoff\n\nstdout: report.txt\n\narguments:\n  - prefix: --output\n    valueFrom: $(inputs.reads_1.basename).trimmed$(inputs.reads_1.nameext)\n  - prefix: --paired-output\n    valueFrom: $(inputs.reads_2.basename).trimmed$(inputs.reads_2.nameext)\n\noutputs:\n  report: stdout\n  trimmed_reads_1:\n    type: File\n    format: $(inputs.reads_1.format)\n    outputBinding:\n      glob: $(inputs.reads_1.basename).trimmed$(inputs.reads_1.nameext)\n  trimmed_reads_2:\n    type: File\n    format: $(inputs.reads_2.format)\n    outputBinding:\n      glob: $(inputs.reads_2.basename).trimmed$(inputs.reads_2.nameext)\n\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'minimum_length', 'inputBinding': {'prefix': '--minimum-length'}, 'type': ['null', 'int']}, {'id': 'quality_cutoff', 'inputBinding': {'prefix': '--quality-cutoff'}, 'type': ['null', 'int']}, {'id': 'reads_1', 'inputBinding': {}, 'type': 'File'}, {'id': 'reads_2', 'inputBinding': {}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'report', 'type': 'stdout'}, {'id': 'trimmed_reads_1', 'outputBinding': {'glob': '$(inputs.reads_1.basename).trimmed$(inputs.reads_1.nameext)'}, 'format': '$(inputs.reads_1.format)', 'type': 'File'}, {'id': 'trimmed_reads_2', 'outputBinding': {'glob': '$(inputs.reads_2.basename).trimmed$(inputs.reads_2.nameext)'}, 'format': '$(inputs.reads_2.format)', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/cutadapt:3.7--py39hbf8eff0_1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'cutadapt', 'version': ['3.7'], 'specs': ['https://identifiers.org/biotools/cutadapt']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "cutadapt",
    "cwl_arguments": "[{'prefix': '--output', 'valueFrom': '$(inputs.reads_1.basename).trimmed$(inputs.reads_1.nameext)'}, {'prefix': '--paired-output', 'valueFrom': '$(inputs.reads_2.basename).trimmed$(inputs.reads_2.nameext)'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "report.txt",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "deeptools/deeptools_alignmentsieve.cwl",
    "sha": "bfcd2e9abbf98103bddae23eae699e763458d5e3",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/deeptools/deeptools_alignmentsieve.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n- class: InlineJavascriptRequirement\n  expressionLib:\n  - var default_output_filename = function() {\n        if (inputs.output_filename == \"\"){\n            var root = inputs.bambai_pair.basename.split('.').slice(0,-1).join('.');\n            return (root == \"\")?inputs.bambai_pair.basename+\".bam\":root+\".bam\";\n        } else {\n            return inputs.output_filename;\n        }\n    };\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/deeptools:v0.0.1\n  SoftwareRequirement:\n    packages:\n      deeptools:\n        specs: [ https://identifiers.org/biotools/deeptools ]\n        version: [ \"3.1.1\" ]\n\ninputs:\n\n  bambai_pair:\n    type: File\n    secondaryFiles: $(self.basename+\".bai\")  # due to bug in cwltool==1.0.20190621234233\n    inputBinding:\n      position: 5\n      prefix: \"--bam\"\n    doc: \"An indexed BAM file\"\n\n  min_fragment_length:\n    type: int?\n    inputBinding:\n      position: 6\n      prefix: \"--minFragmentLength\"\n    doc: \"The minimum fragment length needed for read/pair inclusion\"\n\n  max_fragment_length:\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: \"--maxFragmentLength\"\n    doc: \"The maximum fragment length needed for read/pair inclusion\"\n\n  min_mapping_quality:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: \"--minMappingQuality\"\n    doc: \"If set, only reads that have a mapping quality score of at least this are considered\"\n\n  ignore_duplicates:\n    type: boolean?\n    inputBinding:\n      position: 9\n      prefix: \"--ignoreDuplicates\"\n    doc: |\n      If set, reads that have the same orientation and start position will be considered only once.\n      If reads are paired, the mate\u2019s position also has to coincide to ignore a read\n\n  shift:\n    type:\n      - \"null\"\n      - int[]\n    inputBinding:\n      position: 10\n      prefix: \"--shift\"\n    doc: \"Shift the left and right end of a read for BAM files\"\n\n  atac_shift:\n    type: boolean?\n    inputBinding:\n      position: 11\n      prefix: \"--ATACshift\"\n    doc: \"Shift commonly done for ATAC-seq. This is equivalent to \u2013shift 4 -5 5 -4\"\n\n  blacklisted_regions:\n    type: File?\n    inputBinding:\n      position: 12\n      prefix: \"--blackListFileName\"\n    doc: \"A BED or GTF file containing regions that should be excluded from all analyses\"\n\n  output_filename:\n    type: string?\n    inputBinding:\n      position: 13\n      prefix: \"--outFile\"\n      valueFrom: $(default_output_filename())\n    default: \"\"\n    doc: \"The file to write results to. These are the alignments or fragments that pass the filtering criteria\"\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 14\n      prefix: \"--numberOfProcessors\"\n    doc: \"Number of processors to use\"\n\noutputs:\n\n  filtered_bam_file:\n    type: File\n    outputBinding:\n      glob: \"*.bam\"\n    doc: \"Filtered BAM file\"\n\n  alignmentsieve_log:\n    type: File\n    outputBinding:\n      glob: \"*.log\"\n    doc: \"alignmentSieve log\"\n\nbaseCommand: [\"alignmentSieve\", \"--filterMetrics\", \"alignmentsieve.log\"]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"deeptools_alignmentsieve\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  For BAM files only. Only selected parameters are implemented.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'atac_shift', 'doc': 'Shift commonly done for ATAC-seq. This is equivalent to \u2013shift 4 -5 5 -4', 'inputBinding': {'position': 11, 'prefix': '--ATACshift'}, 'type': ['null', 'boolean']}, {'id': 'bambai_pair', 'secondaryFiles': '$(self.basename+\".bai\")', 'doc': 'An indexed BAM file', 'inputBinding': {'position': 5, 'prefix': '--bam'}, 'type': 'File'}, {'id': 'blacklisted_regions', 'doc': 'A BED or GTF file containing regions that should be excluded from all analyses', 'inputBinding': {'position': 12, 'prefix': '--blackListFileName'}, 'type': ['null', 'File']}, {'id': 'ignore_duplicates', 'doc': 'If set, reads that have the same orientation and start position will be considered only once.\\nIf reads are paired, the mate\u2019s position also has to coincide to ignore a read\\n', 'inputBinding': {'position': 9, 'prefix': '--ignoreDuplicates'}, 'type': ['null', 'boolean']}, {'id': 'max_fragment_length', 'doc': 'The maximum fragment length needed for read/pair inclusion', 'inputBinding': {'position': 7, 'prefix': '--maxFragmentLength'}, 'type': ['null', 'int']}, {'id': 'min_fragment_length', 'doc': 'The minimum fragment length needed for read/pair inclusion', 'inputBinding': {'position': 6, 'prefix': '--minFragmentLength'}, 'type': ['null', 'int']}, {'id': 'min_mapping_quality', 'doc': 'If set, only reads that have a mapping quality score of at least this are considered', 'inputBinding': {'position': 8, 'prefix': '--minMappingQuality'}, 'type': ['null', 'int']}, {'id': 'output_filename', 'doc': 'The file to write results to. These are the alignments or fragments that pass the filtering criteria', 'inputBinding': {'position': 13, 'prefix': '--outFile', 'valueFrom': '$(default_output_filename())'}, 'default': '', 'type': ['null', 'string']}, {'id': 'shift', 'doc': 'Shift the left and right end of a read for BAM files', 'inputBinding': {'position': 10, 'prefix': '--shift'}, 'type': ['null', {'items': 'int', 'type': 'array'}]}, {'id': 'threads', 'doc': 'Number of processors to use', 'inputBinding': {'position': 14, 'prefix': '--numberOfProcessors'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'alignmentsieve_log', 'doc': 'alignmentSieve log', 'outputBinding': {'glob': '*.log'}, 'type': 'File'}, {'id': 'filtered_bam_file', 'doc': 'Filtered BAM file', 'outputBinding': {'glob': '*.bam'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/deeptools:v0.0.1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'deeptools', 'version': ['3.1.1'], 'specs': ['https://identifiers.org/biotools/deeptools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['alignmentSieve', '--filterMetrics', 'alignmentsieve.log']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { if (inputs.output_filename == \"\"){ var root = inputs.bambai_pair.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.bambai_pair.basename+\".bam\":root+\".bam\"; } else { return inputs.output_filename; } };']}]",
    "cwl_doc": "For BAM files only. Only selected parameters are implemented.\n",
    "cwl_stdout": null,
    "cwl_s:name": "deeptools_alignmentsieve",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "deeptools/deeptools_bamCoverage.cwl",
    "sha": "4faa29d98862f6ea8e06a3ca5eb74141ff2806e7",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/deeptools/deeptools_bamCoverage.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nrequirements:\n  - class: InlineJavascriptRequirement\n  - class: StepInputExpressionRequirement\n\ndoc: |\n  Generates coverage tracks in bedgraph or bigiwig format from BAM file.\n  Normalization by spike-in reads is supported.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/deeptools:3.1.1\n  SoftwareRequirement:\n    packages:\n      deeptools:\n        specs: [ https://identifiers.org/biotools/deeptools ]\n        version: [ \"3.1.1\" ]\n\nbaseCommand: bamCoverage\narguments:  \n  - valueFrom: $(inputs.bam.nameroot).bigwig\n    prefix: --outFileName\n    position: 10\n  - valueFrom: |\n        ${ \n          if( inputs.spike_in_count == null ){\n            return inputs.normalizeUsing\n          }\n          else{\n            return null \n          }\n        }\n    prefix: --normalizeUsing\n    position: 10\n  \ninputs:\n  bam:\n    doc: bam file as input; needs bai index file in the same directory\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n        position: 100\n        prefix: --bam\n  effective_genome_size:\n    doc: |\n      the effectively mappable genome size, \n      see: https://deeptools.readthedocs.io/en/latest/content/feature/effectiveGenomeSize.html\n    type: long\n    inputBinding:\n        position: 10\n        prefix: --effectiveGenomeSize\n  bin_size:\n    type: int\n    default: 10\n    inputBinding:\n      prefix: --binSize\n      position: 10\n  ignoreForNormalization:\n    type:\n      type: array\n      items: string\n    default: [\"chrX\", \"chrY\", \"chrM\"]\n    inputBinding:\n      prefix: --ignoreForNormalization\n      position: 10\n  normalizeUsing:\n    type: string\n    default: \"RPGC\"\n  extendReads:\n    doc: For single end reads, the fragment size should be specified here.\n    type: int?\n    inputBinding:\n      prefix: --extendReads\n      position: 10\n  spike_in_count:\n    doc: |\n      Number of reads aligned to the spike in reference, optional.\n      If specified, coverage will be multiplied by 1/spike_in_count and\n      normalizeUsing will be ignored.\n    type: long?\n    inputBinding:\n      position: 10\n      prefix: --scaleFactor\n      valueFrom: |\n        ${ \n          if( self == null ){\n            return null\n          }\n          else{\n            return (1.0 / parseFloat(self)) \n          }\n        }\n  outFileFormat:\n    doc: bigiwg or bedgraph\n    type: string\n    default: bigwig\n    inputBinding:\n      position: 10\n      prefix: --outFileFormat\n\noutputs:\n  bigwig:\n    type: File\n    outputBinding:\n      glob: $(inputs.bam.nameroot).bigwig\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam', 'secondaryFiles': '.bai', 'doc': 'bam file as input; needs bai index file in the same directory', 'inputBinding': {'position': 100, 'prefix': '--bam'}, 'type': 'File'}, {'id': 'bin_size', 'inputBinding': {'position': 10, 'prefix': '--binSize'}, 'default': 10, 'type': 'int'}, {'id': 'effective_genome_size', 'doc': 'the effectively mappable genome size, \\nsee: https://deeptools.readthedocs.io/en/latest/content/feature/effectiveGenomeSize.html\\n', 'inputBinding': {'position': 10, 'prefix': '--effectiveGenomeSize'}, 'type': 'long'}, {'id': 'extendReads', 'doc': 'For single end reads, the fragment size should be specified here.', 'inputBinding': {'position': 10, 'prefix': '--extendReads'}, 'type': ['null', 'int']}, {'id': 'ignoreForNormalization', 'inputBinding': {'position': 10, 'prefix': '--ignoreForNormalization'}, 'default': ['chrX', 'chrY', 'chrM'], 'type': {'items': 'string', 'type': 'array'}}, {'id': 'normalizeUsing', 'default': 'RPGC', 'type': 'string'}, {'id': 'outFileFormat', 'doc': 'bigiwg or bedgraph', 'inputBinding': {'position': 10, 'prefix': '--outFileFormat'}, 'default': 'bigwig', 'type': 'string'}, {'id': 'spike_in_count', 'doc': 'Number of reads aligned to the spike in reference, optional.\\nIf specified, coverage will be multiplied by 1/spike_in_count and\\nnormalizeUsing will be ignored.\\n', 'inputBinding': {'position': 10, 'prefix': '--scaleFactor', 'valueFrom': '${ \\n  if( self == null ){\\n    return null\\n  }\\n  else{\\n    return (1.0 / parseFloat(self)) \\n  }\\n}\\n'}, 'type': ['null', 'long']}]",
    "cwl_outputs": "[{'id': 'bigwig', 'outputBinding': {'glob': '$(inputs.bam.nameroot).bigwig'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'kerstenbreuer/deeptools:3.1.1'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 20000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'deeptools', 'version': ['3.1.1'], 'specs': ['https://identifiers.org/biotools/deeptools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bamCoverage",
    "cwl_arguments": "[{'position': 10, 'prefix': '--outFileName', 'valueFrom': '$(inputs.bam.nameroot).bigwig'}, {'position': 10, 'prefix': '--normalizeUsing', 'valueFrom': '${ \\n  if( inputs.spike_in_count == null ){\\n    return inputs.normalizeUsing\\n  }\\n  else{\\n    return null \\n  }\\n}\\n'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}, {'class': 'StepInputExpressionRequirement'}]",
    "cwl_doc": "Generates coverage tracks in bedgraph or bigiwig format from BAM file.\nNormalization by spike-in reads is supported.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "deeptools/deeptools_plotCoverage.cwl",
    "sha": "f65076f0456b28256f79c5c24c244eddaa87941b",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/deeptools/deeptools_plotCoverage.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Create a plot showing global coverage for reads provided in BAM.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/deeptools:3.1.1\n  SoftwareRequirement:\n    packages:\n      deeptools:\n        specs: [ https://identifiers.org/biotools/deeptools ]\n        version: [ \"3.1.1\" ]\n\nbaseCommand: plotCoverage\narguments:\n  - valueFrom: $(inputs.sample_id)\n    prefix: --labels\n    position: 10\n  - valueFrom: $(inputs.sample_id).plot_cov.png\n    prefix: --plotFile\n    position: 10\n  - valueFrom: $(inputs.sample_id).plot_cov.tsv\n    prefix: --outRawCounts\n    position: 10\n  \ninputs:\n  bam:\n    doc: must be indexed\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n        position: 100\n        prefix: --bamfiles\n  extendReads:\n    doc: For single end reads, the fragment size should be specified here.\n    type: int?\n    inputBinding:\n      prefix: --extendReads\n      position: 10\n  sample_id:\n    type: string\n    \noutputs:\n  qc_plot_coverage_plot:\n    type: File\n    outputBinding:\n      glob: $(inputs.sample_id).plot_cov.png\n  qc_plot_coverage_tsv:\n    type: File\n    outputBinding:\n      glob: $(inputs.sample_id).plot_cov.tsv\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam', 'secondaryFiles': '.bai', 'doc': 'must be indexed', 'inputBinding': {'position': 100, 'prefix': '--bamfiles'}, 'type': 'File'}, {'id': 'extendReads', 'doc': 'For single end reads, the fragment size should be specified here.', 'inputBinding': {'position': 10, 'prefix': '--extendReads'}, 'type': ['null', 'int']}, {'id': 'sample_id', 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'qc_plot_coverage_plot', 'outputBinding': {'glob': '$(inputs.sample_id).plot_cov.png'}, 'type': 'File'}, {'id': 'qc_plot_coverage_tsv', 'outputBinding': {'glob': '$(inputs.sample_id).plot_cov.tsv'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'kerstenbreuer/deeptools:3.1.1'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 15000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'deeptools', 'version': ['3.1.1'], 'specs': ['https://identifiers.org/biotools/deeptools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "plotCoverage",
    "cwl_arguments": "[{'position': 10, 'prefix': '--labels', 'valueFrom': '$(inputs.sample_id)'}, {'position': 10, 'prefix': '--plotFile', 'valueFrom': '$(inputs.sample_id).plot_cov.png'}, {'position': 10, 'prefix': '--outRawCounts', 'valueFrom': '$(inputs.sample_id).plot_cov.tsv'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Create a plot showing global coverage for reads provided in BAM.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "deeptools/deeptools_plotFingerprint.cwl",
    "sha": "b94a74a4ab3bc8bac5ac40ef45eb3254c53c327f",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/deeptools/deeptools_plotFingerprint.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Creates Fingerprint plots showing enrichment in coverage.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/deeptools:3.1.1\n  SoftwareRequirement:\n    packages:\n      deeptools:\n        specs: [ https://identifiers.org/biotools/deeptools ]\n        version: [ \"3.1.1\" ]\n\nbaseCommand: plotFingerprint\narguments:\n  - valueFrom: $(inputs.sample_id)\n    prefix: --labels\n    position: 10\n  - valueFrom: $(inputs.sample_id).plot_fingerp.png\n    prefix: --plotFile\n    position: 10\n  - valueFrom: $(inputs.sample_id).plot_fingerp.tsv\n    prefix: --outRawCounts\n    position: 10\n\nstderr: $(inputs.sample_id).plot_fingerp.stderr\n  \ninputs:\n  bam:\n    doc: must be indexed\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n        position: 100\n        prefix: --bamfiles\n  extendReads:\n    doc: For single end reads, the fragment size should be specified here.\n    type: int?\n    inputBinding:\n      prefix: --extendReads\n      position: 10\n  sample_id:\n    type: string\n      \noutputs:\n  qc_plot_fingerprint_plot:\n    type: File\n    outputBinding:\n      glob: $(inputs.sample_id).plot_fingerp.png\n  qc_plot_fingerprint_tsv:\n    type: File\n    outputBinding:\n      glob: $(inputs.sample_id).plot_fingerp.tsv\n  qc_plot_fingerprint_stderr:\n    type: stderr\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam', 'secondaryFiles': '.bai', 'doc': 'must be indexed', 'inputBinding': {'position': 100, 'prefix': '--bamfiles'}, 'type': 'File'}, {'id': 'extendReads', 'doc': 'For single end reads, the fragment size should be specified here.', 'inputBinding': {'position': 10, 'prefix': '--extendReads'}, 'type': ['null', 'int']}, {'id': 'sample_id', 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'qc_plot_fingerprint_plot', 'outputBinding': {'glob': '$(inputs.sample_id).plot_fingerp.png'}, 'type': 'File'}, {'id': 'qc_plot_fingerprint_stderr', 'type': 'stderr'}, {'id': 'qc_plot_fingerprint_tsv', 'outputBinding': {'glob': '$(inputs.sample_id).plot_fingerp.tsv'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'kerstenbreuer/deeptools:3.1.1'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 15000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'deeptools', 'version': ['3.1.1'], 'specs': ['https://identifiers.org/biotools/deeptools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "plotFingerprint",
    "cwl_arguments": "[{'position': 10, 'prefix': '--labels', 'valueFrom': '$(inputs.sample_id)'}, {'position': 10, 'prefix': '--plotFile', 'valueFrom': '$(inputs.sample_id).plot_fingerp.png'}, {'position': 10, 'prefix': '--outRawCounts', 'valueFrom': '$(inputs.sample_id).plot_fingerp.tsv'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Creates Fingerprint plots showing enrichment in coverage.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "$(inputs.sample_id).plot_fingerp.stderr",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "deseq/deseq_advanced.cwl",
    "sha": "b1e6a045046f3e498954c6fa560c499b7352f754",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/deseq/deseq_advanced.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/scidap-deseq:v0.0.8\n  SoftwareRequirement:\n    packages:\n      deseq:\n        specs: [ https://identifiers.org/biotools/deseq ]\n        version: [ \"0.0.8\" ] ## TODO: Update!\n\ninputs:\n\n  untreated_files:\n    type:\n      - File\n      - File[]\n    inputBinding:\n      position: 5\n      prefix: \"-u\"\n    doc: |\n      Untreated input CSV/TSV files\n\n  treated_files:\n    type:\n      - File\n      - File[]\n    inputBinding:\n      position: 6\n      prefix: \"-t\"\n    doc: |\n      Treated input CSV/TSV files\n\n  untreated_col_suffix:\n    type: string?\n    inputBinding:\n      position: 7\n      prefix: \"-un\"\n    doc: |\n      Suffix for untreated RPKM column name\n\n  treated_col_suffix:\n    type: string?\n    inputBinding:\n      position: 8\n      prefix: \"-tn\"\n    doc: |\n      Suffix for treated RPKM column name\n\n  output_filename:\n    type: string\n    inputBinding:\n      position: 9\n      prefix: \"-o\"\n    doc: |\n      Output TSV filename\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 10\n      prefix: '-p'\n    doc: |\n      Run script using multiple threads\n\noutputs:\n\n  diff_expr_file:\n    type: File\n    outputBinding:\n      glob: $(inputs.output_filename)\n\n  plot_lfc_vs_mean:\n    type: File\n    outputBinding:\n      glob: \"*001.png\"\n\n  gene_expr_heatmap:\n    type: File\n    outputBinding:\n      glob: \"*002.png\"\n\nbaseCommand: [run_deseq.R]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"deseq_advanced\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs DESeq/DESeq2 script similar to the original one from BioWArdrobe.\n  untreated_files and treated_files input files should have the following header (case-sensitive)\n  <RefseqId,GeneId,Chrom,TxStart,TxEnd,Strand,TotalReads,Rpkm>         - CSV\n  <RefseqId\\tGeneId\\tChrom\\tTxStart\\tTxEnd\\tStrand\\tTotalReads\\tRpkm>  - TSV\n\n  Format of the input files is identified based on file's extension\n  *.csv - CSV\n  *.tsv - TSV\n  Otherwise used CSV by default\n\n  The output file's rows order corresponds to the rows order of the first CSV/TSV file in\n  the untreated group. Output is always saved in TSV format\n\n  Output file includes only intersected rows from all input files. Intersected by\n  RefseqId, GeneId, Chrom, TxStart, TxEnd, Strand\n\n  DESeq/DESeq2 always compares untreated_vs_treated groups\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'output_filename', 'doc': 'Output TSV filename\\n', 'inputBinding': {'position': 9, 'prefix': '-o'}, 'type': 'string'}, {'id': 'threads', 'doc': 'Run script using multiple threads\\n', 'inputBinding': {'position': 10, 'prefix': '-p'}, 'type': ['null', 'int']}, {'id': 'treated_col_suffix', 'doc': 'Suffix for treated RPKM column name\\n', 'inputBinding': {'position': 8, 'prefix': '-tn'}, 'type': ['null', 'string']}, {'id': 'treated_files', 'doc': 'Treated input CSV/TSV files\\n', 'inputBinding': {'position': 6, 'prefix': '-t'}, 'type': ['File', {'items': 'File', 'type': 'array'}]}, {'id': 'untreated_col_suffix', 'doc': 'Suffix for untreated RPKM column name\\n', 'inputBinding': {'position': 7, 'prefix': '-un'}, 'type': ['null', 'string']}, {'id': 'untreated_files', 'doc': 'Untreated input CSV/TSV files\\n', 'inputBinding': {'position': 5, 'prefix': '-u'}, 'type': ['File', {'items': 'File', 'type': 'array'}]}]",
    "cwl_outputs": "[{'id': 'diff_expr_file', 'outputBinding': {'glob': '$(inputs.output_filename)'}, 'type': 'File'}, {'id': 'gene_expr_heatmap', 'outputBinding': {'glob': '*002.png'}, 'type': 'File'}, {'id': 'plot_lfc_vs_mean', 'outputBinding': {'glob': '*001.png'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/scidap-deseq:v0.0.8'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'deseq', 'version': ['0.0.8'], 'specs': ['https://identifiers.org/biotools/deseq']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['run_deseq.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs DESeq/DESeq2 script similar to the original one from BioWArdrobe.\nuntreated_files and treated_files input files should have the following header (case-sensitive)\n<RefseqId,GeneId,Chrom,TxStart,TxEnd,Strand,TotalReads,Rpkm>         - CSV\n<RefseqId\\tGeneId\\tChrom\\tTxStart\\tTxEnd\\tStrand\\tTotalReads\\tRpkm>  - TSV\n\nFormat of the input files is identified based on file's extension\n*.csv - CSV\n*.tsv - TSV\nOtherwise used CSV by default\n\nThe output file's rows order corresponds to the rows order of the first CSV/TSV file in\nthe untreated group. Output is always saved in TSV format\n\nOutput file includes only intersected rows from all input files. Intersected by\nRefseqId, GeneId, Chrom, TxStart, TxEnd, Strand\n\nDESeq/DESeq2 always compares untreated_vs_treated groups\n",
    "cwl_stdout": null,
    "cwl_s:name": "deseq_advanced",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "fastp/fastp.cwl",
    "sha": "575c91fe9597b403c18051df2cf5f7be43c40c86",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/fastp/fastp.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Modified from https://github.com/nigyta/bact_genome/blob/master/cwl/tool/fastp/fastp.cwl\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/fastp:0.20.0--hdbcaa40_0\n  SoftwareRequirement:\n    packages:\n      fastp:\n        specs: [ https://identifiers.org/biotools/fastp ]\n        version: [ \"0.20.0\" ]\n\nbaseCommand: fastp\n\narguments:\n    - prefix: -o\n      valueFrom: $(inputs.fastq1.nameroot).fastp.fastq\n    - |\n      ${\n        if (inputs.fastq2){\n          return '-O';\n        } else {\n          return '';\n        }\n      }\n    - |\n      ${\n        if (inputs.fastq2){\n          return inputs.fastq2.nameroot + \".fastp.fastq\";\n        } else {\n          return '';\n        }\n      }\n\ninputs:\n    fastq1:\n      type: File\n      format:\n        - edam:format_1930 # FASTA\n        - edam:format_1931 # FASTQ\n      inputBinding:\n        prefix: -i\n    fastq2:\n      format:\n        - edam:format_1930 # FASTA\n        - edam:format_1931 # FASTQ\n      type: File?\n      inputBinding:\n        prefix: -I\n    threads:\n      type: int?\n      default: 1\n      inputBinding:\n        prefix: --thread\n    qualified_phred_quality:\n      type: int?\n      default: 20\n      inputBinding:\n        prefix: --qualified_quality_phred\n    unqualified_phred_quality:\n      type: int?\n      default: 20\n      inputBinding:\n        prefix: --unqualified_percent_limit\n    min_length_required:\n      type: int?\n      default: 50\n      inputBinding:\n        prefix: --length_required\n    force_polyg_tail_trimming:\n      type: boolean?\n      inputBinding:\n        prefix: --trim_poly_g\n    disable_trim_poly_g:\n      type: boolean?\n      default: true\n      inputBinding:\n        prefix: --disable_trim_poly_g\n    base_correction:\n      type: boolean?\n      default: true\n      inputBinding:\n        prefix: --correction\n    \n\n\noutputs:\n    out_fastq1:\n       type: File\n       format: $(inputs.fastq1.format)\n       outputBinding:\n           glob: $(inputs.fastq1.nameroot).fastp.fastq\n    out_fastq2:\n       type: File?\n       format: $(inputs.fastq2.format)\n       outputBinding:\n           glob: $(inputs.fastq2.nameroot).fastp.fastq\n    html_report:\n      type: File\n      outputBinding:\n        glob: fastp.html\n    json_report:\n      type: File\n      outputBinding:\n        glob: fastp.json\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'base_correction', 'inputBinding': {'prefix': '--correction'}, 'default': True, 'type': ['null', 'boolean']}, {'id': 'disable_trim_poly_g', 'inputBinding': {'prefix': '--disable_trim_poly_g'}, 'default': True, 'type': ['null', 'boolean']}, {'id': 'fastq1', 'format': ['http://edamontology.org/format_1930', 'http://edamontology.org/format_1931'], 'inputBinding': {'prefix': '-i'}, 'type': 'File'}, {'id': 'fastq2', 'format': ['http://edamontology.org/format_1930', 'http://edamontology.org/format_1931'], 'inputBinding': {'prefix': '-I'}, 'type': ['null', 'File']}, {'id': 'force_polyg_tail_trimming', 'inputBinding': {'prefix': '--trim_poly_g'}, 'type': ['null', 'boolean']}, {'id': 'min_length_required', 'inputBinding': {'prefix': '--length_required'}, 'default': 50, 'type': ['null', 'int']}, {'id': 'qualified_phred_quality', 'inputBinding': {'prefix': '--qualified_quality_phred'}, 'default': 20, 'type': ['null', 'int']}, {'id': 'threads', 'inputBinding': {'prefix': '--thread'}, 'default': 1, 'type': ['null', 'int']}, {'id': 'unqualified_phred_quality', 'inputBinding': {'prefix': '--unqualified_percent_limit'}, 'default': 20, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'html_report', 'outputBinding': {'glob': 'fastp.html'}, 'type': 'File'}, {'id': 'json_report', 'outputBinding': {'glob': 'fastp.json'}, 'type': 'File'}, {'id': 'out_fastq1', 'outputBinding': {'glob': '$(inputs.fastq1.nameroot).fastp.fastq'}, 'format': '$(inputs.fastq1.format)', 'type': 'File'}, {'id': 'out_fastq2', 'outputBinding': {'glob': '$(inputs.fastq2.nameroot).fastp.fastq'}, 'format': '$(inputs.fastq2.format)', 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/fastp:0.20.0--hdbcaa40_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'fastp', 'version': ['0.20.0'], 'specs': ['https://identifiers.org/biotools/fastp']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "fastp",
    "cwl_arguments": "[{'prefix': '-o', 'valueFrom': '$(inputs.fastq1.nameroot).fastp.fastq'}, \"${\\n  if (inputs.fastq2){\\n    return '-O';\\n  } else {\\n    return '';\\n  }\\n}\\n\", '${\\n  if (inputs.fastq2){\\n    return inputs.fastq2.nameroot + \".fastp.fastq\";\\n  } else {\\n    return \\'\\';\\n  }\\n}\\n']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Modified from https://github.com/nigyta/bact_genome/blob/master/cwl/tool/fastp/fastp.cwl\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "fastqc/fastqc_1.cwl",
    "sha": "acc83c39bfc204319f3a436dea5fb90baf940547",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/fastqc/fastqc_1.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Run fastqc on raw reads in FASTQ format (single or paired end) or aligned reads in BAM.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 5000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1\n  SoftwareRequirement:\n    packages:\n      fastqc:\n        specs: [ https://identifiers.org/biotools/fastqc ]\n        version: [ \"0.11.9\" ]\n\n\nbaseCommand: \"fastqc\"\narguments: \n  - valueFrom: $(runtime.outdir)\n    prefix: \"-o\"\n  - valueFrom: \"--noextract\"\n\ninputs:\n  fastq1:\n    type: File?\n    inputBinding:\n      position: 1\n  fastq2:\n    type: File?\n    inputBinding:\n      position: 2\n  bam:\n    type: File?\n    inputBinding:\n      position: 1\n \noutputs:\n  fastqc_zip:\n    doc: all data e.g. figures\n    type:\n      type: array\n      items: File\n    outputBinding:\n      glob: \"*_fastqc.zip\"\n  fastqc_html:\n    doc: html report showing results from zip\n    type:\n      type: array\n      items: File\n    outputBinding:\n      glob: \"*_fastqc.html\"\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam', 'inputBinding': {'position': 1}, 'type': ['null', 'File']}, {'id': 'fastq1', 'inputBinding': {'position': 1}, 'type': ['null', 'File']}, {'id': 'fastq2', 'inputBinding': {'position': 2}, 'type': ['null', 'File']}]",
    "cwl_outputs": "[{'id': 'fastqc_html', 'doc': 'html report showing results from zip', 'outputBinding': {'glob': '*_fastqc.html'}, 'type': {'items': 'File', 'type': 'array'}}, {'id': 'fastqc_zip', 'doc': 'all data e.g. figures', 'outputBinding': {'glob': '*_fastqc.zip'}, 'type': {'items': 'File', 'type': 'array'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 5000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'fastqc', 'version': ['0.11.9'], 'specs': ['https://identifiers.org/biotools/fastqc']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "fastqc",
    "cwl_arguments": "[{'prefix': '-o', 'valueFrom': '$(runtime.outdir)'}, {'valueFrom': '--noextract'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Run fastqc on raw reads in FASTQ format (single or paired end) or aligned reads in BAM.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "fastqc/fastqc_2.cwl",
    "sha": "3c727a6c8d4c6967d61fcd906a2c0bbebc891e5f",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/fastqc/fastqc_2.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1\n  SoftwareRequirement:\n    packages:\n      fastqc:\n        specs: [ https://identifiers.org/biotools/fastqc ]\n        version: [ \"0.11.9--hdfd78af_1\", \"0.11.9\" ]\n\ninputs:\n\n  reads_file:\n    type: File\n    inputBinding:\n      position: 50\n    doc: |\n      Input bam,sam,bam_mapped,sam_mapped or fastq file\n\n  format_enum:\n    type:\n      - \"null\"\n      - type: enum\n        name: \"format\"\n        symbols: ['bam','sam','bam_mapped','sam_mapped','fastq']\n    inputBinding:\n      position: 6\n      prefix: '--format'\n    doc: |\n      Bypasses the normal sequence file format detection and\n      forces the program to use the specified format.  Valid\n      formats are bam,sam,bam_mapped,sam_mapped and fastq\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: '--threads'\n    doc: |\n      Specifies the number of files which can be processed\n      simultaneously.  Each thread will be allocated 250MB of\n      memory so you shouldn't run more threads than your\n      available memory will cope with, and not more than\n      6 threads on a 32 bit machine\n\n  contaminants:\n    type: File?\n    inputBinding:\n      position: 8\n      prefix: '--contaminants'\n    doc: |\n      Specifies a non-default file which contains the list of\n      contaminants to screen overrepresented sequences against.\n      The file must contain sets of named contaminants in the\n      form name[tab]sequence.  Lines prefixed with a hash will\n      be ignored.\n\n  adapters:\n    type: File?\n    inputBinding:\n      position: 9\n      prefix: '--adapters'\n    doc: |\n      Specifies a non-default file which contains the list of\n      adapter sequences which will be explicity searched against\n      the library. The file must contain sets of named adapters\n      in the form name[tab]sequence.  Lines prefixed with a hash\n      will be ignored.\n\n  limits:\n    type: File?\n    inputBinding:\n      position: 10\n      prefix: '--limits'\n    doc: |\n      Specifies a non-default file which contains a set of criteria\n      which will be used to determine the warn/error limits for the\n      various modules.  This file can also be used to selectively\n      remove some modules from the output all together.  The format\n      needs to mirror the default limits.txt file found in the\n      Configuration folder.\n\n  kmers:\n    type: int?\n    inputBinding:\n      position: 11\n      prefix: '--kmers'\n    doc: |\n      Specifies the length of Kmer to look for in the Kmer content\n      module. Specified Kmer length must be between 2 and 10. Default\n      length is 7 if not specified.\n\n  casava:\n    type: boolean?\n    inputBinding:\n      position: 13\n      prefix: '--casava'\n    doc: |\n      Files come from raw casava output. Files in the same sample\n      group (differing only by the group number) will be analysed\n      as a set rather than individually. Sequences with the filter\n      flag set in the header will be excluded from the analysis.\n      Files must have the same names given to them by casava\n      (including being gzipped and ending with .gz) otherwise they\n      won't be grouped together correctly.\n\n  nofilter:\n    type: boolean?\n    inputBinding:\n      position: 14\n      prefix: '--nofilter'\n    doc: |\n      If running with --casava then don't remove read flagged by\n      casava as poor quality when performing the QC analysis.\n\n  hide_group:\n    type: boolean?\n    inputBinding:\n      position: 15\n      prefix: '--nogroup'\n    doc: |\n      Disable grouping of bases for reads >50bp. All reports will\n      show data for every base in the read.  WARNING: Using this\n      option will cause fastqc to crash and burn if you use it on\n      really long reads, and your plots may end up a ridiculous size.\n      You have been warned!\n\noutputs:\n\n  zipped_file:\n    type: File\n    outputBinding:\n      glob: '*.zip'\n  html_file:\n    type: File\n    outputBinding:\n      glob: '*.html'\n  summary_file:\n    type: File\n    outputBinding:\n      glob: \"*/summary.txt\"\n\nbaseCommand: [fastqc, --extract, --outdir, .]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"fastqc_2\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs FastQC from Babraham Bioinformatics\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'adapters', 'doc': 'Specifies a non-default file which contains the list of\\nadapter sequences which will be explicity searched against\\nthe library. The file must contain sets of named adapters\\nin the form name[tab]sequence.  Lines prefixed with a hash\\nwill be ignored.\\n', 'inputBinding': {'position': 9, 'prefix': '--adapters'}, 'type': ['null', 'File']}, {'id': 'casava', 'doc': \"Files come from raw casava output. Files in the same sample\\ngroup (differing only by the group number) will be analysed\\nas a set rather than individually. Sequences with the filter\\nflag set in the header will be excluded from the analysis.\\nFiles must have the same names given to them by casava\\n(including being gzipped and ending with .gz) otherwise they\\nwon't be grouped together correctly.\\n\", 'inputBinding': {'position': 13, 'prefix': '--casava'}, 'type': ['null', 'boolean']}, {'id': 'contaminants', 'doc': 'Specifies a non-default file which contains the list of\\ncontaminants to screen overrepresented sequences against.\\nThe file must contain sets of named contaminants in the\\nform name[tab]sequence.  Lines prefixed with a hash will\\nbe ignored.\\n', 'inputBinding': {'position': 8, 'prefix': '--contaminants'}, 'type': ['null', 'File']}, {'id': 'format_enum', 'doc': 'Bypasses the normal sequence file format detection and\\nforces the program to use the specified format.  Valid\\nformats are bam,sam,bam_mapped,sam_mapped and fastq\\n', 'inputBinding': {'position': 6, 'prefix': '--format'}, 'type': ['null', {'name': 'format', 'symbols': ['bam', 'sam', 'bam_mapped', 'sam_mapped', 'fastq'], 'type': 'enum'}]}, {'id': 'hide_group', 'doc': 'Disable grouping of bases for reads >50bp. All reports will\\nshow data for every base in the read.  WARNING: Using this\\noption will cause fastqc to crash and burn if you use it on\\nreally long reads, and your plots may end up a ridiculous size.\\nYou have been warned!\\n', 'inputBinding': {'position': 15, 'prefix': '--nogroup'}, 'type': ['null', 'boolean']}, {'id': 'kmers', 'doc': 'Specifies the length of Kmer to look for in the Kmer content\\nmodule. Specified Kmer length must be between 2 and 10. Default\\nlength is 7 if not specified.\\n', 'inputBinding': {'position': 11, 'prefix': '--kmers'}, 'type': ['null', 'int']}, {'id': 'limits', 'doc': 'Specifies a non-default file which contains a set of criteria\\nwhich will be used to determine the warn/error limits for the\\nvarious modules.  This file can also be used to selectively\\nremove some modules from the output all together.  The format\\nneeds to mirror the default limits.txt file found in the\\nConfiguration folder.\\n', 'inputBinding': {'position': 10, 'prefix': '--limits'}, 'type': ['null', 'File']}, {'id': 'nofilter', 'doc': \"If running with --casava then don't remove read flagged by\\ncasava as poor quality when performing the QC analysis.\\n\", 'inputBinding': {'position': 14, 'prefix': '--nofilter'}, 'type': ['null', 'boolean']}, {'id': 'reads_file', 'doc': 'Input bam,sam,bam_mapped,sam_mapped or fastq file\\n', 'inputBinding': {'position': 50}, 'type': 'File'}, {'id': 'threads', 'doc': \"Specifies the number of files which can be processed\\nsimultaneously.  Each thread will be allocated 250MB of\\nmemory so you shouldn't run more threads than your\\navailable memory will cope with, and not more than\\n6 threads on a 32 bit machine\\n\", 'inputBinding': {'position': 7, 'prefix': '--threads'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'html_file', 'outputBinding': {'glob': '*.html'}, 'type': 'File'}, {'id': 'summary_file', 'outputBinding': {'glob': '*/summary.txt'}, 'type': 'File'}, {'id': 'zipped_file', 'outputBinding': {'glob': '*.zip'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'fastqc', 'version': ['0.11.9--hdfd78af_1', '0.11.9'], 'specs': ['https://identifiers.org/biotools/fastqc']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fastqc', '--extract', '--outdir', '.']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs FastQC from Babraham Bioinformatics\n",
    "cwl_stdout": null,
    "cwl_s:name": "fastqc_2",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "fastx_toolkit/fastx_quality_stats.cwl",
    "sha": "195e32c3d801b4f850f2a8faa27088e6412fef7f",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/fastx_toolkit/fastx_quality_stats.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement\n    expressionLib:\n    - var default_output_filename = function() {\n            return inputs.input_file.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.') + \".fastxstat\"\n          };\nhints:\n  DockerRequirement:\n    dockerPull: docker pull biocontainers/fastx-toolkit:v0.0.14-6-deb_cv1\n  SoftwareRequirement:\n    packages:\n      fastx-toolkit:\n        specs: [ https://identifiers.org/biotools/fastx-toolkit ]\n        version: [ \"0.0.14\" ]\n\ninputs:\n\n  input_file:\n    type: File\n    inputBinding:\n      position: 10\n      prefix: -i\n    doc: |\n      FASTA/Q input file. If FASTA file is given, only nucleotides distribution is calculated (there's no quality info)\n\n  new_output_format:\n    type:\n      - \"null\"\n      - boolean\n    inputBinding:\n      position: 5\n      prefix: '-N'\n    doc: |\n      New output format (with more information per nucleotide/cycle).\n      cycle (previously called 'column') = cycle number\n      max-count\n      For each nucleotide in the cycle (ALL/A/C/G/T/N):\n          count   = number of bases found in this column.\n          min     = Lowest quality score value found in this column.\n          max     = Highest quality score value found in this column.\n          sum     = Sum of quality score values for this column.\n          mean    = Mean quality score value for this column.\n          Q1\t= 1st quartile quality score.\n          med\t= Median quality score.\n          Q3\t= 3rd quartile quality score.\n          IQR\t= Inter-Quartile range (Q3-Q1).\n          lW\t= 'Left-Whisker' value (for boxplotting).\n          rW\t= 'Right-Whisker' value (for boxplotting).\n\n  output_filename:\n    type:\n      - \"null\"\n      - string\n    inputBinding:\n      position: 11\n      prefix: -o\n      valueFrom: |\n        ${\n            if (self == \"\"){\n              return default_output_filename();\n            } else {\n              return self;\n            }\n        }\n    default: \"\"\n    doc: |\n      Output file to store generated statistics. If not provided - return from default_output_filename function\n\noutputs:\n\n  statistics_file:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n            if (inputs.output_filename == \"\"){\n              return default_output_filename();\n            } else {\n              return inputs.output_filename;\n            }\n        }\n    doc: Generated statistics file\n\nbaseCommand: [fastx_quality_stats]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"fastx_quality_stats\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool calculates statistics on the base of FASTQ file quality scores.\n  If `output_filename` is not provided call function `default_output_filename` to return default output file name\n  generated as `input_file` basename + `.fastxstat` extension.\n",
    "cwl_error": "mapping values are not allowed here\n  in \"<unicode string>\", line 7, column 18:\n        expressionLib:\n                     ^ (line: 7)"
  },
  {
    "path": "gat/gat-run.cwl",
    "sha": "97ea6f897b0868f13e1061a1df1851443ba5687d",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/gat/gat-run.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var default_output_filename = function() {\n            if (inputs.output_filename == \"\"){\n              var root = inputs.segment_file.basename.split('.').slice(0,-1).join('.');\n              return (root == \"\")?inputs.segment_file.basename+\".tsv\":root+\".tsv\";\n            } else {\n              return inputs.output_filename;\n            }\n          };\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/gat:v0.0.1\n  SoftwareRequirement:\n    packages:\n      gat:\n        specs:\n          - https://identifiers.org/biotools/gat\n          - https://identifiers.org/rrid/RRID:SCR_020949\n\ninputs:\n\n  segment_file:\n    type: File\n    format: edam:format_3003  # BED\n    inputBinding:\n      position: 5\n      prefix: \"-s\"\n    doc: |\n      BED file (strictly 3 columns) with sets of intervals whose association is tested with annotation_file\n\n  annotation_file:\n    type: File\n    format: edam:format_3003  # BED\n    inputBinding:\n      position: 6\n      prefix: \"-a\"\n    doc: |\n      BED file (strictly 3 columns) with sets of intervals that are used for testing association of segment_file\n\n  workspace_file:\n    type: File\n    format: edam:format_3003  # BED\n    inputBinding:\n      position: 7\n      prefix: \"-w\"\n    doc: |\n      BED file (strictly 3 columns) with genomic regions accessible for simulation\n\n  output_filename:\n    type: string?\n    inputBinding:\n      position: 8\n      valueFrom: $(default_output_filename())\n      prefix: \"-S\"\n    default: \"\"\n    doc: |\n      Output report file name\n\n  iterations:\n    type: int?\n    inputBinding:\n      position: 9\n      prefix: \"-n\"\n    doc: |\n      Number of iterations\n\n  counter:\n    type:\n    - \"null\"\n    - type: enum\n      name: \"counter\"\n      symbols:\n      - \"nucleotide-overlap\"\n      - \"nucleotide-density\"\n      - \"segment-overlap\"\n      - \"annotation-overlap\"\n      - \"segment-midoverlap\"\n      - \"annotation-midoverlap\"\n    inputBinding:\n      position: 10\n      prefix: \"-c\"\n    doc: |\n      Set the measure of association that is tested.\n      Default: nucleotide-overlap\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 11\n      prefix: \"-t\"\n    doc: |\n      Threads number\n\n  seed:\n    type: int?\n    inputBinding:\n      position: 12\n      prefix: \"--random-seed=\"\n      separate: false\n    doc: |\n      Random seed to initialize random number generator with\n\n\noutputs:\n\n  report_file:\n    type: File\n    outputBinding:\n      glob: $(default_output_filename())\n    doc: |\n      Report file\n\nbaseCommand: [\"gat-run.py\", \"--ignore-segment-tracks\"]\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"gat-run\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  A common question in genomic analysis is whether two sets of genomic intervals overlap significantly.\n  This question arises, for example, in the interpretation of ChIP-Seq or RNA-Seq data. The Genomic\n  Association Tester (GAT) is a tool for computing the significance of overlap between multiple sets of\n  genomic intervals. GAT estimates significance based on simulation.\n\n  Gat implemements a sampling algorithm. Given a chromosome (workspace) and segments of interest, for\n  example from a ChIP-Seq experiment, gat creates randomized version of the segments of interest falling\n  into the workspace. These sampled segments are then compared to existing genomic annotations.\n\n  Note:\n  --ignore-segment-tracks parameter is hardcoded\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'annotation_file', 'doc': 'BED file (strictly 3 columns) with sets of intervals that are used for testing association of segment_file\\n', 'format': 'http://edamontology.org/format_3003', 'inputBinding': {'position': 6, 'prefix': '-a'}, 'type': 'File'}, {'id': 'counter', 'doc': 'Set the measure of association that is tested.\\nDefault: nucleotide-overlap\\n', 'inputBinding': {'position': 10, 'prefix': '-c'}, 'type': ['null', {'name': 'counter', 'symbols': ['nucleotide-overlap', 'nucleotide-density', 'segment-overlap', 'annotation-overlap', 'segment-midoverlap', 'annotation-midoverlap'], 'type': 'enum'}]}, {'id': 'iterations', 'doc': 'Number of iterations\\n', 'inputBinding': {'position': 9, 'prefix': '-n'}, 'type': ['null', 'int']}, {'id': 'output_filename', 'doc': 'Output report file name\\n', 'inputBinding': {'position': 8, 'prefix': '-S', 'valueFrom': '$(default_output_filename())'}, 'default': '', 'type': ['null', 'string']}, {'id': 'seed', 'doc': 'Random seed to initialize random number generator with\\n', 'inputBinding': {'position': 12, 'prefix': '--random-seed=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'segment_file', 'doc': 'BED file (strictly 3 columns) with sets of intervals whose association is tested with annotation_file\\n', 'format': 'http://edamontology.org/format_3003', 'inputBinding': {'position': 5, 'prefix': '-s'}, 'type': 'File'}, {'id': 'threads', 'doc': 'Threads number\\n', 'inputBinding': {'position': 11, 'prefix': '-t'}, 'type': ['null', 'int']}, {'id': 'workspace_file', 'doc': 'BED file (strictly 3 columns) with genomic regions accessible for simulation\\n', 'format': 'http://edamontology.org/format_3003', 'inputBinding': {'position': 7, 'prefix': '-w'}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'report_file', 'doc': 'Report file\\n', 'outputBinding': {'glob': '$(default_output_filename())'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/gat:v0.0.1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gat', 'specs': ['https://identifiers.org/biotools/gat', 'https://identifiers.org/rrid/RRID:SCR_020949']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gat-run.py', '--ignore-segment-tracks']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { if (inputs.output_filename == \"\"){ var root = inputs.segment_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.segment_file.basename+\".tsv\":root+\".tsv\"; } else { return inputs.output_filename; } };']}]",
    "cwl_doc": "A common question in genomic analysis is whether two sets of genomic intervals overlap significantly.\nThis question arises, for example, in the interpretation of ChIP-Seq or RNA-Seq data. The Genomic\nAssociation Tester (GAT) is a tool for computing the significance of overlap between multiple sets of\ngenomic intervals. GAT estimates significance based on simulation.\n\nGat implemements a sampling algorithm. Given a chromosome (workspace) and segments of interest, for\nexample from a ChIP-Seq experiment, gat creates randomized version of the segments of interest falling\ninto the workspace. These sampled segments are then compared to existing genomic annotations.\n\nNote:\n--ignore-segment-tracks parameter is hardcoded\n",
    "cwl_stdout": null,
    "cwl_s:name": "gat-run",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "gffread/gffread.cwl",
    "sha": "88f406cf54f7d62a66d63b2a4f5a87735b77c6ec",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/gffread/gffread.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var get_output_filename = function() {\n            if (inputs.output_filename == \"\"){\n              var ext = \".fa\";\n              var root = inputs.genome_fasta_file.basename.split('.').slice(0,-1).join('.');\n              return (root == \"\")?inputs.genome_fasta_file.basename+ext:root+ext;\n            } else {\n              return inputs.output_filename;\n            }\n          };\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gffread:0.11.7--h8b12597_0\n  SoftwareRequirement:\n    packages:\n      gffread:\n        specs: [ https://identifiers.org/biotools/gffread ]\n\ninputs:\n  genome_fasta_file:\n    type: File\n    format: edam:format_1929  # FASTA\n    secondaryFiles:\n      - .fai\n    inputBinding:\n      position: 5\n      prefix: \"-g\"\n    doc: \"Genome file in FASTA format, uncompressed\"\n\n  annotation_gtf_file:\n    type: File\n    format: edam:format_2306  # GTF\n    inputBinding:\n      position: 10\n    doc: \"GTF annotation file\"\n\n  output_filename:\n    type: string?\n    inputBinding:\n      position: 6\n      prefix: \"-w\"\n      valueFrom: $(get_output_filename())\n    default: \"\"\n    doc: \"Filename for generated transcriptome FASTA file\"\n\noutputs:\n  transcriptome_fasta_file:\n    type: File\n    format: edam:format_1929  # FASTA\n    outputBinding:\n      glob: $(get_output_filename())\n\nbaseCommand: gffread\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"gffread\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Generates a FASTA file with the DNA sequences for all transcripts in a GFF file\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'annotation_gtf_file', 'doc': 'GTF annotation file', 'format': 'http://edamontology.org/format_2306', 'inputBinding': {'position': 10}, 'type': 'File'}, {'id': 'genome_fasta_file', 'secondaryFiles': ['.fai'], 'doc': 'Genome file in FASTA format, uncompressed', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'position': 5, 'prefix': '-g'}, 'type': 'File'}, {'id': 'output_filename', 'doc': 'Filename for generated transcriptome FASTA file', 'inputBinding': {'position': 6, 'prefix': '-w', 'valueFrom': '$(get_output_filename())'}, 'default': '', 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'transcriptome_fasta_file', 'outputBinding': {'glob': '$(get_output_filename())'}, 'format': 'http://edamontology.org/format_1929', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gffread:0.11.7--h8b12597_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gffread', 'specs': ['https://identifiers.org/biotools/gffread']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "gffread",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var get_output_filename = function() { if (inputs.output_filename == \"\"){ var ext = \".fa\"; var root = inputs.genome_fasta_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.genome_fasta_file.basename+ext:root+ext; } else { return inputs.output_filename; } };']}]",
    "cwl_doc": "Generates a FASTA file with the DNA sequences for all transcripts in a GFF file\n",
    "cwl_stdout": null,
    "cwl_s:name": "gffread",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "graph-genome-segmentation/component_segmentation.cwl",
    "sha": "10987ef42c58f8147be1a64c09c07037ae927d1c",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/graph-genome-segmentation/component_segmentation.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    coresMin: 8\n    ramMin: 31000\n  DockerRequirement:\n    dockerImageId: graph-genome-component_segmentation\n    dockerFile: {$include: component_segmentation.Dockerfile}\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing: |\n      ${ return [ { \"class\": \"Directory\",\n                    \"listing\": inputs.bins,\n                    \"basename\": \"jsons\" } ]; }\n\ninputs:\n  bins:\n    type: File[]\n    format: iana:application/json\n\n  cells_per_file:\n    type: int?\n    label: Number of cells per file\n    doc: |\n      #number bins per file = #cells / #paths\n      Tip: Adjust this number to get chunk files output close to 2MB.\n    inputBinding:\n      prefix: --cells-per-file=\n      separate: false\n\n  pangenome_sequence:\n    type: File?\n    format: edam:format_1929  # FASTA\n    doc: |\n      Fasta file containing the pangenome sequence\n      generated by odgi for this graph\n    inputBinding:\n      prefix: --fasta=\n      separate: false\n\narguments:\n  - --out-folder=$(runtime.outdir)/results\n  - --parallel-cores=$(runtime.cores)\n  - --json-file=$(runtime.outdir)/jsons/*\n\nbaseCommand: segmentation.py\n\noutputs:\n  colinear_components:\n    type: Directory\n    outputBinding:\n      glob: results\n\n$namespaces:\n  iana: https://www.iana.org/assignments/media-types/\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bins', 'format': 'https://www.iana.org/assignments/media-types/application/json', 'type': {'items': 'File', 'type': 'array'}}, {'id': 'cells_per_file', 'label': 'Number of cells per file', 'doc': '#number bins per file = #cells / #paths\\nTip: Adjust this number to get chunk files output close to 2MB.\\n', 'inputBinding': {'prefix': '--cells-per-file=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'pangenome_sequence', 'doc': 'Fasta file containing the pangenome sequence\\ngenerated by odgi for this graph\\n', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'prefix': '--fasta=', 'separate': False}, 'type': ['null', 'File']}]",
    "cwl_outputs": "[{'id': 'colinear_components', 'outputBinding': {'glob': 'results'}, 'type': 'Directory'}]",
    "cwl_hints": "[{'dockerImageId': 'graph-genome-component_segmentation', 'dockerFile': {'$include': 'component_segmentation.Dockerfile'}, 'class': 'DockerRequirement'}, {'class': 'ResourceRequirement', 'coresMin': 8, 'ramMin': 31000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "segmentation.py",
    "cwl_arguments": "['--out-folder=$(runtime.outdir)/results', '--parallel-cores=$(runtime.cores)', '--json-file=$(runtime.outdir)/jsons/*']",
    "cwl_$namespaces": "{'iana': 'https://www.iana.org/assignments/media-types/', 'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': '${ return [ { \"class\": \"Directory\",\\n              \"listing\": inputs.bins,\\n              \"basename\": \"jsons\" } ]; }\\n'}, {'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "gsea/gseapy.cwl",
    "sha": "52b455c3cdc34753c68874e6a1f334a6d4df635b",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/gsea/gseapy.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/gseapy:0.13.0--py310hbee2dd9_0\n  SoftwareRequirement:\n    packages:\n      gseapy:\n        version: [ \"0.13.0\" ]\n        specs:\n          - https://identifiers.org/biotools/gseapy\n          - https://anaconda.org/bioconda/gseapy\n          - https://github.com/zqfang/GSEApy\n\ninputs:\n  read_counts_file:\n    type: File\n    format:\n      - iana:text/plain\n      - edam:format_3709  # GCT\n    inputBinding:\n      prefix: \"-d\"\n    doc: \"Input gene expression dataset file in txt or gct format. Same with GSEA\"\n\n  phenotypes_file:\n    type: File\n    inputBinding:\n      prefix: \"-c\"\n    doc: \"Input class vector (phenotype) file in CLS format. Same with GSEA\"\n\n  gene_set_database:\n    type:\n    - File\n    - type: enum\n      name: \"genesetdatabase\"\n      symbols:\n      - H_hallmark_gene_sets\n      - C1_positional_gene_sets\n      - C2_curated_gene_sets\n      - C3_regulatory_target_gene_sets\n      - C4_computational_gene_sets\n      - C5_GO_gene_sets\n      - C6_oncogenic_signatures\n      - C7_immunologic_signatures\n    inputBinding:\n      prefix: \"-g\"\n    doc: \"Gene set database\"\n\n  permutation_type:\n    type:\n    - \"null\"\n    - type: enum\n      name: \"permutationtype\"\n      symbols:\n      - gene_set\n      - phenotype\n    inputBinding:\n      prefix: \"-t\"\n    doc: \"Permutation type. Default: gene_set\"\n\n  permutation_count:\n    type: int?\n    inputBinding:\n      prefix: \"-n\"\n    doc: \"Number of random permutations. For calculating esnulls. Default: 1000\"\n\n  min_gene_set_size:\n    type: int?\n    inputBinding:\n      prefix: \"--min-size\"\n    doc: \"Min size of input genes presented in Gene Sets. Default: 15\"\n\n  max_gene_set_size:\n    type: int?\n    inputBinding:\n      prefix: \"--max-size\"\n    doc: \"Max size of input genes presented in Gene Sets. Default: 500\"\n\n  ranking_metrics:\n    type:\n    - \"null\"\n    - type: enum\n      name: \"rankingmetrics\"\n      symbols:\n      - signal_to_noise\n      - t_test\n      - ratio_of_classes\n      - diff_of_classes\n      - log2_ratio_of_classes\n    inputBinding:\n      prefix: \"-m\"\n    doc: \"Methods to calculate correlations of ranking metrics. Default: log2_ratio_of_classes\"\n\n  ascending_rank_sorting:\n    type: boolean?\n    inputBinding:\n      prefix: \"-a\"\n    doc: \"Ascending rank metric sorting order. Default: False\"\n\n  graphs_count:\n    type: int?\n    inputBinding:\n      prefix: \"--graph\"\n    doc: \"Numbers of top graphs produced. Default: 20\"\n\n  seed:\n    type: int?\n    inputBinding:\n      prefix: \"-s\"\n    doc: \"Number of random seed. Default: None\"\n\n  threads:\n    type: int?\n    inputBinding:\n      prefix: \"-p\"\n    doc: \"Threads number\"\n\noutputs:\n  enrichment_report:\n    type: File?\n    format: iana:text/csv\n    outputBinding:\n      glob: \"GSEApy_reports/*.report.csv\"\n\n  enrichment_plots:\n    type: File[]\n    format: iana:application/pdf\n    outputBinding:\n      glob: \"GSEApy_reports/*.gsea.pdf\"\n\n  enrichment_heatmaps:\n    type: File[]\n    format: iana:application/pdf\n    outputBinding:\n      glob: \"GSEApy_reports/*.heatmap.pdf\"\n\nbaseCommand: [gseapy, gsea]\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: GSEApy\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  GSEAPY: Gene Set Enrichment Analysis in Python\n  ==============================================\n\n  Gene Set Enrichment Analysis is a computational method that determines whether an a priori\n  defined set of genes shows statistically significant, concordant differences between two\n  biological states (e.g. phenotypes).\n\n  GSEA requires as input an expression dataset, which contains expression profiles for multiple samples.\n  While the software supports multiple input file formats for these datasets, the tab-delimited GCT format\n  is the most common. The first column of the GCT file contains feature identifiers (gene ids or symbols in\n  the case of data derived from RNA-Seq experiments). The second column contains a description of the feature;\n  this column is ignored by GSEA and may be filled with \u201cNA\u201ds. Subsequent columns contain the expression\n  values for each feature, with one sample's expression value per column. It is important to note that there\n  are no hard and fast rules regarding how a GCT file's expression values are derived. The important point is\n  that they are comparable to one another across features within a sample and comparable to one another\n  across samples. Tools such as DESeq2 can be made to produce properly normalized data (normalized counts)\n  which are compatible with GSEA.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'ascending_rank_sorting', 'doc': 'Ascending rank metric sorting order. Default: False', 'inputBinding': {'prefix': '-a'}, 'type': ['null', 'boolean']}, {'id': 'gene_set_database', 'doc': 'Gene set database', 'inputBinding': {'prefix': '-g'}, 'type': ['File', {'name': 'genesetdatabase', 'symbols': ['H_hallmark_gene_sets', 'C1_positional_gene_sets', 'C2_curated_gene_sets', 'C3_regulatory_target_gene_sets', 'C4_computational_gene_sets', 'C5_GO_gene_sets', 'C6_oncogenic_signatures', 'C7_immunologic_signatures'], 'type': 'enum'}]}, {'id': 'graphs_count', 'doc': 'Numbers of top graphs produced. Default: 20', 'inputBinding': {'prefix': '--graph'}, 'type': ['null', 'int']}, {'id': 'max_gene_set_size', 'doc': 'Max size of input genes presented in Gene Sets. Default: 500', 'inputBinding': {'prefix': '--max-size'}, 'type': ['null', 'int']}, {'id': 'min_gene_set_size', 'doc': 'Min size of input genes presented in Gene Sets. Default: 15', 'inputBinding': {'prefix': '--min-size'}, 'type': ['null', 'int']}, {'id': 'permutation_count', 'doc': 'Number of random permutations. For calculating esnulls. Default: 1000', 'inputBinding': {'prefix': '-n'}, 'type': ['null', 'int']}, {'id': 'permutation_type', 'doc': 'Permutation type. Default: gene_set', 'inputBinding': {'prefix': '-t'}, 'type': ['null', {'name': 'permutationtype', 'symbols': ['gene_set', 'phenotype'], 'type': 'enum'}]}, {'id': 'phenotypes_file', 'doc': 'Input class vector (phenotype) file in CLS format. Same with GSEA', 'inputBinding': {'prefix': '-c'}, 'type': 'File'}, {'id': 'ranking_metrics', 'doc': 'Methods to calculate correlations of ranking metrics. Default: log2_ratio_of_classes', 'inputBinding': {'prefix': '-m'}, 'type': ['null', {'name': 'rankingmetrics', 'symbols': ['signal_to_noise', 't_test', 'ratio_of_classes', 'diff_of_classes', 'log2_ratio_of_classes'], 'type': 'enum'}]}, {'id': 'read_counts_file', 'doc': 'Input gene expression dataset file in txt or gct format. Same with GSEA', 'format': ['https://www.iana.org/assignments/media-types/text/plain', 'http://edamontology.org/format_3709'], 'inputBinding': {'prefix': '-d'}, 'type': 'File'}, {'id': 'seed', 'doc': 'Number of random seed. Default: None', 'inputBinding': {'prefix': '-s'}, 'type': ['null', 'int']}, {'id': 'threads', 'doc': 'Threads number', 'inputBinding': {'prefix': '-p'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'enrichment_heatmaps', 'outputBinding': {'glob': 'GSEApy_reports/*.heatmap.pdf'}, 'format': 'https://www.iana.org/assignments/media-types/application/pdf', 'type': {'items': 'File', 'type': 'array'}}, {'id': 'enrichment_plots', 'outputBinding': {'glob': 'GSEApy_reports/*.gsea.pdf'}, 'format': 'https://www.iana.org/assignments/media-types/application/pdf', 'type': {'items': 'File', 'type': 'array'}}, {'id': 'enrichment_report', 'outputBinding': {'glob': 'GSEApy_reports/*.report.csv'}, 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/gseapy:0.13.0--py310hbee2dd9_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'gseapy', 'version': ['0.13.0'], 'specs': ['https://identifiers.org/biotools/gseapy', 'https://anaconda.org/bioconda/gseapy', 'https://github.com/zqfang/GSEApy']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['gseapy', 'gsea']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "GSEAPY: Gene Set Enrichment Analysis in Python\n==============================================\n\nGene Set Enrichment Analysis is a computational method that determines whether an a priori\ndefined set of genes shows statistically significant, concordant differences between two\nbiological states (e.g. phenotypes).\n\nGSEA requires as input an expression dataset, which contains expression profiles for multiple samples.\nWhile the software supports multiple input file formats for these datasets, the tab-delimited GCT format\nis the most common. The first column of the GCT file contains feature identifiers (gene ids or symbols in\nthe case of data derived from RNA-Seq experiments). The second column contains a description of the feature;\nthis column is ignored by GSEA and may be filled with \u201cNA\u201ds. Subsequent columns contain the expression\nvalues for each feature, with one sample's expression value per column. It is important to note that there\nare no hard and fast rules regarding how a GCT file's expression values are derived. The important point is\nthat they are comparable to one another across features within a sample and comparable to one another\nacross samples. Tools such as DESeq2 can be made to produce properly normalized data (normalized counts)\nwhich are compatible with GSEA.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "GSEApy",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "hal/halliftover.cwl",
    "sha": "0c251d50640a410445f2a438a434f2b1c93a541a",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/hal/halliftover.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var default_output_filename = function() {\n        var ext = \".bed\";\n        if (inputs.output_filename == \"\"){\n          var root = inputs.input_bed_file.basename.split('.').slice(0,-1).join('.');\n          return (root == \"\")?inputs.input_bed_file.basename+ext:root+ext;\n        } else {\n          return inputs.output_filename;\n        }\n      };\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/hal:v0.0.1\n\ninputs:\n\n  keep_extra:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --keepExtra\n    doc: |\n      keep extra columns. these are columns in the input\n      beyond the specified or detected bed version, and which\n      are cut by default\n\n  no_dupes:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: --noDupes\n    doc: |\n      Do not map between duplications in graph\n\n  tab_separated:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: --tab\n    default: True\n    doc: |\n      input is tab-separated. this allows column entries to\n      contain spaces.  if this flag is not set, both spaces\n      and tabs are used to separate input columns\n\n  hal_file:\n    type: File\n    inputBinding:\n      position: 4\n    doc: |\n      Input HAL file\n\n  source_genome_name:\n    type: string\n    inputBinding:\n      position: 5\n    doc: |\n      Source genome name\n\n  input_bed_file:\n    type: File\n    inputBinding:\n      position: 6\n    doc: |\n      Input BED file\n\n  target_genome_name:\n    type: string\n    inputBinding:\n      position: 7\n    doc: |\n      Target genome name\n\n  output_filename:\n    type: string?\n    inputBinding:\n      position: 8\n      valueFrom: $(default_output_filename())\n    default: \"\"\n    doc: |\n      Output filename\n\noutputs:\n\n  projected_bed_file:\n    type: File\n    outputBinding:\n      glob: $(default_output_filename())\n    doc: |\n      Projected BED file\n\nbaseCommand: [\"halLiftover\"]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"halliftover\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Runs halliftover to project input BED file from source to target genome.\n  `source_genome_name` and `target_genome_name` should correspond to the fields in `hal_file`.\n\n  If `output_filename` is not set, call `default_output_filename` function.\n\n  The following parameters are not yet supported:\n    --outPSL\n    --outPSLWithName\n\n  halLiftover manual doesn't say anything if `input_bed_file` should be sorted or not\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'hal_file', 'doc': 'Input HAL file\\n', 'inputBinding': {'position': 4}, 'type': 'File'}, {'id': 'input_bed_file', 'doc': 'Input BED file\\n', 'inputBinding': {'position': 6}, 'type': 'File'}, {'id': 'keep_extra', 'doc': 'keep extra columns. these are columns in the input\\nbeyond the specified or detected bed version, and which\\nare cut by default\\n', 'inputBinding': {'position': 1, 'prefix': '--keepExtra'}, 'type': ['null', 'boolean']}, {'id': 'no_dupes', 'doc': 'Do not map between duplications in graph\\n', 'inputBinding': {'position': 2, 'prefix': '--noDupes'}, 'type': ['null', 'boolean']}, {'id': 'output_filename', 'doc': 'Output filename\\n', 'inputBinding': {'position': 8, 'valueFrom': '$(default_output_filename())'}, 'default': '', 'type': ['null', 'string']}, {'id': 'source_genome_name', 'doc': 'Source genome name\\n', 'inputBinding': {'position': 5}, 'type': 'string'}, {'id': 'tab_separated', 'doc': 'input is tab-separated. this allows column entries to\\ncontain spaces.  if this flag is not set, both spaces\\nand tabs are used to separate input columns\\n', 'inputBinding': {'position': 3, 'prefix': '--tab'}, 'default': True, 'type': ['null', 'boolean']}, {'id': 'target_genome_name', 'doc': 'Target genome name\\n', 'inputBinding': {'position': 7}, 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'projected_bed_file', 'doc': 'Projected BED file\\n', 'outputBinding': {'glob': '$(default_output_filename())'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/hal:v0.0.1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['halLiftover']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { var ext = \".bed\"; if (inputs.output_filename == \"\"){ var root = inputs.input_bed_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.input_bed_file.basename+ext:root+ext; } else { return inputs.output_filename; } };']}]",
    "cwl_doc": "Runs halliftover to project input BED file from source to target genome.\n`source_genome_name` and `target_genome_name` should correspond to the fields in `hal_file`.\n\nIf `output_filename` is not set, call `default_output_filename` function.\n\nThe following parameters are not yet supported:\n  --outPSL\n  --outPSLWithName\n\nhalLiftover manual doesn't say anything if `input_bed_file` should be sorted or not\n",
    "cwl_stdout": null,
    "cwl_s:name": "halliftover",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "haltools/halliftover.cwl",
    "sha": "c3a003e3a1380d8046eab76f1d1ae089a5421d30",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/haltools/halliftover.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var default_output_filename = function() {\n        var ext = \".bed\";\n        if (inputs.output_filename == \"\"){\n          var root = inputs.input_bed_file.basename.split('.').slice(0,-1).join('.');\n          return (root == \"\")?inputs.input_bed_file.basename+ext:root+ext;\n        } else {\n          return inputs.output_filename;\n        }\n      };\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/hal:v0.0.1\n\ninputs:\n  keep_extra:\n    type: boolean?\n    inputBinding:\n      position: 1\n      prefix: --keepExtra\n    doc: |\n      keep extra columns. these are columns in the input\n      beyond the specified or detected bed version, and which\n      are cut by default\n\n  no_dupes:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: --noDupes\n    doc: |\n      Do not map between duplications in graph\n\n  tab_separated:\n    type: boolean?\n    inputBinding:\n      position: 3\n      prefix: --tab\n    default: True\n    doc: |\n      input is tab-separated. this allows column entries to\n      contain spaces.  if this flag is not set, both spaces\n      and tabs are used to separate input columns\n\n  hal_file:\n    type: File\n    inputBinding:\n      position: 4\n    doc: |\n      Input HAL file\n\n  source_genome_name:\n    type: string\n    inputBinding:\n      position: 5\n    doc: |\n      Source genome name\n\n  input_bed_file:\n    type: File\n    format: edam:format_3003  # BED\n    inputBinding:\n      position: 6\n    doc: |\n      Input BED file\n\n  target_genome_name:\n    type: string\n    inputBinding:\n      position: 7\n    doc: |\n      Target genome name\n\n  output_filename:\n    type: string?\n    inputBinding:\n      position: 8\n      valueFrom: $(default_output_filename())\n    default: \"\"\n    doc: |\n      Output filename\n\noutputs:\n  projected_bed_file:\n    type: File\n    format: edam:format_3003  # BED\n    outputBinding:\n      glob: $(default_output_filename())\n    doc: |\n      Projected BED file\n\n\nbaseCommand: halLiftover\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: halLiftover\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Runs halLiftover to project input BED file from source to target genome.\n  `source_genome_name` and `target_genome_name` should correspond to the fields in `hal_file`.\n\n  If `output_filename` is not set, call `default_output_filename` function.\n\n  The following parameters are not yet supported:\n    --outPSL\n    --outPSLWithName\n\n  halLiftover manual doesn't say anything if `input_bed_file` should be sorted or not\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'hal_file', 'doc': 'Input HAL file\\n', 'inputBinding': {'position': 4}, 'type': 'File'}, {'id': 'input_bed_file', 'doc': 'Input BED file\\n', 'format': 'http://edamontology.org/format_3003', 'inputBinding': {'position': 6}, 'type': 'File'}, {'id': 'keep_extra', 'doc': 'keep extra columns. these are columns in the input\\nbeyond the specified or detected bed version, and which\\nare cut by default\\n', 'inputBinding': {'position': 1, 'prefix': '--keepExtra'}, 'type': ['null', 'boolean']}, {'id': 'no_dupes', 'doc': 'Do not map between duplications in graph\\n', 'inputBinding': {'position': 2, 'prefix': '--noDupes'}, 'type': ['null', 'boolean']}, {'id': 'output_filename', 'doc': 'Output filename\\n', 'inputBinding': {'position': 8, 'valueFrom': '$(default_output_filename())'}, 'default': '', 'type': ['null', 'string']}, {'id': 'source_genome_name', 'doc': 'Source genome name\\n', 'inputBinding': {'position': 5}, 'type': 'string'}, {'id': 'tab_separated', 'doc': 'input is tab-separated. this allows column entries to\\ncontain spaces.  if this flag is not set, both spaces\\nand tabs are used to separate input columns\\n', 'inputBinding': {'position': 3, 'prefix': '--tab'}, 'default': True, 'type': ['null', 'boolean']}, {'id': 'target_genome_name', 'doc': 'Target genome name\\n', 'inputBinding': {'position': 7}, 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'projected_bed_file', 'doc': 'Projected BED file\\n', 'outputBinding': {'glob': '$(default_output_filename())'}, 'format': 'http://edamontology.org/format_3003', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/hal:v0.0.1'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "halLiftover",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { var ext = \".bed\"; if (inputs.output_filename == \"\"){ var root = inputs.input_bed_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.input_bed_file.basename+ext:root+ext; } else { return inputs.output_filename; } };']}]",
    "cwl_doc": "Runs halLiftover to project input BED file from source to target genome.\n`source_genome_name` and `target_genome_name` should correspond to the fields in `hal_file`.\n\nIf `output_filename` is not set, call `default_output_filename` function.\n\nThe following parameters are not yet supported:\n  --outPSL\n  --outPSLWithName\n\nhalLiftover manual doesn't say anything if `input_bed_file` should be sorted or not\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "halLiftover",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "homer/homer-annotate-peaks-hist.cwl",
    "sha": "7a7801ad193fa8fcfe3293c7d680dbda32351991",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/homer/homer-annotate-peaks-hist.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/homer:v0.0.2\n  SoftwareRequirement:\n    packages:\n      homer:\n        specs: [ https://identifiers.org/biotools/homer ]\n        version: [ \"4.10.3\" ]\n\ninputs:\n  peak_file:\n    type: File\n    doc: \"Homer generated peak file or BED\"\n\n  tag_folders:\n    type:\n      - Directory\n      - Directory[]\n    inputBinding:\n      position: 7\n      prefix: \"-d\"\n    doc: \"Tag folders from homer-make-tag-directory tool\"\n\n  hist_width:\n    type:\n      - int\n      - string\n    inputBinding:\n      position: 8\n      prefix: \"-size\"\n    doc: |\n      Possible values:\n        \"#\" - performs analysis on the \"#\" bp surrounding the peak centers\n        \"#,#\" - performs analysis from \"#\" to \"#\" relative to peak center\n        \"given\" - set size to actual coordinates in peak/BED file\n\n  hist_bin_size:\n    type: int\n    inputBinding:\n      position: 9\n      prefix: \"-hist\"\n    doc: |\n      Bin size, bp. If hist_width is \"given\" or skipped, this\n      parameter will set the number of bins to divide each region into\n\n  export_heatmap:\n    type: boolean?\n    inputBinding:\n      position: 10\n      prefix: \"-ghist\"\n    doc: |\n      Generate heatmap. Instead of averaging all of the data\n      from each peak, keep data from each peak separate\n\n  norm_fpkm:\n    type: boolean?\n    inputBinding:\n      position: 11\n      prefix: \"-fpkm\"\n    doc: |\n      Normalize read counts to million reads or fragments per kilobase mapped\n\n  norm_raw:\n    type: boolean?\n    inputBinding:\n      position: 12\n      prefix: \"-raw\"\n    doc: |\n      Do not adjust the tag counts based on total tags sequenced.\n      By default all tag counts will be normalized to norm_tag_count\n\n  norm_tag_count:\n    type: int?\n    inputBinding:\n      position: 13\n      prefix: \"-norm\"\n    doc: |\n      Normalize tags to this tag count, default=1e7, 0=average tag count in all directories\n\n  norm_fragment_size:\n    type: int?\n    inputBinding:\n      position: 14\n      prefix: \"-normLength\"\n    doc: |\n      Fragment length to normlize to for experiments with different lens. Default: 100bp\n\n  strand:\n    type: string?\n    inputBinding:\n      position: 15\n      prefix: \"-strand\"\n    doc: |\n      Count tags on specific strands relative to peak. Default: both\n      Possible values: +|-\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 16\n      prefix: \"-cpu\"\n    doc: |\n      Set the number of threads. Default: 1\n\n  histogram_filename:\n    type: string\n    doc: \"Output histogram's filename\"\n\noutputs:\n\n  histogram_file:\n    type: stdout\n    doc: \"Output histogram file\"\n\nstdout: $(inputs.histogram_filename)\n\nbaseCommand: annotatePeaks.pl\narguments:\n  - valueFrom: $(inputs.peak_file)\n    position: 5\n  - valueFrom: none\n    position: 6\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"homer-annotate-peaks-hist\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool is used to produce histogram or heatmaps only. Rest of the functionality is not implemented intentionally.\n  If TSS analysis needed, input peak_file should be centered on TSS, where the 'center' of the peak in the actual TSS.\n  For example:\n    1\tchr4\t978796\t978796\t-\n    2\tchr4\t1052109\t1052109\t+\n    3\tchr4\t1105422\t1105422\t-\n\n  Skipped arguments:\n\n    Related to peaks annotation:\n      -organism\n      -gtf\n      -gff\n      -gff3\n      -gid\n      -ann\n      -mask\n      -p\n      -pdist\n      -pcount\n      -vcf\n      -editDistance\n      -individuals\n      -gene\n      -go\n      -genomeOntology\n      -ratio\n      -rlog\n      -vst\n      -CpG\n      -nfr\n      -nfrSize\n      -gwasCatalog\n      -map\n      -noann\n\n    Related to tss/tts/rna modes:\n      tss\n      tts\n      rna\n      -list\n      -cTSS\n\n    Related to motifs:\n      -m\n      -mscore\n      -nmotifs\n      -mdist\n      -mfasta\n      -fm\n      -rmrevopp\n      -matrix\n      -mbed\n      -mlogic\n      -norevopp\n\n    Related to peak centering:\n      -center\n      -mirror\n      -multi\n\n    Related to genome comparisons\n      -cmpGenome\n      -cmpLiftover\n\n    Currently not needed functionality:\n      -bedGraph\n      -wig\n      -nuc\n      -di\n      -histNorm\n      -rm\n      -log\n      -sqrt\n      -len\n      -pc\n      -noblanks\n      -homer1\n      -homer2\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'export_heatmap', 'doc': 'Generate heatmap. Instead of averaging all of the data\\nfrom each peak, keep data from each peak separate\\n', 'inputBinding': {'position': 10, 'prefix': '-ghist'}, 'type': ['null', 'boolean']}, {'id': 'hist_bin_size', 'doc': 'Bin size, bp. If hist_width is \"given\" or skipped, this\\nparameter will set the number of bins to divide each region into\\n', 'inputBinding': {'position': 9, 'prefix': '-hist'}, 'type': 'int'}, {'id': 'hist_width', 'doc': 'Possible values:\\n  \"#\" - performs analysis on the \"#\" bp surrounding the peak centers\\n  \"#,#\" - performs analysis from \"#\" to \"#\" relative to peak center\\n  \"given\" - set size to actual coordinates in peak/BED file\\n', 'inputBinding': {'position': 8, 'prefix': '-size'}, 'type': ['int', 'string']}, {'id': 'histogram_filename', 'doc': \"Output histogram's filename\", 'type': 'string'}, {'id': 'norm_fpkm', 'doc': 'Normalize read counts to million reads or fragments per kilobase mapped\\n', 'inputBinding': {'position': 11, 'prefix': '-fpkm'}, 'type': ['null', 'boolean']}, {'id': 'norm_fragment_size', 'doc': 'Fragment length to normlize to for experiments with different lens. Default: 100bp\\n', 'inputBinding': {'position': 14, 'prefix': '-normLength'}, 'type': ['null', 'int']}, {'id': 'norm_raw', 'doc': 'Do not adjust the tag counts based on total tags sequenced.\\nBy default all tag counts will be normalized to norm_tag_count\\n', 'inputBinding': {'position': 12, 'prefix': '-raw'}, 'type': ['null', 'boolean']}, {'id': 'norm_tag_count', 'doc': 'Normalize tags to this tag count, default=1e7, 0=average tag count in all directories\\n', 'inputBinding': {'position': 13, 'prefix': '-norm'}, 'type': ['null', 'int']}, {'id': 'peak_file', 'doc': 'Homer generated peak file or BED', 'type': 'File'}, {'id': 'strand', 'doc': 'Count tags on specific strands relative to peak. Default: both\\nPossible values: +|-\\n', 'inputBinding': {'position': 15, 'prefix': '-strand'}, 'type': ['null', 'string']}, {'id': 'tag_folders', 'doc': 'Tag folders from homer-make-tag-directory tool', 'inputBinding': {'position': 7, 'prefix': '-d'}, 'type': ['Directory', {'items': 'Directory', 'type': 'array'}]}, {'id': 'threads', 'doc': 'Set the number of threads. Default: 1\\n', 'inputBinding': {'position': 16, 'prefix': '-cpu'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'histogram_file', 'doc': 'Output histogram file', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/homer:v0.0.2'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'homer', 'version': ['4.10.3'], 'specs': ['https://identifiers.org/biotools/homer']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "annotatePeaks.pl",
    "cwl_arguments": "[{'position': 5, 'valueFrom': '$(inputs.peak_file)'}, {'position': 6, 'valueFrom': 'none'}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool is used to produce histogram or heatmaps only. Rest of the functionality is not implemented intentionally.\nIf TSS analysis needed, input peak_file should be centered on TSS, where the 'center' of the peak in the actual TSS.\nFor example:\n  1\tchr4\t978796\t978796\t-\n  2\tchr4\t1052109\t1052109\t+\n  3\tchr4\t1105422\t1105422\t-\n\nSkipped arguments:\n\n  Related to peaks annotation:\n    -organism\n    -gtf\n    -gff\n    -gff3\n    -gid\n    -ann\n    -mask\n    -p\n    -pdist\n    -pcount\n    -vcf\n    -editDistance\n    -individuals\n    -gene\n    -go\n    -genomeOntology\n    -ratio\n    -rlog\n    -vst\n    -CpG\n    -nfr\n    -nfrSize\n    -gwasCatalog\n    -map\n    -noann\n\n  Related to tss/tts/rna modes:\n    tss\n    tts\n    rna\n    -list\n    -cTSS\n\n  Related to motifs:\n    -m\n    -mscore\n    -nmotifs\n    -mdist\n    -mfasta\n    -fm\n    -rmrevopp\n    -matrix\n    -mbed\n    -mlogic\n    -norevopp\n\n  Related to peak centering:\n    -center\n    -mirror\n    -multi\n\n  Related to genome comparisons\n    -cmpGenome\n    -cmpLiftover\n\n  Currently not needed functionality:\n    -bedGraph\n    -wig\n    -nuc\n    -di\n    -histNorm\n    -rm\n    -log\n    -sqrt\n    -len\n    -pc\n    -noblanks\n    -homer1\n    -homer2\n",
    "cwl_stdout": "$(inputs.histogram_filename)",
    "cwl_s:name": "homer-annotate-peaks-hist",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "homer/homer-make-metagene-profile.cwl",
    "sha": "5d0ffe8cf177d8161dc5993b7427517cee98987a",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/homer/homer-make-metagene-profile.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/homer:v0.0.2\n  SoftwareRequirement:\n    packages:\n      homer:\n        specs: [ https://identifiers.org/biotools/homer ]\n        version: [ \"4.10.3\" ]\n\ninputs:\n\n  peak_file:\n    type: File\n    doc: \"Homer generated peak file or BED\"\n\n  tag_folders:\n    type:\n      - Directory\n      - Directory[]\n    inputBinding:\n      position: 7\n      prefix: \"-d\"\n    doc: \"Tag folders from homer-make-tag-directory tool\"\n\n  flank_width:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: \"-size\"\n    doc: |\n      Size of 5' and 3' flanks, default: 5000\n\n  flank_bin_size:\n    type: int?\n    inputBinding:\n      position: 9\n      prefix: \"-bin\"\n    doc: |\n      Bin size for 5' and 3' flanks, default: 100\n\n  genebody_bin_count:\n    type: int?\n    inputBinding:\n      position: 10\n      prefix: \"-gbin\"\n    doc: |\n      Number of bins in gene body, default: 50\n\n  min_peak_size:\n    type: int?\n    inputBinding:\n      position: 11\n      prefix: \"-min\"\n    doc: |\n      Minimum size of peak region to use, default: 3000\n\n  max_peak_size:\n    type: int?\n    inputBinding:\n      position: 12\n      prefix: \"-max\"\n    doc: |\n      Maximum size of peak region to use, default: no max\n\n  genebody_to_flank_ratio:\n    type: int?\n    inputBinding:\n      position: 13\n      prefix: \"-gRatio\"\n    doc: |\n      Ratio of gene region to flanks, default: 2\n\n  norm_fpkm:\n    type: boolean?\n    inputBinding:\n      position: 14\n      prefix: \"-fpkm\"\n    doc: |\n      Normalize read counts to million reads or fragments per kilobase mapped\n\n  norm_raw:\n    type: boolean?\n    inputBinding:\n      position: 15\n      prefix: \"-raw\"\n    doc: |\n      Do not adjust the tag counts based on total tags sequenced.\n      By default all tag counts will be normalized to norm_tag_count\n\n  norm_tag_count:\n    type: int?\n    inputBinding:\n      position: 16\n      prefix: \"-norm\"\n    doc: |\n      Normalize tags to this tag count, default=1e7, 0=average tag count in all directories\n\n  norm_fragment_size:\n    type: int?\n    inputBinding:\n      position: 17\n      prefix: \"-normLength\"\n    doc: |\n      Fragment length to normlize to for experiments with different lens. Default: 100bp\n\n  strand:\n    type: string?\n    inputBinding:\n      position: 18\n      prefix: \"-strand\"\n    doc: |\n      Count tags on specific strands relative to peak. Default: both\n      Possible values: +|-\n\n  threads:\n    type: int?\n    inputBinding:\n      position: 19\n      prefix: \"-cpu\"\n    doc: |\n      Set the number of threads. Default: 1\n\n  histogram_filename:\n    type: string\n    doc: \"Output histogram's filename\"\n\noutputs:\n\n  histogram_file:\n    type: stdout\n    doc: \"Output histogram file\"\n\nstdout: $(inputs.histogram_filename)\n\nbaseCommand: [\"makeMetaGeneProfile.pl\"]\narguments:\n  - valueFrom: $(inputs.peak_file)\n    position: 5\n  - valueFrom: none\n    position: 6\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"homer-make-metagene-profile\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs makeMetaGeneProfile.pl which automates the creation of 'meta-gene' profiles.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'flank_bin_size', 'doc': \"Bin size for 5' and 3' flanks, default: 100\\n\", 'inputBinding': {'position': 9, 'prefix': '-bin'}, 'type': ['null', 'int']}, {'id': 'flank_width', 'doc': \"Size of 5' and 3' flanks, default: 5000\\n\", 'inputBinding': {'position': 8, 'prefix': '-size'}, 'type': ['null', 'int']}, {'id': 'genebody_bin_count', 'doc': 'Number of bins in gene body, default: 50\\n', 'inputBinding': {'position': 10, 'prefix': '-gbin'}, 'type': ['null', 'int']}, {'id': 'genebody_to_flank_ratio', 'doc': 'Ratio of gene region to flanks, default: 2\\n', 'inputBinding': {'position': 13, 'prefix': '-gRatio'}, 'type': ['null', 'int']}, {'id': 'histogram_filename', 'doc': \"Output histogram's filename\", 'type': 'string'}, {'id': 'max_peak_size', 'doc': 'Maximum size of peak region to use, default: no max\\n', 'inputBinding': {'position': 12, 'prefix': '-max'}, 'type': ['null', 'int']}, {'id': 'min_peak_size', 'doc': 'Minimum size of peak region to use, default: 3000\\n', 'inputBinding': {'position': 11, 'prefix': '-min'}, 'type': ['null', 'int']}, {'id': 'norm_fpkm', 'doc': 'Normalize read counts to million reads or fragments per kilobase mapped\\n', 'inputBinding': {'position': 14, 'prefix': '-fpkm'}, 'type': ['null', 'boolean']}, {'id': 'norm_fragment_size', 'doc': 'Fragment length to normlize to for experiments with different lens. Default: 100bp\\n', 'inputBinding': {'position': 17, 'prefix': '-normLength'}, 'type': ['null', 'int']}, {'id': 'norm_raw', 'doc': 'Do not adjust the tag counts based on total tags sequenced.\\nBy default all tag counts will be normalized to norm_tag_count\\n', 'inputBinding': {'position': 15, 'prefix': '-raw'}, 'type': ['null', 'boolean']}, {'id': 'norm_tag_count', 'doc': 'Normalize tags to this tag count, default=1e7, 0=average tag count in all directories\\n', 'inputBinding': {'position': 16, 'prefix': '-norm'}, 'type': ['null', 'int']}, {'id': 'peak_file', 'doc': 'Homer generated peak file or BED', 'type': 'File'}, {'id': 'strand', 'doc': 'Count tags on specific strands relative to peak. Default: both\\nPossible values: +|-\\n', 'inputBinding': {'position': 18, 'prefix': '-strand'}, 'type': ['null', 'string']}, {'id': 'tag_folders', 'doc': 'Tag folders from homer-make-tag-directory tool', 'inputBinding': {'position': 7, 'prefix': '-d'}, 'type': ['Directory', {'items': 'Directory', 'type': 'array'}]}, {'id': 'threads', 'doc': 'Set the number of threads. Default: 1\\n', 'inputBinding': {'position': 19, 'prefix': '-cpu'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'histogram_file', 'doc': 'Output histogram file', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/homer:v0.0.2'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'homer', 'version': ['4.10.3'], 'specs': ['https://identifiers.org/biotools/homer']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['makeMetaGeneProfile.pl']",
    "cwl_arguments": "[{'position': 5, 'valueFrom': '$(inputs.peak_file)'}, {'position': 6, 'valueFrom': 'none'}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs makeMetaGeneProfile.pl which automates the creation of 'meta-gene' profiles.\n",
    "cwl_stdout": "$(inputs.histogram_filename)",
    "cwl_s:name": "homer-make-metagene-profile",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "homer/homer-make-tag-directory.cwl",
    "sha": "8828b323f8b538a08ed2ff58a5998dc12f0f6b91",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/homer/homer-make-tag-directory.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing: |\n      ${\n        return [\n          {\"class\": \"Directory\",\n           \"basename\": \"default\",\n           \"listing\": [inputs.bam_file],\n           \"writable\": true}\n        ]\n      }\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/homer:v0.0.2\n  SoftwareRequirement:\n    packages:\n      homer:\n        specs: [ https://identifiers.org/biotools/homer ]\n        version: [ \"4.10.3\" ]\n\ninputs:\n\n  bam_file:\n    type: File\n    doc: \"Alignment file, BAM\"\n\n  fragment_size:\n    type:\n      - \"null\"\n      - int\n      - string\n    inputBinding:\n      position: 5\n      prefix: \"-fragLength\"\n    doc: |\n      Set fragment size.\n      By default is estimated as if it was single end ChIP-Seq experiment.\n      Possible values:\n        \"#\" - int value to be used as fragment size\n        \"given\" - use read lengths\n        \"pe\" - calculate from paired end read coordinates\n\n  total_reads:\n    type:\n      - \"null\"\n      - int\n      - string\n    inputBinding:\n      position: 6\n      prefix: \"-totalReads\"\n    doc: |\n      Set total reads number for downstream normalization.\n      Default: autocalculated, equal to uniquely mapped reads number\n      Possible values:\n        \"#\" - int value to be used as total reads number\n        \"all\" - autocalculated, equal to uniquely + multi mapped reads number\n\n  min_length:\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: \"-minlen\"\n    doc: |\n      Discard reads smaller then\n\n  max_length:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: \"-maxlen\"\n    doc: |\n      Discard reads bigger then\n\noutputs:\n\n  output_tag_folder:\n    type: Directory\n    outputBinding:\n      glob: $(inputs.bam_file.basename.split('.')[0])\n    doc: \"Tag directory\"\n\nbaseCommand: [\"makeTagDirectory\"]\narguments:\n  - valueFrom: $(inputs.bam_file.basename.split('.')[0])\n  - valueFrom: $(\"default/\" + inputs.bam_file.basename)\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"homer-make-tag-directory\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs makeTagDirectory that basically parses through the alignment file and splits the tags into separate\n  files based on the chromosomes.\n\n  Multiple alignment files are not supported. Alignment file's format is restricted to be only BAM.\n\n  Output is placed in a folder with the name derived from the input BAM file's basename.\n\n  Skipped arguments:\n\n    Rely on the default value:\n      -format           - format will be autodetected\n      -precision        - the default value is used\n\n    Not required general functionality:\n      -d\n      -single\n      -force5th\n      -t\n      -flip\n      -tbp\n\n    Not required GC-bias options:\n      -genome\n      -checkGC\n      -normGC\n      -normFixedOligo\n      -minNormRatio\n      -maxNormRatio\n      -iterNorm\n      -filterReads\n\n    Not required HiC options:\n      -removePEbg\n      -restrictionSite\n      -removeSpikes\n      -bowtiePE\n      -directional\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam_file', 'doc': 'Alignment file, BAM', 'type': 'File'}, {'id': 'fragment_size', 'doc': 'Set fragment size.\\nBy default is estimated as if it was single end ChIP-Seq experiment.\\nPossible values:\\n  \"#\" - int value to be used as fragment size\\n  \"given\" - use read lengths\\n  \"pe\" - calculate from paired end read coordinates\\n', 'inputBinding': {'position': 5, 'prefix': '-fragLength'}, 'type': ['null', 'int', 'string']}, {'id': 'max_length', 'doc': 'Discard reads bigger then\\n', 'inputBinding': {'position': 8, 'prefix': '-maxlen'}, 'type': ['null', 'int']}, {'id': 'min_length', 'doc': 'Discard reads smaller then\\n', 'inputBinding': {'position': 7, 'prefix': '-minlen'}, 'type': ['null', 'int']}, {'id': 'total_reads', 'doc': 'Set total reads number for downstream normalization.\\nDefault: autocalculated, equal to uniquely mapped reads number\\nPossible values:\\n  \"#\" - int value to be used as total reads number\\n  \"all\" - autocalculated, equal to uniquely + multi mapped reads number\\n', 'inputBinding': {'position': 6, 'prefix': '-totalReads'}, 'type': ['null', 'int', 'string']}]",
    "cwl_outputs": "[{'id': 'output_tag_folder', 'doc': 'Tag directory', 'outputBinding': {'glob': \"$(inputs.bam_file.basename.split('.')[0])\"}, 'type': 'Directory'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/homer:v0.0.2'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'homer', 'version': ['4.10.3'], 'specs': ['https://identifiers.org/biotools/homer']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['makeTagDirectory']",
    "cwl_arguments": "[{'valueFrom': \"$(inputs.bam_file.basename.split('.')[0])\"}, {'valueFrom': '$(\"default/\" + inputs.bam_file.basename)'}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': '${\\n  return [\\n    {\"class\": \"Directory\",\\n     \"basename\": \"default\",\\n     \"listing\": [inputs.bam_file],\\n     \"writable\": true}\\n  ]\\n}\\n'}, {'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Tool runs makeTagDirectory that basically parses through the alignment file and splits the tags into separate\nfiles based on the chromosomes.\n\nMultiple alignment files are not supported. Alignment file's format is restricted to be only BAM.\n\nOutput is placed in a folder with the name derived from the input BAM file's basename.\n\nSkipped arguments:\n\n  Rely on the default value:\n    -format           - format will be autodetected\n    -precision        - the default value is used\n\n  Not required general functionality:\n    -d\n    -single\n    -force5th\n    -t\n    -flip\n    -tbp\n\n  Not required GC-bias options:\n    -genome\n    -checkGC\n    -normGC\n    -normFixedOligo\n    -minNormRatio\n    -maxNormRatio\n    -iterNorm\n    -filterReads\n\n  Not required HiC options:\n    -removePEbg\n    -restrictionSite\n    -removeSpikes\n    -bowtiePE\n    -directional\n",
    "cwl_stdout": null,
    "cwl_s:name": "homer-make-tag-directory",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "hopach/hopach.cwl",
    "sha": "e324d07e7139aac12f5a4df96b4ba0a1824d2243",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/hopach/hopach.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement\n    dockerPull: biowardrobe2/hopach:v0.0.6\n\ninputs:\n\n  expression_files:\n    type: File[]\n    inputBinding:\n      prefix: \"--input\"\n    doc: \"Input CSV/TSV files with RefseqId, GeneId, Chrom, TxStart, TxEnd, Strand, TotalReads, Rpkm columns\"\n\n  expression_aliases:\n    type:\n      - \"null\"\n      - string[]\n    inputBinding:\n      prefix: \"--name\"\n    doc: \"Input aliases, the order corresponds to --input order. Default: basename of --input files\"\n\n  target_column:\n    type: string?\n    inputBinding:\n      prefix: \"--target\"\n    doc: \"Target column to be used by hopach clustering. Default: Rpkm\"\n\n  combine:\n    type:\n      - \"null\"\n      - string[]\n    inputBinding:\n      prefix: \"--combine\"\n    doc: \"Combine inputs by columns names. Default: RefseqId, GeneId, Chrom, TxStart, TxEnd, Strand\"\n\n  cluster_method:\n    type:\n      - \"null\"\n      - type: enum\n        symbols: [\"row\", \"column\", \"both\"]\n    inputBinding:\n      prefix: \"--method\"\n    doc: \"Cluster method. Default: both\"\n\n  row_dist_metric:\n    type:\n      - \"null\"\n      - type: enum\n        symbols: [\"cosangle\", \"abscosangle\", \"euclid\", \"abseuclid\", \"cor\", \"abscor\"]\n    inputBinding:\n      prefix: \"--rowdist\"\n    doc: \"Distance metric for row clustering. Default: cosangle\"\n\n  col_dist_metric:\n    type:\n      - \"null\"\n      - type: enum\n        symbols: [\"cosangle\", \"abscosangle\", \"euclid\", \"abseuclid\", \"cor\", \"abscor\"]\n    inputBinding:\n      prefix: \"--coldist\"\n    doc: \"Distance metric for column clustering. Default: euclid\"\n\n  row_logtransform:\n    type: boolean?\n    inputBinding:\n      prefix: \"--rowlogtransform\"\n    doc: \"Log2 transform input data prior to running row clustering. Default: false\"\n\n  col_logtransform:\n    type: boolean?\n    inputBinding:\n      prefix: \"--collogtransform\"\n    doc: \"Log2 transform input data prior to running column clustering. Default: false\"\n\n  row_center:\n    type:\n      - \"null\"\n      - type: enum\n        symbols: [\"mean\", \"median\"]\n    inputBinding:\n      prefix: \"--rowcenter\"\n    doc: \"Center rows prior to running row clustering. Default: not centered\"\n\n  col_center:\n    type:\n      - \"null\"\n      - type: enum\n        symbols: [\"mean\", \"median\"]\n    inputBinding:\n      prefix: \"--colcenter\"\n    doc: \"Center columns prior to running column clustering. Default: not centered\"\n\n  row_normalize:\n    type: boolean?\n    inputBinding:\n      prefix: \"--rownorm\"\n    doc: \"Normalize rows prior to running row clustering. Default: not normalized\"\n\n  col_normalize:\n    type: boolean?\n    inputBinding:\n      prefix: \"--colnorm\"\n    doc: \"Normalize columns prior to running column clustering. Default: not normalized\"\n\n  row_min:\n    type: float?\n    inputBinding:\n      prefix: \"--rowmin\"\n    doc: \"Exclude rows from clustering by the min value of a target column. Default: 0\"\n\n  keep_discarded:\n    type: boolean?\n    inputBinding:\n      prefix: \"--rowkeep\"\n    doc: \"Append excluded rows to the output table after clustering is finished. Default: false\"    \n\n  palette:\n    type:\n      - \"null\"\n      - string[]\n    inputBinding:\n      prefix: \"--palette\"\n    doc: \"Palette color names. Default: red, black, green\"\n\n  output_prefix:\n    type: string?\n    inputBinding:\n      prefix: \"--output\"\n    doc: \"Output prefix. Default: hopach\"\n\noutputs:\n\n  clustering_results:\n    type: File\n    outputBinding:\n      glob: \"*_clustering.tsv\"\n    doc: \"Hopach clustering results\"\n\n  heatmap_png:\n    type: File\n    outputBinding:\n      glob: \"*_heatmap.png\"\n    doc: \"Heatmap ordered by hopach clustering results\"\n\n  column_clustering_labels:\n    type: File?\n    outputBinding:\n      glob: \"*_column_clustering_labels.tsv\"\n    doc: \"Hopach column clustering labels\"\n\n  row_distance_matrix_png:\n    type: File?\n    outputBinding:\n      glob: \"*_row_dist_matrix.png\"\n    doc: \"Row distance matrix\"\n\n  col_distance_matrix_png:\n    type: File?\n    outputBinding:\n      glob: \"*_column_dist_matrix.png\"\n    doc: \"Column distance matrix\"\n\n  stderr_log:\n    type: File\n    outputBinding:\n      glob: \"hopach_stderr.log\"\n    doc: \"Hopach stderr log\"\n\n  stdout_log:\n    type: File\n    outputBinding:\n      glob: \"hopach_stdout.log\"\n    doc: \"Hopach stdout log\"\n\nbaseCommand: hopach_order.R  # from https://github.com/Barski-lab/workflows/blob/master/tools/dockerfiles/scripts/hopach_order.R\n\nstderr: hopach_stderr.log\nstdout: hopach_stdout.log\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"hopach\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Runs hopach clustering algorithm with the combined by specific columns input files.\n  Works with minimum two genelist files. The HOPACH clustering algorithm builds a\n  hierarchical tree of clusters by recursively partitioning a data set,while ordering\n  and possibly collapsing clusters at each level.\n",
    "cwl_error": "mapping values are not allowed here\n  in \"<unicode string>\", line 7, column 15:\n        dockerPull: biowardrobe2/hopach:v0.0.6\n                  ^ (line: 7)"
  },
  {
    "path": "intervene/intervene.cwl",
    "sha": "be369cc69888e3284716b695f8f0c375967bdabe",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/intervene/intervene.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/intervene:0.6.5--pyh3252c3a_1\n  SoftwareRequirement:\n    packages:\n      intervene:\n        specs: [ https://identifiers.org/biotools/intervene ]\n\ninputs:\n  figure_format:\n    type:\n    - \"null\"\n    - type: enum\n      symbols:\n      - \"pdf\"\n      - \"svg\"\n      - \"ps\"\n      - \"tiff\"\n      - \"png\"\n    inputBinding:\n      position: 5\n      prefix: \"--figtype\"\n    doc: |\n      Format to export diagram figure\n\n  intervals_colors:\n    type:\n    - \"null\"\n    - string[]\n    doc: |\n      Comma-separated list of matplotlib-valid colors for fill.\n      E.g., \u2013colors=r,b,k\n\n  intervals_files:\n    type: File[]\n    format:\n      - edam:format_3003  # BED\n      - edam:format_2306  # GTF\n      - edam:format_1974  # GFFv2\n    inputBinding:\n      position: 6\n      prefix: \"--input\"\n    doc: |\n      Files with the input genomic regions in (BED/GTF/GFF) format\n\n  intervals_aliases:\n    type:\n    - \"null\"\n    - string[]\n    inputBinding:\n      position: 7\n      prefix: \"--names\"\n      itemSeparator: \",\"\n      valueFrom: |\n        ${\n          if (self !== null) {\n            var cleaned = [];\n            self.forEach(function (s, i) {\n              cleaned.push(s.replace(/\\t|\\s|\\[|\\]|\\>|\\</g, \"_\"));\n            });\n            return cleaned;\n          };\n          return self;\n        }\n    doc: |\n      Comma-separated list of names as labels for input files.\n      For example: --names=A,B,C,D,E,F\n      If it is not set file names will be used as labels.\n\n  overlap_threshold:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: \"--overlap-thresh\"\n      valueFrom: |\n        ${\n          if (inputs.diagram_type == \"pairwise\") {\n            return null;\n          };\n          return self;\n        }\n    doc: |\n      Minimum number of overlapped regions to save them into bed/txt file\n      Default: 1\n\n  diagram_type:\n    type:\n    - \"null\"\n    - type: enum\n      symbols:\n      - \"venn\"\n      - \"upset\"\n      - \"pairwise\"\n    default: \"venn\"\n    doc: |\n      Diagram type to report\n\noutputs:\n  overlapped_intervals_files:\n    type:\n    - \"null\"\n    - File[]\n    outputBinding:\n      glob: \"./results/sets/*\"\n    doc: \"Overlapped intervals files\"\n\n  overlapped_combinations:\n    type: File?\n    outputBinding:\n      glob: \"./results/*combinations.txt\"\n    doc: \"Overlapped combinations file\"\n\n  overlapped_fraction_matrix:\n    type: File?\n    outputBinding:\n      glob: \"./results/*frac_matrix.txt\"\n    doc: \"Overlapped fraction matrix file\"\n\n  overlapped_plot:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n          if (inputs.figure_format !== null) {\n            return \"./results/intervene*.\" + inputs.figure_format;\n          };\n          return \"./results/intervene*.pdf\";\n        }\n    doc: \"Diagram of the overlapped intervals\"\n\nbaseCommand: intervene\n\narguments:\n  - $(inputs.diagram_type)\n  - \"--type\"\n  - \"genomic\"\n  - |\n    $(inputs.diagram_type == \"pairwise\" ? null : \"--save-overlaps\")\n  - $(inputs.diagram_type == \"pairwise\" ? \"--diagonal\" : null)\n  - $(inputs.diagram_type == \"pairwise\" ? [\"--htype\", \"color\"] : null)\n  - valueFrom: |\n      ${\n        if (inputs.diagram_type == \"venn\" && inputs.intervals_colors !== null) {\n          return inputs.intervals_colors;\n        }\n        return null;\n      }\n    prefix: \"--colors\"\n    itemSeparator: \",\"\n  - \"--project\"\n  - \"intervene\"\n  - \"-o\"\n  - \"results\"\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  Intervene: a tool for intersection and visualization of multiple genomic regions\n  ================================================================================\n\n  Hardcoded parameters:\n  --type genomic       use genomic regions as inputs\n  --save-overlaps      save overlapping regions/names for all the combinations as bed/txt\n  --project intervene  for the guatanteed access to results location\n  -o results           for the guatanteed access to results location\n  \n  Skipped parameters:\n  --filenames as it seems not logical to have it when default\n              for --names already uses file names\n  \n  When run in \"pairwise\" mode:\n  --save-overlaps and --overlap-thresh set to null\n  --htype and --diagonal added\n\n  When run in \"venn\" mode:\n  --colors aren't ignored\n",
    "cwl_validation_error": "../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:2:1:     Object `` is not\n                                                                                           valid because:\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:140:1:   the `arguments`\n                                                                                             field is not valid\n                                                                                             because:\n                                                                                               Expected a\n                                                                                               <class 'NoneType'>\n                                                                                               but got CommentedSeq"
  },
  {
    "path": "iqtree/iqtree.cwl",
    "sha": "657b432384e6e2d6e1e98f7ac8aec0693e2826da",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/iqtree/iqtree.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ninputs:\n  alignment:\n    type: File\n    label: Multiple Sequence Alignment\n\noutputs:\n  tree:\n    type: File\n    label: Maximum-likelihood tree\n    outputBinding:\n      glob: \"*.treefile\"\n\narguments:\n  - -s \n  - $(inputs.alignment.path)\n\nbaseCommand: iqtree2\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/iqtree:2.2.2.7--h21ec9f0_2\n  SoftwareRequirement:\n    packages:\n      iqtree:\n        version: [ \"2.2.2.7\" ]\n        specs: [ https://identifiers.org/biotools/iqtree ]\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.alignment)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'alignment', 'label': 'Multiple Sequence Alignment', 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'tree', 'label': 'Maximum-likelihood tree', 'outputBinding': {'glob': '*.treefile'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/iqtree:2.2.2.7--h21ec9f0_2'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'iqtree', 'version': ['2.2.2.7'], 'specs': ['https://identifiers.org/biotools/iqtree']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "iqtree2",
    "cwl_arguments": "['-s', '$(inputs.alignment.path)']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': ['$(inputs.alignment)']}]",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "ivar/ivar_trim.cwl",
    "sha": "8c8826758a617492ee8e03185a30bdc71c1e1a86",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/ivar/ivar_trim.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: {$include: docker_container.txt}\n  SoftwareRequirement:\n    packages:\n      {$import: software_requirement.yml}\n\ndoc: trim primers from mapped reads\n\nbaseCommand: [\"ivar\", \"trim\"]\n\ninputs:\n  bam:\n    doc: aligned and sorted reads to be trimmed in BAM format\n    type: File\n    format: edam:format_2572\n    secondaryFiles: .bai\n    inputBinding:\n      prefix: -i\n      position: 10\n  bed:\n    doc: BED file with primer sequences and positions\n    type: File\n    format: edam:format_3003\n    inputBinding:\n      prefix: -b\n      position: 20\n  output_prefix:\n    doc: Prefix for the output BAM file\n    type: string\n    inputBinding:\n      prefix: -p\n      position: 30\n  min_length:\n    doc: Minimum length of read to retain after trimming\n    type: int?\n    default: 30\n    inputBinding:\n      position: 1\n      prefix: -m\n  min_quality:\n    doc: Minimum quality threshold for sliding window to pass\n    type: int?\n    default: 20\n    inputBinding:\n      position: 1\n      prefix: -q\n  window_size:\n    doc: Width of sliding window\n    type: int?\n    default: 4\n    inputBinding:\n      position: 1\n      prefix: -s\n  primerless_reads:\n    doc: Include reads with no primers. By default, reads with no primers are excluded\n    type: boolean\n    default: false\n    inputBinding:\n      prefix: -e\n\noutputs:\n  bam_filtered:\n    type: File\n    format: edam:format_2572\n    outputBinding:\n      glob: $(inputs.output_prefix).bam\n  \n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam', 'secondaryFiles': '.bai', 'doc': 'aligned and sorted reads to be trimmed in BAM format', 'format': 'http://edamontology.org/format_2572', 'inputBinding': {'position': 10, 'prefix': '-i'}, 'type': 'File'}, {'id': 'bed', 'doc': 'BED file with primer sequences and positions', 'format': 'http://edamontology.org/format_3003', 'inputBinding': {'position': 20, 'prefix': '-b'}, 'type': 'File'}, {'id': 'min_length', 'doc': 'Minimum length of read to retain after trimming', 'inputBinding': {'position': 1, 'prefix': '-m'}, 'default': 30, 'type': ['null', 'int']}, {'id': 'min_quality', 'doc': 'Minimum quality threshold for sliding window to pass', 'inputBinding': {'position': 1, 'prefix': '-q'}, 'default': 20, 'type': ['null', 'int']}, {'id': 'output_prefix', 'doc': 'Prefix for the output BAM file', 'inputBinding': {'position': 30, 'prefix': '-p'}, 'type': 'string'}, {'id': 'primerless_reads', 'doc': 'Include reads with no primers. By default, reads with no primers are excluded', 'inputBinding': {'prefix': '-e'}, 'default': False, 'type': 'boolean'}, {'id': 'window_size', 'doc': 'Width of sliding window', 'inputBinding': {'position': 1, 'prefix': '-s'}, 'default': 4, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'bam_filtered', 'outputBinding': {'glob': '$(inputs.output_prefix).bam'}, 'format': 'http://edamontology.org/format_2572', 'type': 'File'}]",
    "cwl_hints": "[{'dockerPull': {'$include': 'docker_container.txt'}, 'class': 'DockerRequirement'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 10000}, {'packages': {'$import': 'software_requirement.yml'}, 'class': 'SoftwareRequirement'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ivar', 'trim']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": "trim primers from mapped reads",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "kraken2/kraken2.cwl",
    "sha": "98628628ad21069cd3f1c472a25ef7298a2f4932",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/kraken2/kraken2.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand: kraken2\n\ninputs:\n  database:\n    type: \n      - Directory\n      - File\n    label: \"Kraken 2 DB\"\n    doc: \"(either a File refer to the hash.k2d file in the DB or a Directory to reference the entire directory)\"\n    inputBinding:\n      position: 1\n      prefix: --db\n      valueFrom: |\n        ${ return (self.class == \"File\") ? self.dirname : self.path }\n    secondaryFiles:\n      - $(\"opts.k2d\")\n      - $(\"taxo.k2d\")\n  input_sequences:\n    type: \n      - File\n      - File[]\n    label: \"Input sequence files\"\n    format:\n      - edam:format_1929  # FASTA\n      - edam:format_1930  # FASTQ\n    inputBinding:\n      position: 2\n  output:\n    type: string\n    label: \"Filename for output\"\n    inputBinding:\n      position: 0\n      prefix: --output\n  threads:\n    type: int?\n    label: \"Number of threads\"\n    default: 1\n    inputBinding:\n      position: 0\n      prefix: --threads\n  quick:\n    type: boolean?\n    label: \"Quick operation (use first hit or hits)\"\n    inputBinding:\n      position: 0\n      prefix: --quick\n  unclassified_output:\n    type: string?\n    label: \"Print unclassified sequences to this filename\"\n    inputBinding:\n      position: 0\n      prefix: unclassified_output\n  classified_output:\n    type: string?\n    label: \"Print classified sequences to this filename\"\n    inputBinding:\n      position: 0\n      prefix: classified_output\n  confidence:\n    type: float?\n    label: \"Confidence score threshold\"\n    default: 0.0\n    inputBinding:\n      position: 0\n      prefix: --confidence\n  minimum-base-quality:\n    type: int?\n    label: \"Minimum base quality used in classification (only used with FASTQ input\"\n    default: 0\n    inputBinding:\n      position: 0\n      prefix: --minimum-base-quality\n  report:\n    type:\n      - \"null\"\n      - type: record\n        name: report_parameters\n        fields:\n          output_report:\n            type: string?\n            label: \"Print a report with aggregate counts/clade to file\"\n            inputBinding:\n              position: 0\n              prefix: --report\n          use-mpa-style:\n            type: boolean?\n            label: \"With --report, format report output like Kraken 1's kraken-mpa-report\"\n            inputBinding:\n              position: 0\n              prefix: --use-mpa-style\n          report-zero-counts:\n            type: boolean?\n            label: \"With --report, report countrs for ALL taxa, even if counts are zero\"\n            inputBinding:\n              position: 0\n              prefix: --report-zero-counts\n  memory-mapping:\n    type: boolean?\n    label: \"Avoid loading database into RAM\"\n    inputBinding:\n      position: 0\n      prefix: --memory-mapping\n  paired:\n    type: boolean?\n    label: \"The filenames provided have paired end reads\"\n    inputBinding:\n      position: 0\n      prefix: --paired\n\n  use-names:\n    type: boolean?\n    label: \"Print scientific names instead of just taxids\"\n    inputBinding:\n      position: 0\n      prefix: --use-names\n  gzip-compressed:\n    type: boolean?\n    label: \"Input files are compressed with GZIP\"\n    inputBinding:\n      position: 0\n      prefix: --gzip-compressed\n  bzip2-compressed:\n    type: boolean?\n    label: \"Input files are compressed with BZIP2\"\n    inputBinding:\n      position: 0\n      prefix: --bzip2-compressed\noutputs:\n  kraken_output:\n    type: File\n    outputBinding:\n      glob: $(inputs.output)\n  kraken_report:\n    type: File?\n    outputBinding:\n      glob: $(inputs.output_report)\n  classfied_sequences:\n    type: File?\n    outputBinding:\n      glob: $(inputs.classified_output)\n  unclassified_sequences:\n    type: File?\n    outputBinding:\n      glob: $(inputs.unclassified_output)\nhints:\n  SoftwareRequirement:\n    packages:\n      kraken2:\n        version: [ \"2.0.8-beta\" ]\n        specs: [  https://identifiers.org/biotools/kraken2 ]\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/kraken2:2.0.8_beta--pl526h6bb024c_0\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  ResourceRequirement:\n    ramMin: 45000  # kraken2 standard DB is 38 GB. RAM requirement is modelled on testing with this \n    coresMin: 1\n\n$namespaces:\n  edam: http://edamontology.org/\n  s: http://schema.org/\n$schemas:\n  - \"https://edamontology.org/EDAM.owl\"\n  - \"https://schema.org/version/latest/schemaorg-current-https.rdf\"\n\ns:name: \"kraken2\"\ns:license: \"https://spdx.org/licenses/MIT.html\"\ns:creator:\n- class: s:Organization\n  s:legalName: \"South African National Bioinformatics Institute\"\n  s:member:\n  - class: s:Person\n    s:name: Peter van Heusden\n    s:email: mailto:pvh@sanbi.ac.za\n    s:sameAs:\n    - id: https://orcid.org/0000-0001-6553-5274\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bzip2-compressed', 'label': 'Input files are compressed with BZIP2', 'inputBinding': {'position': 0, 'prefix': '--bzip2-compressed'}, 'type': ['null', 'boolean']}, {'id': 'classified_output', 'label': 'Print classified sequences to this filename', 'inputBinding': {'position': 0, 'prefix': 'classified_output'}, 'type': ['null', 'string']}, {'id': 'confidence', 'label': 'Confidence score threshold', 'inputBinding': {'position': 0, 'prefix': '--confidence'}, 'default': 0.0, 'type': ['null', 'float']}, {'id': 'database', 'label': 'Kraken 2 DB', 'secondaryFiles': ['$(\"opts.k2d\")', '$(\"taxo.k2d\")'], 'doc': '(either a File refer to the hash.k2d file in the DB or a Directory to reference the entire directory)', 'inputBinding': {'position': 1, 'prefix': '--db', 'valueFrom': '${ return (self.class == \"File\") ? self.dirname : self.path }\\n'}, 'type': ['Directory', 'File']}, {'id': 'gzip-compressed', 'label': 'Input files are compressed with GZIP', 'inputBinding': {'position': 0, 'prefix': '--gzip-compressed'}, 'type': ['null', 'boolean']}, {'id': 'input_sequences', 'label': 'Input sequence files', 'format': ['http://edamontology.org/format_1929', 'http://edamontology.org/format_1930'], 'inputBinding': {'position': 2}, 'type': ['File', {'items': 'File', 'type': 'array'}]}, {'id': 'memory-mapping', 'label': 'Avoid loading database into RAM', 'inputBinding': {'position': 0, 'prefix': '--memory-mapping'}, 'type': ['null', 'boolean']}, {'id': 'minimum-base-quality', 'label': 'Minimum base quality used in classification (only used with FASTQ input', 'inputBinding': {'position': 0, 'prefix': '--minimum-base-quality'}, 'default': 0, 'type': ['null', 'int']}, {'id': 'output', 'label': 'Filename for output', 'inputBinding': {'position': 0, 'prefix': '--output'}, 'type': 'string'}, {'id': 'paired', 'label': 'The filenames provided have paired end reads', 'inputBinding': {'position': 0, 'prefix': '--paired'}, 'type': ['null', 'boolean']}, {'id': 'quick', 'label': 'Quick operation (use first hit or hits)', 'inputBinding': {'position': 0, 'prefix': '--quick'}, 'type': ['null', 'boolean']}, {'id': 'report', 'type': ['null', {'name': 'report_parameters', 'fields': [{'name': 'output_report', 'type': ['null', 'string'], 'inputBinding': {'position': 0, 'prefix': '--report'}, 'label': 'Print a report with aggregate counts/clade to file'}, {'name': 'report-zero-counts', 'type': ['null', 'boolean'], 'inputBinding': {'position': 0, 'prefix': '--report-zero-counts'}, 'label': 'With --report, report countrs for ALL taxa, even if counts are zero'}, {'name': 'use-mpa-style', 'type': ['null', 'boolean'], 'inputBinding': {'position': 0, 'prefix': '--use-mpa-style'}, 'label': \"With --report, format report output like Kraken 1's kraken-mpa-report\"}], 'type': 'record'}]}, {'id': 'threads', 'label': 'Number of threads', 'inputBinding': {'position': 0, 'prefix': '--threads'}, 'default': 1, 'type': ['null', 'int']}, {'id': 'unclassified_output', 'label': 'Print unclassified sequences to this filename', 'inputBinding': {'position': 0, 'prefix': 'unclassified_output'}, 'type': ['null', 'string']}, {'id': 'use-names', 'label': 'Print scientific names instead of just taxids', 'inputBinding': {'position': 0, 'prefix': '--use-names'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'classfied_sequences', 'outputBinding': {'glob': '$(inputs.classified_output)'}, 'type': ['null', 'File']}, {'id': 'kraken_output', 'outputBinding': {'glob': '$(inputs.output)'}, 'type': 'File'}, {'id': 'kraken_report', 'outputBinding': {'glob': '$(inputs.output_report)'}, 'type': ['null', 'File']}, {'id': 'unclassified_sequences', 'outputBinding': {'glob': '$(inputs.unclassified_output)'}, 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/kraken2:2.0.8_beta--pl526h6bb024c_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'kraken2', 'version': ['2.0.8-beta'], 'specs': ['https://identifiers.org/biotools/kraken2']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "kraken2",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 's': 'http://schema.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM.owl', 'https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 45000}]",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": "kraken2",
    "cwl_s:license": "https://spdx.org/licenses/MIT.html",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': 'South African National Bioinformatics Institute', 's:member': [{'class': 's:Person', 's:name': 'Peter van Heusden', 's:email': 'mailto:pvh@sanbi.ac.za', 's:sameAs': [{'id': 'https://orcid.org/0000-0001-6553-5274'}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "lofreq/lofreq_call.cwl",
    "sha": "03db19671331963aff34a38252b0f361f08560fd",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/lofreq/lofreq_call.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1\n  SoftwareRequirement:\n    packages:\n      lofreq:\n        version: [ \"2.1.4\" ]\n        specs: [ https://identifiers.org/biotools/lofreq ]\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference_index)\n      - $(inputs.reference_fasta)\n      - $(inputs.reads_index)\n\nbaseCommand: [lofreq, call-parallel]\n\narguments:\n  - prefix: --out\n    valueFrom: $(inputs.reads_align.nameroot)_variant.vcf\n    position: 99\n\ninputs:\n  threads:\n    type: int?\n    default: 1\n    inputBinding:\n      prefix: --pp-threads\n      position: 1\n  reference_index:\n    type: File\n  reference_fasta:\n    doc: 'fasta'\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: -f\n      position: 1000\n      valueFrom: $(self.basename)\n\n  call_indels:\n    type: boolean?\n    inputBinding:\n      prefix: --call-indels\n      position: 3\n    doc: \"Enable indel calls (note: preprocess your file to include indel alignment qualities!)\"\n\n  only_indels:\n    type: boolean?\n    inputBinding:\n      prefix: --only-indels\n      position: 4\n    doc: \"Only call indels; no SNVs\"\n\n  bed:\n    label: regions_from_bed\n    type: File?\n    doc: 'List of positions (chr pos) or regions (BED)'\n    inputBinding:\n      prefix: --bed\n\n  region:\n    type: string?\n    doc: 'Limit calls to this region (chrom:start-end)'\n    inputBinding:\n      prefix: --region\n\n  min_bq:\n    label: min_base_quality\n    type: int?\n    default: 6\n    inputBinding:\n      prefix: --min-bq\n    doc: 'Skip any base with baseQ smaller than INT [6]'\n\n  min_alt_bq:\n    label: min_alterne_base_quality\n    type: int?\n    default: 6\n    inputBinding:\n      prefix: --min-alt-bq\n    doc: 'Skip alternate bases with baseQ smaller than INT [6]'\n\n  def_alt_bq:\n    label: def_alt_base_quality\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --def-alt-bq\n    doc: 'Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]'\n\n  min_jq:\n    label: min_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix:  --min-jq\n    doc: 'Skip any base with joinedQ smaller than INT [0]'\n\n  min_alt_jq:\n    label: min_alt_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --min-alt-jq\n    doc: \"Skip alternate bases with joinedQ smaller than INT [0]\"\n\n  def_alt_jq:\n    label: def_alt_joinedq\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --def-alt-jq\n    doc: \"Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]\"\n\n  no_baq:\n    label: disable_base_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --no-baq\n    doc: 'Disable use of base-alignment quality (BAQ)'\n\n  no_idaq:\n    label: disable_indel_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --no-idaq\n    doc: \"Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)\"\n\n  del_baq:\n    label: delete_base_alignment_quality\n    type: boolean?\n    inputBinding:\n      prefix: --del-baq\n    doc: \"Delete pre-existing BAQ values, i.e. compute even if already present in BAM\"\n\n  no_ext_base_alignment_quality:\n    type: boolean?\n    inputBinding:\n      prefix: --no-ext-baq\n    doc: \"Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)\"\n\n  min_mq:\n    label: min_mapping_quality\n    type: int?\n    default: 0\n    inputBinding:\n      prefix: --min-mq\n    doc: \"Skip reads with mapping quality smaller than INT [0]\"\n\n  max_mapping_quality:\n    type: int?\n    default: 255\n    inputBinding:\n      prefix: --max-mq\n    doc: \"Cap mapping quality at INT [255]\"\n\n  no_mapping_quality:\n    type: boolean?\n    inputBinding:\n      prefix: --no-mq\n    doc: \"Don't merge mapping quality in LoFreq's model\"\n\n  enable_source_qual:\n    type: boolean?\n    inputBinding:\n      prefix: --src-qual\n    doc: 'Enable computation of source quality'\n\n  ignore_vcf:\n    type: File[]?\n    inputBinding:\n      prefix: --ign-vcf\n    doc: \"Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas\"\n\n  replace_non_match:\n    type: int?\n    default: -1\n    inputBinding:\n      prefix: --def-nm-q\n    doc: 'If >= 0, then replace non-match base qualities with this default value [-1]'\n\n  pvalue_cutoff:\n    type: float?\n    default: 0.01\n    inputBinding:\n      prefix: --sig\n    doc: \"P-Value cutoff / significance level [0.010000]\"\n\n  bonferroni:\n    type: string?\n    default: 'dynamic'\n    inputBinding:\n      prefix: --bonf\n    doc: \"Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']\"\n\n  min_cov:\n    type: int?\n    default: 10\n    inputBinding:\n      prefix: --min-cov\n      position: 2\n    doc: \"Test only positions having at least this coverage [1] (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)\"\n\n  max_depth_cov:\n    type: int?\n    default: 1000000\n    inputBinding:\n      prefix: --max-depth\n    doc: \"Cap coverage at this depth [1000000]\"\n\n  illumina_1_3:\n    type: boolean?\n    inputBinding:\n      prefix: --illumina-1.3\n    doc: \"Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded\"\n\n  use_orphan:\n    type: boolean?\n    inputBinding:\n      prefix: --use-orphan\n    doc: \"Count anomalous read pairs (i.e. where mate is not aligned properly)\"\n\n  no_default_filter:\n    type: boolean?\n    doc: \"Don't run default lofreq filter automatically after calling variants\"\n    inputBinding:\n      prefix: --no-default-filter\n    # Other options \n    # --plp-summary-only      No variant calling. Just output pileup summary per column\n    # --force-overwrite       Overwrite any existing output\n    # --verbose               Be verbose\n    # --debug                 Enable debugging\n\n  reads_align:\n    doc: 'bam'\n    type: File\n    format: edam:format_2572  # BAM\n    inputBinding:\n      position: 1001\n      valueFrom: $(self.basename)\n\n  reads_index:\n    doc: bai\n    type: File\n\noutputs:\n  vcf:\n    type: File\n    format: edam:format_3016  # VCF\n    outputBinding:\n      glob: \"*.vcf\"\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bed', 'label': 'regions_from_bed', 'doc': 'List of positions (chr pos) or regions (BED)', 'inputBinding': {'prefix': '--bed'}, 'type': ['null', 'File']}, {'id': 'bonferroni', 'doc': \"Bonferroni factor. 'dynamic' (increase per actually performed test) or INT ['dynamic']\", 'inputBinding': {'prefix': '--bonf'}, 'default': 'dynamic', 'type': ['null', 'string']}, {'id': 'call_indels', 'doc': 'Enable indel calls (note: preprocess your file to include indel alignment qualities!)', 'inputBinding': {'position': 3, 'prefix': '--call-indels'}, 'type': ['null', 'boolean']}, {'id': 'def_alt_bq', 'label': 'def_alt_base_quality', 'doc': 'Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]', 'inputBinding': {'prefix': '--def-alt-bq'}, 'default': 0, 'type': ['null', 'int']}, {'id': 'def_alt_jq', 'label': 'def_alt_joinedq', 'doc': 'Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]', 'inputBinding': {'prefix': '--def-alt-jq'}, 'default': 0, 'type': ['null', 'int']}, {'id': 'del_baq', 'label': 'delete_base_alignment_quality', 'doc': 'Delete pre-existing BAQ values, i.e. compute even if already present in BAM', 'inputBinding': {'prefix': '--del-baq'}, 'type': ['null', 'boolean']}, {'id': 'enable_source_qual', 'doc': 'Enable computation of source quality', 'inputBinding': {'prefix': '--src-qual'}, 'type': ['null', 'boolean']}, {'id': 'ignore_vcf', 'doc': 'Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas', 'inputBinding': {'prefix': '--ign-vcf'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'illumina_1_3', 'doc': 'Assume the quality is Illumina-1.3-1.7/ASCII+64 encoded', 'inputBinding': {'prefix': '--illumina-1.3'}, 'type': ['null', 'boolean']}, {'id': 'max_depth_cov', 'doc': 'Cap coverage at this depth [1000000]', 'inputBinding': {'prefix': '--max-depth'}, 'default': 1000000, 'type': ['null', 'int']}, {'id': 'max_mapping_quality', 'doc': 'Cap mapping quality at INT [255]', 'inputBinding': {'prefix': '--max-mq'}, 'default': 255, 'type': ['null', 'int']}, {'id': 'min_alt_bq', 'label': 'min_alterne_base_quality', 'doc': 'Skip alternate bases with baseQ smaller than INT [6]', 'inputBinding': {'prefix': '--min-alt-bq'}, 'default': 6, 'type': ['null', 'int']}, {'id': 'min_alt_jq', 'label': 'min_alt_joinedq', 'doc': 'Skip alternate bases with joinedQ smaller than INT [0]', 'inputBinding': {'prefix': '--min-alt-jq'}, 'default': 0, 'type': ['null', 'int']}, {'id': 'min_bq', 'label': 'min_base_quality', 'doc': 'Skip any base with baseQ smaller than INT [6]', 'inputBinding': {'prefix': '--min-bq'}, 'default': 6, 'type': ['null', 'int']}, {'id': 'min_cov', 'doc': 'Test only positions having at least this coverage [1] (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)', 'inputBinding': {'position': 2, 'prefix': '--min-cov'}, 'default': 10, 'type': ['null', 'int']}, {'id': 'min_jq', 'label': 'min_joinedq', 'doc': 'Skip any base with joinedQ smaller than INT [0]', 'inputBinding': {'prefix': '--min-jq'}, 'default': 0, 'type': ['null', 'int']}, {'id': 'min_mq', 'label': 'min_mapping_quality', 'doc': 'Skip reads with mapping quality smaller than INT [0]', 'inputBinding': {'prefix': '--min-mq'}, 'default': 0, 'type': ['null', 'int']}, {'id': 'no_baq', 'label': 'disable_base_alignment_quality', 'doc': 'Disable use of base-alignment quality (BAQ)', 'inputBinding': {'prefix': '--no-baq'}, 'type': ['null', 'boolean']}, {'id': 'no_default_filter', 'doc': \"Don't run default lofreq filter automatically after calling variants\", 'inputBinding': {'prefix': '--no-default-filter'}, 'type': ['null', 'boolean']}, {'id': 'no_ext_base_alignment_quality', 'doc': \"Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)\", 'inputBinding': {'prefix': '--no-ext-baq'}, 'type': ['null', 'boolean']}, {'id': 'no_idaq', 'label': 'disable_indel_alignment_quality', 'doc': \"Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)\", 'inputBinding': {'prefix': '--no-idaq'}, 'type': ['null', 'boolean']}, {'id': 'no_mapping_quality', 'doc': \"Don't merge mapping quality in LoFreq's model\", 'inputBinding': {'prefix': '--no-mq'}, 'type': ['null', 'boolean']}, {'id': 'only_indels', 'doc': 'Only call indels; no SNVs', 'inputBinding': {'position': 4, 'prefix': '--only-indels'}, 'type': ['null', 'boolean']}, {'id': 'pvalue_cutoff', 'doc': 'P-Value cutoff / significance level [0.010000]', 'inputBinding': {'prefix': '--sig'}, 'default': 0.01, 'type': ['null', 'float']}, {'id': 'reads_align', 'doc': 'bam', 'format': 'http://edamontology.org/format_2572', 'inputBinding': {'position': 1001, 'valueFrom': '$(self.basename)'}, 'type': 'File'}, {'id': 'reads_index', 'doc': 'bai', 'type': 'File'}, {'id': 'reference_fasta', 'doc': 'fasta', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'position': 1000, 'prefix': '-f', 'valueFrom': '$(self.basename)'}, 'type': 'File'}, {'id': 'reference_index', 'type': 'File'}, {'id': 'region', 'doc': 'Limit calls to this region (chrom:start-end)', 'inputBinding': {'prefix': '--region'}, 'type': ['null', 'string']}, {'id': 'replace_non_match', 'doc': 'If >= 0, then replace non-match base qualities with this default value [-1]', 'inputBinding': {'prefix': '--def-nm-q'}, 'default': -1, 'type': ['null', 'int']}, {'id': 'threads', 'inputBinding': {'position': 1, 'prefix': '--pp-threads'}, 'default': 1, 'type': ['null', 'int']}, {'id': 'use_orphan', 'doc': 'Count anomalous read pairs (i.e. where mate is not aligned properly)', 'inputBinding': {'prefix': '--use-orphan'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'vcf', 'outputBinding': {'glob': '*.vcf'}, 'format': 'http://edamontology.org/format_3016', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 20000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'lofreq', 'version': ['2.1.4'], 'specs': ['https://identifiers.org/biotools/lofreq']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lofreq', 'call-parallel']",
    "cwl_arguments": "[{'position': 99, 'prefix': '--out', 'valueFrom': '$(inputs.reads_align.nameroot)_variant.vcf'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': ['$(inputs.reference_index)', '$(inputs.reference_fasta)', '$(inputs.reads_index)']}]",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "lofreq/lofreq_viterbi.cwl",
    "sha": "c2f2524880b7fd6a380ebe29e2a10336ab1c030c",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/lofreq/lofreq_viterbi.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: \"viterbi: Viterbi realignment\"\ndoc: |\n  Probabilistic realignment of your already mapped reads, which corrects\n  mapping errors (run right after mapping). Not recommended for non-Illumina\n  data.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1\n  SoftwareRequirement:\n    packages:\n      lofreq:\n        version: [ \"2.1.4\" ]\n        specs: [ https://identifiers.org/biotools/lofreq ]\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.reference)\n    \nbaseCommand: [lofreq, viterbi]\n\narguments:\n  - prefix: --out\n    valueFrom: $(inputs.reads.nameroot)_realigned.bam\n\ninputs:\n  reference:\n    type: File\n    format: edam:format_1929  # FASTA\n    inputBinding:\n      prefix: --ref\n      \n  reads:  \n    type: File\n    format: edam:format_2572  # BAM\n    inputBinding: {}\n\n  keepflags:\n    type: boolean?\n    label: Don't delete flags MC, MD, NM, and A?\n    doc: |\n      These flags are all prone to getting invalidated during realignment.\n      Keep them only if you know what you are doing.\n    inputBinding:\n      prefix: --keepflags\n    default: false\n      \n  defqual:\n    type: int?\n    inputBinding:\n      prefix: --defqual\n\noutputs:\n  realigned:\n    type: File\n    format: edam:format_2572  # BAM\n    outputBinding:\n      glob: $(inputs.reads.nameroot)_realigned.bam\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'defqual', 'inputBinding': {'prefix': '--defqual'}, 'type': ['null', 'int']}, {'id': 'keepflags', 'label': \"Don't delete flags MC, MD, NM, and A?\", 'doc': 'These flags are all prone to getting invalidated during realignment.\\nKeep them only if you know what you are doing.\\n', 'inputBinding': {'prefix': '--keepflags'}, 'default': False, 'type': ['null', 'boolean']}, {'id': 'reads', 'format': 'http://edamontology.org/format_2572', 'inputBinding': {}, 'type': 'File'}, {'id': 'reference', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'prefix': '--ref'}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'realigned', 'outputBinding': {'glob': '$(inputs.reads.nameroot)_realigned.bam'}, 'format': 'http://edamontology.org/format_2572', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/lofreq:2.1.4--py27hc3dfafe_1'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 20000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'lofreq', 'version': ['2.1.4'], 'specs': ['https://identifiers.org/biotools/lofreq']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['lofreq', 'viterbi']",
    "cwl_arguments": "[{'prefix': '--out', 'valueFrom': '$(inputs.reads.nameroot)_realigned.bam'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': ['$(inputs.reference)']}]",
    "cwl_doc": "Probabilistic realignment of your already mapped reads, which corrects\nmapping errors (run right after mapping). Not recommended for non-Illumina\ndata.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "viterbi: Viterbi realignment",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "mafft/mafft.cwl",
    "sha": "381c53b47c3e16383b3ec262b15e7511bd0f5cdb",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/mafft/mafft.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nlabel: Mafft\ndoc: |-\n  MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.\n$namespaces:\n  edam: http://edamontology.org/\n  s: http://schema.org/\n\ninputs:\n  add:\n    doc: add unaligned full-length sequences into an existing alignment\n    type: File?\n    format: edam:format_1929\n    inputBinding:\n      prefix: --add\n  addfragments:\n    doc: add unaligned fragmentary sequences into an existing alignment\n    type: File?\n    format: edam:format_1929\n    inputBinding:\n      prefix: --addfragments\n  anysymbol:\n    doc: allow symbols not part of the standard IUPAC nucleotide or protein alphabets\n    type: boolean?\n    inputBinding:\n      prefix: --anysymbol\n  auto:\n    doc: auto-select alignment strategy\n    type: boolean?\n    default: true\n    inputBinding:\n      prefix: --auto\n  no_save_memory:\n    doc: always apply normal DP even for long alingments\n    type: boolean?\n    inputBinding:\n      prefix: --nomemsave\n  save_memory:\n    doc: use linear-space DP algorithm (approximately two times slower than normal\n      DP)\n    type: boolean?\n    inputBinding:\n      prefix: --memsave\n  sequences:\n    label: Sequences to align\n    type: File\n    format: edam:format_1929\n    inputBinding:\n      position: 1\n\noutputs:\n  alignment:\n    type: File\n    format: edam:format_1929\n    outputBinding:\n      glob: $(inputs.sequences.nameroot).alignment.fasta\n    streamable: true\nstdout: $(inputs.sequences.nameroot).alignment.fasta\n\nbaseCommand: mafft\narguments:\n- prefix: --thread\n  valueFrom: $(runtime.cores)\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/mafft:7.458--h516909a_0\n  ResourceRequirement:\n    coresMin: 8\n    ramMin: 40000\n  SoftwareRequirement:\n    packages:\n      mafft:\n        specs:\n          - https://identifiers.org/biotools/MAFFT\n          - https://anaconda.org/bioconda/mafft\n        version: [ \"7.458\" ]\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n- https://edamontology.org/EDAM_1.18.owl\ns:author:\n- class: s:Person\n  s:identifier: https://orcid.org/0000-0002-2961-9670\n  s:name: Michael R. Crusoe\n- class: s:Person\n  s:email: mailto:pvh@sanbi.ac.za\n  s:identifier: https://orcid.org/0000-0001-6553-5274\n  s:name: Peter van Heusden\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'add', 'doc': 'add unaligned full-length sequences into an existing alignment', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'prefix': '--add'}, 'type': ['null', 'File']}, {'id': 'addfragments', 'doc': 'add unaligned fragmentary sequences into an existing alignment', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'prefix': '--addfragments'}, 'type': ['null', 'File']}, {'id': 'anysymbol', 'doc': 'allow symbols not part of the standard IUPAC nucleotide or protein alphabets', 'inputBinding': {'prefix': '--anysymbol'}, 'type': ['null', 'boolean']}, {'id': 'auto', 'doc': 'auto-select alignment strategy', 'inputBinding': {'prefix': '--auto'}, 'default': True, 'type': ['null', 'boolean']}, {'id': 'no_save_memory', 'doc': 'always apply normal DP even for long alingments', 'inputBinding': {'prefix': '--nomemsave'}, 'type': ['null', 'boolean']}, {'id': 'save_memory', 'doc': 'use linear-space DP algorithm (approximately two times slower than normal DP)', 'inputBinding': {'prefix': '--memsave'}, 'type': ['null', 'boolean']}, {'id': 'sequences', 'label': 'Sequences to align', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'position': 1}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'alignment', 'streamable': True, 'outputBinding': {'glob': '$(inputs.sequences.nameroot).alignment.fasta'}, 'format': 'http://edamontology.org/format_1929', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/mafft:7.458--h516909a_0'}, {'class': 'ResourceRequirement', 'coresMin': 8, 'ramMin': 40000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'mafft', 'version': ['7.458'], 'specs': ['https://identifiers.org/biotools/MAFFT', 'https://anaconda.org/bioconda/mafft']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "mafft",
    "cwl_arguments": "[{'prefix': '--thread', 'valueFrom': '$(runtime.cores)'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 's': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf', 'https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": "MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.",
    "cwl_stdout": "$(inputs.sequences.nameroot).alignment.fasta",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Mafft",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0002-2961-9670', 's:name': 'Michael R. Crusoe'}, {'class': 's:Person', 's:email': 'mailto:pvh@sanbi.ac.za', 's:identifier': 'https://orcid.org/0000-0001-6553-5274', 's:name': 'Peter van Heusden'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "manorm/manorm.cwl",
    "sha": "bc20a984f34736d94899fd2d3e45119477be51d9",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/manorm/manorm.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/manorm:v0.0.2\n  SoftwareRequirement:\n    packages:\n      manorm:\n        specs: [ https://identifiers.org/biotools/manorm ]\n        version: [ \"0.0.2\" ]\n\ninputs:\n\n  peak_file_first:\n    type: File\n    inputBinding:\n      prefix: \"--p1\"\n    doc: \"Peaks file of sample 1\"\n\n  peak_file_second:\n    type: File\n    inputBinding:\n      prefix: \"--p2\"\n    doc: \"Peaks file of sample 2\"\n\n  peak_format:\n    type:\n      - \"null\"\n      - type: enum\n        name: \"peak_format\"\n        symbols: [\"bed\", \"bed-summit\", \"macs\", \"macs2\", \"narrowpeak\", \"broadpeak\"]\n    inputBinding:\n      prefix: \"--pf\"\n    doc: |\n      \"The format of peak files.\n       Default BED\"\n\n  read_file_first:\n    type: File\n    inputBinding:\n      prefix: \"--r1\"\n    doc: \"Reads file of sample 1\"\n\n  read_file_second:\n    type: File\n    inputBinding:\n      prefix: \"--r2\"\n    doc: \"Reads file of sample 2\"\n\n  read_format:\n    type:\n      - \"null\"\n      - type: enum\n        name: \"read_format\"\n        symbols: [\"bed\", \"bedpe\", \"sam\", \"bam\"]\n    inputBinding:\n      prefix: \"--rf\"\n    doc: |\n      \"The format of read files.\n       Default BED\"\n\n  shift_size_first:\n    type: int?\n    inputBinding:\n      prefix: \"--s1\"\n    doc: |\n      \"Reads shift size of sample 1. This value is used to shift reads towards 3' direction\n       to determine the precise binding site. Set as half of the fragment length.\n       Default 100\"\n\n  shift_size_second:\n    type: int?\n    inputBinding:\n      prefix: \"--s2\"\n    doc: |\n      \"Reads shift size of sample 2. This value is used to shift reads towards 5' direction\n       to determine the precise binding site. Set as half of the fragment length.\n       Default 100\"\n\n  sample_name_first:\n    type: string?\n    inputBinding:\n      prefix: \"--n1\"\n    doc: |\n      \"Name of sample 1, which is used in output files. If not specified, \n       the name of the peak file will be used as the sample name\"\n\n  sample_name_second:\n    type: string?\n    inputBinding:\n      prefix: \"--n2\"\n    doc: |\n      \"Name of sample 2, which is used in output files. If not specified,\n       the name of the peak file will be used as the sample name\"\n\n  simulations_number:\n    type: int?\n    inputBinding:\n      prefix: \"--n-random\"\n    doc: |\n      \"Number of random simulations to test the enrichment of peak\n       overlap between two samples. Set to 0 to disable the testing.\n       Default: 10\"\n\n  m_value_cutoff:\n    type: float?\n    inputBinding:\n      prefix: \"--m-cutoff\"\n    doc: |\n      \"Absolute M-value (log2-ratio) cutoff to define biased (differential binding) peaks.\n       Default: 1.0\"\n\n  p_value_cutoff:\n    type: float?\n    inputBinding:\n      prefix: \"--p-cutoff\"\n    doc: |\n      \"P-value cutoff to define biased peaks.\n       Default: 0.01\"\n\n  paired_end:\n    type: boolean?\n    inputBinding:\n      prefix: \"--pe\"\n    doc: |\n      \"The middle point of each read pair is used to represent the genomic locus\n      of underlying DNA fragment. --s1 and --s2 are ignored with this option on\"\n\n  window_size:\n    type: int?\n    inputBinding:\n      prefix: \"-w\"\n    doc: |\n      \"Window size to count reads and calculate read densities. 2000 is recommended for\n      sharp histone marks like H3K4me3 and H3K27ac, and 1000 for TFs or DNase-seq.\n      Default: 2000\"\n  \n  summit_distance:\n    type: int?\n    inputBinding:\n      prefix: \"--summit-dis\"\n    doc: |\n      \"Overlapping common peaks with summit-to-summit distance beyond this are excluded in model fitting.\n      This option is used to exclude common peaks that only overlap on the edge of each other.\n      Default: -w/--window-size/4\"\n\noutputs:\n\n  ma_values_file:\n    type: File\n    outputBinding:\n      glob: \"*_all_MAvalues.xls\"\n    doc: |\n      \"File contains the M-A values and normalized read density of each\n       peak, common peaks from two samples are merged together.\n       Coordinates in .xls file is under 1-based coordinate-system\"\n\n  above_m_cutoff_peak_file:\n    type: File\n    outputBinding:\n      glob: \"output_filters/*_M_above_*_biased_peaks.bed\"\n    doc: \"Above M-value cutoff peak file\"\n\n  below_m_cutoff_peak_file:\n    type: File\n    outputBinding:\n      glob: \"output_filters/*_M_below_*_biased_peaks.bed\"\n    doc: \"Below M-value cutoff peak file\"\n\n  unbiased_peak_file:\n    type: File\n    outputBinding:\n      glob: \"output_filters/*_unbiased_peaks.bed\"\n    doc: \"Unbiased peak file\"\n\n  m_values_wig_file:\n    type: File\n    outputBinding:\n      glob: \"output_tracks/*_M_values.wig\"\n    doc: \"Genome track file for M-values\"\n    \n  a_values_wig_file:\n    type: File\n    outputBinding:\n      glob: \"output_tracks/*_A_values.wig\"\n    doc: \"Genome track file for A-values\"\n\n  p_values_wig_file:\n    type: File\n    outputBinding:\n      glob: \"output_tracks/*_P_values.wig\"\n    doc: \"Genome track file for P-values\"\n\n  ma_before_normalization_plot:\n    type: File\n    outputBinding:\n      glob: \"output_figures/*_MA_plot_before_normalization.png\"\n    doc: \"MA-values before normalization plot\"\n\n  ma_after_normalization_plot:\n    type: File\n    outputBinding:\n      glob: \"output_figures/*_MA_plot_after_normalization.png\"\n    doc: \"MA-values after normalization plot\"\n\n  ma_with_P_value_plot:\n    type: File\n    outputBinding:\n      glob: \"output_figures/*_MA_plot_with_P_value.png\"\n    doc: \"MA-values with P-values plot\"\n\n  read_density_on_common_peaks_plot:\n    type: File\n    outputBinding:\n      glob: \"output_figures/*_read_density_on_common_peaks.png\"\n    doc: \"Read density on common peaks plot\"\n\n  stdout_log:\n    type: stdout\n\n  stderr_log:\n    type: stderr\n\nbaseCommand: [\"manorm\"]\nstderr: manorm_stderr.log\nstdout: manorm_stdout.log\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"manorm\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  MAnorm -- A robust model for quantitative comparison of ChIP-seq data sets.\n  --wa argument is skipped\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'm_value_cutoff', 'doc': '\"Absolute M-value (log2-ratio) cutoff to define biased (differential binding) peaks.\\n Default: 1.0\"\\n', 'inputBinding': {'prefix': '--m-cutoff'}, 'type': ['null', 'float']}, {'id': 'p_value_cutoff', 'doc': '\"P-value cutoff to define biased peaks.\\n Default: 0.01\"\\n', 'inputBinding': {'prefix': '--p-cutoff'}, 'type': ['null', 'float']}, {'id': 'paired_end', 'doc': '\"The middle point of each read pair is used to represent the genomic locus\\nof underlying DNA fragment. --s1 and --s2 are ignored with this option on\"\\n', 'inputBinding': {'prefix': '--pe'}, 'type': ['null', 'boolean']}, {'id': 'peak_file_first', 'doc': 'Peaks file of sample 1', 'inputBinding': {'prefix': '--p1'}, 'type': 'File'}, {'id': 'peak_file_second', 'doc': 'Peaks file of sample 2', 'inputBinding': {'prefix': '--p2'}, 'type': 'File'}, {'id': 'peak_format', 'doc': '\"The format of peak files.\\n Default BED\"\\n', 'inputBinding': {'prefix': '--pf'}, 'type': ['null', {'name': 'peak_format', 'symbols': ['bed', 'bed-summit', 'macs', 'macs2', 'narrowpeak', 'broadpeak'], 'type': 'enum'}]}, {'id': 'read_file_first', 'doc': 'Reads file of sample 1', 'inputBinding': {'prefix': '--r1'}, 'type': 'File'}, {'id': 'read_file_second', 'doc': 'Reads file of sample 2', 'inputBinding': {'prefix': '--r2'}, 'type': 'File'}, {'id': 'read_format', 'doc': '\"The format of read files.\\n Default BED\"\\n', 'inputBinding': {'prefix': '--rf'}, 'type': ['null', {'name': 'read_format', 'symbols': ['bed', 'bedpe', 'sam', 'bam'], 'type': 'enum'}]}, {'id': 'sample_name_first', 'doc': '\"Name of sample 1, which is used in output files. If not specified, \\n the name of the peak file will be used as the sample name\"\\n', 'inputBinding': {'prefix': '--n1'}, 'type': ['null', 'string']}, {'id': 'sample_name_second', 'doc': '\"Name of sample 2, which is used in output files. If not specified,\\n the name of the peak file will be used as the sample name\"\\n', 'inputBinding': {'prefix': '--n2'}, 'type': ['null', 'string']}, {'id': 'shift_size_first', 'doc': '\"Reads shift size of sample 1. This value is used to shift reads towards 3\\' direction\\n to determine the precise binding site. Set as half of the fragment length.\\n Default 100\"\\n', 'inputBinding': {'prefix': '--s1'}, 'type': ['null', 'int']}, {'id': 'shift_size_second', 'doc': '\"Reads shift size of sample 2. This value is used to shift reads towards 5\\' direction\\n to determine the precise binding site. Set as half of the fragment length.\\n Default 100\"\\n', 'inputBinding': {'prefix': '--s2'}, 'type': ['null', 'int']}, {'id': 'simulations_number', 'doc': '\"Number of random simulations to test the enrichment of peak\\n overlap between two samples. Set to 0 to disable the testing.\\n Default: 10\"\\n', 'inputBinding': {'prefix': '--n-random'}, 'type': ['null', 'int']}, {'id': 'summit_distance', 'doc': '\"Overlapping common peaks with summit-to-summit distance beyond this are excluded in model fitting.\\nThis option is used to exclude common peaks that only overlap on the edge of each other.\\nDefault: -w/--window-size/4\"\\n', 'inputBinding': {'prefix': '--summit-dis'}, 'type': ['null', 'int']}, {'id': 'window_size', 'doc': '\"Window size to count reads and calculate read densities. 2000 is recommended for\\nsharp histone marks like H3K4me3 and H3K27ac, and 1000 for TFs or DNase-seq.\\nDefault: 2000\"\\n', 'inputBinding': {'prefix': '-w'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'a_values_wig_file', 'doc': 'Genome track file for A-values', 'outputBinding': {'glob': 'output_tracks/*_A_values.wig'}, 'type': 'File'}, {'id': 'above_m_cutoff_peak_file', 'doc': 'Above M-value cutoff peak file', 'outputBinding': {'glob': 'output_filters/*_M_above_*_biased_peaks.bed'}, 'type': 'File'}, {'id': 'below_m_cutoff_peak_file', 'doc': 'Below M-value cutoff peak file', 'outputBinding': {'glob': 'output_filters/*_M_below_*_biased_peaks.bed'}, 'type': 'File'}, {'id': 'm_values_wig_file', 'doc': 'Genome track file for M-values', 'outputBinding': {'glob': 'output_tracks/*_M_values.wig'}, 'type': 'File'}, {'id': 'ma_after_normalization_plot', 'doc': 'MA-values after normalization plot', 'outputBinding': {'glob': 'output_figures/*_MA_plot_after_normalization.png'}, 'type': 'File'}, {'id': 'ma_before_normalization_plot', 'doc': 'MA-values before normalization plot', 'outputBinding': {'glob': 'output_figures/*_MA_plot_before_normalization.png'}, 'type': 'File'}, {'id': 'ma_values_file', 'doc': '\"File contains the M-A values and normalized read density of each\\n peak, common peaks from two samples are merged together.\\n Coordinates in .xls file is under 1-based coordinate-system\"\\n', 'outputBinding': {'glob': '*_all_MAvalues.xls'}, 'type': 'File'}, {'id': 'ma_with_P_value_plot', 'doc': 'MA-values with P-values plot', 'outputBinding': {'glob': 'output_figures/*_MA_plot_with_P_value.png'}, 'type': 'File'}, {'id': 'p_values_wig_file', 'doc': 'Genome track file for P-values', 'outputBinding': {'glob': 'output_tracks/*_P_values.wig'}, 'type': 'File'}, {'id': 'read_density_on_common_peaks_plot', 'doc': 'Read density on common peaks plot', 'outputBinding': {'glob': 'output_figures/*_read_density_on_common_peaks.png'}, 'type': 'File'}, {'id': 'stderr_log', 'type': 'stderr'}, {'id': 'stdout_log', 'type': 'stdout'}, {'id': 'unbiased_peak_file', 'doc': 'Unbiased peak file', 'outputBinding': {'glob': 'output_filters/*_unbiased_peaks.bed'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/manorm:v0.0.2'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'manorm', 'version': ['0.0.2'], 'specs': ['https://identifiers.org/biotools/manorm']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['manorm']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "MAnorm -- A robust model for quantitative comparison of ChIP-seq data sets.\n--wa argument is skipped\n",
    "cwl_stdout": "manorm_stdout.log",
    "cwl_s:name": "manorm",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "manorm_stderr.log",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "mashmap/MashMap.cwl",
    "sha": "7af8bac3490d190665adfd99a9f5749742a3432d",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/mashmap/MashMap.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: MashMap is an approximate long read or contig mapper based on Jaccard similarity\n\nlabel: MashMap\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/mashmap:2.0--gsl2.2_1\n  SoftwareRequirement:\n    packages:\n      mashmap:\n        specs:\n          - https://identifiers.org/biotools/mashmap\n          - https://github.com/marbl/MashMap\n        version: [ \"2.0\" ]\n\nbaseCommand: mashmap\n\ninputs:\n  query:\n    type: File?\n    inputBinding:\n      prefix: \"-q\"\n    doc: |\n      input query file (fasta/fastq)[.gz]\n  query_list:\n    type: File?\n    inputBinding:\n      prefix: \"--ql\"\n    doc: |\n      a file containing list of query files, one per line\n  reference:\n    type: File?\n    inputBinding:\n      prefix: \"-r\"\n    doc: |\n      an input reference file (fasta/fastq)[.gz]      \n  reference_genomes_list:\n    type: File?\n    inputBinding:\n      prefix: \"--rl\"\n    doc: |\n      a file containing list of reference files, one per line\n  output_file:\n    type: string\n    inputBinding:\n      prefix: \"-o\"\n    doc: |\n      output file name [default : mashmap.out]\n      Space-delimited with each line consisting of \n      query name, length, 0-based start, end, strand,\n      target name, length, start, end and mapping nucleotide identity\n\n  # optionals\n  minimum_segment_length:\n    type: int?\n    inputBinding:\n      prefix: \"--segLength\"\n    doc: |\n      mapping segment length [default : 5,000]\n      sequences shorter than segment length will be ignored\n  no_split:\n    type: boolean\n    inputBinding:\n      prefix: \"--noSplit\"\n    default: false\n    doc: |\n      disable splitting of input sequences during mapping [enabled by default]\n  identity_threshold:\n    type: int?\n    inputBinding:\n      prefix: \"--pi\"\n    doc: |\n      threshold for identity [default : 85]\n  kmer_size:\n    type: int?\n    inputBinding:\n      prefix: \"--kmer\"\n    doc: |\n      kmer size <= 16 [default : 16] \n  filter_mode:\n    type:\n      - \"null\"\n      - type: enum\n        name: \"filter_mode\"\n        symbols: \n          - \"one-to-one\"\n          - \"map\"\n          - \"none\"\n    inputBinding:\n      prefix: \"--filter_mode\"\n    doc: |\n      filter modes in mashmap: 'map', 'one-to-one' or 'none' [default: map]\n      'map' computes best mappings for each query sequence\n      'one-to-one' computes best mappings for query as well as reference sequence\n      'none' disables filtering\n  # running\n  threads:\n    type: int?\n    inputBinding:\n      prefix: \"--threads\"\n    doc: |\n      count of threads for parallel execution [default : 1] \n\nstdout: stdout\nstderr: stderr\n\noutputs:\n  mashmap:\n    type: File\n    outputBinding:\n      glob: $(inputs.output_file)\n    doc: |\n        space-delimited with each line consisting of \n        query name, length, 0-based start, end, strand,\n        target name, length, start, end and mapping nucleotide identity\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-https.rdf\n  - https://edamontology.org/EDAM_1.20.owl\n\n\ns:name: \"MashMap\"\ns:license: \"https://github.com/marbl/MashMap/blob/master/LICENSE.txt\"\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"EMBL - European Bioinformatics Institute\"\n  s:member:\n  - class: s:Person\n    s:name: Martin Beracochea\n    s:email: mailto:mbc@ebi.ac.uk\n    s:sameAs:\n    - id: https://orcid.org/0000-0003-3472-3736\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'filter_mode', 'doc': \"filter modes in mashmap: 'map', 'one-to-one' or 'none' [default: map]\\n'map' computes best mappings for each query sequence\\n'one-to-one' computes best mappings for query as well as reference sequence\\n'none' disables filtering\\n\", 'inputBinding': {'prefix': '--filter_mode'}, 'type': ['null', {'name': 'filter_mode', 'symbols': ['one-to-one', 'map', 'none'], 'type': 'enum'}]}, {'id': 'identity_threshold', 'doc': 'threshold for identity [default : 85]\\n', 'inputBinding': {'prefix': '--pi'}, 'type': ['null', 'int']}, {'id': 'kmer_size', 'doc': 'kmer size <= 16 [default : 16] \\n', 'inputBinding': {'prefix': '--kmer'}, 'type': ['null', 'int']}, {'id': 'minimum_segment_length', 'doc': 'mapping segment length [default : 5,000]\\nsequences shorter than segment length will be ignored\\n', 'inputBinding': {'prefix': '--segLength'}, 'type': ['null', 'int']}, {'id': 'no_split', 'doc': 'disable splitting of input sequences during mapping [enabled by default]\\n', 'inputBinding': {'prefix': '--noSplit'}, 'default': False, 'type': 'boolean'}, {'id': 'output_file', 'doc': 'output file name [default : mashmap.out]\\nSpace-delimited with each line consisting of \\nquery name, length, 0-based start, end, strand,\\ntarget name, length, start, end and mapping nucleotide identity\\n', 'inputBinding': {'prefix': '-o'}, 'type': 'string'}, {'id': 'query', 'doc': 'input query file (fasta/fastq)[.gz]\\n', 'inputBinding': {'prefix': '-q'}, 'type': ['null', 'File']}, {'id': 'query_list', 'doc': 'a file containing list of query files, one per line\\n', 'inputBinding': {'prefix': '--ql'}, 'type': ['null', 'File']}, {'id': 'reference', 'doc': 'an input reference file (fasta/fastq)[.gz]      \\n', 'inputBinding': {'prefix': '-r'}, 'type': ['null', 'File']}, {'id': 'reference_genomes_list', 'doc': 'a file containing list of reference files, one per line\\n', 'inputBinding': {'prefix': '--rl'}, 'type': ['null', 'File']}, {'id': 'threads', 'doc': 'count of threads for parallel execution [default : 1] \\n', 'inputBinding': {'prefix': '--threads'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'mashmap', 'doc': 'space-delimited with each line consisting of \\nquery name, length, 0-based start, end, strand,\\ntarget name, length, start, end and mapping nucleotide identity\\n', 'outputBinding': {'glob': '$(inputs.output_file)'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/mashmap:2.0--gsl2.2_1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'mashmap', 'version': ['2.0'], 'specs': ['https://identifiers.org/biotools/mashmap', 'https://github.com/marbl/MashMap']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "mashmap",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf', 'https://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": null,
    "cwl_doc": "MashMap is an approximate long read or contig mapper based on Jaccard similarity",
    "cwl_stdout": "stdout",
    "cwl_s:name": "MashMap",
    "cwl_s:license": "https://github.com/marbl/MashMap/blob/master/LICENSE.txt",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': 'EMBL - European Bioinformatics Institute', 's:member': [{'class': 's:Person', 's:name': 'Martin Beracochea', 's:email': 'mailto:mbc@ebi.ac.uk', 's:sameAs': [{'id': 'https://orcid.org/0000-0003-3472-3736'}]}]}]",
    "cwl_label": "MashMap",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "stderr",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "megahit/megahit.cwl",
    "sha": "d3e21ffc89b30dec0c133eca2c5ef3ccf7bb96d8",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/megahit/megahit.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ninputs:\n  forward_reads:\n    type: File\n    format: edam:format_1930  # FASTQ\n  reverse_reads:\n    type: File\n    format: edam:format_1930  # FASTQ\n\nbaseCommand: megahit\n\narguments:\n - -t\n - $(runtime.cores)\n - \"-1\"\n - $(inputs.forward_reads.path)\n - \"-2\"\n - $(inputs.reverse_reads.path)\n - -o\n - $(runtime.outdir)/results\n\noutputs:\n  metagenome_assembly:\n    type: File\n    format: edam:format_1929  # FASTA\n    outputBinding:\n     glob: $(runtime.outdir)/results/final.contigs.fa\n\nhints:\n  SoftwareRequirement:\n    packages:\n      megahit:\n        specs:\n          - https://identifiers.org/biotools/megahit\n          - https://identifiers.org/rrid/RRID:SCR_018551\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/megahit:1.2.9--h43eeafb_4\n  ResourceRequirement:\n    coresMin: 2\n\n$namespaces:\n  edam: https://edamontology.org\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'forward_reads', 'format': 'https://edamontology.orgformat_1930', 'type': 'File'}, {'id': 'reverse_reads', 'format': 'https://edamontology.orgformat_1930', 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'metagenome_assembly', 'outputBinding': {'glob': '$(runtime.outdir)/results/final.contigs.fa'}, 'format': 'https://edamontology.orgformat_1929', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/megahit:1.2.9--h43eeafb_4'}, {'class': 'ResourceRequirement', 'coresMin': 2}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'megahit', 'specs': ['https://identifiers.org/biotools/megahit', 'https://identifiers.org/rrid/RRID:SCR_018551']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "megahit",
    "cwl_arguments": "['-t', '$(runtime.cores)', '-1', '$(inputs.forward_reads.path)', '-2', '$(inputs.reverse_reads.path)', '-o', '$(runtime.outdir)/results']",
    "cwl_$namespaces": "{'edam': 'https://edamontology.org'}",
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "metfrag/metfrag.cwl",
    "sha": "c1e79998e7699f9ce0573f5dd9be7a40d84babae",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/metfrag/metfrag.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand: ['java', '-jar', '/usr/src/myapp/MetFragCommandLine-2.5.0.jar']\n\nrequirements:\n  DockerRequirement:\n    dockerPull: docker.io/zmahnoor/maw-metfrag_2.5.0:1.0.4\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n    - entryname: param_file.txt\n      entry: |-\n        PeakListPath = $(inputs.PeakList.path)\n        IonizedPrecursorMass =  $(inputs.IonizedPrecursorMass)\n        PrecursorIonMode = $(inputs.PrecursorIonMode)\n        IsPositiveIonMode = $(inputs.IsPositiveIonMode)\n        MetFragDatabaseType = LocalCSV\n        LocalDatabasePath = $(inputs.LocalDatabase.path)\n        DatabaseSearchRelativeMassDeviation = 5\n        FragmentPeakMatchAbsoluteMassDeviation = 0.001\n        FragmentPeakMatchRelativeMassDeviation = 15\n        MetFragCandidateWriter = CSV\n        SampleName = $(inputs.SampleName)\n        ResultsPath = .\n        MetFragPreProcessingCandidateFilter = UnconnectedCompoundFilter\n        MetFragPostProcessingCandidateFilter = InChIKeyFilter\n        MaximumTreeDepth = 2\n        NumberThreads = $(runtime.cores)\n\n\ninputs: # additional inputs for all files; make them to show certain paths\n  PeakList: File\n  IonizedPrecursorMass: string\n  PrecursorIonMode: int\n  IsPositiveIonMode: boolean\n  LocalDatabase: File\n  SampleName: string\n  #MetFragDatabaseType: string\n  #DatabaseSearchRelativeMassDeviation: int\n  #FragmentPeakMatchAbsoluteMassDeviation: float\n  #FragmentPeakMatchRelativeMassDeviation: float\n  #MetFragCandidateWriter: string\n  #MetFragPreProcessingCandidateFilter: string\n  #MetFragPostProcessingCandidateFilter: string\n  #MaximumTreeDepth: int\n  #NumberThreads: int\n\narguments:\n  - ParameterFile=param_file.txt\n\noutputs:\n  candidate_list:\n    type: File\n    outputBinding:\n        glob: \"*.csv\"\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'IonizedPrecursorMass', 'type': 'string'}, {'id': 'IsPositiveIonMode', 'type': 'boolean'}, {'id': 'LocalDatabase', 'type': 'File'}, {'id': 'PeakList', 'type': 'File'}, {'id': 'PrecursorIonMode', 'type': 'int'}, {'id': 'SampleName', 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'candidate_list', 'outputBinding': {'glob': '*.csv'}, 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['java', '-jar', '/usr/src/myapp/MetFragCommandLine-2.5.0.jar']",
    "cwl_arguments": "['ParameterFile=param_file.txt']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'DockerRequirement', 'dockerPull': 'docker.io/zmahnoor/maw-metfrag_2.5.0:1.0.4'}, {'class': 'InitialWorkDirRequirement', 'listing': [{'entryname': 'param_file.txt', 'entry': 'PeakListPath = $(inputs.PeakList.path)\\nIonizedPrecursorMass =  $(inputs.IonizedPrecursorMass)\\nPrecursorIonMode = $(inputs.PrecursorIonMode)\\nIsPositiveIonMode = $(inputs.IsPositiveIonMode)\\nMetFragDatabaseType = LocalCSV\\nLocalDatabasePath = $(inputs.LocalDatabase.path)\\nDatabaseSearchRelativeMassDeviation = 5\\nFragmentPeakMatchAbsoluteMassDeviation = 0.001\\nFragmentPeakMatchRelativeMassDeviation = 15\\nMetFragCandidateWriter = CSV\\nSampleName = $(inputs.SampleName)\\nResultsPath = .\\nMetFragPreProcessingCandidateFilter = UnconnectedCompoundFilter\\nMetFragPostProcessingCandidateFilter = InChIKeyFilter\\nMaximumTreeDepth = 2\\nNumberThreads = $(runtime.cores)'}]}, {'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "minimap2/minimap2_paf.cwl",
    "sha": "f94b616429c1a10efe6387e3656febaf7b0db12c",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/minimap2/minimap2_paf.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand: minimap2\n\ndoc: This CWL file defines running minimap2 to align some sequences to a database.\n  We assume the database has been indexed. This is not necessary but we will do it\n  in our use case\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/minimap2:2.17--h8b12597_1\n  SoftwareRequirement:\n    packages:\n      minimap2:\n        specs:\n          - https://identifiers.org/biotools/minimap2\n          - https://github.com/lh3/minimap2\n        version: [ \"2.17\" ]\n  ResourceRequirement:\n    coresMin: 8\n    coresMax: 32\n    ramMin: $(15 * 1024)\n    outdirMin: $(Math.ceil(inputs.target.size/(1024*1024*1024) + 20))\n\ninputs:\n  preset:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - map-pb\n          - map-ont\n          - ava-pb\n          - ava-ont\n          - asm5\n          - asm10\n          - asm20\n          - splice\n          - sr\n    inputBinding:\n      prefix: \"-x\"\n  outputCIGAR:\n    type: boolean?\n    label: output CIGAR in PAF\n    inputBinding:\n      prefix: -c\n  miniWinSize:\n    type: int?\n    label: minimizer window length\n    inputBinding:\n      prefix: -w\n  target:\n    type: File\n    inputBinding:\n      position: 5\n  query:\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 6\n\narguments:\n  - -t\n  - $(runtime.cores)\n\nstdout: \"$(inputs.target.nameroot)_$((Array.isArray(inputs.query) ? inputs.query[0] : inputs.query).nameroot).paf\"\n\noutputs:\n  alignments: stdout\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-https.rdf\n  - https://edamontology.org/EDAM_1.20.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'miniWinSize', 'label': 'minimizer window length', 'inputBinding': {'prefix': '-w'}, 'type': ['null', 'int']}, {'id': 'outputCIGAR', 'label': 'output CIGAR in PAF', 'inputBinding': {'prefix': '-c'}, 'type': ['null', 'boolean']}, {'id': 'preset', 'inputBinding': {'prefix': '-x'}, 'type': ['null', {'name': '_:669d96da-bb99-4402-afe7-eb4bdd17e5b5', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/map-pb', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/map-ont', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/ava-pb', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/ava-ont', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/asm5', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/asm10', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/asm20', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/splice', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/sr'], 'type': 'enum'}]}, {'id': 'query', 'inputBinding': {'position': 6}, 'type': ['File', {'items': 'File', 'type': 'array'}]}, {'id': 'target', 'inputBinding': {'position': 5}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'alignments', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/minimap2:2.17--h8b12597_1'}, {'class': 'ResourceRequirement', 'coresMin': 8, 'coresMax': 32, 'ramMin': '$(15 * 1024)', 'outdirMin': '$(Math.ceil(inputs.target.size/(1024*1024*1024) + 20))'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'minimap2', 'version': ['2.17'], 'specs': ['https://identifiers.org/biotools/minimap2', 'https://github.com/lh3/minimap2']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "minimap2",
    "cwl_arguments": "['-t', '$(runtime.cores)']",
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf', 'https://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "This CWL file defines running minimap2 to align some sequences to a database. We assume the database has been indexed. This is not necessary but we will do it in our use case",
    "cwl_stdout": "$(inputs.target.nameroot)_$((Array.isArray(inputs.query) ? inputs.query[0] : inputs.query).nameroot).paf",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "minimap2/minimap2_sam.cwl",
    "sha": "73bd6ea1a5bb4d61b5b9c0cbd26fa270cec33a3f",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/minimap2/minimap2_sam.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand: minimap2\n\ndoc: This CWL file defines running minimap2 to align some sequences to a database.\n  We assume the database has been indexed. This is not necessary but we will do it\n  in our use case\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/minimap2:2.17--h8b12597_1\n  SoftwareRequirement:\n    packages:\n      minimap2:\n        specs:\n          - https://identifiers.org/biotools/minimap2\n          - https://github.com/lh3/minimap2\n        version: [ \"2.17\" ]\n  ResourceRequirement:\n    coresMin: 8\n    coresMax: 32\n    ramMin: $(15 * 1024)\n    outdirMin: $(Math.ceil(inputs.readsFA.size/(1024*1024*1024) + 20))\n\ninputs:\n  preset:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - map-pb\n          - map-ont\n          - ava-pb\n          - ava-ont\n          - asm5\n          - asm10\n          - asm20\n          - splice\n          - sr \n    inputBinding:\n      prefix: \"-x\"\n  target:\n    type: File\n    inputBinding:\n      position: 5\n  query:\n    type:\n      - File\n      - type: array\n        items: File\n    inputBinding:\n      position: 6\n\narguments:\n  - -a # output in SAM format\n  - -t\n  - $(runtime.cores) \n\nstdout: $(inputs.indexFile.nameroot)_$(inputs.fastqFiles[0].nameroot).sam\n\noutputs:\n  alignments: stdout\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-https.rdf\n  - https://edamontology.org/EDAM_1.20.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'preset', 'inputBinding': {'prefix': '-x'}, 'type': ['null', {'name': '_:360fd9de-2438-448f-8849-6520c7130224', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/map-pb', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/map-ont', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/ava-pb', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/ava-ont', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/asm5', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/asm10', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/asm20', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/splice', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#preset/sr'], 'type': 'enum'}]}, {'id': 'query', 'inputBinding': {'position': 6}, 'type': ['File', {'items': 'File', 'type': 'array'}]}, {'id': 'target', 'inputBinding': {'position': 5}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'alignments', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/minimap2:2.17--h8b12597_1'}, {'class': 'ResourceRequirement', 'coresMin': 8, 'coresMax': 32, 'ramMin': '$(15 * 1024)', 'outdirMin': '$(Math.ceil(inputs.readsFA.size/(1024*1024*1024) + 20))'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'minimap2', 'version': ['2.17'], 'specs': ['https://identifiers.org/biotools/minimap2', 'https://github.com/lh3/minimap2']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "minimap2",
    "cwl_arguments": "['-a', '-t', '$(runtime.cores)']",
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf', 'https://edamontology.org/EDAM_1.20.owl']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "This CWL file defines running minimap2 to align some sequences to a database. We assume the database has been indexed. This is not necessary but we will do it in our use case",
    "cwl_stdout": "$(inputs.indexFile.nameroot)_$(inputs.fastqFiles[0].nameroot).sam",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "multiqc/multiqc.cwl",
    "sha": "f1faea8312ea8e6425f1ee9c7a5e6f2923636181",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/multiqc/multiqc.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Run multiqc on log files from supported bioinformatic tools.\n  26/04/2020: Fixed output filenames, added support for a single input file in qc_files_array (Miguel Boland)\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    # This step is necessary since the input files\n    # must be loaded into the working directory as there\n    # is no way to specify the input file directly on the\n    # command line.\n    listing: |\n      ${// script merges the to input arrays\n        // into one array that fulfills the type \n        // requirement for \"listing\", which is\n        // \"{type: array, items: [File, Directory]}\"\n\n        var qc_files_array = inputs.qc_files_array;\n        var qc_files_array_of_array = inputs.qc_files_array_of_array;\n        var output_array = [];\n\n        // add items of the qc_files_array to the output_array\n        if ( qc_files_array != null ){\n          // Fix to allow single qc_file_array\n          if (qc_files_array.length === undefined){\n            output_array.push(qc_files_array)\n          } else {\n            for (var i=0; i<qc_files_array.length; i++){\n              output_array.push(qc_files_array[i])\n            }\n\n          }\n        }\n\n        // add items of the qc_files_array_of_array to the output_array\n        if ( qc_files_array_of_array != null ){\n          for (var i=0; i<qc_files_array_of_array.length; i++){ \n            for (var ii=0; ii<qc_files_array_of_array[i].length; ii++){\n              output_array.push(qc_files_array_of_array[i][ii])\n            }\n          }\n        }\n\n        return output_array\n      }\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/multiqc:1.7--py_4\n  SoftwareRequirement:\n    packages:\n      multiqc:\n        version: [ \"1.7\" ]\n        specs: [ https://identifiers.org/biotools/multiqc ]  \n\nbaseCommand: multiqc\narguments:\n  - valueFrom: --zip-data-dir\n    position: 1\n  - valueFrom: \"'log_filesize_limit: 100000000'\"\n    position: 1\n    prefix: --cl_config\n  - valueFrom: $(runtime.outdir)\n    position: 2\n    prefix: --outdir\n  - valueFrom: $(runtime.outdir)\n    position: 4\n  \ninputs:\n  qc_files_array:\n    doc: |\n      qc files which shall be part of the multiqc summary;\n      optional, only one of qc_files_array or qc_files_array_of_array \n      must be provided\n    type:\n      - \"null\"\n      - File\n      - type: array\n        items: File\n  qc_files_array_of_array:\n    doc: |\n      qc files which shall be part of the multiqc summary;\n      optional, only one of qc_files_array or qc_files_array_of_array \n      must be provided\n    type:\n      - \"null\"\n      - type: array\n        items: \n          type: array\n          items: File\n  report_name:\n    doc: name used for the html report and the corresponding zip file\n    type: string\n    default: multiqc\n    inputBinding:\n      prefix: --filename\n      position: 3\n      \noutputs:\n  multiqc_zip:\n    type: File\n    outputBinding:\n      glob: $(inputs.report_name)_data.zip\n  multiqc_html:\n    type: File\n    outputBinding:\n      glob: $(inputs.report_name).html\n  diree:\n    type: Directory\n    outputBinding:\n      glob: .\n#  multiqc_json:\n#    type: File\n#    outputBinding:\n#      glob: multiqc_data/$(inputs.report_name).json\n#\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'qc_files_array', 'doc': 'qc files which shall be part of the multiqc summary;\\noptional, only one of qc_files_array or qc_files_array_of_array \\nmust be provided\\n', 'type': ['null', 'File', {'items': 'File', 'type': 'array'}]}, {'id': 'qc_files_array_of_array', 'doc': 'qc files which shall be part of the multiqc summary;\\noptional, only one of qc_files_array or qc_files_array_of_array \\nmust be provided\\n', 'type': ['null', {'items': {'items': 'File', 'type': 'array'}, 'type': 'array'}]}, {'id': 'report_name', 'doc': 'name used for the html report and the corresponding zip file', 'inputBinding': {'position': 3, 'prefix': '--filename'}, 'default': 'multiqc', 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'diree', 'outputBinding': {'glob': '.'}, 'type': 'Directory'}, {'id': 'multiqc_html', 'outputBinding': {'glob': '$(inputs.report_name).html'}, 'type': 'File'}, {'id': 'multiqc_zip', 'outputBinding': {'glob': '$(inputs.report_name)_data.zip'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/multiqc:1.7--py_4'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 10000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'multiqc', 'version': ['1.7'], 'specs': ['https://identifiers.org/biotools/multiqc']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "multiqc",
    "cwl_arguments": "[{'position': 1, 'valueFrom': '--zip-data-dir'}, {'position': 1, 'prefix': '--cl_config', 'valueFrom': \"'log_filesize_limit: 100000000'\"}, {'position': 2, 'prefix': '--outdir', 'valueFrom': '$(runtime.outdir)'}, {'position': 4, 'valueFrom': '$(runtime.outdir)'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': '${// script merges the to input arrays\\n  // into one array that fulfills the type \\n  // requirement for \"listing\", which is\\n  // \"{type: array, items: [File, Directory]}\"\\n\\n  var qc_files_array = inputs.qc_files_array;\\n  var qc_files_array_of_array = inputs.qc_files_array_of_array;\\n  var output_array = [];\\n\\n  // add items of the qc_files_array to the output_array\\n  if ( qc_files_array != null ){\\n    // Fix to allow single qc_file_array\\n    if (qc_files_array.length === undefined){\\n      output_array.push(qc_files_array)\\n    } else {\\n      for (var i=0; i<qc_files_array.length; i++){\\n        output_array.push(qc_files_array[i])\\n      }\\n\\n    }\\n  }\\n\\n  // add items of the qc_files_array_of_array to the output_array\\n  if ( qc_files_array_of_array != null ){\\n    for (var i=0; i<qc_files_array_of_array.length; i++){ \\n      for (var ii=0; ii<qc_files_array_of_array[i].length; ii++){\\n        output_array.push(qc_files_array_of_array[i][ii])\\n      }\\n    }\\n  }\\n\\n  return output_array\\n}\\n'}, {'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Run multiqc on log files from supported bioinformatic tools.\n26/04/2020: Fixed output filenames, added support for a single input file in qc_files_array (Miguel Boland)\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "nanoplot/nanoplot.cwl",
    "sha": "0f4dd1a1e509a3eebe6aa5a7590877b149a3bfbb",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/nanoplot/nanoplot.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/nanoplot:1.29.0--py_0\n  SoftwareRequirement:\n    packages:\n      nanoplot:\n        specs: [ https://identifiers.org/biotools/nanoplot ]\n        version: [ \"1.29.0\" ]\n\nbaseCommand: NanoPlot\n\ninputs:\n  max_length:\n    type: int?\n    inputBinding:\n      prefix: '--maxlength'\n  min_length:\n    type: int?\n    inputBinding:\n      prefix: '--minlength'\n  min_quality:\n    type: int?\n    inputBinding:\n      prefix: '--minqual'\n  drop_outliers:\n    type: boolean?\n    inputBinding:\n      prefix: '--drop_outliers'\n  log_length:\n    type: boolean?\n    inputBinding:\n      prefix: '--loglength'\n  percent_quality:\n    type: boolean?\n    inputBinding:\n      prefix: '--percentqual'\n  aligned_length:\n    type: boolean?\n    inputBinding:\n      prefix: '--alength'\n  barcoded:\n    type: boolean?\n    inputBinding:\n      prefix: '--barcoded'\n  downsample:\n    type: int?\n    inputBinding:\n      prefix: '--downsample'\n  run_until:\n    type: int?\n    inputBinding:\n      prefix: '--runtime_until'\n  read_type:\n    type:\n      - \"null\"\n      - type: enum\n        symbols: [1D, 2D, 1D2]\n    inputBinding:\n      prefix: '--readtype'\n\n  color:\n    type: string?\n    inputBinding:\n      prefix: '--color'\n  colormap:\n    type: string?\n    inputBinding:\n      prefix: '--colormap'\n  format:\n    type:\n      - type: enum\n        symbols: [eps,jpeg,jpg,pdf,pgf,png,ps,raw,rgba,svg,svgz,tif,tiff]\n      - \"null\"\n    inputBinding:\n      prefix: '--format'\n  plots:\n    type:\n      - type: array\n        items:\n          type: enum\n          symbols: [kde,hex,dot,pauvre]\n      - \"null\"\n    inputBinding:\n      prefix: '--plots'\n  listcolors:\n    type: boolean?\n    inputBinding:\n      prefix: '--listcolors'\n  listcolormaps:\n    type: boolean?\n    inputBinding:\n      prefix: '--listcolormaps'\n  hide_n50:\n    type: boolean?\n    inputBinding:\n      prefix: '--no-N50'\n  show_n50:\n    type: boolean?\n    inputBinding:\n      prefix: '--N50'\n  plot_title:\n    type: string?\n    inputBinding:\n      prefix: '--title'\n  font_scale:\n    type: float?\n    inputBinding:\n      prefix: '--font_scale'\n  dpi:\n    type: int?\n    inputBinding:\n      prefix: '--dpi'\n  hide_stats:\n    type: boolean?\n    inputBinding:\n      prefix: '--hide_stats'\n\n  fastq_files:\n    type: File[]?\n    inputBinding:\n      prefix: '--fastq'\n  fasta_files:\n    type: File[]?\n    format: edam:format_1931  # FASTA\n    inputBinding:\n      prefix: '--fasta'\n  rich_fastq_files:\n    type: File[]?\n    format: edam:format_1930  # FASTQ\n    inputBinding:\n      prefix: '--fastq_rich'\n  minimal_fastq_files:\n    type: File[]?\n    format: edam:format_1930  # FASTQ\n    inputBinding:\n      prefix: '--fastq_minimal'\n  summary_files:\n    type: File[]?\n    inputBinding:\n      prefix: '--summary'\n  bam_files:\n    type: File[]?\n    format: edam:format_2572  # BAM\n    inputBinding:\n      prefix: '--bam'\n  ubam_files:\n    type: File[]?\n    inputBinding:\n      prefix: '--ubam'\n  cram_files:\n    type: File[]?\n    format: edam:format_3462  # CRAM\n    inputBinding:\n      prefix: '--cram'\n  use_pickle_file:\n    type: boolean?\n    inputBinding:\n      prefix: '--pickle'\n\noutputs:\n  dynamic_histogram_read_length:\n    type: File\n    outputBinding:\n      glob: Dynamic_Histogram_Read_length.html\n  histogram_read_length:\n    type: File\n    outputBinding:\n      glob: HistogramReadlength.*\n  length_v_qual_scatter_plot_dot:\n    type: File\n    outputBinding:\n      glob: LengthvsQualityScatterPlot_dot.*\n  length_v_qual_scatter_plot_kde:\n    type: File\n    outputBinding:\n      glob: LengthvsQualityScatterPlot_kde.*\n  log_transformed_histogram_read_length:\n    type: File\n    outputBinding:\n      glob: LogTransformed_HistogramReadlength.*\n  report:\n    type: File\n    outputBinding:\n      glob: NanoPlot-report.html\n  logfile:\n    type: File\n    outputBinding:\n      glob: NanoPlot_*.log\n  nanostats:\n    type: File\n    outputBinding:\n      glob: NanoStats.txt\n  weighted_histogram_read_length:\n    type: File\n    outputBinding:\n      glob: Weighted_HistogramReadlength.*\n  weighted_log_transform_histogram_read_length:\n    type: File\n    outputBinding:\n      glob: Weighted_LogTransformed_HistogramReadlength.*\n  yield_by_length_img:\n    type: File\n    outputBinding:\n      glob: Yield_By_Length.*\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'aligned_length', 'inputBinding': {'prefix': '--alength'}, 'type': ['null', 'boolean']}, {'id': 'bam_files', 'format': 'http://edamontology.org/format_2572', 'inputBinding': {'prefix': '--bam'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'barcoded', 'inputBinding': {'prefix': '--barcoded'}, 'type': ['null', 'boolean']}, {'id': 'color', 'inputBinding': {'prefix': '--color'}, 'type': ['null', 'string']}, {'id': 'colormap', 'inputBinding': {'prefix': '--colormap'}, 'type': ['null', 'string']}, {'id': 'cram_files', 'format': 'http://edamontology.org/format_3462', 'inputBinding': {'prefix': '--cram'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'downsample', 'inputBinding': {'prefix': '--downsample'}, 'type': ['null', 'int']}, {'id': 'dpi', 'inputBinding': {'prefix': '--dpi'}, 'type': ['null', 'int']}, {'id': 'drop_outliers', 'inputBinding': {'prefix': '--drop_outliers'}, 'type': ['null', 'boolean']}, {'id': 'fasta_files', 'format': 'http://edamontology.org/format_1931', 'inputBinding': {'prefix': '--fasta'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'fastq_files', 'inputBinding': {'prefix': '--fastq'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'font_scale', 'inputBinding': {'prefix': '--font_scale'}, 'type': ['null', 'float']}, {'id': 'format', 'inputBinding': {'prefix': '--format'}, 'type': [{'name': '_:967f5ad7-184c-408d-a54c-7e5d36e332de', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/eps', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/jpeg', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/jpg', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/pdf', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/pgf', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/png', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/ps', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/raw', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/rgba', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/svg', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/svgz', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/tif', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#format/tiff'], 'type': 'enum'}, 'null']}, {'id': 'hide_n50', 'inputBinding': {'prefix': '--no-N50'}, 'type': ['null', 'boolean']}, {'id': 'hide_stats', 'inputBinding': {'prefix': '--hide_stats'}, 'type': ['null', 'boolean']}, {'id': 'listcolormaps', 'inputBinding': {'prefix': '--listcolormaps'}, 'type': ['null', 'boolean']}, {'id': 'listcolors', 'inputBinding': {'prefix': '--listcolors'}, 'type': ['null', 'boolean']}, {'id': 'log_length', 'inputBinding': {'prefix': '--loglength'}, 'type': ['null', 'boolean']}, {'id': 'max_length', 'inputBinding': {'prefix': '--maxlength'}, 'type': ['null', 'int']}, {'id': 'min_length', 'inputBinding': {'prefix': '--minlength'}, 'type': ['null', 'int']}, {'id': 'min_quality', 'inputBinding': {'prefix': '--minqual'}, 'type': ['null', 'int']}, {'id': 'minimal_fastq_files', 'format': 'http://edamontology.org/format_1930', 'inputBinding': {'prefix': '--fastq_minimal'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'percent_quality', 'inputBinding': {'prefix': '--percentqual'}, 'type': ['null', 'boolean']}, {'id': 'plot_title', 'inputBinding': {'prefix': '--title'}, 'type': ['null', 'string']}, {'id': 'plots', 'inputBinding': {'prefix': '--plots'}, 'type': [{'items': {'name': '_:6ec8de1d-965c-458d-95f7-5c9cc67f78d2', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#plots/kde', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#plots/hex', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#plots/dot', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#plots/pauvre'], 'type': 'enum'}, 'type': 'array'}, 'null']}, {'id': 'read_type', 'inputBinding': {'prefix': '--readtype'}, 'type': ['null', {'name': '_:0c5cfd1d-186e-4bc0-878d-34feea1c6936', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read_type/1D', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read_type/2D', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#read_type/1D2'], 'type': 'enum'}]}, {'id': 'rich_fastq_files', 'format': 'http://edamontology.org/format_1930', 'inputBinding': {'prefix': '--fastq_rich'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'run_until', 'inputBinding': {'prefix': '--runtime_until'}, 'type': ['null', 'int']}, {'id': 'show_n50', 'inputBinding': {'prefix': '--N50'}, 'type': ['null', 'boolean']}, {'id': 'summary_files', 'inputBinding': {'prefix': '--summary'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'ubam_files', 'inputBinding': {'prefix': '--ubam'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'use_pickle_file', 'inputBinding': {'prefix': '--pickle'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'dynamic_histogram_read_length', 'outputBinding': {'glob': 'Dynamic_Histogram_Read_length.html'}, 'type': 'File'}, {'id': 'histogram_read_length', 'outputBinding': {'glob': 'HistogramReadlength.*'}, 'type': 'File'}, {'id': 'length_v_qual_scatter_plot_dot', 'outputBinding': {'glob': 'LengthvsQualityScatterPlot_dot.*'}, 'type': 'File'}, {'id': 'length_v_qual_scatter_plot_kde', 'outputBinding': {'glob': 'LengthvsQualityScatterPlot_kde.*'}, 'type': 'File'}, {'id': 'log_transformed_histogram_read_length', 'outputBinding': {'glob': 'LogTransformed_HistogramReadlength.*'}, 'type': 'File'}, {'id': 'logfile', 'outputBinding': {'glob': 'NanoPlot_*.log'}, 'type': 'File'}, {'id': 'nanostats', 'outputBinding': {'glob': 'NanoStats.txt'}, 'type': 'File'}, {'id': 'report', 'outputBinding': {'glob': 'NanoPlot-report.html'}, 'type': 'File'}, {'id': 'weighted_histogram_read_length', 'outputBinding': {'glob': 'Weighted_HistogramReadlength.*'}, 'type': 'File'}, {'id': 'weighted_log_transform_histogram_read_length', 'outputBinding': {'glob': 'Weighted_LogTransformed_HistogramReadlength.*'}, 'type': 'File'}, {'id': 'yield_by_length_img', 'outputBinding': {'glob': 'Yield_By_Length.*'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/nanoplot:1.29.0--py_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'nanoplot', 'version': ['1.29.0'], 'specs': ['https://identifiers.org/biotools/nanoplot']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "NanoPlot",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "nextclade/nextclade.cwl",
    "sha": "edac177ad52d57b0035b9b7c14ac7c1e5df0fc6e",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/nextclade/nextclade.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: Assign Nextstrain clades to SARS-CoV-2 sequences and provide QC information\nlabel: Nextclade\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0001-6553-5274\n    s:email: mailto:pvh@sanbi.ac.za\n    s:name: Peter van Heusden\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/nextclade_js:0.14.3--h9ee0642_0\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 512  # 512 MB\n  SoftwareRequirement:\n    packages:\n      nextclade: \n       version: \n        - 0.14.3\n       specs: \n        - https://anaconda.org/bioconda/nextclade_js\n        - https://github.com/nextstrain/nextclade\n\ninputs:\n  sequences:\n    type: File\n    doc: .fasta or .txt file with input sequences\n    format: \n      - edam:format_1929  # FASTA\n      - iana:text/plain  # plain text format\n    inputBinding:\n      prefix: --input-fasta\n  qc_config:\n    type: File?\n    doc: QC config json file containing custom QC configuration\n    format: iana:application/json  # JSON\n    inputBinding:\n      prefix: --input-qc-config\n  root_seq:\n    type: File?\n    doc: plain text file containing custom root sequence\n    format: iana:text/plain\n    inputBinding:\n      prefix: --input-root-seq\n  tree:\n    type: File?\n    doc: Auspice JSON v2 file containing custom reference tree\n    format: iana:application/json\n    inputBinding:\n      prefix: --input-tree\n  gene_map:\n    type: File?\n    doc: 'JSON file containing custom gene map. Gene map (sometimes also called \"gene annotations\") is used to resolve aminoacid changes in genes.'\n    format: iana:application/json\n    inputBinding:\n      prefix: --input-gene-map\n  pcr_primers:\n    type: File?\n    doc: CSV file containing a list of custom PCR primer sites. These are used to report mutations in these sites.\n    format: iana:text/csv\n    inputBinding:\n      prefix: --input-pcr-primers\n  output_options:\n    type:\n      type: record\n      name: output_options_record\n      fields:\n        report_json:\n          type: boolean?\n          doc: Filename of output JSON results file\n          inputBinding:\n            prefix: --output-json\n            valueFrom: $(inputs.sequences.nameroot)_report.json\n        report_csv:\n          type: boolean?\n          doc: Filename of output CSV results file\n          inputBinding:\n            prefix: --output-csv\n            valueFrom: $(inputs.sequences.nameroot)_report.csv\n        report_tsv:\n          type: boolean?\n          doc: Filename of output TSV results file\n          inputBinding:\n            prefix: --output-tsv\n            valueFrom: $(inputs.sequences.nameroot)_report.tsv\n        report_tsv_clades_only_filename:\n          type: boolean?\n          doc: Filename to output CSV clades-only file\n          inputBinding:\n            prefix: --output-tsv-clades-only\n            valueFrom: $(inputs.sequences.nameroot)_clades_report.csv\n        tree_filename:\n          type: boolean?\n          doc: Filename of output Auspice v2 tree file\n          inputBinding:\n            prefix: --output-tree\n            valueFrom: $(inputs.sequences.nameroot)_tree.json\n    default:\n      report_tsv: true\n      report_json: true\n\noutputs:\n  report_json:\n    type: File?\n    format: iana:application/json\n    outputBinding:\n      glob: $(inputs.sequences.nameroot)_report.json\n  report_csv:\n    type: File?\n    format: iana:text/csv  # Comma-separated values\n    outputBinding:\n      glob: $(inputs.sequences.nameroot)_report.csv\n  report_tsv_clades_only:\n    type: File?\n    format: iana:text/tab-separated-values  # Tab-separated values\n    outputBinding:\n      glob: $(inputs.sequences.nameroot)_clades_report.tsv\n  report_tsv:\n    type: File?\n    format: iana:text/tab-separated-values\n    outputBinding:\n      glob: $(inputs.sequences.nameroot)_report.tsv\n  report_tree:\n    type: File?\n    format: iana:application/json\n    outputBinding:\n      glob: $(inputs.sequences.nameroot)_tree.json\n\nbaseCommand: [ nextclade.js ]\n\n  \n$namespaces:\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-https.rdf\n  - https://edamontology.org/EDAM_1.18.owl\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'gene_map', 'doc': 'JSON file containing custom gene map. Gene map (sometimes also called \"gene annotations\") is used to resolve aminoacid changes in genes.', 'format': 'https://www.iana.org/assignments/media-types/application/json', 'inputBinding': {'prefix': '--input-gene-map'}, 'type': ['null', 'File']}, {'id': 'output_options', 'default': {'report_tsv': True, 'report_json': True}, 'type': {'name': 'output_options_record', 'fields': [{'name': 'report_csv', 'doc': 'Filename of output CSV results file', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--output-csv', 'valueFrom': '$(inputs.sequences.nameroot)_report.csv'}}, {'name': 'report_json', 'doc': 'Filename of output JSON results file', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--output-json', 'valueFrom': '$(inputs.sequences.nameroot)_report.json'}}, {'name': 'report_tsv', 'doc': 'Filename of output TSV results file', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--output-tsv', 'valueFrom': '$(inputs.sequences.nameroot)_report.tsv'}}, {'name': 'report_tsv_clades_only_filename', 'doc': 'Filename to output CSV clades-only file', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--output-tsv-clades-only', 'valueFrom': '$(inputs.sequences.nameroot)_clades_report.csv'}}, {'name': 'tree_filename', 'doc': 'Filename of output Auspice v2 tree file', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': '--output-tree', 'valueFrom': '$(inputs.sequences.nameroot)_tree.json'}}], 'type': 'record'}}, {'id': 'pcr_primers', 'doc': 'CSV file containing a list of custom PCR primer sites. These are used to report mutations in these sites.', 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'inputBinding': {'prefix': '--input-pcr-primers'}, 'type': ['null', 'File']}, {'id': 'qc_config', 'doc': 'QC config json file containing custom QC configuration', 'format': 'https://www.iana.org/assignments/media-types/application/json', 'inputBinding': {'prefix': '--input-qc-config'}, 'type': ['null', 'File']}, {'id': 'root_seq', 'doc': 'plain text file containing custom root sequence', 'format': 'https://www.iana.org/assignments/media-types/text/plain', 'inputBinding': {'prefix': '--input-root-seq'}, 'type': ['null', 'File']}, {'id': 'sequences', 'doc': '.fasta or .txt file with input sequences', 'format': ['http://edamontology.org/format_1929', 'https://www.iana.org/assignments/media-types/text/plain'], 'inputBinding': {'prefix': '--input-fasta'}, 'type': 'File'}, {'id': 'tree', 'doc': 'Auspice JSON v2 file containing custom reference tree', 'format': 'https://www.iana.org/assignments/media-types/application/json', 'inputBinding': {'prefix': '--input-tree'}, 'type': ['null', 'File']}]",
    "cwl_outputs": "[{'id': 'report_csv', 'outputBinding': {'glob': '$(inputs.sequences.nameroot)_report.csv'}, 'format': 'https://www.iana.org/assignments/media-types/text/csv', 'type': ['null', 'File']}, {'id': 'report_json', 'outputBinding': {'glob': '$(inputs.sequences.nameroot)_report.json'}, 'format': 'https://www.iana.org/assignments/media-types/application/json', 'type': ['null', 'File']}, {'id': 'report_tree', 'outputBinding': {'glob': '$(inputs.sequences.nameroot)_tree.json'}, 'format': 'https://www.iana.org/assignments/media-types/application/json', 'type': ['null', 'File']}, {'id': 'report_tsv', 'outputBinding': {'glob': '$(inputs.sequences.nameroot)_report.tsv'}, 'format': 'https://www.iana.org/assignments/media-types/text/tab-separated-values', 'type': ['null', 'File']}, {'id': 'report_tsv_clades_only', 'outputBinding': {'glob': '$(inputs.sequences.nameroot)_clades_report.tsv'}, 'format': 'https://www.iana.org/assignments/media-types/text/tab-separated-values', 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/nextclade_js:0.14.3--h9ee0642_0'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 512}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'nextclade', 'version': ['0.14.3'], 'specs': ['https://anaconda.org/bioconda/nextclade_js', 'https://github.com/nextstrain/nextclade']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['nextclade.js']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/', 's': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf', 'https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": "Assign Nextstrain clades to SARS-CoV-2 sequences and provide QC information",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "Nextclade",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0001-6553-5274', 's:email': 'mailto:pvh@sanbi.ac.za', 's:name': 'Peter van Heusden'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "nucleoatac/nucleoatac.cwl",
    "sha": "3d4fbb31fa182e5d5d40f69be22c15453f92ebba",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/nucleoatac/nucleoatac.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Calls nucleosome positions based on ATAC-seq reads.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/nucleoatac:0.3.4--py27h984c793_7\n\nbaseCommand: [\"nucleoatac\", \"run\"]\nstderr: $(inputs.output_basename).stderr\nstdout: $(inputs.output_basename).stout\n\ninputs:\n  bam:\n    doc: aligned and filtered reads, not shifted\n    type: File\n    inputBinding:\n      prefix: --bam\n      position: 1\n  bed:\n    doc: regions of open chromatin (ATAC peaks)\n    type: File\n    inputBinding:\n      prefix: --bed\n      position: 1\n  fasta:\n    doc: reference genome in fasta format + samtools faidx index\n    type: File\n    secondaryFiles: [ \".fai\" ]\n    inputBinding:\n      prefix: --fasta\n      position: 1\n  output_basename:\n    type: string\n    inputBinding:\n      prefix: --out\n      position: 1\n\noutputs:\n  nucl_occ_tracks:\n    type: File?\n    outputBinding:\n      glob:  \"*.occ.bedgraph.gz\"\n  nucl_occ_lower_bound_tracks:\n    type: File?\n    outputBinding:\n      glob:  \"*.occ.lower_bound.bedgraph.gz\"\n  nucl_occ_upper_bound_tracks:\n    type: File?\n    outputBinding:\n      glob:  \"*.occ.upper_bound.bedgraph.gz\"\n  nucl_dist_txt:\n    type: File?\n    outputBinding:\n      glob:  \"*.nuc_dist.txt\"\n  nucl_dist_plot:\n    type: File?\n    outputBinding:\n      glob:  \"*.nuc_dist.eps\"\n  fragsize_in_peaks_txt:\n    type: File?\n    outputBinding:\n      glob:  \"*.fragmentsizes.txt\"\n  nucl_occ_fit_txt:\n    type: File?\n    outputBinding:\n      glob:  \"*.occ_fit.txt\"\n  nucl_occ_fit_plot:\n    type: File?\n    outputBinding:\n      glob:  \"*.occ_fit.eps\"\n  nucl_occ_peaks_bed:\n    type: File?\n    outputBinding:\n      glob:  \"*.occpeaks.bed.gz\"\n  nucl_vplot_data:\n    type: File?\n    outputBinding:\n      glob:  \"*.VMat\"\n  nucl_pos_bed:\n    type: File?\n    outputBinding:\n      glob:  \"*.nucpos.bed.gz\"\n  nucl_pos_redundant_bed:\n    type: File?\n    outputBinding:\n      glob:  \"*.nucpos.redundant.bed.gz\"\n  nucl_norm_crosscor_tracks:\n    type: File?\n    outputBinding:\n      glob:  \"*.nucleoatac_signal.bedgraph.gz\"\n  nucl_norm_smooth_crosscor_tracks:\n    type: File?\n    outputBinding:\n      glob:  \"*.nucleoatac_signal.smooth.bedgraph.gz\"\n  combined_nucl_pos_bed:\n    type: File?\n    outputBinding:\n      glob:  \"*.nucmap_combined.bed.gz\"\n  nfr_pos_bed:\n    type: File?\n    outputBinding:\n      glob:  \"*.nfrpos.bed.gz\"\n  nucleoatac_stderr:\n    type: stderr\n  nucleoatac_stdout:\n    type: stdout\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam', 'doc': 'aligned and filtered reads, not shifted', 'inputBinding': {'position': 1, 'prefix': '--bam'}, 'type': 'File'}, {'id': 'bed', 'doc': 'regions of open chromatin (ATAC peaks)', 'inputBinding': {'position': 1, 'prefix': '--bed'}, 'type': 'File'}, {'id': 'fasta', 'secondaryFiles': ['.fai'], 'doc': 'reference genome in fasta format + samtools faidx index', 'inputBinding': {'position': 1, 'prefix': '--fasta'}, 'type': 'File'}, {'id': 'output_basename', 'inputBinding': {'position': 1, 'prefix': '--out'}, 'type': 'string'}]",
    "cwl_outputs": "[{'id': 'combined_nucl_pos_bed', 'outputBinding': {'glob': '*.nucmap_combined.bed.gz'}, 'type': ['null', 'File']}, {'id': 'fragsize_in_peaks_txt', 'outputBinding': {'glob': '*.fragmentsizes.txt'}, 'type': ['null', 'File']}, {'id': 'nfr_pos_bed', 'outputBinding': {'glob': '*.nfrpos.bed.gz'}, 'type': ['null', 'File']}, {'id': 'nucl_dist_plot', 'outputBinding': {'glob': '*.nuc_dist.eps'}, 'type': ['null', 'File']}, {'id': 'nucl_dist_txt', 'outputBinding': {'glob': '*.nuc_dist.txt'}, 'type': ['null', 'File']}, {'id': 'nucl_norm_crosscor_tracks', 'outputBinding': {'glob': '*.nucleoatac_signal.bedgraph.gz'}, 'type': ['null', 'File']}, {'id': 'nucl_norm_smooth_crosscor_tracks', 'outputBinding': {'glob': '*.nucleoatac_signal.smooth.bedgraph.gz'}, 'type': ['null', 'File']}, {'id': 'nucl_occ_fit_plot', 'outputBinding': {'glob': '*.occ_fit.eps'}, 'type': ['null', 'File']}, {'id': 'nucl_occ_fit_txt', 'outputBinding': {'glob': '*.occ_fit.txt'}, 'type': ['null', 'File']}, {'id': 'nucl_occ_lower_bound_tracks', 'outputBinding': {'glob': '*.occ.lower_bound.bedgraph.gz'}, 'type': ['null', 'File']}, {'id': 'nucl_occ_peaks_bed', 'outputBinding': {'glob': '*.occpeaks.bed.gz'}, 'type': ['null', 'File']}, {'id': 'nucl_occ_tracks', 'outputBinding': {'glob': '*.occ.bedgraph.gz'}, 'type': ['null', 'File']}, {'id': 'nucl_occ_upper_bound_tracks', 'outputBinding': {'glob': '*.occ.upper_bound.bedgraph.gz'}, 'type': ['null', 'File']}, {'id': 'nucl_pos_bed', 'outputBinding': {'glob': '*.nucpos.bed.gz'}, 'type': ['null', 'File']}, {'id': 'nucl_pos_redundant_bed', 'outputBinding': {'glob': '*.nucpos.redundant.bed.gz'}, 'type': ['null', 'File']}, {'id': 'nucl_vplot_data', 'outputBinding': {'glob': '*.VMat'}, 'type': ['null', 'File']}, {'id': 'nucleoatac_stderr', 'type': 'stderr'}, {'id': 'nucleoatac_stdout', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/nucleoatac:0.3.4--py27h984c793_7'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 10000}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['nucleoatac', 'run']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Calls nucleosome positions based on ATAC-seq reads.\n",
    "cwl_stdout": "$(inputs.output_basename).stout",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "$(inputs.output_basename).stderr",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "odgi/odgi_bin.cwl",
    "sha": "5f06fb12f0df51fbddbbbfe20d4373916d6c8b7c",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/odgi/odgi_bin.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: odgi bin\ndoc: binning of path information in the graph\n\nhints:\n  SoftwareRequirement:\n    packages:\n      odgi:\n        version: [ \"0.4.1\" ]\n        specs: [ https://identifiers.org/biotools/odgi ]\n  DockerRequirement:\n    dockerPull:  quay.io/biocontainers/odgi:0.4.1--py38h8e3bb3f_1\n\ninputs:\n  sparse_graph_index:\n    type: File\n    inputBinding:\n      prefix: --idx=\n      separate: false\n\n  bin_width:\n    type: int?\n    doc: width of each bin in basepairs along the graph vector\n    inputBinding:\n      prefix: --bin-width=\n      separate: false\n\narguments:\n  - --json\n  - --fasta=$(inputs.sparse_graph_index.nameroot).og.fasta\n\nstdout: $(inputs.sparse_graph_index.nameroot).w$(inputs.bin_width).json\n\nbaseCommand: [ odgi, bin ]\n\noutputs:\n  bins:\n    type: stdout\n    format: iana:application/json\n  pangenome_sequence:\n    type: File\n    format: edam:format_1929  # FASTA\n    outputBinding:\n      glob: $(inputs.sparse_graph_index.nameroot).og.fasta\n\n$namespaces:\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bin_width', 'doc': 'width of each bin in basepairs along the graph vector', 'inputBinding': {'prefix': '--bin-width=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'sparse_graph_index', 'inputBinding': {'prefix': '--idx=', 'separate': False}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'bins', 'format': 'https://www.iana.org/assignments/media-types/application/json', 'type': 'stdout'}, {'id': 'pangenome_sequence', 'outputBinding': {'glob': '$(inputs.sparse_graph_index.nameroot).og.fasta'}, 'format': 'http://edamontology.org/format_1929', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/odgi:0.4.1--py38h8e3bb3f_1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'odgi', 'version': ['0.4.1'], 'specs': ['https://identifiers.org/biotools/odgi']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['odgi', 'bin']",
    "cwl_arguments": "['--json', '--fasta=$(inputs.sparse_graph_index.nameroot).og.fasta']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": "binning of path information in the graph",
    "cwl_stdout": "$(inputs.sparse_graph_index.nameroot).w$(inputs.bin_width).json",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "odgi bin",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "odgi/odgi_build.cwl",
    "sha": "a0745895cfea825abbade0c5c2b2916410fc4405",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/odgi/odgi_build.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: odgi build\ndoc: construct a dynamic succinct variation graph\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entry: $(inputs.graph)\n        writable: true\n\nhints:\n  ResourceRequirement:\n    coresMin: 4\n    ramMin: $(7 * 1024)\n    outdirMin: $(Math.ceil((inputs.graph.size/(1024*1024*1024)+1) * 2))\n  SoftwareRequirement:\n    packages:\n      odgi:\n        version: [ \"0.4.1\" ]\n        specs: [ https://identifiers.org/biotools/odgi ]\n  DockerRequirement:\n    dockerPull:  quay.io/biocontainers/odgi:0.4.1--py38h8e3bb3f_1\n\ninputs:\n  graph:\n    type: File\n    #format: GFA1 or GFA2\n\n  sort:\n    type: boolean?\n    doc: apply generalized topological sort to the graph and set node ids to order\n    inputBinding:\n      prefix: --sort\n\narguments:\n  - --progress\n  - --gfa=$(inputs.graph.basename)\n  - --out=-\n\nstdout: $(inputs.graph.nameroot).odgi\n\nbaseCommand: [ odgi, build ]\n\noutputs:\n  sparse_graph_index: stdout\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'graph', 'type': 'File'}, {'id': 'sort', 'doc': 'apply generalized topological sort to the graph and set node ids to order', 'inputBinding': {'prefix': '--sort'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'sparse_graph_index', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/odgi:0.4.1--py38h8e3bb3f_1'}, {'class': 'ResourceRequirement', 'coresMin': 4, 'ramMin': '$(7 * 1024)', 'outdirMin': '$(Math.ceil((inputs.graph.size/(1024*1024*1024)+1) * 2))'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'odgi', 'version': ['0.4.1'], 'specs': ['https://identifiers.org/biotools/odgi']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['odgi', 'build']",
    "cwl_arguments": "['--progress', '--gfa=$(inputs.graph.basename)', '--out=-']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': [{'entry': '$(inputs.graph)', 'writable': True}]}, {'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "construct a dynamic succinct variation graph",
    "cwl_stdout": "$(inputs.graph.nameroot).odgi",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "odgi build",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "odgi/odgi_pathindex.cwl",
    "sha": "6c9b4f1682721229ccf27cf2527d055b5fb5b273",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/odgi/odgi_pathindex.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: odgi pathindex\ndoc: create a path index for a given graph\n\nhints:\n  SoftwareRequirement:\n    packages:\n      odgi:\n        version: [ \"0.4.1\" ]\n        specs: [ https://identifiers.org/biotools/odgi ]\n  DockerRequirement:\n    dockerPull:  quay.io/biocontainers/odgi:0.4.1--py38h8e3bb3f_1\n\ninputs:\n  sparse_graph_index:\n    type: File\n    inputBinding:\n      prefix: --idx=\n      separate: false\n\narguments:\n  - prefix: --out=\n    valueFrom: $(inputs.sparse_graph_index.nameroot).og.xp\n    separate: false\n\nbaseCommand: [ odgi, pathindex ]\n\noutputs:\n  indexed_paths:\n    type: File\n    outputBinding:\n      glob: $(inputs.sparse_graph_index.nameroot).og.xp\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'sparse_graph_index', 'inputBinding': {'prefix': '--idx=', 'separate': False}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'indexed_paths', 'outputBinding': {'glob': '$(inputs.sparse_graph_index.nameroot).og.xp'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/odgi:0.4.1--py38h8e3bb3f_1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'odgi', 'version': ['0.4.1'], 'specs': ['https://identifiers.org/biotools/odgi']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['odgi', 'pathindex']",
    "cwl_arguments": "[{'prefix': '--out=', 'separate': False, 'valueFrom': '$(inputs.sparse_graph_index.nameroot).og.xp'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "create a path index for a given graph",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "odgi pathindex",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "odgi/odgi_sort.cwl",
    "sha": "7d621a46ff61b92343c5ddd8b433f3027fc44f1c",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/odgi/odgi_sort.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: odgi sort\ndoc: variation graph sorts\n\nhints:\n  ResourceRequirement:\n    coresMin: 8\n  SoftwareRequirement:\n    packages:\n      odgi:\n        version: [ \"0.4.1\" ]\n        specs: [ https://identifiers.org/biotools/odgi ]\n  DockerRequirement:\n    dockerPull:  quay.io/biocontainers/odgi:0.4.1--py38h8e3bb3f_1\n\ninputs:\n  sparse_graph_index:\n    type: File\n    inputBinding:\n      prefix: --idx=\n      separate: false\n\n  pipeline_specification:\n    type: string?\n    inputBinding:\n      prefix: --pipeline=\n      separate: false\n    doc: |\n      apply a series of sorts:\n      b: breadth first topological sort\n      c: cycle breaking sort\n      d: sort on the basis of the DAGified graph\n      e: eades algorithm\n      f: reverse the sort order\n      m: use sparse matrix diagonalization to sort the graph\n      r: randomly sort the graph\n      s: the default sort\n      w: use two-way (max of head-first and tail-first) topological algorithm\n      z: chunked depth first topological sort\n      S: apply 1D (linear) SGD algorithm to organize graph \n\n  sgd_use_paths:\n    type: boolean?\n    doc: in SGD, use paths to structure internode distances\n    inputBinding:\n      prefix: --sgd-use-paths\n\n  sort_paths_max:\n    type: boolean?\n    doc: sort paths by their highest contained node id\n    inputBinding:\n      prefix: --paths-max\n\narguments:\n  - --progress\n  - --threads=$(runtime.cores)\n  - prefix: --out=\n    valueFrom: $(inputs.sparse_graph_index.nameroot).sorted.og\n    separate: false\n\nbaseCommand: [ odgi, sort ]\n\noutputs:\n  sorted_sparse_graph_index:\n    type: File\n    outputBinding:\n      glob: $(inputs.sparse_graph_index.nameroot).sorted.og  \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'pipeline_specification', 'doc': 'apply a series of sorts:\\nb: breadth first topological sort\\nc: cycle breaking sort\\nd: sort on the basis of the DAGified graph\\ne: eades algorithm\\nf: reverse the sort order\\nm: use sparse matrix diagonalization to sort the graph\\nr: randomly sort the graph\\ns: the default sort\\nw: use two-way (max of head-first and tail-first) topological algorithm\\nz: chunked depth first topological sort\\nS: apply 1D (linear) SGD algorithm to organize graph \\n', 'inputBinding': {'prefix': '--pipeline=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'sgd_use_paths', 'doc': 'in SGD, use paths to structure internode distances', 'inputBinding': {'prefix': '--sgd-use-paths'}, 'type': ['null', 'boolean']}, {'id': 'sort_paths_max', 'doc': 'sort paths by their highest contained node id', 'inputBinding': {'prefix': '--paths-max'}, 'type': ['null', 'boolean']}, {'id': 'sparse_graph_index', 'inputBinding': {'prefix': '--idx=', 'separate': False}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'sorted_sparse_graph_index', 'outputBinding': {'glob': '$(inputs.sparse_graph_index.nameroot).sorted.og'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/odgi:0.4.1--py38h8e3bb3f_1'}, {'class': 'ResourceRequirement', 'coresMin': 8}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'odgi', 'version': ['0.4.1'], 'specs': ['https://identifiers.org/biotools/odgi']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['odgi', 'sort']",
    "cwl_arguments": "['--progress', '--threads=$(runtime.cores)', {'prefix': '--out=', 'separate': False, 'valueFrom': '$(inputs.sparse_graph_index.nameroot).sorted.og'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "variation graph sorts",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "odgi sort",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "odgi/odgi_viz.cwl",
    "sha": "039b40e6d1a70d228c98dafb8c08840c1911cf0d",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/odgi/odgi_viz.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nlabel: odgi viz\ndoc: variation graph visualizations\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 4\n    ramMin: $(7 * 1024)\n    outdirMin: 1\n  SoftwareRequirement:\n    packages:\n      odgi:\n        version: [ \"0.4.1\" ]\n        specs: [ https://identifiers.org/biotools/odgi ]\n  DockerRequirement:\n    dockerPull:  quay.io/biocontainers/odgi:0.4.1--py38h8e3bb3f_1\n\ninputs:\n  sparse_graph_index: File\n  width:\n    type: int?\n    doc: width in pixels of output image\n    inputBinding:\n      prefix: --width=\n      separate: false\n  height:\n    type: int?\n    doc: height in pixels of output image\n    inputBinding:\n      prefix: --height=\n      separate: false\n  path_per_row:\n    type: boolean?\n    doc: display a single path per row rather than packing them\n    inputBinding:\n      prefix: --path-per-row\n  path_height:\n    type: int?\n    doc: path display height\n    inputBinding:\n      prefix: --path-height=\n      separate: false\n\narguments:\n  - --idx=$(inputs.sparse_graph_index.path)\n  - --threads=$(runtime.cores)\n  - --out=$(inputs.sparse_graph_index.nameroot).png\n\nbaseCommand: [ odgi, viz ]\n\noutputs:\n  graph_image:\n    type: File\n    format: iana:image/png\n    outputBinding:\n      glob: $(inputs.sparse_graph_index.nameroot).png\n\n$namespaces:\n  iana: https://www.iana.org/assignments/media-types/\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'height', 'doc': 'height in pixels of output image', 'inputBinding': {'prefix': '--height=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'path_height', 'doc': 'path display height', 'inputBinding': {'prefix': '--path-height=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'path_per_row', 'doc': 'display a single path per row rather than packing them', 'inputBinding': {'prefix': '--path-per-row'}, 'type': ['null', 'boolean']}, {'id': 'sparse_graph_index', 'type': 'File'}, {'id': 'width', 'doc': 'width in pixels of output image', 'inputBinding': {'prefix': '--width=', 'separate': False}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'graph_image', 'outputBinding': {'glob': '$(inputs.sparse_graph_index.nameroot).png'}, 'format': 'https://www.iana.org/assignments/media-types/image/png', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/odgi:0.4.1--py38h8e3bb3f_1'}, {'class': 'ResourceRequirement', 'coresMin': 4, 'ramMin': '$(7 * 1024)', 'outdirMin': 1}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'odgi', 'version': ['0.4.1'], 'specs': ['https://identifiers.org/biotools/odgi']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['odgi', 'viz']",
    "cwl_arguments": "['--idx=$(inputs.sparse_graph_index.path)', '--threads=$(runtime.cores)', '--out=$(inputs.sparse_graph_index.nameroot).png']",
    "cwl_$namespaces": "{'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "variation graph visualizations",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "odgi viz",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "pca/pca.cwl",
    "sha": "d7fd93f9de818095ac176f04174e457f0567f1ed",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/pca/pca.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/pca:v0.0.4\n\ninputs:\n\n  expression_files:\n    type: File[]\n    inputBinding:\n      prefix: \"--input\"\n    doc: \"Input CSV/TSV files with RefseqId, GeneId, Chrom, TxStart, TxEnd, Strand, TotalReads, Rpkm columns\"\n\n  expression_aliases:\n    type:\n      - \"null\"\n      - string[]\n    inputBinding:\n      prefix: \"--name\"\n    doc: \"Input aliases, the order corresponds to --input order. Default: basename of --input files\"\n\n  target_column:\n    type: string?\n    inputBinding:\n      prefix: \"--target\"\n    doc: \"Target column name to be used by PCA. Default: Rpkm\"\n\n  combine:\n    type:\n      - \"null\"\n      - string[]\n    inputBinding:\n      prefix: \"--combine\"\n    doc: \"Combine inputs by columns names. Default: RefseqId, GeneId, Chrom, TxStart, TxEnd, Strand\"\n\n  output_prefix:\n    type: string?\n    inputBinding:\n      prefix: \"--output\"\n    doc: \"Output prefix. Default: pca_\"\n\noutputs:\n\n  pca1_vs_pca2_plot:\n    type: File\n    outputBinding:\n      glob: \"*001.png\"\n    doc: \"PCA1 vs PCA2 plot\"\n\n  pca2_vs_pca3_plot:\n    type: File\n    outputBinding:\n      glob: \"*002.png\"\n    doc: \"PCA2 vs PCA3 plot\"\n\n  variance_plot:\n    type: File\n    outputBinding:\n      glob: \"*003.png\"\n    doc: \"Variance plot\"\n    \n  pca_3d_plot:\n    type: File?\n    outputBinding:\n      glob: \"*004.png\"\n    doc: \"First three principal components plot\"\n\n  pca_file:\n    type: File\n    outputBinding:\n      glob: \"*.tsv\"\n    doc: \"PCA analysis results exported as TSV\"\n\n  stdout_log:\n    type: stdout\n\n  stderr_log:\n    type: stderr\n\nbaseCommand: [\"run_pca.R\"]\nstderr: pca_stderr.log\nstdout: pca_stdout.log\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"pca\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Principal Component Analysis\n  --------------\n\n  Principal component analysis (PCA) is a statistical procedure that uses an orthogonal transformation to convert\n  a set of observations of possibly correlated variables (entities each of which takes on various numerical values)\n  into a set of values of linearly uncorrelated variables called principal components.\n\n  The calculation is done by a singular value decomposition of the (centered and possibly scaled) data matrix,\n  not by using eigen on the covariance matrix. This is generally the preferred method for numerical accuracy.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'combine', 'doc': 'Combine inputs by columns names. Default: RefseqId, GeneId, Chrom, TxStart, TxEnd, Strand', 'inputBinding': {'prefix': '--combine'}, 'type': ['null', {'items': 'string', 'type': 'array'}]}, {'id': 'expression_aliases', 'doc': 'Input aliases, the order corresponds to --input order. Default: basename of --input files', 'inputBinding': {'prefix': '--name'}, 'type': ['null', {'items': 'string', 'type': 'array'}]}, {'id': 'expression_files', 'doc': 'Input CSV/TSV files with RefseqId, GeneId, Chrom, TxStart, TxEnd, Strand, TotalReads, Rpkm columns', 'inputBinding': {'prefix': '--input'}, 'type': {'items': 'File', 'type': 'array'}}, {'id': 'output_prefix', 'doc': 'Output prefix. Default: pca_', 'inputBinding': {'prefix': '--output'}, 'type': ['null', 'string']}, {'id': 'target_column', 'doc': 'Target column name to be used by PCA. Default: Rpkm', 'inputBinding': {'prefix': '--target'}, 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'pca1_vs_pca2_plot', 'doc': 'PCA1 vs PCA2 plot', 'outputBinding': {'glob': '*001.png'}, 'type': 'File'}, {'id': 'pca2_vs_pca3_plot', 'doc': 'PCA2 vs PCA3 plot', 'outputBinding': {'glob': '*002.png'}, 'type': 'File'}, {'id': 'pca_3d_plot', 'doc': 'First three principal components plot', 'outputBinding': {'glob': '*004.png'}, 'type': ['null', 'File']}, {'id': 'pca_file', 'doc': 'PCA analysis results exported as TSV', 'outputBinding': {'glob': '*.tsv'}, 'type': 'File'}, {'id': 'stderr_log', 'type': 'stderr'}, {'id': 'stdout_log', 'type': 'stdout'}, {'id': 'variance_plot', 'doc': 'Variance plot', 'outputBinding': {'glob': '*003.png'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/pca:v0.0.4'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['run_pca.R']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Principal Component Analysis\n--------------\n\nPrincipal component analysis (PCA) is a statistical procedure that uses an orthogonal transformation to convert\na set of observations of possibly correlated variables (entities each of which takes on various numerical values)\ninto a set of values of linearly uncorrelated variables called principal components.\n\nThe calculation is done by a singular value decomposition of the (centered and possibly scaled) data matrix,\nnot by using eigen on the covariance matrix. This is generally the preferred method for numerical accuracy.\n",
    "cwl_stdout": "pca_stdout.log",
    "cwl_s:name": "pca",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "pca_stderr.log",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "phantompeakqualtools/phantompeakqualtools.cwl",
    "sha": "0c1e77a7f66c3d37ffd60fdb565d6d7134f08254",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/phantompeakqualtools/phantompeakqualtools.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Performs strand cross-correlation analysis of aligned reads and estimates the fragment size.\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/phantompeakqualtools:1.2--1\n  SoftwareRequirement:\n    packages:\n      phantompeakqualtools:\n        version: [ \"1.2\" ]\n        specs: [ https://identifiers.org/biotools/phantompeakqualtools ]\n\n# Please note: please adjust the path to run_spp.R if not using containers:\nbaseCommand: [\"Rscript\", \"--verbose\", \"--max-ppsize=500000\", \"/usr/local/bin/run_spp.R\"]\narguments:\n  - valueFrom: $(runtime.tmpdir)\n    prefix: -tmpdir=\n    separate: false\n    position: 10\n  - valueFrom: $(runtime.outdir)\n    prefix: -odir=\n    separate: false\n    position: 10\n  - valueFrom: $(inputs.bam.nameroot).crosscor.pdf\n    prefix: -savp=\n    separate: false\n    position: 100\n  - valueFrom: $(inputs.bam.nameroot).spp.out\n    prefix: -out=\n    separate: false\n    position: 100\nstderr: $(inputs.bam.nameroot).phantompeakqualtools_stderr\nstdout: $(inputs.bam.nameroot).phantompeakqualtools_stdout # Naming important for multiqcs\n \ninputs:\n  bam:\n    type: File\n    inputBinding:\n      prefix: -c=\n      separate: false\n      position: 10\n \noutputs:\n  qc_crosscorr_summary:\n    type: File?\n    outputBinding:\n      glob:  \"*.spp.out\"\n  qc_crosscorr_plot:\n    type: File?\n    outputBinding:\n      glob:  \"*.pdf\"\n  qc_crosscorr_fragment_size:\n    type: int?\n    outputBinding:\n      glob:  \"*.spp.out\"\n      loadContents: true\n      outputEval: $(parseInt(self[0].contents.split('\\t')[2]))\n  qc_phantompeakqualtools_stderr:\n    type: stderr\n  qc_phantompeakqualtools_stdout:\n    type: stdout\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam', 'inputBinding': {'position': 10, 'prefix': '-c=', 'separate': False}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'qc_crosscorr_fragment_size', 'outputBinding': {'glob': '*.spp.out', 'loadContents': True, 'outputEval': \"$(parseInt(self[0].contents.split('\\\\t')[2]))\"}, 'type': ['null', 'int']}, {'id': 'qc_crosscorr_plot', 'outputBinding': {'glob': '*.pdf'}, 'type': ['null', 'File']}, {'id': 'qc_crosscorr_summary', 'outputBinding': {'glob': '*.spp.out'}, 'type': ['null', 'File']}, {'id': 'qc_phantompeakqualtools_stderr', 'type': 'stderr'}, {'id': 'qc_phantompeakqualtools_stdout', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/phantompeakqualtools:1.2--1'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 20000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'phantompeakqualtools', 'version': ['1.2'], 'specs': ['https://identifiers.org/biotools/phantompeakqualtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['Rscript', '--verbose', '--max-ppsize=500000', '/usr/local/bin/run_spp.R']",
    "cwl_arguments": "[{'position': 10, 'prefix': '-tmpdir=', 'separate': False, 'valueFrom': '$(runtime.tmpdir)'}, {'position': 10, 'prefix': '-odir=', 'separate': False, 'valueFrom': '$(runtime.outdir)'}, {'position': 100, 'prefix': '-savp=', 'separate': False, 'valueFrom': '$(inputs.bam.nameroot).crosscor.pdf'}, {'position': 100, 'prefix': '-out=', 'separate': False, 'valueFrom': '$(inputs.bam.nameroot).spp.out'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Performs strand cross-correlation analysis of aligned reads and estimates the fragment size.\n",
    "cwl_stdout": "$(inputs.bam.nameroot).phantompeakqualtools_stdout",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "$(inputs.bam.nameroot).phantompeakqualtools_stderr",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "picard/picard_AddOrReplaceReadGroups.cwl",
    "sha": "d9ecf06d7c64eb3dd95fe08b711f2bed55f95749",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/picard/picard_AddOrReplaceReadGroups.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand:\n- picard\n- AddOrReplaceReadGroups\n\ndoc: |-\n  Assigns all the reads in a file to a single new read-group.\n\n   <h3>Summary</h3>\n   Many tools (Picard and GATK for example) require or assume the presence of at least one <code>RG</code> tag, defining a \"read-group\"\n   to which each read can be assigned (as specified in the <code>RG</code> tag in the SAM record).\n   This tool enables the user to assign all the reads in the INPUT to a single new read-group.\n   For more information about read-groups, see the <a href='https://www.broadinstitute.org/gatk/guide/article?id=6472'>\n   GATK Dictionary entry.</a>\n   <br />\n   This tool accepts as INPUT BAM and SAM files or URLs from the\n   <a href=\"http://ga4gh.org/#/documentation\">Global Alliance for Genomics and Health (GA4GH)</a>.\n   <h3>Caveats</h3>\n   The value of the tags must adhere (according to the <a href=\"https://samtools.github.io/hts-specs/SAMv1.pdf\">SAM-spec</a>)\n   with the regex <pre>#READGROUP_ID_REGEX</pre> (one or more characters from the ASCII range 32 through 126). In\n   particular <code>&lt;Space&gt;</code> is the only non-printing character allowed.\n   <br/>\n   The program enables only the wholesale assignment of all the reads in the INPUT to a single read-group. If your file\n   already has reads assigned to multiple read-groups, the original <code>RG</code> value will be lost.\n  Documentation: http://broadinstitute.github.io/picard/command-line-overview.html#AddOrReplaceReadGroups\n\nrequirements:\n  ShellCommandRequirement: {}\n  InlineJavascriptRequirement:\n    expressionLib:\n    - |\n      function generateGATK4BooleanValue(){\n          /**\n           * Boolean types in GATK 4 are expressed on the command line as --<PREFIX> \"true\"/\"false\",\n           * so patch here\n           */\n          if(self === true || self === false){\n              return self.toString()\n          }\n\n          return self;\n      }\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\n  SoftwareRequirement:\n    packages:\n      picard:\n        version: [ \"2.22.2\" ]\n        specs: [ https://identifiers.org/biotools/picard_tools ]\n     \ninputs:\n- doc: Input file (BAM or SAM or a GA4GH url). [synonymous with -I]\n  id: INPUT\n  type: File\n  inputBinding:\n    prefix: INPUT=\n    separate: false\n- doc: Read-Group library [synonymous with -LB]\n  id: RGLB\n  type: string\n  inputBinding:\n    prefix: RGLB=\n    separate: false\n- doc: Read-Group platform (e.g. ILLUMINA, SOLID) [synonymous with -PL]\n  id: RGPL\n  type: string\n  inputBinding:\n    prefix: RGPL=\n    separate: false\n- doc: Read-Group platform unit (eg. run barcode) [synonymous with -PU]\n  id: RGPU\n  type: string\n  inputBinding:\n    prefix: RGPU=\n    separate: false\n- doc: Read-Group sample name [synonymous with -SM]\n  id: RGSM\n  type: string\n  inputBinding:\n    prefix: RGSM=\n    separate: false\n- doc: Output filename (BAM or SAM)\n  id: OUTPUT\n  type: string\n  inputBinding:\n    prefix: OUTPUT=\n    separate: false\n- doc: Reference sequence file. [synonymous with -R]\n  id: REFERENCE_SEQUENCE\n  type: File?\n  inputBinding:\n    prefix: REFERENCE_SEQUENCE=\n    separate: false\n- doc: Optional sort order to output in. If not supplied OUTPUT is in the same order\n    as INPUT. [synonymous with -SO]\n  id: SORT_ORDER\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - unsorted\n    - queryname\n    - coordinate\n    - duplicate\n    - unknown\n  inputBinding:\n    prefix: SORT_ORDER=\n    separate: false\n- doc: Read-Group sequencing center name [synonymous with -CN]\n  id: RGCN\n  type: string?\n  inputBinding:\n    prefix: RGCN=\n    separate: false\n- doc: Read-Group description [synonymous with -DS]\n  id: RGDS\n  type: string?\n  inputBinding:\n    prefix: RGDS=\n    separate: false\n- doc: Read-Group run date in Iso8601Date format [synonymous with -DT]\n  id: RGDT\n  type: string?\n  inputBinding:\n    prefix: RGDT=\n    separate: false\n- doc: Read-Group flow order [synonymous with -FO]\n  id: RGFO\n  type: string?\n  inputBinding:\n    prefix: RGFO=\n    separate: false\n- doc: Read-Group ID [synonymous with -ID]\n  id: RGID\n  type: string?\n  inputBinding:\n    prefix: RGID=\n    separate: false\n- doc: Read-Group key sequence [synonymous with -KS]\n  id: RGKS\n  type: string?\n  inputBinding:\n    prefix: RGKS=\n    separate: false\n- doc: Read-Group program group [synonymous with -PG]\n  id: RGPG\n  type: string?\n  inputBinding:\n    prefix: RGPG=\n    separate: false\n- doc: Read-Group predicted insert size [synonymous with -PI]\n  id: RGPI\n  type: int?\n  inputBinding:\n    prefix: RGPI=\n    separate: false\n- doc: Read-Group platform model [synonymous with -PM]\n  id: RGPM\n  type: string?\n  inputBinding:\n    prefix: RGPM=\n    separate: false\n- doc: Control verbosity of logging.\n  id: VERBOSITY\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - ERROR\n    - WARNING\n    - INFO\n    - DEBUG\n  inputBinding:\n    prefix: VERBOSITY=\n    separate: false\n- doc: Whether to suppress job-summary info on System.err.\n  id: QUIET\n  type: boolean?\n  inputBinding:\n    prefix: QUIET=\n    valueFrom: $(generateGATK4BooleanValue())\n    separate: false\n- doc: Validation stringency for all SAM files read by this program.  Setting stringency\n    to SILENT can improve performance when processing a BAM file in which variable-length\n    data (read, qualities, tags) do not otherwise need to be decoded.\n  id: VALIDATION_STRINGENCY\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - STRICT\n    - LENIENT\n    - SILENT\n  inputBinding:\n    prefix: VALIDATION_STRINGENCY=\n    separate: false\n- doc: Compression level for all compressed files created (e.g. BAM and VCF).\n  id: COMPRESSION_LEVEL\n  type: int?\n  inputBinding:\n    prefix: COMPRESSION_LEVEL=\n    separate: false\n- doc: When writing files that need to be sorted, this will specify the number of\n    records stored in RAM before spilling to disk. Increasing this number reduces\n    the number of file handles needed to sort the file, and increases the amount of\n    RAM needed.\n  id: MAX_RECORDS_IN_RAM\n  type: int?\n  inputBinding:\n    prefix: MAX_RECORDS_IN_RAM=\n    separate: false\n- doc: Use the JDK Deflater instead of the Intel Deflater for writing compressed output\n    [synonymous with -use_jdk_deflater]\n  id: USE_JDK_DEFLATER\n  type: boolean?\n  inputBinding:\n    prefix: USE_JDK_DEFLATER=\n    separate: false\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Use the JDK Inflater instead of the Intel Inflater for reading compressed input\n    [synonymous with -use_jdk_inflater]\n  id: USE_JDK_INFLATER\n  type: boolean?\n  inputBinding:\n    prefix: USE_JDK_INFLATER=\n    separate: false\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Whether to create a BAM index when writing a coordinate-sorted BAM file.\n  id: CREATE_INDEX\n  type: boolean?\n  inputBinding:\n    prefix: CREATE_INDEX=\n    valueFrom: $(generateGATK4BooleanValue())\n    separate: false\n- doc: 'Whether to create an MD5 digest for any BAM or FASTQ files created.  '\n  id: CREATE_MD5_FILE\n  type: boolean?\n  inputBinding:\n    prefix: CREATE_MD5_FILE=\n    valueFrom: $(generateGATK4BooleanValue())\n    separate: false\n- doc: Google Genomics API client_secrets.json file path.\n  id: GA4GH_CLIENT_SECRETS\n  type: File?\n  inputBinding:\n    prefix: GA4GH_CLIENT_SECRETS=\n    separate: false\n\narguments:\n - TMP_DIR=$(runtime.tmpdir)\n\noutputs:\n  sequences_with_new_read_group:\n    type: File\n    format: edam:format_2573  # SAM\n    outputBinding:\n      glob: $(inputs.OUTPUT)\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'INPUT', 'doc': 'Input file (BAM or SAM or a GA4GH url). [synonymous with -I]', 'inputBinding': {'prefix': 'INPUT=', 'separate': False}, 'type': 'File'}, {'id': 'RGLB', 'doc': 'Read-Group library [synonymous with -LB]', 'inputBinding': {'prefix': 'RGLB=', 'separate': False}, 'type': 'string'}, {'id': 'RGPL', 'doc': 'Read-Group platform (e.g. ILLUMINA, SOLID) [synonymous with -PL]', 'inputBinding': {'prefix': 'RGPL=', 'separate': False}, 'type': 'string'}, {'id': 'RGPU', 'doc': 'Read-Group platform unit (eg. run barcode) [synonymous with -PU]', 'inputBinding': {'prefix': 'RGPU=', 'separate': False}, 'type': 'string'}, {'id': 'RGSM', 'doc': 'Read-Group sample name [synonymous with -SM]', 'inputBinding': {'prefix': 'RGSM=', 'separate': False}, 'type': 'string'}, {'id': 'OUTPUT', 'doc': 'Output filename (BAM or SAM)', 'inputBinding': {'prefix': 'OUTPUT=', 'separate': False}, 'type': 'string'}, {'id': 'REFERENCE_SEQUENCE', 'doc': 'Reference sequence file. [synonymous with -R]', 'inputBinding': {'prefix': 'REFERENCE_SEQUENCE=', 'separate': False}, 'type': ['null', 'File']}, {'id': 'SORT_ORDER', 'doc': 'Optional sort order to output in. If not supplied OUTPUT is in the same order as INPUT. [synonymous with -SO]', 'inputBinding': {'prefix': 'SORT_ORDER=', 'separate': False}, 'type': ['null', {'name': '_:04884f21-da62-41bc-a14c-ce96b2e140b9', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SORT_ORDER/unsorted', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SORT_ORDER/queryname', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SORT_ORDER/coordinate', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SORT_ORDER/duplicate', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#SORT_ORDER/unknown'], 'type': 'enum'}]}, {'id': 'RGCN', 'doc': 'Read-Group sequencing center name [synonymous with -CN]', 'inputBinding': {'prefix': 'RGCN=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'RGDS', 'doc': 'Read-Group description [synonymous with -DS]', 'inputBinding': {'prefix': 'RGDS=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'RGDT', 'doc': 'Read-Group run date in Iso8601Date format [synonymous with -DT]', 'inputBinding': {'prefix': 'RGDT=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'RGFO', 'doc': 'Read-Group flow order [synonymous with -FO]', 'inputBinding': {'prefix': 'RGFO=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'RGID', 'doc': 'Read-Group ID [synonymous with -ID]', 'inputBinding': {'prefix': 'RGID=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'RGKS', 'doc': 'Read-Group key sequence [synonymous with -KS]', 'inputBinding': {'prefix': 'RGKS=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'RGPG', 'doc': 'Read-Group program group [synonymous with -PG]', 'inputBinding': {'prefix': 'RGPG=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'RGPI', 'doc': 'Read-Group predicted insert size [synonymous with -PI]', 'inputBinding': {'prefix': 'RGPI=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'RGPM', 'doc': 'Read-Group platform model [synonymous with -PM]', 'inputBinding': {'prefix': 'RGPM=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'VERBOSITY', 'doc': 'Control verbosity of logging.', 'inputBinding': {'prefix': 'VERBOSITY=', 'separate': False}, 'type': ['null', {'name': '_:05386f6c-ca1c-4b86-bde5-aa7e82e679b2', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VERBOSITY/ERROR', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VERBOSITY/WARNING', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VERBOSITY/INFO', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VERBOSITY/DEBUG'], 'type': 'enum'}]}, {'id': 'QUIET', 'doc': 'Whether to suppress job-summary info on System.err.', 'inputBinding': {'prefix': 'QUIET=', 'separate': False, 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'VALIDATION_STRINGENCY', 'doc': 'Validation stringency for all SAM files read by this program.  Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded.', 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}, 'type': ['null', {'name': '_:e227cca0-2055-4caf-94d3-bfe328866999', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VALIDATION_STRINGENCY/STRICT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VALIDATION_STRINGENCY/LENIENT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VALIDATION_STRINGENCY/SILENT'], 'type': 'enum'}]}, {'id': 'COMPRESSION_LEVEL', 'doc': 'Compression level for all compressed files created (e.g. BAM and VCF).', 'inputBinding': {'prefix': 'COMPRESSION_LEVEL=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'MAX_RECORDS_IN_RAM', 'doc': 'When writing files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort the file, and increases the amount of RAM needed.', 'inputBinding': {'prefix': 'MAX_RECORDS_IN_RAM=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'USE_JDK_DEFLATER', 'doc': 'Use the JDK Deflater instead of the Intel Deflater for writing compressed output [synonymous with -use_jdk_deflater]', 'inputBinding': {'prefix': 'USE_JDK_DEFLATER=', 'separate': False, 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'USE_JDK_INFLATER', 'doc': 'Use the JDK Inflater instead of the Intel Inflater for reading compressed input [synonymous with -use_jdk_inflater]', 'inputBinding': {'prefix': 'USE_JDK_INFLATER=', 'separate': False, 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'CREATE_INDEX', 'doc': 'Whether to create a BAM index when writing a coordinate-sorted BAM file.', 'inputBinding': {'prefix': 'CREATE_INDEX=', 'separate': False, 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'CREATE_MD5_FILE', 'doc': 'Whether to create an MD5 digest for any BAM or FASTQ files created.  ', 'inputBinding': {'prefix': 'CREATE_MD5_FILE=', 'separate': False, 'valueFrom': '$(generateGATK4BooleanValue())'}, 'type': ['null', 'boolean']}, {'id': 'GA4GH_CLIENT_SECRETS', 'doc': 'Google Genomics API client_secrets.json file path.', 'inputBinding': {'prefix': 'GA4GH_CLIENT_SECRETS=', 'separate': False}, 'type': ['null', 'File']}]",
    "cwl_outputs": "[{'id': 'sequences_with_new_read_group', 'outputBinding': {'glob': '$(inputs.OUTPUT)'}, 'format': 'http://edamontology.org/format_2573', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'picard', 'version': ['2.22.2'], 'specs': ['https://identifiers.org/biotools/picard_tools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'AddOrReplaceReadGroups']",
    "cwl_arguments": "['TMP_DIR=$(runtime.tmpdir)']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['function generateGATK4BooleanValue(){\\n    /**\\n     * Boolean types in GATK 4 are expressed on the command line as --<PREFIX> \"true\"/\"false\",\\n     * so patch here\\n     */\\n    if(self === true || self === false){\\n        return self.toString()\\n    }\\n\\n    return self;\\n}\\n']}, {'class': 'ShellCommandRequirement'}]",
    "cwl_doc": "Assigns all the reads in a file to a single new read-group.\n\n <h3>Summary</h3>\n Many tools (Picard and GATK for example) require or assume the presence of at least one <code>RG</code> tag, defining a \"read-group\"\n to which each read can be assigned (as specified in the <code>RG</code> tag in the SAM record).\n This tool enables the user to assign all the reads in the INPUT to a single new read-group.\n For more information about read-groups, see the <a href='https://www.broadinstitute.org/gatk/guide/article?id=6472'>\n GATK Dictionary entry.</a>\n <br />\n This tool accepts as INPUT BAM and SAM files or URLs from the\n <a href=\"http://ga4gh.org/#/documentation\">Global Alliance for Genomics and Health (GA4GH)</a>.\n <h3>Caveats</h3>\n The value of the tags must adhere (according to the <a href=\"https://samtools.github.io/hts-specs/SAMv1.pdf\">SAM-spec</a>)\n with the regex <pre>#READGROUP_ID_REGEX</pre> (one or more characters from the ASCII range 32 through 126). In\n particular <code>&lt;Space&gt;</code> is the only non-printing character allowed.\n <br/>\n The program enables only the wholesale assignment of all the reads in the INPUT to a single read-group. If your file\n already has reads assigned to multiple read-groups, the original <code>RG</code> value will be lost.\nDocumentation: http://broadinstitute.github.io/picard/command-line-overview.html#AddOrReplaceReadGroups",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "picard/picard_CreateSequenceDictionary.cwl",
    "sha": "b17bb9a994708bc9fe94685992211db3f0900d15",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/picard/picard_CreateSequenceDictionary.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.1\nclass: CommandLineTool\n\nbaseCommand:\n- picard\n- CreateSequenceDictionary\n\ndoc: |-\n  Create a SAM/BAM file from a fasta containing reference sequence. The output SAM file contains a header but no\n   SAMRecords, and the header contains only sequence records.\n\nrequirements:\n  ShellCommandRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.REFERENCE)\n  InlineJavascriptRequirement:\n    expressionLib:\n    - |\n      function generateGATK4BooleanValue(){\n          /**\n           * Boolean types in GATK 4 are expressed on the command line as --<PREFIX> \"true\"/\"false\",\n           * so patch here\n           */\n          if(self === true || self === false){\n              return self.toString()\n          }\n\n          return self;\n      }\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\n  SoftwareRequirement:\n    packages:\n      picard:\n        version: [ \"2.22.2\" ]\n        specs: [ https://identifiers.org/biotools/picard_tools ]\ninputs:\n- doc: Input reference fasta or fasta.gz [synonymous with -R]\n  id: REFERENCE\n  type: File\n  format: edam:format_1929  # FASTA\n  inputBinding:\n    valueFrom: REFERENCE=$(self.basename)\n- doc: Put into AS field of sequence dictionary entry if supplied [synonymous with\n    -AS]\n  id: GENOME_ASSEMBLY\n  type: string?\n  inputBinding:\n    prefix: GENOME_ASSEMBLY=\n    separate: false\n- doc: Put into UR field of sequence dictionary entry.  If not supplied, input reference\n    file is used [synonymous with -UR]\n  id: URI\n  type: string?\n  inputBinding:\n    prefix: URI=\n    separate: false\n- doc: Put into SP field of sequence dictionary entry [synonymous with -SP]\n  id: SPECIES\n  type: string?\n  inputBinding:\n    prefix: SPECIES=\n    separate: false\n- doc: Make sequence name the first word from the > line in the fasta file.  By default\n    the entire contents of the > line is used, excluding leading and trailing whitespace.\n  id: TRUNCATE_NAMES_AT_WHITESPACE\n  type: boolean?\n  inputBinding:\n    prefix: TRUNCATE_NAMES_AT_WHITESPACE=\n    valueFrom: $(generateGATK4BooleanValue())\n    separate: false\n- doc: Stop after writing this many sequences.  For testing.\n  id: NUM_SEQUENCES\n  type: int?\n  inputBinding:\n    prefix: NUM_SEQUENCES=\n    separate: false\n- doc: \"Optional file containing the alternative names for the contigs. Tools may\\\n    \\ use this information to consider different contig notations as identical (e.g:\\\n    \\ 'chr1' and '1'). The alternative names will be put into the appropriate @AN\\\n    \\ annotation for each contig. No header. First column is the original name, the\\\n    \\ second column is an alternative name. One contig may have more than one alternative\\\n    \\ name. [synonymous with -AN]\"\n  id: ALT_NAMES\n  type: File?\n  inputBinding:\n    prefix: ALT_NAMES=\n    separate: false\n- doc: Control verbosity of logging.\n  id: VERBOSITY\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - ERROR\n    - WARNING\n    - INFO\n    - DEBUG\n  inputBinding:\n    prefix: VERBOSITY=\n    separate: false\n- doc: Whether to suppress job-summary info on System.err.\n  id: QUIET\n  type: boolean?\n  inputBinding:\n    prefix: QUIET=\n    valueFrom: $(generateGATK4BooleanValue())\n    separate: false\n- doc: Validation stringency for all SAM files read by this program.  Setting stringency\n    to SILENT can improve performance when processing a BAM file in which variable-length\n    data (read, qualities, tags) do not otherwise need to be decoded.\n  id: VALIDATION_STRINGENCY\n  type:\n  - 'null'\n  - type: enum\n    symbols:\n    - STRICT\n    - LENIENT\n    - SILENT\n  inputBinding:\n    prefix: VALIDATION_STRINGENCY=\n    separate: false\n- doc: Compression level for all compressed files created (e.g. BAM and VCF).\n  id: COMPRESSION_LEVEL\n  type: int?\n  inputBinding:\n    prefix: COMPRESSION_LEVEL=\n    separate: false\n- doc: When writing files that need to be sorted, this will specify the number of\n    records stored in RAM before spilling to disk. Increasing this number reduces\n    the number of file handles needed to sort the file, and increases the amount of\n    RAM needed.\n  id: MAX_RECORDS_IN_RAM\n  type: int?\n  inputBinding:\n    prefix: MAX_RECORDS_IN_RAM=\n    separate: false\n- doc: Use the JDK Deflater instead of the Intel Deflater for writing compressed output\n    [synonymous with -use_jdk_deflater]\n  id: USE_JDK_DEFLATER\n  type: boolean?\n  inputBinding:\n    prefix: USE_JDK_DEFLATER=\n    separate: false\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Use the JDK Inflater instead of the Intel Inflater for reading compressed input\n    [synonymous with -use_jdk_inflater]\n  id: USE_JDK_INFLATER\n  type: boolean?\n  inputBinding:\n    prefix: USE_JDK_INFLATER=\n    separate: false\n    valueFrom: $(generateGATK4BooleanValue())\n- doc: Whether to create a BAM index when writing a coordinate-sorted BAM file.\n  id: CREATE_INDEX\n  type: boolean?\n  inputBinding:\n    prefix: CREATE_INDEX=\n    valueFrom: $(generateGATK4BooleanValue())\n    separate: false\n- doc: 'Whether to create an MD5 digest for any BAM or FASTQ files created.  '\n  id: CREATE_MD5_FILE\n  type: boolean?\n  inputBinding:\n    prefix: CREATE_MD5_FILE=\n    valueFrom: $(generateGATK4BooleanValue())\n    separate: false\n- doc: Google Genomics API client_secrets.json file path.\n  id: GA4GH_CLIENT_SECRETS\n  type: File?\n  inputBinding:\n    prefix: GA4GH_CLIENT_SECRETS=\n    separate: false\n\narguments:\n - TMP_DIR=$(runtime.tmpdir)\n - OUTPUT=$(inputs.REFERENCE.nameroot).dict\n\noutputs:\n  sequences_with_dictionary:\n    type: File\n    format: edam:format_2573  # SAM\n    secondaryFiles:\n      - ^.dict\n      - .fai?\n    outputBinding:\n      glob: $(inputs.REFERENCE.basename)\n\n  sequence_dictionary:\n    type: File\n    outputBinding:\n      glob: $(inputs.REFERENCE.nameroot).dict\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'REFERENCE', 'doc': 'Input reference fasta or fasta.gz [synonymous with -R]', 'format': 'http://edamontology.org/format_1929', 'type': 'File', 'inputBinding': {'valueFrom': 'REFERENCE=$(self.basename)'}}, {'id': 'GENOME_ASSEMBLY', 'doc': 'Put into AS field of sequence dictionary entry if supplied [synonymous with -AS]', 'type': ['null', 'string'], 'inputBinding': {'prefix': 'GENOME_ASSEMBLY=', 'separate': False}}, {'id': 'URI', 'doc': 'Put into UR field of sequence dictionary entry.  If not supplied, input reference file is used [synonymous with -UR]', 'type': ['null', 'string'], 'inputBinding': {'prefix': 'URI=', 'separate': False}}, {'id': 'SPECIES', 'doc': 'Put into SP field of sequence dictionary entry [synonymous with -SP]', 'type': ['null', 'string'], 'inputBinding': {'prefix': 'SPECIES=', 'separate': False}}, {'id': 'TRUNCATE_NAMES_AT_WHITESPACE', 'doc': 'Make sequence name the first word from the > line in the fasta file.  By default the entire contents of the > line is used, excluding leading and trailing whitespace.', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': 'TRUNCATE_NAMES_AT_WHITESPACE=', 'separate': False, 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'NUM_SEQUENCES', 'doc': 'Stop after writing this many sequences.  For testing.', 'type': ['null', 'int'], 'inputBinding': {'prefix': 'NUM_SEQUENCES=', 'separate': False}}, {'id': 'ALT_NAMES', 'doc': \"Optional file containing the alternative names for the contigs. Tools may use this information to consider different contig notations as identical (e.g: 'chr1' and '1'). The alternative names will be put into the appropriate @AN annotation for each contig. No header. First column is the original name, the second column is an alternative name. One contig may have more than one alternative name. [synonymous with -AN]\", 'type': ['null', 'File'], 'inputBinding': {'prefix': 'ALT_NAMES=', 'separate': False}}, {'id': 'VERBOSITY', 'doc': 'Control verbosity of logging.', 'type': ['null', {'name': '_:a12f3538-8231-4211-849e-3ec88e344535', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VERBOSITY/ERROR', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VERBOSITY/WARNING', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VERBOSITY/INFO', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VERBOSITY/DEBUG'], 'type': 'enum'}], 'inputBinding': {'prefix': 'VERBOSITY=', 'separate': False}}, {'id': 'QUIET', 'doc': 'Whether to suppress job-summary info on System.err.', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': 'QUIET=', 'separate': False, 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'VALIDATION_STRINGENCY', 'doc': 'Validation stringency for all SAM files read by this program.  Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded.', 'type': ['null', {'name': '_:45f5f86c-ab61-496d-bf95-4314655471f4', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VALIDATION_STRINGENCY/STRICT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VALIDATION_STRINGENCY/LENIENT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#VALIDATION_STRINGENCY/SILENT'], 'type': 'enum'}], 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}}, {'id': 'COMPRESSION_LEVEL', 'doc': 'Compression level for all compressed files created (e.g. BAM and VCF).', 'type': ['null', 'int'], 'inputBinding': {'prefix': 'COMPRESSION_LEVEL=', 'separate': False}}, {'id': 'MAX_RECORDS_IN_RAM', 'doc': 'When writing files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort the file, and increases the amount of RAM needed.', 'type': ['null', 'int'], 'inputBinding': {'prefix': 'MAX_RECORDS_IN_RAM=', 'separate': False}}, {'id': 'USE_JDK_DEFLATER', 'doc': 'Use the JDK Deflater instead of the Intel Deflater for writing compressed output [synonymous with -use_jdk_deflater]', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': 'USE_JDK_DEFLATER=', 'separate': False, 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'USE_JDK_INFLATER', 'doc': 'Use the JDK Inflater instead of the Intel Inflater for reading compressed input [synonymous with -use_jdk_inflater]', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': 'USE_JDK_INFLATER=', 'separate': False, 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'CREATE_INDEX', 'doc': 'Whether to create a BAM index when writing a coordinate-sorted BAM file.', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': 'CREATE_INDEX=', 'separate': False, 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'CREATE_MD5_FILE', 'doc': 'Whether to create an MD5 digest for any BAM or FASTQ files created.  ', 'type': ['null', 'boolean'], 'inputBinding': {'prefix': 'CREATE_MD5_FILE=', 'separate': False, 'valueFrom': '$(generateGATK4BooleanValue())'}}, {'id': 'GA4GH_CLIENT_SECRETS', 'doc': 'Google Genomics API client_secrets.json file path.', 'type': ['null', 'File'], 'inputBinding': {'prefix': 'GA4GH_CLIENT_SECRETS=', 'separate': False}}]",
    "cwl_outputs": "[{'id': 'sequence_dictionary', 'type': 'File', 'outputBinding': {'glob': '$(inputs.REFERENCE.nameroot).dict'}}, {'id': 'sequences_with_dictionary', 'secondaryFiles': [{'pattern': '^.dict'}, {'pattern': '.fai', 'required': False}], 'format': 'http://edamontology.org/format_2573', 'type': 'File', 'outputBinding': {'glob': '$(inputs.REFERENCE.basename)'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'picard', 'version': ['2.22.2'], 'specs': ['https://identifiers.org/biotools/picard_tools']}]}]",
    "cwl_cwlVersion": "v1.1",
    "cwl_baseCommand": "['picard', 'CreateSequenceDictionary']",
    "cwl_arguments": "['TMP_DIR=$(runtime.tmpdir)', 'OUTPUT=$(inputs.REFERENCE.nameroot).dict']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': ['$(inputs.REFERENCE)']}, {'class': 'InlineJavascriptRequirement', 'expressionLib': ['function generateGATK4BooleanValue(){\\n    /**\\n     * Boolean types in GATK 4 are expressed on the command line as --<PREFIX> \"true\"/\"false\",\\n     * so patch here\\n     */\\n    if(self === true || self === false){\\n        return self.toString()\\n    }\\n\\n    return self;\\n}\\n']}, {'class': 'ShellCommandRequirement'}]",
    "cwl_doc": "Create a SAM/BAM file from a fasta containing reference sequence. The output SAM file contains a header but no\n SAMRecords, and the header contains only sequence records.",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "picard/picard_MarkDuplicates.cwl",
    "sha": "a451410d7a68f776ce40bd06056f02641c904b93",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/picard/picard_MarkDuplicates.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Removal of duplicates from aligned reads.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\n  SoftwareRequirement:\n    packages:\n      picard:\n        version: [ \"2.22.2\" ]\n        specs: [ https://identifiers.org/biotools/picard_tools ]\n  \nbaseCommand: [ picard, MarkDuplicates ]\n\narguments:\n  - OUTPUT=$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)\n  - METRICS_FILE=$(inputs.alignments.nameroot)_markduplicates.metrics\n\nstderr: $(inputs.alignments.nameroot).markduplicates.log\n\ninputs:\n  alignments:\n    doc: SAM or BAM format alignment file\n    format:\n      - edam:format_2573  # SAM\n      - edam:format_2572  # BAM\n    type: File\n    inputBinding:\n      prefix: \"INPUT=\"\n      separate: false\n\n  alignments_are_sorted:\n    type: boolean\n    inputBinding:\n      prefix: ASSUME_SORTED=TRUE\n\n  remove_duplicates:\n    doc: |\n     If true do not write duplicates to the output file instead of writing them\n     with appropriate flags set.\n    type: boolean\n    inputBinding:\n      prefix: REMOVE_DUPLICATES=TRUE\n\n  validation_stringency:\n    type:\n     - 'null'\n     - type: enum\n       symbols:\n        - STRICT\n        - LENIENT\n        - SILENT\n    inputBinding:\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n\n  comment:\n    doc: Comment(s) to include in the output file's header\n    type:\n     - 'null'\n     - type: array\n       items: string\n       inputBinding:\n         prefix: COMMENT=\n         separate: false\n\n  duplicate_scoring_strategy:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - SUM_OF_BASE_QUALITIES\n          - TOTAL_MAPPED_REFERENCE_LENGTH\n          - RANDOM\n    inputBinding:\n      prefix: DUPLICATE_SCORING_STRATEGY=\n      separate: false\n\n  read_name_regex:\n    type: string?\n    inputBinding:\n      prefix: READ_NAME_REGEX=\n      separate: false\n\n  optical_duplicate_pixel_distance:\n    type: int?\n    default: 100\n    doc: '(0;500)'\n    inputBinding:\n      prefix: OPTICAL_DUPLICATE_PIXEL_DISTANCE=\n      separate: false\n\n  barcode_tag:\n    type: string?\n    inputBinding:\n      prefix: BARCODE_TAG=\n      separate: false\n\noutputs:\n  alignments:\n    type: File\n    format: $(inputs.alignments.format)\n    outputBinding:\n      glob: $(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)\n  log:\n    type: stderr\n  metrics:\n    type: File\n    outputBinding:\n      glob: $(inputs.alignments.nameroot)_markduplicates.metrics\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'alignments', 'doc': 'SAM or BAM format alignment file', 'format': ['http://edamontology.org/format_2573', 'http://edamontology.org/format_2572'], 'inputBinding': {'prefix': 'INPUT=', 'separate': False}, 'type': 'File'}, {'id': 'alignments_are_sorted', 'inputBinding': {'prefix': 'ASSUME_SORTED=TRUE'}, 'type': 'boolean'}, {'id': 'barcode_tag', 'inputBinding': {'prefix': 'BARCODE_TAG=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'comment', 'doc': \"Comment(s) to include in the output file's header\", 'type': ['null', {'items': 'string', 'type': 'array', 'inputBinding': {'prefix': 'COMMENT=', 'separate': False}}]}, {'id': 'duplicate_scoring_strategy', 'inputBinding': {'prefix': 'DUPLICATE_SCORING_STRATEGY=', 'separate': False}, 'type': ['null', {'name': '_:2b1a1fd6-f748-42d5-ab0e-6d366dd5e064', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#duplicate_scoring_strategy/SUM_OF_BASE_QUALITIES', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#duplicate_scoring_strategy/TOTAL_MAPPED_REFERENCE_LENGTH', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#duplicate_scoring_strategy/RANDOM'], 'type': 'enum'}]}, {'id': 'optical_duplicate_pixel_distance', 'doc': '(0;500)', 'inputBinding': {'prefix': 'OPTICAL_DUPLICATE_PIXEL_DISTANCE=', 'separate': False}, 'default': 100, 'type': ['null', 'int']}, {'id': 'read_name_regex', 'inputBinding': {'prefix': 'READ_NAME_REGEX=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'remove_duplicates', 'doc': 'If true do not write duplicates to the output file instead of writing them\\nwith appropriate flags set.\\n', 'inputBinding': {'prefix': 'REMOVE_DUPLICATES=TRUE'}, 'type': 'boolean'}, {'id': 'validation_stringency', 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}, 'type': ['null', {'name': '_:1eee8fe5-f528-48f8-8081-940fa588a355', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#validation_stringency/STRICT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#validation_stringency/LENIENT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#validation_stringency/SILENT'], 'type': 'enum'}]}]",
    "cwl_outputs": "[{'id': 'alignments', 'outputBinding': {'glob': '$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)'}, 'format': '$(inputs.alignments.format)', 'type': 'File'}, {'id': 'log', 'type': 'stderr'}, {'id': 'metrics', 'outputBinding': {'glob': '$(inputs.alignments.nameroot)_markduplicates.metrics'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 20000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'picard', 'version': ['2.22.2'], 'specs': ['https://identifiers.org/biotools/picard_tools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'MarkDuplicates']",
    "cwl_arguments": "['OUTPUT=$(inputs.alignments.nameroot)_markduplicates$(inputs.alignments.nameext)', 'METRICS_FILE=$(inputs.alignments.nameroot)_markduplicates.metrics']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": "Removal of duplicates from aligned reads.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "$(inputs.alignments.nameroot).markduplicates.log",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "picard/picard_SortSam.cwl",
    "sha": "95d1ec9ae26e1a9b761b17e057b08670cc5b81a3",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/picard/picard_SortSam.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/picard:2.22.2--0\n  SoftwareRequirement:\n    packages:\n      picard:\n        version: [ \"2.22.2\" ]\n        specs: [ https://identifiers.org/biotools/picard_tools ]\nrequirements:\n  InlineJavascriptRequirement: {}\n\nbaseCommand: [ picard, SortSam ]\n\narguments:\n  - prefix: OUTPUT=\n    separate: false\n    valueFrom: |\n      ${ if(inputs.sort_order == \"coordinate\") { return (inputs.alignments.nameroot)+\".bam\";} else { return (inputs.alignments.nameroot)+\".sam\"; } }\n\ninputs:\n  alignments:\n    type: File\n    inputBinding:\n      prefix: INPUT=\n      separate: false\n\n  sort_order:\n    type:\n      - 'null'\n      - type: enum\n        symbols:\n          - queryname\n          - coordinate\n          - duplicate\n    default: coordinate\n    doc: 'coordinate (bam) or queryname (sam)'\n    inputBinding:\n      prefix: SORT_ORDER=\n      separate: false\n\n  validation_stringency:\n    default: LENIENT\n    doc: Validation stringency for all SAM files read by this program.  Setting stringency\n      to SILENT can improve performance when processing a BAM file in which variable-length\n      data (read, qualities, tags) do not otherwise need to be decoded.\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - STRICT\n      - LENIENT\n      - SILENT\n    inputBinding:\n      prefix: VALIDATION_STRINGENCY=\n      separate: false\n\noutputs:\n  sorted_alignments:\n    type: File\n    format: |-\n      ${ if(inputs.sort_order == \"coordinate\") { return \"http://edamontology.org/format_2572\";} else { return \"http://edamontology.org/format_2573\"; } }\n    outputBinding:\n      glob: '*.*am'\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'alignments', 'inputBinding': {'prefix': 'INPUT=', 'separate': False}, 'type': 'File'}, {'id': 'sort_order', 'doc': 'coordinate (bam) or queryname (sam)', 'inputBinding': {'prefix': 'SORT_ORDER=', 'separate': False}, 'default': 'coordinate', 'type': ['null', {'name': '_:a1f5042f-d01a-4e4d-97bb-ab4529a50ee7', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#sort_order/queryname', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#sort_order/coordinate', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#sort_order/duplicate'], 'type': 'enum'}]}, {'id': 'validation_stringency', 'doc': 'Validation stringency for all SAM files read by this program.  Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded.', 'inputBinding': {'prefix': 'VALIDATION_STRINGENCY=', 'separate': False}, 'default': 'LENIENT', 'type': ['null', {'name': '_:a959b655-62e4-4a38-aba7-2991a0d0b275', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#validation_stringency/STRICT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#validation_stringency/LENIENT', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#validation_stringency/SILENT'], 'type': 'enum'}]}]",
    "cwl_outputs": "[{'id': 'sorted_alignments', 'outputBinding': {'glob': '*.*am'}, 'format': '${ if(inputs.sort_order == \"coordinate\") { return \"http://edamontology.org/format_2572\";} else { return \"http://edamontology.org/format_2573\"; } }', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/picard:2.22.2--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'picard', 'version': ['2.22.2'], 'specs': ['https://identifiers.org/biotools/picard_tools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['picard', 'SortSam']",
    "cwl_arguments": "[{'prefix': 'OUTPUT=', 'separate': False, 'valueFrom': '${ if(inputs.sort_order == \"coordinate\") { return (inputs.alignments.nameroot)+\".bam\";} else { return (inputs.alignments.nameroot)+\".sam\"; } }\\n'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "preseq/preseq_lc_extrap.cwl",
    "sha": "ef8e9e1f1437bd5b80723d2ef4e97f00ee2dc289",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/preseq/preseq_lc_extrap.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  - class: InlineJavascriptRequirement\n    expressionLib:\n    - var get_output_filename = function(input_file) {\n          if (inputs.estimates_filename == \"\") {\n            var ext = \"_preseq_estimates.tsv\";\n            var root = input_file.basename.split('.').slice(0,-1).join('.');\n            return (root == \"\")?inputs.input_file.basename+ext:root+ext;\n          } else {\n            return inputs.estimates_filename;\n          }\n      };\n\nhints:\n  DockerRequirement:\n    dockerPull: stevetsa/preseq:2.0\n  SoftwareRequirement:\n    packages:\n      preseq:\n        version: [ \"2.0.0\" ]\n        specs: [ https://identifiers.org/biotools/preseq ]\n\ninputs:\n\n  confidence_level:\n    type: float?\n    inputBinding:\n      position: 5\n      prefix: \"-cval\"\n    doc: \"Level for confidence intervals, default: 0.95\"\n\n  extrapolation:\n    type: float?\n    inputBinding:\n      position: 6\n      prefix: \"-extrap\"\n    doc: \"Maximum extrapolation, default: 1e+10\"\n\n  max_fragment_size:\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: \"-seg_len\"\n    doc: \"Maximum segment length when merging paired end bam reads, default: 5000\"\n\n  bootstraps:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: \"-bootstraps\"\n    doc: \"Number of bootstraps, default: 100\"\n\n  extrapolations_step:\n    type: float?\n    inputBinding:\n      position: 9\n      prefix: \"-step\"\n    doc: \"Step size in extrapolations, default: 1e+06\"\n\n  terms:\n    type: int?\n    inputBinding:\n      position: 10\n      prefix: \"-terms\"\n    doc: \"Maximum number of terms\"\n\n  defects_mode:\n    type: boolean?\n    inputBinding:\n      position: 11\n      prefix: \"-defects\"\n    doc: \"Defects mode to extrapolate without testing for defects\"\n\n  quick mode:\n    type: boolean?\n    inputBinding:\n      position: 12\n      prefix: \"-quick\"\n    doc: \"Quick mode, estimate yield without bootstrapping for confidence intervals\"\n\n  verbose_mode:\n    type: boolean?\n    inputBinding:\n      position: 13\n      prefix: \"-verbose\"\n    doc: \"Verbose mode\"\n\n  estimates_filename:\n    type: string?\n    inputBinding:\n      position: 14\n      prefix: \"-output\"\n      valueFrom: $(get_output_filename(inputs.bam_file))\n    default: \"\"\n    doc: \"Output filename\"\n\n  pe_mode:\n    type: boolean?\n    inputBinding:\n      position: 15\n      prefix: \"-pe\"\n    doc: \"Input is paired end read file\"\n\n  bam_file:\n    type: File\n    inputBinding:\n      position: 16\n    doc: \"Coordinate sorted BAM file\"\n\noutputs:\n\n  estimates_file:\n    type: File?\n    outputBinding:\n      glob: $(get_output_filename(inputs.bam_file))\n\nbaseCommand: [\"preseq\", \"lc_extrap\", \"-bam\"]\n\nsuccessCodes: [1]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n - https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"preseq-lc-extrap\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs preseq lc_extrap. Only BAM input file is supported (-B option is used by default)\n  successCodes: [1] - is used to pass this tool as a step in a workflow in case the BAM file was not correct for Preseq\n  Discarded arguments:\n    -V, -vals        input is a text file containing only the observed counts\n    -H, -hist        input is a text file containing the observed histogram\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam_file', 'doc': 'Coordinate sorted BAM file', 'inputBinding': {'position': 16}, 'type': 'File'}, {'id': 'bootstraps', 'doc': 'Number of bootstraps, default: 100', 'inputBinding': {'position': 8, 'prefix': '-bootstraps'}, 'type': ['null', 'int']}, {'id': 'confidence_level', 'doc': 'Level for confidence intervals, default: 0.95', 'inputBinding': {'position': 5, 'prefix': '-cval'}, 'type': ['null', 'float']}, {'id': 'defects_mode', 'doc': 'Defects mode to extrapolate without testing for defects', 'inputBinding': {'position': 11, 'prefix': '-defects'}, 'type': ['null', 'boolean']}, {'id': 'estimates_filename', 'doc': 'Output filename', 'inputBinding': {'position': 14, 'prefix': '-output', 'valueFrom': '$(get_output_filename(inputs.bam_file))'}, 'default': '', 'type': ['null', 'string']}, {'id': 'extrapolation', 'doc': 'Maximum extrapolation, default: 1e+10', 'inputBinding': {'position': 6, 'prefix': '-extrap'}, 'type': ['null', 'float']}, {'id': 'extrapolations_step', 'doc': 'Step size in extrapolations, default: 1e+06', 'inputBinding': {'position': 9, 'prefix': '-step'}, 'type': ['null', 'float']}, {'id': 'max_fragment_size', 'doc': 'Maximum segment length when merging paired end bam reads, default: 5000', 'inputBinding': {'position': 7, 'prefix': '-seg_len'}, 'type': ['null', 'int']}, {'id': 'pe_mode', 'doc': 'Input is paired end read file', 'inputBinding': {'position': 15, 'prefix': '-pe'}, 'type': ['null', 'boolean']}, {'id': 'quick mode', 'doc': 'Quick mode, estimate yield without bootstrapping for confidence intervals', 'inputBinding': {'position': 12, 'prefix': '-quick'}, 'type': ['null', 'boolean']}, {'id': 'terms', 'doc': 'Maximum number of terms', 'inputBinding': {'position': 10, 'prefix': '-terms'}, 'type': ['null', 'int']}, {'id': 'verbose_mode', 'doc': 'Verbose mode', 'inputBinding': {'position': 13, 'prefix': '-verbose'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'estimates_file', 'outputBinding': {'glob': '$(get_output_filename(inputs.bam_file))'}, 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'stevetsa/preseq:2.0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'preseq', 'version': ['2.0.0'], 'specs': ['https://identifiers.org/biotools/preseq']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['preseq', 'lc_extrap', '-bam']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var get_output_filename = function(input_file) { if (inputs.estimates_filename == \"\") { var ext = \"_preseq_estimates.tsv\"; var root = input_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.input_file.basename+ext:root+ext; } else { return inputs.estimates_filename; } };']}]",
    "cwl_doc": "Tool runs preseq lc_extrap. Only BAM input file is supported (-B option is used by default)\nsuccessCodes: [1] - is used to pass this tool as a step in a workflow in case the BAM file was not correct for Preseq\nDiscarded arguments:\n  -V, -vals        input is a text file containing only the observed counts\n  -H, -hist        input is a text file containing the observed histogram\n",
    "cwl_stdout": null,
    "cwl_s:name": "preseq-lc-extrap",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": "[1]",
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "qualimap/qualimap_rnaseq.cwl",
    "sha": "1f654d0f505abc8e7ed9fd45ca80198d24f1de79",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/qualimap/qualimap_rnaseq.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\n# Metadata\nlabel: qualimap-qc\ndoc: |-\n  This is qualimap CWL tool definition http://qualimap.bioinfo.cipf.es/.\n  It perform RNA-seq QC analysis on paired-end data http://qualimap.bioinfo.cipf.es/doc_html/command_line.html.\n\nhints:\n  ResourceRequirement:\n    ramMin: 4000\n    coresMin: 1\n  SoftwareRequirement:\n    packages:\n      qualimap:\n        version: [ \"2.2.2d\" ]\n        specs:\n          - https://identifiers.org/rrid/RRID:SCR_001209\n          - https://identifiers.org/biotools/qualimap\n  DockerRequirement:\n    dockerPull: 'quay.io/biocontainers/qualimap:2.2.2d--1'\n\nbaseCommand: [ qualimap, rnaseq ]\n\narguments:\n  - --paired\n  - --java-mem-size=$(inputs.javamem)\n  - prefix: -outdir\n    valueFrom: $(inputs.inputBam.nameroot)\n\ninputs:\n  javamem:\n    type: string\n    default: \"1200M\"\n    label: Set desired Java heap memory size\n\n  algo:\n    type:\n      - \"null\"\n      - type: enum\n        symbols:\n          - uniquely-mapped-reads\n          - proportional\n    inputBinding:\n      prefix: \"--algorithm\"\n    label: Counting algorithm\n\n  inputBam:\n    type: File\n    secondaryFiles: .bai\n    inputBinding:\n      prefix: \"-bam\"\n    label: Input mapping file in BAM format.\n\n  seqProtocol:\n    type:\n      - \"null\"\n      - type: enum\n        symbols:\n           - strand-specific-forward\n           - strand-specific-reverse\n           - non-strand-specific\n    inputBinding:\n      prefix: \"--sequencing-protocol\"\n    label: Sequencing library protocol\n  \n  gtf:\n    type: File\n    inputBinding:\n      prefix: \"-gtf\"\n    label: Region file in GTF, GFF or BED format.\n\noutputs:\n  qualimapQC:\n    type: Directory\n    label: HTML report and raw data\n    outputBinding:\n      glob: $(inputs.inputBam.nameroot)\n  \n  qualimapHTML:\n    type: File\n    label: HTML report\n    outputBinding:\n      glob: $(inputs.inputBam.nameroot)/qualimapReport.html    \n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:codeRepository: https://github.com/common-workflow-library/bio-cwl-tools\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"University of Melbourne Centre for Cancer Research\"\n  s:member:\n  - class: s:Person\n    s:name: Dr. Sehrish Kanwal\n    s:email: mailto:kanwals@unimelb.edu.au\n  \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'algo', 'label': 'Counting algorithm', 'inputBinding': {'prefix': '--algorithm'}, 'type': ['null', {'name': '_:7b7fbecf-fd6e-44a9-bd96-ab9b8faf767f', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#algo/uniquely-mapped-reads', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#algo/proportional'], 'type': 'enum'}]}, {'id': 'gtf', 'label': 'Region file in GTF, GFF or BED format.', 'inputBinding': {'prefix': '-gtf'}, 'type': 'File'}, {'id': 'inputBam', 'label': 'Input mapping file in BAM format.', 'secondaryFiles': '.bai', 'inputBinding': {'prefix': '-bam'}, 'type': 'File'}, {'id': 'javamem', 'label': 'Set desired Java heap memory size', 'default': '1200M', 'type': 'string'}, {'id': 'seqProtocol', 'label': 'Sequencing library protocol', 'inputBinding': {'prefix': '--sequencing-protocol'}, 'type': ['null', {'name': '_:38e1c000-7ccd-452e-867d-a8791e5c1272', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#seqProtocol/strand-specific-forward', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#seqProtocol/strand-specific-reverse', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#seqProtocol/non-strand-specific'], 'type': 'enum'}]}]",
    "cwl_outputs": "[{'id': 'qualimapHTML', 'label': 'HTML report', 'outputBinding': {'glob': '$(inputs.inputBam.nameroot)/qualimapReport.html'}, 'type': 'File'}, {'id': 'qualimapQC', 'label': 'HTML report and raw data', 'outputBinding': {'glob': '$(inputs.inputBam.nameroot)'}, 'type': 'Directory'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/qualimap:2.2.2d--1'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 4000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'qualimap', 'version': ['2.2.2d'], 'specs': ['https://identifiers.org/rrid/RRID:SCR_001209', 'https://identifiers.org/biotools/qualimap']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['qualimap', 'rnaseq']",
    "cwl_arguments": "['--paired', '--java-mem-size=$(inputs.javamem)', {'prefix': '-outdir', 'valueFrom': '$(inputs.inputBam.nameroot)'}]",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "This is qualimap CWL tool definition http://qualimap.bioinfo.cipf.es/.\nIt perform RNA-seq QC analysis on paired-end data http://qualimap.bioinfo.cipf.es/doc_html/command_line.html.",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': 'University of Melbourne Centre for Cancer Research', 's:member': [{'class': 's:Person', 's:name': 'Dr. Sehrish Kanwal', 's:email': 'mailto:kanwals@unimelb.edu.au'}]}]",
    "cwl_label": "qualimap-qc",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": "https://github.com/common-workflow-library/bio-cwl-tools",
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "rgt/rgt-thor.cwl",
    "sha": "a4532cdb9cc8cdbf707d0eb597322c28c8453854",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/rgt/rgt-thor.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/rgt:0.12.3--py27h2b63b92_3\n  SoftwareRequirement:\n    packages:\n      rgt:\n        specs: [ https://doi.org/10.1093/nar/gkw680 ]\n\ninputs:\n  script:\n    type: string?\n    default: |\n      #!/bin/bash\n      add_rep () {\n          echo \"$1\" >> \"$3\"\n          while IFS=',' read -ra REP; do\n              for i in \"${REP[@]}\"; do\n                  echo $i >> \"$3\"\n              done\n          done <<< \"$2\"\n      }\n      > config.txt\n      add_rep \"#rep1\" \"$0\" config.txt\n      add_rep \"#rep2\" \"$1\" config.txt\n      echo \"#chrom_sizes\" >> config.txt\n      echo \"$2\" >> config.txt\n      rgt-THOR config.txt \"${@:3}\"\n    inputBinding:\n      position: 5\n    doc: \"Bash function to generate config.txt and run rgt-THOR\"\n\n  bambai_pair_cond_1:\n    type: File[]\n    inputBinding:\n      position: 6\n      itemSeparator: \",\"\n    secondaryFiles:\n    - .bai\n    doc: \"Alignment and index files for the first biological condition\"\n\n  bambai_pair_cond_2:\n    type: File[]\n    inputBinding:\n      position: 7\n      itemSeparator: \",\"\n    secondaryFiles:\n    - .bai\n    doc: \"Alignment and index files for the second biological condition\"\n\n  chrom_length_file:\n    type: File\n    inputBinding:\n      position: 8\n    doc: \"Chromosome length file\"\n\n  output_prefix:\n    type: string?\n    inputBinding:\n      prefix: \"--name\"\n      position: 9\n    doc: \"Experiment's name and prefix for all files that are created\"\n\n  merge_peaks:\n    type: boolean?\n    inputBinding:\n      prefix: \"--merge\"\n      position: 10\n    doc: \"Merge peaks which have a distance less than the estimated mean fragment size (recommended for histone data)\"\n\n  no_merge_bin:\n    type: boolean?\n    inputBinding:\n      prefix: \"--no-merge-bin\"\n      position: 11\n    doc: \"Merge the overlapping bin before filtering by p-value\"\n\n  housekeeping_genes_bed_file:\n    type: File?\n    inputBinding:\n      prefix: \"--housekeeping-genes\"\n      position: 12\n    doc: \"Define housekeeping genes (BED format) used for normalizing\"\n\n  deadzones_bed_file:\n    type: File?\n    inputBinding:\n      prefix: \"--deadzones\"\n      position: 14\n    doc: \"Define blacklisted genomic regions avoided for analysis\"\n\n  no_correction:\n    type: boolean?\n    inputBinding:\n      prefix: \"--no-correction\"\n      position: 15\n    doc: \"Do not use multipe test correction for p-values (Benjamini/Hochberg)\"\n\n  pvalue_cutoff:\n    type: float?\n    inputBinding:\n      prefix: \"--pvalue\"\n      position: 16\n    doc: \"P-value cutoff for peak detection. Call only peaks with p-value lower than cutoff. [default: 0.1]\"\n\n  extension_size:\n    type:\n      - \"null\"\n      - string\n      - int[]\n    inputBinding:\n      prefix: \"--exts\"\n      position: 17\n      itemSeparator: \",\"\n    doc: |\n      Read's extension size for BAM files (comma separated list for each BAM file in config file).\n      If option is not chosen, estimate extension sizes\n\n  normalization_factor:\n    type:\n      - \"null\"\n      - float[]\n    inputBinding:\n      prefix: \"--factors-inputs\"\n      position: 18\n      itemSeparator: \",\"\n    doc: |\n      Normalization factors for input-DNA (comma separated list for each BAM file in config file).\n      If option is not chosen, estimate factors\n\n  scaling_factor:\n    type:\n      - \"null\"\n      - float[]\n    inputBinding:\n      prefix: \"--scaling-factors\"\n      position: 19\n      itemSeparator: \",\"\n    doc: |\n      Scaling factor for each BAM file (not control input-DNA) as comma separated list for each BAM file in config file.\n      If option is not chosen, follow normalization strategy (TMM or HK approach) [default: none]\n\n  regions_bed_file:\n    type: File?\n    inputBinding:\n      prefix: \"--regions\"\n      position: 20\n    doc: \"Define regions (BED format) to restrict the analysis, that is, where to train the HMM and search for DPs\"\n\n  bin_size:\n    type: int?\n    inputBinding:\n      prefix: \"--binsize\"\n      position: 21\n    doc: \"Size of underlying bins for creating the signal. [default: 100]\"\n\n  step_size:\n    type: int?\n    inputBinding:\n      prefix: \"--step\"\n      position: 22\n    doc: \"Stepsize with which the window consecutively slides across the genome to create the signal. [default: 50]\"\n\n  no_gc_content:\n    type: boolean?\n    inputBinding:\n      prefix: \"--no-gc-content\"\n      position: 23\n    doc: \"Do not normalize towards GC content\"\n\n  norm_regions_bed_file:\n    type: File?\n    inputBinding:\n      prefix: \"--norm-regions\"\n      position: 24\n    doc: \"Restrict normalization to particular regions\"\n\n  foldchange:\n    type: float?\n    inputBinding:\n      prefix: \"--foldchange\"\n      position: 25\n    doc: \"Fold change parameter to define training set (t_1, see paper). [default: 1.6]\"\n\n  threshold:\n    type: int?\n    inputBinding:\n      prefix: \"--threshold\"\n      position: 26\n    doc: \"Minimum signal support for differential peaks to define training set as percentage (t_2, see paper). [default: 95]\"\n\n  bin_count:\n    type: int?\n    inputBinding:\n      prefix: \"--size\"\n      position: 27\n    doc: \"Number of bins the HMM's training set constists of. [default: 10000]\"\n\n  pvalue_filter_percentile:\n    type: int?\n    inputBinding:\n      prefix: \"--par\"\n      position: 28\n    doc: \"Percentile for p-value postprocessing filter. [default: 1]\"\n\n  poisson:\n    type: boolean?\n    inputBinding:\n      prefix: \"--poisson\"\n      position: 29\n    doc: \"Use binomial distribution as emmission\"\n\n  single_strand:\n    type: boolean?\n    inputBinding:\n      prefix: \"--single-strand\"\n      position: 30\n    doc: \"Allow single strand BAM file as input\"\n\n  m_threshold:\n    type: int?\n    inputBinding:\n      prefix: \"--m_threshold\"\n      position: 31\n    doc: \"Define the M threshold of percentile for training TMM. [default: 80]\"\n\n  a_threshold:\n    type: int?\n    inputBinding:\n      prefix: \"--a_threshold\"\n      position: 32\n    doc: \"Define the A threshold of percentile for training TMM. [default: 95]\"\n\n  remove_duplicates:\n    type: boolean?\n    inputBinding:\n      prefix: \"--rmdup\"\n      position: 33\n    doc: \"Remove the duplicate reads\"\n\n\noutputs:\n  diffpeaks_bed_file:\n    type: File?\n    outputBinding:\n      glob: \"*[!-uncor]-diffpeaks.bed\"\n\n  diffpeaks_narrowpeak_file:\n    type: File?\n    outputBinding:\n      glob: \"*[!-uncor]-diffpeaks.narrowPeak\"\n\n  uncor_diffpeaks_bed_file:\n    type: File?\n    outputBinding:\n      glob: \"*-uncor-diffpeaks.bed\"\n\n  uncor_diffpeaks_narrowpeak_file:\n    type: File?\n    outputBinding:\n      glob: \"*-uncor-diffpeaks.narrowPeak\"\n\n  cond_1_bigwig_file:\n    type:\n      - \"null\"\n      - File[]\n    outputBinding:\n      glob: \"*-s1-rep*.bw\"\n\n  cond_2_bigwig_file:\n    type:\n      - \"null\"\n      - File[]\n    outputBinding:\n      glob: \"*-s2-rep*.bw\"\n\n  setup_info_file:\n    type: File\n    outputBinding:\n      glob: \"*-setup.info\"\n\nbaseCommand: [\"bash\", \"-c\"]\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"THOR - differential peak calling of ChIP-seq signals with replicates\"\ns:alternateName: \"THOR is an HMM-based approach to detect and analyze differential peaks in two sets of ChIP-seq data from distinct biological conditions with replicates\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Configuration file is autogenerated based on the bambai_pair_cond_1, bambai_pair_cond_2 and chrom_length_file inputs.\n  The following parameters in a configuration file are skipped: genome, inputs1, inputs2.\n  The following arguments are skipped: --report (tool fails to execute)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'a_threshold', 'doc': 'Define the A threshold of percentile for training TMM. [default: 95]', 'inputBinding': {'position': 32, 'prefix': '--a_threshold'}, 'type': ['null', 'int']}, {'id': 'bambai_pair_cond_1', 'secondaryFiles': ['.bai'], 'doc': 'Alignment and index files for the first biological condition', 'inputBinding': {'position': 6, 'itemSeparator': ','}, 'type': {'items': 'File', 'type': 'array'}}, {'id': 'bambai_pair_cond_2', 'secondaryFiles': ['.bai'], 'doc': 'Alignment and index files for the second biological condition', 'inputBinding': {'position': 7, 'itemSeparator': ','}, 'type': {'items': 'File', 'type': 'array'}}, {'id': 'bin_count', 'doc': \"Number of bins the HMM's training set constists of. [default: 10000]\", 'inputBinding': {'position': 27, 'prefix': '--size'}, 'type': ['null', 'int']}, {'id': 'bin_size', 'doc': 'Size of underlying bins for creating the signal. [default: 100]', 'inputBinding': {'position': 21, 'prefix': '--binsize'}, 'type': ['null', 'int']}, {'id': 'chrom_length_file', 'doc': 'Chromosome length file', 'inputBinding': {'position': 8}, 'type': 'File'}, {'id': 'deadzones_bed_file', 'doc': 'Define blacklisted genomic regions avoided for analysis', 'inputBinding': {'position': 14, 'prefix': '--deadzones'}, 'type': ['null', 'File']}, {'id': 'extension_size', 'doc': \"Read's extension size for BAM files (comma separated list for each BAM file in config file).\\nIf option is not chosen, estimate extension sizes\\n\", 'inputBinding': {'position': 17, 'prefix': '--exts', 'itemSeparator': ','}, 'type': ['null', 'string', {'items': 'int', 'type': 'array'}]}, {'id': 'foldchange', 'doc': 'Fold change parameter to define training set (t_1, see paper). [default: 1.6]', 'inputBinding': {'position': 25, 'prefix': '--foldchange'}, 'type': ['null', 'float']}, {'id': 'housekeeping_genes_bed_file', 'doc': 'Define housekeeping genes (BED format) used for normalizing', 'inputBinding': {'position': 12, 'prefix': '--housekeeping-genes'}, 'type': ['null', 'File']}, {'id': 'm_threshold', 'doc': 'Define the M threshold of percentile for training TMM. [default: 80]', 'inputBinding': {'position': 31, 'prefix': '--m_threshold'}, 'type': ['null', 'int']}, {'id': 'merge_peaks', 'doc': 'Merge peaks which have a distance less than the estimated mean fragment size (recommended for histone data)', 'inputBinding': {'position': 10, 'prefix': '--merge'}, 'type': ['null', 'boolean']}, {'id': 'no_correction', 'doc': 'Do not use multipe test correction for p-values (Benjamini/Hochberg)', 'inputBinding': {'position': 15, 'prefix': '--no-correction'}, 'type': ['null', 'boolean']}, {'id': 'no_gc_content', 'doc': 'Do not normalize towards GC content', 'inputBinding': {'position': 23, 'prefix': '--no-gc-content'}, 'type': ['null', 'boolean']}, {'id': 'no_merge_bin', 'doc': 'Merge the overlapping bin before filtering by p-value', 'inputBinding': {'position': 11, 'prefix': '--no-merge-bin'}, 'type': ['null', 'boolean']}, {'id': 'norm_regions_bed_file', 'doc': 'Restrict normalization to particular regions', 'inputBinding': {'position': 24, 'prefix': '--norm-regions'}, 'type': ['null', 'File']}, {'id': 'normalization_factor', 'doc': 'Normalization factors for input-DNA (comma separated list for each BAM file in config file).\\nIf option is not chosen, estimate factors\\n', 'inputBinding': {'position': 18, 'prefix': '--factors-inputs', 'itemSeparator': ','}, 'type': ['null', {'items': 'float', 'type': 'array'}]}, {'id': 'output_prefix', 'doc': \"Experiment's name and prefix for all files that are created\", 'inputBinding': {'position': 9, 'prefix': '--name'}, 'type': ['null', 'string']}, {'id': 'poisson', 'doc': 'Use binomial distribution as emmission', 'inputBinding': {'position': 29, 'prefix': '--poisson'}, 'type': ['null', 'boolean']}, {'id': 'pvalue_cutoff', 'doc': 'P-value cutoff for peak detection. Call only peaks with p-value lower than cutoff. [default: 0.1]', 'inputBinding': {'position': 16, 'prefix': '--pvalue'}, 'type': ['null', 'float']}, {'id': 'pvalue_filter_percentile', 'doc': 'Percentile for p-value postprocessing filter. [default: 1]', 'inputBinding': {'position': 28, 'prefix': '--par'}, 'type': ['null', 'int']}, {'id': 'regions_bed_file', 'doc': 'Define regions (BED format) to restrict the analysis, that is, where to train the HMM and search for DPs', 'inputBinding': {'position': 20, 'prefix': '--regions'}, 'type': ['null', 'File']}, {'id': 'remove_duplicates', 'doc': 'Remove the duplicate reads', 'inputBinding': {'position': 33, 'prefix': '--rmdup'}, 'type': ['null', 'boolean']}, {'id': 'scaling_factor', 'doc': 'Scaling factor for each BAM file (not control input-DNA) as comma separated list for each BAM file in config file.\\nIf option is not chosen, follow normalization strategy (TMM or HK approach) [default: none]\\n', 'inputBinding': {'position': 19, 'prefix': '--scaling-factors', 'itemSeparator': ','}, 'type': ['null', {'items': 'float', 'type': 'array'}]}, {'id': 'script', 'doc': 'Bash function to generate config.txt and run rgt-THOR', 'inputBinding': {'position': 5}, 'default': '#!/bin/bash\\nadd_rep () {\\n    echo \"$1\" >> \"$3\"\\n    while IFS=\\',\\' read -ra REP; do\\n        for i in \"${REP[@]}\"; do\\n            echo $i >> \"$3\"\\n        done\\n    done <<< \"$2\"\\n}\\n> config.txt\\nadd_rep \"#rep1\" \"$0\" config.txt\\nadd_rep \"#rep2\" \"$1\" config.txt\\necho \"#chrom_sizes\" >> config.txt\\necho \"$2\" >> config.txt\\nrgt-THOR config.txt \"${@:3}\"\\n', 'type': ['null', 'string']}, {'id': 'single_strand', 'doc': 'Allow single strand BAM file as input', 'inputBinding': {'position': 30, 'prefix': '--single-strand'}, 'type': ['null', 'boolean']}, {'id': 'step_size', 'doc': 'Stepsize with which the window consecutively slides across the genome to create the signal. [default: 50]', 'inputBinding': {'position': 22, 'prefix': '--step'}, 'type': ['null', 'int']}, {'id': 'threshold', 'doc': 'Minimum signal support for differential peaks to define training set as percentage (t_2, see paper). [default: 95]', 'inputBinding': {'position': 26, 'prefix': '--threshold'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'cond_1_bigwig_file', 'outputBinding': {'glob': '*-s1-rep*.bw'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'cond_2_bigwig_file', 'outputBinding': {'glob': '*-s2-rep*.bw'}, 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'diffpeaks_bed_file', 'outputBinding': {'glob': '*[!-uncor]-diffpeaks.bed'}, 'type': ['null', 'File']}, {'id': 'diffpeaks_narrowpeak_file', 'outputBinding': {'glob': '*[!-uncor]-diffpeaks.narrowPeak'}, 'type': ['null', 'File']}, {'id': 'setup_info_file', 'outputBinding': {'glob': '*-setup.info'}, 'type': 'File'}, {'id': 'uncor_diffpeaks_bed_file', 'outputBinding': {'glob': '*-uncor-diffpeaks.bed'}, 'type': ['null', 'File']}, {'id': 'uncor_diffpeaks_narrowpeak_file', 'outputBinding': {'glob': '*-uncor-diffpeaks.narrowPeak'}, 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/rgt:0.12.3--py27h2b63b92_3'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'rgt', 'specs': ['https://doi.org/10.1093/nar/gkw680']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', '-c']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Configuration file is autogenerated based on the bambai_pair_cond_1, bambai_pair_cond_2 and chrom_length_file inputs.\nThe following parameters in a configuration file are skipped: genome, inputs1, inputs2.\nThe following arguments are skipped: --report (tool fails to execute)\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "THOR - differential peak calling of ChIP-seq signals with replicates",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "THOR is an HMM-based approach to detect and analyze differential peaks in two sets of ChIP-seq data from distinct biological conditions with replicates",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "rose/rose.cwl",
    "sha": "8bd3ce60c2d032ceb61b8cf0ee8a8612ba2d64e1",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/rose/rose.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/rose:v0.0.2\n\ninputs:\n  binding_sites_file:\n    type: File\n    inputBinding:\n      position: 5\n      prefix: \"-i\"\n    doc: \"GFF or BED file of binding sites used to make enhancers\"\n\n  bam_file:\n    type: File\n    inputBinding:\n      position: 6\n      prefix: \"-r\"\n    secondaryFiles:\n    - .bai\n    doc: \"Indexed bamfile to rank enhancer by\"\n\n  annotation_file:\n    type: File\n    inputBinding:\n      position: 7\n      prefix: \"-g\"\n    doc: \"TSV genome annotation file\"\n\n  stitch_distance:\n    type: int\n    inputBinding:\n      position: 8\n      prefix: \"-s\"\n    doc: \"Linking distance for stitching\"\n\n  tss_distance:\n    type: int\n    inputBinding:\n      position: 9\n      prefix: \"-t\"\n    doc: \"Distance from TSS to exclude. 0 = no TSS exclusion\"\n\noutputs:\n  gff_directory:\n    type: Directory\n    outputBinding:\n      glob: \"gff\"\n\n  mapped_gff_directory:\n    type: Directory\n    outputBinding:\n      glob: \"mappedGFF\"\n\n  stitched_enhancer_region_map:\n    type: File?\n    outputBinding:\n      glob: \"*STITCHED_TSS_DISTAL_ENHANCER_REGION_MAP.txt\"\n\n  all_enhancers_table:\n    type: File?\n    outputBinding:\n      glob: \"*AllEnhancers.table.txt\"\n\n  super_enhancers_table:\n    type: File?\n    outputBinding:\n      glob: \"*SuperEnhancers.table.txt\"\n\n  enhancers_with_super_bed:\n    type: File?\n    outputBinding:\n      glob: \"*Enhancers_withSuper.bed\"\n\n  plot_points_pic:\n    type: File?\n    outputBinding:\n      glob: \"*Plot_points.png\"\n\n  gateway_enhancers_bed:\n    type: File?\n    outputBinding:\n      glob: \"*Gateway_Enhancers.bed\"\n\n  gateway_super_enhancers_bed:\n    type: File?\n    outputBinding:\n      glob: \"*Gateway_SuperEnhancers.bed\"\n\n\nbaseCommand: ['ROSE_main', '-o', './']\n\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"rose\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs ROSE to get Super Enhancers regions\n  -b and -c arguments are not supported\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'annotation_file', 'doc': 'TSV genome annotation file', 'inputBinding': {'position': 7, 'prefix': '-g'}, 'type': 'File'}, {'id': 'bam_file', 'secondaryFiles': ['.bai'], 'doc': 'Indexed bamfile to rank enhancer by', 'inputBinding': {'position': 6, 'prefix': '-r'}, 'type': 'File'}, {'id': 'binding_sites_file', 'doc': 'GFF or BED file of binding sites used to make enhancers', 'inputBinding': {'position': 5, 'prefix': '-i'}, 'type': 'File'}, {'id': 'stitch_distance', 'doc': 'Linking distance for stitching', 'inputBinding': {'position': 8, 'prefix': '-s'}, 'type': 'int'}, {'id': 'tss_distance', 'doc': 'Distance from TSS to exclude. 0 = no TSS exclusion', 'inputBinding': {'position': 9, 'prefix': '-t'}, 'type': 'int'}]",
    "cwl_outputs": "[{'id': 'all_enhancers_table', 'outputBinding': {'glob': '*AllEnhancers.table.txt'}, 'type': ['null', 'File']}, {'id': 'enhancers_with_super_bed', 'outputBinding': {'glob': '*Enhancers_withSuper.bed'}, 'type': ['null', 'File']}, {'id': 'gateway_enhancers_bed', 'outputBinding': {'glob': '*Gateway_Enhancers.bed'}, 'type': ['null', 'File']}, {'id': 'gateway_super_enhancers_bed', 'outputBinding': {'glob': '*Gateway_SuperEnhancers.bed'}, 'type': ['null', 'File']}, {'id': 'gff_directory', 'outputBinding': {'glob': 'gff'}, 'type': 'Directory'}, {'id': 'mapped_gff_directory', 'outputBinding': {'glob': 'mappedGFF'}, 'type': 'Directory'}, {'id': 'plot_points_pic', 'outputBinding': {'glob': '*Plot_points.png'}, 'type': ['null', 'File']}, {'id': 'stitched_enhancer_region_map', 'outputBinding': {'glob': '*STITCHED_TSS_DISTAL_ENHANCER_REGION_MAP.txt'}, 'type': ['null', 'File']}, {'id': 'super_enhancers_table', 'outputBinding': {'glob': '*SuperEnhancers.table.txt'}, 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/rose:v0.0.2'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['ROSE_main', '-o', './']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs ROSE to get Super Enhancers regions\n-b and -c arguments are not supported\n",
    "cwl_stdout": null,
    "cwl_s:name": "rose",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "samtools/samtools_faidx.cwl",
    "sha": "988b2555329073c6864c2ef4a7f4713af1b9dc7f",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/samtools/samtools_faidx.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.14--hb421002_0\n  SoftwareRequirement:\n    packages:\n      samtools:\n        specs: [ https://identifiers.org/biotools/samtools ]\n        version: [ \"1.14\" ]\nrequirements:\n  InitialWorkDirRequirement:\n    listing: [ $(inputs.sequences) ]\n\nbaseCommand: [ samtools, faidx ]\n\ninputs:\n  sequences:\n    type: File\n    doc: Input FASTA file\n    format: edam:format_1929\n\narguments:\n   - $(inputs.sequences.basename)\n\noutputs:\n  sequences_with_index:\n    type: File\n    format: $(inputs.sequences.format)\n    secondaryFiles:\n     - .fai\n    outputBinding:\n      glob: $(inputs.sequences.basename)\n  sequences_index:\n    type: File\n    outputBinding:\n      glob: $(inputs.sequences.basename).fai\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'sequences', 'doc': 'Input FASTA file', 'format': 'http://edamontology.org/format_1929', 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'sequences_index', 'outputBinding': {'glob': '$(inputs.sequences.basename).fai'}, 'type': 'File'}, {'id': 'sequences_with_index', 'secondaryFiles': ['.fai'], 'outputBinding': {'glob': '$(inputs.sequences.basename)'}, 'format': '$(inputs.sequences.format)', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/samtools:1.14--hb421002_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'samtools', 'version': ['1.14'], 'specs': ['https://identifiers.org/biotools/samtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'faidx']",
    "cwl_arguments": "['$(inputs.sequences.basename)']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': ['$(inputs.sequences)']}]",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "samtools/samtools_fastq.cwl",
    "sha": "6b61868358e9b6162cd02dc9318cde7f9f96089c",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/samtools/samtools_fastq.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Bam to fastq conversion\n\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - $(inputs.bam_sorted)\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.14--hb421002_0\n  SoftwareRequirement:\n    packages:\n      samtools:\n        specs: [ https://identifiers.org/biotools/samtools ]\n        version: [ \"1.14\" ]\n\nbaseCommand: [\"samtools\", \"fastq\"]\n\ninputs:\n  bam_sorted:\n    doc: sorted bam input file\n    type: File\n    inputBinding:\n      position: 2\n  threads:\n    doc: \"Number of processors to use\"\n    type: int?\n    inputBinding:\n      position: 2\n      prefix: \"--threads\"\n\nstdout: |\n  ${\n    if (self){\n      var val = self.fastq;\n    } else {\n      var val = inputs.bam_sorted.nameroot;\n    }\n    return val + '.fastq'\n  }\n\noutputs:\n  fastq:\n    type: stdout\n      \n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam_sorted', 'doc': 'sorted bam input file', 'inputBinding': {'position': 2}, 'type': 'File'}, {'id': 'threads', 'doc': 'Number of processors to use', 'inputBinding': {'position': 2, 'prefix': '--threads'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'fastq', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/samtools:1.14--hb421002_0'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 20000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'samtools', 'version': ['1.14'], 'specs': ['https://identifiers.org/biotools/samtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'fastq']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': ['$(inputs.bam_sorted)']}, {'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Bam to fastq conversion\n",
    "cwl_stdout": "${\n  if (self){\n    var val = self.fastq;\n  } else {\n    var val = inputs.bam_sorted.nameroot;\n  }\n  return val + '.fastq'\n}\n",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "samtools/samtools_index.cwl",
    "sha": "6e6d2a743ac53b0ae4db3afe02f5691d5e7a9354",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/samtools/samtools_index.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Indexing BAM.\n\nrequirements:\n  InitialWorkDirRequirement:\n    listing: \n      - $(inputs.bam_sorted)\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.14--hb421002_0\n  SoftwareRequirement:\n    packages:\n      samtools:\n        specs: [ https://identifiers.org/biotools/samtools ]\n        version: [ \"1.14\" ]\n\nbaseCommand: [\"samtools\", \"index\"]\narguments:\n  - valueFrom: -b  # specifies that index is created in bai format\n    position: 1\n\ninputs:\n  bam_sorted:\n    doc: sorted bam input file\n    type: File\n    inputBinding:\n      position: 2\n\noutputs:\n  bam_sorted_indexed:\n    type: File\n    secondaryFiles: .bai\n    format: edam:format_2572  # BAM \n    outputBinding:\n      glob: $(inputs.bam_sorted.basename)\n      \n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam_sorted', 'doc': 'sorted bam input file', 'inputBinding': {'position': 2}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'bam_sorted_indexed', 'secondaryFiles': '.bai', 'outputBinding': {'glob': '$(inputs.bam_sorted.basename)'}, 'format': 'http://edamontology.org/format_2572', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/samtools:1.14--hb421002_0'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 20000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'samtools', 'version': ['1.14'], 'specs': ['https://identifiers.org/biotools/samtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'index']",
    "cwl_arguments": "[{'position': 1, 'valueFrom': '-b'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': ['$(inputs.bam_sorted)']}]",
    "cwl_doc": "Indexing BAM.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "samtools/samtools_merge.cwl",
    "sha": "96ba58bab9291287b83fcf027c2f357441b76567",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/samtools/samtools_merge.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Merge multiple BAM files.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 20000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.14--hb421002_0\n  SoftwareRequirement:\n    packages:\n      samtools:\n        specs: [ https://identifiers.org/biotools/samtools ]\n        version: [ \"1.14\" ]\n\nbaseCommand: [\"samtools\", \"merge\"]\n\ninputs:\n  - id: output_name\n    doc: name of merged bam file\n    type: string\n    inputBinding:\n      position: 1\n  - id: bams\n    doc: bam files to be merged\n    type:\n      type: array\n      items: File\n    inputBinding:\n      position: 2\n\noutputs:\n  - id: bam_merged\n    type: File\n    outputBinding:\n      glob: $(inputs.output_name)\n    \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'output_name', 'doc': 'name of merged bam file', 'inputBinding': {'position': 1}, 'type': 'string'}, {'id': 'bams', 'doc': 'bam files to be merged', 'inputBinding': {'position': 2}, 'type': {'items': 'File', 'type': 'array'}}]",
    "cwl_outputs": "[{'id': 'bam_merged', 'outputBinding': {'glob': '$(inputs.output_name)'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/samtools:1.14--hb421002_0'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 20000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'samtools', 'version': ['1.14'], 'specs': ['https://identifiers.org/biotools/samtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'merge']",
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": null,
    "cwl_doc": "Merge multiple BAM files.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "samtools/samtools_sort.cwl",
    "sha": "87c5d9cd6ca341a8378b73a988a7dd1513de7b47",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/samtools/samtools_sort.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.2\nclass: CommandLineTool\n\ndoc: Sort a bam file by read names.\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 4\n    ramMin: 15000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.14--hb421002_0\n  SoftwareRequirement:\n    packages:\n      samtools:\n        specs: [ https://identifiers.org/biotools/samtools ]\n        version: [ \"1.14\" ]\n\nbaseCommand: [\"samtools\", \"sort\"]\narguments:\n  - valueFrom: $(runtime.cores)\n    prefix: --threads  # a.k.a -@\n  - prefix: -m\n    valueFrom: ${ return(parseInt(runtime.ram/runtime.cores-100).toString() + \"M\") }\n    position: 1\n    # specifies the allowed maximal memory usage per thread before\n    # samtools start to outsource memory to temporary files\n  - prefix: -T\n    valueFrom: $(runtime.tmpdir)\n  - --no-PG  # don't put the filepaths in the metadata, makes the output more reproducible\n\ninputs:\n  unsorted_alignments:\n    doc: aligned reads to be checked in sam or bam format\n    type: File\n    format:\n      - edam:format_2572  # BAM\n      - edam:format_2573  # SAM\n    inputBinding:\n      position: 2\n  by_name:\n    doc: If true, will sort by name, otherwise will sort by genomic position\n    type: boolean\n    default: false\n    inputBinding:\n      position: 1\n      prefix: -n\n  force_format:\n    doc: If true, will force binary output (BAM)\n    type:\n      - 'null'\n      - type: enum\n        symbols: [ SAM, BAM, CRAM ]\n    inputBinding:\n      prefix: -O\n\nstdout: |\n  ${\n    var filename = inputs.unsorted_alignments.nameroot + \"_sorted.\";\n    if (inputs.force_format !== undefined) {\n      return filename + inputs.force_format.toLowerCase();\n    }\n    return filename + (inputs.unsorted_alignments.format == \"http://edamontology.org/format_2572\" ? \"bam\" : \"sam\");\n   }\n\noutputs:\n  sorted_alignments:\n    type: stdout\n    format: |\n      ${\n         if (inputs.force_format === undefined) {\n           return inputs.unsorted_alignments.format;\n         }\n         if (inputs.force_format == \"SAM\") {\n           return \"http://edamontology.org/format_2573\";\n         }\n         if (inputs.force_format == \"BAM\") {\n           return \"http://edamontology.org/format_2572\";\n         }\n         if (inputs.force_format == \"CRAM\") {\n           return \"http://edamontology.org/format_3462\";\n         }\n       }\n\n$namespaces:\n  edam: http://edamontology.org/ \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'by_name', 'doc': 'If true, will sort by name, otherwise will sort by genomic position', 'default': False, 'type': 'boolean', 'inputBinding': {'position': 1, 'prefix': '-n'}}, {'id': 'force_format', 'doc': 'If true, will force binary output (BAM)', 'type': ['null', {'name': '_:dcb6b268-1c92-4e2d-b2f3-80a883bb0e08', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#force_format/SAM', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#force_format/BAM', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#force_format/CRAM'], 'type': 'enum'}], 'inputBinding': {'prefix': '-O'}}, {'id': 'unsorted_alignments', 'doc': 'aligned reads to be checked in sam or bam format', 'format': ['http://edamontology.org/format_2572', 'http://edamontology.org/format_2573'], 'type': 'File', 'inputBinding': {'position': 2}}]",
    "cwl_outputs": "[{'id': 'sorted_alignments', 'format': '${\\n   if (inputs.force_format === undefined) {\\n     return inputs.unsorted_alignments.format;\\n   }\\n   if (inputs.force_format == \"SAM\") {\\n     return \"http://edamontology.org/format_2573\";\\n   }\\n   if (inputs.force_format == \"BAM\") {\\n     return \"http://edamontology.org/format_2572\";\\n   }\\n   if (inputs.force_format == \"CRAM\") {\\n     return \"http://edamontology.org/format_3462\";\\n   }\\n }\\n', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/samtools:1.14--hb421002_0'}, {'class': 'ResourceRequirement', 'coresMin': 4, 'ramMin': 15000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'samtools', 'version': ['1.14'], 'specs': ['https://identifiers.org/biotools/samtools']}]}]",
    "cwl_cwlVersion": "v1.2",
    "cwl_baseCommand": "['samtools', 'sort']",
    "cwl_arguments": "[{'prefix': '--threads', 'valueFrom': '$(runtime.cores)'}, {'position': 1, 'prefix': '-m', 'valueFrom': '${ return(parseInt(runtime.ram/runtime.cores-100).toString() + \"M\") }'}, {'prefix': '-T', 'valueFrom': '$(runtime.tmpdir)'}, '--no-PG']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Sort a bam file by read names.",
    "cwl_stdout": "${\n  var filename = inputs.unsorted_alignments.nameroot + \"_sorted.\";\n  if (inputs.force_format !== undefined) {\n    return filename + inputs.force_format.toLowerCase();\n  }\n  return filename + (inputs.unsorted_alignments.format == \"http://edamontology.org/format_2572\" ? \"bam\" : \"sam\");\n }\n",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "samtools/samtools_stats.cwl",
    "sha": "6ea271878469733f1daa1e99a0615e63541850b2",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/samtools/samtools_stats.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand: [samtools, stats]\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.14--hb421002_0\n  SoftwareRequirement:\n    packages:\n      samtools:\n        specs: [ https://identifiers.org/biotools/samtools ]\n        version: [ \"1.14\" ]\n\ninputs:\n  input_file:\n    type: File\n    format: \n      - edam:format_2572  # BAM\n      - edam:format_2573  # SAM\n      - edam:format_3462  # CRAM\n    inputBinding:\n      position: 100\n  coverage:\n    type:\n      - 'null'\n      - type: record\n        name: coverage_parameters\n        fields:\n          min_cov:\n            type: int\n          max_cov:\n            type: int\n          step_cov:\n            type: int\n    inputBinding:\n      prefix: --coverage\n    doc: \"Set coverage distribution to the specified range (MIN, MAX, STEP all given as integers) [1,1000,1]\"\n  remove_dups:\n    type: boolean?\n    doc: \"Exclude from statistics reads marked as duplicates\"\n    inputBinding:\n      prefix: --remove_dups\n\n  required_flag:\n    type:\n      - string\n      - int\n      - \"null\"\n    default: 0\n    doc: \" STR|INT Required flag, 0 for unset. See also `samtools flags` [0] \"\n    inputBinding:\n      prefix: -f\n\n  filtering_flag:\n    type:\n      - string\n      - int\n      - \"null\"\n    default: 0\n    doc: \"STR|INT Filtering flag, 0 for unset. See also `samtools flags` [0] \"\n    inputBinding:\n      prefix: -F\n\n  GC_depth:\n    type: float?\n    doc: \"the size of GC-depth bins (decreasing bin size increases memory requirement) [2e4] \"\n    inputBinding:\n      prefix: --GC-depth\n\n  max_insert_size:\n    type: int?\n    doc: \"Maximum insert size [8000]\"\n    inputBinding:\n      prefix: -i\n\n  listed_group:\n    type: string?\n    doc: \"Include only listed read group or sample name [] \"\n    inputBinding:\n      prefix: --id\n\n  read_length:\n    type: int?\n    doc: \"Include in the statistics only reads with the given read length [-1]\"\n    inputBinding:\n      prefix: -l\n\n  most_inserts:\n    type: float?\n    doc: \"Report only the main part of inserts [0.99] \"\n    inputBinding:\n      prefix: -m\n\n  split_prefix:\n    type: string?\n    doc:  \"A path or string prefix to prepend to filenames output when creating categorised statistics files with -S/--split. [input filename]\"\n    inputBinding:\n      prefix: -P\n\n  trim_quality:\n    type: int?\n    doc: \"The BWA trimming parameter [0] \"\n    inputBinding:\n      prefix: -q\n\n  ref_seq:\n    type: File?\n    doc: \"Reference sequence (required for GC-depth and mismatches-per-cycle calculation). [] \"\n    inputBinding:\n      prefix: -r\n\n  split:\n    type: string?\n    doc: \"In addition to the complete statistics, also output categorised statistics based on the tagged field TAG (e.g., use --split RG to split into read groups).    Categorised statistics are written to files named <prefix>_<value>.bamstat, where prefix is as given by --split-prefix (or the input filename by default) and value has been encountered as the specified tagged field's value in one or more alignment records. \"\n    inputBinding:\n      prefix: --split\n\n  target_regions:\n    type: File?\n    doc: \"Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive. []\"\n    inputBinding:\n      prefix: --target-regions\n  sparse:\n    type: boolean?\n    doc: \"Suppress outputting IS rows where there are no insertions.\"\n    inputBinding:\n      prefix: --sparse\n  remove_overlaps:\n    type: boolean?\n    doc: \"Remove overlaps of paired-end reads from coverage and base count computations. \"\n    inputBinding:\n      prefix: --remove-overlaps\n  cov_threshold:\n    type: int?\n    doc: \"Only bases with coverage above this value will be included in the target percentage computation [0] \"\n    inputBinding:\n      prefix: -g\n\narguments:\n  - prefix: --threads\n    valueFrom: $(runtime.cores)  \n    \n# -X\n#     If this option is set, it will allows user to specify customized index file location(s) if the data folder does not contain any index file. Example usage: samtools stats [options] -X /data_folder/data.bam /index_folder/data.bai chrM:1-10\n\noutputs:\n  stats:\n    type: File\n    outputBinding:\n      glob: $(inputs.input_file.nameroot).stats.txt\nstdout: $(inputs.input_file.nameroot).stats.txt\n\n$namespaces: { edam: http://edamontology.org/, iana: https://www.iana.org/assignments/media-types/ }\n$schemas:\n  - 'https://edamontology.org/EDAM_1.18.owl'\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'GC_depth', 'doc': 'the size of GC-depth bins (decreasing bin size increases memory requirement) [2e4] ', 'inputBinding': {'prefix': '--GC-depth'}, 'type': ['null', 'float']}, {'id': 'cov_threshold', 'doc': 'Only bases with coverage above this value will be included in the target percentage computation [0] ', 'inputBinding': {'prefix': '-g'}, 'type': ['null', 'int']}, {'id': 'coverage', 'doc': 'Set coverage distribution to the specified range (MIN, MAX, STEP all given as integers) [1,1000,1]', 'inputBinding': {'prefix': '--coverage'}, 'type': ['null', {'name': 'coverage_parameters', 'fields': [{'name': 'max_cov', 'type': 'int'}, {'name': 'min_cov', 'type': 'int'}, {'name': 'step_cov', 'type': 'int'}], 'type': 'record'}]}, {'id': 'filtering_flag', 'doc': 'STR|INT Filtering flag, 0 for unset. See also `samtools flags` [0] ', 'inputBinding': {'prefix': '-F'}, 'default': 0, 'type': ['string', 'int', 'null']}, {'id': 'input_file', 'format': ['http://edamontology.org/format_2572', 'http://edamontology.org/format_2573', 'http://edamontology.org/format_3462'], 'inputBinding': {'position': 100}, 'type': 'File'}, {'id': 'listed_group', 'doc': 'Include only listed read group or sample name [] ', 'inputBinding': {'prefix': '--id'}, 'type': ['null', 'string']}, {'id': 'max_insert_size', 'doc': 'Maximum insert size [8000]', 'inputBinding': {'prefix': '-i'}, 'type': ['null', 'int']}, {'id': 'most_inserts', 'doc': 'Report only the main part of inserts [0.99] ', 'inputBinding': {'prefix': '-m'}, 'type': ['null', 'float']}, {'id': 'read_length', 'doc': 'Include in the statistics only reads with the given read length [-1]', 'inputBinding': {'prefix': '-l'}, 'type': ['null', 'int']}, {'id': 'ref_seq', 'doc': 'Reference sequence (required for GC-depth and mismatches-per-cycle calculation). [] ', 'inputBinding': {'prefix': '-r'}, 'type': ['null', 'File']}, {'id': 'remove_dups', 'doc': 'Exclude from statistics reads marked as duplicates', 'inputBinding': {'prefix': '--remove_dups'}, 'type': ['null', 'boolean']}, {'id': 'remove_overlaps', 'doc': 'Remove overlaps of paired-end reads from coverage and base count computations. ', 'inputBinding': {'prefix': '--remove-overlaps'}, 'type': ['null', 'boolean']}, {'id': 'required_flag', 'doc': ' STR|INT Required flag, 0 for unset. See also `samtools flags` [0] ', 'inputBinding': {'prefix': '-f'}, 'default': 0, 'type': ['string', 'int', 'null']}, {'id': 'sparse', 'doc': 'Suppress outputting IS rows where there are no insertions.', 'inputBinding': {'prefix': '--sparse'}, 'type': ['null', 'boolean']}, {'id': 'split', 'doc': \"In addition to the complete statistics, also output categorised statistics based on the tagged field TAG (e.g., use --split RG to split into read groups).    Categorised statistics are written to files named <prefix>_<value>.bamstat, where prefix is as given by --split-prefix (or the input filename by default) and value has been encountered as the specified tagged field's value in one or more alignment records. \", 'inputBinding': {'prefix': '--split'}, 'type': ['null', 'string']}, {'id': 'split_prefix', 'doc': 'A path or string prefix to prepend to filenames output when creating categorised statistics files with -S/--split. [input filename]', 'inputBinding': {'prefix': '-P'}, 'type': ['null', 'string']}, {'id': 'target_regions', 'doc': 'Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive. []', 'inputBinding': {'prefix': '--target-regions'}, 'type': ['null', 'File']}, {'id': 'trim_quality', 'doc': 'The BWA trimming parameter [0] ', 'inputBinding': {'prefix': '-q'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'stats', 'outputBinding': {'glob': '$(inputs.input_file.nameroot).stats.txt'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/samtools:1.14--hb421002_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'samtools', 'version': ['1.14'], 'specs': ['https://identifiers.org/biotools/samtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'stats']",
    "cwl_arguments": "[{'prefix': '--threads', 'valueFrom': '$(runtime.cores)'}]",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": "$(inputs.input_file.nameroot).stats.txt",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "samtools/samtools_view_count_alignments.cwl",
    "sha": "49050963fb4670c6dc855a2a61fb71f319a10e30",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/samtools/samtools_view_count_alignments.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Count aligned reads in a BAM file. \n  For single end data\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.14--hb421002_0\n  SoftwareRequirement:\n    packages:\n      samtools:\n        specs: [ https://identifiers.org/biotools/samtools ]\n        version: [ \"1.14\" ]\n\nbaseCommand: [\"samtools\", \"view\"]\narguments:\n  - valueFrom: -c\n    position: 1\n    # count reads\n  - valueFrom: \"4\"\n    prefix: -F\n    position: 1\n    # exclude unmapped\n  # when paired end, \"-f 3\" is added to the command line\n  - valueFrom: |\n      ${\n        if ( inputs.is_paired_end ){\n           return \"-f\";\n        }\n        else {\n          return null;\n        }\n      }\n    position: 2\n  - valueFrom: |\n      ${\n        if ( inputs.is_paired_end ){\n           return \"3\";\n        }\n        else {\n          return null;\n        }\n      }\n    position: 3\nstdout: $(inputs.bam.nameroot + \"_aln_read_counts.txt\")\n\ninputs:\n  bam:\n    doc: reads to be checked in bam format\n    type: File\n    inputBinding:\n      position: 10\n  is_paired_end:\n    doc: if paired end, only properly paired reads pass\n    type: boolean\n    default: true\n  min_mapping_quality:\n    doc: Reads with a mapping quality below this will be excluded\n    type: int\n    default: 20\n    inputBinding:\n      position: 1\n      prefix: -q\n\noutputs:\n  aln_read_count_file:\n    type: stdout\n  aln_read_count:\n    type: long\n    outputBinding:\n      glob:  \"*_aln_read_counts.txt\"\n      loadContents: true\n      outputEval: $(parseInt(self[0].contents))\n  \n  \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam', 'doc': 'reads to be checked in bam format', 'inputBinding': {'position': 10}, 'type': 'File'}, {'id': 'is_paired_end', 'doc': 'if paired end, only properly paired reads pass', 'default': True, 'type': 'boolean'}, {'id': 'min_mapping_quality', 'doc': 'Reads with a mapping quality below this will be excluded', 'inputBinding': {'position': 1, 'prefix': '-q'}, 'default': 20, 'type': 'int'}]",
    "cwl_outputs": "[{'id': 'aln_read_count', 'outputBinding': {'glob': '*_aln_read_counts.txt', 'loadContents': True, 'outputEval': '$(parseInt(self[0].contents))'}, 'type': 'long'}, {'id': 'aln_read_count_file', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/samtools:1.14--hb421002_0'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 10000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'samtools', 'version': ['1.14'], 'specs': ['https://identifiers.org/biotools/samtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'view']",
    "cwl_arguments": "[{'position': 1, 'valueFrom': '-c'}, {'position': 1, 'prefix': '-F', 'valueFrom': '4'}, {'position': 2, 'valueFrom': '${\\n  if ( inputs.is_paired_end ){\\n     return \"-f\";\\n  }\\n  else {\\n    return null;\\n  }\\n}\\n'}, {'position': 3, 'valueFrom': '${\\n  if ( inputs.is_paired_end ){\\n     return \"3\";\\n  }\\n  else {\\n    return null;\\n  }\\n}\\n'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Count aligned reads in a BAM file. \nFor single end data\n",
    "cwl_stdout": "$(inputs.bam.nameroot + \"_aln_read_counts.txt\")",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "samtools/samtools_view_filter.cwl",
    "sha": "99ce0f04a5540477fc35f8bc28f303f2d8e9ed4e",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/samtools/samtools_view_filter.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.14--hb421002_0\n  SoftwareRequirement:\n    packages:\n      samtools:\n        specs: [ https://identifiers.org/biotools/samtools ]\n        version: [ \"1.14\" ]\n\ndoc: for single end data\n\nbaseCommand: [\"samtools\", \"view\"]\narguments:\n  - valueFrom: -c\n    position: 1\n    # count reads\n  - valueFrom: \"4\"\n    prefix: -F\n    position: 1\n    # exclude unmapped\n  # when paired end, \"-f 3\" is added to the command line\n  - valueFrom: |\n      ${\n        if ( inputs.is_paired_end ){\n           return \"-f\";\n        }\n        else {\n          return null;\n        }\n      }\n    position: 2\n  - valueFrom: |\n      ${\n        if ( inputs.is_paired_end ){\n           return \"3\";\n        }\n        else {\n          return null;\n        }\n      }\n    position: 3\nstdout: $(inputs.bam.nameroot)_filt.bam\n\ninputs:\n  bam:\n    doc: aligned reads to be checked in bam format\n    type: File\n    inputBinding:\n      position: 10\n  is_paired_end:\n    doc: if paired end, only properly paired reads pass\n    type: boolean\n    default: true\n  min_mapping_quality:\n    doc: Reads with a mapping quality below this will be excluded\n    type: int\n    default: 20\n    inputBinding:\n      position: 1\n      prefix: -q\n\noutputs:\n  bam_filtered:\n    type: stdout\n  \n  \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bam', 'doc': 'aligned reads to be checked in bam format', 'inputBinding': {'position': 10}, 'type': 'File'}, {'id': 'is_paired_end', 'doc': 'if paired end, only properly paired reads pass', 'default': True, 'type': 'boolean'}, {'id': 'min_mapping_quality', 'doc': 'Reads with a mapping quality below this will be excluded', 'inputBinding': {'position': 1, 'prefix': '-q'}, 'default': 20, 'type': 'int'}]",
    "cwl_outputs": "[{'id': 'bam_filtered', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/samtools:1.14--hb421002_0'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 10000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'samtools', 'version': ['1.14'], 'specs': ['https://identifiers.org/biotools/samtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'view']",
    "cwl_arguments": "[{'position': 1, 'valueFrom': '-c'}, {'position': 1, 'prefix': '-F', 'valueFrom': '4'}, {'position': 2, 'valueFrom': '${\\n  if ( inputs.is_paired_end ){\\n     return \"-f\";\\n  }\\n  else {\\n    return null;\\n  }\\n}\\n'}, {'position': 3, 'valueFrom': '${\\n  if ( inputs.is_paired_end ){\\n     return \"3\";\\n  }\\n  else {\\n    return null;\\n  }\\n}\\n'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "for single end data",
    "cwl_stdout": "$(inputs.bam.nameroot)_filt.bam",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "samtools/samtools_view_sam2bam.cwl",
    "sha": "eaab188f3e09f844f397cd2c8a459a0970683133",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/samtools/samtools_view_sam2bam.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Convert SAM to BAM.\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10000\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/samtools:1.14--hb421002_0\n  SoftwareRequirement:\n    packages:\n      samtools:\n        specs: [ https://identifiers.org/biotools/samtools ]\n        version: [ \"1.14\" ]\n\nbaseCommand: [\"samtools\", \"view\"]\n\narguments:\n  - valueFrom: -h\n    position: 1\n    # include the headers\n  - valueFrom: -b\n    position: 1\n    # output in bam format\n  - --no-PG  # but don't add our own PG header for more reproduciblity\n\nstdout: $(inputs.sam.nameroot).bam\n\ninputs:\n  sam:\n    doc: reads to be checked in sam format\n    type: File\n    format: edam:format_2573  # SAM\n    inputBinding:\n      position: 2\n\noutputs:\n  bam:\n    type: File\n    outputBinding:\n      glob: \"*.bam\"\n    format: edam:format_2572  # BAM\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl \n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'sam', 'doc': 'reads to be checked in sam format', 'format': 'http://edamontology.org/format_2573', 'inputBinding': {'position': 2}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'bam', 'outputBinding': {'glob': '*.bam'}, 'format': 'http://edamontology.org/format_2572', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/samtools:1.14--hb421002_0'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 10000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'samtools', 'version': ['1.14'], 'specs': ['https://identifiers.org/biotools/samtools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['samtools', 'view']",
    "cwl_arguments": "[{'position': 1, 'valueFrom': '-h'}, {'position': 1, 'valueFrom': '-b'}, '--no-PG']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": "Convert SAM to BAM.\n",
    "cwl_stdout": "$(inputs.sam.nameroot).bam",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "seqkit/seqkit_rmdup.cwl",
    "sha": "8ccc03022be18b1be8c18239bb4ac000011b7a1a",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/seqkit/seqkit_rmdup.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/seqkit:0.7.1--0\n  SoftwareRequirement:\n    packages:\n      seqkit:\n        specs: [ https://identifiers.org/biotools/seqkit ]\n        version: [ \"0.7.1\" ]\n  ResourceRequirement:\n    coresMin: 8\n    coresMax: 32\n    ramMin: $(7 * 1024)\n    outdirMin: |\n      ${\n        var sum = 0;\n        for (var i = 0; i < inputs.reads.length; i++) {\n          sum += inputs.reads[i].size;\n        }\n        return (sum/(1024*1024*1024)+1) + 20;\n      }\n\ninputs:\n  reads: File\n  ignore_case:\n    type: boolean?\n    inputBinding:\n      prefix: --ignore-case\n\noutputs:\n  reads_dedup:\n    type: File\n    outputBinding:\n      glob: $(inputs.reads.nameroot)_dedup.fasta\n  dups:\n    type: File?\n    outputBinding:\n      glob: dups.txt\n\nbaseCommand: [ seqkit, rmdup ]\n\narguments:\n - --by-seq\n - --threads=$(runtime.cores)\n - --dup-num-file\n - dups.txt\n - --out-file\n - $(inputs.reads.nameroot)_dedup.fasta\n - $(inputs.reads.path)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'ignore_case', 'inputBinding': {'prefix': '--ignore-case'}, 'type': ['null', 'boolean']}, {'id': 'reads', 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'dups', 'outputBinding': {'glob': 'dups.txt'}, 'type': ['null', 'File']}, {'id': 'reads_dedup', 'outputBinding': {'glob': '$(inputs.reads.nameroot)_dedup.fasta'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/seqkit:0.7.1--0'}, {'class': 'ResourceRequirement', 'coresMin': 8, 'coresMax': 32, 'ramMin': '$(7 * 1024)', 'outdirMin': '${\\n  var sum = 0;\\n  for (var i = 0; i < inputs.reads.length; i++) {\\n    sum += inputs.reads[i].size;\\n  }\\n  return (sum/(1024*1024*1024)+1) + 20;\\n}\\n'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'seqkit', 'version': ['0.7.1'], 'specs': ['https://identifiers.org/biotools/seqkit']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['seqkit', 'rmdup']",
    "cwl_arguments": "['--by-seq', '--threads=$(runtime.cores)', '--dup-num-file', 'dups.txt', '--out-file', '$(inputs.reads.nameroot)_dedup.fasta', '$(inputs.reads.path)']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "sirius/sirius.cwl",
    "sha": "96d60f0384b1323dadd1bdcb584b256e2dbac4dd",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/sirius/sirius.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\n$namespaces:\n  cwltool: http://commonwl.org/cwltool#\nhints:\n  \"cwltool:Secrets\":\n    secrets:\n      - sirius_user\n      - sirius_password\n\nrequirements:\n  DockerRequirement:\n    dockerPull: docker.io/zmahnoor/maw-sirius5:dev\n  InlineJavascriptRequirement: {}\n  ShellCommandRequirement: {}\n  EnvVarRequirement:\n    envDef:\n      SIRIUS_USER: $(inputs.sirius_user)\n      SIRIUS_PASSWORD: $(inputs.sirius_password)\n\ninputs:\n  sirius_user:\n    type: string\n  sirius_password:\n    type: string\n  spectrum:\n    type: File\n  profile:\n    type: string\n    default: \"orbitrap\"\n  candidates:\n    type: int\n    default: 30\n  ppm_max:\n    type: int\n    default: 5\n  ppm_max_ms2:\n    type: int\n    default: 15\n  database:\n    type: string\n    default: \"coconut\"\n  isotope:\n    type: boolean\n    default: False\n\narguments:\n    - sirius\n    - login\n    - --user-env\n    - SIRIUS_USER\n    - --password-env\n    - SIRIUS_PASSWORD\n    - shellQuote: False\n      valueFrom: \";\"\n    - sirius\n    - --input\n    - $(inputs.spectrum.path)\n    - --output\n    - $(inputs.spectrum.nameroot).json\n    - formula\n    - --profile\n    - $(inputs.profile)\n    - |\n      ${\n        if (inputs.isotope) {\n          return [\"--no-isotope-filter\",\n            \"--no-isotope-score\"];\n        } else {\n          return null;\n        }\n      }\n    - --candidates\n    - $(inputs.candidates)\n    - --ppm-max\n    - $(inputs.ppm_max)\n    - --ppm-max-ms2\n    - $(inputs.ppm_max_ms2)\n    - fingerprint\n    - structure\n    - --database\n    - $(inputs.database)\n    - compound-classes\n    - write-summaries\n    - --output\n    - $(inputs.spectrum.nameroot).json\n\noutputs:\n  results:\n    type: Directory\n    outputBinding:\n       glob: $(inputs.spectrum.nameroot).json\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'candidates', 'default': 30, 'type': 'int'}, {'id': 'database', 'default': 'coconut', 'type': 'string'}, {'id': 'isotope', 'default': False, 'type': 'boolean'}, {'id': 'ppm_max', 'default': 5, 'type': 'int'}, {'id': 'ppm_max_ms2', 'default': 15, 'type': 'int'}, {'id': 'profile', 'default': 'orbitrap', 'type': 'string'}, {'id': 'sirius_password', 'type': 'string'}, {'id': 'sirius_user', 'type': 'string'}, {'id': 'spectrum', 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'results', 'outputBinding': {'glob': '$(inputs.spectrum.nameroot).json'}, 'type': 'Directory'}]",
    "cwl_hints": "[{'secrets': ['sirius_user', 'sirius_password'], 'class': 'cwltool:Secrets'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": "['sirius', 'login', '--user-env', 'SIRIUS_USER', '--password-env', 'SIRIUS_PASSWORD', {'valueFrom': ';', 'shellQuote': False}, 'sirius', '--input', '$(inputs.spectrum.path)', '--output', '$(inputs.spectrum.nameroot).json', 'formula', '--profile', '$(inputs.profile)', '${\\n  if (inputs.isotope) {\\n    return [\"--no-isotope-filter\",\\n      \"--no-isotope-score\"];\\n  } else {\\n    return null;\\n  }\\n}\\n', '--candidates', '$(inputs.candidates)', '--ppm-max', '$(inputs.ppm_max)', '--ppm-max-ms2', '$(inputs.ppm_max_ms2)', 'fingerprint', 'structure', '--database', '$(inputs.database)', 'compound-classes', 'write-summaries', '--output', '$(inputs.spectrum.nameroot).json']",
    "cwl_$namespaces": "{'cwltool': 'http://commonwl.org/cwltool#'}",
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'DockerRequirement', 'dockerPull': 'docker.io/zmahnoor/maw-sirius5:dev'}, {'class': 'EnvVarRequirement', 'envDef': [{'envName': 'SIRIUS_PASSWORD', 'envValue': '$(inputs.sirius_password)'}, {'envName': 'SIRIUS_USER', 'envValue': '$(inputs.sirius_user)'}]}, {'class': 'InlineJavascriptRequirement'}, {'class': 'ShellCommandRequirement'}]",
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "snp-sites/snp-sites.cwl",
    "sha": "16d9cbc7114819e45d476439b9cd27e45a82b646",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/snp-sites/snp-sites.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n$namespaces:\n  edam: http://edamontology.org/\n  s: http://schema.org/\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\ninputs:\n  actg_only:\n    doc: only output columns containing exclusively ACTG\n    type: boolean?\n    inputBinding:\n      prefix: -c\n  monomorphic_sites:\n    doc: output monomorphic sites (suitable for BEAST)\n    type: boolean?\n    inputBinding:\n      prefix: -b\n  output_options:\n    type:\n    - type: record\n      name: output_fasta\n      fields:\n        output_fasta:\n          type: boolean\n          inputBinding:\n            prefix: -m\n    - type: record\n      name: output_phylip\n      fields:\n        output_phylip:\n          type: boolean\n          inputBinding:\n            prefix: -p\n    - type: record\n      name: output_vcf\n      fields:\n        output_vcf:\n          type: boolean\n          inputBinding:\n            prefix: -v\n    default:\n      output_fasta: true\n  output_pseudo_reference:\n    doc: output internal pseudo reference sequence\n    type: boolean?\n    inputBinding:\n      prefix: -r\n  sequences:\n    doc: FASTA multiple sequence alignment\n    type: File\n    format: edam:format_1929\n    inputBinding:\n      position: 100\n  site_count_only:\n    doc: only output count of constant sites (suitable for IQ-TREE -fconst)\n    type: boolean?\n    inputBinding:\n      prefix: -C\n\noutputs:\n  output_sequences:\n    type: stdout\n    format: |\n      ${\n        if (inputs.output_options.output_fasta) {\n          return 'http://edamontology.org/format_1929';\n        } else if (inputs.output_options.output_phylip) {\n          return 'http://edamontology.org/format_1997';\n        } else if (inputs.output_options.output_vcf) {\n          return 'http://edamontology.org/format_3016';\n        }\n      }\n    streamable: true\nstdout: |\n  ${\n    var name = inputs.sequences.nameroot;\n    if (inputs.output_options.output_fasta) {\n      name += '_snp-sites.fasta';\n    } else if (inputs.output_options.output_phylip) {\n      name += '_snp-sites.phylip';\n    } else if (inputs.output_options.output_vcf) {\n      name += '_snp-sites.vcf';\n    }\n    return name;\n  }\n\nbaseCommand: snp-sites\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/snp-sites:2.5.1--hed695b0_0\n  SoftwareRequirement:\n    packages:\n      snp-sites:\n        specs: [ https://anaconda.org/bioconda/snp-sites ]\n        version: [ \"2.5.1\" ]\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-http.rdf\n- https://edamontology.org/EDAM_1.18.owl\ns:author:\n- class: s:Person\n  s:email: mailto:pvh@sanbi.ac.za\n  s:identifier: https://orcid.org/0000-0001-6553-5274\n  s:name: Peter van Heusden\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'actg_only', 'doc': 'only output columns containing exclusively ACTG', 'inputBinding': {'prefix': '-c'}, 'type': ['null', 'boolean']}, {'id': 'monomorphic_sites', 'doc': 'output monomorphic sites (suitable for BEAST)', 'inputBinding': {'prefix': '-b'}, 'type': ['null', 'boolean']}, {'id': 'output_options', 'default': {'output_fasta': True}, 'type': [{'name': 'output_fasta', 'fields': [{'name': 'output_fasta', 'type': 'boolean', 'inputBinding': {'prefix': '-m'}}], 'type': 'record'}, {'name': 'output_phylip', 'fields': [{'name': 'output_phylip', 'type': 'boolean', 'inputBinding': {'prefix': '-p'}}], 'type': 'record'}, {'name': 'output_vcf', 'fields': [{'name': 'output_vcf', 'type': 'boolean', 'inputBinding': {'prefix': '-v'}}], 'type': 'record'}]}, {'id': 'output_pseudo_reference', 'doc': 'output internal pseudo reference sequence', 'inputBinding': {'prefix': '-r'}, 'type': ['null', 'boolean']}, {'id': 'sequences', 'doc': 'FASTA multiple sequence alignment', 'format': 'http://edamontology.org/format_1929', 'inputBinding': {'position': 100}, 'type': 'File'}, {'id': 'site_count_only', 'doc': 'only output count of constant sites (suitable for IQ-TREE -fconst)', 'inputBinding': {'prefix': '-C'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'output_sequences', 'streamable': True, 'format': \"${\\n  if (inputs.output_options.output_fasta) {\\n    return 'http://edamontology.org/format_1929';\\n  } else if (inputs.output_options.output_phylip) {\\n    return 'http://edamontology.org/format_1997';\\n  } else if (inputs.output_options.output_vcf) {\\n    return 'http://edamontology.org/format_3016';\\n  }\\n}\\n\", 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/snp-sites:2.5.1--hed695b0_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'snp-sites', 'version': ['2.5.1'], 'specs': ['https://anaconda.org/bioconda/snp-sites']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "snp-sites",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 's': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-http.rdf', 'https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": null,
    "cwl_stdout": "${\n  var name = inputs.sequences.nameroot;\n  if (inputs.output_options.output_fasta) {\n    name += '_snp-sites.fasta';\n  } else if (inputs.output_options.output_phylip) {\n    name += '_snp-sites.phylip';\n  } else if (inputs.output_options.output_vcf) {\n    name += '_snp-sites.vcf';\n  }\n  return name;\n}\n",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:email': 'mailto:pvh@sanbi.ac.za', 's:identifier': 'https://orcid.org/0000-0001-6553-5274', 's:name': 'Peter van Heusden'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "spades/spades.cwl",
    "sha": "09feef9ffda987f0cf3238867d47e4d898e98abc",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/spades/spades.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nbaseCommand:\n  - bash\n\ninputs:\n  libraries_metadata:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             orientation: string?\n             lib_type: string? \n    doc: |\n        reads library metadata\n        related to   libraries_fwd_rev and libraries_mono inputs\n        lib_index(id) must match\n  libraries_fwd_rev:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             fwd_reads: File?\n             rev_reads: File?\n    doc: |\n        reads file\n        orientation must be a value in  ff, fr, rf\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n  libraries_mono:\n    type:\n      type: array\n      items:\n          type: record\n          fields:\n             lib_index: int? \n             file_type: string?\n             reads: File?\n    doc: |\n        reads file\n        file_type value must be in : interleaved, merged, unpaired\n  pacbio_reads:\n    type: File[]?\n  nanopore_reads:\n    type: File[]?\n  sanger_reads:\n    type: File[]?\n  trusted_contigs:\n    type: File[]?\n  untrusted_contigs:\n    type: File[]?\n  auto_kmer_choice:\n    type:  boolean\n    default: true\n    doc: |\n        Automatically choose k-mer values.\n        K-mer choices can be chosen by SPAdes instead of being entered manually\n  kmers:\n    type:  string\n    default: \"21,33,55\"\n    doc: |\n        K-mers to use, separated by commas.\n        Comma-separated list of k-mer sizes to be used \n        (all values must be odd, less than 128, listed in ascending order,\n         and smaller than the read length). The default value is 21,33,55\n  cov_state:\n    type:\n     - \"null\"\n     -  type: enum\n        symbols:\n          - off\n          - value\n          - auto\n    doc: |\n        Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\n        when cov_state=value (User Specific) , cov_cutoff must be provided\n  cov_cutoff:\n    type:  float?\n    doc: |\n        coverage cutoff value (a positive float number )\n  iontorrent:\n    type:  boolean\n    default: false\n    doc: |\n        true if Libraries are IonTorrent reads.\n  sc:\n    type:  boolean\n    default: false\n    doc: |\n        This option is required for MDA. \n        true if single-cell data. \n  onlyassembler:\n    type: boolean\n    default: false\n    doc: |\n        Run only assembly if true\n        (without read error correction)\n  careful:\n    type: boolean\n    default: true\n    doc: |\n        Careful correction.\n        Tries to reduce number of mismatches and short indels. \n        Also runs MismatchCorrector, a post processing tool,\n        which uses BWA tool (comes with SPAdes).\n\noutputs:\n  out_contig_stats:\n    type: File\n    outputBinding:\n      glob: out_contig_stats.*\n    doc: \"contig stats, default column_names: name,length,coverage\"\n  out_scaffold_stats:\n    type: File\n    outputBinding:\n      glob: out_scaffold_stats.*\n    doc: \"scaffold stats, default column_names: name,length,coverage\"\n\n  out_contigs:\n    type: File\n    outputBinding:\n      glob: contigs.fasta\n    doc: \"contigs (fasta sequence)\"\n\n  out_scaffolds:\n    type: File\n    outputBinding:\n      glob: scaffolds.fasta\n    doc: \"scaffolds (fasta sequence)\"\n#  - id: all_script\n#    type:\n#      - type: array\n#        items: File\n#    outputBinding:\n#      glob: \"*.sh\"  \n#    doc: \"generated script to run spades. for learning purpose\" \n  all_log:\n    type:\n      - type: array\n        items: File\n    outputBinding:\n      glob: \"*.log\"  \n    doc: \"spades output log and warnings\" \n#  - id: out_log\n#    type: File\n#    outputBinding:\n#      glob: spades.log\n#    doc: \"spades output log\"\n  assembly_graph:\n    type: File\n    outputBinding:\n      glob: assembly_graph.fastg\n    doc: \"assembly graph\" \n  assembly_graph_with_scaffolds:\n    type: File\n    outputBinding:\n      glob: assembly_graph_with_scaffolds.gfa\n    doc: \"assembly graph with scaffolds\" \n      \narguments:\n  - spades_wrapper.sh\nrequirements:\n  - class: InitialWorkDirRequirement\n    listing:\n####################\n      - entryname: write_tsv.py\n        entry: |\n               #######input file here\n               #!/usr/bin/env python\n               import sys,re\n               search_str = r'^>(NODE|\\S+)_(\\d+)(?:_|\\s)length_(\\d+)_cov_(\\d+\\.*\\d*).*\\$'\n               replace_str = r'\\1_\\2\\t\\3\\t\\4'\n               cmd = re.compile(search_str)\n               sys.stdout.write('#name\\tlength\\tcoverage\\n')\n               for i,line in enumerate(sys.stdin):\n                  if cmd.match(line):\n                     sys.stdout.write(cmd.sub(replace_str,line))\n\n####################\n      - entryname: spades_wrapper.sh\n        entry: |\n               ####################spades launcher\n               #!/bin/bash\n               ## An example command looks like:\n               ## spades.py -k 21,33,55,77,99,127 --careful -1 Y.fastq.gz -2 X.fastq.gz -t 24 -o output \n               read -d '' MEMORY_GB << EOF\n               ${ \n                //compute memory limits\n                var mem=\"250\"\n                if(runtime.ram){\n                  var bt=runtime.ram * 1048576 //mebibytes to bytes               \n                  bt=bt*0.000000001 //bytes to Gigabytes \n                  mem=parseInt(bt)\n                }\n                return \"-\"+mem\n               }\n               EOF\n               #echo \"MEMORY_GB limit: \\$MEMORY_GB\"\n               read -d '' CORES << EOF\n               ${ \n                //compute core / slot\n                var cores=\"16\" \n                if(runtime.cores){\n                  cores=runtime.cores\n                }\n                return  cores\n               }\n               EOF\n               #echo \"CORES : \\$CORES\"\n               read -d '' SPADES_OPT << EOF\n               ${   \n                 var opt=\"\"\n                   if (inputs.sc==true){\n                    opt+=\" --sc \"\n                   }\n                   if (inputs.onlyassembler==true){\n                    opt+=\" --only-assembler \"\n                   }\n                   if (inputs.careful==true){\n                    opt+=\" --careful \"\n                   }\n                 return opt  \n               }\n               EOF\n\n\n               read -d '' CMD_BASE << EOF\n               spades.py -o . --disable-gzip-output  \n                 \\$SPADES_OPT \n                -t \\$CORES -m \\$MEMORY_GB\n               ${   \n                 var opt=\"\"\n                   if (inputs.auto_kmer_choice==false){\n                    opt+=\" -k \"+inputs.kmers \n                   }\n                 return opt  \n               }\n               ${\n                 var opt=\"\"\n                 if (inputs.cov_state==null || inputs.cov_state == \"auto\"){\n                      opt+=\" --cov-cutoff 'auto' \"\n                  }\n                 else if (inputs.cov_state == \"value\"){\n                      opt+=\" --cov-cutoff '\"+inputs.cov_cutoff+\"' \"\n                  }\n                 if (inputs.iontorrent==true ){\n                      opt+=\" --iontorrent \"\n                 } \n                 return opt  \n               }\n               EOF\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' CMD_READ1 << EOF\n               ${\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n                      if (lmeta.lib_type !=null && lmeta.lib_type == \"paired_end\"){\n                           prefix = 'pe'\n                       } \n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"mate_paired\"){\n                           prefix = 'mp'\n                       }\n                      else if (lmeta.lib_type !=null && lmeta.lib_type == \"nxmate_paired\"){\n                           prefix = 'nxmate'\n                       }                       \n                      else {\n                           prefix = 'hqmp'\n                       }\n                      var idx=lmeta.lib_index\n                      lib_prefix[idx]=prefix\n                      opt+=\" --\"+prefix+idx+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n\n               #########################>DEBUG\n\n               ##########################################\n               ##Sequence files from libraries\n               read -d '' ZZDEBUG << EOF\n               ${\n               //var opt=\"inputs.libraries_metadata.length:\"+inputs.libraries_metadata.length+\" \"              \n               //var str = JSON.stringify(inputs.libraries_metadata)\n               var opt=\"\"\n               var lib_prefix = {}\n               var lib_meta=inputs.libraries_metadata   \n               if (lib_meta!=null){\n                   opt+=\" not null \"\n                   for(var j=0; j<lib_meta.length;j++){\n                      var prefix=\"\"\n                      var lmeta=lib_meta[j]\n \n                      opt+=\" !!-AA-\"+lmeta.lib_index+\"-\"+lmeta.orientation+\" \"\n                  } \n                }  \n               var libraries = []\n               if(inputs.libraries_fwd_rev!=null){ \n                  for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\n                     var lib=inputs.libraries_fwd_rev[i] \n                     lib.file_type=\"separate\"\n                     libraries[i] = lib\n                  }\n                } \n               if(inputs.libraries_mono!=null){\n                  for (var i = 0; i < inputs.libraries_mono.length ; i++) {\n                    var ei= libraries.length\n                    libraries[ei] = inputs.libraries_mono[i]\n                  }\n               }  \n               for(var j=0; j<libraries.length;j++){\n                 var lib=libraries[j]\n                 var idx=lib.lib_index  \n                 var prefix=lib_prefix[idx]\n                 if(lib.file_type!=null){\n                    if ( lib.file_type == \"separate\"){\n                      opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\n                      opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\n                    }else{\n                      var suffix\n                      if ( lib.file_type == \"interleaved\"){\n                        suffix=\"12\"\n                      }\n                      if ( lib.file_type == \"merged\"){\n                        suffix=\"m\"\n                      }\n                      if ( lib.file_type == \"unpaired\"){\n                        suffix=\"s\"\n                      }\n                      opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\n                    }\n                  }\n                }  \n                 return opt  \n               }\n               EOF\n               ##########################################\n\n\n               #########################<DEBUG\n\n\n\n\n\n\n\n\n\n\n               read -d '' CMD_READ2 << EOF\n               ${\n                 var opt=\"\"\n                 if (inputs.pacbio_reads!=null){\n                   for(var i=0; i<inputs.pacbio_reads.length;i++){\n                      var read=inputs.pacbio_reads[i]\n                      opt+=\" --pacbio fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.nanopore_reads!=null){\n                   for(var i=0; i<inputs.nanopore_reads.length;i++){\n                      var read=inputs.nanopore_reads[i]\n                      opt+=\" --nanopore fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.sanger_reads!=null){\n                   for(var i=0; i<inputs.sanger_reads.length;i++){\n                      var read=inputs.sanger_reads[i]\n                      opt+=\" --sanger fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.trusted_contigs!=null){\n                   for(var i=0; i<inputs.trusted_contigs.length;i++){\n                      var read=inputs.trusted_contigs[i]\n                      opt+=\" --trusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 if (inputs.untrusted_contigs!=null){\n                   for(var i=0; i<inputs.untrusted_contigs.length;i++){\n                      var read=inputs.untrusted_contigs[i]\n                      opt+=\" --untrusted-contigs fastq:\"+read.path+\" \"\n                   }\n                  }\n                 return opt  \n               }\n               EOF\n               ##########################################\n               read -d '' CMD_POST << EOF\n                 && python write_tsv.py < contigs.fasta > out_contig_stats.tab\n                 && python write_tsv.py < scaffolds.fasta > out_scaffold_stats.tab\n               EOF\n               ##########################################   \n               # echo \"CMD_BASE : \\$CMD_BASE\"  > zz.txt   \\\\\n               #        && echo \"CMD_READ1 : \\$CMD_READ1\"  >> zz.txt   \\\\\n               #        && echo \"CMD_READ2 : \\$CMD_READ2\"  >> zz.txt   \\\\\n               #        && echo \"CMD_POST : \\$CMD_POST\"   >> zz.txt\n               COMMAND=\"\\$CMD_BASE \\$CMD_READ1 \\$CMD_READ2 \\$CMD_POST\"\n               COMMAND=\\$(echo $COMMAND|tr -d '\\\\n')\n               echo \"\\$COMMAND\"  > run_spades.sh\n               bash  ./run_spades.sh\n\n \n  - class: InlineJavascriptRequirement\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/spades:3.13.0--0\n  SoftwareRequirement:\n    packages:\n      spades:\n        specs: [ https://identifiers.org/biotools/spades ]\n        version: [ \"3.13.0\" ]\n  \ndoc: |\n  example workflow for js wrapper generation\n  see  https://github.com/rrwick/Unicycler\n  outputs : all genretated files\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'auto_kmer_choice', 'doc': 'Automatically choose k-mer values.\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n', 'default': True, 'type': 'boolean'}, {'id': 'careful', 'doc': 'Careful correction.\\nTries to reduce number of mismatches and short indels. \\nAlso runs MismatchCorrector, a post processing tool,\\nwhich uses BWA tool (comes with SPAdes).\\n', 'default': True, 'type': 'boolean'}, {'id': 'cov_cutoff', 'doc': 'coverage cutoff value (a positive float number )\\n', 'type': ['null', 'float']}, {'id': 'cov_state', 'doc': \"Coverage cutoff ( 'auto', or 'off', or 'value'). auto if null\\nwhen cov_state=value (User Specific) , cov_cutoff must be provided\\n\", 'type': ['null', {'name': '_:5759b4fb-2518-466c-86d3-9da70f41f1f8', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#cov_state/off', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#cov_state/value', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#cov_state/auto'], 'type': 'enum'}]}, {'id': 'iontorrent', 'doc': 'true if Libraries are IonTorrent reads.\\n', 'default': False, 'type': 'boolean'}, {'id': 'kmers', 'doc': 'K-mers to use, separated by commas.\\nComma-separated list of k-mer sizes to be used \\n(all values must be odd, less than 128, listed in ascending order,\\n and smaller than the read length). The default value is 21,33,55\\n', 'default': '21,33,55', 'type': 'string'}, {'id': 'libraries_fwd_rev', 'doc': 'reads file\\norientation must be a value in  ff, fr, rf\\nK-mer choices can be chosen by SPAdes instead of being entered manually\\n', 'type': {'items': {'name': '_:d6f81425-0732-4858-9b77-adaad98ed10c', 'fields': [{'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#libraries_fwd_rev/fwd_reads', 'type': ['null', 'File']}, {'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#libraries_fwd_rev/lib_index', 'type': ['null', 'int']}, {'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#libraries_fwd_rev/rev_reads', 'type': ['null', 'File']}], 'type': 'record'}, 'type': 'array'}}, {'id': 'libraries_metadata', 'doc': 'reads library metadata\\nrelated to   libraries_fwd_rev and libraries_mono inputs\\nlib_index(id) must match\\n', 'type': {'items': {'name': '_:99cb0b80-abaf-4b50-92e5-cd4724b84f3b', 'fields': [{'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#libraries_metadata/lib_index', 'type': ['null', 'int']}, {'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#libraries_metadata/lib_type', 'type': ['null', 'string']}, {'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#libraries_metadata/orientation', 'type': ['null', 'string']}], 'type': 'record'}, 'type': 'array'}}, {'id': 'libraries_mono', 'doc': 'reads file\\nfile_type value must be in : interleaved, merged, unpaired\\n', 'type': {'items': {'name': '_:8004d8a2-6d2e-449b-a97a-454abc5cd911', 'fields': [{'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#libraries_mono/file_type', 'type': ['null', 'string']}, {'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#libraries_mono/lib_index', 'type': ['null', 'int']}, {'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#libraries_mono/reads', 'type': ['null', 'File']}], 'type': 'record'}, 'type': 'array'}}, {'id': 'nanopore_reads', 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'onlyassembler', 'doc': 'Run only assembly if true\\n(without read error correction)\\n', 'default': False, 'type': 'boolean'}, {'id': 'pacbio_reads', 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'sanger_reads', 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'sc', 'doc': 'This option is required for MDA. \\ntrue if single-cell data. \\n', 'default': False, 'type': 'boolean'}, {'id': 'trusted_contigs', 'type': ['null', {'items': 'File', 'type': 'array'}]}, {'id': 'untrusted_contigs', 'type': ['null', {'items': 'File', 'type': 'array'}]}]",
    "cwl_outputs": "[{'id': 'all_log', 'doc': 'spades output log and warnings', 'outputBinding': {'glob': '*.log'}, 'type': [{'items': 'File', 'type': 'array'}]}, {'id': 'assembly_graph', 'doc': 'assembly graph', 'outputBinding': {'glob': 'assembly_graph.fastg'}, 'type': 'File'}, {'id': 'assembly_graph_with_scaffolds', 'doc': 'assembly graph with scaffolds', 'outputBinding': {'glob': 'assembly_graph_with_scaffolds.gfa'}, 'type': 'File'}, {'id': 'out_contig_stats', 'doc': 'contig stats, default column_names: name,length,coverage', 'outputBinding': {'glob': 'out_contig_stats.*'}, 'type': 'File'}, {'id': 'out_contigs', 'doc': 'contigs (fasta sequence)', 'outputBinding': {'glob': 'contigs.fasta'}, 'type': 'File'}, {'id': 'out_scaffold_stats', 'doc': 'scaffold stats, default column_names: name,length,coverage', 'outputBinding': {'glob': 'out_scaffold_stats.*'}, 'type': 'File'}, {'id': 'out_scaffolds', 'doc': 'scaffolds (fasta sequence)', 'outputBinding': {'glob': 'scaffolds.fasta'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/spades:3.13.0--0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'spades', 'version': ['3.13.0'], 'specs': ['https://identifiers.org/biotools/spades']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash']",
    "cwl_arguments": "['spades_wrapper.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': [{'entryname': 'write_tsv.py', 'entry': \"#######input file here\\n#!/usr/bin/env python\\nimport sys,re\\nsearch_str = r'^>(NODE|\\\\S+)_(\\\\d+)(?:_|\\\\s)length_(\\\\d+)_cov_(\\\\d+\\\\.*\\\\d*).*\\\\$'\\nreplace_str = r'\\\\1_\\\\2\\\\t\\\\3\\\\t\\\\4'\\ncmd = re.compile(search_str)\\nsys.stdout.write('#name\\\\tlength\\\\tcoverage\\\\n')\\nfor i,line in enumerate(sys.stdin):\\n   if cmd.match(line):\\n      sys.stdout.write(cmd.sub(replace_str,line))\\n\"}, {'entryname': 'spades_wrapper.sh', 'entry': '####################spades launcher\\n#!/bin/bash\\n## An example command looks like:\\n## spades.py -k 21,33,55,77,99,127 --careful -1 Y.fastq.gz -2 X.fastq.gz -t 24 -o output \\nread -d \\'\\' MEMORY_GB << EOF\\n${ \\n //compute memory limits\\n var mem=\"250\"\\n if(runtime.ram){\\n   var bt=runtime.ram * 1048576 //mebibytes to bytes               \\n   bt=bt*0.000000001 //bytes to Gigabytes \\n   mem=parseInt(bt)\\n }\\n return \"-\"+mem\\n}\\nEOF\\n#echo \"MEMORY_GB limit: \\\\$MEMORY_GB\"\\nread -d \\'\\' CORES << EOF\\n${ \\n //compute core / slot\\n var cores=\"16\" \\n if(runtime.cores){\\n   cores=runtime.cores\\n }\\n return  cores\\n}\\nEOF\\n#echo \"CORES : \\\\$CORES\"\\nread -d \\'\\' SPADES_OPT << EOF\\n${   \\n  var opt=\"\"\\n    if (inputs.sc==true){\\n     opt+=\" --sc \"\\n    }\\n    if (inputs.onlyassembler==true){\\n     opt+=\" --only-assembler \"\\n    }\\n    if (inputs.careful==true){\\n     opt+=\" --careful \"\\n    }\\n  return opt  \\n}\\nEOF\\n\\n\\nread -d \\'\\' CMD_BASE << EOF\\nspades.py -o . --disable-gzip-output  \\n  \\\\$SPADES_OPT \\n -t \\\\$CORES -m \\\\$MEMORY_GB\\n${   \\n  var opt=\"\"\\n    if (inputs.auto_kmer_choice==false){\\n     opt+=\" -k \"+inputs.kmers \\n    }\\n  return opt  \\n}\\n${\\n  var opt=\"\"\\n  if (inputs.cov_state==null || inputs.cov_state == \"auto\"){\\n       opt+=\" --cov-cutoff \\'auto\\' \"\\n   }\\n  else if (inputs.cov_state == \"value\"){\\n       opt+=\" --cov-cutoff \\'\"+inputs.cov_cutoff+\"\\' \"\\n   }\\n  if (inputs.iontorrent==true ){\\n       opt+=\" --iontorrent \"\\n  } \\n  return opt  \\n}\\nEOF\\n##########################################\\n##Sequence files from libraries\\nread -d \\'\\' CMD_READ1 << EOF\\n${\\nvar opt=\"\"\\nvar lib_prefix = {}\\nvar lib_meta=inputs.libraries_metadata   \\nif (lib_meta!=null){\\n    for(var j=0; j<lib_meta.length;j++){\\n       var prefix=\"\"\\n       var lmeta=lib_meta[j]\\n       if (lmeta.lib_type !=null && lmeta.lib_type == \"paired_end\"){\\n            prefix = \\'pe\\'\\n        } \\n       else if (lmeta.lib_type !=null && lmeta.lib_type == \"mate_paired\"){\\n            prefix = \\'mp\\'\\n        }\\n       else if (lmeta.lib_type !=null && lmeta.lib_type == \"nxmate_paired\"){\\n            prefix = \\'nxmate\\'\\n        }                       \\n       else {\\n            prefix = \\'hqmp\\'\\n        }\\n       var idx=lmeta.lib_index\\n       lib_prefix[idx]=prefix\\n       opt+=\" --\"+prefix+idx+\"-\"+lmeta.orientation+\" \"\\n   } \\n }  \\nvar libraries = []\\nif(inputs.libraries_fwd_rev!=null){ \\n   for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\\n      var lib=inputs.libraries_fwd_rev[i] \\n      lib.file_type=\"separate\"\\n      libraries[i] = lib\\n   }\\n } \\nif(inputs.libraries_mono!=null){\\n   for (var i = 0; i < inputs.libraries_mono.length ; i++) {\\n     var ei= libraries.length\\n     libraries[ei] = inputs.libraries_mono[i]\\n   }\\n}  \\nfor(var j=0; j<libraries.length;j++){\\n  var lib=libraries[j]\\n  var idx=lib.lib_index  \\n  var prefix=lib_prefix[idx]\\n  if(lib.file_type!=null){\\n     if ( lib.file_type == \"separate\"){\\n       opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\\n       opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\\n     }else{\\n       var suffix\\n       if ( lib.file_type == \"interleaved\"){\\n         suffix=\"12\"\\n       }\\n       if ( lib.file_type == \"merged\"){\\n         suffix=\"m\"\\n       }\\n       if ( lib.file_type == \"unpaired\"){\\n         suffix=\"s\"\\n       }\\n       opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\\n     }\\n   }\\n }  \\n  return opt  \\n}\\nEOF\\n##########################################\\n\\n\\n\\n#########################>DEBUG\\n\\n##########################################\\n##Sequence files from libraries\\nread -d \\'\\' ZZDEBUG << EOF\\n${\\n//var opt=\"inputs.libraries_metadata.length:\"+inputs.libraries_metadata.length+\" \"              \\n//var str = JSON.stringify(inputs.libraries_metadata)\\nvar opt=\"\"\\nvar lib_prefix = {}\\nvar lib_meta=inputs.libraries_metadata   \\nif (lib_meta!=null){\\n    opt+=\" not null \"\\n    for(var j=0; j<lib_meta.length;j++){\\n       var prefix=\"\"\\n       var lmeta=lib_meta[j]\\n\\n       opt+=\" !!-AA-\"+lmeta.lib_index+\"-\"+lmeta.orientation+\" \"\\n   } \\n }  \\nvar libraries = []\\nif(inputs.libraries_fwd_rev!=null){ \\n   for (var i = 0; i < inputs.libraries_fwd_rev.length ; i++) {\\n      var lib=inputs.libraries_fwd_rev[i] \\n      lib.file_type=\"separate\"\\n      libraries[i] = lib\\n   }\\n } \\nif(inputs.libraries_mono!=null){\\n   for (var i = 0; i < inputs.libraries_mono.length ; i++) {\\n     var ei= libraries.length\\n     libraries[ei] = inputs.libraries_mono[i]\\n   }\\n}  \\nfor(var j=0; j<libraries.length;j++){\\n  var lib=libraries[j]\\n  var idx=lib.lib_index  \\n  var prefix=lib_prefix[idx]\\n  if(lib.file_type!=null){\\n     if ( lib.file_type == \"separate\"){\\n       opt+=\" --\"+prefix+idx+\"-1 \"+\"fastq:\"+lib.fwd_reads.path+\" \"\\n       opt+=\" --\"+prefix+idx+\"-2 \"+\"fastq:\"+lib.rev_reads.path+\" \"\\n     }else{\\n       var suffix\\n       if ( lib.file_type == \"interleaved\"){\\n         suffix=\"12\"\\n       }\\n       if ( lib.file_type == \"merged\"){\\n         suffix=\"m\"\\n       }\\n       if ( lib.file_type == \"unpaired\"){\\n         suffix=\"s\"\\n       }\\n       opt+=\" --\"+prefix+idx+\"-\"+suffix+\" \"+\"fastq:\"+lib.reads.path+\" \"\\n     }\\n   }\\n }  \\n  return opt  \\n}\\nEOF\\n##########################################\\n\\n\\n#########################<DEBUG\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nread -d \\'\\' CMD_READ2 << EOF\\n${\\n  var opt=\"\"\\n  if (inputs.pacbio_reads!=null){\\n    for(var i=0; i<inputs.pacbio_reads.length;i++){\\n       var read=inputs.pacbio_reads[i]\\n       opt+=\" --pacbio fastq:\"+read.path+\" \"\\n    }\\n   }\\n  if (inputs.nanopore_reads!=null){\\n    for(var i=0; i<inputs.nanopore_reads.length;i++){\\n       var read=inputs.nanopore_reads[i]\\n       opt+=\" --nanopore fastq:\"+read.path+\" \"\\n    }\\n   }\\n  if (inputs.sanger_reads!=null){\\n    for(var i=0; i<inputs.sanger_reads.length;i++){\\n       var read=inputs.sanger_reads[i]\\n       opt+=\" --sanger fastq:\"+read.path+\" \"\\n    }\\n   }\\n  if (inputs.trusted_contigs!=null){\\n    for(var i=0; i<inputs.trusted_contigs.length;i++){\\n       var read=inputs.trusted_contigs[i]\\n       opt+=\" --trusted-contigs fastq:\"+read.path+\" \"\\n    }\\n   }\\n  if (inputs.untrusted_contigs!=null){\\n    for(var i=0; i<inputs.untrusted_contigs.length;i++){\\n       var read=inputs.untrusted_contigs[i]\\n       opt+=\" --untrusted-contigs fastq:\"+read.path+\" \"\\n    }\\n   }\\n  return opt  \\n}\\nEOF\\n##########################################\\nread -d \\'\\' CMD_POST << EOF\\n  && python write_tsv.py < contigs.fasta > out_contig_stats.tab\\n  && python write_tsv.py < scaffolds.fasta > out_scaffold_stats.tab\\nEOF\\n##########################################   \\n# echo \"CMD_BASE : \\\\$CMD_BASE\"  > zz.txt   \\\\\\\\\\n#        && echo \"CMD_READ1 : \\\\$CMD_READ1\"  >> zz.txt   \\\\\\\\\\n#        && echo \"CMD_READ2 : \\\\$CMD_READ2\"  >> zz.txt   \\\\\\\\\\n#        && echo \"CMD_POST : \\\\$CMD_POST\"   >> zz.txt\\nCOMMAND=\"\\\\$CMD_BASE \\\\$CMD_READ1 \\\\$CMD_READ2 \\\\$CMD_POST\"\\nCOMMAND=\\\\$(echo $COMMAND|tr -d \\'\\\\\\\\n\\')\\necho \"\\\\$COMMAND\"  > run_spades.sh\\nbash  ./run_spades.sh\\n'}]}, {'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "example workflow for js wrapper generation\nsee  https://github.com/rrwick/Unicycler\noutputs : all genretated files\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "sratoolkit/fastq_dump.cwl",
    "sha": "5d7d60b0f155069ae95a5e25f8ed7b808445f2db",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/sratoolkit/fastq_dump.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/sratoolkit:v2.8.2-1\n  SoftwareRequirement:\n    packages:\n      sra-tools:\n        specs: [ https://identifiers.org/biotools/sra-tools ]\n        version: [ \"2.8.2\" ]\n\ninputs:\n\n  sra_file:\n    type: File\n    inputBinding:\n      position: 60\n    doc: |\n      Input file\n\n  split_spot:\n    type: boolean?\n    inputBinding:\n      position: 2\n      prefix: \"--split-spot\"\n    doc: |\n      Split spots into individual reads\n\n  min_spot_id:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: \"--minSpotId\"\n    doc: |\n      Minimum spot id\n\n  max_spot_id:\n    type: string?\n    inputBinding:\n      position: 4\n      prefix: \"--maxSpotId\"\n    doc: |\n      Maximum spot id\n\n  clip:\n    type: boolean?\n    inputBinding:\n      position: 6\n      prefix: \"--clip\"\n    doc: |\n      Clip adapter sequences\n\n  min_read_len:\n    type: int?\n    inputBinding:\n      position: 7\n      prefix: \"--minReadLen\"\n    doc: |\n      Filter by sequence length >= <len>\n\n  qual_filter:\n    type: boolean?\n    inputBinding:\n      position: 9\n      prefix: \"--qual-filter\"\n    doc: |\n      Filter used in early 1000 Genomes data: no sequences starting or ending with >= 10N\n\n  qual_filter_1:\n    type: boolean?\n    inputBinding:\n      position: 10\n      prefix: \"--qual-filter-1\"\n    doc: |\n      Filter used in current 1000 Genomes data\n\n  aligned:\n    type: boolean?\n    inputBinding:\n      position: 11\n      prefix: \"--aligned\"\n    doc: |\n      Dump only aligned sequences\n\n  unaligned:\n    type: boolean?\n    inputBinding:\n      position: 12\n      prefix: \"--unaligned\"\n    doc: |\n      Dump only unaligned sequences\n\n  aligned_region:\n    type: string?\n    inputBinding:\n      position: 13\n      prefix: \"--aligned-region\"\n    doc: |\n      Filter by position on genome.\n      Name can either be accession.version\n      (ex:NC_000001.10) or file specific name\n      (ex:\"chr1\" or \"1\"). \"from\" and \"to\" are 1-based coordinates\n\n  matepair_distance:\n    type:\n      - \"null\"\n      - type: enum\n        name: \"distance\"\n        symbols: [\"from-to\",\"unknown\"]\n    inputBinding:\n      position: 14\n      prefix: \"--matepair-distance\"\n    doc: |\n      Filter by distance beiween matepairs.\n      Use \"unknown\" to find matepairs split\n      between the references. Use from-to to limit\n      matepair distance on the same reference\n\n  skip_technical:\n    type: boolean?\n    inputBinding:\n      position: 15\n      prefix: \"--skip-technical\"\n    doc: |\n      Dump only biological reads\n\n  split_files:\n    type: boolean?\n    inputBinding:\n      position: 20\n      prefix: \"--split-files\"\n    doc: |\n      Dump each read into separate file.\n      Files will receive suffix corresponding to read number\n\n  split_3:\n    type: boolean?\n    inputBinding:\n      position: 21\n      prefix: \"--split-3\"\n    doc: |\n      Legacy 3-file splitting for mate-pairs:\n      First biological reads satisfying dumping\n      conditions are placed in files *_1.fastq and\n      *_2.fastq If only one biological read is\n      present it is placed in *.fastq Biological\n      reads and above are ignored.\n\n  dumpcs:\n    type: string?\n    inputBinding:\n      position: 25\n      prefix: \"--dumpcs\"\n    doc: |\n      Formats sequence using color space (default\n      for SOLiD),\"cskey\" may be specified for\n      translation\n\n  dumpbase:\n    type: boolean?\n    inputBinding:\n      position: 26\n      prefix: \"--dumpbase\"\n    doc: |\n      Formats sequence using base space (default\n      for other than SOLiD).\n\n  offset:\n    type: int?\n    inputBinding:\n      position: 27\n      prefix: \"--offset\"\n    doc: |\n      Offset to use for quality conversion, default is 33\n\n  fasta:\n    type: int?\n    inputBinding:\n      position: 28\n      prefix: \"--fasta\"\n    doc: |\n      FASTA only, no qualities, optional line\n      wrap width (set to zero for no wrapping)\n\n  suppress_qual_for_cskey:\n    type: boolean?\n    inputBinding:\n      position: 29\n      prefix: \"--suppress-qual-for-cskey\"\n    doc: |\n      supress quality-value for cskey\n\n  origfmt:\n    type: boolean?\n    inputBinding:\n      position: 30\n      prefix: \"--origfmt\"\n    doc: |\n      Defline contains only original sequence name\n\n  readids:\n    type: boolean?\n    inputBinding:\n      position: 31\n      prefix: \"--readids\"\n    doc: |\n      Append read id after spot id as 'accession.spot.readid' on defline\n\n  helicos:\n    type: boolean?\n    inputBinding:\n      position: 32\n      prefix: \"--helicos\"\n    doc: |\n      Helicos style defline\n\n  defline_seq:\n    type: string?\n    inputBinding:\n      position: 33\n      prefix: \"--defline-seq\"\n    doc: |\n      Defline format specification for sequence.\n\n  defline_qual:\n    type: string?\n    inputBinding:\n      position: 34\n      prefix: \"--defline-qual\"\n    doc: |\n      Defline format specification for quality.\n      <fmt> is string of characters and/or\n      variables. The variables can be one of: $ac\n      - accession, $si spot id, $sn spot\n      name, $sg spot group (barcode), $sl spot\n      length in bases, $ri read number, $rn\n      read name, $rl read length in bases. '[]'\n      could be used for an optional output: if\n      all vars in [] yield empty values whole\n      group is not printed. Empty value is empty\n      string or for numeric variables. Ex:\n      @$sn[_$rn]/$ri '_$rn' is omitted if name\n      is empty\n\n  disable_multithreading:\n    type: boolean?\n    inputBinding:\n      position: 35\n      prefix: \"--disable-multithreading\"\n    doc: |\n      disable multithreading\n\noutputs:\n  fastq_file_1:\n    type: File\n    format: edam:format_1931 # FASTQ\n    outputBinding:\n      glob:\n        - $(inputs.sra_file.nameroot).fastq\n        - $(inputs.sra_file.nameroot)_1.fastq\n\n  fastq_file_2:\n    type: File?\n    format: edam:format_1931 # FASTQ\n    outputBinding:\n      glob: $(inputs.sra_file.nameroot)_2.fastq\n\n  all_fastq_files:\n    type: File[]\n    format: edam:format_1931 # FASTQ\n    outputBinding:\n      glob: $(inputs.sra_file.nameroot)*.fastq\n\nbaseCommand: [fastq-dump]\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-https.rdf\n  - https://edamontology.org/EDAM_1.18.owl\n\ns:name: \"fastq_dump\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs fastq-dump from NCBI SRA toolkit\n  Supports only file inputs.\n  Output file names are formed on the base of `sra_file` input basename.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'aligned', 'doc': 'Dump only aligned sequences\\n', 'inputBinding': {'position': 11, 'prefix': '--aligned'}, 'type': ['null', 'boolean']}, {'id': 'aligned_region', 'doc': 'Filter by position on genome.\\nName can either be accession.version\\n(ex:NC_000001.10) or file specific name\\n(ex:\"chr1\" or \"1\"). \"from\" and \"to\" are 1-based coordinates\\n', 'inputBinding': {'position': 13, 'prefix': '--aligned-region'}, 'type': ['null', 'string']}, {'id': 'clip', 'doc': 'Clip adapter sequences\\n', 'inputBinding': {'position': 6, 'prefix': '--clip'}, 'type': ['null', 'boolean']}, {'id': 'defline_qual', 'doc': \"Defline format specification for quality.\\n<fmt> is string of characters and/or\\nvariables. The variables can be one of: $ac\\n- accession, $si spot id, $sn spot\\nname, $sg spot group (barcode), $sl spot\\nlength in bases, $ri read number, $rn\\nread name, $rl read length in bases. '[]'\\ncould be used for an optional output: if\\nall vars in [] yield empty values whole\\ngroup is not printed. Empty value is empty\\nstring or for numeric variables. Ex:\\n@$sn[_$rn]/$ri '_$rn' is omitted if name\\nis empty\\n\", 'inputBinding': {'position': 34, 'prefix': '--defline-qual'}, 'type': ['null', 'string']}, {'id': 'defline_seq', 'doc': 'Defline format specification for sequence.\\n', 'inputBinding': {'position': 33, 'prefix': '--defline-seq'}, 'type': ['null', 'string']}, {'id': 'disable_multithreading', 'doc': 'disable multithreading\\n', 'inputBinding': {'position': 35, 'prefix': '--disable-multithreading'}, 'type': ['null', 'boolean']}, {'id': 'dumpbase', 'doc': 'Formats sequence using base space (default\\nfor other than SOLiD).\\n', 'inputBinding': {'position': 26, 'prefix': '--dumpbase'}, 'type': ['null', 'boolean']}, {'id': 'dumpcs', 'doc': 'Formats sequence using color space (default\\nfor SOLiD),\"cskey\" may be specified for\\ntranslation\\n', 'inputBinding': {'position': 25, 'prefix': '--dumpcs'}, 'type': ['null', 'string']}, {'id': 'fasta', 'doc': 'FASTA only, no qualities, optional line\\nwrap width (set to zero for no wrapping)\\n', 'inputBinding': {'position': 28, 'prefix': '--fasta'}, 'type': ['null', 'int']}, {'id': 'helicos', 'doc': 'Helicos style defline\\n', 'inputBinding': {'position': 32, 'prefix': '--helicos'}, 'type': ['null', 'boolean']}, {'id': 'matepair_distance', 'doc': 'Filter by distance beiween matepairs.\\nUse \"unknown\" to find matepairs split\\nbetween the references. Use from-to to limit\\nmatepair distance on the same reference\\n', 'inputBinding': {'position': 14, 'prefix': '--matepair-distance'}, 'type': ['null', {'name': 'distance', 'symbols': ['from-to', 'unknown'], 'type': 'enum'}]}, {'id': 'max_spot_id', 'doc': 'Maximum spot id\\n', 'inputBinding': {'position': 4, 'prefix': '--maxSpotId'}, 'type': ['null', 'string']}, {'id': 'min_read_len', 'doc': 'Filter by sequence length >= <len>\\n', 'inputBinding': {'position': 7, 'prefix': '--minReadLen'}, 'type': ['null', 'int']}, {'id': 'min_spot_id', 'doc': 'Minimum spot id\\n', 'inputBinding': {'position': 3, 'prefix': '--minSpotId'}, 'type': ['null', 'string']}, {'id': 'offset', 'doc': 'Offset to use for quality conversion, default is 33\\n', 'inputBinding': {'position': 27, 'prefix': '--offset'}, 'type': ['null', 'int']}, {'id': 'origfmt', 'doc': 'Defline contains only original sequence name\\n', 'inputBinding': {'position': 30, 'prefix': '--origfmt'}, 'type': ['null', 'boolean']}, {'id': 'qual_filter', 'doc': 'Filter used in early 1000 Genomes data: no sequences starting or ending with >= 10N\\n', 'inputBinding': {'position': 9, 'prefix': '--qual-filter'}, 'type': ['null', 'boolean']}, {'id': 'qual_filter_1', 'doc': 'Filter used in current 1000 Genomes data\\n', 'inputBinding': {'position': 10, 'prefix': '--qual-filter-1'}, 'type': ['null', 'boolean']}, {'id': 'readids', 'doc': \"Append read id after spot id as 'accession.spot.readid' on defline\\n\", 'inputBinding': {'position': 31, 'prefix': '--readids'}, 'type': ['null', 'boolean']}, {'id': 'skip_technical', 'doc': 'Dump only biological reads\\n', 'inputBinding': {'position': 15, 'prefix': '--skip-technical'}, 'type': ['null', 'boolean']}, {'id': 'split_3', 'doc': 'Legacy 3-file splitting for mate-pairs:\\nFirst biological reads satisfying dumping\\nconditions are placed in files *_1.fastq and\\n*_2.fastq If only one biological read is\\npresent it is placed in *.fastq Biological\\nreads and above are ignored.\\n', 'inputBinding': {'position': 21, 'prefix': '--split-3'}, 'type': ['null', 'boolean']}, {'id': 'split_files', 'doc': 'Dump each read into separate file.\\nFiles will receive suffix corresponding to read number\\n', 'inputBinding': {'position': 20, 'prefix': '--split-files'}, 'type': ['null', 'boolean']}, {'id': 'split_spot', 'doc': 'Split spots into individual reads\\n', 'inputBinding': {'position': 2, 'prefix': '--split-spot'}, 'type': ['null', 'boolean']}, {'id': 'sra_file', 'doc': 'Input file\\n', 'inputBinding': {'position': 60}, 'type': 'File'}, {'id': 'suppress_qual_for_cskey', 'doc': 'supress quality-value for cskey\\n', 'inputBinding': {'position': 29, 'prefix': '--suppress-qual-for-cskey'}, 'type': ['null', 'boolean']}, {'id': 'unaligned', 'doc': 'Dump only unaligned sequences\\n', 'inputBinding': {'position': 12, 'prefix': '--unaligned'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'all_fastq_files', 'outputBinding': {'glob': '$(inputs.sra_file.nameroot)*.fastq'}, 'format': 'http://edamontology.org/format_1931', 'type': {'items': 'File', 'type': 'array'}}, {'id': 'fastq_file_1', 'outputBinding': {'glob': ['$(inputs.sra_file.nameroot).fastq', '$(inputs.sra_file.nameroot)_1.fastq']}, 'format': 'http://edamontology.org/format_1931', 'type': 'File'}, {'id': 'fastq_file_2', 'outputBinding': {'glob': '$(inputs.sra_file.nameroot)_2.fastq'}, 'format': 'http://edamontology.org/format_1931', 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/sratoolkit:v2.8.2-1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'sra-tools', 'version': ['2.8.2'], 'specs': ['https://identifiers.org/biotools/sra-tools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['fastq-dump']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf', 'https://edamontology.org/EDAM_1.18.owl']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs fastq-dump from NCBI SRA toolkit\nSupports only file inputs.\nOutput file names are formed on the base of `sra_file` input basename.\n",
    "cwl_stdout": null,
    "cwl_s:name": "fastq_dump",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "sratoolkit/prefetch.cwl",
    "sha": "1016fd0799811246990c0ea8e86c18d732ff1593",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/sratoolkit/prefetch.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/sra-tools:2.10.3--pl526haddd2b5_0\n  SoftwareRequirement:\n    packages:\n      sra-tools:\n        specs: [ https://identifiers.org/biotools/sra-tools ]\n        version: [ \"2.10.3\" ]\n\ninputs:\n  accession:\n    type: string\n    inputBinding:\n      position: 4\n    doc: |\n      SRA read accession\n  transport:\n    type: string?\n    inputBinding:\n      position: 3\n      prefix: '-t'\n    doc: |\n      Transport protocol to use 'fasp', 'http' or 'both'\n\narguments: [\"-O\", '.']\n\noutputs:\n  sra_file:\n    type: File\n    outputBinding:\n      glob: $(inputs.accession)/$(inputs.accession).sra\n\nbaseCommand: [prefetch]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"prefetch\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\ndoc: |\n  Tool runs prefetch from NCBI SRA toolkit\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'accession', 'doc': 'SRA read accession\\n', 'inputBinding': {'position': 4}, 'type': 'string'}, {'id': 'transport', 'doc': \"Transport protocol to use 'fasp', 'http' or 'both'\\n\", 'inputBinding': {'position': 3, 'prefix': '-t'}, 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'sra_file', 'outputBinding': {'glob': '$(inputs.accession)/$(inputs.accession).sra'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/sra-tools:2.10.3--pl526haddd2b5_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'sra-tools', 'version': ['2.10.3'], 'specs': ['https://identifiers.org/biotools/sra-tools']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['prefetch']",
    "cwl_arguments": "['-O', '.']",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Tool runs prefetch from NCBI SRA toolkit\n",
    "cwl_stdout": null,
    "cwl_s:name": "prefetch",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "sratoolkit/prefetch_fastq.cwl",
    "sha": "3d40b47206e54fd1c27ea453ac51753764425889",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/sratoolkit/prefetch_fastq.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: Workflow\n\ndoc: |\n  Worfklow combining an SRA fetch from NCBI with a fastq-dump cmd\n\nrequirements:\n  MultipleInputFeatureRequirement: {}\n  StepInputExpressionRequirement: {}\n  InlineJavascriptRequirement: {}\n\ninputs:\n  sra_accession: string\n\nsteps:\n  prefetch:\n    in:\n      accession: sra_accession\n    out:\n      - sra_file\n    run: ./prefetch.cwl\n\n  fastq_dump:\n    in:\n      sra_file: prefetch/sra_file\n      split_files:\n        default: true\n    out:\n      - all_fastq_files\n      - fastq_file_1\n      - fastq_file_2\n    run: ./fastq_dump.cwl\n\n  rename_fastq1:\n    in:\n      srcfile: fastq_dump/fastq_file_1\n      fastq2: fastq_dump/fastq_file_2\n      accession: sra_accession\n      newname:\n        valueFrom: |\n          ${\n            if (inputs.fastq2) {\n              return inputs.srcfile.basename;\n            } else {\n              return inputs.accession + '.fastq';\n            }\n          }\n    out:\n      - outfile\n    run: ../util/rename.cwl\n\noutputs:\n  fastq_files:\n    type: File[]\n    outputSource: fastq_dump/all_fastq_files\n    format: edam:format_1931 # FASTQQ\n  fastq_file_1:\n    type: File\n    outputSource: rename_fastq1/outfile\n    format: edam:format_1931 # FASTQ\n  fastq_file_2:\n    type: File?\n    outputSource: fastq_dump/fastq_file_2\n    format: edam:format_1931 # FASTQ\n\n$namespaces:\n  edam: http://edamontology.org/\n$schemas:\n  - https://edamontology.org/EDAM_1.18.owl\n",
    "cwl_validation_error": "../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:2:1:   Object `` is not\n                                                                                          valid because:\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:16:1:   the `steps` field\n                                                                                            is not valid\n                                                                                            because:\n                                                                                              array item is\n                                                                                              invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:24:3:       checking\n                                                                                                object `#fastq_dump`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:33:5:         the `run`\n                                                                                                  field is not valid\n                                                                                                  because:\n                                                                                                    contains\n                                                                                                    undefined reference\n                                                                                                    to\n                                                                                                    `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/fastq_dump.cwl`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:16:1:     array item is\n                                                                                              invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:17:3:       checking\n                                                                                                object `#prefetch`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:22:5:         the `run`\n                                                                                                  field is not valid\n                                                                                                  because:\n                                                                                                    contains\n                                                                                                    undefined reference\n                                                                                                    to\n                                                                                                    `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/prefetch.cwl`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:16:1:     array item is\n                                                                                              invalid because\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:35:3:       checking\n                                                                                                object\n                                                                                                `#rename_fastq1`\n../../../Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation:51:5:         the `run`\n                                                                                                  field is not valid\n                                                                                                  because:\n                                                                                                    contains\n                                                                                                    undefined reference\n                                                                                                    to\n                                                                                                    `file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/util/rename.cwl`"
  },
  {
    "path": "subread/featureCounts.cwl",
    "sha": "f0d7b31e92ef1fae75ebd4dd76ada5e7a112b390",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/subread/featureCounts.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ninputs:\n  annotations:\n    type: File\n    format: [ edam:format_2306, edam:format_1974 ]  # GTF or GFFv2\n  mapped_reads:\n    type: File\n    format: [ edam:format_2572, edam:format_2573 ]  # BAM or SAM\n  reads_are_paired:\n    doc: |\n      If specified, libraries are assumed to contain paired-end reads.\n    type: boolean\n    inputBinding:\n      prefix: -p\n\nbaseCommand: featureCounts\n\narguments: [-T, $(runtime.cores),\n            -a, $(inputs.annotations),\n            -o, featurecounts.tsv,\n            $(inputs.mapped_reads)]\n\noutputs:\n  featurecounts:\n    type: File\n    format: iana:text/tab-separated-values  # TSV\n    outputBinding:\n      glob: featurecounts.tsv\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/subread:2.0.6--he4a0461_0\n  SoftwareRequirement:\n    packages:\n      featureCounts:\n        specs:\n          - https://identifiers.org/rrid/RRID:SCR_012919\n          - https://identifiers.org/biotools/featurecounts\n          - https://anaconda.org/bioconda/subread\n\n$namespaces:\n edam: http://edamontology.org/\n iana: https://www.iana.org/assignments/media-types/\n$schemas:\n - https://edamontology.org/EDAM_1.25.owl\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'annotations', 'format': ['http://edamontology.org/format_2306', 'http://edamontology.org/format_1974'], 'type': 'File'}, {'id': 'mapped_reads', 'format': ['http://edamontology.org/format_2572', 'http://edamontology.org/format_2573'], 'type': 'File'}, {'id': 'reads_are_paired', 'doc': 'If specified, libraries are assumed to contain paired-end reads.\\n', 'inputBinding': {'prefix': '-p'}, 'type': 'boolean'}]",
    "cwl_outputs": "[{'id': 'featurecounts', 'outputBinding': {'glob': 'featurecounts.tsv'}, 'format': 'https://www.iana.org/assignments/media-types/text/tab-separated-values', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/subread:2.0.6--he4a0461_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'featureCounts', 'specs': ['https://identifiers.org/rrid/RRID:SCR_012919', 'https://identifiers.org/biotools/featurecounts', 'https://anaconda.org/bioconda/subread']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "featureCounts",
    "cwl_arguments": "['-T', '$(runtime.cores)', '-a', '$(inputs.annotations)', '-o', 'featurecounts.tsv', '$(inputs.mapped_reads)']",
    "cwl_$namespaces": "{'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://edamontology.org/EDAM_1.25.owl']",
    "cwl_requirements": null,
    "cwl_doc": null,
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "tar/tar-compress.cwl",
    "sha": "4785ec76c99ac371c5ae8aa3f39955dddb58b9dc",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/tar/tar-compress.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/scidap:v0.0.3\n\ninputs:\n  folder_to_compress:\n    type: Directory\n    doc: \"Folder to compressed\"\n\noutputs:\n  compressed_folder:\n    type: File\n    outputBinding:\n      glob: \"*\"\n    doc: \"Compressed folder\"\n\nbaseCommand: tar\n\narguments:\n  - valueFrom: $(inputs.folder_to_compress.path)/../\n    prefix: \"-C\"\n  - \"-czvf\"\n  - $(inputs.folder_to_compress.basename).tar.gz\n  - \".\"\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"tar-compress\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n        \ndoc: |\n  Compresses input directory to tar.gz\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'folder_to_compress', 'doc': 'Folder to compressed', 'type': 'Directory'}]",
    "cwl_outputs": "[{'id': 'compressed_folder', 'doc': 'Compressed folder', 'outputBinding': {'glob': '*'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/scidap:v0.0.3'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "tar",
    "cwl_arguments": "[{'prefix': '-C', 'valueFrom': '$(inputs.folder_to_compress.path)/../'}, '-czvf', '$(inputs.folder_to_compress.basename).tar.gz', '.']",
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "Compresses input directory to tar.gz\n",
    "cwl_stdout": null,
    "cwl_s:name": "tar-compress",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "tb-profiler/tb-profiler-profile.cwl",
    "sha": "a060a0dc8685934cc744c28dabf32a0916121dfd",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/tb-profiler/tb-profiler-profile.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: Profile M. tuberculosis whole genome sequencing samples for drug resistance and lineage\nlabel: TB-Profiler profile\n\ns:author:\n  - class: s:Person\n    s:identifier: https://orcid.org/0000-0001-6553-5274\n    s:email: mailto:pvh@sanbi.ac.za\n    s:name: Peter van Heusden\n\nrequirements:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/tb-profiler:3.0.0--pypyh3252c3a_0\n  SoftwareRequirement:\n    packages:\n      tb-profiler:\n        specs: [ https://identifiers.org/biotools/tb-profiler ]\n        version: [ \"3.0.0\" ]\n\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    # TODO: estimate ramMin\n  SoftwareRequirement:\n    packages:\n      tb-profiler:\n        version: [ \"3.0.0\" ]\n        specs:\n          - https://anaconda.org/bioconda/tb-profiler\n          - https://github.com/jodyphelan/TBProfiler/\n\ninputs:\n  sequences:\n    label: \"Input sequences\"\n    type:\n      - type: record\n        fields:\n          read1:\n            label: \"First read file\"\n            type: File\n            inputBinding:\n              prefix: --read1\n              position: 10\n          read2:\n            label: \"Second read file\"\n            type: File?\n            inputBinding:\n              prefix: --read2\n              position: 20\n      - type: record\n        fields:\n          bam:\n            label: \"Aligned reads in BAM format\"\n            doc: \"Make sure it has been generated using the H37RV reference genome (GCA_000195955.2)\"\n            type: File\n            inputBinding:\n              prefix: --bam\n              position: 10\n  database:\n    label: \"Mutation database to use for drug resistance prediction\"\n    type:\n      - type: record\n        fields:\n          panel_name:\n            label: \"Mutation panel name\"\n            type: string\n            inputBinding:\n              prefix: --db\n              position: 30\n      - type: record\n        fields:\n          external_db:\n            label: \"Path prefix to db files\"\n            type: string\n            inputBinding:\n              prefix: --external_db\n              position: 30\n    default: \n      panel_name: \"tbdb\"\n  platform:\n    label: \"NGS platform used to generate data\"\n    type:\n      type: enum\n      symbols:\n        - illumina\n        - nanopore\n      inputBinding:\n        prefix: --platform\n        position: 40      \n    default: \"illumina\"\n  output_prefix:\n    label: \"Prefix to use for all results generated\"\n    type: string?\n    default: \"tbprofiler\"\n    inputBinding:\n      prefix: --prefix\n      position: 50\n  csv_output:\n    label: \"Produce CSV output\"\n    type: boolean?\n    inputBinding:\n      prefix: --csv\n      position: 50\n  text_output:\n    label: \"Produce text output\"\n    type: boolean?\n    inputBinding:\n      prefix: --txt\n      position: 50\n  pdf_output:\n    label: \"Produce PDF output (using pdflatex)\"\n    type: boolean?\n    inputBinding:\n      prefix: --pdf\n      position: 50\n  mapper:\n    label: \"Mapping tool to use.\"\n    doc: \"Defaults to bwa if the illumina sequencing platform is selected, and defaults to minimap2 for nanopore\"\n    type:\n      - type: enum\n        symbols:\n          - \"bwa\"\n          - \"minimap2\"\n          - \"bowtie2\"\n          - \"bwa-mem2\"\n        inputBinding:\n          prefix: --mapper\n          position: 60\n      - \"null\"      \n  caller:\n    label: \"Variant calling tool to use\"\n    doc: \"Default is bcftools\"\n    type:\n      - type: enum\n        symbols:\n          - \"bcftools\"\n          - \"gatk\"\n          - \"freebayes\"\n        inputBinding:\n          prefix: --caller\n          position: 60\n      - \"null\"\n  calling_parameters:\n    label: \"Override default parameters for variant calling\"\n    type: string?\n    inputBinding:\n      prefix: --calling_params\n      position: 60\n  min_depth:\n    label: \"Minimum depth required to call variant\"\n    doc: \"Bases with depth below this cutoff will be marked as missing\"\n    type: int?\n    inputBinding:\n      prefix: --min_depth\n      position: 60\n  allele_frequency:\n    label: \"Minimum allele frequency to call variants\"\n    type: float?\n    inputBinding:\n      prefix: --af\n      position: 60\n  dr_allele_frequency:\n    label: \"Minimum allele frequency to use variants for prediction\"\n    type: float?\n    inputBinding:\n      prefix: --reporting_af\n      position: 60\n  threads:\n    label: \"Threads to use\"\n    type: int?\n    inputBinding:\n      prefix: --threads\n      position: 60\n  no_trim:\n    label: \"Don't trim reads using trimmomatic\"\n    type: boolean?\n    inputBinding:\n      prefix: --no_trim\n      position: 60\n  no_flagstat:\n    label: \"Don't collect flagstats\"\n    type: boolean?\n    inputBinding:\n      prefix: --no_flagstat\n      position: 60\n  no_delly:\n    label: \"Don't run delly\"\n    type: boolean?\n    inputBinding:\n      prefix: --no_delly\n      position: 60\n  \n  coverage_fraction_threshold:\n    label: \"Cutoff used to calculate fraction of region covered by <= this value\"\n    type: float?\n    inputBinding:\n      prefix: --coverage_fraction_threshold\n      position: 60\n\noutputs:\n  json_output_file:\n    type: File\n    outputBinding:\n      glob: results/$(inputs.output_prefix)*.json\n  csv_output_file:\n    type: File?\n    outputBinding:\n      glob: results/$(inputs.output_prefix)*.csv\n  text_output_file:\n    type: File?\n    outputBinding:\n      glob: results/$(inputs.output_prefix)*.txt\n  pdf_output_file:\n    type: File?\n    outputBinding:\n      glob: results/$(inputs.output_prefix)*.pdf\n\n\nbaseCommand: [ \"tb-profiler\", \"profile\" ]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n  - https://schema.org/version/latest/schemaorg-current-https.rdf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'allele_frequency', 'label': 'Minimum allele frequency to call variants', 'inputBinding': {'position': 60, 'prefix': '--af'}, 'type': ['null', 'float']}, {'id': 'caller', 'label': 'Variant calling tool to use', 'doc': 'Default is bcftools', 'type': [{'name': '_:49c4fa13-c0ac-4b5c-9342-99d98425786f', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#caller/bcftools', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#caller/gatk', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#caller/freebayes'], 'type': 'enum', 'inputBinding': {'position': 60, 'prefix': '--caller'}}, 'null']}, {'id': 'calling_parameters', 'label': 'Override default parameters for variant calling', 'inputBinding': {'position': 60, 'prefix': '--calling_params'}, 'type': ['null', 'string']}, {'id': 'coverage_fraction_threshold', 'label': 'Cutoff used to calculate fraction of region covered by <= this value', 'inputBinding': {'position': 60, 'prefix': '--coverage_fraction_threshold'}, 'type': ['null', 'float']}, {'id': 'csv_output', 'label': 'Produce CSV output', 'inputBinding': {'position': 50, 'prefix': '--csv'}, 'type': ['null', 'boolean']}, {'id': 'database', 'label': 'Mutation database to use for drug resistance prediction', 'default': {'panel_name': 'tbdb'}, 'type': [{'name': '_:4eb5e798-f527-4bf1-b992-e68cf027a773', 'fields': [{'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#database/panel_name', 'type': 'string', 'inputBinding': {'position': 30, 'prefix': '--db'}, 'label': 'Mutation panel name'}], 'type': 'record'}, {'name': '_:92c718f0-176c-475e-98a1-5ed329769a11', 'fields': [{'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#database/external_db', 'type': 'string', 'inputBinding': {'position': 30, 'prefix': '--external_db'}, 'label': 'Path prefix to db files'}], 'type': 'record'}]}, {'id': 'dr_allele_frequency', 'label': 'Minimum allele frequency to use variants for prediction', 'inputBinding': {'position': 60, 'prefix': '--reporting_af'}, 'type': ['null', 'float']}, {'id': 'mapper', 'label': 'Mapping tool to use.', 'doc': 'Defaults to bwa if the illumina sequencing platform is selected, and defaults to minimap2 for nanopore', 'type': [{'name': '_:cf39d75a-f9a6-42b2-9efc-9e10fdd43d65', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#mapper/bwa', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#mapper/minimap2', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#mapper/bowtie2', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#mapper/bwa-mem2'], 'type': 'enum', 'inputBinding': {'position': 60, 'prefix': '--mapper'}}, 'null']}, {'id': 'min_depth', 'label': 'Minimum depth required to call variant', 'doc': 'Bases with depth below this cutoff will be marked as missing', 'inputBinding': {'position': 60, 'prefix': '--min_depth'}, 'type': ['null', 'int']}, {'id': 'no_delly', 'label': \"Don't run delly\", 'inputBinding': {'position': 60, 'prefix': '--no_delly'}, 'type': ['null', 'boolean']}, {'id': 'no_flagstat', 'label': \"Don't collect flagstats\", 'inputBinding': {'position': 60, 'prefix': '--no_flagstat'}, 'type': ['null', 'boolean']}, {'id': 'no_trim', 'label': \"Don't trim reads using trimmomatic\", 'inputBinding': {'position': 60, 'prefix': '--no_trim'}, 'type': ['null', 'boolean']}, {'id': 'output_prefix', 'label': 'Prefix to use for all results generated', 'inputBinding': {'position': 50, 'prefix': '--prefix'}, 'default': 'tbprofiler', 'type': ['null', 'string']}, {'id': 'pdf_output', 'label': 'Produce PDF output (using pdflatex)', 'inputBinding': {'position': 50, 'prefix': '--pdf'}, 'type': ['null', 'boolean']}, {'id': 'platform', 'label': 'NGS platform used to generate data', 'default': 'illumina', 'type': {'name': '_:4313f2fc-ca5f-457f-85ce-7c267fe08908', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#platform/illumina', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#platform/nanopore'], 'type': 'enum', 'inputBinding': {'position': 40, 'prefix': '--platform'}}}, {'id': 'sequences', 'label': 'Input sequences', 'type': [{'name': '_:12b53142-2eb5-4ce5-ae13-4cf32077ece5', 'fields': [{'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#sequences/read1', 'type': 'File', 'inputBinding': {'position': 10, 'prefix': '--read1'}, 'label': 'First read file'}, {'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#sequences/read2', 'type': ['null', 'File'], 'inputBinding': {'position': 20, 'prefix': '--read2'}, 'label': 'Second read file'}], 'type': 'record'}, {'name': '_:6592621f-3a67-4b4a-b70e-0db4f1f65078', 'fields': [{'name': 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#sequences/bam', 'doc': 'Make sure it has been generated using the H37RV reference genome (GCA_000195955.2)', 'type': 'File', 'inputBinding': {'position': 10, 'prefix': '--bam'}, 'label': 'Aligned reads in BAM format'}], 'type': 'record'}]}, {'id': 'text_output', 'label': 'Produce text output', 'inputBinding': {'position': 50, 'prefix': '--txt'}, 'type': ['null', 'boolean']}, {'id': 'threads', 'label': 'Threads to use', 'inputBinding': {'position': 60, 'prefix': '--threads'}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'csv_output_file', 'outputBinding': {'glob': 'results/$(inputs.output_prefix)*.csv'}, 'type': ['null', 'File']}, {'id': 'json_output_file', 'outputBinding': {'glob': 'results/$(inputs.output_prefix)*.json'}, 'type': 'File'}, {'id': 'pdf_output_file', 'outputBinding': {'glob': 'results/$(inputs.output_prefix)*.pdf'}, 'type': ['null', 'File']}, {'id': 'text_output_file', 'outputBinding': {'glob': 'results/$(inputs.output_prefix)*.txt'}, 'type': ['null', 'File']}]",
    "cwl_hints": "[{'class': 'ResourceRequirement', 'coresMin': 1}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'tb-profiler', 'version': ['3.0.0'], 'specs': ['https://anaconda.org/bioconda/tb-profiler', 'https://github.com/jodyphelan/TBProfiler/']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['tb-profiler', 'profile']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/tb-profiler:3.0.0--pypyh3252c3a_0'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'tb-profiler', 'version': ['3.0.0'], 'specs': ['https://identifiers.org/biotools/tb-profiler']}]}]",
    "cwl_doc": "Profile M. tuberculosis whole genome sequencing samples for drug resistance and lineage",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "TB-Profiler profile",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:identifier': 'https://orcid.org/0000-0001-6553-5274', 's:email': 'mailto:pvh@sanbi.ac.za', 's:name': 'Peter van Heusden'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "trim_galore/trim_galore.cwl",
    "sha": "6e8edddaf428ecfedba7087e1e3da3ae1ee2e225",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/trim_galore/trim_galore.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  Adaptor trimming of reads (single or paired end) in fastq format.\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 7000\n  DockerRequirement:\n    dockerPull: kerstenbreuer/trim_galore:0.4.4_1.14_0.11.7\n  SoftwareRequirement:\n    packages:\n      trim_galore:\n        specs: [ https://identifiers.org/biotools/trim_galore ]\n        version: [ \"0.4.4\" ]\n\nbaseCommand: trim_galore\n\ninputs:\n  # main input\n  fastq1:\n    doc: |\n      raw reads in fastq format; can be gzipped;\n      if paired end, the file contains the first reads;\n      if single end, the file contains all reads\n    type: File\n    inputBinding:\n      position: 10\n  fastq2:\n    doc: |\n      (optional) raw reads in fastq format; can be gzipped;\n      if paired end, the file contains the second reads;\n      if single end, the file does not exist\n    type: File?\n    inputBinding:\n      position: 11\n  adapter1:\n    doc: |\n      Adapter sequence for first reads.\n      if not specified, trim_galore will try to autodetect whether ...\n      - Illumina universal adapter (AGATCGGAAGAGC)\n      - Nextera adapter (CTGTCTCTTATA)\n      - Illumina Small RNA 3' Adapter (TGGAATTCTCGG)\n      ... was used.\n      You can directly choose one of the above configurations\n      by setting the string to \"illumina\", \"nextera\", or \"small_rna\".\n    type: string?\n  adapter2:\n    doc: |\n      Adapter sequence for second reads - only for paired end data.\n      if not specified, trim_galore will try to autodetect whether ...\n      - Illumina universal adapter (AGATCGGAAGAGC)\n      - Nextera adapter (CTGTCTCTTATA)\n      - Illumina Small RNA 3' Adapter (TGGAATTCTCGG)\n      ... was used.\n      You can directly choose one of the above configurations\n      by setting the adapter1 string to \"illumina\", \"nextera\", or \"small_rna\".\n    type: string?\n    \n  # additional optional input:\n  qual_trim_cutoff:\n    doc: trim all base with a phred score lower than this valueFrom\n    type: int\n    default: 20\n    inputBinding:\n      prefix: --quality\n      position: 1\n  min_read_length:\n    doc: discard reads that get shorter than this value\n    type: int\n    default: 20\n    inputBinding:\n      prefix: --length\n      position: 1\n  min_unpaired_read_rescue_length:\n    doc: |\n      if only one read of a pair passes the qc and adapter trimming,\n      it needs at least this length to be rescued\n    type: int\n    default: 35\n  min_adapter_overlap:\n    doc: minimum overlap with adapter seq in bp needed to trim\n    type: int\n    default: 1\n    inputBinding:\n      prefix: --stringency \n      position: 1\n\narguments:\n\n  ## hard-coded parameters:\n  - prefix: --fastqc_args\n    valueFrom: \"\\\"--noextract\\\"\"\n    position: 1\n    # fastqc data remains zipped\n  - prefix: --gzip\n    position: 1\n    # gzip output fastq\n  \n\n  ## variable arguments:\n  - valueFrom: |\n      ${\n        if ( inputs.adapter1 == \"illumina\" ){ return \"--illumina\" }\n        else if ( inputs.adapter1 == \"nextera\" ){ return \"--nextera\" }\n        else if ( inputs.adapter1 == \"small_rna\" ){ return \"--small_rna\" }\n        else { return null }\n      }\n    position: 1\n  - prefix: --adapter\n    valueFrom: |\n      ${\n        if ( inputs.adapter1 != null && inputs.adapter1 != \"illumina\" && inputs.adapter1 != \"nextera\" && inputs.adapter1 != \"small_rna\" ){\n          return inputs.adapter1\n        } else {\n          return null\n        }\n      }\n    position: 1\n  - prefix: --adapter2\n    valueFrom: |\n      ${\n        if ( inputs.fastq2 != null && inputs.adapter2 != null && inputs.adapter1 != \"illumina\" && inputs.adapter1 != \"nextera\" && inputs.adapter1 != \"small_rna\" ){\n          return inputs.adapter2\n        } else {\n          return null\n        }\n      }\n    position: 1\n  - valueFrom: |\n      ${\n        if ( inputs.fastq2 == null ){ return null }\n        else { return \"--paired\" }\n      }\n    position: 1\n    # turn on paired mode\n  - valueFrom: |\n      ${\n        if ( inputs.fastq2 == null ){ return null }\n        else { return \"--retain_unpaired\" }\n      }\n    position: 1\n    # if only one read of a read pair becomes to short,\n    # it will be written to .unpaired_1.fq or .unpaired_2.fq\n  - prefix: --length_1\n    valueFrom: |\n      ${\n        if ( inputs.fastq2 == null ){ return null }\n        else { return inputs.min_unpaired_read_rescue_length }\n      }\n    position: 1\n    # min bp length for a read to be written to .unpaired_1.fq\n  - prefix: --length_2\n    valueFrom: |\n      ${\n        if ( inputs.fastq2 == null ){ return null }\n        else { return inputs.min_unpaired_read_rescue_length }\n      }\n    position: 1\n    # min bp length for a read to be written to .unpaired_2.fq\n\noutputs:\n  fastq1_trimmed:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n            if ( inputs.fastq2 == null  ){ return \"*trimmed.fq*\" }\n            else { return \"*val_1.fq*\" }\n        }\n  fastq2_trimmed:    \n    type: File?\n    outputBinding:\n      glob: \"*val_2.fq*\"\n  fastq1_trimmed_unpaired:    \n    type: File?\n    outputBinding:\n      glob: \"*unpaired_1.fq*\"\n  fastq2_trimmed_unpaired:    \n    type: File?\n    outputBinding:\n      glob: \"*unpaired_2.fq*\"\n  trim_galore_log: # can be used by multiqc\n    type:\n      type: array # since one or two matches (single/paired end)\n      items: File\n    outputBinding:\n      glob:  \"*trimming_report.txt\"\n  trimmed_fastqc_html:\n    doc: html report of post-trimming fastqc\n    type:\n      type: array # since one or two matches (single/paired end)\n      items: File\n    outputBinding:\n      glob: \"*fastqc.html\"\n  trimmed_fastqc_zip:\n    doc: all data of post-trimming fastqc e.g. figures\n    type:\n      type: array\n      items: File # since one or two matches (single/paired end)\n    outputBinding:\n      glob: \"*fastqc.zip\"\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'adapter1', 'doc': 'Adapter sequence for first reads.\\nif not specified, trim_galore will try to autodetect whether ...\\n- Illumina universal adapter (AGATCGGAAGAGC)\\n- Nextera adapter (CTGTCTCTTATA)\\n- Illumina Small RNA 3\\' Adapter (TGGAATTCTCGG)\\n... was used.\\nYou can directly choose one of the above configurations\\nby setting the string to \"illumina\", \"nextera\", or \"small_rna\".\\n', 'type': ['null', 'string']}, {'id': 'adapter2', 'doc': 'Adapter sequence for second reads - only for paired end data.\\nif not specified, trim_galore will try to autodetect whether ...\\n- Illumina universal adapter (AGATCGGAAGAGC)\\n- Nextera adapter (CTGTCTCTTATA)\\n- Illumina Small RNA 3\\' Adapter (TGGAATTCTCGG)\\n... was used.\\nYou can directly choose one of the above configurations\\nby setting the adapter1 string to \"illumina\", \"nextera\", or \"small_rna\".\\n', 'type': ['null', 'string']}, {'id': 'fastq1', 'doc': 'raw reads in fastq format; can be gzipped;\\nif paired end, the file contains the first reads;\\nif single end, the file contains all reads\\n', 'inputBinding': {'position': 10}, 'type': 'File'}, {'id': 'fastq2', 'doc': '(optional) raw reads in fastq format; can be gzipped;\\nif paired end, the file contains the second reads;\\nif single end, the file does not exist\\n', 'inputBinding': {'position': 11}, 'type': ['null', 'File']}, {'id': 'min_adapter_overlap', 'doc': 'minimum overlap with adapter seq in bp needed to trim', 'inputBinding': {'position': 1, 'prefix': '--stringency'}, 'default': 1, 'type': 'int'}, {'id': 'min_read_length', 'doc': 'discard reads that get shorter than this value', 'inputBinding': {'position': 1, 'prefix': '--length'}, 'default': 20, 'type': 'int'}, {'id': 'min_unpaired_read_rescue_length', 'doc': 'if only one read of a pair passes the qc and adapter trimming,\\nit needs at least this length to be rescued\\n', 'default': 35, 'type': 'int'}, {'id': 'qual_trim_cutoff', 'doc': 'trim all base with a phred score lower than this valueFrom', 'inputBinding': {'position': 1, 'prefix': '--quality'}, 'default': 20, 'type': 'int'}]",
    "cwl_outputs": "[{'id': 'fastq1_trimmed', 'outputBinding': {'glob': '${\\n    if ( inputs.fastq2 == null  ){ return \"*trimmed.fq*\" }\\n    else { return \"*val_1.fq*\" }\\n}\\n'}, 'type': 'File'}, {'id': 'fastq1_trimmed_unpaired', 'outputBinding': {'glob': '*unpaired_1.fq*'}, 'type': ['null', 'File']}, {'id': 'fastq2_trimmed', 'outputBinding': {'glob': '*val_2.fq*'}, 'type': ['null', 'File']}, {'id': 'fastq2_trimmed_unpaired', 'outputBinding': {'glob': '*unpaired_2.fq*'}, 'type': ['null', 'File']}, {'id': 'trim_galore_log', 'outputBinding': {'glob': '*trimming_report.txt'}, 'type': {'items': 'File', 'type': 'array'}}, {'id': 'trimmed_fastqc_html', 'doc': 'html report of post-trimming fastqc', 'outputBinding': {'glob': '*fastqc.html'}, 'type': {'items': 'File', 'type': 'array'}}, {'id': 'trimmed_fastqc_zip', 'doc': 'all data of post-trimming fastqc e.g. figures', 'outputBinding': {'glob': '*fastqc.zip'}, 'type': {'items': 'File', 'type': 'array'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'kerstenbreuer/trim_galore:0.4.4_1.14_0.11.7'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 7000}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'trim_galore', 'version': ['0.4.4'], 'specs': ['https://identifiers.org/biotools/trim_galore']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "trim_galore",
    "cwl_arguments": "[{'position': 1, 'prefix': '--fastqc_args', 'valueFrom': '\"--noextract\"'}, {'position': 1, 'prefix': '--gzip'}, {'position': 1, 'valueFrom': '${\\n  if ( inputs.adapter1 == \"illumina\" ){ return \"--illumina\" }\\n  else if ( inputs.adapter1 == \"nextera\" ){ return \"--nextera\" }\\n  else if ( inputs.adapter1 == \"small_rna\" ){ return \"--small_rna\" }\\n  else { return null }\\n}\\n'}, {'position': 1, 'prefix': '--adapter', 'valueFrom': '${\\n  if ( inputs.adapter1 != null && inputs.adapter1 != \"illumina\" && inputs.adapter1 != \"nextera\" && inputs.adapter1 != \"small_rna\" ){\\n    return inputs.adapter1\\n  } else {\\n    return null\\n  }\\n}\\n'}, {'position': 1, 'prefix': '--adapter2', 'valueFrom': '${\\n  if ( inputs.fastq2 != null && inputs.adapter2 != null && inputs.adapter1 != \"illumina\" && inputs.adapter1 != \"nextera\" && inputs.adapter1 != \"small_rna\" ){\\n    return inputs.adapter2\\n  } else {\\n    return null\\n  }\\n}\\n'}, {'position': 1, 'valueFrom': '${\\n  if ( inputs.fastq2 == null ){ return null }\\n  else { return \"--paired\" }\\n}\\n'}, {'position': 1, 'valueFrom': '${\\n  if ( inputs.fastq2 == null ){ return null }\\n  else { return \"--retain_unpaired\" }\\n}\\n'}, {'position': 1, 'prefix': '--length_1', 'valueFrom': '${\\n  if ( inputs.fastq2 == null ){ return null }\\n  else { return inputs.min_unpaired_read_rescue_length }\\n}\\n'}, {'position': 1, 'prefix': '--length_2', 'valueFrom': '${\\n  if ( inputs.fastq2 == null ){ return null }\\n  else { return inputs.min_unpaired_read_rescue_length }\\n}\\n'}]",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Adaptor trimming of reads (single or paired end) in fastq format.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "ucscuserapps/ucsc-bedgraphtobigwig.cwl",
    "sha": "e2ed1d01c13d48c40548833372b57b31e80371b5",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/ucscuserapps/ucsc-bedgraphtobigwig.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/ucsc-bedgraphtobigwig:377--ha8a8165_3\n  SoftwareRequirement:\n    packages:\n      bedgraphtobigwig:\n        version: [ \"377\" ]\n        specs:\n          - https://identifiers.org/biotools/bedgraphtobigwig\n          - https://anaconda.org/bioconda/ucsc-bedgraphtobigwig\n\ninputs:\n  bedgraph_file:\n    type: File\n    format: edam:format_3583  # bedGraph\n    inputBinding:\n      position: 10\n    doc: |\n      Four column bedGraph file: <chrom> <start> <end> <value>\n\n  chrom_length_file:\n    type: File\n    inputBinding:\n      position: 11\n    doc: |\n      Two-column chromosome length file: <chromosome name> <size in bases>\n\n  unc:\n    type: boolean?\n    inputBinding:\n      position: 5\n      prefix: \"-unc\"\n    doc: |\n      Disable compression\n\n  items_per_slot:\n    type: int?\n    inputBinding:\n      separate: false\n      position: 6\n      prefix: \"-itemsPerSlot=\"\n    doc: |\n      Number of data points bundled at lowest level. Default 1024\n\n  block_size:\n    type: int?\n    inputBinding:\n      separate: false\n      position: 7\n      prefix: \"-blockSize=\"\n    doc: |\n      Number of items to bundle in r-tree.  Default 256\n\n  output_filename:\n    type: string?\n    inputBinding:\n      position: 12\n      valueFrom: |\n        $( self == \"\" ? inputs.bedgraph_file.nameroot + \".bigWig\" : self )\n    default: \"\"\n    doc: |\n      If set, writes the output bigWig file to output_filename,\n      otherwise generates filename from the nameroot of the bedgraph_file\n\noutputs:\n  bigwig_file:\n    type: File\n    format: edam:format_3006  # BigWig\n    outputBinding:\n      glob: |\n        $( self == \"\" ? inputs.bedgraph_file.nameroot + \".bigWig\" : self )\n\nbaseCommand: bedGraphToBigWig\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"ucsc-bedgraphtobigwig\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Andrey Kartashov\n        s:email: mailto:Andrey.Kartashov@cchmc.org\n        s:sameAs:\n        - id: http://orcid.org/0000-0001-9102-5681\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  Tool converts bedGraph to bigWig file.\n\n  `default_output_filename` function returns filename for generated bigWig if `output_filename` is not provided.\n  Default filename is generated on the base of `bedgraph_file` basename with the updated to `*.bigWig` extension.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bedgraph_file', 'doc': 'Four column bedGraph file: <chrom> <start> <end> <value>\\n', 'format': 'http://edamontology.org/format_3583', 'inputBinding': {'position': 10}, 'type': 'File'}, {'id': 'block_size', 'doc': 'Number of items to bundle in r-tree.  Default 256\\n', 'inputBinding': {'position': 7, 'prefix': '-blockSize=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'chrom_length_file', 'doc': 'Two-column chromosome length file: <chromosome name> <size in bases>\\n', 'inputBinding': {'position': 11}, 'type': 'File'}, {'id': 'items_per_slot', 'doc': 'Number of data points bundled at lowest level. Default 1024\\n', 'inputBinding': {'position': 6, 'prefix': '-itemsPerSlot=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'output_filename', 'doc': 'If set, writes the output bigWig file to output_filename,\\notherwise generates filename from the nameroot of the bedgraph_file\\n', 'inputBinding': {'position': 12, 'valueFrom': '$( self == \"\" ? inputs.bedgraph_file.nameroot + \".bigWig\" : self )\\n'}, 'default': '', 'type': ['null', 'string']}, {'id': 'unc', 'doc': 'Disable compression\\n', 'inputBinding': {'position': 5, 'prefix': '-unc'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'bigwig_file', 'outputBinding': {'glob': '$( self == \"\" ? inputs.bedgraph_file.nameroot + \".bigWig\" : self )\\n'}, 'format': 'http://edamontology.org/format_3006', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/ucsc-bedgraphtobigwig:377--ha8a8165_3'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bedgraphtobigwig', 'version': ['377'], 'specs': ['https://identifiers.org/biotools/bedgraphtobigwig', 'https://anaconda.org/bioconda/ucsc-bedgraphtobigwig']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bedGraphToBigWig",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Tool converts bedGraph to bigWig file.\n\n`default_output_filename` function returns filename for generated bigWig if `output_filename` is not provided.\nDefault filename is generated on the base of `bedgraph_file` basename with the updated to `*.bigWig` extension.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Andrey Kartashov', 's:email': 'mailto:Andrey.Kartashov@cchmc.org', 's:sameAs': [{'id': 'http://orcid.org/0000-0001-9102-5681'}]}, {'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "ucsc-bedgraphtobigwig",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "ucscuserapps/ucsc-bedtobigbed.cwl",
    "sha": "eaf81111431e2673f959eacde7926eae96831e24",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/ucscuserapps/ucsc-bedtobigbed.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n     expressionLib:\n     - var default_output_filename = function() {\n           return inputs.input_bed.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+\".bb\";\n       };\n     - var get_bed_type = function() {\n           if (inputs.input_bed.location.split('.').slice(-1)[0].toLowerCase() == \"narrowpeak\"){\n               return \"bed6+4\";\n           } else if (inputs.input_bed.location.split('.').slice(-1)[0].toLowerCase() == \"broadpeak\"){\n               return \"bed6+3\";\n           } else {\n               return null;\n           }\n       };\n     - var get_bed_template = function() {\n           if (inputs.input_bed.location.split('.').slice(-1)[0].toLowerCase() == \"narrowpeak\"){\n               return \"narrowpeak.as\";\n           } else if (inputs.input_bed.location.split('.').slice(-1)[0].toLowerCase() == \"broadpeak\"){\n               return \"broadpeak.as\";\n           } else {\n               return null;\n           }\n       };\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: narrowpeak.as\n        entry: |\n          table narrowPeak\n          \"BED6+4 Peaks of signal enrichment based on pooled, normalized (interpreted) data.\"\n          (\n            string  chrom;        \"Reference sequence chromosome or scaffold\"\n            uint    chromStart;   \"Start position in chromosome\"\n            uint    chromEnd;     \"End position in chromosome\"\n            string  name;\t        \"Name given to a region (preferably unique). Use . if no name is assigned\"\n            uint    score;        \"Indicates how dark the peak will be displayed in the browser (0-1000) \"\n            char[1] strand;       \"+ or - or . for unknown\"\n            float   signalValue;  \"Measurement of average enrichment for the region\"\n            float   pValue;       \"Statistical significance of signal value (-log10). Set to -1 if not used.\"\n            float   qValue;       \"Statistical significance with multiple-test correction applied (FDR -log10). Set to -1 if not used.\"\n            int     peak;         \"Point-source called for this peak; 0-based offset from chromStart. Set to -1 if no point-source called.\"\n          )\n      - entryname: broadpeak.as\n        entry: |\n          table broadPeak\n          \"BED6+3 Peaks of signal enrichment based on pooled, normalized (interpreted) data.\"\n          (\n            string  chrom;        \"Reference sequence chromosome or scaffold\"\n            uint    chromStart;   \"Start position in chromosome\"\n            uint    chromEnd;     \"End position in chromosome\"\n            string  name;\t        \"Name given to a region (preferably unique). Use . if no name is assigned.\"\n            uint    score;        \"Indicates how dark the peak will be displayed in the browser (0-1000)\"\n            char[1] strand;       \"+ or - or . for unknown\"\n            float   signalValue;  \"Measurement of average enrichment for the region\"\n            float   pValue;       \"Statistical significance of signal value (-log10). Set to -1 if not used.\"\n            float   qValue;       \"Statistical significance with multiple-test correction applied (FDR -log10). Set to -1 if not used.\"\n          )\n\nhints:\n  DockerRequirement:\n    dockerPull: quay.io/biocontainers/ucsc-bedToBigBed:377--ha8a8165_3\n  SoftwareRequirement:\n    packages:\n      bedtobigbed:\n        version: [ \"377\" ]\n        specs: [ https://anaconda.org/bioconda/ucsc-bedToBigBed ]\ninputs:\n  bed_type:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: -type=\n      separate: false\n      valueFrom: |\n        ${\n            if (self == \"\"){\n              return get_bed_type();\n            } else {\n              return self;\n            }\n        }\n    default: \"\"\n    doc: |\n      Type of BED file in a form of bedN[+[P]]. By default bed3 to three required BED fields\n\n  bed_template:\n    type:\n      - \"null\"\n      - string\n      - File\n    inputBinding:\n      position: 6\n      prefix: -as=\n      separate: false\n      valueFrom: |\n        ${\n            if (self == \"\"){\n              return get_bed_template();\n            } else {\n              return self;\n            }\n        }\n    default: \"\"\n    doc: |\n      For non-standard \"bedPlus\" fields put a definition of each field in a row in AutoSql format.\n      By default includes only three required BED fields: chrom, chromStart, chromEnd\n\n  block_size:\n    type:\n      - \"null\"\n      - int\n    inputBinding:\n      position: 7\n      prefix: -blockSize=\n      separate: false\n    doc: |\n      Number of items to bundle in r-tree.  Default 256\n\n  items_per_slot:\n    type: int?\n    inputBinding:\n      position: 8\n      prefix: -itemsPerSlot=\n      separate: false\n    doc: |\n      Number of data points bundled at lowest level. Default 512\n\n  unc:\n    type: boolean?\n    inputBinding:\n      position: 9\n      prefix: '-unc'\n    doc: |\n      If set, do not use compression\n\n  tab_sep:\n    type: boolean?\n    inputBinding:\n      position: 10\n      prefix: '-tab'\n    doc: |\n      If set, expect fields to be tab separated, normally expects white space separator\n\n  extra_index:\n    type: string?\n    inputBinding:\n      position: 11\n      prefix: -extraIndex=\n      separate: false\n    doc: |\n      Makes an index on each field in a comma separated list extraIndex=name and extraIndex=name,id are commonly used\n\n  size_2bit:\n    type: boolean?\n    inputBinding:\n      position: 12\n      prefix: -sizesIs2Bit=\n      separate: false\n    doc: |\n      If set, the chrom.sizes file is assumed to be a 2bit file\n\n  input_bed:\n    type: File\n    format: edam:format_3003  # BED\n    inputBinding:\n      position: 20\n    doc: \"Input BED file\"\n\n  chrom_length_file:\n    type: File\n    inputBinding:\n      position: 21\n    doc: \"Chromosome length files\"\n\n  output_filename:\n    type: string?\n    inputBinding:\n      position: 22\n      valueFrom: |\n        ${\n            if (self == \"\"){\n              return default_output_filename();\n            } else {\n              return self;\n            }\n        }\n    default: \"\"\n    doc: \"Output filename\"\n\n\noutputs:\n  bigbed_file:\n    type: File\n    format: edam:format_3004  # bigBed\n    outputBinding:\n      glob: |\n        ${\n          if (inputs.output_filename == \"\"){\n            return default_output_filename();\n          } else {\n            return inputs.output_filename;\n          }\n        }\n\nbaseCommand: bedToBigBed\n\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"ucsc-bedtobigbed\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  Tool converts bed file to bigBed\n\n  Before running `baseCommand` the following files are created in Docker working directory (using\n  `InitialWorkDirRequirement`):\n  `narrowpeak.as` - default BED file structure template for ENCODE narrowPeak format\n  `broadpeak.as`  - default BED file structure template for ENCODE broadPeak format\n\n  `default_output_filename` function returns default output file name based on `input_bed` basename with `*.bb`\n  extension if `output_filename` is not provided.\n\n  `get_bed_type` function returns default BED file type if `bed_type` is not provided. Depending on `input_bed` file\n  extension the following values are returned:\n    `*.narrowpeak`  -->   bed6+4\n    `*.broadpeak`   -->   bed6+3\n     else           -->   null (`bedToBigBed` will use its own default value)\n\n  `get_bed_template` function returns default BED file template if `bed_template` is not provided. Depending on\n  `input_bed` file extension the following values are returned:\n      `*.narrowpeak`  -->   narrowpeak.as (previously staged into Docker working directory)\n      `*.broadpeak`   -->   broadpeak.as (previously staged into Docker working directory)\n       else           -->   null (`bedToBigBed` will use its own default value)\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bed_template', 'doc': 'For non-standard \"bedPlus\" fields put a definition of each field in a row in AutoSql format.\\nBy default includes only three required BED fields: chrom, chromStart, chromEnd\\n', 'inputBinding': {'position': 6, 'prefix': '-as=', 'separate': False, 'valueFrom': '${\\n    if (self == \"\"){\\n      return get_bed_template();\\n    } else {\\n      return self;\\n    }\\n}\\n'}, 'default': '', 'type': ['null', 'string', 'File']}, {'id': 'bed_type', 'doc': 'Type of BED file in a form of bedN[+[P]]. By default bed3 to three required BED fields\\n', 'inputBinding': {'position': 5, 'prefix': '-type=', 'separate': False, 'valueFrom': '${\\n    if (self == \"\"){\\n      return get_bed_type();\\n    } else {\\n      return self;\\n    }\\n}\\n'}, 'default': '', 'type': ['null', 'string']}, {'id': 'block_size', 'doc': 'Number of items to bundle in r-tree.  Default 256\\n', 'inputBinding': {'position': 7, 'prefix': '-blockSize=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'chrom_length_file', 'doc': 'Chromosome length files', 'inputBinding': {'position': 21}, 'type': 'File'}, {'id': 'extra_index', 'doc': 'Makes an index on each field in a comma separated list extraIndex=name and extraIndex=name,id are commonly used\\n', 'inputBinding': {'position': 11, 'prefix': '-extraIndex=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'input_bed', 'doc': 'Input BED file', 'format': 'http://edamontology.org/format_3003', 'inputBinding': {'position': 20}, 'type': 'File'}, {'id': 'items_per_slot', 'doc': 'Number of data points bundled at lowest level. Default 512\\n', 'inputBinding': {'position': 8, 'prefix': '-itemsPerSlot=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'output_filename', 'doc': 'Output filename', 'inputBinding': {'position': 22, 'valueFrom': '${\\n    if (self == \"\"){\\n      return default_output_filename();\\n    } else {\\n      return self;\\n    }\\n}\\n'}, 'default': '', 'type': ['null', 'string']}, {'id': 'size_2bit', 'doc': 'If set, the chrom.sizes file is assumed to be a 2bit file\\n', 'inputBinding': {'position': 12, 'prefix': '-sizesIs2Bit=', 'separate': False}, 'type': ['null', 'boolean']}, {'id': 'tab_sep', 'doc': 'If set, expect fields to be tab separated, normally expects white space separator\\n', 'inputBinding': {'position': 10, 'prefix': '-tab'}, 'type': ['null', 'boolean']}, {'id': 'unc', 'doc': 'If set, do not use compression\\n', 'inputBinding': {'position': 9, 'prefix': '-unc'}, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'bigbed_file', 'outputBinding': {'glob': '${\\n  if (inputs.output_filename == \"\"){\\n    return default_output_filename();\\n  } else {\\n    return inputs.output_filename;\\n  }\\n}\\n'}, 'format': 'http://edamontology.org/format_3004', 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'quay.io/biocontainers/ucsc-bedToBigBed:377--ha8a8165_3'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'bedtobigbed', 'version': ['377'], 'specs': ['https://anaconda.org/bioconda/ucsc-bedToBigBed']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bedToBigBed",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': [{'entryname': 'narrowpeak.as', 'entry': 'table narrowPeak\\n\"BED6+4 Peaks of signal enrichment based on pooled, normalized (interpreted) data.\"\\n(\\n  string  chrom;        \"Reference sequence chromosome or scaffold\"\\n  uint    chromStart;   \"Start position in chromosome\"\\n  uint    chromEnd;     \"End position in chromosome\"\\n  string  name;\\t        \"Name given to a region (preferably unique). Use . if no name is assigned\"\\n  uint    score;        \"Indicates how dark the peak will be displayed in the browser (0-1000) \"\\n  char[1] strand;       \"+ or - or . for unknown\"\\n  float   signalValue;  \"Measurement of average enrichment for the region\"\\n  float   pValue;       \"Statistical significance of signal value (-log10). Set to -1 if not used.\"\\n  float   qValue;       \"Statistical significance with multiple-test correction applied (FDR -log10). Set to -1 if not used.\"\\n  int     peak;         \"Point-source called for this peak; 0-based offset from chromStart. Set to -1 if no point-source called.\"\\n)\\n'}, {'entryname': 'broadpeak.as', 'entry': 'table broadPeak\\n\"BED6+3 Peaks of signal enrichment based on pooled, normalized (interpreted) data.\"\\n(\\n  string  chrom;        \"Reference sequence chromosome or scaffold\"\\n  uint    chromStart;   \"Start position in chromosome\"\\n  uint    chromEnd;     \"End position in chromosome\"\\n  string  name;\\t        \"Name given to a region (preferably unique). Use . if no name is assigned.\"\\n  uint    score;        \"Indicates how dark the peak will be displayed in the browser (0-1000)\"\\n  char[1] strand;       \"+ or - or . for unknown\"\\n  float   signalValue;  \"Measurement of average enrichment for the region\"\\n  float   pValue;       \"Statistical significance of signal value (-log10). Set to -1 if not used.\"\\n  float   qValue;       \"Statistical significance with multiple-test correction applied (FDR -log10). Set to -1 if not used.\"\\n)\\n'}]}, {'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { return inputs.input_bed.location.split(\\'/\\').slice(-1)[0].split(\\'.\\').slice(0,-1).join(\\'.\\')+\".bb\"; };', 'var get_bed_type = function() { if (inputs.input_bed.location.split(\\'.\\').slice(-1)[0].toLowerCase() == \"narrowpeak\"){ return \"bed6+4\"; } else if (inputs.input_bed.location.split(\\'.\\').slice(-1)[0].toLowerCase() == \"broadpeak\"){ return \"bed6+3\"; } else { return null; } };', 'var get_bed_template = function() { if (inputs.input_bed.location.split(\\'.\\').slice(-1)[0].toLowerCase() == \"narrowpeak\"){ return \"narrowpeak.as\"; } else if (inputs.input_bed.location.split(\\'.\\').slice(-1)[0].toLowerCase() == \"broadpeak\"){ return \"broadpeak.as\"; } else { return null; } };']}]",
    "cwl_doc": "Tool converts bed file to bigBed\n\nBefore running `baseCommand` the following files are created in Docker working directory (using\n`InitialWorkDirRequirement`):\n`narrowpeak.as` - default BED file structure template for ENCODE narrowPeak format\n`broadpeak.as`  - default BED file structure template for ENCODE broadPeak format\n\n`default_output_filename` function returns default output file name based on `input_bed` basename with `*.bb`\nextension if `output_filename` is not provided.\n\n`get_bed_type` function returns default BED file type if `bed_type` is not provided. Depending on `input_bed` file\nextension the following values are returned:\n  `*.narrowpeak`  -->   bed6+4\n  `*.broadpeak`   -->   bed6+3\n   else           -->   null (`bedToBigBed` will use its own default value)\n\n`get_bed_template` function returns default BED file template if `bed_template` is not provided. Depending on\n`input_bed` file extension the following values are returned:\n    `*.narrowpeak`  -->   narrowpeak.as (previously staged into Docker working directory)\n    `*.broadpeak`   -->   broadpeak.as (previously staged into Docker working directory)\n     else           -->   null (`bedToBigBed` will use its own default value)\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "ucsc-bedtobigbed",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "ucscuserapps/ucsc-bigwigtowig.cwl",
    "sha": "9e7720c58fbfef00e10c8ed36ace60bb56b87207",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/ucscuserapps/ucsc-bigwigtowig.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var default_output_filename = function() {\n            var basename = inputs.bigwig_file.location.split('/').slice(-1)[0];\n            var root = basename.split('.').slice(0,-1).join('.');\n            var ext = \".wig\";\n            return (root == \"\")?basename+ext:root+ext;\n          };\nhints:\n  DockerRequirement:\n    dockerPull: biowardrobe2/ucscuserapps:v358\n\ninputs:\n\n  bigwig_file:\n    type: File\n    inputBinding:\n      position: 1\n    doc: |\n      Input bigWig file\n\n  chrom:\n    type: string?\n    inputBinding:\n      position: 2\n      prefix: -chrom=\n      separate: false\n    doc: |\n      if set restrict output to given chromosome\n\n  start_pos:\n    type: int?\n    inputBinding:\n      position: 3\n      prefix: -start=\n      separate: false\n    doc: |\n      if set, restrict output to only that over start\n\n  end_pos:\n    type: int?\n    inputBinding:\n      position: 4\n      prefix: -end=\n      separate: false\n    doc: |\n      if set, restict output to only that under end\n\n  output_filename:\n    type: string?\n    inputBinding:\n      position: 5\n      valueFrom: |\n        ${\n            if (self == \"\"){\n              return default_output_filename();\n            } else {\n              return self;\n            }\n        }\n    default: \"\"\n    doc: |\n      If set, writes the output wig file to output_filename,\n      otherwise generates filename from default_output_filename()\n\n\noutputs:\n  wig_file:\n    type: File\n    outputBinding:\n      glob: |\n        ${\n            if (inputs.output_filename == \"\"){\n              return default_output_filename();\n            } else {\n              return inputs.output_filename;\n            }\n        }\n\nbaseCommand: bigWigToWig\n\n$namespaces:\n  s: http://schema.org/\n  edam: http://edamontology.org/\n  iana: https://www.iana.org/assignments/media-types/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"ucsc-bigwigtowig\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  Tool converts bigWig to Wig file. If input bigWig file was generated from bedGraph, the tool will\n  return output in bedGraph format.\n\n  `default_output_filename` function returns filename for generated Wig if `output_filename` is not provided.\n  Default filename is generated on the base of `bigwig_file` basename with the updated to `*.wig` extension.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'bigwig_file', 'doc': 'Input bigWig file\\n', 'inputBinding': {'position': 1}, 'type': 'File'}, {'id': 'chrom', 'doc': 'if set restrict output to given chromosome\\n', 'inputBinding': {'position': 2, 'prefix': '-chrom=', 'separate': False}, 'type': ['null', 'string']}, {'id': 'end_pos', 'doc': 'if set, restict output to only that under end\\n', 'inputBinding': {'position': 4, 'prefix': '-end=', 'separate': False}, 'type': ['null', 'int']}, {'id': 'output_filename', 'doc': 'If set, writes the output wig file to output_filename,\\notherwise generates filename from default_output_filename()\\n', 'inputBinding': {'position': 5, 'valueFrom': '${\\n    if (self == \"\"){\\n      return default_output_filename();\\n    } else {\\n      return self;\\n    }\\n}\\n'}, 'default': '', 'type': ['null', 'string']}, {'id': 'start_pos', 'doc': 'if set, restrict output to only that over start\\n', 'inputBinding': {'position': 3, 'prefix': '-start=', 'separate': False}, 'type': ['null', 'int']}]",
    "cwl_outputs": "[{'id': 'wig_file', 'outputBinding': {'glob': '${\\n    if (inputs.output_filename == \"\"){\\n      return default_output_filename();\\n    } else {\\n      return inputs.output_filename;\\n    }\\n}\\n'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/ucscuserapps:v358'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bigWigToWig",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/', 'edam': 'http://edamontology.org/', 'iana': 'https://www.iana.org/assignments/media-types/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { var basename = inputs.bigwig_file.location.split(\\'/\\').slice(-1)[0]; var root = basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); var ext = \".wig\"; return (root == \"\")?basename+ext:root+ext; };']}]",
    "cwl_doc": "Tool converts bigWig to Wig file. If input bigWig file was generated from bedGraph, the tool will\nreturn output in bedGraph format.\n\n`default_output_filename` function returns filename for generated Wig if `output_filename` is not provided.\nDefault filename is generated on the base of `bigwig_file` basename with the updated to `*.wig` extension.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "ucsc-bigwigtowig",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "ucscuserapps/ucsc-fa-to-twobit.cwl",
    "sha": "3242d63950cf69e02cfccee55850c82a375295c4",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/ucscuserapps/ucsc-fa-to-twobit.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/ucscuserapps:v358\n\n\nrequirements:\n- class: InlineJavascriptRequirement\n  expressionLib:\n  - var default_output_filename = function() {\n          if (inputs.output_filename == \"\"){\n            var root = inputs.fasta_file.basename.split('.').slice(0,-1).join('.');\n            return (root == \"\")?inputs.fasta_file.basename+\".2bit\":root+\".2bit\";\n          } else {\n            return inputs.output_filename;\n          }\n        };\n\n\ninputs:\n\n  fasta_file:\n    type: File\n    inputBinding:\n      position: 5\n    doc: \"Reference genome FASTA file\"\n\n  output_filename:\n    type: string?\n    default: \"\"\n    inputBinding:\n      valueFrom: $(default_output_filename())\n      position: 6\n    doc: \"Output file name\"\n\n\noutputs:\n\n  twobit_file:\n    type: File\n    outputBinding:\n      glob: $(default_output_filename())\n    doc: \"Reference genome 2bit file\"\n\n  stdout_log:\n    type: stdout\n\n  stderr_log:\n    type: stderr\n\n\nbaseCommand: [\"faToTwoBit\"]\nstdout: fa_to_twobit_stdout.log\nstderr: fa_to_twobit_stderr.log\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"ucsc-fa-to-twobit\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  faToTwoBit - Convert DNA from fasta to 2bit format\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'fasta_file', 'doc': 'Reference genome FASTA file', 'inputBinding': {'position': 5}, 'type': 'File'}, {'id': 'output_filename', 'doc': 'Output file name', 'inputBinding': {'position': 6, 'valueFrom': '$(default_output_filename())'}, 'default': '', 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'stderr_log', 'type': 'stderr'}, {'id': 'stdout_log', 'type': 'stdout'}, {'id': 'twobit_file', 'doc': 'Reference genome 2bit file', 'outputBinding': {'glob': '$(default_output_filename())'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/ucscuserapps:v358'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['faToTwoBit']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { if (inputs.output_filename == \"\"){ var root = inputs.fasta_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.fasta_file.basename+\".2bit\":root+\".2bit\"; } else { return inputs.output_filename; } };']}]",
    "cwl_doc": "faToTwoBit - Convert DNA from fasta to 2bit format\n",
    "cwl_stdout": "fa_to_twobit_stdout.log",
    "cwl_s:name": "ucsc-fa-to-twobit",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "fa_to_twobit_stderr.log",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "ucscuserapps/ucsc-genepredtogtf.cwl",
    "sha": "1f6c6c477c2541f60c49c3c4570cc8b31e57245d",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/ucscuserapps/ucsc-genepredtogtf.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/ucscuserapps:v358_2\n\n\nrequirements:\n- class: InlineJavascriptRequirement\n  expressionLib:\n  - var default_output_filename = function() {\n          if (inputs.output_filename == \"\"){\n            var root = inputs.annotation_tsv_file.basename.split('.').slice(0,-1).join('.');\n            return (root == \"\")?inputs.annotation_tsv_file.basename+\".gtf\":root+\".gtf\";\n          } else {\n            return inputs.output_filename;\n          }\n        };\n\n\ninputs:\n\n  script:\n    type: string?\n    default: |\n      #!/bin/bash\n      TSV_FILE=$0\n      GTF_FILE=$1\n      cut -f 2- $TSV_FILE | grep -v \"exonCount\" | genePredToGtf file stdin $GTF_FILE\n    inputBinding:\n      position: 5\n    doc: |\n      Bash function to run cut -f 2- in.gp | genePredToGtf file stdin out.gp\n\n  annotation_tsv_file:\n    type: File\n    inputBinding:\n      position: 6\n    doc: \"TSV annotation file from UCSC Genome Browser\"\n\n  output_filename:\n    type: string?\n    default: \"\"\n    inputBinding:\n      valueFrom: $(default_output_filename())\n      position: 7\n    doc: \"Output file name\"\n\n\noutputs:\n\n  annotation_gtf_file:\n    type: File\n    outputBinding:\n      glob: $(default_output_filename())\n    doc: \"GTF annotation file\"\n\n  stdout_log:\n    type: stdout\n\n  stderr_log:\n    type: stderr\n\n\nbaseCommand: [\"bash\", \"-c\"]\n\n\nstdout: genepredtogtf_stdout.log\nstderr: genepredtogtf_stderr.log\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"ucsc-genepredtogtf\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  genePredToGtf - Convert genePred table or file to gtf\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'annotation_tsv_file', 'doc': 'TSV annotation file from UCSC Genome Browser', 'inputBinding': {'position': 6}, 'type': 'File'}, {'id': 'output_filename', 'doc': 'Output file name', 'inputBinding': {'position': 7, 'valueFrom': '$(default_output_filename())'}, 'default': '', 'type': ['null', 'string']}, {'id': 'script', 'doc': 'Bash function to run cut -f 2- in.gp | genePredToGtf file stdin out.gp\\n', 'inputBinding': {'position': 5}, 'default': '#!/bin/bash\\nTSV_FILE=$0\\nGTF_FILE=$1\\ncut -f 2- $TSV_FILE | grep -v \"exonCount\" | genePredToGtf file stdin $GTF_FILE\\n', 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'annotation_gtf_file', 'doc': 'GTF annotation file', 'outputBinding': {'glob': '$(default_output_filename())'}, 'type': 'File'}, {'id': 'stderr_log', 'type': 'stderr'}, {'id': 'stdout_log', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/ucscuserapps:v358_2'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', '-c']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement', 'expressionLib': ['var default_output_filename = function() { if (inputs.output_filename == \"\"){ var root = inputs.annotation_tsv_file.basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); return (root == \"\")?inputs.annotation_tsv_file.basename+\".gtf\":root+\".gtf\"; } else { return inputs.output_filename; } };']}]",
    "cwl_doc": "genePredToGtf - Convert genePred table or file to gtf\n",
    "cwl_stdout": "genepredtogtf_stdout.log",
    "cwl_s:name": "ucsc-genepredtogtf",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": "genepredtogtf_stderr.log",
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "ucscuserapps/ucsc-twobit-to-fa.cwl",
    "sha": "c1395866f6a98b0fea3f73f305a4ebaa4270f8cd",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/ucscuserapps/ucsc-twobit-to-fa.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\n\nhints:\n- class: DockerRequirement\n  dockerPull: biowardrobe2/ucscuserapps:v358_2\n\n\nrequirements:\n- class: InlineJavascriptRequirement\n- class: InitialWorkDirRequirement\n  listing: |\n    ${\n      return  [\n                {\n                  \"entry\": inputs.reference_file,\n                  \"entryname\": inputs.reference_file.basename,\n                  \"writable\": true\n                }\n              ]\n    }\n\ninputs:\n\n  script:\n    type: string?\n    default: |\n      #!/bin/bash\n      set -e\n      if [[ $0 == *.fasta ]] || [[ $0 == *.fa ]]; then\n          echo \"Skip extract step\"\n      elif [[ $0 == *.gz ]]; then\n          gunzip -c $0 > \"${0%%.*}\".fa\n          rm $0\n      else\n          twoBitToFa $0 \"${0%%.*}\".fa\n          rm $0\n      fi\n      if [ \"$#\" -ge 1 ]; then\n          FILTER=${@:1}\n          FILTER=$( IFS=$','; echo \"${FILTER[*]}\" )\n          FILTER=(${FILTER//, / })\n          echo \"Filtering by\" ${FILTER[*]}\n          samtools faidx \"${0%%.*}\".fa ${FILTER[*]} > t.fa\n          mv t.fa \"${0%%.*}\".fa\n          rm \"${0%%.*}\".fa.fai\n      fi\n    inputBinding:\n      position: 5\n    doc: |\n      Bash function to run twoBitToFa or gunzip to extract and samtools to filter chromosomes\n\n  reference_file:\n    type: File\n    inputBinding:\n      position: 6\n    doc: \"Reference genome *.2bit, *.fasta, *.fa, *.fa.gz, *.fasta.gz file\"\n\n  chr_list:\n    type:\n      - \"null\"\n      - string\n      - string[]\n    inputBinding:\n      position: 8\n    doc: \"List of the chromosomes to be included into the output file. If pass as string, should be comma-separated\"\n\noutputs:\n\n  fasta_file:\n    type: File\n    outputBinding:\n      glob: \"*\"\n    doc: \"Reference genome FASTA file\"\n\n\nbaseCommand: [\"bash\", \"-c\"]\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\ns:name: \"ucsc-twobit-to-fa\"\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  twoBitToFa - Convert all or part of .2bit file to fasta.\n  Outputs only those chromosomes that are set in chr_list intput.\n  Tool will fail if you include in chr_list those chromosomes that are absent in 2bit file.\n  If gz is provided - use gunzip instead of twoBitToFa\n  If FASTA file is provided, do nothing\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'chr_list', 'doc': 'List of the chromosomes to be included into the output file. If pass as string, should be comma-separated', 'inputBinding': {'position': 8}, 'type': ['null', 'string', {'items': 'string', 'type': 'array'}]}, {'id': 'reference_file', 'doc': 'Reference genome *.2bit, *.fasta, *.fa, *.fa.gz, *.fasta.gz file', 'inputBinding': {'position': 6}, 'type': 'File'}, {'id': 'script', 'doc': 'Bash function to run twoBitToFa or gunzip to extract and samtools to filter chromosomes\\n', 'inputBinding': {'position': 5}, 'default': '#!/bin/bash\\nset -e\\nif [[ $0 == *.fasta ]] || [[ $0 == *.fa ]]; then\\n    echo \"Skip extract step\"\\nelif [[ $0 == *.gz ]]; then\\n    gunzip -c $0 > \"${0%%.*}\".fa\\n    rm $0\\nelse\\n    twoBitToFa $0 \"${0%%.*}\".fa\\n    rm $0\\nfi\\nif [ \"$#\" -ge 1 ]; then\\n    FILTER=${@:1}\\n    FILTER=$( IFS=$\\',\\'; echo \"${FILTER[*]}\" )\\n    FILTER=(${FILTER//, / })\\n    echo \"Filtering by\" ${FILTER[*]}\\n    samtools faidx \"${0%%.*}\".fa ${FILTER[*]} > t.fa\\n    mv t.fa \"${0%%.*}\".fa\\n    rm \"${0%%.*}\".fa.fai\\nfi\\n', 'type': ['null', 'string']}]",
    "cwl_outputs": "[{'id': 'fasta_file', 'doc': 'Reference genome FASTA file', 'outputBinding': {'glob': '*'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biowardrobe2/ucscuserapps:v358_2'}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "['bash', '-c']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}, {'class': 'InitialWorkDirRequirement', 'listing': '${\\n  return  [\\n            {\\n              \"entry\": inputs.reference_file,\\n              \"entryname\": inputs.reference_file.basename,\\n              \"writable\": true\\n            }\\n          ]\\n}\\n'}]",
    "cwl_doc": "twoBitToFa - Convert all or part of .2bit file to fasta.\nOutputs only those chromosomes that are set in chr_list intput.\nTool will fail if you include in chr_list those chromosomes that are absent in 2bit file.\nIf gz is provided - use gunzip instead of twoBitToFa\nIf FASTA file is provided, do nothing\n",
    "cwl_stdout": null,
    "cwl_s:name": "ucsc-twobit-to-fa",
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "unicycler/unicycler.cwl",
    "sha": "dd3d959dd883808832c4036ee3b09ea98c5a9fd0",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/unicycler/unicycler.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\n\ndoc: |\n  CWL  wrapped for Unicycler.\n  an hybrid assembly pipeline for bacterial genomes\n  see  https://github.com/rrwick/Unicycler\n  outputs\n    final assembly in FASTA format (major output)\n    final assembly grapth in graph format, visualized using tools such as\n    Bandage  https://github.com/rrwick/Bandage\nrequirements:\n  InlineJavascriptRequirement: {}\n  InitialWorkDirRequirement:\n    listing:\n      - entryname: unicycler_launch.sh\n        entry: |\n          #!/bin/bash\n          ###########################\n          #      unicycler launcher\n          ###########################\n\n          ##preparing input files\n          #check permission / chmod  is issues\n          ${\n            var fl=\"\"\n            var lncmd=\"\"\n            var fq1=\"\"\n            var fq2=\"\"\n            var lr=\"\"\n\n          //###################paired case\n                if (inputs.fastq_file_type ==\"paired\"  ){\n                 if( inputs.fastq1_type=='fastqsanger' ){\n                     fq1 = \"fq1.fastq\"\n                 }\n                 else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                      fq1 = \"fq1.fastq.gz\"\n                 }\n                 if( inputs.fastq2_type=='fastqsanger' ){\n                     fq2 = \"fq2.fastq\"\n                  }\n                  else if( inputs.fastq2_type=='fastqsanger.gz' ){\n                      fq2 = \"fq2.fastq.gz\"\n                   }\n                   lncmd+=\"fq1='\"+fq1+\"'\"\n                   lncmd+=\" && \"\n                   lncmd+=\"fq2='\"+fq2+\"'\"\n                   lncmd+=\" && \"\n                   lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n                   lncmd+=\" && \"\n                   lncmd+=\" ln -s '\"+inputs.fastq2.path+\"' $fq2  \"\n\n                }\n           //###################single case\n \n           if (inputs.fastq_file_type ==\"single\"  ){\n             if( inputs.fastq1_type=='fastqsanger' ){\n                 fq1 = \"fq1.fastq\"\n             }\n             else if( inputs.fastq1_type=='fastqsanger.gz' ){\n                  fq1 = \"fq1.fastq.gz\"\n             }\n             lncmd+=\"fq1='\"+fq1+\"'\"\n             lncmd+=\" && \"\n             lncmd+=\" ln -s '\"+inputs.fastq1.path+\"' $fq1 \"\n            }\n            //####### long reads\n             if (  inputs.sequence_long !== null) {\n                 if (inputs.sequence_long_type=='fastqsanger'){\n                          lr = \"lr.fastq\"\n                 }\n                 else if (inputs.sequence_long_type=='fastqsanger.gz') {\n                          lr = \"lr.fastq.gz\"\n                 }\n                 else if (inputs.sequence_longg_type=='fasta') {\n                          lr = \"lr.fasta\"\n                 }\n                 lncmd+=\"lr='\"+lr+\"'\"\n                 lncmd+=\" && \"\n                 lncmd+= \" ln -s '\"+inputs.sequence_long.path+\"' '$lr' \"\n             }\n             return lncmd\n          }\n\n          ##general options\n\n          read -d '' GENERALOPT << EOF\n          ${\n           var opt=\"\"\n           //## General Unicycler Options section\n           opt+=\" --mode \"+inputs.mode+\" \"\n           opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\n           opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\n\n           if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\n\n           //## Spades Options section\n           if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\n           opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\n           opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\n           if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\n\n           opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\n           opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\n           if (inputs.spades_largest_component){opt+=\" --largest_component \"}\n           //## Rotation Options section\n           if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\n           if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\n           opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\n           opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\n           return opt\n           }\n          EOF\n\n          ##additionnal option\n\n          read -d '' ADDOPT << EOF\n          ${\n\n           var opt=\"\"\n\n           if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\n           if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\n           //## Long Read Alignment Options\n           if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\n           opt+=\" --scores \"+inputs.lr_align_scores+\" \"\n           if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\n            return ''+ opt + ''\n          }\n          EOF\n\n          ## Get location for pilon jar file\n\n          ${\n            var cmd=\"\"\n            cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\n            return cmd\n          }\n\n          ## Build Unicycler command\n          ${\n\n            var cmd_base=\"\"\n            var opt=\"\"\n\n            cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\n            cmd_base+=\" -o ./  \"\n            cmd_base+=\" --verbosity 3  \"\n            cmd_base+=\" --pilon_path \\$PILONJAR  \"\n\n           if ( inputs.fastq_file_type == \"paired\"){\n                  opt+=\" -1 $fq1 -2 $fq2  \"\n           }\n           else if ( inputs.fastq_file_type == \"paired_collection\"){\n                  opt+=\" -1 $fq1 -2 $fq2  \"\n           }\n           else if ( inputs.fastq_file_type == \"single\"){\n              opt+=\" -s $fq1 \"\n           }\n           if (  inputs.sequence_long !== null) {\n             opt+=\" -l $lr \"\n           }\n\n           //##  Unicycler command\n           var cmdl=cmd_base+\" \"+opt+\" \\$GENERALOPT \\$ADDOPT \"\n\n           return cmdl\n\n           }\ninputs:\n  fastq_file_type:\n    doc: Paired and single end data\n    type:\n      type: enum\n      symbols:\n      - paired\n      - single\n  fastq1_type:\n    doc: Type of the First set of reads. Only when fastq_file_type = single  or  paired\n    type:\n      type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n    default: fastqsanger\n  fastq1:\n    doc: |-\n      First set of reads with forward reads. Only when fastq_file_type = single or paired\n    type: File\n  fastq2_type:\n    doc: Type of the Second set of reads. Only when fastq_file_type=paired\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n    default: 'null'\n  fastq2:\n    doc: Second set of reads with reverse reads. Only when fastq_file_type=paired\n    type: File?\n  sequence_long_type:\n    doc: long reads file type. If there are no long reads, leave this empty\n    type:\n    - 'null'\n    - type: enum\n      symbols:\n      - fastqsanger\n      - fastqsanger.gz\n      - fasta\n  sequence_long:\n    doc: long reads. If there are no long reads, leave this empty\n    type: File?\n  compute_slots:\n    type: int?\n    default: 4\n  mode:\n    doc: |\n      Bridging mode, values:\n      conservative (smaller contigs, lower misassembly)\n      normal (moderate contig size and misassembly rate)\n      bold  (longest contigs, higher misassembly rate)\n    type:\n      type: enum\n      symbols:\n      - conservative\n      - normal\n      - bold\n  min_fasta_length:\n    doc: Exclude contigs from the FASTA file which are shorter than this length (bp)\n    type: int?\n    default: 100\n  linear_seqs:\n    doc: The expected number of linear (i.e. non-circular) sequences in the assembly\n    type: int?\n    default: 0\n  min_anchor_seg_len:\n    doc: Unicycler will not use segments shorter than this as scaffolding anchors\n    type: int?\n    default: 0\n  spades_no_correct:\n    doc: |\n      Unicycler uses SPAdes to construct assembly graphs.\n      You can modify some of the SPAdes settings here.\n      Use this ONLY if you know what you are doing!\n      This option turns off SPAdes error correction.\n      Generally it is highly recommended to use correction.\n    type: boolean?\n    default: false\n  spades_min_kmer_frac:\n    doc: |\n      Lowest k-mer size for SPAdes assembly,\n      expressed as a fraction of the read length.\n      min 0, max 1\n    type: float?\n    default: 0.2\n  spades_max_kmer_frac:\n    doc: |\n      Highest k-mer size for SPAdes assembly,\n      expressed as a fraction of the read length.\n      min 0, max 1\n    type: float?\n    default: 0.95\n  spades_kmers:\n    doc: |\n      Exact k-mers size to use for SPAdes assembly, comma-separated\"\n      Kmers must be comma-separated odd integers (no repitition)\n      without space in the range of 11 to 127 (inclusive)\n    type: string?\n    default: 11,127\n  spades_kmer_count:\n    doc: Number of k-mer steps to use in SPAdes assembly, min 0\n    type: int?\n    default: 10\n  spades_depth_filter:\n    doc: |\n      Filter out contigs lower than this fraction\n      of the chromosomal depth.\n      It is done if does not result in graph dead ends\n      min 0, max 1\n    type: float?\n    default: 0.25\n  spades_largest_component:\n    doc: Only keep the largest connected component of the assembly graph if true\n    type: boolean?\n    default: false\n  rotation_no_rotate:\n    doc: |\n      These options control the rotation of completed circular sequence\n      near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\n      Do not rotate completed replicons to start at a standard gene.\n      Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\n      If one is found, the sequence is rotated and/or flipped so that it begins with that gene\n      encoded on the forward strand. This provides consistently oriented assemblies and reduces\n      the risk that a gene will be split across the start and end of the sequence.\n    type: boolean?\n    default: false\n  rotation_start_genes:\n    doc: FASTA file of genes for start point of rotated replicons\n    type: File?\n  rotation_start_gene_id:\n    doc: |-\n      The minimum required BLAST percent identity for a start gene search. max 100, min 0\n    type: float?\n    default: 90.0\n  rotation_start_gene_cov:\n    doc: |-\n      The minimum required BLAST percent coverage for a start gene search. min 0, max 100\n    type: float?\n    default: 95.0\n  pilon_no_pilon:\n    doc: Unicycler uses Pilon tool for polishing final assembly. Do not use if true\n    type: boolean?\n    default: false\n  graph_clean_min_component_size:\n    doc: Contigs shorter than this value (bp) will not be polished using Pilon; min 0\n    type: int?\n    default: 1000\n  graph_clean_min_dead_end_size:\n    doc: |\n      These options control the removal of small leftover sequences after bridging is complete.\n      Unbridged graph components smaller than this size will be removed from the final graph,\n      min 0\n    type: int?\n    default: 1000\n  lr_align_contamination:\n    doc: |\n      FASTA file of known contamination in long reads,\n      e.g. lambda, phiXm or puc18 spike-ins.\n    type: File?\n  lr_align_scores:\n    doc: |\n      Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\n    type: string?\n    default: 3,-6,-5,-2\n  lr_align_low_score:\n    doc: |\n      Score threshold - alignments below this are considered poor,\n      default = set automatically\n    type: int?\noutputs:\n  assembly_graph:\n    type: File\n    outputBinding:\n      glob: assembly.gfa\n  assembly:\n    doc: |\n      fasta assembly output sequence\n      (main output)\n    type: File\n    outputBinding:\n      glob: assembly.fasta\n  # exec_script:\n  #   doc: |\n  #     Launching script for learning purpose\n  #   type: File\n  #   outputBinding:\n  #     glob: '*.sh'\n\nbaseCommand: bash\n\narguments:\n- unicycler_launch.sh\n\nhints:\n  DockerRequirement:\n    dockerPull: biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1\n  SoftwareRequirement:\n    packages:\n      unicycler:\n        specs: [ https://identifiers.org/biotools/unicycler ]\n        version: [ \"0.4.7\" ]\n\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'compute_slots', 'default': 4, 'type': ['null', 'int']}, {'id': 'fastq1', 'doc': 'First set of reads with forward reads. Only when fastq_file_type = single or paired', 'type': 'File'}, {'id': 'fastq1_type', 'doc': 'Type of the First set of reads. Only when fastq_file_type = single  or  paired', 'default': 'fastqsanger', 'type': {'name': '_:0e9bfa18-ddb0-47ab-b404-8aa8e6541f06', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#fastq1_type/fastqsanger', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#fastq1_type/fastqsanger.gz'], 'type': 'enum'}}, {'id': 'fastq2', 'doc': 'Second set of reads with reverse reads. Only when fastq_file_type=paired', 'type': ['null', 'File']}, {'id': 'fastq2_type', 'doc': 'Type of the Second set of reads. Only when fastq_file_type=paired', 'default': 'null', 'type': ['null', {'name': '_:3b1462f4-317d-4f51-b535-59c15916e421', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#fastq2_type/fastqsanger', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#fastq2_type/fastqsanger.gz'], 'type': 'enum'}]}, {'id': 'fastq_file_type', 'doc': 'Paired and single end data', 'type': {'name': '_:49f6b70f-7388-48e5-852f-47bd8733e59b', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#fastq_file_type/paired', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#fastq_file_type/single'], 'type': 'enum'}}, {'id': 'graph_clean_min_component_size', 'doc': 'Contigs shorter than this value (bp) will not be polished using Pilon; min 0', 'default': 1000, 'type': ['null', 'int']}, {'id': 'graph_clean_min_dead_end_size', 'doc': 'These options control the removal of small leftover sequences after bridging is complete.\\nUnbridged graph components smaller than this size will be removed from the final graph,\\nmin 0\\n', 'default': 1000, 'type': ['null', 'int']}, {'id': 'linear_seqs', 'doc': 'The expected number of linear (i.e. non-circular) sequences in the assembly', 'default': 0, 'type': ['null', 'int']}, {'id': 'lr_align_contamination', 'doc': 'FASTA file of known contamination in long reads,\\ne.g. lambda, phiXm or puc18 spike-ins.\\n', 'type': ['null', 'File']}, {'id': 'lr_align_low_score', 'doc': 'Score threshold - alignments below this are considered poor,\\ndefault = set automatically\\n', 'type': ['null', 'int']}, {'id': 'lr_align_scores', 'doc': 'Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend\\n', 'default': '3,-6,-5,-2', 'type': ['null', 'string']}, {'id': 'min_anchor_seg_len', 'doc': 'Unicycler will not use segments shorter than this as scaffolding anchors', 'default': 0, 'type': ['null', 'int']}, {'id': 'min_fasta_length', 'doc': 'Exclude contigs from the FASTA file which are shorter than this length (bp)', 'default': 100, 'type': ['null', 'int']}, {'id': 'mode', 'doc': 'Bridging mode, values:\\nconservative (smaller contigs, lower misassembly)\\nnormal (moderate contig size and misassembly rate)\\nbold  (longest contigs, higher misassembly rate)\\n', 'type': {'name': '_:fe3be4d8-c4ec-4c78-9455-e8efe697813b', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#mode/conservative', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#mode/normal', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#mode/bold'], 'type': 'enum'}}, {'id': 'pilon_no_pilon', 'doc': 'Unicycler uses Pilon tool for polishing final assembly. Do not use if true', 'default': False, 'type': ['null', 'boolean']}, {'id': 'rotation_no_rotate', 'doc': 'These options control the rotation of completed circular sequence\\nnear the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!\\nDo not rotate completed replicons to start at a standard gene.\\nUnicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon.\\nIf one is found, the sequence is rotated and/or flipped so that it begins with that gene\\nencoded on the forward strand. This provides consistently oriented assemblies and reduces\\nthe risk that a gene will be split across the start and end of the sequence.\\n', 'default': False, 'type': ['null', 'boolean']}, {'id': 'rotation_start_gene_cov', 'doc': 'The minimum required BLAST percent coverage for a start gene search. min 0, max 100', 'default': 95.0, 'type': ['null', 'float']}, {'id': 'rotation_start_gene_id', 'doc': 'The minimum required BLAST percent identity for a start gene search. max 100, min 0', 'default': 90.0, 'type': ['null', 'float']}, {'id': 'rotation_start_genes', 'doc': 'FASTA file of genes for start point of rotated replicons', 'type': ['null', 'File']}, {'id': 'sequence_long', 'doc': 'long reads. If there are no long reads, leave this empty', 'type': ['null', 'File']}, {'id': 'sequence_long_type', 'doc': 'long reads file type. If there are no long reads, leave this empty', 'type': ['null', {'name': '_:e7ef61fb-9b4a-456a-aead-42e37f85673e', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#sequence_long_type/fastqsanger', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#sequence_long_type/fastqsanger.gz', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#sequence_long_type/fasta'], 'type': 'enum'}]}, {'id': 'spades_depth_filter', 'doc': 'Filter out contigs lower than this fraction\\nof the chromosomal depth.\\nIt is done if does not result in graph dead ends\\nmin 0, max 1\\n', 'default': 0.25, 'type': ['null', 'float']}, {'id': 'spades_kmer_count', 'doc': 'Number of k-mer steps to use in SPAdes assembly, min 0', 'default': 10, 'type': ['null', 'int']}, {'id': 'spades_kmers', 'doc': 'Exact k-mers size to use for SPAdes assembly, comma-separated\"\\nKmers must be comma-separated odd integers (no repitition)\\nwithout space in the range of 11 to 127 (inclusive)\\n', 'default': '11,127', 'type': ['null', 'string']}, {'id': 'spades_largest_component', 'doc': 'Only keep the largest connected component of the assembly graph if true', 'default': False, 'type': ['null', 'boolean']}, {'id': 'spades_max_kmer_frac', 'doc': 'Highest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length.\\nmin 0, max 1\\n', 'default': 0.95, 'type': ['null', 'float']}, {'id': 'spades_min_kmer_frac', 'doc': 'Lowest k-mer size for SPAdes assembly,\\nexpressed as a fraction of the read length.\\nmin 0, max 1\\n', 'default': 0.2, 'type': ['null', 'float']}, {'id': 'spades_no_correct', 'doc': 'Unicycler uses SPAdes to construct assembly graphs.\\nYou can modify some of the SPAdes settings here.\\nUse this ONLY if you know what you are doing!\\nThis option turns off SPAdes error correction.\\nGenerally it is highly recommended to use correction.\\n', 'default': False, 'type': ['null', 'boolean']}]",
    "cwl_outputs": "[{'id': 'assembly', 'doc': 'fasta assembly output sequence\\n(main output)\\n', 'outputBinding': {'glob': 'assembly.fasta'}, 'type': 'File'}, {'id': 'assembly_graph', 'outputBinding': {'glob': 'assembly.gfa'}, 'type': 'File'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'biocontainers/unicycler:v0.4.7dfsg-2-deb_cv1'}, {'class': 'SoftwareRequirement', 'packages': [{'package': 'unicycler', 'version': ['0.4.7'], 'specs': ['https://identifiers.org/biotools/unicycler']}]}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "bash",
    "cwl_arguments": "['unicycler_launch.sh']",
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': [{'entryname': 'unicycler_launch.sh', 'entry': '#!/bin/bash\\n###########################\\n#      unicycler launcher\\n###########################\\n\\n##preparing input files\\n#check permission / chmod  is issues\\n${\\n  var fl=\"\"\\n  var lncmd=\"\"\\n  var fq1=\"\"\\n  var fq2=\"\"\\n  var lr=\"\"\\n\\n//###################paired case\\n      if (inputs.fastq_file_type ==\"paired\"  ){\\n       if( inputs.fastq1_type==\\'fastqsanger\\' ){\\n           fq1 = \"fq1.fastq\"\\n       }\\n       else if( inputs.fastq1_type==\\'fastqsanger.gz\\' ){\\n            fq1 = \"fq1.fastq.gz\"\\n       }\\n       if( inputs.fastq2_type==\\'fastqsanger\\' ){\\n           fq2 = \"fq2.fastq\"\\n        }\\n        else if( inputs.fastq2_type==\\'fastqsanger.gz\\' ){\\n            fq2 = \"fq2.fastq.gz\"\\n         }\\n         lncmd+=\"fq1=\\'\"+fq1+\"\\'\"\\n         lncmd+=\" && \"\\n         lncmd+=\"fq2=\\'\"+fq2+\"\\'\"\\n         lncmd+=\" && \"\\n         lncmd+=\" ln -s \\'\"+inputs.fastq1.path+\"\\' $fq1 \"\\n         lncmd+=\" && \"\\n         lncmd+=\" ln -s \\'\"+inputs.fastq2.path+\"\\' $fq2  \"\\n\\n      }\\n //###################single case\\n\\n if (inputs.fastq_file_type ==\"single\"  ){\\n   if( inputs.fastq1_type==\\'fastqsanger\\' ){\\n       fq1 = \"fq1.fastq\"\\n   }\\n   else if( inputs.fastq1_type==\\'fastqsanger.gz\\' ){\\n        fq1 = \"fq1.fastq.gz\"\\n   }\\n   lncmd+=\"fq1=\\'\"+fq1+\"\\'\"\\n   lncmd+=\" && \"\\n   lncmd+=\" ln -s \\'\"+inputs.fastq1.path+\"\\' $fq1 \"\\n  }\\n  //####### long reads\\n   if (  inputs.sequence_long !== null) {\\n       if (inputs.sequence_long_type==\\'fastqsanger\\'){\\n                lr = \"lr.fastq\"\\n       }\\n       else if (inputs.sequence_long_type==\\'fastqsanger.gz\\') {\\n                lr = \"lr.fastq.gz\"\\n       }\\n       else if (inputs.sequence_longg_type==\\'fasta\\') {\\n                lr = \"lr.fasta\"\\n       }\\n       lncmd+=\"lr=\\'\"+lr+\"\\'\"\\n       lncmd+=\" && \"\\n       lncmd+= \" ln -s \\'\"+inputs.sequence_long.path+\"\\' \\'$lr\\' \"\\n   }\\n   return lncmd\\n}\\n\\n##general options\\n\\nread -d \\'\\' GENERALOPT << EOF\\n${\\n var opt=\"\"\\n //## General Unicycler Options section\\n opt+=\" --mode \"+inputs.mode+\" \"\\n opt+=\" --min_fasta_length \"+inputs.min_fasta_length+\" \"\\n opt+=\" --linear_seqs \"+inputs.linear_seqs+\" \"\\n\\n if (inputs.min_anchor_seg_len  != null ){opt+=\" --min_anchor_seg_len \"+inputs.min_anchor_seg_len+\" \"}\\n\\n //## Spades Options section\\n if(inputs.spades_no_correct==true){opt+=\" --no_correct \"}\\n opt+=\" --min_kmer_frac \"+inputs.spades_min_kmer_frac+\" \"\\n opt+=\" --max_kmer_frac \"+inputs.spades_max_kmer_frac+\" \"\\n if (inputs.spades_kmers   != null){opt+=\" --kmers \"+inputs.spades_kmers+\" \"}\\n\\n opt+=\" --kmer_count \"+inputs.spades_kmer_count+\" \"\\n opt+=\" --depth_filter \"+inputs.spades_depth_filter+\" \"\\n if (inputs.spades_largest_component){opt+=\" --largest_component \"}\\n //## Rotation Options section\\n if(inputs.rotation_no_rotate == true){ opt+=\" --no_rotate \"}\\n if (inputs.rotation_start_genes!=null){opt+=\" --start_genes \"+ inputs.rotation_start_genes.path+ \" \"}\\n opt+=\" --start_gene_id \"+inputs.rotation_start_gene_id+\" \"\\n opt+=\" --start_gene_cov \"+inputs.rotation_start_gene_cov+\" \"\\n return opt\\n }\\nEOF\\n\\n##additionnal option\\n\\nread -d \\'\\' ADDOPT << EOF\\n${\\n\\n var opt=\"\"\\n\\n if (inputs.pilon_no_pilon  == true){ opt+=\" --no_pilon \" }\\n if (inputs.pilon_min_polish_size  != null){opt+=\" --min_polish_size \"+inputs.pilon_min_polish_size + \" \"}\\n //## Long Read Alignment Options\\n if ( inputs.lr_align_contamination!=null){opt+=\" --contamination \"+inputs.lr_align_contamination + \" \"}\\n opt+=\" --scores \"+inputs.lr_align_scores+\" \"\\n if (inputs.lr_align_low_score != null){opt+=\" --low_score \"+inputs.lr_align_low_score+\" \"}\\n  return \\'\\'+ opt + \\'\\'\\n}\\nEOF\\n\\n## Get location for pilon jar file\\n\\n${\\n  var cmd=\"\"\\n  cmd+=\"PILONJAR=/usr/share/java/pilon.jar \"\\n  return cmd\\n}\\n\\n## Build Unicycler command\\n${\\n\\n  var cmd_base=\"\"\\n  var opt=\"\"\\n\\n  cmd_base+=\" unicycler -t \"+inputs.compute_slots+\"  \"\\n  cmd_base+=\" -o ./  \"\\n  cmd_base+=\" --verbosity 3  \"\\n  cmd_base+=\" --pilon_path \\\\$PILONJAR  \"\\n\\n if ( inputs.fastq_file_type == \"paired\"){\\n        opt+=\" -1 $fq1 -2 $fq2  \"\\n }\\n else if ( inputs.fastq_file_type == \"paired_collection\"){\\n        opt+=\" -1 $fq1 -2 $fq2  \"\\n }\\n else if ( inputs.fastq_file_type == \"single\"){\\n    opt+=\" -s $fq1 \"\\n }\\n if (  inputs.sequence_long !== null) {\\n   opt+=\" -l $lr \"\\n }\\n\\n //##  Unicycler command\\n var cmdl=cmd_base+\" \"+opt+\" \\\\$GENERALOPT \\\\$ADDOPT \"\\n\\n return cmdl\\n\\n }\\n'}]}, {'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "CWL  wrapped for Unicycler.\nan hybrid assembly pipeline for bacterial genomes\nsee  https://github.com/rrwick/Unicycler\noutputs\n  final assembly in FASTA format (major output)\n  final assembly grapth in graph format, visualized using tools such as\n  Bandage  https://github.com/rrwick/Bandage\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "util/awk.cwl",
    "sha": "11d8d89eca58d9038b6cbeab1f9e104517520ca1",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/util/awk.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nlabel: awk\ndoc: pattern scanning and processing with awk\n$namespaces:\n  s: http://schema.org/\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\nhints:\n  DockerRequirement:\n    dockerPull: busybox:latest\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10\n\ninputs:\n  field_separator:\n    doc: string that separaters fields on a line\n    type: string?\n    inputBinding:\n      prefix: -F\n  inherit_format:\n    doc: copy format from target_files input to result output\n    type: boolean?\n  program:\n    doc: AWK program\n    type: string\n    inputBinding:\n      prefix: -e\n  target_files:\n    doc: files to apply program to\n    type: File[]\n    inputBinding:\n      position: 100\n    streamable: true\n  variable_setting:\n    doc: one or more strings of the format VAR=VALUE to set VAR to VALUE\n    type: string[]?\n    inputBinding:\n      prefix: -v\n\noutputs:\n  result:\n    type: stdout\n    format: |-\n      $(inputs.inherit_format && inputs.target_files[0].format ? inputs.target_files[0].format : null)\n    streamable: true\nstdout: \"awk_result$( inputs.inherit_format ? inputs.target_files[0].nameext : '.txt')\"\n\nbaseCommand: awk\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\ns:author:\n- class: s:Person\n  s:email: mailto:pvh@sanbi.ac.za\n  s:identifier: https://orcid.org/0000-0001-6553-5274\n  s:name: Peter van Heusden\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'field_separator', 'doc': 'string that separaters fields on a line', 'inputBinding': {'prefix': '-F'}, 'type': ['null', 'string']}, {'id': 'inherit_format', 'doc': 'copy format from target_files input to result output', 'type': ['null', 'boolean']}, {'id': 'program', 'doc': 'AWK program', 'inputBinding': {'prefix': '-e'}, 'type': 'string'}, {'id': 'target_files', 'streamable': True, 'doc': 'files to apply program to', 'inputBinding': {'position': 100}, 'type': {'items': 'File', 'type': 'array'}}, {'id': 'variable_setting', 'doc': 'one or more strings of the format VAR=VALUE to set VAR to VALUE', 'inputBinding': {'prefix': '-v'}, 'type': ['null', {'items': 'string', 'type': 'array'}]}]",
    "cwl_outputs": "[{'id': 'result', 'streamable': True, 'format': '$(inputs.inherit_format && inputs.target_files[0].format ? inputs.target_files[0].format : null)', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'busybox:latest'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 10}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "awk",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "pattern scanning and processing with awk",
    "cwl_stdout": "awk_result$( inputs.inherit_format ? inputs.target_files[0].nameext : '.txt')",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "awk",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:email': 'mailto:pvh@sanbi.ac.za', 's:identifier': 'https://orcid.org/0000-0001-6553-5274', 's:name': 'Peter van Heusden'}]",
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "util/grep.cwl",
    "sha": "74532bc93fdafbcfda2c247b3b2dc7ae3bb0ec01",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/util/grep.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: CommandLineTool\nlabel: grep\ndoc: print lines that match patterns\n$namespaces:\n  s: http://schema.org/\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  DockerRequirement:\n    dockerPull: busybox:latest\n  ResourceRequirement:\n    coresMin: 1\n    ramMin: 10\n\ninputs:\n  ignore_case:\n    doc: ignore case while matching\n    type: boolean?\n    inputBinding:\n      prefix: -i\n  inherit_format:\n    doc: copy format from search_target input to result output\n    type: boolean?\n  invert_selection:\n    doc: print non-matching lines\n    type: boolean?\n    inputBinding:\n      prefix: -v\n  line_no:\n    doc: add line number prefix to results\n    type: boolean?\n    inputBinding:\n      prefix: -n\n  lines_after:\n    doc: print up to N lines of trailing content\n    type: int?\n    inputBinding:\n      prefix: -A\n  lines_before:\n    doc: print up to N lines of leading content\n    type: int?\n    inputBinding:\n      prefix: -B\n  literal_pattern:\n    doc: interpret the pattern as a literal string, not a regular expression\n    type: boolean?\n    inputBinding:\n      prefix: -F\n  pattern:\n    doc: pattern to search for\n    type: string\n    inputBinding:\n      prefix: -e\n  search_target:\n    doc: file to search\n    type: File\n    inputBinding:\n      position: 100\n    streamable: true\n\noutputs:\n  result:\n    type: stdout\n    format: |-\n      $( inputs.inherit_format && inputs.search_target.format ? inputs.search_target.format : null )\n    streamable: true\nstdout: \"search_result$( inputs.inherit_format ? inputs.search_target.nameext : '.txt')\"\n\nbaseCommand: grep\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\ns:author:\n- class: s:Person\n  s:email: mailto:pvh@sanbi.ac.za\n  s:identifier: https://orcid.org/0000-0001-6553-5274\n  s:name: Peter van Heusden\nsuccessCodes:\n- 0\n- 1\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'ignore_case', 'doc': 'ignore case while matching', 'inputBinding': {'prefix': '-i'}, 'type': ['null', 'boolean']}, {'id': 'inherit_format', 'doc': 'copy format from search_target input to result output', 'type': ['null', 'boolean']}, {'id': 'invert_selection', 'doc': 'print non-matching lines', 'inputBinding': {'prefix': '-v'}, 'type': ['null', 'boolean']}, {'id': 'line_no', 'doc': 'add line number prefix to results', 'inputBinding': {'prefix': '-n'}, 'type': ['null', 'boolean']}, {'id': 'lines_after', 'doc': 'print up to N lines of trailing content', 'inputBinding': {'prefix': '-A'}, 'type': ['null', 'int']}, {'id': 'lines_before', 'doc': 'print up to N lines of leading content', 'inputBinding': {'prefix': '-B'}, 'type': ['null', 'int']}, {'id': 'literal_pattern', 'doc': 'interpret the pattern as a literal string, not a regular expression', 'inputBinding': {'prefix': '-F'}, 'type': ['null', 'boolean']}, {'id': 'pattern', 'doc': 'pattern to search for', 'inputBinding': {'prefix': '-e'}, 'type': 'string'}, {'id': 'search_target', 'streamable': True, 'doc': 'file to search', 'inputBinding': {'position': 100}, 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'result', 'streamable': True, 'format': '$( inputs.inherit_format && inputs.search_target.format ? inputs.search_target.format : null )', 'type': 'stdout'}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'busybox:latest'}, {'class': 'ResourceRequirement', 'coresMin': 1, 'ramMin': 10}]",
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": "grep",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "print lines that match patterns",
    "cwl_stdout": "search_result$( inputs.inherit_format ? inputs.search_target.nameext : '.txt')",
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": "grep",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": "[{'class': 's:Person', 's:email': 'mailto:pvh@sanbi.ac.za', 's:identifier': 'https://orcid.org/0000-0001-6553-5274', 's:name': 'Peter van Heusden'}]",
    "cwl_successCodes": "[0, 1]",
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "util/rename.cwl",
    "sha": "dd87c80d581f9068ab7da0dfdd38a9e79e768120",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/util/rename.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.0\nclass: ExpressionTool\n\ndoc: |\n  Also consider https://www.commonwl.org/user_guide/misc/#rename-an-input-file\n  or https://www.commonwl.org/user_guide/misc/#rename-an-output-file\n\nrequirements:\n  InlineJavascriptRequirement: {}\n\ninputs:\n  srcfile:\n    type: File\n  newname:\n    type: string\n\nexpression: |\n  ${\n     inputs.srcfile.basename = inputs.newname;\n     return {\"outfile\": inputs.srcfile};\n   }\n\noutputs:\n  outfile:\n    type: File\n",
    "cwl_class": "ExpressionTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'newname', 'type': 'string'}, {'id': 'srcfile', 'type': 'File'}]",
    "cwl_outputs": "[{'id': 'outfile', 'type': 'File'}]",
    "cwl_hints": null,
    "cwl_cwlVersion": "v1.0",
    "cwl_baseCommand": null,
    "cwl_arguments": null,
    "cwl_$namespaces": null,
    "cwl_$schemas": null,
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "Also consider https://www.commonwl.org/user_guide/misc/#rename-an-input-file\nor https://www.commonwl.org/user_guide/misc/#rename-an-output-file\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": null,
    "cwl_s:creator": null,
    "cwl_label": null,
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": null,
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": "${\n   inputs.srcfile.basename = inputs.newname;\n   return {\"outfile\": inputs.srcfile};\n }\n",
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "vdjtools/vdjtools-calc-basic-stats.cwl",
    "sha": "fb096a5519ce55e6589450f33520f0005b8ce990",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/vdjtools/vdjtools-calc-basic-stats.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.1\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    ramMin: 3814\n    coresMin: 2\n  DockerRequirement:\n    dockerPull: yyasumizu/vdjtools\n\n\ninputs:\n  unweighted:\n    type: boolean?\n    inputBinding:\n      prefix: \"--unweighted\"\n      position: 5\n\n  vdj_file:\n    type: File\n    inputBinding:\n      position: 6\n\n  output_prefix:\n    type: string?\n    default: \"./\"\n    inputBinding:\n      position: 11\n\n\noutputs:\n  \n  basic_stats_file:\n    type: File\n    outputBinding:\n      glob: \"*\"\n\n\nbaseCommand: [\"vdjtools\", \"CalcBasicStats\"]\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"VDJtools Calc Basic Stats\"\ns:alternateName: \"Computes a set of basic sample statistics, such as read counts, number of clonotypes, etc\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\n  immune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\n  is able to perform various forms of cross-sample analysis. Both comprehensive tabular output\n  and publication-ready plots are provided.\n  \n  This routine computes a set of basic sample statistics, such as read counts, number of\n  clonotypes, etc.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'output_prefix', 'default': './', 'type': ['null', 'string'], 'inputBinding': {'position': 11}}, {'id': 'unweighted', 'type': ['null', 'boolean'], 'inputBinding': {'position': 5, 'prefix': '--unweighted'}}, {'id': 'vdj_file', 'type': 'File', 'inputBinding': {'position': 6}}]",
    "cwl_outputs": "[{'id': 'basic_stats_file', 'type': 'File', 'outputBinding': {'glob': '*'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'yyasumizu/vdjtools'}, {'class': 'ResourceRequirement', 'coresMin': 2, 'ramMin': 3814}]",
    "cwl_cwlVersion": "v1.1",
    "cwl_baseCommand": "['vdjtools', 'CalcBasicStats']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\nimmune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\nis able to perform various forms of cross-sample analysis. Both comprehensive tabular output\nand publication-ready plots are provided.\n\nThis routine computes a set of basic sample statistics, such as read counts, number of\nclonotypes, etc.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "VDJtools Calc Basic Stats",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "Computes a set of basic sample statistics, such as read counts, number of clonotypes, etc",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "vdjtools/vdjtools-calc-diversity-stats.cwl",
    "sha": "d13cd5f4ceb0e1ba78cadf315899325ade43b697",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/vdjtools/vdjtools-calc-diversity-stats.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.1\nclass: CommandLineTool\n\nrequirements:\n  InlineJavascriptRequirement: {}\nhints:\n  ResourceRequirement:\n    ramMin: 3814\n    coresMin: 2\n  DockerRequirement:\n    dockerPull: yyasumizu/vdjtools\n  \ninputs:\n  intersect_type:\n    type:\n    - \"null\"\n    - type: enum\n      symbols:\n      - \"strict\"\n      - \"nt\"\n      - \"ntV\"\n      - \"ntVJ\"\n      - \"aa\"\n      - \"aaV\"\n      - \"aaVJ\"\n      - \"aa!nt\"\n    inputBinding:\n      prefix: \"--intersect-type\"\n      position: 5\n    doc: |\n      Specifies which clonotype features (CDR3 sequence, V/J segments, hypermutations)\n      will be compared when checking if two clonotypes match.\n      Default: strict\n\n  vdj_file:\n    type: File\n    inputBinding:\n      position: 6\n\n  output_prefix:\n    type: string?\n    default: \"./\"\n    inputBinding:\n      position: 7\n\n\noutputs:\n  diversity_stats_file:\n    type: File\n    outputBinding:\n      glob: \"*.exact.txt\"\n\nbaseCommand: [\"vdjtools\", \"CalcDiversityStats\"]\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"VDJtools Calc Diversity Stats\"\ns:alternateName: \"Computes a set of diversity statistics\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\n  immune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\n  is able to perform various forms of cross-sample analysis. Both comprehensive tabular output\n  and publication-ready plots are provided.\n\n  Computes a set of diversity statistics, including\n  - Observed diversity, the total number of clonotypes in a sample\n  - Lower bound total diversity (LBTD) estimates\n  - Chao estimate (denoted chao1)\n  - Efron-Thisted estimate\n  - Diversity indices\n    * Shannon-Wiener index. The exponent of clonotype frequency distribution entropy is returned.\n    * Normalized Shannon-Wiener index. Normalized (divided by log[number of clonotypes]) entropy\n      of clonotype frequency distribution. Note that plain entropy is returned, not its exponent.\n    * Inverse Simpson index\n  - Extrapolated Chao diversity estimate (denoted chaoE)\n  - The d50 index, a recently developed immune diversity estimate\n\n  --downsample-to, --extrapolate-to, and --resample-trials parameters are omitted as the input is\n  a single file. Only not resampled output is returned.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'intersect_type', 'doc': 'Specifies which clonotype features (CDR3 sequence, V/J segments, hypermutations)\\nwill be compared when checking if two clonotypes match.\\nDefault: strict\\n', 'type': ['null', {'name': '_:0f192874-af58-4b72-9b65-2eafe7af9a7d', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/strict', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/nt', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/ntV', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/ntVJ', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/aa', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/aaV', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/aaVJ', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/aa!nt'], 'type': 'enum'}], 'inputBinding': {'position': 5, 'prefix': '--intersect-type'}}, {'id': 'output_prefix', 'default': './', 'type': ['null', 'string'], 'inputBinding': {'position': 7}}, {'id': 'vdj_file', 'type': 'File', 'inputBinding': {'position': 6}}]",
    "cwl_outputs": "[{'id': 'diversity_stats_file', 'type': 'File', 'outputBinding': {'glob': '*.exact.txt'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'yyasumizu/vdjtools'}, {'class': 'ResourceRequirement', 'coresMin': 2, 'ramMin': 3814}]",
    "cwl_cwlVersion": "v1.1",
    "cwl_baseCommand": "['vdjtools', 'CalcDiversityStats']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InlineJavascriptRequirement'}]",
    "cwl_doc": "VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\nimmune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\nis able to perform various forms of cross-sample analysis. Both comprehensive tabular output\nand publication-ready plots are provided.\n\nComputes a set of diversity statistics, including\n- Observed diversity, the total number of clonotypes in a sample\n- Lower bound total diversity (LBTD) estimates\n- Chao estimate (denoted chao1)\n- Efron-Thisted estimate\n- Diversity indices\n  * Shannon-Wiener index. The exponent of clonotype frequency distribution entropy is returned.\n  * Normalized Shannon-Wiener index. Normalized (divided by log[number of clonotypes]) entropy\n    of clonotype frequency distribution. Note that plain entropy is returned, not its exponent.\n  * Inverse Simpson index\n- Extrapolated Chao diversity estimate (denoted chaoE)\n- The d50 index, a recently developed immune diversity estimate\n\n--downsample-to, --extrapolate-to, and --resample-trials parameters are omitted as the input is\na single file. Only not resampled output is returned.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "VDJtools Calc Diversity Stats",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "Computes a set of diversity statistics",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "vdjtools/vdjtools-calc-spectratype.cwl",
    "sha": "9424492dcc937bdc00a6251175c0b058051ad3d0",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/vdjtools/vdjtools-calc-spectratype.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.1\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    ramMin: 3814\n    coresMin: 2\n  DockerRequirement:\n    dockerPull: yyasumizu/vdjtools\n  \n\ninputs:\n  unweighted:\n    type: boolean?\n    inputBinding:\n      prefix: \"--unweighted\"\n      position: 5\n\n  amino_acid:\n    type: boolean?\n    inputBinding:\n      prefix: \"--amino-acid\"\n      position: 6\n\n  vdj_file:\n    type: File\n    inputBinding:\n      position: 7\n\n  output_prefix:\n    type: string?\n    default: \"./\"\n    inputBinding:\n      position: 8\n\n\noutputs:\n  \n  spectratype_insert_wt_file:\n    type: File\n    outputBinding:\n      glob: \"*.insert.wt.txt\"\n\n  spectratype_ndn_wt_file:\n    type: File\n    outputBinding:\n      glob: \"*.ndn.wt.txt\"\n\n  spectratype_aa_wt_file:\n    type: File?\n    outputBinding:\n      glob: \"*.aa.wt.txt\"\n\n  spectratype_nt_wt_file:\n    type: File?\n    outputBinding:\n      glob: \"*.nt.wt.txt\"\n\n\nbaseCommand: [\"vdjtools\", \"CalcSpectratype\"]\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"VDJtools Calc Spectratype\"\ns:alternateName: \"Calculates spectratype, that is, histogram of read counts by CDR3 nucleotide length\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\n  immune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\n  is able to perform various forms of cross-sample analysis. Both comprehensive tabular output\n  and publication-ready plots are provided.\n  \n  Calculates spectratype, that is, histogram of read counts by CDR3 nucleotide length. The\n  spectratype is useful to detect pathological and highly clonal repertoires, as the spectratype\n  of non-expanded T- and B-cells has a symmetric gaussian-like distribution.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'amino_acid', 'type': ['null', 'boolean'], 'inputBinding': {'position': 6, 'prefix': '--amino-acid'}}, {'id': 'output_prefix', 'default': './', 'type': ['null', 'string'], 'inputBinding': {'position': 8}}, {'id': 'unweighted', 'type': ['null', 'boolean'], 'inputBinding': {'position': 5, 'prefix': '--unweighted'}}, {'id': 'vdj_file', 'type': 'File', 'inputBinding': {'position': 7}}]",
    "cwl_outputs": "[{'id': 'spectratype_aa_wt_file', 'type': ['null', 'File'], 'outputBinding': {'glob': '*.aa.wt.txt'}}, {'id': 'spectratype_insert_wt_file', 'type': 'File', 'outputBinding': {'glob': '*.insert.wt.txt'}}, {'id': 'spectratype_ndn_wt_file', 'type': 'File', 'outputBinding': {'glob': '*.ndn.wt.txt'}}, {'id': 'spectratype_nt_wt_file', 'type': ['null', 'File'], 'outputBinding': {'glob': '*.nt.wt.txt'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'yyasumizu/vdjtools'}, {'class': 'ResourceRequirement', 'coresMin': 2, 'ramMin': 3814}]",
    "cwl_cwlVersion": "v1.1",
    "cwl_baseCommand": "['vdjtools', 'CalcSpectratype']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\nimmune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\nis able to perform various forms of cross-sample analysis. Both comprehensive tabular output\nand publication-ready plots are provided.\n\nCalculates spectratype, that is, histogram of read counts by CDR3 nucleotide length. The\nspectratype is useful to detect pathological and highly clonal repertoires, as the spectratype\nof non-expanded T- and B-cells has a symmetric gaussian-like distribution.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "VDJtools Calc Spectratype",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "Calculates spectratype, that is, histogram of read counts by CDR3 nucleotide length",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "vdjtools/vdjtools-convert-mixcr.cwl",
    "sha": "e8113fc9670d6e33f4ce2db0e882d86e80adae7c",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/vdjtools/vdjtools-convert-mixcr.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.1\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    ramMin: 3814\n    coresMin: 2\n  DockerRequirement:\n    dockerPull: yyasumizu/vdjtools\n\ninputs:\n  clonotypes_file:\n    type: File\n    inputBinding:\n      position: 10\n\n  output_prefix:\n    type: string?\n    default: \"./\"\n    inputBinding:\n      position: 11\n\n\noutputs:\n  vdj_file:\n    type: File\n    outputBinding:\n      glob: \"*.gz\"\n\nbaseCommand: [\"vdjtools\", \"Convert\", \"--compress\", \"--software\", \"MiXcr\"]\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"VDJtools Convert from MiXcr\"\ns:alternateName: \"Converts datasets from MiXcr format to VDJtools format\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\n  immune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\n  is able to perform various forms of cross-sample analysis. Both comprehensive tabular output\n  and publication-ready plots are provided.\n  \n  Converts datasets from MiXcr format to VDJtools format. Output from MiXCR software export\n  routine in full (default) mode can be used without any pre-processing.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'clonotypes_file', 'type': 'File', 'inputBinding': {'position': 10}}, {'id': 'output_prefix', 'default': './', 'type': ['null', 'string'], 'inputBinding': {'position': 11}}]",
    "cwl_outputs": "[{'id': 'vdj_file', 'type': 'File', 'outputBinding': {'glob': '*.gz'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'yyasumizu/vdjtools'}, {'class': 'ResourceRequirement', 'coresMin': 2, 'ramMin': 3814}]",
    "cwl_cwlVersion": "v1.1",
    "cwl_baseCommand": "['vdjtools', 'Convert', '--compress', '--software', 'MiXcr']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\nimmune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\nis able to perform various forms of cross-sample analysis. Both comprehensive tabular output\nand publication-ready plots are provided.\n\nConverts datasets from MiXcr format to VDJtools format. Output from MiXCR software export\nroutine in full (default) mode can be used without any pre-processing.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "VDJtools Convert from MiXcr",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "Converts datasets from MiXcr format to VDJtools format",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "vdjtools/vdjtools-join-samples.cwl",
    "sha": "2de9a729a848d99a431959cd0267463c86016dc3",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/vdjtools/vdjtools-join-samples.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.1\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    ramMin: 3814\n    coresMin: 2\n  DockerRequirement:\n    dockerPull: yyasumizu/vdjtools\nrequirements:\n  InlineJavascriptRequirement:\n    expressionLib:\n    - var get_label = function(i) {\n          var rootname = inputs.molecule_info_h5[i].basename.split('.').slice(0,-1).join('.');\n          rootname = (rootname==\"\")?inputs.molecule_info_h5[i].basename:rootname;\n          return inputs.gem_well_labels?inputs.gem_well_labels[i].replace(/,/g, \"_\"):rootname;\n      };\n  InitialWorkDirRequirement:\n    listing: |\n      ${\n        var entry = \"file.name\\tsample.id\\n\"\n        for (var i=0; i < inputs.vdj_file.length; i++){\n          entry += inputs.vdj_file[i].path + \"\\t\" + inputs.vdj_name[i] + \"\\n\"\n        }\n        return [{\n          \"entry\": entry,\n          \"entryname\": \"metadata.tsv\"\n        }];\n      }\n\ninputs:\n  vdj_file:\n    type: File[]\n    doc: |\n      VDJ formatted files from the vdjtools-convert-mixcr.cwl tool\n\n  vdj_name:\n    type: string[]\n    doc: |\n      Unique names for the files provided in vdj_file\n\n  intersect_type:\n    type:\n    - \"null\"\n    - type: enum\n      symbols:\n      - \"strict\"\n      - \"nt\"\n      - \"ntV\"\n      - \"ntVJ\"\n      - \"aa\"\n      - \"aaV\"\n      - \"aaVJ\"\n      - \"aa!nt\"\n    inputBinding:\n      prefix: \"--intersect-type\"\n      position: 5\n    doc: |\n      Specifies which clonotype features (CDR3 sequence, V/J segments, hypermutations)\n      will be compared when checking if two clonotypes match.\n      Default: aa\n\n  min_times_detected:\n    type: int?\n    inputBinding:\n      prefix: \"--times-detected\"\n      position: 6\n    doc: |\n      Minimal number of samples where clonotype should be detected.\n      Default: 2\n\n  output_prefix:\n    type: string?\n    default: \"./\"\n    inputBinding:\n      position: 7\n\n\noutputs:\n  combined_vdj_file:\n    type: File\n    outputBinding:\n      glob: \"*.txt.gz\"\n\n  summary_file:\n    type: File\n    outputBinding:\n      glob: \"*.summary.txt\"\n\n  metadata_file:\n    type: File\n    outputBinding:\n      glob: \"metadata.tsv\"\n\n  venn_diag_plot:\n    type: File\n    outputBinding:\n      glob: \"*.venn.pdf\"\n\n\nbaseCommand: [\"vdjtools\", \"JoinSamples\", \"--compress\", \"--plot\", \"--plot-type\", \"png\", \"--metadata\", \"metadata.tsv\"]\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"VDJtools Join Samples\"\ns:alternateName: \"Joins several clonotype tables together to form a joint clonotype abundance table\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\n  immune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\n  is able to perform various forms of cross-sample analysis. Both comprehensive tabular output\n  and publication-ready plots are provided.\n  \n  Joins several clonotype tables together to form a joint clonotype abundance table. Joint\n  clonotype holds information on all clonotypes that match under a certain comparison criteria\n  (e.g. identical CDR3nt and V segment), their samples of origin and corresponding abundances.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'intersect_type', 'doc': 'Specifies which clonotype features (CDR3 sequence, V/J segments, hypermutations)\\nwill be compared when checking if two clonotypes match.\\nDefault: aa\\n', 'type': ['null', {'name': '_:bf879079-e60d-49db-9b71-56d5c69b84a3', 'symbols': ['file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/strict', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/nt', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/ntV', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/ntVJ', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/aa', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/aaV', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/aaVJ', 'file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/#intersect_type/aa!nt'], 'type': 'enum'}], 'inputBinding': {'position': 5, 'prefix': '--intersect-type'}}, {'id': 'min_times_detected', 'doc': 'Minimal number of samples where clonotype should be detected.\\nDefault: 2\\n', 'type': ['null', 'int'], 'inputBinding': {'position': 6, 'prefix': '--times-detected'}}, {'id': 'output_prefix', 'default': './', 'type': ['null', 'string'], 'inputBinding': {'position': 7}}, {'id': 'vdj_file', 'doc': 'VDJ formatted files from the vdjtools-convert-mixcr.cwl tool\\n', 'type': {'name': '_:30fe73d6-5427-4810-b69a-2b5abdcddc1b', 'items': 'File', 'type': 'array'}}, {'id': 'vdj_name', 'doc': 'Unique names for the files provided in vdj_file\\n', 'type': {'name': '_:0bae1616-3505-4c62-91ba-57037d8b754c', 'items': 'string', 'type': 'array'}}]",
    "cwl_outputs": "[{'id': 'combined_vdj_file', 'type': 'File', 'outputBinding': {'glob': '*.txt.gz'}}, {'id': 'metadata_file', 'type': 'File', 'outputBinding': {'glob': 'metadata.tsv'}}, {'id': 'summary_file', 'type': 'File', 'outputBinding': {'glob': '*.summary.txt'}}, {'id': 'venn_diag_plot', 'type': 'File', 'outputBinding': {'glob': '*.venn.pdf'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'yyasumizu/vdjtools'}, {'class': 'ResourceRequirement', 'coresMin': 2, 'ramMin': 3814}]",
    "cwl_cwlVersion": "v1.1",
    "cwl_baseCommand": "['vdjtools', 'JoinSamples', '--compress', '--plot', '--plot-type', 'png', '--metadata', 'metadata.tsv']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": "[{'class': 'InitialWorkDirRequirement', 'listing': '${\\n  var entry = \"file.name\\\\tsample.id\\\\n\"\\n  for (var i=0; i < inputs.vdj_file.length; i++){\\n    entry += inputs.vdj_file[i].path + \"\\\\t\" + inputs.vdj_name[i] + \"\\\\n\"\\n  }\\n  return [{\\n    \"entry\": entry,\\n    \"entryname\": \"metadata.tsv\"\\n  }];\\n}\\n'}, {'class': 'InlineJavascriptRequirement', 'expressionLib': ['var get_label = function(i) { var rootname = inputs.molecule_info_h5[i].basename.split(\\'.\\').slice(0,-1).join(\\'.\\'); rootname = (rootname==\"\")?inputs.molecule_info_h5[i].basename:rootname; return inputs.gem_well_labels?inputs.gem_well_labels[i].replace(/,/g, \"_\"):rootname; };']}]",
    "cwl_doc": "VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\nimmune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\nis able to perform various forms of cross-sample analysis. Both comprehensive tabular output\nand publication-ready plots are provided.\n\nJoins several clonotype tables together to form a joint clonotype abundance table. Joint\nclonotype holds information on all clonotypes that match under a certain comparison criteria\n(e.g. identical CDR3nt and V segment), their samples of origin and corresponding abundances.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "VDJtools Join Samples",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "Joins several clonotype tables together to form a joint clonotype abundance table",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null,
    "cwl_requirements_error": "Requirements should be an object, not a list"
  },
  {
    "path": "vdjtools/vdjtools-plot-fancy-spectratype.cwl",
    "sha": "077722a3fa80850be72804421729b3393de37e64",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/vdjtools/vdjtools-plot-fancy-spectratype.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.1\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    ramMin: 3814\n    coresMin: 2\n  DockerRequirement:\n    dockerPull: yyasumizu/vdjtools\n\ninputs:\n  top:\n    type: int?\n    inputBinding:\n      prefix: \"--top\"\n      position: 5\n    doc: |\n      Number of top clonotypes to visualize. Should not exceed 20.\n      Default: 10\n\n  vdj_file:\n    type: File\n    inputBinding:\n      position: 6\n\n  output_prefix:\n    type: string?\n    default: \"./\"\n    inputBinding:\n      position: 7\n\noutputs:\n  fancy_spectratype_file:\n    type: File\n    outputBinding:\n      glob: \"*.txt\"\n\n  fancy_spectratype_plot:\n    type: File\n    outputBinding:\n      glob: \"*.pdf\"\n\nbaseCommand: [\"vdjtools\", \"PlotFancySpectratype\"]\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"VDJtools Plot Spectratype\"\ns:alternateName: \"Plots a spectratype that displays CDR3 lengths for top N clonotypes in a given sample\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\n  immune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\n  is able to perform various forms of cross-sample analysis. Both comprehensive tabular output\n  and publication-ready plots are provided.\n  \n  Plots a spectratype that also displays CDR3 lengths for top N clonotypes in a given sample.\n  This plot allows to detect the highly-expanded clonotypes.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'output_prefix', 'default': './', 'type': ['null', 'string'], 'inputBinding': {'position': 7}}, {'id': 'top', 'doc': 'Number of top clonotypes to visualize. Should not exceed 20.\\nDefault: 10\\n', 'type': ['null', 'int'], 'inputBinding': {'position': 5, 'prefix': '--top'}}, {'id': 'vdj_file', 'type': 'File', 'inputBinding': {'position': 6}}]",
    "cwl_outputs": "[{'id': 'fancy_spectratype_file', 'type': 'File', 'outputBinding': {'glob': '*.txt'}}, {'id': 'fancy_spectratype_plot', 'type': 'File', 'outputBinding': {'glob': '*.pdf'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'yyasumizu/vdjtools'}, {'class': 'ResourceRequirement', 'coresMin': 2, 'ramMin': 3814}]",
    "cwl_cwlVersion": "v1.1",
    "cwl_baseCommand": "['vdjtools', 'PlotFancySpectratype']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\nimmune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\nis able to perform various forms of cross-sample analysis. Both comprehensive tabular output\nand publication-ready plots are provided.\n\nPlots a spectratype that also displays CDR3 lengths for top N clonotypes in a given sample.\nThis plot allows to detect the highly-expanded clonotypes.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "VDJtools Plot Spectratype",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "Plots a spectratype that displays CDR3 lengths for top N clonotypes in a given sample",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  },
  {
    "path": "vdjtools/vdjtools-plot-quantile-stats.cwl",
    "sha": "40da134eb2a769d1788f484b4cf91ce583a58869",
    "source": "https://api.github.com/common-workflow-library/bio-cwl-tools/blob/release/vdjtools/vdjtools-plot-quantile-stats.cwl",
    "content": "#!/usr/bin/env cwl-runner\ncwlVersion: v1.1\nclass: CommandLineTool\n\nhints:\n  ResourceRequirement:\n    ramMin: 3814\n    coresMin: 2\n  DockerRequirement:\n    dockerPull: yyasumizu/vdjtools\n  \ninputs:\n  top:\n    type: int?\n    inputBinding:\n      prefix: \"--top\"\n      position: 5\n\n  vdj_file:\n    type: File\n    inputBinding:\n      position: 6\n\n  output_prefix:\n    type: string?\n    default: \"./\"\n    inputBinding:\n      position: 7\n\noutputs:\n  quantile_stats_file:\n    type: File\n    outputBinding:\n      glob: \"*.txt\"\n\n  quantile_stats_plot:\n    type: File\n    outputBinding:\n      glob: \"*.pdf\"\n\nbaseCommand: [\"vdjtools\", \"PlotQuantileStats\"]\n\n\n$namespaces:\n  s: http://schema.org/\n\n$schemas:\n- https://schema.org/version/latest/schemaorg-current-https.rdf\n\nlabel: \"VDJtools Plot Quantile Stats\"\ns:alternateName: \"Plots a three-layer donut chart to visualize the repertoire clonality\"\n\ns:license: http://www.apache.org/licenses/LICENSE-2.0\n\ns:creator:\n- class: s:Organization\n  s:legalName: \"Cincinnati Children's Hospital Medical Center\"\n  s:location:\n  - class: s:PostalAddress\n    s:addressCountry: \"USA\"\n    s:addressLocality: \"Cincinnati\"\n    s:addressRegion: \"OH\"\n    s:postalCode: \"45229\"\n    s:streetAddress: \"3333 Burnet Ave\"\n    s:telephone: \"+1(513)636-4200\"\n  s:logo: \"https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png\"\n  s:department:\n  - class: s:Organization\n    s:legalName: \"Allergy and Immunology\"\n    s:department:\n    - class: s:Organization\n      s:legalName: \"Barski Research Lab\"\n      s:member:\n      - class: s:Person\n        s:name: Michael Kotliar\n        s:email: mailto:misha.kotliar@gmail.com\n        s:sameAs:\n        - id: http://orcid.org/0000-0002-6486-3898\n\n\ndoc: |\n  VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\n  immune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\n  is able to perform various forms of cross-sample analysis. Both comprehensive tabular output\n  and publication-ready plots are provided.\n  \n  Plots a three-layer donut chart to visualize the repertoire clonality.\n  - First layer (\u201cset\u201d) includes the frequency of singleton (\u201c1\u201d, met once), doubleton\n    (\u201c2\u201d, met twice) and high-order (\u201c3+\u201d, met three or more times) clonotypes. Singleton and\n    doubleton frequency is an important factor in estimating the total repertoire diversity,\n    e.g. Chao1 diversity estimator (see Colwell et al). We have also recently shown that in\n    whole blood samples, singletons have very nice correlation with the number of naive T-cells,\n    which are the backbone of immune repertoire diversity.\n  - The second layer (\u201cquantile\u201d), displays the abundance of top 20% (\u201cQ1\u201d), next 20% (\u201cQ2\u201d), ...\n    (up to \u201cQ5\u201d) clonotypes for clonotypes from \u201c3+\u201d set. In our experience this quantile plot is\n    a simple and efficient way to display repertoire clonality.\n  - The last layer (\u201ctop\u201d) displays the individual abundances of top N clonotypes.\n",
    "cwl_class": "CommandLineTool",
    "cwl_id": "file:///Users/gracewang/Documents/Breakthrough%20AI/Axle%20Informatics/LLM-Bioinformatic-Pipeline-Generation/",
    "cwl_inputs": "[{'id': 'output_prefix', 'default': './', 'type': ['null', 'string'], 'inputBinding': {'position': 7}}, {'id': 'top', 'type': ['null', 'int'], 'inputBinding': {'position': 5, 'prefix': '--top'}}, {'id': 'vdj_file', 'type': 'File', 'inputBinding': {'position': 6}}]",
    "cwl_outputs": "[{'id': 'quantile_stats_file', 'type': 'File', 'outputBinding': {'glob': '*.txt'}}, {'id': 'quantile_stats_plot', 'type': 'File', 'outputBinding': {'glob': '*.pdf'}}]",
    "cwl_hints": "[{'class': 'DockerRequirement', 'dockerPull': 'yyasumizu/vdjtools'}, {'class': 'ResourceRequirement', 'coresMin': 2, 'ramMin': 3814}]",
    "cwl_cwlVersion": "v1.1",
    "cwl_baseCommand": "['vdjtools', 'PlotQuantileStats']",
    "cwl_arguments": null,
    "cwl_$namespaces": "{'s': 'http://schema.org/'}",
    "cwl_$schemas": "['https://schema.org/version/latest/schemaorg-current-https.rdf']",
    "cwl_requirements": null,
    "cwl_doc": "VDJtools is an open-source Java/Groovy-based framework designed to facilitate analysis of\nimmune repertoire sequencing (RepSeq) data. VDJtools computes a wide set of statistics and\nis able to perform various forms of cross-sample analysis. Both comprehensive tabular output\nand publication-ready plots are provided.\n\nPlots a three-layer donut chart to visualize the repertoire clonality.\n- First layer (\u201cset\u201d) includes the frequency of singleton (\u201c1\u201d, met once), doubleton\n  (\u201c2\u201d, met twice) and high-order (\u201c3+\u201d, met three or more times) clonotypes. Singleton and\n  doubleton frequency is an important factor in estimating the total repertoire diversity,\n  e.g. Chao1 diversity estimator (see Colwell et al). We have also recently shown that in\n  whole blood samples, singletons have very nice correlation with the number of naive T-cells,\n  which are the backbone of immune repertoire diversity.\n- The second layer (\u201cquantile\u201d), displays the abundance of top 20% (\u201cQ1\u201d), next 20% (\u201cQ2\u201d), ...\n  (up to \u201cQ5\u201d) clonotypes for clonotypes from \u201c3+\u201d set. In our experience this quantile plot is\n  a simple and efficient way to display repertoire clonality.\n- The last layer (\u201ctop\u201d) displays the individual abundances of top N clonotypes.\n",
    "cwl_stdout": null,
    "cwl_s:name": null,
    "cwl_s:license": "http://www.apache.org/licenses/LICENSE-2.0",
    "cwl_s:creator": "[{'class': 's:Organization', 's:legalName': \"Cincinnati Children's Hospital Medical Center\", 's:location': [{'class': 's:PostalAddress', 's:addressCountry': 'USA', 's:addressLocality': 'Cincinnati', 's:addressRegion': 'OH', 's:postalCode': '45229', 's:streetAddress': '3333 Burnet Ave', 's:telephone': '+1(513)636-4200'}], 's:logo': 'https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png', 's:department': [{'class': 's:Organization', 's:legalName': 'Allergy and Immunology', 's:department': [{'class': 's:Organization', 's:legalName': 'Barski Research Lab', 's:member': [{'class': 's:Person', 's:name': 'Michael Kotliar', 's:email': 'mailto:misha.kotliar@gmail.com', 's:sameAs': [{'id': 'http://orcid.org/0000-0002-6486-3898'}]}]}]}]}]",
    "cwl_label": "VDJtools Plot Quantile Stats",
    "cwl_s:downloadUrl": null,
    "cwl_s:codeRepository": null,
    "cwl_s:about": null,
    "cwl_stderr": null,
    "cwl_s:alternateName": "Plots a three-layer donut chart to visualize the repertoire clonality",
    "cwl_s:author": null,
    "cwl_successCodes": null,
    "cwl_expression": null,
    "cwl_s:isPartOf": null,
    "cwl_s:mainEntity": null
  }
]